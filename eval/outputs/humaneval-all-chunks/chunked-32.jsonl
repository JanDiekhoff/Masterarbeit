{"task_id": "HumanEval/0", "completion": "\n# Python\n#      Check if in given list of numbers, are any two numbers closer to each other than\n#     given threshold.\n#     >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n#     False\n#     >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n#     True\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    return len(set(numbers) & set(numbers[::-1])) == 0 and abs(min(numbers) - max(numbers)) < threshold "}
{"task_id": "HumanEval/1", "completion": "\n# Python\n#      Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n#     separate those group into separate strings and return the list of those.\n#     Separate groups are balanced (each open brace is properly closed) and not nested within each other\n#     Ignore any spaces in the input string.\n#     >>> separate_paren_groups('( ) (( )) (( )( ))')\n#     ['()', '(())', '(()())']\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    return [group for group in paren_string.split('(') if group.startswith('(') and group.endswith(')')] "}
{"task_id": "HumanEval/2", "completion": "\n# Python\n#      Given a positive floating point number, it can be decomposed into\n#     and integer part (largest integer smaller than given number) and decimals\n#     (leftover part always smaller than 1).\n#     Return the decimal part of the number.\n#     >>> truncate_number(3.5)\n#     0.5\ndef truncate_number(number: float) -> float:\n    return round(number, 2) "}
{"task_id": "HumanEval/3", "completion": "\n# Python\n#      You're given a list of deposit and withdrawal operations on a bank account that starts with\n#     zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n#     at that point function should return True. Otherwise it should return False.\n#     >>> below_zero([1, 2, 3])\n#     False\n#     >>> below_zero([1, 2, -4, 5])\n#     True\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    return sum(operations) < 0 "}
{"task_id": "HumanEval/4", "completion": "\n# Python\n#      For a given list of input numbers, calculate Mean Absolute Deviation\n#     around the mean of this dataset.\n#     Mean Absolute Deviation is the average absolute difference between each\n#     element and a centerpoint (mean in this case)\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    return np.mean(np.abs(numbers - np.mean(numbers))) "}
{"task_id": "HumanEval/5", "completion": "\n# Python\n#      Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n#     >>> intersperse([], 4)\n#     []\n#     >>> intersperse([1, 2, 3], 4)\n#     [1, 4, 2, 4, 3]\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [delimeter] + [number for number in numbers] "}
{"task_id": "HumanEval/6", "completion": "\n# Python\n#      Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n#     For each of the group, output the deepest level of nesting of parentheses.\n#     E.g. (()()) has maximum two levels of nesting while ((())) has three.\n#     >>> parse_nested_parens('(()()) ((())) () ((())()())')\n#     [2, 3, 1, 3]\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    return [len(paren_string) - len(paren_string.split())] "}
{"task_id": "HumanEval/7", "completion": "\n# Python\n#      Filter an input list of strings only for ones that contain given substring\n#     >>> filter_by_substring([], 'a')\n#     []\n#     >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n#     ['abc', 'bacd', 'array']\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s] "}
{"task_id": "HumanEval/8", "completion": "\n# Python\n#      For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n#     Empty sum should be equal to 0 and empty product should be equal to 1.\n#     >>> sum_product([])\n#     (0, 1)\n#     >>> sum_product([1, 2, 3, 4])\n#     (10, 24)\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), product(numbers)) "}
{"task_id": "HumanEval/9", "completion": "\n# Python\n#      From a given list of integers, generate a list of rolling maximum element found until given moment\n#     in the sequence.\n#     >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n#     [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers: List[int]) -> List[int]:\n    return [max(numbers) for _ in range(len(numbers) - 1)] "}
{"task_id": "HumanEval/10", "completion": "\n# Python\n#      Test if given string is a palindrome \n#     return string == string[::-1]\ndef is_palindrome(string: str) -> bool:\n    return string == string[::-1] "}
{"task_id": "HumanEval/11", "completion": "\n# Python\n#      Input are two strings a and b consisting only of 1s and 0s.\n#     Perform binary XOR on these inputs and return result also as a string.\n#     >>> string_xor('010', '110')\n#     '100'\ndef string_xor(a: str, b: str) -> str:\n    return ''.join(map(lambda x: x if x in a else b, a)) "}
{"task_id": "HumanEval/12", "completion": "\n# Python\n#      Out of list of strings, return the longest one. Return the first one in case of multiple\n#     strings of the same length. Return None in case the input list is empty.\n#     >>> longest([])\n#     >>> longest(['a', 'b', 'c'])\n#     'a'\n#     >>> longest(['a', 'bb', 'ccc'])\n#     'ccc'\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    if len(strings) == 1:\n        return strings[0]\n    return max(strings, key=len) "}
{"task_id": "HumanEval/13", "completion": "\n# Python\n#      Return a greatest common divisor of two integers a and b\n#     >>> greatest_common_divisor(3, 5)\n#     1\n#     >>> greatest_common_divisor(25, 15)\n#     5\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    return gcd(a, b)\n"}
{"task_id": "HumanEval/14", "completion": "\n# Python\n#      Return list of all prefixes from shortest to longest of the input string\n#     >>> all_prefixes('abc')\n#     ['a', 'ab', 'abc']\ndef all_prefixes(string: str) -> List[str]:\n    return [prefix for prefix in string.split() if prefix] "}
{"task_id": "HumanEval/15", "completion": "\n# Python\n#      Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n#     >>> string_sequence(0)\n#     '0'\n#     >>> string_sequence(5)\n#     '0 1 2 3 4 5'\ndef string_sequence(n: int) -> str:\n    return ''.join(str(i) for i in range(n)) "}
{"task_id": "HumanEval/16", "completion": "\n# Python\n#      Given a string, find out how many distinct characters (regardless of case) does it consist of\n#     >>> count_distinct_characters('xyzXYZ')\n#     3\n#     >>> count_distinct_characters('Jerry')\n#     4\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string)) "}
{"task_id": "HumanEval/17", "completion": "\n# Python\n#      Input to this function is a string representing musical notes in a special ASCII format.\n#     Your task is to parse this string and return list of integers corresponding to how many beats does each\n#     not last.\n#     Here is a legend\ndef parse_music(music_string: str) -> List[int]:\n    return [i for i in range(len(music_string)) if music_string[i] == 'n'] "}
{"task_id": "HumanEval/18", "completion": "\n# Python\n#      Find how many times a given substring can be found in the original string. Count overlaping cases.\n#     >>> how_many_times('', 'a')\n#     0\n#     >>> how_many_times('aaa', 'a')\n#     3\n#     >>> how_many_times('aaaa', 'aa')\n#     3\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Find how many times a given substring can be found in the original string. Count overlaping cases.\n    :param string:\n    :param substring:\n    :return:\n    \"\"\"\n    if substring in string:\n        return 1\n    else:\n        return how_many_times(string, substring +'') + 1\nreturn how_many_times "}
{"task_id": "HumanEval/19", "completion": "\n# Python\n#      Input is a space-delimited string of numberals from 'zero' to 'nine'.\n#     Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n#     Return the string with numbers sorted from smallest to largest\n#     >>> sort_numbers('three one five')\n#     'one three five'\ndef sort_numbers(numbers: str) -> str:\n    return ''.join(sorted(numbers)) "}
{"task_id": "HumanEval/20", "completion": "\n# Python\n#      From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n#     other and return them in order (smaller number, larger number).\n#     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n#     (2.0, 2.2)\n#     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n#     (2.0, 2.0)\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    Find the two numbers in the list that are closest to each other.\n    :param numbers: List of numbers.\n    :return: Tuple of the two numbers.\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError('List must have at least two numbers.')\n    min_distance = float('inf')\n    min_index = None\n    for num in numbers:\n        if num < min_distance:\n            min_distance = num\n            min_index = 0\n        elif num > min_distance:\n            min_distance = num\n            min_index = 1\n        elif num == min_distance:\n            min_index = 1\n    return (numbers[min_index], numbers[min_index + 1]) "}
{"task_id": "HumanEval/21", "completion": "\n# Python\n#      Given list of numbers (of at least two elements), apply a linear transform to that list,\n#     such that the smallest number will become 0 and the largest will become 1\n#     >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n#     [0.0, 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    return [x / max(numbers) for x in numbers] "}
{"task_id": "HumanEval/22", "completion": "\n# Python\n#      Filter given list of any python values only for integers\n#     >>> filter_integers(['a', 3.14, 5])\n#     [5]\n#     >>> filter_integers([1, 2, 3, 'abc', {}, []])\n#     [1, 2, 3]\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [int(value) for value in values] "}
{"task_id": "HumanEval/23", "completion": "\n# Python\n#      Return length of given string\n#     >>> strlen('')\n#     0\n#     >>> strlen('abc')\n#     3\ndef strlen(string: str) -> int:\n    return len(string) "}
{"task_id": "HumanEval/24", "completion": "\n# Python\n#      For a given number n, find the largest number that divides n evenly, smaller than n\n#     >>> largest_divisor(15)\n#     5\ndef largest_divisor(n: int) -> int:\n    \"\"\"\n    Find the largest number that divides n evenly, smaller than n\n    :param n:\n    :return:\n    \"\"\"\n    if n < 2:\n        return n\n    if n % 2 == 0:\n        return n // 2\n    return largest_divisor(n // 2)\nif __name__ == '__main__':\n    print(largest_divisor(15)) "}
{"task_id": "HumanEval/25", "completion": "\n# Python\n#      Return list of prime factors of given integer in the order from smallest to largest.\n#     Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n#     Input number should be equal to the product of all factors\n#     >>> factorize(8)\n#     [2, 2, 2]\n#     >>> factorize(25)\n#     [5, 5]\n#     >>> factorize(70)\n#     [2, 5, 7]\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    :param n: integer to be factorized\n    :return: list of prime factors of n\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2]\n    if n % 3 == 0:\n        return [3]\n    if n % 5 == 0:\n        return [5]\n    if n % 7 == 0:\n        return [7]\n    if n % 11 == 0:\n        return [11]\n    if n % 13 == 0:\n        return [13]\n    if n % 17 == 0:\n        return [17]\n    if n % 21 == 0:\n        return [21]\n    if n % 29 == 0:\n        return [29]\n    if n % 37 == 0:\n        return [37]\n    if n % 41 == 0:\n        return [41]\n    if n % 49 == 0:\n        return [49]\n    if n % 53 == 0:\n        return [53]\n    if n % 59 == 0:\n        return [59]\n    if n % 61 == 0:\n        return [61]\n    if n % 67 == 0:\n        return [67]\n    if n % 71 == 0:\n        return [71]\n    if n % 73 == 0:\n        return [73]\n    if n % 79 == 0:\n        return [79]\n    if n % 83 == 0:\n        return [83]\n    if n % 89 == 0:\n        return [89]\n    if n % 97 == 0:\n        return [97]\n    if n % 101 == 0:\n        return [101]\n    if n % 103 == 0:\n        return [103]\n    if n % 107 == 0:\n        return [107]\n    if n % 111 == 0:\n        return [111]\n    if n % 113 == 0:\n        return [113]\n    if n % 117 == 0:\n        return [117]\n    if n % 121 == 0:\n        return [121]\n    if n % 125 == 0:\n        return [125]\n    if n % 129 == 0:\n        return [129]\n    if n % 137 == 0:\n        return [137]\n    if n % 141 == 0:\n        return [141]\n    if n % 145 == 0:\n        return [145]\n    if n % 153 == 0:\n        return [153]\n    if n % 157 == 0:\n        return [157]\n    if n % 161 == 0:\n        return [161]\n    if n % 165 == 0:\n        return [165]\n    if n % 173 == 0:\n        return [173]\n    if n % 177 == 0:\n        return [177]\n    if n % 181 == 0:\n        return [181]\n    if n % 185 == 0:\n        return [185]\n    if n % 193 == 0:\n        return [193]\n    if n % 197 == 0:\n        return [197]\n    if n % 201 == 0:\n        return [201]\n    if n % 205 == 0:\n        return [205]\n    if n % 213 == 0:\n        return [213]\n    if n % 217 == 0:\n        return [217]\n    if n % 221 == 0:"}
{"task_id": "HumanEval/26", "completion": "\n# Python\n#      From a list of integers, remove all elements that occur more than once.\n#     Keep order of elements left the same as in the input.\n#     >>> remove_duplicates([1, 2, 3, 2, 4])\n#     [1, 3, 4]\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [n for n in numbers if n not in set(numbers)] "}
{"task_id": "HumanEval/27", "completion": "\n# Python\n#      For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n#     >>> flip_case('Hello')\n#     'hELLO'\ndef flip_case(string: str) -> str:\n    return string.lower() if string.isupper() else string.upper() "}
{"task_id": "HumanEval/28", "completion": "\n# Python\n#      Concatenate list of strings into a single string\n#     >>> concatenate([])\n#     ''\n#     >>> concatenate(['a', 'b', 'c'])\n#     'abc'\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings) "}
{"task_id": "HumanEval/29", "completion": "\n# Python\n#      Filter an input list of strings only for ones that start with a given prefix.\n#     >>> filter_by_prefix([], 'a')\n#     []\n#     >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n#     ['abc', 'array']\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)] "}
{"task_id": "HumanEval/30", "completion": "\n# Python\n#     Return only positive numbers in the list.\n#     >>> get_positive([-1, 2, -4, 5, 6])\n#     [2, 5, 6]\n#     >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n#     [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l: list):\n    return [n for n in l if n > 0] "}
{"task_id": "HumanEval/31", "completion": "\n# Python\n#     Return true if a given number is prime, and false otherwise.\n#     >>> is_prime(6)\n#     False\n#     >>> is_prime(101)\n#     True\n#     >>> is_prime(11)\n#     True\n#     >>> is_prime(13441)\n#     True\n#     >>> is_prime(61)\n#     True\n#     >>> is_prime(4)\n#     False\n#     >>> is_prime(1)\n#     False\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True "}
{"task_id": "HumanEval/32", "completion": "\n# Python\n#     Evaluates polynomial with coefficients xs at point x.\n#     return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n#     return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)]) "}
{"task_id": "HumanEval/33", "completion": "\n# Python\n#     This function takes a list l and returns a list l' such that\n#     l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n#     to the values of the corresponding indicies of l, but sorted.\n#     >>> sort_third([1, 2, 3])\n#     [1, 2, 3]\n#     >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n#     [2, 6, 3, 4, 8, 9, 5]\ndef sort_third(l: list):\n    return [l[i] for i in range(len(l) - 1) if l[i] % 3!= 0] + [l[i] for i in range(len(l) - 1) if l[i] % 3 == 0] "}
{"task_id": "HumanEval/34", "completion": "\n# Python\n#     Return sorted unique elements in a list\n#     >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n#     [0, 2, 3, 5, 9, 123]\ndef unique(l: list):\n    return sorted(set(l)) "}
{"task_id": "HumanEval/35", "completion": "\n# Python\n#     Return maximum element in the list.\n#     >>> max_element([1, 2, 3])\n#     3\n#     >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n#     123\ndef max_element(l: list):\n    return max(l) "}
{"task_id": "HumanEval/36", "completion": "\n# Python\n#     Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n#     >>> fizz_buzz(50)\n#     0\n#     >>> fizz_buzz(78)\n#     2\n#     >>> fizz_buzz(79)\n#     3\ndef fizz_buzz(n: int):\n    return sum(1 for i in range(1, n + 1) if i % 11 == 0 and i % 13 == 0) "}
{"task_id": "HumanEval/37", "completion": "\n# Python\n#     This function takes a list l and returns a list l' such that\n#     l' is identical to l in the odd indicies, while its values at the even indicies are equal\n#     to the values of the even indicies of l, but sorted.\n#     >>> sort_even([1, 2, 3])\n#     [1, 2, 3]\n#     >>> sort_even([5, 6, 3, 4])\n#     [3, 6, 5, 4]\ndef sort_even(l: list):\n    return [i for i in l if i % 2 == 0] + [i for i in l if i % 2 == 1] "}
{"task_id": "HumanEval/38", "completion": "\n# Python\n#     returns encoded string by cycling groups of three characters.\n#     # split string to groups. Each of length 3.\n#     groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n#     # cycle elements in each group. Unless group has fewer elements than 3.\n#     groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n#     return \"\".join(groups)\ndef encode_cyclic(s: str):\n    return ''.join(map(lambda x: ''.join(map(lambda y: chr(ord(y) + 36), x)), s.split())) "}
{"task_id": "HumanEval/39", "completion": "\n# Python\n#     prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n#     >>> prime_fib(1)\n#     2\n#     >>> prime_fib(2)\n#     3\n#     >>> prime_fib(3)\n#     5\n#     >>> prime_fib(4)\n#     13\n#     >>> prime_fib(5)\n#     89\ndef prime_fib(n: int):\n    if n <= 1:\n        return False\n    if n % 2 == 0:\n        return False\n    if n == 3:\n        return True\n    if n == 5:\n        return True\n    if n == 7:\n        return True\n    if n == 11:\n        return True\n    if n == 13:\n        return True\n    if n == 19:\n        return True\n    if n == 21:\n        return True\n    if n == 23:\n        return True\n    if n == 29:\n        return True\n    if n == 31:\n        return True\n    if n == 37:\n        return True\n    if n == 41:\n        return True\n    if n == 43:\n        return True\n    if n == 49:\n        return True\n    if n == 57:\n        return True\n    if n == 61:\n        return True\n    if n == 63:\n        return True\n    if n == 67:\n        return True\n    if n == 71:\n        return True\n    if n == 73:\n        return True\n    if n == 79:\n        return True\n    if n == 83:\n        return True\n    if n == 89:\n        return True\n    if n == 97:\n        return True\n    if n == 101:\n        return True\n    if n == 103:\n        return True\n    if n == 107:\n        return True\n    if n == 109:\n        return True\n    if n == 113:\n        return True\n    if n == 119:\n        return True\n    if n == 121:\n        return True\n    if n == 127:\n        return True\n    if n == 131:\n        return True\n    if n == 137:\n        return True\n    if n == 139:\n        return True\n    if n == 149:\n        return True\n    if n == 151:\n        return True\n    if n == 157:\n        return True\n    if n == 161:\n        return True\n    if n == 163:\n        return True\n    if n == 167:\n        return True\n    if n == 171:\n        return True\n    if n == 177:\n        return True\n    if n == 181:\n        return True\n    if n == 183:\n        return True\n    if n == 191:\n        return True\n    if n == 197:\n        return True\n    if n == 209:\n        return True\n    if n == 219:\n        return True\n    if n == 231:\n        return True\n    if n == 239:\n        return True\n    if n == 243:\n        return True\n    if n == 251:\n        return True\n    if n == 257:\n        return True\n    if n == 261:\n        return True\n    if n == 269:\n        return True\n    if n == 271:\n        return True\n    if n == 277:\n        return True\n    if n == 281:\n        return True\n    if n == 283:\n        return True\n    if n == 293:\n        return True\n    if n == 307:\n        return True\n    if n == 311:\n        return True\n    if n == 313:\n        return True\n    if n == 319:\n        return True\n    if n == 331:\n        return True\n    if n == 337:\n        return True\n    if n == 341:\n        return True\n    if n == 349:\n        return True\n    if n == 359:\n        return True\n    if n == 367:\n        return True\n    if n == 373:\n        return True\n    if n == 379:\n        return True\n    if"}
{"task_id": "HumanEval/40", "completion": "\n# Python\n#     triples_sum_to_zero takes a list of integers as an input.\n#     it returns True if there are three distinct elements in the list that\n#     sum to zero, and False otherwise.\n#     >>> triples_sum_to_zero([1, 3, 5, 0])\n#     False\n#     >>> triples_sum_to_zero([1, 3, -2, 1])\n#     True\n#     >>> triples_sum_to_zero([1, 2, 3, 7])\n#     False\n#     >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n#     True\n#     >>> triples_sum_to_zero([1])\n#     False\ndef triples_sum_to_zero(l: list):\n    return sum(l) == 0 "}
{"task_id": "HumanEval/41", "completion": "\n# Python\n#     Imagine a road that's a perfectly straight infinitely long line.\n#     n cars are driving left to right;  simultaneously, a different set of n cars\n#     are driving right to left.   The two sets of cars start out being very far from\n#     each other.  All cars move in the same speed.  Two cars are said to collide\n#     when a car that's moving left to right hits a car that's moving right to left.\n#     However, the cars are infinitely sturdy and strong; as a result, they continue moving\n#     in their trajectory as if they did not collide.\n#     This function outputs the number of such collisions.\ndef car_race_collision(n: int):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    return sum(1 for _ in range(n) if car_collision(n, _))\n\n\ndef car_collision(n, car):\n    \"\"\"\n    :param n:\n    :param car:\n    :return:\n    \"\"\"\n    return (car.x - n.x) ** 2 + (car.y - n.y) ** 2 <= 10 ** 6\n\n\ndef car_collision_count(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    return car_collision(n, Car(0, 0)) + car_collision(n, Car(1, 0)) + car_collision(n, Car(0, 1)) + car_collision(n, Car(1, 1))\n\n\ndef car_collision_count_with_speed(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    return car_collision(n, Car(0, 0)) + car_collision(n, Car(1, 0)) + car_collision(n, Car(0, 1)) + car_collision(n, Car(1, 1))\n\n\ndef car_collision_count_with_speed_and_angle(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    return car_collision(n, Car(0, 0)) + car_collision(n, Car(1, 0)) + car_collision(n, Car(0, 1)) + car_collision(n, Car(1, 1))\n\n\ndef car_collision_count_with_speed_and_angle_and_angle(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    return car_collision(n, Car(0, 0)) + car_collision(n, Car(1, 0)) + car_collision(n, Car(0, 1)) + car_collision(n, Car(1, 1))\n\n\ndef car_collision_count_with_speed_and_angle_and_angle_and_angle(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    return car_collision(n, Car(0, 0)) + car_collision(n, Car(1, 0)) + car_collision(n, Car(0, 1)) + car_collision(n, Car(1, 1))\n\n\ndef car_collision_count_with_speed_and_angle_and_angle_and_angle_and_angle(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    return car_collision(n, Car(0, 0)) + car_collision(n, Car(1, 0)) + car_collision(n, Car(0, 1)) + car_collision(n, Car(1, 1))\n\n\ndef car_collision_count_with_speed_and_angle_and_angle_and_angle_and_angle_and_angle(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    return car_collision(n, Car(0, 0)) + car_collision(n, Car(1, 0)) + car_collision(n, Car(0, 1)) + car_collision(n, Car(1, 1))\n\n\ndef car_collision_count_with_speed_and_angle_and_angle_and_angle_and_angle_and_angle_and_angle(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    return car_collision(n, Car(0, 0)) + car_collision(n, Car(1, 0)) + car_collision(n, Car(0, 1)) + car_collision(n, Car(1, 1))\n\n\ndef car_collision_count_with_speed_and_angle_and_angle_and_angle_and_angle_and_angle_and_angle_and_angle(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    return car"}
{"task_id": "HumanEval/42", "completion": "\n# Python\n#     Return list with elements incremented by 1.\n#     >>> incr_list([1, 2, 3])\n#     [2, 3, 4]\n#     >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n#     [6, 4, 6, 3, 4, 4, 10, 1, 124]\ndef incr_list(l: list):\n    return [i + 1 for i in l] "}
{"task_id": "HumanEval/43", "completion": "\n# Python\n#     pairs_sum_to_zero takes a list of integers as an input.\n#     it returns True if there are two distinct elements in the list that\n#     sum to zero, and False otherwise.\n#     >>> pairs_sum_to_zero([1, 3, 5, 0])\n#     False\n#     >>> pairs_sum_to_zero([1, 3, -2, 1])\n#     False\n#     >>> pairs_sum_to_zero([1, 2, 3, 7])\n#     False\n#     >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n#     True\n#     >>> pairs_sum_to_zero([1])\n#     False\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return True\n    if l[0] == l[-1]:\n        return pairs_sum_to_zero(l[1:])\n    return pairs_sum_to_zero(l[1:]) and pairs_sum_to_zero(l[:-1])\n "}
{"task_id": "HumanEval/44", "completion": "\n# Python\n#     Change numerical base of input number x to base.\n#     return string representation after the conversion.\n#     base numbers are less than 10.\n#     >>> change_base(8, 3)\n#     '22'\n#     >>> change_base(8, 2)\n#     '1000'\n#     >>> change_base(7, 2)\n#     '111'\ndef change_base(x: int, base: int):\n    if base < 10:\n        return str(x)\n    else:\n        return str(x * pow(10, base - 1)) "}
{"task_id": "HumanEval/45", "completion": "\n# Python\n#     Given length of a side and high return area for a triangle.\n#     >>> triangle_area(5, 3)\n#     7.5\ndef triangle_area(a, h):\n    return (a * h) / 2 "}
{"task_id": "HumanEval/46", "completion": "\n# Python\n#     The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's \ndef fib4(n: int):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib4(n - 1) + fib4(n - 2)\n# Python\n#     The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's \ndef fib5(n: int):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) "}
{"task_id": "HumanEval/47", "completion": "\n# Python\n#     Return median of elements in the list l.\n#     >>> median([3, 1, 2, 4, 5])\n#     3\n#     >>> median([-10, 4, 6, 1000, 10, 20])\n#     15.0\ndef median(l: list):\n    if len(l) < 2:\n        return l[0]\n    else:\n        return (l[0] + l[1]) / 2 "}
{"task_id": "HumanEval/48", "completion": "\n# Python\n#     Checks if given string is a palindrome\n#     >>> is_palindrome('')\n#     True\n#     >>> is_palindrome('aba')\n#     True\n#     >>> is_palindrome('aaaaa')\n#     True\n#     >>> is_palindrome('zbcd')\n#     False\ndef is_palindrome(text: str):\n    return text == text[::-1] "}
{"task_id": "HumanEval/49", "completion": "\n# Python\n#     Return 2^n modulo p (be aware of numerics).\n#     >>> modp(3, 5)\n#     3\n#     >>> modp(1101, 101)\n#     2\n#     >>> modp(0, 101)\n#     1\n#     >>> modp(3, 11)\n#     8\n#     >>> modp(100, 101)\n#     1\ndef modp(n: int, p: int):\n    return (n % p) + p "}
{"task_id": "HumanEval/50", "completion": "\n# Python\n#     returns encoded string by shifting every character by 5 in the alphabet.\n#     return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\ndef encode_shift(s: str):\n    return ''.join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s]) "}
{"task_id": "HumanEval/51", "completion": "\n# Python\n#     remove_vowels is a function that takes string and returns string without vowels.\n#     >>> remove_vowels('')\n#     ''\n#     >>> remove_vowels(\"abc\ndef remove_vowels(text):\n    return ''.join(filter(lambda c: c.isalpha(), text.lower().split())) "}
{"task_id": "HumanEval/52", "completion": "\n# Python\n#     Return True if all numbers in the list l are below threshold t.\n#     >>> below_threshold([1, 2, 4, 10], 100)\n#     True\n#     >>> below_threshold([1, 20, 4, 10], 5)\n#     False\ndef below_threshold(l: list, t: int):\n    return [i for i in l if i < t] "}
{"task_id": "HumanEval/53", "completion": "\n# Python\n#     Add two numbers x and y\n#     >>> add(2, 3)\n#     5\n#     >>> add(5, 7)\n#     12\ndef add(x: int, y: int):\n    return x + y\nif __name__ == '__main__':\n    print(add(2, 3)) "}
{"task_id": "HumanEval/54", "completion": "\n# Python\n#     Check if two words have the same characters.\n#     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n#     True\n#     >>> same_chars('abcd', 'dddddddabc')\n#     True\n#     >>> same_chars('dddddddabc', 'abcd')\n#     True\n#     >>> same_chars('eabcd', 'dddddddabc')\n#     False\n#     >>> same_chars('abcd', 'dddddddabce')\n#     False\n#     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n#     False\ndef same_chars(s0: str, s1: str):\n    return len(s0) == len(s1) and all(c == s1[i] for i, c in enumerate(s0)) "}
{"task_id": "HumanEval/55", "completion": "\n# Python\n#     Return n-th Fibonacci number.\n#     >>> fib(10)\n#     55\n#     >>> fib(1)\n#     1\n#     >>> fib(8)\n#     21\ndef fib(n: int):\n    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\nif __name__ == '__main__':\n    print(fib(10)) "}
{"task_id": "HumanEval/56", "completion": "\n# Python\n#      brackets is a string of \"<\" and \">\".\n#     return True if every opening bracket has a corresponding closing bracket.\n#     >>> correct_bracketing(\"<\")\n#     False\n#     >>> correct_bracketing(\"<>\")\n#     True\n#     >>> correct_bracketing(\"<<><>>\")\n#     True\n#     >>> correct_bracketing(\"><<>\")\n#     False\ndef correct_bracketing(brackets: str):\n    return brackets == '<' and brackets == '>' "}
{"task_id": "HumanEval/57", "completion": "\n# Python\n#     Return True is list elements are monotonically increasing or decreasing.\n#     >>> monotonic([1, 2, 4, 20])\n#     True\n#     >>> monotonic([1, 20, 4, 10])\n#     False\n#     >>> monotonic([4, 1, 0, -10])\n#     True\ndef monotonic(l: list):\n    return sorted(l) == l "}
{"task_id": "HumanEval/58", "completion": "\n# Python\n#     Return sorted unique common elements for two lists.\n#     >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n#     [1, 5, 653]\n#     >>> common([5, 3, 2, 8], [3, 2])\n#     [2, 3]\ndef common(l1: list, l2: list):\n    return sorted(set(l1).intersection(set(l2))) "}
{"task_id": "HumanEval/59", "completion": "\n# Python\n#     Return the largest prime factor of n. Assume n > 1 and is not a prime.\n#     >>> largest_prime_factor(13195)\n#     29\n#     >>> largest_prime_factor(2048)\n#     2\ndef largest_prime_factor(n: int):\n    \"\"\"\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 21 == 0:\n        return 21\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 107 == 0:\n        return 107\n    if n % 111 == 0:\n        return 111\n    if n % 113 == 0:\n        return 113\n    if n % 117 == 0:\n        return 117\n    if n % 121 == 0:\n        return 121\n    if n % 125 == 0:\n        return 125\n    if n % 129 == 0:\n        return 129\n    if n % 133 == 0:\n        return 133\n    if n % 137 == 0:\n        return 137\n    if n % 141 == 0:\n        return 141\n    if n % 145 == 0:\n        return 145\n    if n % 149 == 0:\n        return 149\n    if n % 153 == 0:\n        return 153\n    if n % 157 == 0:\n        return 157\n    if n % 161 == 0:\n        return 161\n    if n % 165 == 0:\n        return 165\n    if n % 169 == 0:\n        return 169\n    if n % 173 == 0:\n        return 173\n    if n % 177 == 0:\n        return 177\n    if n % 181 == 0:\n        return 181\n    if n % 185 == 0:\n        return 185\n    if n % 189 == 0:\n        return 189\n    if n % 193 == 0:\n        return 193\n    if n % 197 == 0:\n        return 197\n    if n % 20"}
{"task_id": "HumanEval/60", "completion": "\n# Python\n#     sum_to_n is a function that sums numbers from 1 to n.\n#     >>> sum_to_n(30)\n#     465\n#     >>> sum_to_n(100)\n#     5050\n#     >>> sum_to_n(5)\n#     15\n#     >>> sum_to_n(10)\n#     55\n#     >>> sum_to_n(1)\n#     1\ndef sum_to_n(n: int):\n    return sum(range(1, n + 1)) "}
{"task_id": "HumanEval/61", "completion": "\n# Python\n#      brackets is a string of \"(\" and \")\".\n#     return True if every opening bracket has a corresponding closing bracket.\n#     >>> correct_bracketing(\"(\")\n#     False\n#     >>> correct_bracketing(\"()\")\n#     True\n#     >>> correct_bracketing(\"(()())\")\n#     True\n#     >>> correct_bracketing(\")(()\")\n#     False\ndef correct_bracketing(brackets: str):\n    return brackets == brackets.replace('(', '').replace(')', '') "}
{"task_id": "HumanEval/62", "completion": "\n# Python\n#      xs represent coefficients of a polynomial.\n#     xs[0] + xs[1] * x + xs[2] * x^2 + ....\n#      Return derivative of this polynomial in the same form.\n#     >>> derivative([3, 1, 2, 4, 5])\n#     [1, 4, 12, 20]\n#     >>> derivative([1, 2, 3])\n#     [2, 6]\ndef derivative(xs: list):\n    \"\"\"\n    Return the derivative of the given polynomial.\n    \"\"\"\n    return [x ** i for i, x in enumerate(xs)] "}
{"task_id": "HumanEval/63", "completion": "\n# Python\n#     The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's \ndef fibfib(n: int):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2)\n# Python\n#     The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's \ndef fibfib_reverse(n: int):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2)\n# Python\n#     The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's \ndef fibfib_reverse_reverse(n: int):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) "}
{"task_id": "HumanEval/64", "completion": "\n# Python\n#     Write a function vowels_count which takes a string representing\n#     a word as input and returns the number of vowels in the string.\n#     Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n#     vowel, but only when it is at the end of the given word.\n#     Example\ndef vowels_count(s):\n    return len(s.replace('y', '')) "}
{"task_id": "HumanEval/65", "completion": "\n# Python\n#     Circular shift the digits of the integer x, shift the digits right by shift\n#     and return the result as a string.\n#     If shift > number of digits, return digits reversed.\n#     >>> circular_shift(12, 1)\n#     \"21\"\n#     >>> circular_shift(12, 2)\n#     \"12\"\ndef circular_shift(x, shift):\n    return ''.join(reversed(str(x)[:shift] + str(x)[shift + 1:])) "}
{"task_id": "HumanEval/66", "completion": "\n# Python\n#     Task\n#     Write a function that takes a string as input and returns the sum of the upper characters only'\n#     ASCII codes.\n#     Examples\ndef digitSum(s):\n    return sum(map(ord, s))\n# Tests\nassert digitSum('hello') == 10\nassert digitSum('123456789') == 10 "}
{"task_id": "HumanEval/67", "completion": "\n# Python\n#     In this task, you will be given a string that represents a number of apples and oranges \n#     that are distributed in a basket of fruit this basket contains \n#     apples, oranges, and mango fruits. Given the string that represents the total number of \n#     the oranges and apples and an integer that represent the total number of the fruits \n#     in the basket return the number of the mango fruits in the basket.\n#     for examble\ndef fruit_distribution(s,n):\n    \"\"\"\n    :param s: string that represents the total number of fruits in the basket\n    :param n: integer that represent the total number of the fruits in the basket\n    :return: integer that represent the number of the mango fruits in the basket\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    elif n == 13:\n        return 13\n    elif n == 14:\n        return 14\n    elif n == 15:\n        return 15\n    elif n == 16:\n        return 16\n    elif n == 17:\n        return 17\n    elif n == 18:\n        return 18\n    elif n == 19:\n        return 19\n    elif n == 20:\n        return 20\n    elif n == 21:\n        return 21\n    elif n == 22:\n        return 22\n    elif n == 23:\n        return 23\n    elif n == 24:\n        return 24\n    elif n == 25:\n        return 25\n    elif n == 26:\n        return 26\n    elif n == 27:\n        return 27\n    elif n == 28:\n        return 28\n    elif n == 29:\n        return 29\n    elif n == 30:\n        return 30\n    elif n == 31:\n        return 31\n    elif n == 32:\n        return 32\n    elif n == 33:\n        return 33\n    elif n == 34:\n        return 34\n    elif n == 35:\n        return 35\n    elif n == 36:\n        return 36\n    elif n == 37:\n        return 37\n    elif n == 38:\n        return 38\n    elif n == 39:\n        return 39\n    elif n == 40:\n        return 40\n    elif n == 41:\n        return 41\n    elif n == 42:\n        return 42\n    elif n == 43:\n        return 43\n    elif n == 44:\n        return 44\n    elif n == 45:\n        return 45\n    elif n == 46:\n        return 46\n    elif n == 47:\n        return 47\n    elif n == 48:\n        return 48\n    elif n == 49:\n        return 49\n    elif n == 50:\n        return 50\n    elif n == 51:\n        return 51\n    elif n == 52:\n        return 52\n    elif n == 53:\n        return 53\n    elif n == 54:\n        return 54\n    elif n == 55:\n        return 55\n    elif n == 56:\n        return 56\n    elif n == 57:\n        return 57\n    elif n == 58:\n        return 58\n    elif n == 59:\n        return 59\n    elif n == 60:\n        return 60\n    elif n == 61:\n        return 61\n    elif n == 62:\n        return 62\n    elif n == 63:\n        return 63\n    elif n == 64:\n        return 64\n    elif n == 65"}
{"task_id": "HumanEval/68", "completion": "\n# Python\n#     \"Given an array representing a branch of a tree that has non-negative integer nodes\n#     your task is to pluck one of the nodes and return it.\n#     The plucked node should be the node with the smallest even value.\n#     If multiple nodes with the same smallest even value are found return the node that has smallest index.\n#     The plucked node should be returned in a list, [ smalest_value, its index ],\n#     If there are no even values or the given array is empty, return [].\n#     Example 1\ndef pluck(arr):\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return [arr[0], arr[1]]\n    if len(arr) == 3:\n        return [arr[0], arr[1], arr[2]]\n    if len(arr) == 4:\n        return [arr[0], arr[1], arr[2], arr[3]]\n    if len(arr) == 5:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4]]\n    if len(arr) == 6:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]]\n    if len(arr) == 7:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6]]\n    if len(arr) == 8:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7]]\n    if len(arr) == 9:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8]]\n    if len(arr) == 10:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9]]\n    if len(arr) == 11:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10]]\n    if len(arr) == 12:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11]]\n    if len(arr) == 13:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12]]\n    if len(arr) == 14:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12], arr[13]]\n    if len(arr) == 15:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12], arr[13], arr[14]]\n    if len(arr) == 16:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12], arr[13], arr[14], arr[15]]\n    if len(arr) == 17:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12], arr[13], arr[14], arr[15], arr[16]]\n    if len(arr) == 18:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11], arr[12], arr[13], arr[14], arr[15], arr[16], arr[17]]\n    if len(arr) == 19:"}
{"task_id": "HumanEval/69", "completion": "\n# Python\n#     You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n#     zero, and has a frequency greater than or equal to the value of the integer itself. \n#     The frequency of an integer is the number of times it appears in the list.\n#     If no such a value exist, return -1.\n#     Examples\ndef search(lst):\n    return max(lst, key=lambda x: lst.count(x)) "}
{"task_id": "HumanEval/70", "completion": "\n# Python\n#     Given list of integers, return list in strange order.\n#     Strange sorting, is when you start with the minimum value,\n#     then maximum of the remaining integers, then minimum and so on.\n#     Examples\ndef strange_sort_list(lst):\n    lst.sort(key=lambda x: x[1], reverse=True)\n    return lst "}
{"task_id": "HumanEval/71", "completion": "\n# Python\n#     Given the lengths of the three sides of a triangle. Return the area of\n#     the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n#     Otherwise return -1\n#     Three sides make a valid triangle when the sum of any two sides is greater \n#     than the third side.\n#     Example\ndef triangle_area(a, b, c):\n    if a + b > c:\n        return -1\n    else:\n        return (a + b + c) / 2\n# Python\n#     Given the lengths of the three sides of a triangle. Return the area of\n#     the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n#     Otherwise return -1\n#     Three sides make a valid triangle when the sum of any two sides is greater \n#     than the third side.\n#     Example\ntriangle_area(1, 2, 3) "}
{"task_id": "HumanEval/72", "completion": "\n# Python\n#     Write a function that returns True if the object q will fly, and False otherwise.\n#     The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n#     Example\ndef will_it_fly(q,w):\n    return q.sum() <= w "}
{"task_id": "HumanEval/73", "completion": "\n# Python\n#     Given an array arr of integers, find the minimum number of elements that\n#     need to be changed to make the array palindromic. A palindromic array is an array that\n#     is read the same backwards and forwards. In one change, you can change one element to any other element.\n#     For example\ndef smallest_change(arr):\n    \"\"\"\n    :param arr:\n    :return:\n    \"\"\"\n    if len(arr) == 1:\n        return 1\n    elif len(arr) == 2:\n        return 2\n    elif len(arr) == 3:\n        return 3\n    elif len(arr) == 4:\n        return 4\n    elif len(arr) == 5:\n        return 5\n    elif len(arr) == 6:\n        return 6\n    elif len(arr) == 7:\n        return 7\n    elif len(arr) == 8:\n        return 8\n    elif len(arr) == 9:\n        return 9\n    elif len(arr) == 10:\n        return 10\n    elif len(arr) == 11:\n        return 11\n    elif len(arr) == 12:\n        return 12\n    elif len(arr) == 13:\n        return 13\n    elif len(arr) == 14:\n        return 14\n    elif len(arr) == 15:\n        return 15\n    elif len(arr) == 16:\n        return 16\n    elif len(arr) == 17:\n        return 17\n    elif len(arr) == 18:\n        return 18\n    elif len(arr) == 19:\n        return 19\n    elif len(arr) == 20:\n        return 20\n    elif len(arr) == 21:\n        return 21\n    elif len(arr) == 22:\n        return 22\n    elif len(arr) == 23:\n        return 23\n    elif len(arr) == 24:\n        return 24\n    elif len(arr) == 25:\n        return 25\n    elif len(arr) == 26:\n        return 26\n    elif len(arr) == 27:\n        return 27\n    elif len(arr) == 28:\n        return 28\n    elif len(arr) == 29:\n        return 29\n    elif len(arr) == 30:\n        return 30\n    elif len(arr) == 31:\n        return 31\n    elif len(arr) == 32:\n        return 32\n    elif len(arr) == 33:\n        return 33\n    elif len(arr) == 34:\n        return 34\n    elif len(arr) == 35:\n        return 35\n    elif len(arr) == 36:\n        return 36\n    elif len(arr) == 37:\n        return 37\n    elif len(arr) == 38:\n        return 38\n    elif len(arr) == 39:\n        return 39\n    elif len(arr) == 40:\n        return 40\n    elif len(arr) == 41:\n        return 41\n    elif len(arr) == 42:\n        return 42\n    elif len(arr) == 43:\n        return 43\n    elif len(arr) == 44:\n        return 44\n    elif len(arr) == 45:\n        return 45\n    elif len(arr) == 46:\n        return 46\n    elif len(arr) == 47:\n        return 47\n    elif len(arr) == 48:\n        return 48\n    elif len(arr) == 49:\n        return 49\n    elif len(arr) == 50:\n        return 50\n    elif len(arr) == 51:\n        return 51\n    elif len(arr) == 52:\n        return 52\n    elif len(arr) == 53:\n        return 53\n    elif len(arr) == 54:\n        return 54\n    elif len(arr) == 55:\n        return 55\n    elif len(arr) == 56:\n        return 56\n    elif len(arr) == 57:\n        return 57"}
{"task_id": "HumanEval/74", "completion": "\n# Python\n#     Write a function that accepts two lists of strings and returns the list that has \n#     total number of chars in the all strings of the list less than the other list.\n#     if the two lists have the same number of chars, return the first list.\n#     Examples\n#     total_match([], []) \u279e []\n#     total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n#     total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n#     total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n#     total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\ndef total_match(lst1, lst2):\n    if len(lst1) == len(lst2):\n        return lst1\n    else:\n        return total_match(lst2, lst1) "}
{"task_id": "HumanEval/75", "completion": "\n# Python\n#     Write a function that returns true if the given number is the multiplication of 3 prime numbers\n#     and false otherwise.\n#     Knowing that (a) is less then 100. \n#     Example\ndef is_multiply_prime(a):\n    if a < 100:\n        return False\n    if a % 3 == 0 and a % 5 == 0:\n        return True\n    return False\n# Testing\nprint(is_multiply_prime(10))\nprint(is_multiply_prime(15))\nprint(is_multiply_prime(20))\nprint(is_multiply_prime(25))\nprint(is_multiply_prime(30))\nprint(is_multiply_prime(35))\nprint(is_multiply_prime(40))\nprint(is_multiply_prime(45))\nprint(is_multiply_prime(50))\nprint(is_multiply_prime(55))\nprint(is_multiply_prime(60))\nprint(is_multiply_prime(65))\nprint(is_multiply_prime(70))\nprint(is_multiply_prime(75))\nprint(is_multiply_prime(80))\nprint(is_multiply_prime(85))\nprint(is_multiply_prime(90))\nprint(is_multiply_prime(95))\nprint(is_multiply_prime(100)) "}
{"task_id": "HumanEval/76", "completion": "\n# Python\n#     Your task is to write a function that returns true if a number x is a simple\n#     power of n and false in other cases.\n#     x is a simple power of n if n**int=x\n#     For example\ndef is_simple_power(x, n):\n    return n**int(x) == x "}
{"task_id": "HumanEval/77", "completion": "\n# Python\n#     Write a function that takes an integer a and returns True \n#     if this ingeger is a cube of some integer number.\n#     Note: you may assume the input is always valid.\n#     Examples\ndef iscube(a):\n    return a % 3 == 0 and a % 5 == 0 "}
{"task_id": "HumanEval/78", "completion": "\n# Python\n#     You have been tasked to write a function that receives \n#     a hexadecimal number as a string and counts the number of hexadecimal \n#     digits that are primes (prime number, or a prime, is a natural number \n#     greater than 1 that is not a product of two smaller natural numbers).\n#     Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n#     Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n#     So you have to determine a number of the following digits: 2, 3, 5, 7, \n#     B (=decimal 11), D (=decimal 13).\n#     Note: you may assume the input is always correct or empty string, \n#     and symbols A,B,C,D,E,F are always uppercase.\n#     Examples\ndef hex_key(num):\n    return str(num).zfill(10)\nhex_key(123456789)\nhex_key(1234567890)\nhex_key(12345678901)\nhex_key(123456789012)\nhex_key(1234567890123)\nhex_key(12345678901234)\nhex_key(123456789012345)\nhex_key(1234567890123456)\nhex_key(12345678901234567)\nhex_key(123456789012345678)\nhex_key(1234567890123456789)\nhex_key(12345678901234567890)\nhex_key(123456789012345678901)\nhex_key(1234567890123456789012)\nhex_key(12345678901234567890123)\nhex_key(123456789012345678901234)\nhex_key(1234567890123456789012345)\nhex_key(12345678901234567890123456)\nhex_key(123456789012345678901234567)\nhex_key(1234567890123456789012345678)\nhex_key(12345678901234567890123456789)\nhex_key(123456789012345678901234567890)\nhex_key(1234567890123456789012345678901)\nhex_key(12345678901234567890123456789012)\nhex_key(123456789012345678901234567890123)\nhex_key(123456789012345678901234567890123456789)\nhex_key(1234567890123456789012345678901234567890)\nhex_key(12345678901234567890123456789012345678901)\nhex_key(123456789012345678901234567890123456789012)\nhex_key(1234567890123456789012345678901234567890123)\nhex_key(12345678901234567890123456789012345678901234)\nhex_key(123456789012345678901234567890123456789012345)\n"}
{"task_id": "HumanEval/79", "completion": "\n# Python\n#     You will be given a number in decimal form and your task is to convert it to\n#     binary format. The function should return a string, with each character representing a binary\n#     number. Each character in the string will be '0' or '1'.\n#     There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n#     The extra characters are there to help with the format.\n#     Examples\ndef decimal_to_binary(decimal):\n    return ''.join(map(lambda x: '0' if x == '1' else '1', map(lambda x: str(x), decimal))) "}
{"task_id": "HumanEval/80", "completion": "\n# Python\n#     You are given a string s.\n#     Your task is to check if the string is happy or not.\n#     A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n#     For example\ndef is_happy(s):\n    \"\"\"\n    :param s:\n    :return:\n    \"\"\"\n    if len(s) < 3:\n        return False\n    if len(s) % 3!= 0:\n        return False\n    for i in range(3):\n        if s[i]!= s[i + 1] and s[i]!= s[i + 2]:\n            return False\n    return True\nif __name__ == '__main__':\n    s = 'aabb'\n    assert is_happy(s) == True\n    s = 'abcd'\n    assert is_happy(s) == False "}
{"task_id": "HumanEval/81", "completion": "\n# Python\n#     It is the last week of the semester and the teacher has to give the grades\n#     to students. The teacher has been making her own algorithm for grading.\n#     The only problem is, she has lost the code she used for grading.\n#     She has given you a list of GPAs for some students and you have to write \n#     a function that can output a list of letter grades using the following table\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        letter_grades.append(str(grade) +'' + letter_grades[grade])\n    return letter_grades\n# Testing\nassert numerical_letter_grade([1, 2, 3, 4, 5]) == ['A+', 'A', 'A', 'A', 'A'] "}
{"task_id": "HumanEval/82", "completion": "\n# Python\n#     Write a function that takes a string and returns True if the string\n#     length is a prime number or False otherwise\n#     Examples\n#     prime_length('Hello') == True\n#     prime_length('abcdcba') == True\n#     prime_length('kittens') == True\n#     prime_length('orange') == False\ndef prime_length(string):\n    if len(string) < 2:\n        return False\n    for i in range(2, len(string)):\n        if string[i] == string[i - 1]:\n            return False\n    return True\n# Tests\nassert prime_length('Hello') == True\nassert prime_length('abcdcba') == True\nassert prime_length('kittens') == True\nassert prime_length('orange') == False "}
{"task_id": "HumanEval/83", "completion": "\n# Python\n#     Given a positive integer n, return the count of the numbers of n-digit\n#     positive integers that start or end with 1.\ndef starts_one_ends(n):\n    return sum(1 for _ in range(n)) "}
{"task_id": "HumanEval/84", "completion": "\n# Python\n#     Given a positive integer N, return the total sum of its digits in binary.\n#     Example\n#         For N = 1000, the sum of digits will be 1 the output should be \"1\".\n#         For N = 150, the sum of digits will be 6 the output should be \"110\".\n#         For N = 147, the sum of digits will be 12 the output should be \"1100\".\n#     Variables\ndef solve(N):\n    \"\"\"\n    :param N:\n    :return:\n    \"\"\"\n    return sum(map(int, str(N)))\n\n\nif __name__ == '__main__':\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147)) "}
{"task_id": "HumanEval/85", "completion": "\n# Python\n#     Given a non-empty list of integers lst. add the even elements that are at odd indices..\n#     Examples\ndef add(lst):\n    return [x for x in lst if x % 2!= 0] "}
{"task_id": "HumanEval/86", "completion": "\n# Python\n#     Write a function that takes a string and returns an ordered version of it.\n#     Ordered version of string, is a string where all words (separated by space)\n#     are replaced by a new word where all the characters arranged in\n#     ascending order based on ascii value.\n#     Note: You should keep the order of words and blank spaces in the sentence.\n#     For example\ndef anti_shuffle(s):\n    return''.join(sorted(s.split())) "}
{"task_id": "HumanEval/87", "completion": "\n# Python\n#     You are given a 2 dimensional data, as a nested lists,\n#     which is similar to matrix, however, unlike matrices,\n#     each row may contain a different number of columns.\n#     Given lst, and integer x, find integers x in the list,\n#     and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n#     each tuple is a coordinate - (row, columns), starting with 0.\n#     Sort coordinates initially by rows in ascending order.\n#     Also, sort coordinates of the row by columns in descending order.\n#     Examples\ndef get_row(lst, x):\n    lst = [lst[i] for i in range(len(lst)) if lst[i]!= 0]\n    lst.sort(key=lambda x: x[0])\n    lst.sort(key=lambda x: x[1])\n    return [lst[i] for i in range(len(lst)) if lst[i][0] == x] "}
{"task_id": "HumanEval/88", "completion": "\n# Python\n#     Given an array of non-negative integers, return a copy of the given array after sorting,\n#     you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n#     or sort it in descending order if the sum( first index value, last index value) is even.\n#     Note\ndef sort_array(array):\n    if len(array) < 2:\n        return array\n    else:\n        return [array[0], array[1], sort_array(array[2:])]\n# Python\n#     Given an array of non-negative integers, return the sum of the first and last index values of the array.\n#     Note\ndef sum_of_first_and_last_index(array):\n    if len(array) < 2:\n        return 0\n    else:\n        return array[0] + array[-1] "}
{"task_id": "HumanEval/89", "completion": "\n# Python\n#     Create a function encrypt that takes a string as an argument and\n#     returns a string encrypted with the alphabet being rotated. \n#     The alphabet should be rotated in a manner such that the letters \n#     shift down by two multiplied to two places.\n#     For example\ndef encrypt(s):\n    return ''.join(map(lambda x: chr(ord(x) + 2) if x in alphabet else x, s)) "}
{"task_id": "HumanEval/90", "completion": "\n# Python\n#     You are given a list of integers.\n#     Write a function next_smallest() that returns the 2nd smallest element of the list.\n#     Return None if there is no such element.\n#     next_smallest([1, 2, 3, 4, 5]) == 2\n#     next_smallest([5, 1, 4, 3, 2]) == 2\n#     next_smallest([]) == None\n#     next_smallest([1, 1]) == None\ndef next_smallest(lst):\n    if len(lst) == 0:\n        return None\n    else:\n        return lst[1]\nnext_smallest([1, 2, 3, 4, 5]) "}
{"task_id": "HumanEval/91", "completion": "\n# Python\n#     You'll be given a string of words, and your task is to count the number\n#     of boredoms. A boredom is a sentence that starts with the word \"I\".\n#     Sentences are delimited by '.', '?' or '!'.\n#     For example\ndef is_bored(S):\n    return any(S.startswith(word) for word in ['I', '?', '!']) "}
{"task_id": "HumanEval/92", "completion": "\n# Python\n#     Create a function that takes 3 numbers.\n#     Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n#     Returns false in any other cases.\n#     Examples\n#     any_int(5, 2, 7) \u279e True\n#     any_int(3, 2, 2) \u279e False\n#     any_int(3, -2, 1) \u279e True\n#     any_int(3.6, -2.2, 2) \u279e False\ndef any_int(x, y, z):\n    return (x + y + z) == sum(x, y, z) and all(isinstance(x, int) for x in (x, y, z)) "}
{"task_id": "HumanEval/93", "completion": "\n# Python\n#     Write a function that takes a message, and encodes in such a \n#     way that it swaps case of all letters, replaces all vowels in \n#     the message with the letter that appears 2 places ahead of that \n#     vowel in the english alphabet. \n#     Assume only letters. \n#     Examples\ndef encode(message):\n    return message.lower().replace('a', 'e').replace('e', 'a').replace('i', 'o').replace('o', 'i').replace('u', 'u').replace('y', 'i').replace('Y', 'I') "}
{"task_id": "HumanEval/94", "completion": "\n# Python\n#     You are given a list of integers.\n#     You need to find the largest prime value and return the sum of its digits.\n#     Examples\ndef skjkasdkd(lst):\n    \"\"\"\n    :param lst:\n    :return:\n    \"\"\"\n    lst = list(lst)\n    lst.sort()\n    lst.reverse()\n    max_sum = 0\n    for i in lst:\n        if i > 1:\n            if i % 2 == 0:\n                continue\n            if i % 3 == 0:\n                continue\n            if i % 5 == 0:\n                continue\n            if i % 7 == 0:\n                continue\n            if i % 11 == 0:\n                continue\n            if i % 13 == 0:\n                continue\n            if i % 17 == 0:\n                continue\n            if i % 21 == 0:\n                continue\n            if i % 25 == 0:\n                continue\n            if i % 31 == 0:\n                continue\n            if i % 37 == 0:\n                continue\n            if i % 41 == 0:\n                continue\n            if i % 47 == 0:\n                continue\n            if i % 53 == 0:\n                continue\n            if i % 59 == 0:\n                continue\n            if i % 61 == 0:\n                continue\n            if i % 67 == 0:\n                continue\n            if i % 71 == 0:\n                continue\n            if i % 73 == 0:\n                continue\n            if i % 79 == 0:\n                continue\n            if i % 83 == 0:\n                continue\n            if i % 89 == 0:\n                continue\n            if i % 97 == 0:\n                continue\n            if i % 101 == 0:\n                continue\n            if i % 103 == 0:\n                continue\n            if i % 107 == 0:\n                continue\n            if i % 111 == 0:\n                continue\n            if i % 113 == 0:\n                continue\n            if i % 117 == 0:\n                continue\n            if i % 121 == 0:\n                continue\n            if i % 125 == 0:\n                continue\n            if i % 129 == 0:\n                continue\n            if i % 133 == 0:\n                continue\n            if i % 137 == 0:\n                continue\n            if i % 141 == 0:\n                continue\n            if i % 145 == 0:\n                continue\n            if i % 149 == 0:\n                continue\n            if i % 153 == 0:\n                continue\n            if i % 157 == 0:\n                continue\n            if i % 161 == 0:\n                continue\n            if i % 165 == 0:\n                continue\n            if i % 169 == 0:\n                continue\n            if i % 173 == 0:\n                continue\n            if i % 177 == 0:\n                continue\n            if i % 181 == 0:\n                continue\n            if i % 185 == 0:\n                continue\n            if i % 189 == 0:\n                continue\n            if i % 193 == 0:\n                continue\n            if i % 197 == 0:\n                continue\n            if i % 201 == 0:\n                continue\n            if i % 205 == 0:\n                continue\n            if i % 209 == 0:\n                continue\n            if i % 213 == 0:\n                continue\n            if i % 217 == 0:\n                continue\n            if i % 221 == 0:\n                continue\n            if i % 225 == 0:\n                continue\n            if i % 229 == 0:\n                continue\n            if i % 233 == 0:\n                continue\n            if i % 237 == 0:\n                continue\n            if i % 241 == 0:\n                continue\n            if i % 245 == 0:\n                continue\n            if i % 249 == 0:\n                continue"}
{"task_id": "HumanEval/95", "completion": "\n# Python\n#     Given a dictionary, return True if all keys are strings in lower \n#     case or all keys are strings in upper case, else return False.\n#     The function should return False is the given dictionary is empty.\n#     Examples\ndef check_dict_case(dict):\n    return all(isinstance(key, str) for key in dict.keys()) or all(isinstance(key, str) for key in dict.values()) "}
{"task_id": "HumanEval/96", "completion": "\n# Python\n#     Implement a function that takes an non-negative integer and returns an array of the first n\n#     integers that are prime numbers and less than n.\n#     for example\ndef count_up_to(n):\n    return [i for i in range(1, n + 1) if i % 2 == 0] "}
{"task_id": "HumanEval/97", "completion": "\n# Python\n#     Complete the function that takes two integers and returns \n#     the product of their unit digits.\n#     Assume the input is always valid.\n#     Examples\ndef multiply(a, b):\n    return a * b "}
{"task_id": "HumanEval/98", "completion": "\n# Python\n#     Given a string s, count the number of uppercase vowels in even indices.\n#     For example\ndef count_upper(s):\n    return sum(1 for i in range(len(s)) if s[i] in 'AEIOUaeiou')\n# Python\n#     Given a string s, count the number of uppercase vowels in odd indices.\n#     For example\ndef count_upper_odd(s):\n    return sum(1 for i in range(len(s)) if s[i] in 'AEIOUaeiou') - len(s) "}
{"task_id": "HumanEval/99", "completion": "\n# Python\n#     Create a function that takes a value (string) representing a number\n#     and returns the closest integer to it. If the number is equidistant\n#     from two integers, round it away from zero.\n#     Examples\n#     >>> closest_integer(\"10\")\n#     10\n#     >>> closest_integer(\"15.3\")\n#     15\n#     Note\ndef closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    \"\"\"\n    return int(round(float(value) - 0.5) + 0.5) "}
{"task_id": "HumanEval/100", "completion": "\n# Python\n#     Given a positive integer n, you have to make a pile of n levels of stones.\n#     The first level has n stones.\n#     The number of stones in the next level is\ndef make_a_pile(n):\n    return [0] * n "}
{"task_id": "HumanEval/101", "completion": "\n# Python\n#     You will be given a string of words separated by commas or spaces. Your task is\n#     to split the string into words and return an array of the words.\n#     For example\ndef words_string(s):\n    return [word for word in s.split(',')] "}
{"task_id": "HumanEval/102", "completion": "\n# Python\n#     This function takes two positive numbers x and y and returns the\n#     biggest even integer number that is in the range [x, y] inclusive. If \n#     there's no such number, then the function should return -1.\n#     For example\ndef choose_num(x, y):\n    if x > y:\n        return choose_num(y, x)\n    else:\n        return x\n# Python\n#     This function takes two positive numbers x and y and returns the\n#     biggest odd integer number that is in the range [x, y] inclusive. If \n#     there's no such number, then the function should return -1.\n#     For example\ndef choose_num(x, y):\n    if x > y:\n        return choose_num(y, x)\n    else:\n        return x + 1\n# Python\n#     This function takes two positive numbers x and y and returns the\n#     biggest integer number that is in the range [x, y] inclusive. If \n#     there's no such number, then the function should return -1.\n#     For example\ndef choose_num(x, y):\n    if x > y:\n        return choose_num(y, x)\n    else:\n        return x + 1 "}
{"task_id": "HumanEval/103", "completion": "\n# Python\n#     You are given two positive integers n and m, and your task is to compute the\n#     average of the integers from n through m (including n and m). \n#     Round the answer to the nearest integer and convert that to binary.\n#     If n is greater than m, return -1.\n#     Example\ndef rounded_avg(n, m):\n    return (n + m) // 2\n# Test cases\nassert rounded_avg(1, 2) == 1\nassert rounded_avg(1, 3) == 1\nassert rounded_avg(1, 4) == 1\nassert rounded_avg(1, 5) == 1\nassert rounded_avg(1, 6) == 1\nassert rounded_avg(1, 7) == 1\nassert rounded_avg(1, 8) == 1\nassert rounded_avg(1, 9) == 1\nassert rounded_avg(1, 10) == 1\nassert rounded_avg(1, 11) == 1\nassert rounded_avg(1, 12) == 1\nassert rounded_avg(1, 13) == 1\nassert rounded_avg(1, 14) == 1\nassert rounded_avg(1, 15) == 1\nassert rounded_avg(1, 16) == 1\nassert rounded_avg(1, 17) == 1\nassert rounded_avg(1, 18) == 1\nassert rounded_avg(1, 19) == 1\nassert rounded_avg(1, 20) == 1\nassert rounded_avg(1, 21) == 1\nassert rounded_avg(1, 22) == 1\nassert rounded_avg(1, 23) == 1\nassert rounded_avg(1, 24) == 1\nassert rounded_avg(1, 25) == 1\nassert rounded_avg(1, 26) == 1\nassert rounded_avg(1, 27) == 1\nassert rounded_avg(1, 28) == 1\nassert rounded_avg(1, 29) == 1\nassert rounded_avg(1, 30) == 1\nassert rounded_avg(1, 31) == 1\nassert rounded_avg(1, 32) == 1\nassert rounded_avg(1, 33) == 1\nassert rounded_avg(1, 34) == 1\nassert rounded_avg(1, 35) == 1\nassert rounded_avg(1, 36) == 1\nassert rounded_avg(1, 37) == 1\nassert rounded_avg(1, 38) == 1\nassert rounded_avg(1, 39) == 1\nassert rounded_avg(1, 40) == 1\nassert rounded_avg(1, 41) == 1\nassert rounded_avg(1, 42) == 1\nassert rounded_avg(1, 43) == 1\nassert rounded_avg(1, 44) == 1\nassert rounded_avg(1, 45) == 1\nassert rounded_avg(1, 46) == 1\nassert rounded_avg(1, 47) == 1\nassert rounded_avg(1, 48) == 1\nassert rounded_avg(1, 49) == 1\nassert rounded_avg(1, 50) == 1\nassert rounded_avg(1, 51) == 1\nassert rounded_avg(1, 52) == 1\nassert rounded_avg(1, 53) == 1\nassert rounded_avg(1, 54) == 1\nassert rounded_avg(1, 55) == 1\nassert rounded_avg(1, 56) == 1\nassert rounded_avg(1, 57) == 1\nassert rounded_avg(1, 58) == 1\nassert rounded_avg(1, 59) == 1\nassert rounded_avg(1, 60) == 1\nassert rounded_avg(1, 61) == 1\nassert rounded_avg(1, 62) == 1\nassert rounded_avg(1, 63) == 1\nassert rounded_avg(1, 64) == 1\nassert rounded_avg(1, "}
{"task_id": "HumanEval/104", "completion": "\n# Python\n#     Given a list of positive integers x. return a sorted list of all \n#     elements that hasn't any even digit.\n#     Note: Returned list should be sorted in increasing order.\n#     For example\ndef unique_digits(x):\n    return [i for i in x if i % 2 == 0] "}
{"task_id": "HumanEval/105", "completion": "\n# Python\n#     Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n#     reverse the resulting array, and then replace each digit by its corresponding name from\n#     \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n#     For example\ndef by_length(arr):\n    return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i in range(len(arr)) if arr[i] >= 1 and arr[i] <= 9]\n#     return [arr[i] for i"}
{"task_id": "HumanEval/106", "completion": "\n# Python\n#      Implement the function f that takes n as a parameter,\n#     and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n#     or the sum of numbers from 1 to i otherwise.\n#     i starts from 1.\n#     the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n#     Example\ndef f(n):\n    return [i for i in range(1, n + 1) if i % 2 == 0] + [sum(range(1, n + 1)) for i in range(1, n + 1)] "}
{"task_id": "HumanEval/107", "completion": "\n# Python\n#     Given a positive integer n, return a tuple that has the number of even and odd\n#     integer palindromes that fall within the range(1, n), inclusive.\n#     Example 1\ndef even_odd_palindrome(n):\n    \"\"\"\n    >>> even_odd_palindrome(10)\n    (1, 1)\n    >>> even_odd_palindrome(100)\n    (1, 1)\n    >>> even_odd_palindrome(1000)\n    (1, 1)\n    >>> even_odd_palindrome(10000)\n    (1, 1)\n    >>> even_odd_palindrome(100000)\n    (1, 1)\n    >>> even_odd_palindrome(1000000)\n    (1, 1)\n    >>> even_odd_palindrome(10000000)\n    (1, 1)\n    >>> even_odd_palindrome(100000000)\n    (1, 1)\n    >>> even_odd_palindrome(1000000000)\n    (1, 1)\n    >>> even_odd_palindrome(10000000000)\n    (1, 1)\n    >>> even_odd_palindrome(100000000000)\n    (1, 1)\n    >>> even_odd_palindrome(1000000000000)\n    (1, 1)\n    >>> even_odd_palindrome(10000000000000)\n    (1, 1)\n    >>> even_odd_palindrome(100000000000000)\n    (1, 1)\n    >>> even_odd_palindrome(1000000000000000)\n    (1, 1)\n    >>> even_odd_palindrome(10000000000000000)\n    (1, 1)\n    >>> even_odd_palindrome(100000000000000000)\n    (1, 1)\n    >>> even_odd_palindrome(1000000000000000000)\n    (1, 1)\n    >>> even_odd_palindrome(10000000000000000000)\n    (1, 1)\n    >>> even_odd_palindrome(100000000000000000000)\n    (1, 1)\n    >>> even_odd_palindrome(1000000000000000000000)\n    (1, 1)\n    >>> even_odd_palindrome(10000000000000000000000)\n    (1, 1)\n    >>> even_odd_palindrome(100000000000000000000000)\n    (1, 1)\n    >>> even_odd_palindrome(1000000000000000000000000)\n    (1, 1)\n    >>> even_odd_palindrome(10000000000000000000000000)\n    (1, 1)\n    >>> even_odd_palindrome(100000000000000000000000000)\n    (1, 1)\n    >>> even_odd_palindrome(1000000000000000000000000000)\n    (1, 1)\n    >>> even_odd_palindrome(10000000000000000000000000000)\n    (1, 1)\n    >>> even_odd_palindrome(10000000000000000"}
{"task_id": "HumanEval/108", "completion": "\n# Python\n#     Write a function count_nums which takes an array of integers and returns\n#     the number of elements which has a sum of digits > 0.\n#     If a number is negative, then its first signed digit will be negative\ndef count_nums(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += num\n    return count "}
{"task_id": "HumanEval/109", "completion": "\n# Python\n#     We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n#     numbers in the array will be randomly ordered. Your task is to determine if\n#     it is possible to get an array sorted in non-decreasing order by performing \n#     the following operation on the given array\ndef move_one_ball(arr):\n    \"\"\"\n    Move one ball in the array.\n    \"\"\"\n    return arr[1] + arr[2] +... + arr[N]\n\ndef main():\n    arr = [1, 2, 3, 4, 5]\n    print(move_one_ball(arr))\n\nif __name__ == '__main__':\n    main() "}
{"task_id": "HumanEval/110", "completion": "\n# Python\n#     In this problem, you will implement a function that takes two lists of numbers,\n#     and determines whether it is possible to perform an exchange of elements\n#     between them to make lst1 a list of only even numbers.\n#     There is no limit on the number of exchanged elements between lst1 and lst2.\n#     If it is possible to exchange elements between the lst1 and lst2 to make\n#     all the elements of lst1 to be even, return \"YES\".\n#     Otherwise, return \"NO\".\n#     For example\ndef exchange(lst1, lst2):\n    \"\"\"\n    :param lst1:\n    :param lst2:\n    :return:\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        return 'NO'\n    else:\n        return 'YES'\nexchange(lst1, lst2) "}
{"task_id": "HumanEval/111", "completion": "\n# Python\n#     Given a string representing a space separated lowercase letters, return a dictionary\n#     of the letter with the most repetition and containing the corresponding count.\n#     If several letters have the same occurrence, return all of them.\n#     Example\ndef histogram(test):\n    return dict(Counter(test).most_common(1)) "}
{"task_id": "HumanEval/112", "completion": "\n# Python\n#     Task\n#     We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n#     then check if the result string is palindrome.\n#     A string is called palindrome if it reads the same backward as forward.\n#     You should return a tuple containing the result string and True/False for the check.\n#     Example\n#     For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n#     For s = \"abc\ndef reverse_delete(s,c):\n    return s[::-1] + c "}
{"task_id": "HumanEval/113", "completion": "\n# Python\n#     Given a list of strings, where each string consists of only digits, return a list.\n#     Each element i of the output should be \"the number of odd elements in the\n#     string i of the input.\" where all the i's should be replaced by the number\n#     of odd digits in the i'th string of the input.\n#     >>> odd_count(['1234567'])\n#     [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n#     >>> odd_count(['3',\"11111111\"])\n#     [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n#      \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\ndef odd_count(lst):\n    return [str(len(lst[i]) % 2) for i in lst] "}
{"task_id": "HumanEval/114", "completion": "\n# Python\n#     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n#     of nums.\n#     Example\n#     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n#     minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums):\n    \"\"\"\n    :param nums:\n    :return:\n    \"\"\"\n    if not nums:\n        return 0\n    if len(nums) == 0:\n        return 0\n    min_sum = nums[0]\n    for num in nums[1:]:\n        if num < min_sum:\n            min_sum = num\n        else:\n            min_sum += num\n    return min_sum\nif __name__ == '__main__':\n    nums = [2, 3, 4, 1, 2, 4]\n    print(minSubArraySum(nums)) "}
{"task_id": "HumanEval/115", "completion": "\n# Python\n#     You are given a rectangular grid of wells. Each row represents a single well,\n#     and each 1 in a row represents a single unit of water.\n#     Each well has a corresponding bucket that can be used to extract water from it, \n#     and all buckets have the same capacity.\n#     Your task is to use the buckets to empty the wells.\n#     Output the number of times you need to lower the buckets.\n#     Example 1\ndef max_fill(grid, capacity):\n    return max_fill_helper(grid, capacity, 0) "}
{"task_id": "HumanEval/116", "completion": "\n# Python\n#     In this Kata, you have to sort an array of non-negative integers according to\n#     number of ones in their binary representation in ascending order.\n#     For similar number of ones, sort based on decimal value.\n#     It must be implemented like this\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: int(bin(x)[2:].count('1')), reverse=True) "}
{"task_id": "HumanEval/117", "completion": "\n# Python\n#     Given a string s and a natural number n, you have been tasked to implement \n#     a function that returns a list of all words from string s that contain exactly \n#     n consonants, in order these words appear in the string s.\n#     If the string s is empty then the function should return an empty list.\n#     Note: you may assume the input string contains only letters and spaces.\n#     Examples\ndef select_words(s, n):\n    return [word for word in s.split() if len(word) == n] "}
{"task_id": "HumanEval/118", "completion": "\n# Python\n#     You are given a word. Your task is to find the closest vowel that stands between \n#     two consonants from the right side of the word (case sensitive).\n#     Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n#     find any vowel met the above condition. \n#     You may assume that the given string contains English letter only.\n#     Example\ndef get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for vowel in vowels:\n        if word.find(vowel)!= -1:\n            return vowel\n    return '' "}
{"task_id": "HumanEval/119", "completion": "\n# Python\n#     You are given a list of two strings, both strings consist of open\n#     parentheses '(' or close parentheses ')' only.\n#     Your job is to check if it is possible to concatenate the two strings in\n#     some order, that the resulting string will be good.\n#     A string S is considered to be good if and only if all parentheses in S\n#     are balanced. For example: the string '(())()' is good, while the string\n#     '())' is not.\n#     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n#     Examples\ndef match_parens(lst):\n    return lst[0] == '(' and lst[1] == ')' "}
{"task_id": "HumanEval/120", "completion": "\n# Python\n#     Given an array arr of integers and a positive integer k, return a sorted list \n#     of length k with the maximum k numbers in arr.\n#     Example 1\ndef maximum(arr, k):\n    return sorted(arr, key=lambda x: x if x > k else 0) "}
{"task_id": "HumanEval/121", "completion": "\n# Python\n#     Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n#     Examples\n#     solution([5, 8, 7, 1]) ==> 12\n#     solution([3, 3, 3, 3, 3]) ==> 9\n#     solution([30, 13, 24, 321]) ==>0\ndef solution(lst):\n    return sum(lst[i] for i in range(len(lst) // 2) if lst[i] % 2 == 1) "}
{"task_id": "HumanEval/122", "completion": "\n# Python\n#     Given a non-empty array of integers arr and an integer k, return\n#     the sum of the elements with at most two digits from the first k elements of arr.\n#     Example\ndef add_elements(arr, k):\n    return sum(map(lambda x: x * 10 + k, arr[1:])) "}
{"task_id": "HumanEval/123", "completion": "\n# Python\n#     Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n#     The Collatz conjecture is a conjecture in mathematics that concerns a sequence \ndef get_odd_collatz(n):\n    odd_collatz = []\n    for i in range(1, n):\n        if i % 2 == 1:\n            odd_collatz.append(i)\n        else:\n            odd_collatz.append(i * 3 + 1)\n    return odd_collatz "}
{"task_id": "HumanEval/124", "completion": "\n# Python\n#     You have to write a function which validates a given date string and\n#     returns True if the date is valid otherwise False.\n#     The date is valid if all of the following rules are satisfied\ndef valid_date(date):\n    return date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date.isdigit() and date."}
{"task_id": "HumanEval/125", "completion": "\n# Python\n#     Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n#     should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n#     alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n#     Examples\n#     split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n#     split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n#     split_words(\"abc\ndef split_words(txt):\n    return [word for word in txt.split() if word.isalpha()] "}
{"task_id": "HumanEval/126", "completion": "\n# Python\n#     Given a list of numbers, return whether or not they are sorted\n#     in ascending order. If list has more than 1 duplicate of the same\n#     number, return False. Assume no negative numbers and only integers.\n#     Examples\n#     is_sorted([5]) \u279e True\n#     is_sorted([1, 2, 3, 4, 5]) \u279e True\n#     is_sorted([1, 3, 2, 4, 5]) \u279e False\n#     is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n#     is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n#     is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n#     is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n#     is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\ndef is_sorted(lst):\n    if len(lst) < 2:\n        return True\n    if lst[0] == lst[-1]:\n        return is_sorted(lst[1:-1])\n    return lst[0] < lst[-1]\nis_sorted(list(range(1, 10))) "}
{"task_id": "HumanEval/127", "completion": "\n# Python\n#     You are given two intervals,\n#     where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n#     The given intervals are closed which means that the interval (start, end)\n#     includes both start and end.\n#     For each given interval, it is assumed that its start is less or equal its end.\n#     Your task is to determine whether the length of intersection of these two \n#     intervals is a prime number.\n#     Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n#     which its length is 1, which not a prime number.\n#     If the length of the intersection is a prime number, return \"YES\",\n#     otherwise, return \"NO\".\n#     If the two intervals don't intersect, return \"NO\".\n#     [input/output] samples\ndef intersection(interval1, interval2):\n    if interval1[0] > interval2[1]:\n        return intersection(interval2, interval1)\n    else:\n        return interval1[0]\nintersection(interval1, interval2) "}
{"task_id": "HumanEval/128", "completion": "\n# Python\n#     You are given an array arr of integers and you need to return\n#     sum of magnitudes of integers multiplied by product of all signs\n#     of each number in the array, represented by 1, -1 or 0.\n#     Note: return None for empty arr.\n#     Example\ndef prod_signs(arr):\n    return sum([abs(i) * sign(i) for i in arr]) "}
{"task_id": "HumanEval/129", "completion": "\n# Python\n#     Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n#     each cell of the grid contains a value. Every integer in the range [1, N * N]\n#     inclusive appears exactly once on the cells of the grid.\n#     You have to find the minimum path of length k in the grid. You can start\n#     from any cell, and in each step you can move to any of the neighbor cells,\n#     in other words, you can go to cells which share an edge with you current\n#     cell.\n#     Please note that a path of length k means visiting exactly k cells (not\n#     necessarily distinct).\n#     You CANNOT go off the grid.\n#     A path A (of length k) is considered less than a path B (of length k) if\n#     after making the ordered lists of the values on the cells that A and B go\n#     through (let's call them lst_A and lst_B), lst_A is lexicographically less\n#     than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n#     such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n#     lst_A[j] = lst_B[j].\n#     It is guaranteed that the answer is unique.\n#     Return an ordered list of the values on the cells that the minimum path go through.\n#     Examples\ndef minPath(grid, k):\n    if k == 0:\n        return [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))]\n    else:\n        return [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len(grid[i]))] + [grid[i][j] for i in range(len(grid)) for j in range(len"}
{"task_id": "HumanEval/130", "completion": "\n# Python\n#     Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n#     the last couple centuries. However, what people don't know is Tribonacci sequence.\n#     Tribonacci sequence is \ndef tri(n):\n    return [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2614, 4181, 6765, 11764, 19999, 31987, 51985, 83985, 137859, 225816, 373041, 610765, 1006632, 1614418, 2628798, 4256017, 7007514, 12114029, 20128057, 32257795, 52439104, 83985953, 137859375, 225816526, 373041600, 610765000, 1006632000, 1614418000, 2628798000, 4256017000, 7007514000, 12114029000, 20128057000, 32257795000, 52439104000, 83985953000, 137859375000, 225816526000, 37304160000, 61076500000, 100663200000, 161441800000, 262879800000, 425601700000, 700751400000, 1211402900000, 2012805700000, 3225779500000, 5243910400000, 8398595300000, 13785937500000, 22581652600000, 3730416000000, 6107650000000, 10066320000000, 16144180000000, 26287980000000, 42560170000000, 70075140000000, 121140290000000, 201280570000000, 322577950000000, 524391040000000, 839859530000000, 1378593750000000, 2258165260000000, 3730416000000000, 6107650000000000, 10066320000000000, 16144180000000000, 26287980000000000, 42560170000000000, 70075140000000000, 1211402900"}
{"task_id": "HumanEval/131", "completion": "\n# Python\n#     Given a positive integer n, return the product of the odd digits.\n#     Return 0 if all digits are even.\n#     For example\ndef digits(n):\n    return sum(map(lambda x: x * 2 if x % 2 == 0 else x, range(n))) "}
{"task_id": "HumanEval/132", "completion": "\n# Python\n#     Create a function that takes a string as input which contains only square brackets.\n#     The function should return True if and only if there is a valid subsequence of brackets \n#     where at least one bracket in the subsequence is nested.\n#     is_nested('[[]]') \u279e True\n#     is_nested('[]]]]]]][[[[[]') \u279e False\n#     is_nested('[][]') \u279e False\n#     is_nested('[]') \u279e False\n#     is_nested('[[][]]') \u279e True\n#     is_nested('[[]][[') \u279e True\ndef is_nested(string):\n    return string.count(']') > 0 and string.count('[') > 0 "}
{"task_id": "HumanEval/133", "completion": "\n# Python\n#     You are given a list of numbers.\n#     You need to return the sum of squared numbers in the given list,\n#     round each element in the list to the upper int(Ceiling) first.\n#     Examples\ndef sum_squares(lst):\n    return sum(map(lambda x: x ** 2, lst))\n# Test cases\nassert sum_squares([1, 2, 3, 4, 5]) == 150 "}
{"task_id": "HumanEval/134", "completion": "\n# Python\n#     Create a function that returns True if the last character\n#     of a given string is an alphabetical character and is not\n#     a part of a word, and False otherwise.\n#     Note: \"word\" is a group of characters separated by space.\n#     Examples\ndef check_if_last_char_is_a_letter(txt):\n    return any(c in 'abcdefghijklmnopqrstuvwxyz' for c in txt) and not any(c in 'abcdefghijklmnopqrstuvwxyz' for c in txt[::-1]) "}
{"task_id": "HumanEval/135", "completion": "\n# Python\n#     Create a function which returns the largest index of an element which\n#     is not greater than or equal to the element immediately preceding it. If\n#     no such element exists then return -1. The given array will not contain\n#     duplicate values.\n#     Examples\ndef can_arrange(arr):\n    \"\"\"\n    :param arr: An array of integers\n    :return: The index of the largest element which is not greater than or\n    equal to the element immediately preceding it.\n    \"\"\"\n    if len(arr) < 2:\n        return -1\n    arr.sort()\n    return arr[0]\n# end of function\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(can_arrange(arr)) "}
{"task_id": "HumanEval/136", "completion": "\n# Python\n#     Create a function that returns a tuple (a, b), where 'a' is\n#     the largest of negative integers, and 'b' is the smallest\n#     of positive integers in a list.\n#     If there is no negative or positive integers, return them as None.\n#     Examples\ndef largest_smallest_integers(lst):\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return (lst[0], lst[0])\n    else:\n        return (min(lst), max(lst))\n# Tests\nassert largest_smallest_integers([-1, 0, 1, 2, 3]) == (1, 3)\nassert largest_smallest_integers([-1, 0, 1, 2, 3, 4]) == (1, 4)\nassert largest_smallest_integers([-1, 0, 1, 2, 3, 4, 5]) == (1, 5) "}
{"task_id": "HumanEval/137", "completion": "\n# Python\n#     Create a function that takes integers, floats, or strings representing\n#     real numbers, and returns the larger variable in its given variable type.\n#     Return None if the values are equal.\n#     Note: If a real number is represented as a string, the floating point might be . or ,\n#     compare_one(1, 2.5) \u279e 2.5\n#     compare_one(1, \"2,3\") \u279e \"2,3\"\n#     compare_one(\"5,1\", \"6\") \u279e \"6\"\n#     compare_one(\"1\", 1) \u279e None\ndef compare_one(a, b):\n    if isinstance(a, int) and isinstance(b, int):\n        return a > b\n    elif isinstance(a, float) and isinstance(b, float):\n        return a > b\n    elif isinstance(a, str) and isinstance(b, str):\n        return a > b\n    else:\n        return None "}
{"task_id": "HumanEval/138", "completion": "\n# Python\n#     Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n#     Example\n#     is_equal_to_sum_even(4) == False\n#     is_equal_to_sum_even(6) == False\n#     is_equal_to_sum_even(8) == True\ndef is_equal_to_sum_even(n):\n    return n % 2 == 0 "}
{"task_id": "HumanEval/139", "completion": "\n# Python\n#     The Brazilian factorial is \ndef special_factorial(n):\n    return factorial(n) // factorial(n - 1) "}
{"task_id": "HumanEval/140", "completion": "\n# Python\n#     Given a string text, replace all spaces in it with underscores, \n#     and if a string has more than 2 consecutive spaces, \n#     then replace all consecutive spaces with - \n#     fix_spaces(\"Example\") == \"Example\"\n#     fix_spaces(\"Example 1\") == \"Example_1\"\n#     fix_spaces(\" Example 2\") == \"_Example_2\"\n#     fix_spaces(\" Example   3\") == \"_Example-3\"\ndef fix_spaces(text):\n    return re.sub(r'\\s+', '_', text) "}
{"task_id": "HumanEval/141", "completion": "\n# Python\n#     Create a function which takes a string representing a file's name, and returns\n#     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n#     A file's name is considered to be valid if and only if all the following conditions \n#     are met\ndef file_name_check(file_name):\n    return file_name.lower() in ['yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', 'y', 'y', '1', '1', 'true', 'true', 'yes', 'yes', '"}
{"task_id": "HumanEval/142", "completion": "\n# Python\n#     \"\n#     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n#     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n#     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n#     Examples\ndef sum_squares(lst):\n    return sum(map(lambda x: x ** 2, lst)) "}
{"task_id": "HumanEval/143", "completion": "\n# Python\n#     You are given a string representing a sentence,\n#     the sentence contains some words separated by a space,\n#     and you have to return a string that contains the words from the original sentence,\n#     whose lengths are prime numbers,\n#     the order of the words in the new string should be the same as the original one.\n#     Example 1\ndef words_in_sentence(sentence):\n    return''.join(filter(lambda x: len(x) % 2 == 0, sentence.split())) "}
{"task_id": "HumanEval/144", "completion": "\n# Python\n#     Your task is to implement a function that will simplify the expression\n#     x * n. The function returns True if x * n evaluates to a whole number and False\n#     otherwise. Both x and n, are string representation of a fraction, and have the following format,\n#     <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n#     You can assume that x, and n are valid fractions, and do not have zero as denominator.\n#     simplify(\"1/5\", \"5/1\") = True\n#     simplify(\"1/6\", \"2/1\") = False\n#     simplify(\"7/10\", \"10/2\") = False\ndef simplify(x, n):\n    if x == '0':\n        return False\n    if n == '0':\n        return True\n    if x == '1':\n        return True\n    if n == '1':\n        return True\n    if x == '2':\n        return True\n    if n == '2':\n        return True\n    if x == '3':\n        return True\n    if n == '3':\n        return True\n    if x == '4':\n        return True\n    if n == '4':\n        return True\n    if x == '5':\n        return True\n    if n == '5':\n        return True\n    if x == '6':\n        return True\n    if n == '6':\n        return True\n    if x == '7':\n        return True\n    if n == '7':\n        return True\n    if x == '8':\n        return True\n    if n == '8':\n        return True\n    if x == '9':\n        return True\n    if n == '9':\n        return True\n    if x == '10':\n        return True\n    if n == '10':\n        return True\n    if x == '11':\n        return True\n    if n == '11':\n        return True\n    if x == '12':\n        return True\n    if n == '12':\n        return True\n    if x == '13':\n        return True\n    if n == '13':\n        return True\n    if x == '14':\n        return True\n    if n == '14':\n        return True\n    if x == '15':\n        return True\n    if n == '15':\n        return True\n    if x == '16':\n        return True\n    if n == '16':\n        return True\n    if x == '17':\n        return True\n    if n == '17':\n        return True\n    if x == '18':\n        return True\n    if n == '18':\n        return True\n    if x == '19':\n        return True\n    if n == '19':\n        return True\n    if x == '20':\n        return True\n    if n == '20':\n        return True\n    if x == '21':\n        return True\n    if n == '21':\n        return True\n    if x == '22':\n        return True\n    if n == '22':\n        return True\n    if x == '23':\n        return True\n    if n == '23':\n        return True\n    if x == '24':\n        return True\n    if n == '24':\n        return True\n    if x == '25':\n        return True\n    if n == '25':\n        return True\n    if x == '26':\n        return True\n    if n == '26':\n        return True\n    if x == '27':\n        return True\n    if n == '27':\n        return True\n    if x == '28':\n        return True\n    if n == '28':\n        return True\n    if x == '29':\n        return True\n    if n == '29':\n        return True\n    if x == '30':\n        return True\n    if n == '30':\n        return True\n    if x == '31':\n        return True\n    if n == '31':\n        return True\n    if x == '32':\n        return True\n    if n == '32':\n        return True\n    if x == '33':\n        return True\n    if n == '33':\n        return True\n    if x == '34':\n        return True\n    if n == '34':\n        return True\n    if x == '35':\n        return True\n    if n == '35':\n        return True\n    if x == '36':\n        return True\n    if n == '36':\n        return True\n    if x == '37':\n        return True\n    if n == '37':\n        return True\n    if x == '38':\n        return True\n    if n == '38':\n        return True\n    if x == '39':\n        return True\n    if n == '39':\n        return True\n    if x =="}
{"task_id": "HumanEval/145", "completion": "\n# Python\n#     Write a function which sorts the given list of integers\n#     in ascending order according to the sum of their digits.\n#     Note: if there are several items with similar sum of their digits,\n#     order them based on their index in original list.\n#     For example\ndef order_by_points(nums):\n    return sorted(nums, key=lambda x: sum(x), reverse=True) "}
{"task_id": "HumanEval/146", "completion": "\n# Python\n#     Write a function that takes an array of numbers as input and returns \n#     the number of elements in the array that are greater than 10 and both \n#     first and last digits of a number are odd (1, 3, 5, 7, 9).\n#     For example\ndef specialFilter(nums):\n    return sum(filter(lambda x: x > 10 and x[0] % 2 == 1 and x[1] % 2 == 1, nums)) "}
{"task_id": "HumanEval/147", "completion": "\n# Python\n#     You are given a positive integer n. You have to create an integer array a of length n.\n#         For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n#         Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n#     and a[i] + a[j] + a[k] is a multiple of 3.\n#     Example \ndef get_max_triples(n):\n    return [i * i - i + 1 for i in range(n)] "}
{"task_id": "HumanEval/148", "completion": "\n# Python\n#     There are eight planets in our solar system: the closerst to the Sun \n#     is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n#     Uranus, Neptune.\n#     Write a function that takes two planet names as strings planet1 and planet2. \n#     The function should return a tuple containing all planets whose orbits are \n#     located between the orbit of planet1 and the orbit of planet2, sorted by \n#     the proximity to the sun. \n#     The function should return an empty tuple if planet1 or planet2\n#     are not correct planet names. \n#     Examples\n#     bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n#     bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n#     bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\ndef bf(planet1, planet2):\n    return tuple(sorted(list(filter(lambda x: x[0] < planet2[0] and x[1] > planet1[1], planet_orbit_list)), key=lambda x: x[1] - x[0])) "}
{"task_id": "HumanEval/149", "completion": "\n# Python\n#     Write a function that accepts a list of strings as a parameter,\n#     deletes the strings that have odd lengths from it,\n#     and returns the resulted list with a sorted order,\n#     The list is always a list of strings and never an array of numbers,\n#     and it may contain duplicates.\n#     The order of the list should be ascending by length of each word, and you\n#     should return the list sorted by that rule.\n#     If two words have the same length, sort the list alphabetically.\n#     The function should return a list of strings in sorted order.\n#     You may assume that all words will have the same length.\n#     For example\ndef sorted_list_sum(lst):\n    return sorted(lst, key=len) "}
{"task_id": "HumanEval/150", "completion": "\n# Python\n#     A simple program which should return the value of x if n is \n#     a prime number and should return the value of y otherwise.\n#     Examples\ndef x_or_y(n, x, y):\n    if n % 2 == 0:\n        return y\n    else:\n        return x "}
{"task_id": "HumanEval/151", "completion": "\n# Python\n#     Given a list of numbers, return the sum of squares of the numbers\n#     in the list that are odd. Ignore numbers that are negative or not integers.\n#     double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n#     double_the_difference([-1, -2, 0]) == 0\n#     double_the_difference([9, -2]) == 81\n#     double_the_difference([0]) == 0  \n#     If the input list is empty, return 0.\ndef double_the_difference(lst):\n    if lst:\n        return lst[0] + lst[1]\n    else:\n        return 0\nif __name__ == '__main__':\n    lst = [1, 3, 2, 0]\n    print(double_the_difference(lst)) "}
{"task_id": "HumanEval/152", "completion": "\n# Python\n#     I think we all remember that feeling when the result of some long-awaited\n#     event is finally known. The feelings and thoughts you have at that moment are\ndef compare(game,guess):\n    if game.is_won():\n        return True\n    elif guess == game.get_winner():\n        return True\n    elif guess == game.get_loser():\n        return False\n    else:\n        return False\n# end of function\ndef get_winner(game):\n    return game.get_winner()\n# end of function\ndef get_loser(game):\n    return game.get_loser()\n# end of function\ndef get_winner_and_loser(game):\n    return (game.get_winner(), game.get_loser())\n# end of function\ndef get_winner_and_loser_str(game):\n    return 'Winner:'+ str(game.get_winner()) +'and Loser:'+ str(game.get_loser()) "}
{"task_id": "HumanEval/153", "completion": "\n# Python\n#     You will be given the name of a class (a string) and a list of extensions.\n#     The extensions are to be used to load additional classes to the class. The\n#     strength of the extension is as follows: Let CAP be the number of the uppercase\n#     letters in the extension's name, and let SM be the number of lowercase letters \n#     in the extension's name, the strength is given by the fraction CAP - SM. \n#     You should find the strongest extension and return a string in this \n#     format: ClassName.StrongestExtensionName.\n#     If there are two or more extensions with the same strength, you should\n#     choose the one that comes first in the list.\n#     For example, if you are given \"Slices\" as the class and a list of the\n#     extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n#     return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n#     (its strength is -1).\n#     Example\ndef Strongest_Extension(class_name, extensions):\n    return extensions[0] "}
{"task_id": "HumanEval/154", "completion": "\n# Python\n#     You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n#     cycpattern_check(\"abcd\",\"abd\") => False\n#     cycpattern_check(\"hello\",\"ell\") => True\n#     cycpattern_check(\"whassup\",\"psus\") => False\n#     cycpattern_check(\"abab\",\"baa\") => True\n#     cycpattern_check(\"efef\",\"eeff\") => False\n#     cycpattern_check(\"himenss\",\"simen\") => True\ndef cycpattern_check(a , b):\n    if a == b:\n        return True\n    else:\n        return False\nreturn cycpattern_check "}
{"task_id": "HumanEval/155", "completion": "\n# Python\n#     Given an integer. return a tuple that has the number of even and odd digits respectively.\n#      Example\ndef even_odd_count(num):\n    return (num % 2, num // 2) "}
{"task_id": "HumanEval/156", "completion": "\n# Python\n#     Given a positive integer, obtain its roman numeral equivalent as a string,\n#     and return it in lowercase.\n#     Restrictions: 1 <= num <= 1000\n#     Examples\ndef int_to_mini_roman(number):\n    return roman_to_mini_roman(number) "}
{"task_id": "HumanEval/157", "completion": "\n# Python\n#     Given the lengths of the three sides of a triangle. Return True if the three\n#     sides form a right-angled triangle, False otherwise.\n#     A right-angled triangle is a triangle in which one angle is right angle or \n#     90 degree.\n#     Example\ndef right_angle_triangle(a, b, c):\n    return (a + b + c) % 180 == 90\n#     return (a + b + c) % 180 == 0\ndef is_right_angle_triangle(a, b, c):\n    return right_angle_triangle(a, b, c) "}
{"task_id": "HumanEval/158", "completion": "\n# Python\n#     Write a function that accepts a list of strings.\n#     The list contains different words. Return the word with maximum number\n#     of unique characters. If multiple strings have maximum number of unique\n#     characters, return the one which comes first in lexicographical order.\n#     find_max([\"name\", \"of\", \"string\"]) == \"string\"\n#     find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n#     find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words):\n    return max(words, key=len) "}
{"task_id": "HumanEval/159", "completion": "\n# Python\n#     You're a hungry rabbit, and you already have eaten a certain number of carrots,\n#     but now you need to eat more carrots to complete the day's meals.\n#     you should return an array of [ total number of eaten carrots after your meals,\n#                                     the number of carrots left after your meals ]\n#     if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n#     Example\ndef eat(number, need, remaining):\n    if number == 0:\n        return [0, 0]\n    elif number == 1:\n        return [1, 0]\n    elif number == 2:\n        return [2, 0]\n    elif number == 3:\n        return [3, 0]\n    elif number == 4:\n        return [4, 0]\n    elif number == 5:\n        return [5, 0]\n    elif number == 6:\n        return [6, 0]\n    elif number == 7:\n        return [7, 0]\n    elif number == 8:\n        return [8, 0]\n    elif number == 9:\n        return [9, 0]\n    elif number == 10:\n        return [10, 0]\n    elif number == 11:\n        return [11, 0]\n    elif number == 12:\n        return [12, 0]\n    elif number == 13:\n        return [13, 0]\n    elif number == 14:\n        return [14, 0]\n    elif number == 15:\n        return [15, 0]\n    elif number == 16:\n        return [16, 0]\n    elif number == 17:\n        return [17, 0]\n    elif number == 18:\n        return [18, 0]\n    elif number == 19:\n        return [19, 0]\n    elif number == 20:\n        return [20, 0]\n    elif number == 21:\n        return [21, 0]\n    elif number == 22:\n        return [22, 0]\n    elif number == 23:\n        return [23, 0]\n    elif number == 24:\n        return [24, 0]\n    elif number == 25:\n        return [25, 0]\n    elif number == 26:\n        return [26, 0]\n    elif number == 27:\n        return [27, 0]\n    elif number == 28:\n        return [28, 0]\n    elif number == 29:\n        return [29, 0]\n    elif number == 30:\n        return [30, 0]\n    elif number == 31:\n        return [31, 0]\n    elif number == 32:\n        return [32, 0]\n    elif number == 33:\n        return [33, 0]\n    elif number == 34:\n        return [34, 0]\n    elif number == 35:\n        return [35, 0]\n    elif number == 36:\n        return [36, 0]\n    elif number == 37:\n        return [37, 0]\n    elif number == 38:\n        return [38, 0]\n    elif number == 39:\n        return [39, 0]\n    elif number == 40:\n        return [40, 0]\n    elif number == 41:\n        return [41, 0]\n    elif number == 42:\n        return [42, 0]\n    elif number == 43:\n        return [43, 0]\n    elif number == 44:\n        return [44, 0]\n    elif number == 45:\n        return [45, 0]\n    elif number == 46:\n        return [46, 0]\n    elif number == 47:\n        return [47, 0]\n    elif number == 48:\n        return [48, 0]\n    elif number == 49:\n        return [49, 0]\n    elif number == 50:\n        return [50, 0]\n    elif number == 51:\n        return [51, 0]\n    elif number == 52:\n        return [52, 0]\n    elif number == 53:\n        return [53, 0]\n    elif number == 54:\n        return [54, 0]"}
{"task_id": "HumanEval/160", "completion": "\n# Python\n#     Given two lists operator, and operand. The first list has basic algebra operations, and \n#     the second list is a list of integers. Use the two given lists to build the algebric \n#     expression and return the evaluation of this expression.\n#     The basic algebra operations\ndef do_algebra(operator, operand):\n    if operator == '+':\n        return operand\n    elif operator == '-':\n        return -operand\n    elif operator == '*':\n        return operand\n    elif operator == '/':\n        return operand / 2\n    elif operator == '^':\n        return operand ** 2\n    elif operator == '//':\n        return operand // 2\n    elif operator == '**':\n        return operand ** 2\n    elif operator == '!':\n        return not operand\n    elif operator == '&':\n        return operand & 2\n    elif operator == '|':\n        return operand | 2\n    elif operator == '^':\n        return operand ** 2\n    elif operator == '<<':\n        return operand << 2\n    elif operator == '>>':\n        return operand >> 2\n    elif operator == '&':\n        return operand & 2\n    elif operator == '|':\n        return operand | 2\n    elif operator == '^':\n        return operand ** 2\n    elif operator == '!':\n        return not operand\n    elif operator == '&':\n        return operand & 2\n    elif operator == '|':\n        return operand | 2\n    elif operator == '^':\n        return operand ** 2\n    elif operator == '*':\n        return operand * 2\n    elif operator == '/':\n        return operand / 2\n    elif operator == '**':\n        return operand ** 2\n    elif operator == '&':\n        return operand & 2\n    elif operator == '|':\n        return operand | 2\n    elif operator == '^':\n        return operand ** 2\n    elif operator == '!':\n        return not operand\n    elif operator == '&':\n        return operand & 2\n    elif operator == '|':\n        return operand | 2\n    elif operator == '^':\n        return operand ** 2\n    elif operator == '*':\n        return operand * 2\n    elif operator == '/':\n        return operand / 2\n    elif operator == '**':\n        return operand ** 2\n    elif operator == '&':\n        return operand & 2\n    elif operator == '|':\n        return operand | 2\n    elif operator == '^':\n        return operand ** 2\n    elif operator == '!':\n        return not operand\n    elif operator == '&':\n        return operand & 2\n    elif operator == '|':\n        return operand | 2\n    elif operator == '^':\n        return operand ** 2\n    elif operator == '*':\n        return operand * 2\n    elif operator == '/':\n        return operand / 2\n    elif operator == '**':\n        return operand ** 2\n    elif operator == '&':\n        return operand & 2\n    elif operator == '|':\n        return operand | 2\n    elif operator == '^':\n        return operand ** 2\n    elif operator == '!':\n        return not operand\n    elif operator == '&':\n        return operand & 2\n    elif operator == '|':\n        return operand | 2\n    elif operator == '^':\n        return operand ** 2\n    elif operator == '*':\n        return operand * 2\n    elif operator == '/':\n        return operand / 2\n    elif operator == '**':\n        return operand ** 2\n    elif operator == '&':\n        return operand & 2\n    elif operator == '|':\n        return operand | 2\n    elif operator == '^':\n        return operand ** 2\n    elif operator == '!':\n        return not operand\n    elif operator == '&':\n        return operand & 2\n    elif operator == '|':\n        return operand | 2\n    elif operator == '^':\n        return operand ** 2\n    elif operator == '*':\n        return operand * 2\n    elif operator == '/':\n        return operand / 2\n    elif operator == '**':\n        return operand ** 2\n    elif operator == '&':\n        return operand & 2\n    elif operator == '|':\n        return operand | 2\n    elif operator == '^':\n        return oper"}
{"task_id": "HumanEval/161", "completion": "\n# Python\n#     You are given a string s.\n#     if s[i] is a letter, reverse its case from lower to upper or vise versa, \n#     otherwise keep it as it is.\n#     If the string contains no letters, reverse the string.\n#     The function should return the resulted string.\n#     Examples\n#     solve(\"1234\") = \"4321\"\n#     solve(\"ab\") = \"AB\"\n#     solve(\"#a@C\") = \"#A@c\"\ndef solve(s):\n    if not s:\n        return s\n    if s[0] == s[-1]:\n        return solve(s[1:-1]) + solve(s[0:-1])\n    else:\n        return solve(s[1:-1]) + solve(s[0:-1]) + solve(s[1:])\ns = input()\nreturn solve(s) "}
{"task_id": "HumanEval/162", "completion": "\n# Python\n#     Given a string 'text', return its md5 hash equivalent string.\n#     If 'text' is an empty string, return None.\n#     >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\ndef string_to_md5(text):\n    if text is None:\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest() "}
{"task_id": "HumanEval/163", "completion": "\n# Python\n#     Given two positive integers a and b, return the even digits between a\n#     and b, in ascending order.\n#     For example\ndef generate_integers(a, b):\n    return [i for i in range(a, b + 1) if i % 2 == 0] "}
