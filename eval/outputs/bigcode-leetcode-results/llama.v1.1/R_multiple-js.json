[["// <func> // JavaScript\n//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n  var result = false;\n  for(var i = 0; i < numbers.length; i++){\n    if(numbers[i] < threshold){\n      result = true;\n      break;\n    }\n  }\n  return result;\n}\n"], ["// <func> // JavaScript\n//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n    var result = [];\n    var open_braces = [];\n    var close_braces = [];\n    var open_braces_length = open_braces.length;\n    var close_braces_length = close_braces.length;\n    var open_braces_index = 0;\n    var close_braces_index = 0;\n    var open_braces_string = \"\";\n    var close_braces_string = \"\";\n    var open_braces_length_string = \"\";\n    var close_braces_length_string = \"\";\n    var open_braces_index_string = \"\";\n    var close_braces_index_string = \"\";\n    var open_braces_string_length = \"\";\n    var close_braces_string_length = \"\";\n    var open_braces_string_index = 0;\n    var close_braces_string_index = 0;\n    var open_braces_string_length_index = 0;\n    var close_braces_string_length_index = 0;\n    var open_braces_index_string_length = 0;\n    var close_braces_index_string_length = 0;\n    var open_braces_index_string_index = 0;\n    var close_braces_index_string_index = 0;\n    var open_braces_index_string_length_index = 0;\n    var close_braces_index_string_length_index = 0;\n    var open_braces_index_string_length_index = 0;\n    var open_braces_index_string_index = "], ["// <func> // JavaScript\n//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n  var result = 0;\n  var decimals = number.toString().split('.');\n  var integer = parseInt(decimals[0]);\n  var decimal = parseInt(decimals[1]);\n  if(decimal > 1){\n    result = integer + decimal;\n  }\n  return result;\n}\n"], ["// <func> // JavaScript\n//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  var result = false;\n  for(var i = 0; i < operations.length; i++){\n    if(operations[i] < 0){\n      result = true;\n      break;\n    }\n  }\n  return result;\n}\n\n\n\nA: You can use the following code:"], ["// <func> // JavaScript\n//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n  var mean = 0;\n  var deviation = 0;\n  var sum = 0;\n  var i = 0;\n  var num = 0;\n  var num_sum = 0;\n  var num_sum_sum = 0;\n  var num_sum_sum_sum = 0;\n  var num_sum_sum_sum_sum = 0;\n  var num_sum_sum_sum_sum_sum = 0;\n  var num_sum_sum_sum_sum_sum_sum = 0;\n  var num_sum_sum_sum_sum_sum_sum = 0;\n  var num_sum_sum_sum_sum_sum_sum = 0;\n  var num_sum_sum_sum_sum_sum_sum = 0;\n  var num_sum_sum_sum_sum_sum_sum = 0;\n  var num_sum_sum_sum_sum_sum_sum = 0;\n  var num_sum_sum_sum_sum_sum_sum = 0;\n  var num_sum_sum_sum_sum_sum_sum = 0;\n  var num_sum_sum_sum_sum_sum_sum = 0;\n  var num_sum_sum_sum_sum_sum_sum = 0;\n  var num_sum_sum_sum_sum_sum_sum = 0;\n  var num_sum_sum_sum_sum_sum_sum = 0;\n  var num_sum_sum_sum_sum_sum_sum = 0;\n  var num_sum_sum_sum_sum_sum_sum = 0;\n  var num"], ["// <func> // JavaScript\n//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        var number = numbers[i];\n        var numberDelimeter = delimeter;\n        if(numberDelimeter == undefined){\n            numberDelimeter = 0;\n        }\n        var numberDelimited = numberDelimeter + number;\n        result.push(numberDelimited);\n    }\n    return result;\n}\n"], ["// <func> // JavaScript\n//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var result = [];\n    var current_level = 0;\n    var current_group = \"\";\n    var current_parent = \"\";\n    var current_parent_level = 0;\n    var current_parent_group = \"\";\n    var current_parent_group_level = 0;\n    var current_parent_group_depth = 0;\n    var current_parent_depth = 0;\n    var current_parent_nesting = 0;\n    var current_parent_nesting_depth = 0;\n    var current_parent_nesting_level = 0;\n    var current_parent_nesting_depth_level = 0;\n    var current_parent_nesting_depth_group = 0;\n    var current_parent_nesting_depth_group_level = 0;\n    var current_parent_nesting_depth_group_depth = 0;\n    var current_parent_nesting_depth_group_depth_level = 0;\n    var current_parent_nesting_depth_group_depth_level_group = 0;\n    var current_parent_nesting_depth_group_depth_level_group_level = 0;\n    var current_parent_nesting_depth_group_depth_level_group_depth = 0;\n    var current_parent_nesting_depth_group_depth_level_group_depth_level = 0;\n    var current_parent_nesting_depth_group_depth_level_group_depth_level_group = 0;\n    var current_parent_nesting_depth_group_depth_level_group_depth_level_group_level = 0;\n    var current_parent_"], ["// <func> // JavaScript\n//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n    var result = [];\n    for(var i=0; i<strings.length; i++){\n        if(strings[i].indexOf(substring) > -1){\n            result.push(strings[i]);\n        }\n    }\n    return result;\n}\n\n\nA: You can use the following code:"], ["// <func> // JavaScript\n//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return sum + product;\n}\n\n\nA: You can use reduce to get the sum and product of the array.\n\n"], ["// <func> // JavaScript\n//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n    var max = 0;\n    var max_index = 0;\n    var max_array = [];\n    var max_array_length = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var max_array_length = 0;\n    var max_array = [];\n    var max_array_length = 0;\n    var max_array_index = 0;\n    var max_array_index = 0;\n    var max_array_length = 0;\n    var max_array_length = 0;\n    var max_array_length = 0;\n    var max_array_length = 0;\n    var max_array_length = 0;\n    var max_array_length = 0;\n    var max_array_length = 0;\n    var max_array_length = 0;\n    var max_array_length = 0;\n    var max_array_length = 0;\n    var max_array_length = 0;\n    var max_array_length = 0;\n    var max_array_length = 0;\n    var max_array_length = 0;\n    var max_array_length = 0;\n    var max_array_length = 0;\n    var max_array_length = 0;\n    var max_array_length = 0;\n    var max_array_length = 0;\n    var max_array_length = 0;\n    var max_array_length = 0;\n    var max_array_length = 0;\n    var max_array_length = 0;\n    var max_array_length = 0;\n    var max_array_length = 0;\n    var"], ["// <func> // JavaScript\n//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var palindrome = \"\";\n    var prefix = \"\";\n    var suffix = \"\";\n    var index = 0;\n    var length = string.length;\n    var current = string.charAt(index);\n    var currentIndex = current.length;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex = currentIndex;\n    var currentIndex"], ["// <func> // JavaScript\n//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  var result = \"\";\n  var i;\n  for(i=0; i<a.length; i++){\n    result += a[i] ^ b[i];\n  }\n  return result;\n}\n"], ["// <func> // JavaScript\n//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if(strings.length === 0) return undefined;\n  var max = 0;\n  for(var i = 0; i < strings.length; i++){\n    var s = strings[i];\n    if(s.length > max) max = s.length;\n  }\n  return max;\n}\n"], ["// <func> // JavaScript\n//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n  if(a === b){\n    return a;\n  }\n  if(a === 0){\n    return b;\n  }\n  if(b === 0){\n    return a;\n  }\n  if(a === 1){\n    return b;\n  }\n  if(b === 1){\n    return a;\n  }\n  if(a === 2){\n    return b;\n  }\n  if(b === 2){\n    return a;\n  }\n  if(a === 3){\n    return b;\n  }\n  if(b === 3){\n    return a;\n  }\n  if(a === 4){\n    return b;\n  }\n  if(b === 4){\n    return a;\n  }\n  if(a === 5){\n    return b;\n  }\n  if(b === 5){\n    return a;\n  }\n  if(a === 6){\n    return b;\n  }\n  if(b === 6){\n    return a;\n  }\n  if(a === 7){\n    return b;\n  }\n  if(b === 7){\n    return a;\n  }\n  if(a === 8){\n    return b;\n  }\n  if(b === 8){\n    return a;\n  }\n  if(a === 9){\n    return b;\n  }\n  if(b === 9){\n    return a;\n  }\n  if(a === 10){\n    return b;\n  }\n  if(b === 10){\n    return a;\n  }\n  if(a === 11){\n    return b;\n  }\n  if(b === 11){\n    return a;\n  }\n  if(a === "], ["// <func> // JavaScript\n//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  var i = 0;\n  var len = string.length;\n  while(i < len){\n    var current = string.charAt(i);\n    var next = string.charAt(i + 1);\n    if(current === ' ' || current === ' ' || next === ' '){\n      prefixes.push(current);\n    }\n    i += 1;\n  }\n  return prefixes;\n}\n\n\nA: You can use a recursive function to find the prefixes.\n\n"], ["// <func> // JavaScript\n//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  var str = \"\";\n  for(var i = 0; i < n; i++){\n    str += i;\n  }\n  return str;\n}\n"], ["// <func> // JavaScript\n//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    var count = 0;\n    var i = 0;\n    var len = string.length;\n    var chars = string.split(\"\");\n    for(i; i < len; i++){\n        if(chars[i] != chars[i+1]){\n            count++;\n        }\n    }\n    return count;\n}\n\n\nA: You can use a regex to find the number of distinct characters in a string.\n\n"], ["// <func> // JavaScript\n//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  var music_array = music_string.split(\" \");\n  var music_array_length = music_array.length;\n  var music_array_index = 0;\n  var music_array_beat_index = 0;\n  var music_array_beat_count = 0;\n  var music_array_beat_count_array = [];\n  var music_array_beat_count_array_length = music_array_beat_count_array.length;\n  var music_array_beat_count_array_index = 0;\n  var music_array_beat_count_array_index_length = music_array_beat_count_array_index.length;\n  var music_array_beat_count_array_index_index = 0;\n  var music_array_beat_count_array_index_index_length = music_array_beat_count_array_index_index.length;\n  var music_array_beat_count_array_index_index_index = 0;\n  var music_array_beat_count_array_index_index_index_length = music_array_beat_count_array_index_index_index.length;\n  var music_array_beat_count_array_index_index_index_index = 0;\n  var music_array_beat_count_array_index_index_index_index_length ="], ["// <func> // JavaScript\n//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  var count = 0;\n  var found = false;\n  var i = 0;\n  while(found === false){\n    if(string.charAt(i) === substring){\n      count++;\n      i++;\n    }\n    else{\n      found = true;\n    }\n  }\n  return count;\n}\n"], ["// <func> // JavaScript\n//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  var sorted = [];\n  var i;\n  for (i = 0; i < numbers.length; i++){\n    sorted.push(numbers[i]);\n  }\n  sorted.sort();\n  return sorted.join(\"\");\n}\n"], ["// <func> // JavaScript\n//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var closest = null;\n  var closest_number = null;\n  var closest_number_array = [];\n  var closest_number_array_length = 0;\n  var closest_number_array_index = 0;\n  var closest_number_array_length_index = 0;\n  var closest_number_array_length = 0;\n  var closest_number_array_length_index = 0;\n  var closest_number_array_length = 0;\n  var closest_number_array_length_index = 0;\n  var closest_number_array_length = 0;\n  var closest_number_array_length_index = 0;\n  var closest_number_array_length = 0;\n  var closest_number_array_length_index = 0;\n  var closest_number_array_length = 0;\n  var closest_number_array_length_index = 0;\n  var closest_number_array_length = 0;\n  var closest_number_array_length_index = 0;\n  var closest_number_array_length = 0;\n  var closest_number_array_length_index = 0;\n  var closest_number_array_length = 0;\n  var closest_number_array_length_index = 0;\n  var closest_number_array_length = 0;\n  var closest_number_array_length_index = 0;\n  var closest_number_array_length ="], ["// <func> // JavaScript\n//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  var rescale = function(x){\n    return x * 1.0 / numbers.length;\n  };\n  var result = [];\n  for(var i=0; i<numbers.length; i++){\n    result.push(rescale(numbers[i]));\n  }\n  return result;\n}\n"], ["// <func> // JavaScript\n//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n    var result = [];\n    for(var i=0; i<values.length; i++){\n        if(isNaN(values[i])){\n            result.push(values[i]);\n        }\n        else{\n            result.push(values[i]);\n        }\n    }\n    return result;\n}\n\n\nA: You can use a for loop to iterate over the array and check if the value is a number.\n\n\nvar array = [1, 2, 3, \"abc\", {}, []];\n\nvar isNumber = function(value) {\n  return typeof value === 'number';\n};\n\nvar isNaN = function(value) {\n  return typeof value === 'number' && value !== value;\n};\n\nvar filter = function(array, predicate) {\n  for (var i = 0; i < array.length; i++) {\n    if (isNumber(array[i])) {\n      if (predicate(array[i])) {\n        return array[i];\n      }\n    }\n  }\n  return array;\n};\n\nvar result = filter(array, isNumber);\n"], ["// <func> // JavaScript\n//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n  var len = 0;\n  for(var i = 0; i < string.length; i++){\n    len += string.charCodeAt(i);\n  }\n  return len;\n}\n"], ["// <func> // JavaScript\n//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  var largest = 0;\n  for(var i = 1; i <= n; i++){\n    if(n % i == 0){\n      largest = i;\n    }\n  }\n  return largest;\n}\n"], ["// <func> // JavaScript\n//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n    var factors = [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = n;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = n;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = "], ["// <func> // JavaScript\n//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n    var result = [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n   "], ["// <func> // JavaScript\n//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n    var result = \"\";\n    var i;\n    for(i=0; i<string.length; i++){\n        var c = string.charAt(i);\n        if(c < 'a' || c > 'z'){\n            result += c;\n        }\n        else{\n            result += c.toUpperCase();\n        }\n    }\n    return result;\n}\n\n\nA: You can use a regex to do this:\nvar str = \"Hello\";\nvar re = /[a-z]/g;\nvar result = str.replace(re, function(c){\n    return c.toUpperCase();\n});\n\n\nA: You can use the following regex to replace all lowercase letters with uppercase letters:\nvar str = \"Hello\";\nvar re = /[a-z]/g;\nvar result = str.replace(re, function(c){\n    return c.toUpperCase();\n});\n\n\nA: You can use the following regex:\nvar str = \"Hello\";\nvar re = /[a-z]/g;\nvar result = str.replace(re, function(c){\n    return c.toUpperCase();\n});\n\n"], ["// <func> // JavaScript\n//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    var result = \"\";\n    for(var i=0; i<strings.length; i++){\n        result += strings[i];\n    }\n    return result;\n}\n"], ["// <func> // JavaScript\n//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n  return strings.filter(function(str){\n    return str.startsWith(prefix);\n  });\n}\n"], ["// <func> // JavaScript\n//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  var res = [];\n  for(var i = 0; i < l.length; i++){\n    if(l[i] > 0){\n      res.push(l[i]);\n    }\n  }\n  return res;\n}\n\n\nA: You can use Array.prototype.filter() to get the positive numbers:\n\n\nvar l = [-1, 2, -4, 5, 6];\n\nvar res = l.filter(function(x) {\n  return x > 0;\n});\n"], ["// <func> // JavaScript\n//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n == 1 || n == 2){\n        return true;\n    }\n    for(var i = 3; i < n; i++){\n        if(n % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nA: You can use the following function:"], ["// <func> // JavaScript\n//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\nvar l_indices = [];\nvar l_values = [];\nvar l_values_sorted = [];\nvar l_values_sorted_indices = [];\nvar l_values_sorted_indices_sorted = [];\nvar l_values_sorted_indices_sorted_indices = [];\nvar l_values_sorted_indices_sorted_values = [];\nvar l_values_sorted_indices_sorted_values_sorted = [];\nvar l_values_sorted_indices_sorted_values_sorted_indices = [];\nvar l_values_sorted_indices_sorted_values_sorted_values = [];\nvar l_values_sorted_indices_sorted_values_sorted_values_sorted = [];\nvar l_values_sorted_indices_sorted_values_sorted_values_sorted_indices = [];\nvar l_values_sorted_indices_sorted_values_sorted_values_sorted_values = [];\nvar l_values_sorted_indices_sorted_values_sorted_values_sorted_values_sorted = [];\nvar l_values_sorted_indices_sorted_values_sorted_values_sorted_values_sorted_indices = [];\nvar l_values_sorted_indices_sorted_values_sorted_values_sorted_values_sorted_values = [];\nvar l_values_sorted_indices_sorted_values_sorted_values_sorted_values_sorted_values_sorted = [];\nvar l_values_sorted_indices_sorted_values_sorted_values_sorted_values_sorted_values_sorted"], ["// <func> // JavaScript\n//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n    var result = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] != l[i+1]){\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n\n\nA: You can use Array.prototype.sort() to sort the array in ascending order.\n\n"], ["// <func> // JavaScript\n//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    var max = l[0];\n    for(var i=1; i<l.length; i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\n"], ["// <func> // JavaScript\n//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n"], ["// <func> // JavaScript\n//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\nvar l_even = [];\nvar l_odd = [];\nvar i;\nfor(i=0; i<l.length; i++){\nif(l[i]%2==0){\nl_odd.push(l[i]);\nl_even.push(l[i]);\n}\n}\nreturn l_even;\n}\n\n\nA: You can use a combination of sort and map.\n\n\nconst array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,"], ["// <func> // JavaScript\n//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n  if(n < 2){\n    return n;\n  }\n  var fib = 1;\n  var prime = 2;\n  while(n > 1){\n    fib = fib * fib;\n    prime = prime * prime;\n    n = n - 1;\n  }\n  return fib;\n}\n"], ["// <func> // JavaScript\n//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  var sum = 0;\n  for(var i=0; i<l.length; i++){\n    sum += l[i];\n  }\n  return sum === 0;\n}\n"], ["// <func> // JavaScript\n//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n    var collision = 0;\n    for(var i = 0; i < n; i++){\n        collision += car_race_collision(i);\n    }\n    return collision;\n}\n"], ["// <func> // JavaScript\n//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var i = 0;\n  return l.slice(i, i+1);\n}\n\n\n\nA: I think you can use Array.prototype.slice.call(arr) to get the new array.\n\n"], ["// <func> // JavaScript\n//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  var result = false;\n  var i = 0;\n  for(; i < l.length; i++){\n    if(l[i] === l[i-1]){\n      result = true;\n      break;\n    }\n  }\n  return result;\n}\n\n"], ["// <func> // JavaScript\n//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n    var result = x.toString();\n    var base_num = Math.floor(base);\n    var result_num = Math.floor(x);\n    var result_num_num = Math.floor(result_num);\n    var result_num_num_num = Math.floor(result_num_num);\n    var result_num_num_num_num = Math.floor(result_num_num_num);\n    var result_num_num_num_num_num = Math.floor(result_num_num_num_num);\n    var result_num_num_num_num_num_num = Math.floor(result_num_num_num_num_num);\n    var result_num_num_num_num_num_num = Math.floor(result_num_num_num_num_num_num);\n    var result_num_num_num_num_num_num = Math.floor(result_num_num_num_num_num_num);\n    var result_num_num_num_num_num_num_num = Math.floor(result_num_num_num_num_num_num_num);\n    var result_num_num_num_num_num_num_num = Math.floor(result_num_num_num_num_num_num_num);\n    var result_num_num_num_num_num_num_num = Math.floor(result_num_num_num_num_num_num_num);\n    var result_num_num_num_num_num_num_num = Math.floor(result_num_num_num_num_num_num_num);\n    var result_num_num_num_num_num_num_num = Math"], ["// <func> // JavaScript\n//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  if(a == 0){\n    return 0;\n  }\n  if(a == 1){\n    return 1;\n  }\n  if(a == 2){\n    return 2;\n  }\n  if(a == 3){\n    return 3;\n  }\n  if(a == 4){\n    return 4;\n  }\n  if(a == 5){\n    return 5;\n  }\n  if(a == 6){\n    return 6;\n  }\n  if(a == 7){\n    return 7;\n  }\n  if(a == 8){\n    return 8;\n  }\n  if(a == 9){\n    return 9;\n  }\n  if(a == 10){\n    return 10;\n  }\n  if(a == 11){\n    return 11;\n  }\n  if(a == 12){\n    return 12;\n  }\n  if(a == 13){\n    return 13;\n  }\n  if(a == 14){\n    return 14;\n  }\n  if(a == 15){\n    return 15;\n  }\n  if(a == 16){\n    return 16;\n  }\n  if(a == 17){\n    return 17;\n  }\n  if(a == 18){\n    return 18;\n  }\n  if(a == 19){\n    return 19;\n  }\n  if(a == 20){\n    return 20;\n  }\n  if(a == 21){\n    return 21;\n  }\n  if(a == 22){\n    return 22;\n  }\n  if(a == 23){\n    return 23;\n  }\n"], ["// <func> // JavaScript\n//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n    if(n < 0){\n        return 0;\n    }\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n        return 1;\n    }\n    if(n == 2){\n        return 2;\n    }\n    if(n == 3){\n        return 3;\n    }\n    if(n == 4){\n        return 4;\n    }\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\n\n\nA: You can use a recursive function to compute the fibonacci numbers."], ["// <func> // JavaScript\n//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n  var median = l.reduce(function(a, b){\n    return a + b;\n  });\n  return median;\n}\n\n\n\nA: You can use Array.prototype.reduce to get the median of an array.\n\n\nvar array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 9"], ["// <func> // JavaScript\n//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var text = text.toLowerCase();\n    var result = false;\n    for(var i = 0; i < text.length; i++){\n        var c = text.charAt(i);\n        if(c == text.charAt(i-1)){\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\n\nA: You can use the following code to check if a string is a palindrome."], ["// <func> // JavaScript\n//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var i = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;"], ["// <func> // JavaScript\n//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  var vowels = text.split('');\n  var result = '';\n  for(var i = 0; i < vowels.length; i++){\n    if(vowels[i] == 'a' || vowels[i] == 'e' || vowels[i] == 'i' || vowels[i] == 'o' || vowels[i] == 'u'){\n      result += vowels[i];\n    }\n  }\n  return result;\n}\n"], ["// <func> // JavaScript\n//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n  var i, j, k, l_min, l_max, min_l, max_l, min_t, max_t;\n  for(i=0; i<l.length; i++){\n    if(l[i] < t){\n      l_min = l[i];\n      l_max = l[i];\n    }\n    else{\n      l_min = l[i];\n      l_max = l[i];\n    }\n    min_l = Math.min(l_min, l_max);\n    max_l = Math.max(l_min, l_max);\n    min_t = Math.min(l_min, l_max);\n    max_t = Math.max(l_min, l_max);\n    if(min_l < min_t){\n      min_t = min_l;\n    }\n    if(max_l > max_t){\n      max_t = max_l;\n    }\n  }\n  return min_t < t;\n}\n\n"], ["// <func> // JavaScript\n//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}\n"], ["// <func> // JavaScript\n//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n    var i,j,len0,len1,chars0,chars1,i0,i1,j0,j1,len00,len10,len01,len11,len02,len12,len03,len13,len04,len14,len05,len15,len06,len16,len07,len17,len08,len18,len09,len19,len010,len100,len101,len102,len103,len104,len105,len106,len107,len108,len109,len110,len111,len112,len113,len114,len115,len116,len117,len118,len119,len120,len121,len122,len123,len124,len125,len126,len127,len128,len129,len130,len131,len132,len133,len134,len135,len136,len137,len138,len139,len140,len141,len142,len143,len1"], ["// <func> // JavaScript\n//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if(n==0 || n==1){\n    return n;\n  }\n  return fib(n-1)+fib(n-2);\n}\n"], ["// <func> // JavaScript\n//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  var result = false;\n  for(var i=0; i<brackets.length; i++){\n    var bracket = brackets[i];\n    var open = bracket.substring(0,1);\n    var close = bracket.substring(1,2);\n    if(open == close){\n      result = true;\n    }\n  }\n  return result;\n}\n"], ["// <func> // JavaScript\n//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var i=l.length;\n    while(i--){\n        if(l[i]<l[i-1]){\n            return true;\n        }\n    }\n    return false;\n}\n\n\nA: You can use the following function:"], ["// <func> // JavaScript\n//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  var result = [];\n  for (var i = 0; i < l1.length; i++){\n    var j = 0;\n    for (var j = 0; j < l2.length; j++){\n      if (l1[i] == l2[j]){\n        result.push(l1[i]);\n        result.push(l2[j]);\n      }\n    }\n  }\n  return result;\n}\n"], ["// <func> // JavaScript\n//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  var largest_prime = 1;\n  var largest_prime_factors = [];\n  var i = 0;\n  while(i < n){\n    var current_prime = Math.sqrt(n);\n    if(current_prime > largest_prime){\n      largest_prime = current_prime;\n      largest_prime_factors.push(current_prime);\n    }\n    i++;\n  }\n  return largest_prime_factors;\n}\n"], ["// <func> // JavaScript\n//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  return n + sum_to_n(n-1);\n}\n"], ["// <func> // JavaScript\n//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  var result = true;\n  for(var i=0; i<brackets.length; i++){\n    var bracket = brackets[i];\n    var opening = bracket.substring(0,1);\n    var closing = bracket.substring(1,bracket.length);\n    if(opening == closing){\n      result = false;\n    }\n  }\n  return result;\n}\n\n\nA: You can use a regex to match the opening and closing bracket.\nvar bracket = \"(\";\nvar bracket2 = \")\";\n\nvar regex = new RegExp(\"^\" + bracket + \"\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\s*\\\\"], ["// <func> // JavaScript\n//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  var result = [];\n  for(var i=0; i<xs.length; i++){\n    result.push(xs[i] * xs[i+1] - xs[i+1] * xs[i]);\n  }\n  return result;\n}\n"], ["// <func> // JavaScript\n//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if(n == 0 || n == 1){\n    return 0;\n  }\n  else if(n == 2){\n    return 1;\n  }\n  else if(n == 3){\n    return 2;\n  }\n  else{\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n  }\n}\n"], ["// <func> // JavaScript\n//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  var count = 0;\n  for(var i=0; i<s.length; i++){\n    if(s[i] in vowels){\n      count++;\n    }\n  }\n  return count;\n}\n"], ["// <func> // JavaScript\n//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  var result = \"\";\n  for(var i = 0; i < x.length; i++){\n    result += x[i] + shift;\n  }\n  return result;\n}\n"], ["// <func> // JavaScript\n//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  var sum = 0;\n  for(var i=0; i<s.length; i++){\n    if(s[i]>='a' && s[i]<='z'){\n      sum+=s[i];\n    }\n  }\n  return sum;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["// <func> // JavaScript\n//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  var total = 0;\n  var fruit = [];\n  var fruit_count = 0;\n  var fruit_count_total = 0;\n  var fruit_count_total_minus_one = 0;\n  var fruit_count_total_minus_two = 0;\n  var fruit_count_total_minus_three = 0;\n  var fruit_count_total_minus_four = 0;\n  var fruit_count_total_minus_five = 0;\n  var fruit_count_total_minus_six = 0;\n  var fruit_count_total_minus_seven = 0;\n  var fruit_count_total_minus_eight = 0;\n  var fruit_count_total_minus_nine = 0;\n  var fruit_count_total_minus_ten = 0;\n  var fruit_count_total_minus_eleven = 0;\n  var fruit_count_total_minus_twelve = 0;\n  var fruit_count_total_minus_thirteen = 0;\n  var fruit_count_total_minus_fourteen = 0;\n  var fruit_count_total_minus_fifteen = 0;\n  var"], ["// <func> // JavaScript\n//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  const index = arr.reduce(function(acc, node){\n    if(node.value === 0){\n      return acc;\n    }\n    return acc.concat(node.value);\n  }, []);\n  return index;\n}\n\n\n\nA: You can use reduce to get the index of the smallest value.\n\n\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, "], ["// <func> // JavaScript\n//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    var max = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var len = lst.length;\n    var result = -1;\n    for(i = 0; i < len; i++){\n        if(lst[i] > 0){\n            if(lst[i] == lst[i-1]){\n                if(lst[i-1] > 0){\n                    if(lst[i-1] == lst[i]){\n                        if(lst[i-1] > 0){\n                            if(lst[i-1] > lst[i]){\n                                result = lst[i];\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            else{\n                if(lst[i] > 0){\n                    if(lst[i] == lst[i-1]){\n                        if(lst[i] > 0){\n                            if(lst[i] > lst[i-1]){\n                                result = lst[i];\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else{\n            if(lst[i] > 0){\n                if(lst[i] == lst[i-1]){\n                    if(lst[i] > 0){\n                        if("], ["// <func> // JavaScript\n//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    var i = 0;\n    var j = lst.length;\n    var result = [];\n    while(i < j){\n        var temp = lst[i];\n        i++;\n        j--;\n        result.push(lst[i]);\n        lst[i] = temp;\n    }\n    return result;\n}\n\n\nA: Here's a solution that uses the built-in Array.sort() function.\n\n"], ["// <func> // JavaScript\n//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    var area = 0;\n    if(a == b && b == c){\n        area = 1;\n    }\n    else{\n        var sum = a + b + c;\n        if(sum > c){\n            area = c;\n        }\n        else{\n            area = sum - c;\n        }\n    }\n    return area;\n}\n\n\nA: You can use the following function to calculate the area of a triangle:"], ["// <func> // JavaScript\n//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n    if(q.length === 0){\n        return false;\n    }\n    if(q.length === 1){\n        return q[0] === w;\n    }\n    if(q.length === 2){\n        return q[0] === w && q[1] === w;\n    }\n    if(q.length === 3){\n        return q[0] === w && q[1] === w && q[2] === w;\n    }\n    return true;\n}\n"], ["// <func> // JavaScript\n//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  var min = arr.length;\n  var min_index = arr.length - 1;\n  var min_value = arr[min_index];\n  var min_index_change = 0;\n  var min_index_change_value = 0;\n  var min_index_change_index = 0;\n  var min_index_change_index_value = 0;\n  var min_index_change_value = 0;\n  var min_index_change_value_index = 0;\n  var min_index_change_value_index_value = 0;\n  var min_index_change_value_index_value_index = 0;\n  var min_index_change_value_index_value_index_value = 0;\n  var min_index_change_value_index_value_index_value_index = 0;\n  var min_index_change_value_index_value_index_value_index_value = 0;\n  var min_index_change_value_index_value_index_value_index_value_index = 0;\n  var min_index_change_value_index_value_index_value_index_value_index_value = 0;\n  var min_index_change_value_index_value_index_value_index_value_index_value_index = 0;\n  var min_index_change_value_index_"], ["// <func> // JavaScript\n//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  var result = [];\n  for(var i = 0; i < lst1.length; i++){\n    var match = lst2.indexOf(lst1[i]);\n    if(match > -1){\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n}\n\n\nA: You can use a recursive function to find the minimum number of chars in the first array and the second array.\n\n"], ["// <func> // JavaScript\n//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a < 100){\n        return false;\n    }\n    for(var i = 2; i < a; i++){\n        if(a % i == 0){\n            return false;\n        }\n    }\n    return true;\n}\n\n\nA: You can use the following code to check if a number is prime or not."], ["// <func> // JavaScript\n//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n    if(x == n){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\n\nA: You can use the following code:"], ["// <func> // JavaScript\n//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    if(a < 0){\n        return false;\n    }\n    if(a % 3 == 0){\n        return true;\n    }\n    return false;\n}\n\n\nA: You can use the following function:"], ["// <func> // JavaScript\n//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n    var result = 0;\n    var i = 0;\n    var num_hex = num.toString();\n    var num_dec = num.toString();\n    var num_hex_dec = num_hex.toString();\n    var num_dec_hex = num_dec.toString();\n    var num_dec_dec = num_dec.toString();\n    var num_dec_dec_hex = num_dec_dec.toString();\n    var num_dec_dec_dec = num_dec_dec.toString();\n    var num_dec_dec_dec_hex = num_dec_dec_dec.toString();\n    var num_dec_dec_dec_dec_hex = num_dec_dec_dec_dec."], ["// <func> // JavaScript\n//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  var result = \"\";\n  for(var i = 0; i < decimal; i++){\n    result += (i < 10 ? '0' : '') + decimal;\n  }\n  return result;\n}\n\n\n\nA: You can use the following code to convert decimal to binary."], ["// <func> // JavaScript\n//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n    var i,j,len,len2,len3,len4,len5,len6,len7,len8,len9,len10,len11,len12,len13,len14,len15,len16,len17,len18,len19,len20,len21,len22,len23,len24,len25,len26,len27,len28,len29,len30,len31,len32,len33,len34,len35,len36,len37,len38,len39,len40,len41,len42,len43,len44,len45,len46,len47,len48,len49,len50,len51,len52,len53,len54,len55,len56,len57,len58,len59,len60,len61,len62,len63,len64,len65,len66,len67,len68,len69,len70,len71,len72,len73,len74,len75,len76,len77,len78,len79,len80,len81,len82,len83,len84,len85,len86,len87,len88,len89,len90,len9"], ["// <func> // JavaScript\n//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var letter_grades = [];\n    for(var i = 0; i < grades.length; i++){\n        var letter_grade = grades[i];\n        if(letter_grade >= 4.0){\n            letter_grades.push(letter_grade);\n        }\n    }\n    return letter_grades;\n}\n\n\nA: You can use the following code:"], ["// <func> // JavaScript\n//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    var length = string.length;\n    if(length % 2 == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\n\nA: You can use a recursive function to check if the string is prime."], ["// <func> // JavaScript\n//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n    var count = 0;\n    for(var i = 1; i <= n; i++){\n        if(i % 1 == 0){\n            count++;\n        }\n    }\n    return count;\n}\n\n\nA: You can use a recursive function."], ["// <func> // JavaScript\n//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  var sum = 0;\n  for(var i = 0; i < N; i++){\n    sum += (i < N ? i : 0) * (1 << i);\n  }\n  return sum;\n}\n\n\nA: You can use a recursive function like this:"], ["// <func> // JavaScript\n//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    var even = [];\n    for(var i=0; i<lst.length; i++){\n        if(lst[i]%2==0){\n            even.push(lst[i]);\n        }\n    }\n    return even;\n}\n\n\nA: You can use a for loop to do this.\nvar even = [];\nfor(var i=0; i<lst.length; i++){\n    if(lst[i]%2==0){\n        even.push(lst[i]);\n    }\n}\n\n\nA: You can use a for loop to do this.\nvar even = [];\nfor(var i=0; i<lst.length; i++){\n    if(lst[i]%2==0){\n        even.push(lst[i]);\n    }\n}\n\n"], ["// <func> // JavaScript\n//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n    var arr = s.split(\" \");\n    var newArr = [];\n    for(var i=0; i<arr.length; i++){\n        var temp = arr[i];\n        arr[i] = arr[arr.length-1];\n        arr[arr.length-1] = temp;\n        newArr.push(arr[i]);\n    }\n    return newArr;\n}\n\n\nA: You can use the following code:"], ["// <func> // JavaScript\n//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  var rows = [], cols = [], i, j, x1, x2, y1, y2;\n  for(i = 0; i < lst.length; i++){\n    for(j = 0; j < lst[i].length; j++){\n      if(lst[i][j] == x){\n        rows.push([i, j]);\n        cols.push([x1 = i, x2 = j]);\n        x1 = x;\n        x2 = x;\n      }\n    }\n  }\n  return rows;\n}\n\n\nA: I'm not sure if this is the best way to do it, but I think it's the simplest."], ["// <func> // JavaScript\n//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    var sum = 0;\n    var last = array.length-1;\n    var first = array[0];\n    var i;\n    for(i=0; i<array.length; i++){\n        sum += first;\n        if(sum % 2 === 0){\n            last--;\n            first = array[last];\n        }\n    }\n    return array.slice(0,last).sort().slice(last);\n}\n\n\nA: I'm not sure if this is the best way to do it, but I've come up with a solution that I think is pretty efficient."], ["// <func> // JavaScript\n//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var rotated = alphabet.slice(0, 2);\n    var rotatedS = alphabet.slice(0, 2);\n    var rotatedS2 = alphabet.slice(0, 2);\n    var rotatedS3 = alphabet.slice(0, 2);\n    var rotatedS4 = alphabet.slice(0, 2);\n    var rotatedS5 = alphabet.slice(0, 2);\n    var rotatedS6 = alphabet.slice(0, 2);\n    var rotatedS7 = alphabet.slice(0, 2);\n    var rotatedS8 = alphabet.slice(0, 2);\n    var rotatedS9 = alphabet.slice(0, 2);\n    var rotatedS10 = alphabet.slice(0, 2);\n    var rotatedS11 = alphabet.slice(0, 2);\n    var rotatedS12 = alphabet.slice(0, 2);\n    var rotatedS13 = alphabet.slice(0, 2);\n    var rotatedS14 = alphabet.slice(0, 2);\n    var rotatedS15 = alphabet.slice(0, 2);\n    var rotatedS16 = alphabet.slice(0, 2);\n    var rotatedS17 = alphabet.slice(0, 2);\n    var rotatedS18 = alphabet.slice(0, 2);\n    var rotatedS19 = alphabet.slice(0, 2);\n    var rotatedS20 = alphabet.slice("], ["// <func> // JavaScript\n//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length == 0){\n    return undefined;\n  }\n  var i = 0;\n  var smallest = lst[0];\n  while(i < lst.length){\n    if(lst[i] < smallest){\n      smallest = lst[i];\n    }\n    i++;\n  }\n  return smallest;\n}\n\n\nA: Here is a solution using Array.prototype.find() and Array.prototype.slice()\n\n"], ["// <func> // JavaScript\n//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    var count = 0;\n    for(var i=0; i<S.length; i++){\n        if(S[i] == \"I\"){\n            count++;\n        }\n    }\n    return count;\n}\n\n\nA: You can use the following code:"], ["// <func> // JavaScript\n//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n    if(x == y && y == z){\n        return true;\n    }\n    if(x == y && z == z){\n        return true;\n    }\n    if(x == y && z == -z){\n        return true;\n    }\n    if(x == y && z == -y){\n        return true;\n    }\n    if(x == y && z == -z){\n        return true;\n    }\n    if(x == y && z == -y){\n        return true;\n    }\n    if(x == y && z == -z){\n        return true;\n    }\n    if(x == y && z == -y){\n        return true;\n    }\n    if(x == y && z == -z){\n        return true;\n    }\n    if(x == y && z == -y){\n        return true;\n    }\n    if(x == y && z == -z){\n        return true;\n    }\n    if(x == y && z == -y){\n        return true;\n    }\n    if(x == y && z == -z){\n        return true;\n    }\n    if(x == y && z == -y){\n        return true;\n    }\n    if(x == y && z == -z){\n        return true;\n    }\n    if(x == y && z == -y){\n        return true;\n    }\n    if(x == y && z == -z){\n        return true;\n    }\n    if(x == y && z == -y){"], ["// <func> // JavaScript\n//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n    var letters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    var vowels = \"aeiou\";\n    var result = \"\";\n    for(var i=0; i<message.length; i++){\n        var letter = message.charAt(i);\n        if(vowels.indexOf(letter) > -1){\n            result += letters[vowels.indexOf(letter)];\n        }\n        else{\n            result += letter;\n        }\n    }\n    return result;\n}\n\n\nA: I'm not sure if this is what you're looking for, but I've written a function that takes a message and returns a new message with all the letters swapped."], ["// <func> // JavaScript\n//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    sum += lst[i];\n  }\n  return sum;\n}\n\n\n\nA: You can use a recursive function like this:"], ["// <func> // JavaScript\n//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n    var keys = Object.keys(dict);\n    var result = true;\n    for(var i = 0; i < keys.length; i++){\n        var key = keys[i];\n        var value = dict[key];\n        if(key.toLowerCase() == key){\n            result = result && check_dict_case(value);\n        }\n    }\n    return result;\n}\n\n\nA: I would use a for loop to iterate over the keys and compare them to the values.\nvar keys = Object.keys(dict);\nvar result = true;\nfor(var i = 0; i < keys.length; i++){\n    var key = keys[i];\n    var value = dict[key];\n    if(key.toLowerCase() == key){\n        result = result && check_dict_case(value);\n    }\n}\nreturn result;\n\n\nA: You can use a for loop to iterate over the keys and compare them to the values.\nvar keys = Object.keys(dict);\nvar result = true;\nfor(var i = 0; i < keys.length; i++){\n    var key = keys[i];\n    var value = dict[key];\n    if(key.toLowerCase()"], ["// <func> // JavaScript\n//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n    var arr = [];\n    for(var i=n; i>=0; i--){\n        arr.push(i);\n    }\n    return arr;\n}\n\n\nA: You can use the following code to get the prime numbers from 1 to n."], ["// <func> // JavaScript\n//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n    var result = 0;\n    for(var i = 0; i < a.length; i++){\n        result = result * a[i];\n    }\n    for(var i = 0; i < b.length; i++){\n        result = result * b[i];\n    }\n    return result;\n}\n\n\nA: You can use a combination of Array.prototype.reduce and Array.prototype.map.\n\n\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,"], ["// <func> // JavaScript\n//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    var count = 0;\n    var index = 0;\n    var vowels_length = vowels.length;\n    var vowels_index = 0;\n    var vowels_length_index = 0;\n    var vowels_length_index_vowels = vowels_length_index;\n    var vowels_length_index_vowels_length = vowels_length_index_vowels;\n    var vowels_length_index_vowels_length_vowels = vowels_length_index_vowels_length;\n    var vowels_length_index_vowels_length_vowels_length = vowels_length_index_vowels_length_vowels;\n    var vowels_length_index_vowels_length_vowels_length_vowels = vowels_length_index_vowels_length_vowels_length;\n    var vowels_length_index_vowels_length_vowels_length_vowels_length = vowels_length_index_vowels_length_vowels_length_vowels;\n    var vowels_length_index_vowels_length_vowels_length_vowels_length_vowels = vowels_length_index_vowels_length_vowels_length_vowels_length;\n    var vowels_length_index_vowels_length_vowels_length_vowels_length_vowels_length = vowels_length_index_vowels_length_vowels_length_vowels"], ["// <func> // JavaScript\n//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  var closest = value;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n"], ["// <func> // JavaScript\n//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n    var pile = [];\n    for(var i=1; i<=n; i++){\n        pile.push(i);\n    }\n    return pile;\n}\n\n\nA: I'm not sure if this is what you're looking for, but here's a solution that uses a stack."], ["// <func> // JavaScript\n//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  var words = [];\n  var i = 0;\n  var len = s.length;\n  while(i < len){\n    var word = s.substr(i, 1);\n    if(word.length > 1){\n      words.push(word);\n    }\n    i++;\n  }\n  return words;\n}\n\n\n\nA: You can use a simple for loop to iterate over the string and split it into words.\n\n"], ["// <func> // JavaScript\n//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  var num = Math.floor(Math.random() * (x + 1) + 1);\n  var num2 = Math.floor(Math.random() * (y + 1) + 1);\n  if(num < num2){\n    return num;\n  }\n  return choose_num(x, y) + choose_num(x, y);\n}\n"], ["// <func> // JavaScript\n//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if(n > m){\n    return -1;\n  }\n  return (n + m) / 2;\n}\n\n\n\nA: I'm not sure if this is what you're looking for, but I'm pretty sure it's what you're looking for."], ["// <func> // JavaScript\n//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i] % 2 === 0){\n            result.push(x[i]);\n        }\n    }\n    return result;\n}\n\n\nA: You can use a recursive function to solve this problem.\n\n"], ["// <func> // JavaScript\n//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result = [];\n  var length = arr.length;\n  for(var i = 0; i < length; i++){\n    var current = arr[i];\n    var next = arr[i + 1];\n    if(current < next){\n      result.push(current);\n      result.push(next);\n    }\n  }\n  return result;\n}\n\n\nA: I think this is what you are looking for.\n\n"], ["// <func> // JavaScript\n//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n    var factorial = [];\n    for(var i = 1; i <= n; i++){\n        factorial.push(i);\n    }\n    return factorial;\n}\n"], ["// <func> // JavaScript\n//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n    var array = [];\n    var i = 1;\n    var j = 1;\n    var k = 1;\n    var l = 1;\n    var m = 1;\n    var n = n;\n    var n_even = 0;\n    var n_odd = 0;\n    var n_palindrome = 0;\n    var n_palindrome_even = 0;\n    var n_palindrome_odd = 0;\n    var n_palindrome_palindrome = 0;\n    var n_palindrome_palindrome_even = 0;\n    var n_palindrome_palindrome_odd = 0;\n    var n_palindrome_palindrome_palindrome = 0;\n    var n_palindrome_palindrome_palindrome_even = 0;\n    var n_palindrome_palindrome_palindrome_odd = 0;\n    var n_palindrome_palindrome_palindrome_palindrome = 0;\n    var n_palindrome_palindrome"], ["// <func> // JavaScript\n//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n    var sum = 0;\n    for(var i=0; i<arr.length; i++){\n        if(arr[i] > 0){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n"], ["// <func> // JavaScript\n//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  var arr_length = arr.length;\n  var arr_index = 0;\n  var arr_last_index = arr_length - 1;\n  var arr_last_index_value = arr_last_index;\n  var arr_last_index_value_value = arr_last_index_value.toString();\n  var arr_last_index_value_value_value = arr_last_index_value_value.toString();\n  var arr_last_index_value_value_value_value = arr_last_index_value_value_value.toString();\n  var arr_last_index_value_value_value_value_value = arr_last_index_value_value_value_value.toString();\n  var arr_last_index_value_value"], ["// <func> // JavaScript\n//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  var even = true;\n  for(var i = 0; i < lst1.length; i++){\n    if(lst1[i] % 2 == 0){\n      even = false;\n      break;\n    }\n  }\n  for(var i = 0; i < lst2.length; i++){\n    if(lst2[i] % 2 == 0){\n      even = false;\n      break;\n    }\n  }\n  return even;\n}\n\n\nA: You can use a for loop to check if the elements are even.\n\n"], ["// <func> // JavaScript\n//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n    var count = 0;\n    var result = {};\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var y = 0;\n    var z = 0;\n    var z = 0;\n    var z = 0;\n    var z = 0;\n    var z = 0;\n    var z = 0;\n    var z = 0;\n    var z = 0;\n    var z = 0;\n    var z = 0;\n    var z = 0;\n    var z = 0;\n    var z = 0;\n    var z = 0;\n    var z = 0;\n    var z = 0;\n    var z = 0;\n    var z = 0;\n    var z = 0;\n    var z = 0;\n    var z = 0;\n"], ["// <func> // JavaScript\n//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  var result = \"\";\n  var result_length = s.length;\n  var result_char = \"\";\n  var result_char_length = c.length;\n  var result_char_index = 0;\n  var result_char_index_length = c.length;\n  var result_char_index_start = 0;\n  var result_char_index_end = result_char_length;\n  var result_char_index_end_length = result_char_index_end - result_char_index_start;\n  var result_char_index_end_start = result_char_index_start;\n  var result_char_index_end_start_length = result_char_index_end_start - result_char_index_start;\n  var result_char_index_end_start_end = result_char_index_end_start;\n  var result_char_index_end_end_length = result_char_index_end_end - result_char_index_end;\n  var result_char_index_end_end_start = result_char_index_end_end;\n  var result_char_index_end_end_start_length = result_char_index_end_end_start - result_char_index_end_end;\n  var result_char_index_end_end_end = result_char_index_end_end;\n  var result_char_index_end_end_end_length ="], ["// <func> // JavaScript\n//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n    var count = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] == \" \")\n            count++;\n    }\n    return count;\n}\n\n\nA: I'm not sure if this is what you're looking for, but I think this is what you're looking for:"], ["// <func> // JavaScript\n//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  var sum = 0;\n  var subArrays = [];\n  var sumOfSubArrays = 0;\n  for(var i = 0; i < nums.length; i++){\n    var sumOfSubArray = 0;\n    for(var j = 0; j < nums.length; j++){\n      sumOfSubArray += nums[j];\n    }\n    sumOfSubArrays += sumOfSubArray;\n    subArrays.push(nums[i]);\n    sum += sumOfSubArray;\n  }\n  sumOfSubArrays = sumOfSubArrays / nums.length;\n  sum += sumOfSubArrays;\n  sumOfSubArrays = sumOfSubArrays / nums.length;\n  sum += sumOfSubArrays;\n  sumOfSubArrays = sumOfSubArrays / nums.length;\n  sum += sumOfSubArrays;\n  sumOfSubArrays = sumOfSubArrays / nums.length;\n  sum += sumOfSubArrays;\n  sumOfSubArrays = sumOfSubArrays / nums.length;\n  sum += sumOfSubArrays;\n  sumOfSubArrays = sumOfSubArrays / nums.length;\n  sum += sumOfSubArrays;\n  sumOfSubArrays = sumOfSubArrays / nums.length;\n  sum += sumOfSubArrays;\n  sumOfSubArrays = sumOfSubArrays / nums.length;\n  sum += sumOfSubArrays;\n  sumOfSubArrays = sumOfSubArrays / nums.length;\n  sum += sumOfSubArrays;\n  sumOfSubArrays = sumOfSubArrays / nums.length;\n  sum"], ["// <func> // JavaScript\n//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  var bucket_count = 0;\n  var bucket_capacity = grid[0][0];\n  for (var i = 1; i < grid.length; i++){\n    for (var j = 1; j < grid[i].length; j++){\n      if (grid[i][j] == 1){\n        bucket_count++;\n        bucket_capacity = bucket_count * capacity;\n      }\n    }\n  }\n  return bucket_count;\n}\n\n\nA: You can use a recursive function to solve this problem."], ["// <func> // JavaScript\n//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  var result = [];\n  for(var i = 0; i < arr.length; i++){\n    var tmp = arr[i];\n    arr[i] = arr[arr.length - 1 - i];\n    arr[arr.length - 1 - i] = tmp;\n  }\n  return result;\n}\n"], ["// <func> // JavaScript\n//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  var result = [];\n  var i = 0;\n  var len = s.length;\n  var word = \"\";\n  var consonant = \"\";\n  var consonant_count = 0;\n  var consonant_index = 0;\n  var consonant_index_end = len - 1;\n  var consonant_index_start = 0;\n  var consonant_index_end_start = len - 1;\n  var consonant_index_end_end = len - 1;\n  var consonant_index_end_end_start = len - 1;\n  var consonant_index_end_end_end = len - 1;\n  var consonant_index_end_end_end_start = len - 1;\n  var consonant_index_end_end_end_end = len - 1;\n  var consonant_index_end_end_end_end_start = len - 1;\n  var consonant_index_end_end_end_end_end = len - 1;\n  var consonant_index_end_end_end_end_end_start = len - 1;\n  var consonant_index_"], ["// <func> // JavaScript\n//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    var vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    var vowel_index = 0;\n    var vowel_length = 0;\n    var vowel_count = 0;\n    var vowel_length_count = 0;\n    var vowel_count_count = 0;\n    var vowel_count = 0;\n    var vowel_length = 0;\n    var vowel_length_count = 0;\n    var vowel_count_count = 0;\n    var vowel_count = 0;\n    var vowel_length = 0;\n    var vowel_length_count = 0;\n    var vowel_count_count = 0;\n    var vowel_count = 0;\n    var vowel_length = 0;\n    var vowel_length_count = 0;\n    var vowel_count_count = 0;\n    var vowel_count = 0;\n    var vowel_length = 0;\n    var vowel_length_count = 0;\n    var vowel_count_count = 0;\n    var vowel_count = 0;\n    var vowel_length = 0;\n    var vowel_length_count = 0;\n    var vowel_count_count = 0;\n    var vowel_count = 0;\n    var"], ["// <func> // JavaScript\n//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  var result = true;\n  for(var i = 0; i < lst.length; i++){\n    var s = lst[i];\n    if(s.length > 0){\n      var p = s.charAt(0);\n      var r = s.charAt(s.length - 1);\n      if(p == '(' || p == ')'){\n        if(r == '(' || r == ')'){\n          result = result && match_parens(s.slice(1, s.length));\n        }\n      }\n    }\n  }\n  return result;\n}\n\n\nA: I think you can do this in a single loop.\n\n"], ["// <func> // JavaScript\n//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  var max = arr.slice(0, k);\n  var i = 0;\n  var j = 0;\n  var max_index = -1;\n  var max_value = -1;\n  for(i = 0; i < k; i++){\n    if(arr[i] > max[i]){\n      max_index = i;\n      max_value = arr[i];\n    }\n  }\n  for(i = 0; i < k; i++){\n    if(arr[i] > max_value){\n      max_index = i;\n      max_value = arr[i];\n    }\n  }\n  if(max_index != -1){\n    return arr.slice(0, max_index);\n  }\n  return [];\n}\n\n\nA: Here is a solution using the Array.prototype.sort() method.\n\n"], ["// <func> // JavaScript\n//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] % 2 == 1){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\n\nA: You can use the following code to solve this problem.\n\n"], ["// <func> // JavaScript\n//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n    var sum = 0;\n    var i;\n    for(i = 0; i < k; i++){\n        sum += arr[i];\n    }\n    return sum;\n}\n\n\nA: You can use the following code:"], ["// <func> // JavaScript\n//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    var collatz_array = [];\n    var collatz_array_length = collatz_array.length;\n    var collatz_array_index = 0;\n    var collatz_array_next_index = 0;\n    var collatz_array_next_index_length = collatz_array_next_index.length;\n    var collatz_array_next_index_index = 0;\n    var collatz_array_next_index_index_length = collatz_array_next_index_index.length;\n    var collatz_array_next_index_index_index = 0;\n    var collatz_array_next_index_index_index_length = collatz_array_next_index_index_index.length;\n    var collatz_array_next_index_index_index_index = 0;\n    var collatz_array_next_index_index_index_index_length = collatz_array_next_index_index_index_index.length;\n    var collatz_array_next_index_"], ["// <func> // JavaScript\n//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    var month = date.split(\"-\");\n    var day = date.split(\"-\");\n    var year = date.split(\"-\");\n    var valid = true;\n    for(var i=0; i<month.length; i++){\n        if(month[i] < 1 || month[i] > 31){\n            valid = false;\n            break;\n        }\n    }\n    for(var i=0; i<day.length; i++){\n        if(day[i] < 1 || day[i] > 31){\n            valid = false;\n            break;\n        }\n    }\n    for(var i=0; i<year.length; i++){\n        if(year[i] < 1 || year[i] > 31){\n            valid = false;\n            break;\n        }\n    }\n   "], ["// <func> // JavaScript\n//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    var words = txt.split(' ');\n    var result = [];\n    var count = 0;\n    for(var i = 0; i < words.length; i++){\n        if(words[i].length % 2 === 0){\n            result.push(words[i]);\n        }\n        else{\n            result.push(words[i].charAt(0).toLowerCase() + words[i].slice(1));\n        }\n        count++;\n    }\n    return result;\n}\n\n\nA: You can use a regular expression to split the string on spaces.\n\n\nvar txt = \"Hello world!\";\nvar words = txt.split(\" \");\nvar result = [];\nvar count = 0;\nfor (var i = 0; i < words.length; i++) {\n  if (words[i].length % 2 === 0) {\n    result.push(words[i]);\n  } else {\n    result.push(words[i].charAt(0).toLowerCase() + words[i].slice(1));\n  }\n  count++;\n}\n"], ["// <func> // JavaScript\n//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  var len = lst.length;\n  var sorted = true;\n  for (var i = 0; i < len; i++){\n    if (lst[i] < lst[i+1]){\n      sorted = false;\n      break;\n    }\n  }\n  return sorted;\n}\n\n\nA: Here is a solution using a for loop.\n\n"], ["// <func> // JavaScript\n//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    var length = interval1.length;\n    var length2 = interval2.length;\n    if(length == length2){\n        return true;\n    }\n    if(length == 0){\n        return false;\n    }\n    if(length2 == 0){\n        return false;\n    }\n    if(length == length2){\n        return true;\n    }\n    if(length == length2 && length2 == length){\n        return true;\n    }\n    if(length == length2 && length2 == length){\n        return true;\n    }\n    if(length == length2 && length2 == length){\n        return true;\n    }\n    if(length == length2 && length2 == length){\n        return true;\n    }\n    if(length == length2 && length2 == length){\n        return true;\n    }\n    if(length == length2 && length2 == length){\n        return true;\n    }\n    if(length == length2 && length2"], ["// <func> // JavaScript\n//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  return arr.reduce(function(acc, num){\n    var sign = num % 1;\n    if(sign === 0){\n      acc += 1;\n    }\n    else if(sign === -1){\n      acc += -1;\n    }\n    else{\n      acc += num;\n    }\n    return acc;\n  }, 0);\n}\n\n\n\nA: I think this is what you are looking for.\n\n"], ["// <func> // JavaScript\n//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  var path = [];\n  var i = 0;\n  var j = 0;\n  var lst_A = [];\n  var lst_B = [];\n  var lst_C = [];\n  var lst_D = [];\n  var lst_E = [];\n  var lst_F = [];\n  var lst_G = [];\n"], ["// <func> // JavaScript\n//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    if(n < 2){\n        return [n, 1, 3];\n    }\n    else if(n == 2){\n        return [n, 1, 3];\n    }\n    else if(n == 3){\n        return [n, 1, 3];\n    }\n    else{\n        return [n, 1, 3, 2, 8];\n    }\n}\n\n\nA: I'm not sure if this is the best way to do it, but I've done it this way:"], ["// <func> // JavaScript\n//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  if(n % 2 === 0){\n    return 0;\n  }\n  var result = 1;\n  for(var i = 1; i <= n; i++){\n    if(i % 2 === 0){\n      result *= i;\n    }\n    else{\n      result *= n - i;\n    }\n  }\n  return result;\n}\n\n\nA: You can use a recursive function like this:"], ["// <func> // JavaScript\n//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n\tvar result = false;\n\tvar sub = string.split(\"[]\");\n\tfor(var i=0; i<sub.length; i++){\n\t\tif(sub[i] == \"[\" || sub[i] == \"[]\"){\n\t\t\tresult = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\n"], ["// <func> // JavaScript\n//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    sum += lst[i];\n  }\n  return sum;\n}\n\n\nA: You can use a recursive function like this:"], ["// <func> // JavaScript\n//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    var last_char = txt.charAt(txt.length-1);\n    if(last_char.charCodeAt(0) >= 65 && last_char.charCodeAt(0) <= 90){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n"], ["// <func> // JavaScript\n//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n    var max = -1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > arr[i-1]){\n            max = i;\n        }\n    }\n    return max;\n}\n\n\nA: You can use a binary search to find the index of the largest element.\n\n"], ["// <func> // JavaScript\n//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  var a = lst[0];\n  var b = lst[1];\n  var result = [a, b];\n  if (lst.length === 0) {\n    return result;\n  }\n  if (lst.length === 1) {\n    return [a, b];\n  }\n  var smallest = lst[0];\n  var largest = lst[1];\n  var result2 = [largest, smallest];\n  if (lst.length === 2) {\n    return result2;\n  }\n  if (lst.length === 3) {\n    return [largest, smallest, result2];\n  }\n  var smallest_smallest = lst[0];\n  var largest_smallest = lst[1];\n  var result3 = [largest_smallest, smallest_smallest];\n  if (lst.length === 2) {\n    return result3;\n  }\n  if (lst.length === 3) {\n    return [largest_smallest, smallest_smallest, result3];\n  }\n  return result;\n}\n\n\nA: You can use a recursive function to do this."], ["// <func> // JavaScript\n//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if(a == b){\n    return a;\n  }\n  else if(a == b.toFixed(1)){\n    return b;\n  }\n  else{\n    return undefined;\n  }\n}\n"], ["// <func> // JavaScript\n//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    var sum = 0;\n    for(var i=0; i<n; i++){\n        sum += i;\n    }\n    return sum == n;\n}\n"], ["// <func> // JavaScript\n//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  if(n <= 0){\n    return 1;\n  }\n  else{\n    return n * special_factorial(n-1);\n  }\n}\n"], ["// <func> // JavaScript\n//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n\tvar result = text.replace(/ +/g, ' ').replace(/ +/g, '-');\n\treturn result;\n}\n"], ["// <func> // JavaScript\n//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    var file_name_check_result = true;\n    var file_name_check_result_string = \"Yes\";\n    var file_name_check_result_string_array = [\"txt\", \"exe\", \"dll\"];\n    var file_name_check_result_string_array_length = file_name_check_result_string_array.length;\n    var file_name_check_result_string_array_index = 0;\n    var file_name_check_result_string_array_length_array = file_name_check_result_string_array.length;\n    var file_name_check_result_string_array_length_array_index = 0;\n    var file_name_check_result_string_array_length_array_index_array = file_name_check_result_string_array_length_array.length;\n    var file_name_check_result_string_array_length_array_index_array_index = 0;\n    var file_name_check_result_string_array_length_array_index_array_index_array = file_name_check_result_string_array_length_array_index_array.length;\n    var"], ["// <func> // JavaScript\n//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n\tvar sum = 0;\n\tfor(var i = 0; i < lst.length; i++){\n\t\tif(lst[i] % 3 == 0){\n\t\t\tsum += lst[i];\n\t\t}else{\n\t\t\tsum += lst[i] * lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\n"], ["// <func> // JavaScript\n//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    var result = \"\";\n    var length = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0"], ["// <func> // JavaScript\n//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  if(x == n){\n    return true;\n  }\n  if(x == 0){\n    return false;\n  }\n  if(n == 0){\n    return false;\n  }\n  if(x == n){\n    return true;\n  }\n  if(x == 0){\n    return false;\n  }\n  if(n == 0){\n    return false;\n  }\n  if(x == n){\n    return true;\n  }\n  if(x == 0){\n    return false;\n  }\n  if(n == 0){\n    return false;\n  }\n  if(x == n){\n    return true;\n  }\n  if(x == 0){\n    return false;\n  }\n  if(n == 0){\n    return false;\n  }\n  if(x == n){\n    return true;\n  }\n  if(x == 0){\n    return false;\n  }\n  if(n == 0){\n    return false;\n  }\n  if(x == n){\n    return true;\n  }\n  if(x == 0){\n    return false;\n  }\n  if(n == 0){\n    return false;\n  }\n  if(x == n){\n    return true;\n  }\n  if(x == 0){\n    return false;\n  }\n  if(n =="], ["// <func> // JavaScript\n//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  var sorted = [];\n  for(var i=0; i<nums.length; i++){\n    var sum = nums[i].sum();\n    if(sum > 0){\n      sorted.push(nums[i]);\n    }\n  }\n  return sorted;\n}\n"], ["// <func> // JavaScript\n//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n    var result = 0;\n    for(var i = 0; i < nums.length; i++){\n        if(nums[i] > 10 && nums[i] % 2 === 1){\n            result++;\n        }\n    }\n    return result;\n}\n\n\nA: Here is a solution using Array.prototype.filter() and Array.prototype.reduce()\n\n"], ["// <func> // JavaScript\n//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    var a = [];\n    for(var i = 1; i <= n; i++){\n        a.push(i * i - i + 1);\n    }\n    return a.length;\n}\n\n\nA: I would use a recursive function."], ["// <func> // JavaScript\n//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  var planets = [planet1, planet2];\n  var planetsSorted = [];\n  var i = 0;\n  while (i < planets.length){\n    var distance = Math.sqrt(Math.pow(planets[i].getDistanceToSun(), 2) - Math.pow(planets[i].getDistanceToSun(), 2));\n    if (distance < planetsSorted[i].distanceToSun){\n      planetsSorted[i] = planetsSorted[i].sort(function(a, b){\n        return a.getDistanceToSun() - b.getDistanceToSun();\n      });\n    }\n    i++;\n  }\n  return planetsSorted;\n}\n\n\nA: You can use the following code to sort the planets."], ["// <func> // JavaScript\n//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        sum += lst[i];\n    }\n    return sum;\n}\n"], ["// <func> // JavaScript\n//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  if(n%x==0 || n%y==0){\n    return n;\n  }\n  return y;\n}\n"], ["// <func> // JavaScript\n//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] == 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\n\nA: You can use the following code:"], ["// <func> // JavaScript\n//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n    var score = game[0];\n    var guess = game[1];\n    var guessDiff = guess - score;\n    var scoreDiff = score - guessDiff;\n    var diff = Math.abs(scoreDiff);\n    if(diff < 0){\n        return [diff, diff];\n    }\n    return [diff, diff + diff];\n}\n"], ["// <func> // JavaScript\n//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n    var result = class_name.split('.');\n    var class_name_length = result.length;\n    var extensions_length = extensions.length;\n    var class_name_str = result[0];\n    var extensions_str = extensions[0];\n    for(var i = 1; i < class_name_length; i++){\n        var class_name_str_i = class_name_str.substring(0, i);\n        var extensions_str_i = extensions_str.substring(0, i);\n        var class_name_str_i_length = class_name_str_i.length;\n        var extensions_str_i_length = extensions_str_i.length;\n        var class_name_str_i_str = class_name_str_i.substring(0, i);\n        var extensions_str_i_str = extensions_str_i"], ["// <func> // JavaScript\n//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    var result = false;\n    var pattern = a.split(\"\");\n    var rotated = b.split(\"\");\n    for (var i = 0; i < pattern.length; i++){\n        var pattern_i = pattern[i];\n        var rotated_i = rotated[i];\n        if (pattern_i == rotated_i){\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\n\nA: You can use a recursive function like this:"], ["// <func> // JavaScript\n//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n    var even_odd_count = [];\n    var even_odd_count_array = [];\n    var odd_count = 0;\n    var even_count = 0;\n    var count = 0;\n    var num_even = 0;\n    var num_odd = 0;\n    for(var i = 0; i < num; i++){\n        if(num % 2 == 0){\n            even_odd_count_array.push(i);\n            even_odd_count.push(i);\n            odd_count++;\n            even_count++;\n            count++;\n        }\n        else{\n            num_even++;\n            even_odd_count_array.push(i);\n            even_odd_count.push(i);\n            odd_count++;\n            even_count++;\n            count++;\n        }\n    }\n    return even_odd_count_array;\n}\n\n\nA: You can use the following code to count the number of even and odd digits in a number.\n\n"], ["// <func> // JavaScript\n//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  var roman = \"\";\n  var i = 0;\n  var roman_length = 1;\n  var roman_length_2 = 1;\n  var roman_length_3 = 1;\n  var roman_length_4 = 1;\n  var roman_length_5 = 1;\n  var roman_length_6 = 1;\n  var roman_length_7 = 1;\n  var roman_length_8 = 1;\n  var roman_length_9 = 1;\n  var roman_length_10 = 1;\n  var roman_length_11 = 1;\n  var roman_length_12 = 1;\n  var roman_length_13 = 1;\n  var roman_length_14 = 1;\n  var roman_length_15 = 1;\n  var roman_length_16 = 1;\n  var roman_length_17 = 1;\n  var roman_length_18 = 1;\n  var roman_length_19 = 1;\n  var roman_length_20 = 1;\n  var roman_length_21 = 1;\n  var roman_length_22 = 1;\n  var roman_length_23 = 1;\n  var roman_length_24 = 1;\n  var roman_length_25 = 1;\n  var roman_length_26 = 1;\n  var roman_length_27 = 1;\n  var roman_length_28 = 1;\n  var roman_length_"], ["// <func> // JavaScript\n//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if(a == b && b == c){\n    return true;\n  }\n  if(a == c && b == c){\n    return true;\n  }\n  if(a == c && b == b){\n    return true;\n  }\n  return false;\n}\n\n\n\nA: You can use the following code to check if the triangle is right angle triangle."], ["// <func> // JavaScript\n//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  var max = 0;\n  var i = 0;\n  var len = words.length;\n  var result = [];\n  for(i; i < len; i++){\n    if(words[i] > max){\n      max = words[i];\n    }\n  }\n  return max;\n}\n\n\n\nA: You can use a simple loop and a map function to get the max value.\n\n"], ["// <func> // JavaScript\n//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  if(number <= 0){\n    return [number, number, number];\n  }\n  if(number >= need){\n    return [number, number, number];\n  }\n  if(number <= remaining){\n    return [number, number, number];\n  }\n  return [number, number, number];\n}\n\n\nA: You can use a recursive function like this:"], ["// <func> // JavaScript\n//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    var result = 0;\n    var operator_length = operator.length;\n    var operand_length = operand.length;\n    var result_length = result.length;\n    for(var i = 0; i < result_length; i++){\n        var result_operator = result[i];\n        var result_operand = operand[i];\n        if(result_operator == '+' || result_operator == '-'){\n            result[i] = result_operator + result_operand;\n        }\n        else if(result_operator == '*' || result_operator == '/'){\n            result[i] = result_operator + result_operand;\n        }\n        else if(result_operator == '^'){\n            result[i] = result_operator + result_operand;\n        }\n        else if(result_operator == '**'){\n            result[i] = result_operator + result_operand;\n        }\n        else if(result_operator == '^' || result_operator == '**'){\n            result[i] = result_operator + result_operand;\n        }\n        else if(result_operator =="], ["// <func> // JavaScript\n//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    var result = \"\";\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == 'a' || s[i] == 'A'){\n            result += s[i];\n        }else{\n            result += s[i].toUpperCase();\n        }\n    }\n    return result;\n}\n\n\nA: I think this is what you want:"], ["// <func> // JavaScript\n//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  var result = \"\";\n  var md5 = \"\";\n  var i = 0;\n  var len = text.length;\n  while(i < len){\n    md5 += text.charCodeAt(i);\n    i++;\n  }\n  md5 = md5.toString(36);\n  result = md5.slice(0, md5.length - 1);\n  return result;\n}\n"], ["// <func> // JavaScript\n//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  var even = [];\n  var i = 0;\n  while(i < b){\n    even.push(a + i);\n    i++;\n  }\n  return even;\n}\n\n\nA: You can use a recursive function:\n\n"]]