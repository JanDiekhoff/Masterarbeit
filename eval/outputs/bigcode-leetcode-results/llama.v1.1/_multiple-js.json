[["//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n  var result = false;\n  for(var i = 0; i < numbers.length; i++){\n    if(numbers[i] <= threshold && numbers[i] >= threshold){\n      result = true;\n    }\n  }\n  return result;\n}\n"], ["//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  var result = [];\n  var open_braces = [];\n  var open_braces_length = paren_string.length;\n  var open_braces_index = 0;\n  var open_braces_open_braces = [];\n  var open_braces_open_braces_length = open_braces_length;\n  var open_braces_open_braces_index = 0;\n  var open_braces_open_braces_open_braces = [];\n  var open_braces_open_braces_open_braces_length = open_braces_open_braces_length;\n  var open_braces_open_braces_open_braces_index = 0;\n  var open_braces_open_braces_open_braces_open_braces = [];\n  var open_braces_open_braces_open_braces_length = open_braces_open_braces_length;\n  var open_braces_open_braces_open_braces_index = 0;\n  var open_braces_open_braces_open_braces_open_braces = [];\n  var open_braces_open_braces_open_braces_length = open_braces_open_braces_length;\n  var open_braces_open_braces_open_braces_index = 0;\n  var open_braces_open_braces_open_braces_open_braces = [];\n  var open_braces_open_braces_open_braces_length = open_braces_open_braces_length;\n  var open_braces_"], ["//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n  var result = number;\n  var i = 0;\n  while(i < number){\n    result = result * 10 + (i % 10);\n    i++;\n  }\n  return result;\n}\n"], ["//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  var balance = 0;\n  var result = false;\n\n  for(var i = 0; i < operations.length; i++){\n    if(operations[i] < 0){\n      balance = balance - operations[i];\n      result = true;\n    }\n  }\n\n  return result;\n}\n"], ["//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n  var mean = 0;\n  var sum = 0;\n  var i;\n  for(i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    mean += sum;\n  }\n  return Math.abs(mean - mean_absolute_deviation_mean);\n}\n"], ["//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n        result.push(numbers[i] + delimeter);\n    }\n    return result;\n}\n\n\nA: You can use Array.prototype.map() to get the result.\n\n\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, "], ["//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var result = [];\n  var current_level = 0;\n  var current_paren = \"\";\n  var current_parent = \"\";\n  var current_parent_level = 0;\n  var current_parent_paren = \"\";\n  var current_paren_level = 0;\n  var current_paren_parent = \"\";\n  var current_paren_parent_level = 0;\n  var current_paren_parent_paren = \"\";\n  var current_paren_parent_paren_level = 0;\n  var current_paren_parent_paren_parent = \"\";\n  var current_paren_parent_paren_parent_level = 0;\n  var current_paren_parent_paren_parent_paren = \"\";\n  var current_paren_parent_paren_parent_paren_level = 0;\n  var current_paren_parent_paren_parent_paren_parent = \"\";\n  var current_paren_parent_paren_parent_paren_parent_level = 0;\n  var current_paren_parent_paren_parent_paren_parent_paren = \"\";\n  var current_paren_parent_paren_parent_paren_parent_paren_level = 0;\n  var current_paren_parent_paren_parent_paren_parent_paren_parent = \"\";\n  var current_paren_parent_paren_parent_paren_parent_paren_parent_level = 0;\n  var current_paren_parent_paren_parent_paren_parent_paren_parent_paren = \"\";\n  var current_paren_parent_paren_parent_par"], ["//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n  var result = [];\n  for(var i = 0; i < strings.length; i++){\n    if(strings[i] === substring){\n      result.push(strings[i]);\n    }\n  }\n  return result;\n}\n\n\nA: You can use a regular expression to match the substring and then use the find method to find the matching element.\n\n\nconst str = \"abc\";\nconst str2 = \"abc\";\nconst str3 = \"abc\";\nconst str4 = \"abc\";\nconst str5 = \"abc\";\nconst str6 = \"abc\";\nconst str7 = \"abc\";\nconst str8 = \"abc\";\nconst str9 = \"abc\";\nconst str10 = \"abc\";\nconst str11 = \"abc\";\nconst str12 = \"abc\";\nconst str13 = \"abc\";\nconst str14 = \"abc\";\nconst str15 = \"abc\";\nconst str16 = \"abc\";\nconst str17 = \"abc\";\nconst str18 = \"abc\";\nconst str19 = \"abc\";\nconst str20 = \"abc\";\nconst str21 = \"abc\";\nconst str22 = \"abc\";\nconst str23 = \"abc\";\nconst str24 = \"abc\";\nconst str25 = \"abc\";\nconst str26 = \"abc\";\nconst str27 = \"abc\";\nconst str28 = \"abc\";\nconst str29 = \"abc\";\nconst str30 = \"abc\";\nconst str31 = \"abc\";\nconst str32 = \"abc\";\nconst str33 = \"abc\";\nconst str34 = \"abc\";\nconst str35 = \"abc\";\nconst str36 = \"abc\";\nconst str37 = \"abc\";\nconst str38 = \"abc\";\nconst str39 = \"abc\";\n"], ["//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  var result = 0;\n  for(var i = 0; i < numbers.length; i++){\n    result += numbers[i];\n  }\n  return result;\n}\n"], ["//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  var max = 0;\n  for(var i = 0; i < numbers.length; i++){\n    if(numbers[i] > max){\n      max = numbers[i];\n    }\n  }\n  return max;\n}\n"], ["//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n    var palindrome = \"\";\n    var prefix = \"\";\n    var suffix = \"\";\n    var index = 0;\n    var length = string.length;\n    var current = string.charAt(index);\n    var currentIndex = current.length;\n    var currentIndex2 = currentIndex;\n    var currentIndex2 = currentIndex2 - 1;\n    var currentIndex3 = currentIndex2;\n    var currentIndex3 = currentIndex3 - 1;\n    var currentIndex4 = currentIndex3;\n    var currentIndex4 = currentIndex4 - 1;\n    var currentIndex5 = currentIndex4;\n    var currentIndex5 = currentIndex5 - 1;\n    var currentIndex6 = currentIndex5;\n    var currentIndex6 = currentIndex6 - 1;\n    var currentIndex7 = currentIndex6;\n    var currentIndex7 = currentIndex7 - 1;\n    var currentIndex8 = currentIndex7;\n    var currentIndex8 = currentIndex8 - 1;\n    var currentIndex9 = currentIndex8;\n    var currentIndex9 = currentIndex9 - 1;\n    var currentIndex10 = currentIndex9;\n    var currentIndex10 = currentIndex10 - 1;\n    var currentIndex11 = currentIndex10;\n    var currentIndex11 = currentIndex11 - 1;\n    var currentIndex12 = currentIndex11;\n    var currentIndex12 = currentIndex12 - 1;\n    var currentIndex13 = currentIndex12;\n    var currentIndex13 = currentIndex13 - 1;\n    var currentIndex14 = currentIndex13;"], ["//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n    var result = \"\";\n    for(var i = 0; i < a.length; i++){\n        result += a[i] ^ b[i];\n    }\n    return result;\n}\n"], ["//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  var max = 0;\n  var i = 0;\n  var len = strings.length;\n  while(i < len){\n    if(strings[i] > max){\n      max = strings[i];\n    }\n    i++;\n  }\n  return max;\n}\n"], ["//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n  if(a === b) return a;\n  if(b === a) return b;\n  if(a === 0 || b === 0) return 0;\n  if(a === 1 || b === 1) return 1;\n  if(a === 2 || b === 2) return 2;\n  if(a === 3 || b === 3) return 3;\n  if(a === 4 || b === 4) return 4;\n  if(a === 5 || b === 5) return 5;\n  if(a === 6 || b === 6) return 6;\n  if(a === 7 || b === 7) return 7;\n  if(a === 8 || b === 8) return 8;\n  if(a === 9 || b === 9) return 9;\n  if(a === 10 || b === 10) return 10;\n  if(a === 11 || b === 11) return 11;\n  if(a === 12 || b === 12) return 12;\n  if(a === 13 || b === 13) return 13;\n  if(a === 14 || b === 14) return 14;\n  if(a === 15 || b === 15) return 15;\n  if(a === 16 || b === 16) return 16;\n  if(a === 17 || b === 17) return 17;\n  if(a === 18 || b === 18) return 18;\n  if(a === 19 || b === 19) return 19;\n  if(a === 20 || b === 20) return 20;\n  if(a === 21"], ["//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  for(var i=0; i<string.length; i++){\n    var char = string.charAt(i);\n    if(char === ' ' || char === '\\t'){\n      prefixes.push(string.substring(0, i));\n    }\n    else{\n      prefixes.push(string.substring(i, i+1));\n    }\n  }\n  return prefixes;\n}\n\n\nA: You can use a for loop to iterate over the string and check if the character is a space or not. If it is a space, then add it to the prefixes array.\n\n"], ["//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  var result = \"\";\n  for(var i = 0; i < n; i++){\n    result += String(i);\n  }\n  return result;\n}\n\n\nA: You can use a for loop to iterate over the array and print the values.\n\n\nvar array = [0, 1, 2, 3, 4, 5];\n\nfor (var i = 0; i < array.length; i++) {\n  console.log(array[i]);\n}\n\n\n\nA: You can use the for loop to iterate over the array and print the values.\n\n\nvar array = [0, 1, 2, 3, 4, 5];\n\nfor (var i = 0; i < array.length; i++) {\n  console.log(array[i]);\n}\n\n\n\nA: You can use the for loop to iterate over the array and print the values.\n\n\nvar array = [0, 1, 2, 3, 4, 5];\n\nfor (var i = 0; i < array.length; i++) {\n  console.log(array[i]);\n}\n\n\n"], ["//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    var count = 0;\n    for(var i = 0; i < string.length; i++){\n        if(string[i] != string[i+1]){\n            count++;\n        }\n    }\n    return count;\n}\n\n\nA: You can use the following code:\n\n"], ["//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  var music_array = music_string.split(\" \");\n  var music_array_length = music_array.length;\n  var music_array_beats = [];\n  var music_array_beats_length = music_array_beats.length;\n  var music_array_beats_count = 0;\n  var music_array_beats_count_length = music_array_beats_count;\n  var music_array_beats_count_index = 0;\n  var music_array_beats_count_index_length = music_array_beats_count_index;\n  var music_array_beats_count_index_index = 0;\n  var music_array_beats_count_index_index_length = music_array_beats_count_index_index;\n  var music_array_beats_count_index_index_index = 0;\n  var music_array_beats_count_index_index_index_length = music_array_beats_count_index_index_index;\n  var music_array_beats_count_index_index_index_index = 0;\n  var music_array_beats_count_index_index_index_index_length = music_array_beats_count_index_index_index_index;\n  var music_array_beats_count_index_index_index_index_index = 0;\n  var music_array_beats"], ["//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  var how_many_times = 0;\n  var count = 0;\n  var sub_count = 0;\n  var sub_string = substring;\n  var sub_string_length = sub_string.length;\n  var sub_string_index = 0;\n  var sub_string_index_length = sub_string_length;\n  var sub_string_index_start = 0;\n  var sub_string_index_end = sub_string_length;\n  var sub_string_index_end_length = sub_string_length;\n  var sub_string_index_end_start = sub_string_index_length;\n  var sub_string_index_end_start_length = sub_string_length;\n  var sub_string_index_end_start_end = sub_string_index_length;\n  var sub_string_index_end_end_length = sub_string_length;\n  var sub_string_index_end_end_start = sub_string_index_length;\n  var sub_string_index_end_end_start_length = sub_string_length;\n  var sub_string_index_end_end_start_end = sub_string_index_length;\n  var sub_string_index_end_end_start_end_length = sub_string_length;\n  var sub_string_index_end_end_start_end_start = sub_string_index_end_end_length;\n  var sub_string_index_end_end_start_end_start_length = sub_string_length;\n  var sub_string_index_end_end_start_end_start_end = sub_string_index_end_end_start_end_length;\n  var sub_string_index_end_end_start"], ["//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  var sorted = [];\n  for (var i = 0; i < numbers.length; i++){\n    sorted.push(numbers[i]);\n  }\n  return sorted.sort().join(\"\");\n}\n"], ["//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var result = [];\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var len = numbers.length;\n  var current = 0;\n  var current_index = 0;\n  var current_index_in_array = 0;\n  var current_index_in_array_in_array = 0;\n  var current_index_in_array_in_array_in_array = 0;\n  var current_index_in_array_in_array_in_array_in_array = 0;\n  var current_index_in_array_in_array_in_array_in_array_in_array = 0;\n  var current_index_in_array_in_array_in_array_in_array_in_array_in_array = 0;\n  var current_index_in_array_in_array_in_array_in_array_in_array_in_array = 0;\n  var current_index_in_array_in_array_in_array_in_array_in_array_in_array = 0;\n  var current_index_in_array_in_array_in_array_in_array_in_array_in_array = 0;\n  var current_index_in_array_in_array_in_array_in_array_in_array_in_array = 0;\n  var current_index_in_array_in_array_in_array_in_"], ["//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  return numbers.map(function(n){\n    return n / 100;\n  });\n}\n"], ["//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(value){\n    return value !== undefined && value !== null;\n  });\n}\n\n\n\nA: You can use Array.prototype.filter() to filter the array.\n\n\nvar array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97"], ["//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n  var len = 0;\n  for(var i = 0; i < string.length; i++){\n    len += string.charCodeAt(i);\n  }\n  return len;\n}\n"], ["//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  var divisors = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n  var divisor = 0;\n  for(var i = 0; i < divisors.length; i++){\n    if(n % divisor === 0){\n      divisor++;\n    }\n  }\n  return divisor;\n}\n\n\n\nA: You can use a recursive function to find the largest divisor of a number."], ["//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\nvar factor = [];\nvar i = 0;\nwhile(i < n){\nvar x = n % i;\nfactor.push(x);\ni++;\nreturn factor;\n}\n}\n\n\nA: Here is a solution using the standard library."], ["//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  var result = [];\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var len = numbers.length;\n  while(i < len){\n    var temp = numbers[i];\n    numbers[i] = numbers[j];\n    numbers[j] = temp;\n    i++;\n    j++;\n  }\n  result.push.apply(result, numbers);\n  return result;\n}\n\n\nA: Here is a solution that uses a binary search tree.\n\n"], ["//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  var result = string.replace(/[A-Z]/g, function(c){\n    return c.toUpperCase();\n  });\n  return result;\n}\n\n\nA: You can use the following regex:\n/[A-Z]/g\n\nThis will replace all uppercase letters with uppercase letters.\n\nA: You can use this regex:\n/[A-Z]/g\n\nThis will replace all uppercase letters with uppercase letters.\n\nA: You can use this regex:\n/[A-Z]/g\n\nThis will replace all uppercase letters with uppercase letters.\n"], ["//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n    return strings.join(\"\");\n}\n"], ["//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n  return strings.filter(function(str){\n    return str.indexOf(prefix) > -1;\n  });\n}\n\n\nA: You can use the .indexOf() method to check if a string contains a given prefix.\n\n\nvar strings = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\nvar prefix = \"a\";\n\nvar result = strings.filter(function(str) {\n  return str.indexOf(prefix) > -1;\n});\n"], ["//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n    var result = [];\n    for(var i = 0; i < l.length; i++){\n        if(l[i] > 0){\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n\n\nA: You can use a for loop to iterate through the array and check each element.\n\n"], ["//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n    if(n < 2){\n        return false;\n    }\n    if(n % 2 == 0){\n        return false;\n    }\n    if(n % 3 == 0){\n        return false;\n    }\n    if(n % 5 == 0){\n        return false;\n    }\n    if(n % 7 == 0){\n        return false;\n    }\n    if(n % 11 == 0){\n        return false;\n    }\n    if(n % 13 == 0){\n        return false;\n    }\n    if(n % 17 == 0){\n        return false;\n    }\n    if(n % 19 == 0){\n        return false;\n    }\n    if(n % 21 == 0){\n        return false;\n    }\n    if(n % 23 == 0){\n        return false;\n    }\n    if(n % 27 == 0){\n        return false;\n    }\n    if(n % 31 == 0){\n        return false;\n    }\n    if(n % 33 == 0){\n        return false;\n    }\n    if(n % 37 == 0){\n        return false;\n    }\n    if(n % 41 == 0){\n        return false;\n    }\n    if(n % 43 == 0){\n        return false;\n    }\n    if(n % 47 == 0){\n        return false;\n    }\n    if(n % 51 == 0){\n        return false;\n    }\n    if(n %"], ["//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  var result = [];\n  var i = 0;\n  var j = 0;\n  while(i < l.length && j < l.length){\n    if(l[i] > l[j]){\n      result.push(l[i]);\n      i++;\n    } else {\n      result.push(l[j]);\n      j++;\n    }\n  }\n  return result;\n}\n\n\nA: You can use a for loop to iterate through the array and compare the values of the elements.\n\n\nvar array = [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, "], ["//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  var result = [];\n  for(var i=0; i<l.length; i++){\n    if(l[i] != l[i+1]){\n      result.push(l[i]);\n    }\n  }\n  return result;\n}\n\n\nA: You can use Array.prototype.filter() to get the unique elements.\n\n\nvar array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91"], ["//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n    return l.reduce(function(max, val){\n        return val > max ? val : max;\n    }, 0);\n}\n\n\nA: You can use Array.prototype.reduce to get the max value of an array.\n\n\nvar arr = [1, 2, 3, 5, 10, 123, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000, 100000000000, 1000000000000, 10000000000000, 100000000000000, 1000000000000000, 10000000000000000, 100000000000000000, 1000000000000000000, 10000000000000000000, 100000000000000000000, 1000000000000000000000, 10000000000000000000000, 100000000000000000000000, 10000"], ["//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  var fizz = [];\n  var buzz = [];\n  for(var i = 0; i < n; i++){\n    if(i % 3 == 0){\n      fizz.push(i);\n    }\n    else if(i % 5 == 0){\n      buzz.push(i);\n    }\n    else{\n      fizz.push(i);\n      buzz.push(i);\n    }\n  }\n  return fizz.join(' ');\n}\n\n\nA: You can use a for loop to iterate through the numbers and check if it is divisible by 3 or 5.\n\n"], ["//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n  var i, j, k, v, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, v64, v65, v66, v67, v68, v69, v70, v71, v72, v73, v74, v75, v76, v77, v78, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93, v94, v95, v96, v97, v98"], ["//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n    var fib = [];\n    fib.push(n);\n    fib.push(n-1);\n    fib.push(n-2);\n    fib.push(n-3);\n    fib.push(n-4);\n    fib.push(n-5);\n    fib.push(n-6);\n    fib.push(n-7);\n    fib.push(n-8);\n    fib.push(n-9);\n    fib.push(n-10);\n    fib.push(n-11);\n    fib.push(n-12);\n    fib.push(n-13);\n    fib.push(n-14);\n    fib.push(n-15);\n    fib.push(n-16);\n    fib.push(n-17);\n    fib.push(n-18);\n    fib.push(n-19);\n    fib.push(n-20);\n    fib.push(n-21);\n    fib.push(n-22);\n    fib.push(n-23);\n    fib.push(n-24);\n    fib.push(n-25);\n    fib.push(n-26);\n    fib.push(n-27);\n    fib.push(n-28);\n    fib.push(n-29);\n    fib.push(n-30);\n    fib.push(n-31);\n    fib.push(n-32);\n    fib.push(n-33);\n    fib.push(n-34);\n    fib.push(n-35);\n    fib.push(n-36);\n    fib."], ["//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  var i = 0;\n  var sum = 0;\n  var result = false;\n  for(i = 0; i < l.length; i++){\n    sum += l[i];\n  }\n  if(sum === 0){\n    result = true;\n  }\n  return result;\n}\n"], ["//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  var cars = [];\n  var cars_left = [];\n  var cars_right = [];\n  var cars_left_speed = [];\n  var cars_right_speed = [];\n  var cars_left_distance = [];\n  var cars_right_distance = [];\n  var cars_left_speed_max = [];\n  var cars_right_speed_max = [];\n  var cars_left_distance_max = [];\n  var cars_right_distance_max = [];\n  var cars_left_speed_min = [];\n  var cars_right_speed_min = [];\n  var cars_left_distance_min = [];\n  var cars_right_distance_min = [];\n  var cars_left_speed_max_min = [];\n  var cars_right_speed_max_min = [];\n  var cars_left_distance_max_min = [];\n  var cars_right_distance_max_min = [];\n  var cars_left_speed_min_max = [];\n  var cars_right_speed_min_max = [];\n  var cars_left_distance_min_max = [];\n  var cars_right_distance_min_max = [];\n  var cars_left_speed_max = [];\n  var cars_right_speed_max = [];\n  var cars_left_distance_max = [];\n  var cars_right_distance_max = [];\n  var cars_left_speed_min = [];\n  var cars_right_speed_min = [];\n  var cars_left_distance_min = [];"], ["//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var i = 0;\n  var res = [];\n  while(l.length > i){\n    res.push(l.shift());\n  }\n  return res;\n}\n\n\nA: You can use a recursive function like this:"], ["//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n    var result = false;\n    for(var i=0; i<l.length; i++){\n        if(l[i] == l[i+1]){\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\n\nA: You can use a simple for loop to check if the sum is zero.\n\n"], ["//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n  if(x < 10){\n    return x.toString(base);\n  } else {\n    return x.toString();\n  }\n}\n"], ["//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  var area = 0;\n  for(var i=0; i<a; i++){\n    area += h * Math.pow(i, 2);\n  }\n  return area;\n}\n\n\nA: You can use the following function to calculate the area of a triangle."], ["//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if(n == 0 || n == 1){\n    return 0;\n  }\n  if(n == 2){\n    return 2;\n  }\n  if(n == 3){\n    return 4;\n  }\n  if(n == 4){\n    return 8;\n  }\n  if(n == 5){\n    return 14;\n  }\n  if(n == 6){\n    return 28;\n  }\n  if(n == 7){\n    return 42;\n  }\n  return fib4(n-1)+fib4(n-2)+fib4(n-3)+fib4(n-4);\n}\n\n\nA: You can use the following code:"], ["//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n    var median = [];\n    for(var i=0; i<l.length; i++){\n        if(l[i] > median[i]){\n            median[i] = l[i];\n        }\n    }\n    return median;\n}\n"], ["//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n    var text_length = text.length;\n    var text_characters = text.characters;\n    var text_characters_length = text_characters.length;\n    var text_characters_reverse = text_characters.reverse();\n    var text_reverse_length = text_characters_reverse.length;\n    var text_reverse_characters = text_reverse_length.reverse();\n    var text_reverse_characters_length = text_reverse_characters.length;\n    var text_reverse_characters_reverse = text_reverse_characters.reverse();\n    var text_reverse_reverse_length = text_reverse_characters_reverse.length;\n    var text_reverse_reverse_characters = text_reverse_reverse_length.reverse();\n    var text_reverse_reverse_characters_length = text_reverse_reverse_characters.length;\n    var text_reverse_reverse_characters_reverse = text_reverse_reverse_characters.reverse();\n    var text_reverse_reverse_reverse_length = text_reverse_reverse_characters_reverse.length;\n    var text_reverse_reverse_reverse_characters = text_reverse_reverse_reverse_length.reverse();\n    var text_reverse_reverse_reverse_characters_reverse = text_reverse_reverse_reverse_characters.reverse();\n    var text_reverse_reverse_reverse_reverse_length = text_reverse_reverse_reverse_characters_reverse.length;\n    var text_reverse_reverse_reverse_reverse_characters = text_reverse_reverse_reverse_reverse_length.reverse();\n    var text_reverse_reverse_reverse_reverse_reverse_length = text_reverse_reverse_reverse_reverse_characters.reverse();\n    var text_reverse_reverse_reverse_reverse_reverse_reverse_length = text_reverse_reverse_reverse_reverse_"], ["//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var i = 0;\n    while(i < n){\n        if(p % i === 0){\n            return i;\n        }\n        i++;\n    }\n    return -1;\n}\n"], ["//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n    var result = text.replace(/[a-z]/g, function(letter){\n        return letter.toUpperCase();\n    });\n    return result;\n}\n\n\nA: You can use the following regex:\nvar text = \"abcdef\";\nvar result = text.replace(/[a-z]/g, function(letter){\n    return letter.toUpperCase();\n});\n\n\nA: You can use the following regex:\nvar text = \"abcdef\";\nvar result = text.replace(/[a-z]/g, function(letter){\n    return letter.toUpperCase();\n});\n\n\nA: You can use the following regex:\nvar text = \"abcdef\";\nvar result = text.replace(/[a-z]/g, function(letter){\n    return letter.toUpperCase();\n});\n\n\nA: You can use the following regex:\nvar text = \"abcdef\";\nvar result = text.replace(/[a-z]/g, function(letter){\n    return letter.toUpperCase();\n});\n\n"], ["//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n  return l < t;\n}\n"], ["//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}\n"], ["//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n  var result = false;\n  var i;\n  for(i=0; i<s0.length; i++){\n    if(s0[i] == s1[i]){\n      result = true;\n      break;\n    }\n  }\n  return result;\n}\n\n\nA: You can use the following code to check if the two strings are equal:"], ["//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  var fib = [];\n  fib[0] = 1;\n  fib[1] = 1;\n  fib[2] = fib[1] + fib[0];\n  return fib;\n}\n"], ["//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  var result = false;\n  for(var i=0; i<brackets.length; i++){\n    var bracket = brackets[i];\n    var open = bracket.opening;\n    var close = bracket.closing;\n    var result = true;\n    if(open == close){\n      result = true;\n    }\n    if(open == close){\n      result = true;\n    }\n    if(open == close){\n      result = true;\n    }\n    if(open == close){\n      result = true;\n    }\n    if(open == close){\n      result = true;\n    }\n    if(open == close){\n      result = true;\n    }\n    if(open == close){\n      result = true;\n    }\n    if(open == close){\n      result = true;\n    }\n    if(open == close){\n      result = true;\n    }\n    if(open == close){\n      result = true;\n    }\n    if(open == close){\n      result = true;\n    }\n    if(open == close){\n      result = true;\n    }\n    if(open == close){\n      result = true;\n    }\n    if(open == close){\n      result = true;\n    }\n    if(open == close){\n      result = true;\n    }\n    if(open == close){\n      result = true;\n    }\n    if(open == close){\n      result = true;\n    }\n    if(open == close){\n      result = true;\n    }\n    if(open == close){\n      result = true;\n    }\n    if(open == close){\n      result = true;\n    }\n    if(open == close){\n"], ["//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n    var result = [];\n    for(var i=0; i<l.length; i++){\n        result.push(l[i]);\n    }\n    return result;\n}\n\n\nA: I'm not sure if this is the best way to do it, but I've come up with a solution that works for me."], ["//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n    var res = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = 0; j < l2.length; j++){\n            if(l1[i] == l2[j]){\n                res.push(l1[i]);\n            }\n        }\n    }\n    return res;\n}\n\n\nA: You can use Array.prototype.filter() to get the common elements.\n\n\nvar common = function(l1, l2){\n    var res = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j = 0; j < l2.length; j++){\n            if(l1[i] == l2[j]){\n                res.push(l1[i]);\n            }\n        }\n    }\n    return res;\n}\n\nvar common = common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]);\n"], ["//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  if (n < 2) return 1;\n  if (n % 2 == 0) return 1;\n  if (n % 3 == 0) return 1;\n  if (n % 5 == 0) return 1;\n  if (n % 7 == 0) return 1;\n  if (n % 11 == 0) return 1;\n  if (n % 13 == 0) return 1;\n  if (n % 17 == 0) return 1;\n  if (n % 19 == 0) return 1;\n  if (n % 23 == 0) return 1;\n  if (n % 29 == 0) return 1;\n  if (n % 31 == 0) return 1;\n  if (n % 37 == 0) return 1;\n  if (n % 41 == 0) return 1;\n  if (n % 43 == 0) return 1;\n  if (n % 47 == 0) return 1;\n  if (n % 49 == 0) return 1;\n  if (n % 53 == 0) return 1;\n  if (n % 57 == 0) return 1;\n  if (n % 61 == 0) return 1;\n  if (n % 63 == 0) return 1;\n  if (n % 67 == 0) return 1;\n  if (n % 69 == 0) return 1;\n  if (n % 71 == 0) return 1;\n  if (n % 73 == 0) return 1;\n  if (n % 77 == 0) return 1;\n  if (n % 81"], ["//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  return n + sum_to_n(n-1);\n}\n"], ["//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  var result = false;\n  var i = 0;\n  var j = 0;\n  var open = false;\n  var close = false;\n  var open_index = 0;\n  var close_index = 0;\n  var open_bracket = brackets[i];\n  var close_bracket = brackets[j];\n  var open_index_prev = i;\n  var close_index_prev = j;\n  var open_index_next = i;\n  var close_index_next = j;\n  var open_index = i;\n  var close_index = j;\n  var open_bracket_prev = brackets[i];\n  var close_bracket_prev = brackets[j];\n  var open_bracket_next = brackets[i];\n  var close_bracket_next = brackets[j];\n  var open_bracket_prev_next = brackets[i];\n  var close_bracket_prev_next = brackets[j];\n  var open_bracket_prev = brackets[i];\n  var close_bracket_prev = brackets[j];\n  var open_bracket_next = brackets[i];\n  var close_bracket_next = brackets[j];\n  var open_bracket_prev_next = brackets[i];\n  var close_bracket_prev_next = brackets[j];\n  var open_bracket_prev = brackets[i];\n  var close_bracket_prev = brackets[j];\n  var open_bracket_next = brackets[i];\n  var close_bracket_next = brackets[j];\n  var open_bracket_prev_next = brackets[i];\n  var close_bracket_prev_next = brackets[j];\n  var open_bracket"], ["//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\nvar result = [];\nfor(var i=0; i<xs.length; i++){\nresult.push(i+1);\nreturn result;\n}\n}\n\n\nA: You can use the following function:"], ["//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n        return 1;\n    }\n    if(n == 2){\n        return 2;\n    }\n    if(n == 3){\n        return 3;\n    }\n    if(n == 4){\n        return 4;\n    }\n    if(n == 5){\n        return 5;\n    }\n    if(n == 6){\n        return 6;\n    }\n    if(n == 7){\n        return 7;\n    }\n    if(n == 8){\n        return 8;\n    }\n    if(n == 9){\n        return 9;\n    }\n    if(n == 10){\n        return 10;\n    }\n    if(n == 11){\n        return 11;\n    }\n    if(n == 12){\n        return 12;\n    }\n    if(n == 13){\n        return 13;\n    }\n    if(n == 14){\n        return 14;\n    }\n    if(n == 15){\n        return 15;\n    }\n    if(n == 16){\n        return 16;\n    }\n    if(n == 17){\n        return 17;\n    }\n    if(n"], ["//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  var vowels = ['a', 'e', 'i', 'o', 'u'];\n  var count = 0;\n  var i;\n  for(i = 0; i < s.length; i++){\n    if(s[i] in vowels){\n      count++;\n    }\n  }\n  return count;\n}\n"], ["//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  if(x < 0){\n    return x + shift + \"0\";\n  }\n  return x + shift + \"1\";\n}\n"], ["//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n    var sum = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] >= 48 && s[i] <= 57){\n            sum += s[i];\n        }\n    }\n    return sum;\n}\n\n\nA: You can use the following function:"], ["//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  var total = 0;\n  for (var i = 0; i < s.length; i++){\n    var c = parseInt(s.charAt(i));\n    if (c == 'O'){\n      total += n;\n    }\n  }\n  return total;\n}\n\n\nA: You can use a for loop to iterate through the string and check if the character is an 'O' and if so, increment the total.\n\n"], ["//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  var result = [];\n  for(var i=0; i<arr.length; i++){\n    var node = arr[i];\n    if(node.value == 0){\n      result.push(node);\n    }\n  }\n  return result;\n}\n\n\n\nA: You can use a recursive function to find the smallest value.\n\n"], ["//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    var max = 0;\n    var i = 0;\n    var count = 0;\n    var freq = 0;\n    var result = -1;\n    while(i < lst.length){\n        if(lst[i] > 0){\n            if(freq > max){\n                max = freq;\n                count = 1;\n                i++;\n            }\n            freq = freq + 1;\n            i++;\n        }\n        else{\n            if(count > 0){\n                count--;\n            }\n            i++;\n        }\n    }\n    return result;\n}\n\n\nA: You can use a binary search tree to find the maximum value.\n\n\n*\n\n*Create a binary tree.\n\n*Insert the first element in the tree.\n\n*Insert the second element in the tree.\n\n*Insert the third element in the tree.\n\n*Insert the fourth element in the tree.\n\n*Insert the fifth element in the tree.\n\n*Insert the sixth element in the tree.\n\n*Insert the seventh element in the tree.\n\n*Insert the eighth element in the tree.\n\n*Insert the ninth element in the tree.\n\n*Insert the tenth element in the tree.\n\n*Insert the eleventh element in the tree.\n\n*Insert the twelfth element in the tree.\n\n*Insert the thirteenth element in the tree.\n\n*Insert the fourteenth element in the"], ["//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n    var i = 0;\n    var j = lst.length;\n    var temp = lst[0];\n    while(i < j){\n        if(lst[i] < lst[j]){\n            i++;\n        }\n        else{\n            j--;\n        }\n        if(i == j){\n            i++;\n        }\n        else{\n            j--;\n        }\n        if(i < j){\n            temp = lst[i];\n            lst[i] = lst[j];\n            lst[j] = temp;\n        }\n    }\n    return lst;\n}\n\n\nA: You can use a simple for loop to sort the list.\n\n"], ["//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  if(a == b && b == c){\n    return 0;\n  }\n  if(a == c && b == c){\n    return 0;\n  }\n  if(a == c && b == b){\n    return 0;\n  }\n  if(a == b && c == b){\n    return 0;\n  }\n  if(a == b && c == c){\n    return 0;\n  }\n  if(a == c && b == c){\n    return 0;\n  }\n  if(a == c && b == b){\n    return 0;\n  }\n  if(a == b && c == b){\n    return 0;\n  }\n  if(a == b && c == c){\n    return 0;\n  }\n  if(a == b && c == c){\n    return 0;\n  }\n  if(a == b && c == c){\n    return 0;\n  }\n  if(a == b && c == c){\n    return 0;\n  }\n  if(a == b && c == c){\n    return 0;\n  }\n  if(a == b && c == c){\n    return 0;\n  }\n  if(a == b && c == c){\n    return 0;\n  }\n  if(a == b && c == c){\n    return 0;\n  }\n  if(a == b && c == c){\n    return 0;\n  }\n  if(a == b && c == c){\n    return 0;\n  }\n  if(a == b &&"], ["//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  if(q.length === 0) return false;\n  var sum = 0;\n  for(var i=0; i<q.length; i++){\n    sum += q[i];\n  }\n  return sum <= w;\n}\n"], ["//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  var result = arr.length;\n  var smallestChange = 0;\n  for(var i = 0; i < result; i++){\n    var current = arr[i];\n    var next = arr[i + 1];\n    if(current === next){\n      smallestChange++;\n    }\n  }\n  return smallestChange;\n}\n\n\nA: You can use a simple for loop to check each element in the array.\n\n"], ["//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  var result = [];\n  for(var i=0; i<lst1.length; i++){\n    if(lst2[i] == lst1[i]){\n      result.push(lst1[i]);\n    }\n  }\n  return result;\n}\n\n\nA: You can use Array.prototype.filter() to get the result.\n\n\nvar lst1 = [\"hi\", \"admin\", \"hi\", \"admin\", \"project\", \"hi\", \"admin\"],\n    lst2 = [\"hi\", \"admin\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"],\n    result = lst1.filter(function(item) {\n      return lst2.indexOf(item) === -1;\n    });\n"], ["//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if(a % 2 == 0){\n        return false;\n    }\n    if(a % 3 == 0){\n        return false;\n    }\n    if(a % 5 == 0){\n        return false;\n    }\n    return true;\n}\n\n\nA: You can use the following code to check if a number is a prime number."], ["//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if(n == 1){\n    return x == 1;\n  }\n  if(n == 2){\n    return x == 2;\n  }\n  if(n == 3){\n    return x == 3;\n  }\n  if(n == 4){\n    return x == 4;\n  }\n  if(n == 5){\n    return x == 5;\n  }\n  if(n == 6){\n    return x == 6;\n  }\n  if(n == 7){\n    return x == 7;\n  }\n  if(n == 8){\n    return x == 8;\n  }\n  if(n == 9){\n    return x == 9;\n  }\n  if(n == 10){\n    return x == 10;\n  }\n  if(n == 11){\n    return x == 11;\n  }\n  if(n == 12){\n    return x == 12;\n  }\n  if(n == 13){\n    return x == 13;\n  }\n  if(n == 14){\n    return x == 14;\n  }\n  if(n == 15){\n    return x == 15;\n  }\n  if(n == 16){\n    return x == 16;\n  }\n  if(n == 17){\n    return x"], ["//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n    if(a < 0){\n        return false;\n    }\n    if(a % 2 == 0){\n        return false;\n    }\n    if(a % 3 == 0){\n        return false;\n    }\n    if(a % 5 == 0){\n        return false;\n    }\n    if(a % 7 == 0){\n        return false;\n    }\n    if(a % 9 == 0){\n        return false;\n    }\n    if(a % 11 == 0){\n        return false;\n    }\n    if(a % 13 == 0){\n        return false;\n    }\n    if(a % 17 == 0){\n        return false;\n    }\n    if(a % 19 == 0){\n        return false;\n    }\n    if(a % 23 == 0){\n        return false;\n    }\n    if(a % 27 == 0){\n        return false;\n    }\n    if(a % 31 == 0){\n        return false;\n    }\n    if(a % 33 == 0){\n        return false;\n    }\n    if(a % 37 == 0){\n        return false;\n    }\n    if(a % 41 == 0){\n        return false;\n    }\n    if(a % 43 == 0){\n        return false;\n    }\n    if(a % 47 == 0){\n        return false;\n    }\n    if(a % 53 == 0){"], ["//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  var result = 0;\n  var hex_digits = \"0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF012"], ["//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  var result = \"\";\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var d = 0;\n  var e = 0;\n  var f = 0;\n  var g = 0;\n  var h = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;"], ["//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  var len = s.length;\n  var i;\n  var c;\n  var c2;\n  for(i=0; i<len; i++){\n    c = s.charCodeAt(i);\n    c2 = s.charCodeAt(i+1);\n    if(c==c2){\n      return false;\n    }\n  }\n  return true;\n}\n\n\nA: You can use the following code to check if the string is hapjs or not."], ["//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var letter_grades = [];\n  for(var i = 0; i < grades.length; i++){\n    var letter = grades[i];\n    if(letter >= 4 && letter <= 5){\n      letter_grades.push(letter);\n    }\n  }\n  return letter_grades;\n}\n"], ["//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n    var length = 0;\n    var i = 0;\n    while(i < string.length){\n        if(string.charAt(i) == string.charAt(i+1)){\n            length++;\n        }\n        i++;\n    }\n    return length;\n}\n\n\nA: You can use the following function:"], ["//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  var result = [];\n  for(var i = 0; i < n; i++){\n    var num = parseInt(i);\n    if(num > 0){\n      var start = i;\n      var end = i + 1;\n      if(start < 1){\n        result.push(start);\n        result.push(end);\n      }\n      else{\n        result.push(start);\n        result.push(end);\n        result.push(num);\n      }\n    }\n  }\n  return result;\n}\n"], ["//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  var result = \"\";\n  for(var i=0; i<N; i++){\n    result += String(i);\n  }\n  return result;\n}\n\n\nA: Here is a solution using a recursive function.\n\n"], ["//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i % 2 == 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\n\nA: You can use a for loop to iterate through the array and add the even numbers.\n\n"], ["//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  var words = s.split(\" \");\n  var new_words = [];\n  var new_words_length = words.length;\n  var new_words_index = 0;\n  var new_words_length_index = 0;\n  var new_words_length_index_index = 0;\n  var new_words_length_index_index_index = 0;\n  var new_words_length_index_index_index_index = 0;\n  var new_words_length_index_index_index_index_index = 0;\n  var new_words_length_index_index_index_index_index_index = 0;\n  var new_words_length_index_index_index_index_index_index_index = 0;\n  var new_words_length_index_index_index_index_index_index_index_index = 0;\n  var new_words_length_index_index_index_index_index_index_index_index = 0;\n  var new_words_length_index_index_index_index_index_index_index_index_index = 0;\n  var new_words_length_index_index_index_index_index_index_index_index_index = 0;\n  var new_words_length_index_index_index_index_index_index_index_index_index_index = 0;\n  var new_words_length_index_index_index_index_index_index_index_index_index_index = 0;\n"], ["//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  var result = [];\n  var row = 0;\n  var col = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var len = lst.length;\n  var rowLen = row;\n  var colLen = col;\n  var rowStart = 0;\n  var colStart = 0;\n  var rowEnd = row;\n  var colEnd = col;\n  var rowStart1 = rowStart;\n  var colStart1 = colStart;\n  var rowEnd1 = rowEnd;\n  var colEnd1 = colEnd;\n  var rowStart2 = rowStart1;\n  var colStart2 = colStart1;\n  var rowEnd2 = rowEnd;\n  var colEnd2 = colEnd;\n  var rowStart3 = rowStart2;\n  var colStart3 = colStart2;\n  var rowEnd3 = rowEnd;\n  var colEnd3 ="], ["//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n    var result = [];\n    var i = 0;\n    var j = array.length;\n    while(i < j){\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n        i++;\n        j--;\n    }\n    return result;\n}\n\n\nA: You can use Array.prototype.sort() to sort the array.\n\n\nvar array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\narray.sort();\n"], ["//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var rotated = alphabet.slice(0, -1);\n    var rotatedS = alphabet.slice(0, -1);\n    var rotatedS = rotated.reverse();\n    var rotatedS = rotatedS.reverse();\n    var rotatedS = rotatedS.reverse();\n    var rotatedS = rotatedS.reverse();\n    var rotatedS = rotatedS.reverse();\n    var rotatedS = rotatedS.reverse();\n    var rotatedS = rotatedS.reverse();\n    var rotatedS = rotatedS.reverse();\n    var rotatedS = rotatedS.reverse();\n    var rotatedS = rotatedS.reverse();\n    var rotatedS = rotatedS.reverse();\n    var rotatedS = rotatedS.reverse();\n    var rotatedS = rotatedS.reverse();\n    var rotatedS = rotatedS.reverse();\n    var rotatedS = rotatedS.reverse();\n    var rotatedS = rotatedS.reverse();\n    var rotatedS = rotatedS.reverse();\n    var rotatedS = rotatedS.reverse();\n    var rotatedS = rotatedS.reverse();\n    var rotatedS = rotatedS.reverse();\n    var rotatedS = rotatedS.reverse();\n    var rotatedS = rotatedS.reverse();\n    var rotatedS = rotatedS.reverse();\n    var rotatedS = rotatedS.reverse();\n    var rotatedS = rotatedS.reverse();\n    var rotatedS = rotatedS.reverse"], ["//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  if(lst.length === 0) return undefined;\n  var i = 0;\n  var j = lst.length;\n  while(i < j){\n    if(lst[i] < lst[j]){\n      i = j;\n      j = i;\n    }\n    else{\n      i++;\n    }\n  }\n  return lst[i];\n}\n\n\nA: You can use a recursive function like this:"], ["//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  var i = 0;\n  var n = S.split('.');\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m = 0;\n  var n = n.length;\n  var n = n.split('?');\n  var n = n.length;\n  var n = n.split('!');\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;\n  var n = n.length;"], ["//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  if(x === y && y === z){\n    return true;\n  }\n  return false;\n}\n\n\nA: You can use the following code:\n\n"], ["//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  var result = \"\";\n  var i;\n  var letters = \"aeiou\";\n  var vowels = \"aeiou\";\n  var letters2 = \"aeiou\";\n  var vowels2 = \"aeiou\";\n  var result2 = \"\";\n  for(i = 0; i < message.length; i++){\n    if(message[i] == \" \")\n      result2 += letters2[i];\n    else if(message[i] == \" \"){\n      result2 += letters[i];\n      i++;\n    }\n    else if(message[i] == vowels[i]){\n      result2 += vowels[i];\n      i++;\n    }\n    else{\n      result2 += letters[i];\n      i++;\n    }\n  }\n  return result2;\n}\n\n\nA: You can use the following code:"], ["//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    sum += lst[i];\n  }\n  return sum;\n}\n\n\nA: You can use a recursive function like this:"], ["//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  var result = true;\n  for(var key in dict){\n    if(dict[key] == undefined){\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\n\n\nA: You can use the following code:"], ["//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  var count = [];\n  var i = 1;\n  while(i < n){\n    count.push(i);\n    i++;\n  }\n  return count;\n}\n"], ["//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  if(a < 0 || b < 0){\n    throw new Error(\"a and b must be positive\");\n  }\n  if(a < b){\n    throw new Error(\"a and b must be positive\");\n  }\n  if(a > b){\n    throw new Error(\"a and b must be positive\");\n  }\n  if(a == b){\n    throw new Error(\"a and b must be positive\");\n  }\n  if(a < 0 && b < 0){\n    throw new Error(\"a and b must be positive\");\n  }\n  if(a < 0 && a == b){\n    throw new Error(\"a and b must be positive\");\n  }\n  if(a > 0 && b < 0){\n    throw new Error(\"a and b must be positive\");\n  }\n  if(a > 0 && a == b){\n    throw new Error(\"a and b must be positive\");\n  }\n  if(a > 0 && a > b){\n    throw new Error(\"a and b must be positive\");\n  }\n  if(a > 0 && a < b){\n    throw new Error(\"a and b must be positive\");\n  }\n  if(a < 0 && b > 0){\n    throw new Error(\"a and b must be positive\");\n  }\n  if(a < 0 && a < b){\n    throw new Error(\"a and b must be positive\");\n  }\n  if(a < 0 && a < b){\n    throw new Error(\"a and b must be positive\");\n  }\n  if(a < 0 && a < b){\n    throw new Error(\"a and b must be positive\");\n  }\n"], ["//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  var result = 0;\n  var i = s.length;\n  while(i--){\n    if(s[i] == 'u'){\n      result++;\n    }\n  }\n  return result;\n}\n\n\nA: You can use a recursive function to count the number of uppercase letters in a string."], ["//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  var closest = Math.abs(value - value.toFixed(1));\n  if(Math.abs(value - value.toFixed(1)) < Math.abs(value - value.toFixed(0)))\n    return Math.abs(value - value.toFixed(1));\n  else\n    return Math.abs(value - value.toFixed(0));\n}\n"], ["//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  var array = [];\n  var i = 0;\n  while(i < n){\n    array.push(i);\n    i++;\n  }\n  return array;\n}\n"], ["//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  var words = [];\n  var index = 0;\n  var str = s;\n  while(str.length > 0){\n    var word = str.substr(0, index);\n    words.push(word);\n    str = str.substr(index);\n    index++;\n  }\n  return words;\n}\n"], ["//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  var num = Math.floor(Math.random() * (x + 1) + 1);\n  if(num > y){\n    return num;\n  }\n  return num;\n}\n"], ["//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  var avg = 0;\n  for(var i = n; i <= m; i++){\n    avg += i;\n  }\n  return avg;\n}\n"], ["//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  var result = [];\n  for(var i=0; i<x.length; i++){\n    if(x[i]%2===0){\n      result.push(x[i]);\n    }\n  }\n  return result;\n}\n\n\nA: You can use a recursive function to do this.\n\n"], ["//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result = [];\n  for(var i = 0; i < arr.length; i++){\n    var name = arr[i];\n    var length = arr.length;\n    for(var j = 0; j < length; j++){\n      var digit = arr[j];\n      if(name === digit){\n        result.push(name);\n      }\n    }\n  }\n  return result;\n}\n\n\nA: Here is a solution using reduce and filter:\n\n\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst result = arr.reduce((acc, curr) => {\n  const name = curr.toString();\n  const length = acc.length;\n  for (let i = 0; i < length; i++) {\n    const digit = acc[i];\n    if (name === digit) {\n      acc.push(name);\n    }\n  }\n  return acc;\n}, []);\n"], ["//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  if(n%2==0){\n    return n*f(n-1);\n  }\n  return n*f(n-2);\n}\n"], ["//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  var even_odd_palindromes = [];\n  for(var i = 1; i <= n; i++){\n    var even_odd_palindrome = [i, i];\n    even_odd_palindromes.push(even_odd_palindrome);\n  }\n  return even_odd_palindromes;\n}\n\n\nA: You can use a for loop to iterate through the numbers and check if they are palindromes.\n\n"], ["//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  var count = 0;\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i] > 0){\n      count++;\n    }\n  }\n  return count;\n}\n"], ["//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  var result = false;\n  for(var i=0; i<arr.length; i++){\n    if(arr[i] > arr[i+1]){\n      arr[i] = arr[i+1];\n      arr[i+1] = arr[i];\n      result = true;\n    }\n  }\n  return result;\n}\n\n\n\nA: You can use a binary search tree to find the sorted array.\n\n\n*\n\n*Create a binary tree with the array as the root node.\n\n*For each element in the array, check if it is greater than or equal to the root node. If it is, then add the element to the left subtree. If it is not, then add the element to the right subtree.\n\n*For each element in the array, check if it is"], ["//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  var result = \"NO\";\n  if(lst1.length == lst2.length){\n    for(var i = 0; i < lst1.length; i++){\n      if(lst1[i] % 2 == 0){\n        result = \"YES\";\n        break;\n      }\n    }\n  }\n  return result;\n}\n\n\nA: I think you can use a for loop to check the length of the arrays.\n\n"], ["//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  var count = 0;\n  var histogram = {};\n  for(var i=0; i<test.length; i++){\n    var letter = test[i];\n    var count = 0;\n    for(var j=0; j<histogram.length; j++){\n      if(histogram[j] == letter){\n        count++;\n      }\n    }\n    histogram[letter] = count;\n  }\n  return histogram;\n}\n"], ["//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n    var result = [];\n    var i = 0;\n    var j = s.length;\n    var k = c.length;\n    var temp = \"\";\n    while(i < j){\n        if(s[i] == c[j]){\n            result.push(s.substring(i, j));\n            i++;\n            j--;\n        }\n        else{\n            temp = s.substring(i, j);\n            i++;\n            j--;\n        }\n    }\n    return result;\n}\n\n\nA: You can use a recursive function."], ["//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  var count = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] === \" \")\n      count++;\n  }\n  return count;\n}\n\n\nA: You can use a for loop to iterate over the string and check if it is a number. If it is a number, you can check if it is odd. If it is odd, you can check if it is the number of odd elements in the string. If it is the number of odd elements in the string, you can return the number.\n\n"], ["//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  var min = 0;\n  var sum = 0;\n  for(var i = 0; i < nums.length; i++){\n    sum += nums[i];\n    if(sum < min){\n      min = sum;\n    }\n  }\n  return min;\n}\n\n\n\nA: You can use the following code:"], ["//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  var bucket_length = grid.length;\n  var bucket_capacity = grid[0][0].capacity;\n  var bucket_fill = 0;\n  var bucket_empty = 0;\n  var bucket_num_empty = 0;\n  var bucket_num_full = 0;\n  var bucket_num_empty_full = 0;\n  var bucket_num_empty_capacity = 0;\n  var bucket_num_full_capacity = 0;\n  var bucket_num_full_capacity_empty = 0;\n  var bucket_num_full_capacity_full = 0;\n  var bucket_num_full_capacity_empty_full = 0"], ["//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  var len = arr.length;\n  var result = [];\n  var i = 0;\n  for(var j = 0; j < len; j++){\n    if(arr[j] > arr[j+1]){\n      result.push(arr[j]);\n      result.push(arr[j+1]);\n    }\n  }\n  return result;\n}\n"], ["//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  var i = 0;\n  while(i < s.length){\n    var c = s.charAt(i);\n    if(c >= 'a' && c <= 'z'){\n      words.push(s.charAt(i));\n    }\n    i++;\n  }\n  return words;\n}\n"], ["//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    var vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    var vowels_left = vowels.slice(0, word.length - 1);\n    var vowels_right = vowels.slice(word.length - 1, word.length);\n    var vowels_left_reverse = vowels_left.reverse();\n    var vowels_right_reverse = vowels_right.reverse();\n    var vowels_left_reverse = vowels_left_reverse.reverse();\n    var vowels_right_reverse = vowels_right_reverse.reverse();\n    var vowels_left = vowels_left.slice(0, word.length - 1);\n    var vowels_right = vowels_right.slice(word.length - 1, word.length);\n    var vowels_left_reverse = vowels_left_reverse.slice(0, word.length - 1);\n    var vowels_right_reverse = vowels_right_reverse.slice(word.length - 1, word.length);\n    var vowels_left_reverse = vowels_left_reverse.slice(word.length - 1, word.length);\n    var vowels_right_reverse = vowels_right_reverse.slice(word.length - 1, word.length);\n    var vowels_left = v"], ["//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  var result = true;\n  for(var i = 0; i < lst.length; i++){\n    var current = lst[i];\n    if(current == ''){\n      result = false;\n    }\n    else{\n      var current_parens = current.match(/^(\\()|(\\))$/);\n      if(current_parens == null){\n        result = false;\n      }\n      else{\n        var current_parens_len = current_parens.length;\n        var current_parens_pos = current_parens.indexOf('(');\n        var current_parens_end = current_parens.indexOf(')', current_parens_pos + 1);\n        var current_parens_end_pos = current_parens_end - 1;\n        var current_parens_end_len = current_parens_end_pos - current_parens_pos;\n        var current_parens_pos_end = current_parens_pos + current_parens_len;\n        var current_parens_pos_end_pos = current_parens_pos_end - current_parens_len;\n        var current_parens_pos_end_len = current_parens_pos_end_pos - current_parens_pos;\n        var current_parens_pos_end_pos = current_parens_pos_end_pos + current"], ["//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  if(k === undefined){\n    return arr.reduce(function(max, val){\n      return val < max ? val : max;\n    }, 0);\n  }\n  var max = arr[0];\n  for(var i = 1; i < arr.length; i++){\n    if(arr[i] < max){\n      max = arr[i];\n    }\n  }\n  return max;\n}\n\n\nA: You can use reduce function to achieve this.\n\n"], ["//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n    var result = 0;\n    for(var i = 0; i < lst.length; i++){\n        var current = lst[i];\n        if(current > result){\n            result = current;\n        }\n    }\n    return result;\n}\n\n\nA: You can use a recursive function like this:"], ["//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  var sum = 0;\n  for (var i = 0; i < k; i++){\n    sum += arr[i];\n  }\n  return sum;\n}\n"], ["//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n    var collatz = [];\n    for(var i = 1; i <= n; i++){\n        collatz.push(i);\n    }\n    return collatz;\n}\n"], ["//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n    var valid = true;\n    if(date.length < 1 || date.length > 31){\n        valid = false;\n    }\n    if(date.length < 1 || date.length > 30){\n        valid = false;\n    }\n    if(date.length < 1 || date.length > 29){\n        valid = false;\n    }\n    if(date.length < 1 || date.length > 12){\n        valid = false;\n    }\n    if(date.length < 1 || date.length > 11){\n        valid = false;\n    }\n    if(date.length < 1 || date.length > 10){\n        valid = false;\n    }\n    if(date.length < 1 || date.length > 9){\n        valid = false;\n    }\n    if(date.length < "], ["//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  var words = txt.split(/[^\\s]+/);\n  var count = 0;\n  for(var i=0; i<words.length; i++){\n    if(words[i].length % 2 == 0){\n      count++;\n    }\n  }\n  return count;\n}\n\n\nA: You can use the following code:\n\n"], ["//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n    var len = lst.length;\n    var i;\n    var arr = [];\n    for(i=0; i<len; i++){\n        if(arr.indexOf(lst[i]) == -1){\n            arr.push(lst[i]);\n        }\n    }\n    return arr.length == len;\n}\n\n\nA: You can use the Array.prototype.sort() method to sort the array.\n\n"], ["//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n    if(interval1.length === interval2.length){\n        for(var i = 0; i < interval1.length; i++){\n            if(interval1[i] < interval2[i]){\n                return \"NO\";\n            }\n        }\n    }\n    else{\n        for(var i = 0; i < interval2.length; i++){\n            if(interval2[i] < interval1[i]){\n                return \"YES\";\n            }\n        }\n    }\n    return \"NO\";\n}\n"], ["//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  return arr.reduce(function(sum, sign){\n    return sum * sign;\n  }, 0);\n}\n"], ["//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  var path = [];\n  var pathLength = 0;\n  var pathLengths = [];\n  var pathLengthsLength = [];\n  var pathLengthsLengths = [];\n  var pathLengths = [];\n  var pathLengthsLength = [];\n  var pathLengthsLengths = [];\n  var pathLengthsLengthsLength = [];\n  var pathLengths"], ["//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  var array = [];\n  for (var i = 0; i < n; i++){\n    array.push(i);\n  }\n  return array;\n}\n"], ["//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  var result = 0;\n  for(var i = 0; i < n; i++){\n    result += (i % 2 === 0 ? 1 : 0);\n  }\n  return result;\n}\n\n\n\nA: You can use a recursive function like this:"], ["//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  var subsequence = string.split(\"[\");\n  var nested = false;\n  for(var i=0; i<subsequence.length; i++){\n    if(subsequence[i] == \"[\"){\n      nested = true;\n    }\n  }\n  return nested;\n}\n\n\nA: You can use a regex to match the bracket and return true if there is a nested bracket.\n\n"], ["//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\n\nA: Here is a solution using the built-in Array.prototype.reduce() function.\n\n"], ["//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n    var last_char = txt.charAt(txt.length - 1);\n    if(last_char.charCodeAt(0) >= 65 && last_char.charCodeAt(0) <= 90){\n        return true;\n    }\n    return false;\n}\n"], ["//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  var result = -1;\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i] < arr[i+1]){\n      result = i;\n    }\n  }\n  return result;\n}\n"], ["//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  var max = Math.max.apply(null, lst);\n  var min = Math.min.apply(null, lst);\n  var result = [max, min];\n  return result;\n}\n"], ["//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if(a === b){\n    return a;\n  }\n  if(a === null || b === null){\n    return a;\n  }\n  if(a === undefined || b === undefined){\n    return a;\n  }\n  if(a === null || b === null){\n    return a;\n  }\n  if(a === undefined || b === undefined){\n    return a;\n  }\n  if(a === null || b === null){\n    return a;\n  }\n  if(a === undefined || b === undefined){\n    return a;\n  }\n  if(a === null || b === undefined){\n    return a;\n  }\n  if(a === undefined || b === undefined){\n    return a;\n  }\n  if(a === null || b === undefined){\n    return a;\n  }\n  if(a === undefined || b === undefined){\n    return a;\n  }\n  if(a === null || b === undefined){\n    return a;\n  }\n  if(a === undefined || b === undefined){\n    return a;\n  }\n  if(a === null || b === undefined){\n    return a;\n  }\n  if(a === undefined || b === undefined){\n    return a;\n  }\n  if(a === null || b === undefined){\n    return a;\n  }\n  if(a === undefined || b === undefined){\n    return a;\n  }\n  if(a === null || b === undefined){\n    return a;\n  }\n  if(a === undefined ||"], ["//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n    var sum = 0;\n    for(var i = 0; i < n; i++){\n        sum += i;\n    }\n    return sum === n;\n}\n\n\nA: You can use the following code:"], ["//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  if(n < 0){\n    throw new Error(\"Special factorial function is not defined for negative integers\");\n  }\n  if(n == 0){\n    return 1;\n  }\n  if(n == 1){\n    return 1;\n  }\n  return n * special_factorial(n-1);\n}\n"], ["//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n    var regex = /(\\s+)/g;\n    var result = text.replace(regex, function(match){\n        return match.replace(/ /g, \"-\");\n    });\n    return result;\n}\n\n\nA: You can use a regular expression to match the spaces and replace them with -.\n\n\nvar text = \"Example\";\nvar result = text.replace(/(\\s+)/g, \"-\");"], ["//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  var regex = /^[a-zA-Z0-9\\.\\-\\_]+$/;\n  return regex.test(file_name);\n}\n"], ["//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 3 == 0){\n            sum += lst[i];\n        }\n        else{\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\n\nA: You can use a for loop to iterate through the array and check if the index is a multiple of 3 or 4. If it is, then you can use the modulo operator to get the remainder.\n\n"], ["//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n    var result = \"\";\n    var length = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = "], ["//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  if(x == 0){\n    return false;\n  }\n  if(n == 0){\n    return true;\n  }\n  if(x == n){\n    return true;\n  }\n  if(x == 0 && n == 0){\n    return true;\n  }\n  if(x == 0 && n == 1){\n    return false;\n  }\n  if(x == 1 && n == 0){\n    return false;\n  }\n  if(x == 1 && n == 1){\n    return true;\n  }\n  if(x == 1 && n == 2){\n    return false;\n  }\n  if(x == 2 && n == 0){\n    return false;\n  }\n  if(x == 2 && n == 1){\n    return false;\n  }\n  if(x == 2 && n == 2){\n    return true;\n  }\n  if(x == 3 && n == 0){\n    return false;\n  }\n  if(x == 3 && n == 1){\n    return false;\n  }\n  if(x == 3 && n == 2){\n    return false;\n  }\n  if(x == 4 && n == 0){\n    return false;\n  }\n  if(x == 4 && n == 1){\n    return false;\n  }\n  if(x == 4 && n"], ["//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  var sorted = [];\n  for (var i = 0; i < nums.length; i++){\n    var sum = 0;\n    for (var j = 0; j < nums.length; j++){\n      sum += nums[j];\n    }\n    sorted.push(sum);\n  }\n  return sorted;\n}\n\n\n\nA: You can use Array.prototype.sort() to sort the array in ascending order.\n\n\nvar nums = [1, 11, -1, -11, -12];\n\nnums.sort();\n"], ["//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  return nums.filter(function(num){\n    return num % 2 === 0 && num > 10 && num % 3 === 0 && num % 5 === 0 && num % 7 === 0;\n  });\n}\n"], ["//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n  var a = [];\n  for(var i=1; i<=n; i++){\n    a.push(i*i-i+1);\n  }\n  return a.length;\n}\n"], ["//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n    var array = [];\n    var i = 0;\n    var j = 0;\n    var distance = 0;\n    var distance2 = 0;\n    var distance3 = 0;\n    var distance4 = 0;\n    var distance5 = 0;\n    var distance6 = 0;\n    var distance7 = 0;\n    var distance8 = 0;\n    var distance9 = 0;\n    var distance10 = 0;\n    var distance11 = 0;\n    var distance12 = 0;\n    var distance13 = 0;\n    var distance14 = 0;\n    var distance15 = 0;\n    var distance16 = 0;\n    var distance17 = 0;\n    var distance18 = 0;\n    var distance19 = 0;\n    var distance20 = 0;\n    var distance21 = 0;\n    var distance22 = 0;\n    var distance23 = 0;\n    var distance24 = 0;\n    var distance25 = 0;\n    var"], ["//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    sum += lst[i];\n  }\n  return sum;\n}\n"], ["//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n  if(n % x === 0 && n % y === 0){\n    return n;\n  }\n  return y;\n}\n"], ["//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  if(lst.length === 0){\n    return 0;\n  }\n  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    sum += lst[i];\n  }\n  return sum;\n}\n\n\nA: You can use the following code:"], ["//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  var guesses = game.guesses.slice(0);\n  var scores = game.scores.slice(0);\n  var guessesLength = guess.length;\n  var scoresLength = scores.length;\n\n  var guessesDiff = guesses.reduce(function(a, b){\n    return a - b;\n  });\n\n  var scoresDiff = scores.reduce(function(a, b){\n    return a - b;\n  });\n\n  var guessesDiff = guessesDiff.map(function(x){\n    return x - guess.indexOf(x);\n  });\n\n  var scoresDiff = scoresDiff.map(function(x){\n    return x - guess.indexOf(x);\n  });\n\n  var guessesDiff = guessesDiff.reduce(function(a, b){\n    return a + b;\n  });\n\n  var scoresDiff = scoresDiff.reduce(function(a, b){\n    return a + b;\n  });\n\n  var guessesDiff = guessesDiff.map("], ["//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  var result = class_name;\n  var i;\n  for(i = 0; i < extensions.length; i++){\n    if(extensions[i] == class_name){\n      result = extensions[i];\n      break;\n    }\n  }\n  return result;\n}\n"], ["//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n    var result = false;\n    var aLength = a.length;\n    var bLength = b.length;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n    var y = 0;\n    var z = 0;\n    var aPattern = [];\n    var bPattern = [];\n    var resultPattern = [];\n    var iPattern = [];\n    var jPattern = [];\n    var kPattern = [];\n    var lPattern = [];\n    var mPattern = [];\n    var nPattern = [];\n    var oPattern = [];\n    var pPattern = [];\n    var qPattern = [];\n    var rPattern = [];\n    var sPattern = [];\n    var tPattern = [];\n    var uPattern = [];\n    var vPattern = [];\n    var wPattern = [];\n    var xPattern = [];\n    var yPattern = [];\n    var zPattern = [];\n    var a = a.toLowerCase();\n    var b = b.toLowerCase();\n    var result = a.toLowerCase().indexOf(b."], ["//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  var even_odd_count = [];\n  var even_odd_count_array = [];\n  var odd_count = 0;\n  var even_count = 0;\n  var count = 0;\n  var i = 0;\n  while(i < num){\n    if(num % 2 == 0){\n      even_odd_count_array.push(i);\n      even_count++;\n    }\n    else{\n      odd_count++;\n    }\n    i++;\n  }\n  while(odd_count < even_count){\n    even_odd_count.push(odd_count);\n    even_odd_count_array.push(odd_count);\n    odd_count++;\n  }\n  return even_odd_count_array;\n}\n\n\nA: You can use a for loop to iterate through the numbers and check if they are even or odd.\n\n"], ["//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  var result = \"\";\n  var i = 0;\n  var min = 0;\n  var max = 1000;\n  while(i < number){\n    if(i < min){\n      result += \"x\";\n    } else if(i < max){\n      result += \"i\";\n    } else if(i < min + max){\n      result += \"ii\";\n    } else if(i < min + max + max){\n      result += \"iii\";\n    } else if(i < min + max + max + max){\n      result += \"iv\";\n    } else if(i < min + max + max + max + max){\n      result += \"v\";\n    } else if(i < min + max + max + max + max + max){\n      result += \"vi\";\n    } else if(i < min + max + max + max + max + max + max){\n      result += \"vii\";\n    } else if(i < min + max + max + max + max + max + max + max){\n      result += \"viii\";\n    } else if(i < min + max + max + max + max + max + max + max + max){\n      result += \"x\";\n    } else if(i < min + max + max + max + max + max + max + max + max + max){\n      result += \"i\";\n    } else if(i < min + max + max + max + max + max + max + max + max + max){\n      result += \"ii\";\n    } else if(i < min + max + max + max + max + max + max + max + max + max){"], ["//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  if(a > b || b > c || c > a){\n    return false;\n  }\n  if(a < b || b < c || c < a){\n    return false;\n  }\n  return true;\n}\n"], ["//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  var max_char = 0;\n  var max_word = null;\n  var i = 0;\n  var len = words.length;\n  for (i = 0; i < len; i++){\n    var current_word = words[i];\n    var current_char = current_word.charAt(0);\n    if (current_char > max_char){\n      max_char = current_char;\n      max_word = current_word;\n    }\n  }\n  return max_word;\n}\n"], ["//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  var eaten = 0;\n  var remaining = 0;\n  var need = number;\n  var remaining = number;\n  if(number <= 0){\n    return [eaten, remaining];\n  }\n  if(number >= 1000){\n    return [eaten, remaining];\n  }\n  if(number <= need){\n    eaten += number;\n    remaining -= number;\n    return [eaten, remaining];\n  }\n  if(number >= need){\n    eaten += number;\n    remaining += number;\n    return [eaten, remaining];\n  }\n  return [eaten, remaining];\n}\n"], ["//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        var operator_value = operator[i];\n        var operand_value = operand[i];\n        if(operator_value == '+'){\n            result += operand_value;\n        }\n        else if(operator_value == '-'){\n            result -= operand_value;\n        }\n        else if(operator_value == '*'){\n            result *= operand_value;\n        }\n        else if(operator_value == '/'){\n            result /= operand_value;\n        }\n        else if(operator_value == '%'){\n            result %= operand_value;\n        }\n    }\n    return result;\n}\n"], ["//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    var i = s.length;\n    var result = \"\";\n    while(i--){\n        var c = s.charAt(i);\n        if(c == 'a'){\n            result = result + c;\n        }else{\n            result = result + c.toUpperCase();\n        }\n    }\n    return result;\n}\n\n\nA: You can use the following code:"], ["//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  var result = \"\";\n  var md5 = crypto.createHash(\"md5\");\n  md5.update(text);\n  md5.digest(\"hex\");\n  result = md5.digest(\"hex\");\n  return result;\n}\n"], ["//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  var result = [];\n  var i = 0;\n  while(i < a){\n    result.push(i);\n    i++;\n  }\n  while(i < b){\n    result.push(i);\n    i++;\n  }\n  return result;\n}\n\n\nA: You can use a for loop and a while loop.\n\n"]]