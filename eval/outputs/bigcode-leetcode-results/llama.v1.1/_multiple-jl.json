[["\"\"\" Check if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\nfalse\n>>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\ntrue\"\"\"\nfunction has_close_elements(numbers::Vector{Float64}, threshold::Float64)::Bool\n    if numbers.size == 0\n        return false\n    end\n    for i in 1:length(numbers)\n        if (numbers[i] <= threshold) && (numbers[i] >= threshold)\n            return true\n        end\n    end\n    return false\nend\nend"], ["\"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the vector of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n[\"()\", \"(())\", \"(()())\"]\"\"\"\nfunction separate_paren_groups(paren_string::String)::Vector{String} =\n    paren_string.split(\" \")\nend"], ["\"\"\" Given a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\"\"\"\nfunction truncate_number(number::Float64)::Float64\n    if number < 0.0\n        truncate_number(number + 0.5)\n    elseif number < 0.0\n        truncate_number(number - 0.5)\n    else\n        truncate_number(number)\n    endif\nendfunction"], ["\"\"\" You're given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero([1, 2, 3])\nfalse\n>>> below_zero([1, 2, -4, 5])\ntrue\"\"\"\nfunction below_zero(operations::Vector{Int64})::Bool = true"], ["\"\"\" For a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n1.0\"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64 =\n    mean(numbers) - mean(numbers)"], ["\"\"\" Insert a number 'delimeter' between every two consecutive elements of input vector `numbers'\n>>> intersperse([], 4)\n[]\n>>> intersperse([1, 2, 3], 4)\n[1, 4, 2, 4, 3]\"\"\"\nfunction intersperse(numbers::Vector{Int64}, delimeter::Int64)::Vector{Int64}\n    return [numbers[i] for i in 1:delimeter]\nend"], ["\"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n[2, 3, 1, 3]\"\"\"\nfunction parse_nested_parens(paren_string::String)::Vector{Int64} =\n    parse_nested_parens_impl(paren_string)"], ["\"\"\" Filter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring([], \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"bacd\", \"array\"]\"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\n    if length(strings) == 0\n        return []\n    end\n    if length(strings) == 1\n        return strings[1]\n    end\n    if length(strings) == 2\n        return strings[1]\n    end\n    if length(strings) == 3\n        return strings[1]\n    end\n    if length(strings) == 4\n        return strings[1]\n    end\n    if length(strings) == 5\n        return strings[1]\n    end\n    if length(strings) == 6\n        return strings[1]\n    end\n    if length(strings) == 7\n        return strings[1]\n    end\n    if length(strings) == 8\n        return strings[1]\n    end\n    if length(strings) == 9\n        return strings[1]\n    end\n    if length(strings) == 10\n        return strings[1]\n    end\n    if length(strings) == 11\n        return strings[1]\n    end\n    if length(strings) == 12\n        return strings[1]\n    end\n    if length(strings) == 13\n        return strings[1]\n    end\n    if length(strings) == 14\n        return strings[1]\n    end\n    if length(strings) == 15\n        return strings[1]\n    end\n    if length(strings) == 16\n        return strings[1]\n    end\n    if length(strings) == 17\n        return strings[1]\n    end\n    if length(strings) == 18\n        return strings[1]\n    end\n    if length(strings) == 19\n        return strings[1]\n    end\n    if length(strings) == 20"], ["\"\"\" For a given vector of integers, return a tuple consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product([])\n(0, 1)\n>>> sum_product([1, 2, 3, 4])\n(10, 24)\"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} =\n    sum(numbers) * product(numbers)\nend"], ["\"\"\" From a given vector of integers, generate a vector of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n[1, 2, 3, 3, 3, 4, 4]\"\"\"\nfunction rolling_max(numbers::Vector{Int64})::Vector{Int64} =\n    numbers[1:end]\nend"], ["\"\"\" Find the shortest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome(\"\")\n\"\"\n>>> make_palindrome(\"cat\")\n\"catac\"\n>>> make_palindrome(\"cata\")\n\"catac\"\"\"\"\nfunction make_palindrome(string::String)::String = \"\"\nstring = string[1..-1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1] = string[1]\nstring[1"], ["\"\"\" Input are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\"\"\"\nfunction string_xor(a::String, b::String)::String = \"\""], ["\"\"\" Out of vector of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return nothing in case the input vector is empty.\n>>> longest([])\nnothing\n>>> longest([\"a\", \"b\", \"c\"])\n\"a\"\n>>> longest([\"a\", \"bb\", \"ccc\"])\n\"ccc\"\"\"\"\nfunction longest(strings::Vector{String})::Union{String, Nothing}\n    if length(strings) == 0\n        return \"\"\n    elseif length(strings) == 1\n        return strings[1]\n    else\n        return longest(strings[1:end])\n    end\nend"], ["\"\"\" Return a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\n    if a == b\n        return a\n    elseif a < b\n        return greatest_common_divisor(a, b - a)\n    else\n        return greatest_common_divisor(a, b - a + 1)\n    endif\nendfunction"], ["\"\"\" Return vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n[\"a\", \"ab\", \"abc\"]\"\"\"\nfunction all_prefixes(string::String)::Vector{String} =\n    Vector{String}([])"], ["\"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\"\"\"\nfunction string_sequence(n::Int64)::String\n    if n < 0\n        return \"\"\n    else\n        return string_sequence(n-1)\n    end if\nend function"], ["\"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\"\"\"\nfunction count_distinct_characters(string::String)::Int64\n    if string == \"\" then\n        return 0\n    else\n        return 1 + count_distinct_characters(string[1:end])\n    end\nend"], ["\"\"\" Input to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return vector of integers corresponding to how many beats does each\nnot last.\nHere is a legend:\n'o' - whole note, lasts four beats\n'o|' - half note, lasts two beats\n'.|' - quater note, lasts one beat\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\"\"\"\nfunction parse_music(music_string::String)::Vector{Int64}\n    music_string = music_string.trim()\n    music_string = music_string.split(' ')\n    music_string = music_string[1]\n    music_string = music_string[2]\n    music_string = music_string[3]\n    music_string = music_string[4]\n    music_string = music_string[5]\n    music_string = music_string[6]\n    music_string = music_string[7]\n    music_string = music_string[8]\n    music_string = music_string[9]\n    music_string = music_string[10]\n    music_string = music_string[11]\n    music_string = music_string[12]\n    music_string = music_string[13]\n    music_string = music_string[14]\n    music_string = music_string[15]\n    music_string = music_string[16]\n    music_string = music_string[17]\n    music_string = music_string[18]\n    music_string = music_string[19]\n    music_string = music_string[20]\n    music_string = music_string[21]\n    music_string = music_string[22]\n    music_string = music_string[23]\n    music_string = music_string[24]\n    music_string = music_string[25]"], ["\"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\n    if string == substring\n        return 1\n    else\n        return how_many_times(string, substring) + 1\n    end\nend"], ["\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\nValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers(\"three one five\")\n\"one three five\"\"\"\"\nfunction sort_numbers(numbers::String)::String = numbers"], ["\"\"\" From a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n(2.0, 2.2)\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n(2.0, 2.0)\"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64, Float64}\n    return find_closest_elements(numbers, 1.0)\nend"], ["\"\"\" Given vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n[0.0, 0.25, 0.5, 0.75, 1.0]\"\"\"\nfunction rescale_to_unit(numbers::Vector{Float64})::Vector{Float64}\n    res = rescale(numbers)\n    res[1] = res[1] * 1.0 / 1.0\n    res\nend"], ["\"\"\" Filter given vector of any jlthon values only for integers\n>>> filter_integers([\"a\", 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n[1, 2, 3]\"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64} =\n    filter(values, Int64)\nend"], ["\"\"\" Return length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\"\"\"\nfunction strlen(string::String)::Int64 {\n    return string.length()\n}"], ["\"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\"\"\"\nfunction largest_divisor(n::Int64)::Int64 = n\nend function"], ["\"\"\" Return vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n[2, 2, 2]\n>>> factorize(25)\n[5, 5]\n>>> factorize(70)\n[2, 5, 7]\"\"\"\nfunction factorize(n::Int64)::Vector{Int64}\nn = n.to_int64\nfactor = []\nfor i in 1:n\nfactor.append(factorize(i))\nreturn factor\nend function"], ["\"\"\" From a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates([1, 2, 3, 2, 4])\n[1, 3, 4]\"\"\"\nfunction remove_duplicates(numbers::Vector{Int64})::Vector{Int64}\n    if length(numbers) == 1\n        return numbers\n    else\n        return remove_duplicates(numbers[1:])\n    end\nend"], ["\"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\"\"\"\nfunction flip_case(string::String)::String = string.lower()\nendfunction"], ["\"\"\" Concatenate vector of strings into a single string\n>>> concatenate([])\n\"\"\n>>> concatenate([\"a\", \"b\", \"c\"])\n\"abc\"\"\"\"\nfunction concatenate(strings::Vector{String})::String = \"\"\n    for s in strings\n        if isempty(s)\n            return \"\"\n        elseif isempty(s)\n            return \"\"\n        else\n            return concatenate(s)\n        end\n    end\nend"], ["\"\"\" Filter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix([], \"a\")\n[]\n>>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"array\"]\"\"\"\nfunction filter_by_prefix(strings::Vector{String}, prefix::String)::Vector{String}\n    if strings.isempty()\n        return []\n    end\n    if strings.isempty(prefix)\n        return []\n    end\n    return strings.filter(function(s) s == prefix end)\nend"], ["\"\"\"Return only positive numbers in the vector.\n>>> get_positive([-1, 2, -4, 5, 6])\n[2, 5, 6]\n>>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n[5, 3, 2, 3, 9, 123, 1]\"\"\"\nfunction get_positive(l::Vector{Int64})::Vector{Int64} =\n    l.map(i => i > 0 ? i : 0)"], ["\"\"\"Return true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\"\"\"\nfunction is_prime(n::Int64)::Bool = n < 2\nend"], ["\"\"\"This function takes a vector l and returns a vector l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third([1, 2, 3])\n[1, 2, 3]\n>>> sort_third([5, 6, 3, 4, 8, 9, 2])\n[2, 6, 3, 4, 8, 9, 5]\"\"\"\nfunction sort_third(l::Vector{Int64})::Vector{Int64}\nif length(l) == 3\nsort!(l, l[3:end])\nelse sort!(l, l[1:end-1])\nend function sort_third(l::Vector{Int64})"], ["\"\"\"Return sorted unique elements in a vector\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[0, 2, 3, 5, 9, 123]\"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\n    if l.size == 0\n        return []\n    end\n    if l.size == 1\n        return l\n    end\n    if l.size == 2\n        return unique(l[1:end])\n    end\n    if l.size == 3\n        return unique(l[1:end])\n    end\n    if l.size == 4\n        return unique(l[1:end])\n    end\n    if l.size == 5\n        return unique(l[1:end])\n    end\n    if l.size == 6\n        return unique(l[1:end])\n    end\n    if l.size == 7\n        return unique(l[1:end])\n    end\n    if l.size == 8\n        return unique(l[1:end])\n    end\n    if l.size == 9\n        return unique(l[1:end])\n    end\n    if l.size == 10\n        return unique(l[1:end])\n    end\n    if l.size == 11\n        return unique(l[1:end])\n    end\n    if l.size == 12\n        return unique(l[1:end])\n    end\n    if l.size == 13\n        return unique(l[1:end])\n    end\n    if l.size == 14\n        return unique(l[1:end])\n    end\n    if l.size == 15\n        return unique(l[1:end])\n    end\n    if l.size == 16\n        return unique(l[1:end])\n    end\n    if l.size == 17\n        return unique(l[1:end])\n    end\n    if l.size == 18\n        return unique(l[1:end"], ["\"\"\"Return maximum element in the vector.\n>>> max_element([1, 2, 3])\n3\n>>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n123\"\"\"\nfunction max_element(l::Vector{Int64})::Int64 = max(l, 1)\nend"], ["\"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\"\"\"\nfunction fizz_buzz(n::Int64)::Int64 {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    if n == 6 {\n        return 6\n    }\n    if n == 7 {\n        return 7\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 9\n    }\n    if n == 10 {\n        return 10\n    }\n    if n == 11 {\n        return 11\n    }\n    if n == 12 {\n        return 12\n    }\n    if n == 13 {\n        return 13\n    }\n    if n == 14 {\n        return 14\n    }\n    if n == 15 {\n        return 15\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 17\n    }\n    if n == 18 {\n        return 18\n    }\n    if n == 19 {\n        return 19\n    }\n    if n == 20 {\n        return 20\n    }\n    if n == 21 {\n        return 21\n    }\n    if n == 22 {\n        return 22\n    }\n    if n == 23 {\n        return 23\n    }\n    if n == 24 {\n        return 24\n    }\n    if n =="], ["\"\"\"This function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even([1, 2, 3])\n[1, 2, 3]\n>>> sort_even([5, 6, 3, 4])\n[3, 6, 5, 4]\"\"\"\nfunction sort_even(l::Vector{Int64})::Vector{Int64}\nif length(l) == 2\nif l[1] == l[2]\nreturn l\nelseif length(l) == 3\nif l[1] == l[2] && l[3] == l[4]\nreturn sort_even(l[1:3])\nelseif length(l) == 4\nif l[1] == l[2] && l[3] == l[4] && l[5] == l[6]\nreturn sort_even(l[1:5])\nelseif length(l) == 5\nif l[1] == l[2] && l[3] == l[4] && l[5] == l[6] && l[7] == l[8]\nreturn sort_even(l[1:7])\nelseif length(l) == 6\nif l[1] == l[2] && l[3] == l[4] && l[5] == l[6] && l[7] == l[8] && l[9] == l[10]\nreturn sort_even(l[1:9])\nelseif length(l) == 7\nif l[1] == l[2] && l[3] == l[4] && l[5] == l[6] && l[7] == l[8] && l[9] == l[10] && l[11] == l[12]\nreturn sort_even(l[1:12])\nelseif length(l) == 8\nif l[1] == l[2] && l[3] == l[4] && l[5]"], ["\"\"\"prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\"\"\"\nfunction prime_fib(n::Int64)::Int64\n    if n == 1 then\n        return 1\n    else\n        return (n - 1) * (n - 2) * (n - 3) * ... * (n - 1)\n    end\nend"], ["\"\"\"triples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> triples_sum_to_zero([1, 3, 5, 0])\nfalse\n>>> triples_sum_to_zero([1, 3, -2, 1])\ntrue\n>>> triples_sum_to_zero([1, 2, 3, 7])\nfalse\n>>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\ntrue\n>>> triples_sum_to_zero([1])\nfalse\"\"\"\nfunction triples_sum_to_zero(l::Vector{Int64})::Bool\n    if l.size == 0\n        return false\n    end\n    if l.size == 1\n        return true\n    end\n    if l[0] == 0\n        return true\n    end\n    if l[0] == 1\n        return false\n    end\n    if l[0] == 2\n        return false\n    end\n    if l[0] == 3\n        return false\n    end\n    if l[0] == 4\n        return false\n    end\n    if l[0] == 5\n        return false\n    end\n    if l[0] == 6\n        return false\n    end\n    if l[0] == 7\n        return false\n    end\n    if l[0] == 8\n        return false\n    end\n    if l[0] == 9\n        return false\n    end\n    if l[0] == 10\n        return false\n    end\n    if l[0] == 11\n        return false\n    end\n    if l[0] == 12\n        return false\n    end\n    if l[0] == 13\n        return false\n    end\n    if l[0] == 14\n        return false\n    end\n    if l[0] == 15\n        return false\n    end\n    if l[0] == 16\n        return false"], ["\"\"\"Imagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\nThis function outputs the number of such collisions.\"\"\"\nfunction car_race_collision(n::Int64)::Int64\n    n = n - 1\n    while n > 0\n        if n % 2 == 1\n            n = n - 1\n        else\n            n = n + 1\n        end\n        if n > 0\n            if n % 2 == 0\n                n = n - 1\n            else\n                n = n + 1\n            end\n        end\n    end\nend"], ["\"\"\"Return vector with elements incremented by 1.\n>>> incr_list([1, 2, 3])\n[2, 3, 4]\n>>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4, 4, 10, 1, 124]\"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\n    if l.size == 0\n        return []\n    elseif l.size == 1\n        return l[1]\n    else\n        return [l[1]]\n    end\nend"], ["\"\"\"pairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero([1, 3, 5, 0])\nfalse\n>>> pairs_sum_to_zero([1, 3, -2, 1])\nfalse\n>>> pairs_sum_to_zero([1, 2, 3, 7])\nfalse\n>>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\ntrue\n>>> pairs_sum_to_zero([1])\nfalse\"\"\"\nfunction pairs_sum_to_zero(l::Vector{Int64})::Bool\n    if l.size == 1\n        return true\n    elseif l.size == 2\n        return pairs_sum_to_zero(l[1:2])\n    else\n        return false\n    end\nend"], ["\"\"\"Change numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\"\"\"\nfunction change_base(x::Int64, base::Int64)::String{Int64}\nif x < base\nreturn x\nelseif x > base\nreturn x * base\nelse\nreturn \"\"\nend function change_base"], ["\"\"\"Given length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\"\"\"\nfunction triangle_area(a::Int64, h::Int64)::Float64\n    if a == 0\n        return 0\n    endif\n    if h == 0\n        return 0\n    endif\n    if a == 1\n        return 1\n    endif\n    if h == 1\n        return 1\n    endif\n    if a == 2\n        return 2\n    endif\n    if h == 2\n        return 2\n    endif\n    return 0\nendfunction"], ["\"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\"\"\"\nfunction fib4(n::Int64)::Int64\n    if n == 0\n        return 0\n    end if\n    if n == 1\n        return 0\n    end if\n    if n == 2\n        return 2\n    end if\n    if n == 3\n        return 0\n    end if\n    if n == 4\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n    end if\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nend function fib4"], ["\"\"\"Return median of elements in the vector l.\n>>> median([3, 1, 2, 4, 5])\n3\n>>> median([-10, 4, 6, 1000, 10, 20])\n15.0\"\"\"\nfunction median(l::Vector{Int64})::Float64\n    if length(l) == 1\n        return l[0]\n    elseif length(l) == 2\n        return median(l[1:2])\n    else\n        return median(l[1:2:end])\n    end\nend"], ["\"\"\"Checks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\"\"\"\nfunction is_palindrome(text::String)::Bool\n    if length(text) == 0\n        return false\n    else\n        if text[1] == text[length(text)-1]\n            return true\n        else\n            return is_palindrome(text[1:end])\n        end\n    end\nend"], ["\"\"\"Return 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\"\"\"\nfunction modp(n::Int64, p::Int64)::Int64\n    if n == 0\n        return 0\n    endif\n    if n == 1\n        return p\n    endif\n    if n == 2\n        return modp(n-1, p)\n    endif\n    if n == 3\n        return modp(n-2, p)\n    endif\n    if n == 4\n        return modp(n-3, p)\n    endif\n    if n == 5\n        return modp(n-4, p)\n    endif\n    if n == 6\n        return modp(n-5, p)\n    endif\n    if n == 7\n        return modp(n-6, p)\n    endif\n    if n == 8\n        return modp(n-7, p)\n    endif\n    if n == 9\n        return modp(n-8, p)\n    endif\n    if n == 10\n        return modp(n-9, p)\n    endif\n    if n == 11\n        return modp(n-10, p)\n    endif\n    if n == 12\n        return modp(n-11, p)\n    endif\n    if n == 13\n        return modp(n-12, p)\n    endif\n    if n == 14\n        return modp(n-13, p)\n    endif\n    if n == 15\n        return modp(n-14, p)\n    endif\n    if n == 16\n        return modp(n-15, p)\n    endif\n    if n == "], ["\"\"\"remove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\"\"\"\nfunction remove_vowels(text::String)::String\n    text = text.trim()\n    if text.length() == 0\n        return \"\"\n    else\n        return remove_vowels(text[1:end])\n    end\nend"], ["\"\"\"Return true if all numbers in the vector l are below threshold t.\n>>> below_threshold([1, 2, 4, 10], 100)\ntrue\n>>> below_threshold([1, 20, 4, 10], 5)\nfalse\"\"\"\nfunction below_threshold(l::Vector{Int64}, t::Int64)::Bool\n    if t < l[1]\n        return false\n    else\n        return true\n    end\nend"], ["\"\"\"Add two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\"\"\"\nfunction add(x::Int64, y::Int64)::Int64\n    return x + y\nend"], ["\"\"\"Check if two words have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\"\"\"\nfunction same_chars(s0::String, s1::String)::Bool = s0 == s1\nend"], ["\"\"\"Return n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\"\"\"\nfunction fib(n::Int64)::Int64 = n"], ["\"\"\" brackets is a string of \"<\" and \">\".\nreturn true if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\"\"\"\nfunction correct_bracketing(brackets::String)::Bool {\n    for bracket in brackets {\n        if bracket == \">\" {\n            return true\n        }\n        if bracket == \"<\" {\n            return true\n        }\n        if bracket == \">\" {\n            return false\n        }\n        if bracket == \"<\" {\n            return false\n        }\n    }\n    return false\n}"], ["\"\"\"Return true is vector elements are monotonically increasing or decreasing.\n>>> monotonic([1, 2, 4, 20])\ntrue\n>>> monotonic([1, 20, 4, 10])\nfalse\n>>> monotonic([4, 1, 0, -10])\ntrue\"\"\"\nfunction monotonic(l::Vector{Int64})::Bool = true"], ["\"\"\"Return sorted unique common elements for two vectors.\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n[1, 5, 653]\n>>> common([5, 3, 2, 8], [3, 2])\n[2, 3]\"\"\"\nfunction common(l1::Vector{Int64}, l2::Vector{Int64})::Vector{Int64} =\n    l1.map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1)\n    .map(i->i+1"], ["\"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\"\"\"\nfunction largest_prime_factor(n::Int64)::Int64\n    if n == 1 then return 1\n    if n == 2 then return 2\n    if n == 3 then return 3\n    if n == 4 then return 4\n    if n == 5 then return 5\n    if n == 6 then return 6\n    if n == 7 then return 7\n    if n == 8 then return 8\n    if n == 9 then return 9\n    if n == 10 then return 10\n    if n == 11 then return 11\n    if n == 12 then return 12\n    if n == 13 then return 13\n    if n == 14 then return 14\n    if n == 15 then return 15\n    if n == 16 then return 16\n    if n == 17 then return 17\n    if n == 18 then return 18\n    if n == 19 then return 19\n    if n == 20 then return 20\n    if n == 21 then return 21\n    if n == 22 then return 22\n    if n == 23 then return 23\n    if n == 24 then return 24\n    if n == 25 then return 25\n    if n == 26 then return 26\n    if n == 27 then return 27\n    if n == 28 then return 28\n    if n == 29 then return 29\n    if n == 30 then return 30\n    if n == 31 then return 31\n    if n == 32 then return 32\n    if n == 33 then return 33\n    if n == 34 then return 34\n    if n == 35 then return 35"], ["\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\"\"\"\nfunction sum_to_n(n::Int64)::Int64 = n\nend"], ["\"\"\" brackets is a string of \"(\" and \")\".\nreturn true if every opening bracket has a corresponding closing bracket.\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\"\"\"\nfunction correct_bracketing(brackets::String)::Bool\n    if brackets == \"\"\n        return false\n    else\n        for bracket in brackets\n            if bracket == \"\"\n                return false\n            else\n                if bracket == brackets[1]\n                    return true\n                else\n                    bracket_length = bracket.length\n                    bracket_length = bracket_length - 1\n                    if bracket_length == 0\n                        return true\n                    else\n                        bracket_length = bracket_length - 1\n                        bracket_length = bracket_length - 1\n                        if bracket_length == 0\n                            return true\n                        else\n                            bracket_length = bracket_length - 1\n                            bracket_length = bracket_length - 1\n                            if bracket_length == 0\n                                return true\n                            else\n                                bracket_length = bracket_length - 1\n                                bracket_length = bracket_length - 1\n                                if bracket_length == 0\n                                    return true\n                                else\n                                    bracket_length = bracket_length - 1\n                                    bracket_length = bracket_length - 1\n                                    if bracket_length == 0\n                                        return true\n                                    else\n                                        bracket_length = bracket_length - 1\n                                        bracket_length = bracket_length - 1\n                                        if bracket_length == 0\n                                            return true\n                                        else\n                                            bracket_length = bracket_length - 1\n                                            bracket_length = bracket_length - 1\n                                            if bracket_length == 0\n                                                return true\n                                           "], ["\"\"\" xs represent coefficients of a polynomial.\nxs[0] + xs[1] * x + xs[2] * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative([3, 1, 2, 4, 5])\n[1, 4, 12, 20]\n>>> derivative([1, 2, 3])\n[2, 6]\"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\n    return xs[0] + xs[1] * x + xs[2] * x^2 + ....\nend"], ["\"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\"\"\"\nfunction fibfib(n::Int64)::Int64 = 0"], ["\"\"\"Write a function vowels_count which takes a string representing\na word as input and returns the number of vowels in the string.\nVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\nvowel, but only when it is at the end of the given word.\nExample:\n>>> vowels_count(\"abcde\")\n2\n>>> vowels_count(\"ACEDY\")\n3\"\"\"\nfunction vowels_count(s::String)::Int64\n    if s == \"\"\n        return 0\n    else\n        vowels = split(s, \" \")\n        if length(vowels) == 1\n            return 1\n        else\n            return vowels.length\n    end\nend"], ["\"\"\"Circular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\"\"\"\nfunction circular_shift(x::Int64, shift::Int64)::String{Int64}\nif shift > x\nreturn x\nelseif shift == x\nreturn circular_shift(x, shift - 1)\nendfunction"], ["\"\"\"Task\nWrite a function that takes a string as input and returns the sum of the upper characters only'\nASCII codes.\nExamples:\n>>> digitSum(\"\")\n0\n>>> digitSum(\"abAB\")\n131\n>>> digitSum(\"abcCd\")\n67\n>>> digitSum(\"helloE\")\n69\n>>> digitSum(\"woArBld\")\n131\n>>> digitSum(\"aAaaaXa\")\n153\"\"\"\nfunction digitSum(s::String)::Int64 = 0"], ["\"\"\"In this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor examble:\n>>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n8\n>>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n2\n>>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n95\n>>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n19\"\"\"\nfunction fruit_distribution(s::String, n::Int64)::Int64\n    if s == \"\" then\n        return 0\n    end if\n    if n == 0 then\n        return 0\n    end if\n    if s == \"0\" then\n        return 0\n    end if\n    if n == 1 then\n        return 1\n    end if\n    if s == \"1\" then\n        return 1\n    end if\n    if n == 2 then\n        return 2\n    end if\n    if s == \"2\" then\n        return 2\n    end if\n    if n == 3 then\n        return 3\n    end if\n    if s == \"3\" then\n        return 3\n    end if\n    if n == 4 then\n        return 4\n    end if\n    if s == \"4\" then\n        return 4\n    end if\n    if n == 5 then\n        return 5\n    end if\n    if s == \"5\" then\n        return 5\n    end if\n    if n == 6 then\n        return 6\n    end if\n    if s == \"6\" then\n        return 6\n    end if\n    if n == 7 then\n        return 7\n    end if\n    if s == \"7\" then\n        return 7\n    end if"], ["\"\"\"\"Given a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\nThe plucked node should be returned in a vector, [ smalest_value, its index ],\nIf there are no even values or the given vector is empty, return [].\nExample 1:\n>>> pluck([4, 2, 3])\n[2, 1]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\nExample 2:\n>>> pluck([1, 2, 3])\n[2, 1]\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\nExample 3:\n>>> pluck([])\n[]\nExample 4:\n>>> pluck([5, 0, 3, 0, 4, 2])\n[0, 1]\nExplanation: 0 is the smallest value, but  there are two zeros,\n             so we will choose the first zero, which has the smallest index.\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\n    if arr.length == 0\n        return []\n    elseif arr.length == 1\n        return arr[0]\n    else\n        return pluck(arr[1:arr.length-1])\n    end\nend"], ["\"\"\"You are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n>>> search([4, 1, 2, 2, 3, 1])\n2\n>>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n3\n>>> search([5, 5, 4, 4, 4])\n-1\"\"\"\nfunction search(lst::Vector{Int64})::Int64{Int64}\n    if lst.empty()\n        return -1\n    end\n    if lst.size() == 0\n        return -1\n    end\n    if lst.size() == 1\n        return lst[0]\n    end\n    for i in lst\n        if i == lst[0]\n            return i\n        end\n    end\n    return -1\nend\nend"], ["\"\"\"Given vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\nExamples:\n>>> strange_sort_list([1, 2, 3, 4])\n[1, 4, 2, 3]\n>>> strange_sort_list([5, 5, 5, 5])\n[5, 5, 5, 5]\n>>> strange_sort_list([])\n[]\"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\n    lst = lst[1:]\n    lst = lst[1]\n    lst = lst[2:]\n    lst = lst[2]\n    lst = lst[3:]\n    lst = lst[3]\n    lst = lst[4:]\n    lst = lst[4]\n    lst = lst[5:]\n    lst = lst[5]\n    lst = lst[6:]\n    lst = lst[6]\n    lst = lst[7:]\n    lst = lst[7]\n    lst = lst[8:]\n    lst = lst[8]\n    lst = lst[9:]\n    lst = lst[9]\n    lst = lst[10:]\n    lst = lst[10]\n    lst = lst[11:]\n    lst = lst[11]\n    lst = lst[12:]\n    lst = lst[12]\n    lst = lst[13:]\n    lst = lst[13]\n    lst = lst[14:]\n    lst = lst[14]\n    lst = lst[15:]\n    lst = lst[15]\n    lst = lst[16:]\n    lst = lst[16]\n    lst = lst[17:]\n    lst = lst[17]\n    lst = lst[18:]\n    lst = lst[18]\n    lst = lst[19:]\n    lst = lst[19]\n    lst = lst[20:]\n    lst = lst[20]\n    lst = lst[21:]\n    lst = lst[21]\n    lst"], ["\"\"\"Given the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\n>>> triangle_area(3, 4, 5)\n6.0\n>>> triangle_area(1, 2, 10)\n-1\"\"\"\nfunction triangle_area(a::Int64, b::Int64, c::Int64)::Float64\n    if a < b < c\n        return 0.0\n    endif\n    return a * b * c\nendfunction"], ["\"\"\"Write a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\nExample:\n>>> will_it_fly([1, 2], 5)\nfalse\n# 1+2 is less than the maximum possible weight, but it's unbalanced.\n>>> will_it_fly([3, 2, 3], 1)\nfalse\n# it's balanced, but 3+2+3 is more than the maximum possible weight.\n>>> will_it_fly([3, 2, 3], 9)\ntrue\n# 3+2+3 is less than the maximum possible weight, and it's balanced.\n>>> will_it_fly([3], 5)\ntrue\n# 3 is less than the maximum possible weight, and it's balanced.\"\"\"\nfunction will_it_fly(q::Vector{Int64}, w::Int64)::Bool\n    if q.size == 0\n        return false\n    elseif q.size == 1\n        return true\n    else\n        return will_it_fly(q[1:], w)\n    end\nend"], ["\"\"\"Given a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\nFor example:\n>>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n4\n>>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n1\n>>> smallest_change([1, 2, 3, 2, 1])\n0\"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64\n    smallest_change_arr = arr.map{i->i}\n    smallest_change_arr.sort!()\n    smallest_change_arr.reverse()\n    smallest_change_arr.min()\nend"], ["\"\"\"Write a function that accepts two vectors of strings and returns the vector that has \ntotal number of chars in the all strings of the vector less than the other vector.\nif the two vectors have the same number of chars, return the first vector.\nExamples\n>>> total_match([], [])\n[]\n>>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n[\"hI\", \"Hi\"]\n>>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n[\"hi\", \"admin\"]\n>>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n[\"hI\", \"hi\", \"hi\"]\n>>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n[\"4\"]\"\"\"\nfunction total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} =\n    if (size(lst1) == size(lst2))\n        return lst1\n    elseif (size(lst1) < size(lst2))\n        return lst2\n    else\n        return lst1\nend"], ["\"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\n>>> is_multiply_prime(30)\ntrue\n30 = 2 * 3 * 5\"\"\"\nfunction is_multiply_prime(a::Int64)::Bool = (a < 100)\nend"], ["\"\"\"Your task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\n>>> is_simple_power(1, 4)\ntrue\n>>> is_simple_power(2, 2)\ntrue\n>>> is_simple_power(8, 2)\ntrue\n>>> is_simple_power(3, 2)\nfalse\n>>> is_simple_power(3, 1)\nfalse\n>>> is_simple_power(5, 3)\nfalse\"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool\n    if x == 0\n        return false\n    elseif n == 0\n        return true\n    elseif n == 1\n        return is_simple_power(x, 1)\n    elseif n == 2\n        return is_simple_power(x, 2)\n    elseif n == 3\n        return is_simple_power(x, 3)\n    elseif n == 4\n        return is_simple_power(x, 4)\n    elseif n == 5\n        return is_simple_power(x, 5)\n    elseif n == 6\n        return is_simple_power(x, 6)\n    elseif n == 7\n        return is_simple_power(x, 7)\n    elseif n == 8\n        return is_simple_power(x, 8)\n    elseif n == 9\n        return is_simple_power(x, 9)\n    elseif n == 10\n        return is_simple_power(x, 10)\n    elseif n == 11\n        return is_simple_power(x, 11)\n    elseif n == 12\n        return is_simple_power(x, 12)\n    elseif n == 13\n        return is_simple_power(x, 13)\n    elseif n == 14\n        return is_simple_power(x, 14)\n    elseif"], ["\"\"\"Write a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\n>>> iscube(1)\ntrue\n>>> iscube(2)\nfalse\n>>> iscube(-1)\ntrue\n>>> iscube(64)\ntrue\n>>> iscube(0)\ntrue\n>>> iscube(180)\nfalse\"\"\"\nfunction iscube(a::Int64)::Bool\n    if a == 0\n        return false\n    else\n        return true\n    end\nend"], ["\"\"\"You have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\n>>> hex_key(\"AB\")\n1\n>>> hex_key(\"1077E\")\n2\n>>> hex_key(\"ABED1A33\")\n4\n>>> hex_key(\"123456789ABCDEF0\")\n6\n>>> hex_key(\"2020\")\n2\"\"\"\nfunction hex_key(num::String)::Int64\n    if num == \"\"\n        return 0\n    else\n        return 1 + hex_key(num[1:end])\n    end\nend"], ["\"\"\"You will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\nThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\nExamples:\n>>> decimal_to_binary(15)\n\"db1111db\"\n>>> decimal_to_binary(32)\n\"db100000db\"\"\"\"\nfunction decimal_to_binary(decimal::Int64)::String\ndecimal_to_binary(decimal) = \"db\" * (decimal_to_binary(decimal) == \"db\")\nend function"], ["\"\"\"You are given a string s.\nYour task is to check if the string is hapjl or not.\nA string is hapjl if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\n>>> is_happy(\"a\")\nfalse\n>>> is_happy(\"aa\")\nfalse\n>>> is_happy(\"abcd\")\ntrue\n>>> is_happy(\"aabb\")\nfalse\n>>> is_happy(\"adb\")\ntrue\n>>> is_happy(\"xyy\")\nfalse\"\"\"\nfunction is_happy(s::String)::Bool\n    length(s) >= 3 &&\n        length(s) == 3 &&\n        for i in 1:length(s)\n            if s[i] != s[i+1] &&\n                s[i] != s[i+2] &&\n                s[i] != s[i+3]\n                return false\n        end\n    end\n    return true\nend"], ["\"\"\"It is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a vector of GPAs for some students and you have to write \na function that can output a vector of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\nExample:\n>>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\"\"\"\nfunction numerical_letter_grade(grades::Vector{Float64})::Vector{String}\n    return Vector{String}(grades)\nend"], ["\"\"\"Write a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\n>>> prime_length(\"Hello\")\ntrue\n>>> prime_length(\"abcdcba\")\ntrue\n>>> prime_length(\"kittens\")\ntrue\n>>> prime_length(\"orange\")\nfalse\"\"\"\nfunction prime_length(string::String)::Bool\n    if string == \"\" then\n        return true\n    else\n        return string.length(string) == 1\n    end\nend"], ["\"\"\"Given a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\"\"\"\nfunction starts_one_ends(n::Int64)::Int64\n    if n == 0\n        return 0\n    elseif n == 1\n        return 1\n    elseif n == 2\n        return 2\n    elseif n == 3\n        return 3\n    elseif n == 4\n        return 4\n    elseif n == 5\n        return 5\n    elseif n == 6\n        return 6\n    elseif n == 7\n        return 7\n    elseif n == 8\n        return 8\n    elseif n == 9\n        return 9\n    elseif n == 10\n        return 10\n    elseif n == 11\n        return 11\n    elseif n == 12\n        return 12\n    elseif n == 13\n        return 13\n    elseif n == 14\n        return 14\n    elseif n == 15\n        return 15\n    elseif n == 16\n        return 16\n    elseif n == 17\n        return 17\n    elseif n == 18\n        return 18\n    elseif n == 19\n        return 19\n    elseif n == 20\n        return 20\n    elseif n == 21\n        return 21\n    elseif n == 22\n        return 22\n    elseif n == 23\n        return 23\n    elseif n == 24\n        return 24\n    elseif n == 25\n        return 25\n    elseif n == 26\n        return 26\n    elseif n == 27\n        return 27\n    elseif n == 28\n        return 28\n    elseif n == 29\n        return 29\n    elseif n == 30\n        return 30\n    elseif n == 31\n        return 31\n    else"], ["\"\"\"Given a positive integer N, return the total sum of its digits in binary.\nExample\n>>> solve(1000)\n\"1\"\n>>> solve(150)\n\"110\"\n>>> solve(147)\n\"1100\"\nVariables:\n    @N integer\n         Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n     a string of binary number\"\"\"\nfunction solve(N::Int64)::String{Int64}\n    if N == 0\n        return \"0\"\n    elseif N == 1\n        return \"1\"\n    elseif N == 2\n        return \"100\"\n    elseif N == 3\n        return \"1000\"\n    elseif N == 4\n        return \"10000\"\n    elseif N == 5\n        return \"100000\"\n    elseif N == 6\n        return \"1000000\"\n    elseif N == 7\n        return \"10000000\"\n    elseif N == 8\n        return \"100000000\"\n    elseif N == 9\n        return \"1000000000\"\n    elseif N == 10\n        return \"10000000000\"\n    elseif N == 11\n        return \"100000000000\"\n    elseif N == 12\n        return \"1000000000000\"\n    elseif N == 13\n        return \"10000000000000\"\n    elseif N == 14\n        return \"100000000000000\"\n    elseif N == 15\n        return \"1000000000000000\"\n    elseif N == 16\n        return \"10000000000000000\"\n    elseif N == 17"], ["\"\"\"Given a non-empty vector of integers lst. add the even elements that are at odd indices..\nExamples:\n>>> add([4, 2, 6, 7])\n2\"\"\"\nfunction add(lst::Vector{Int64})::Int64\n    if (length(lst) == 0)\n        return 0\n    elseif (length(lst) == 1)\n        return 1\n    else\n        return add(lst[1:]) + add(lst[2:])\n    end\nend"], ["\"\"\"Write a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\nFor example:\n>>> anti_shuffle(\"Hi\")\n\"Hi\"\n>>> anti_shuffle(\"hello\")\n\"ehllo\"\n>>> anti_shuffle(\"Hello World!!!\")\n\"Hello !!!Wdlor\"\"\"\"\nfunction anti_shuffle(s::String)::String\ns = s[1:end]\ns[1] = s[1] + \"_\"\ns[end] = s[end] + \"_\"\nreturn s"], ["\"\"\"You are given a 2 dimensional data, as a nested vectors,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the vector,\nand return vector of tuples, [(x1, y1), (x2, y2) ...] such that\neach tuple is a coordinate - (row, columns), starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\nExamples:\n>>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n[(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n>>> get_row([], 1)\n[]\n>>> get_row([[], [1], [1, 2, 3]], 3)\n[(2, 2)]\"\"\"\nfunction get_row(lst::Vector{Vector{Int64}}, x::Int64)::Vector{Tuple{Int64, Int64}}\n    if x < 0\n        return []\n    elseif x < lst.size\n        return get_row(lst, x + 1)\n    else\n        return get_row(lst, x)\n    end\nend"], ["\"\"\"Given a vector of non-negative integers, return a cojl of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\nNote:\n* don't change the given vector.\nExamples:\n>>> sort_array([])\n[]\n>>> sort_array([5])\n[5]\n>>> sort_array([2, 4, 3, 0, 1, 5])\n[0, 1, 2, 3, 4, 5]\n>>> sort_array([2, 4, 3, 0, 1, 5, 6])\n[6, 5, 4, 3, 2, 1, 0]\"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64}\n    if length(array) == 0\n        return array\n    elseif length(array) == 1\n        return array[1]\n    elseif length(array) == 2\n        return array[1]\n    elseif length(array) == 3\n        return array[1]\n    elseif length(array) == 4\n        return array[1]\n    elseif length(array) == 5\n        return array[1]\n    elseif length(array) == 6\n        return array[1]\n    elseif length(array) == 7\n        return array[1]\n    elseif length(array) == 8\n        return array[1]\n    elseif length(array) == 9\n        return array[1]\n    elseif length(array) == 10\n        return array[1]\n    elseif length(array) == 11\n        return array[1]\n    elseif length(array) == 12\n        return array[1]\n    elseif length(array) == 13\n        return array[1]\n    elseif length(array) == 14\n        return array[1]\n    elseif length(array) == 15\n       "], ["\"\"\"Create a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\n>>> encrypt(\"hi\")\n\"lm\"\n>>> encrypt(\"asdfghjkl\")\n\"ewhjklnop\"\n>>> encrypt(\"gf\")\n\"kj\"\n>>> encrypt(\"et\")\n\"ix\"\"\"\"\nfunction encrypt(s::String)::String\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n    alphabet = alphabet[2:end]\n"], ["\"\"\"You are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn nothing if there is no such element.\n>>> next_smallest([1, 2, 3, 4, 5])\n2\n>>> next_smallest([5, 1, 4, 3, 2])\n2\n>>> next_smallest([])\nnothing\n>>> next_smallest([1, 1])\nnothing\"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64, Nothing}\n    if length(lst) == 0\n        Nothing\n    else\n        return lst[1]\n    end\nend"], ["\"\"\"You'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\"\"\"\nfunction is_bored(S::String)::Int64 = 0"], ["\"\"\"Create a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\nExamples\n>>> any_int(5, 2, 7)\ntrue\n>>> any_int(3, 2, 2)\nfalse\n>>> any_int(3, -2, 1)\ntrue\n>>> any_int(3.6, -2.2, 2)\nfalse\"\"\"\nfunction any_int(x::Float64, y::Float64, z::Float64)::Bool\n    if x == y && x == z\n        return true\n    else\n        return false\n    end\nend"], ["\"\"\"Write a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \nExamples:\n>>> encode(\"test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n\"tHKS KS C MGSSCGG\"\"\"\"\nfunction encode(message::String)::String\n    v = \"\"\n    for i in 1:length(message)\n        if message[i] == \"a\"\n            v = v + \"A\"\n        elseif message[i] == \"e\"\n            v = v + \"E\"\n        elseif message[i] == \"i\"\n            v = v + \"I\"\n        elseif message[i] == \"o\"\n            v = v + \"O\"\n        elseif message[i] == \"u\"\n            v = v + \"U\"\n        elseif message[i] == \"a\"\n            v = v + \"A\"\n        elseif message[i] == \"e\"\n            v = v + \"E\"\n        elseif message[i] == \"i\"\n            v = v + \"I\"\n        elseif message[i] == \"o\"\n            v = v + \"O\"\n        elseif message[i] == \"u\"\n            v = v + \"U\"\n        else\n            v = v + message[i]\n    end\n    return v\nend"], ["\"\"\"You are given a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\nExamples:\n>>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n10\n>>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n25\n>>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n13\n>>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n11\n>>> skjkasdkd([0, 81, 12, 3, 1, 21])\n3\n>>> skjkasdkd([0, 8, 1, 2, 1, 7])\n7\"\"\"\nfunction skjkasdkd(lst::Vector{Int64})::Int64 =\n    if (lst == [])\n        return 0\n    elseif (lst == [1])\n        return 1\n    elseif (lst == [0, 1])\n        return 1 + skjkasdkd(lst[1:])\n    elseif (lst == [0, 1, 2])\n        return 1 + skjkasdkd(lst[1:]) + skjkasdkd(lst[2:])\n    elseif"], ["\"\"\"Given a dictionary, return true if all keys are strings in lower \ncase or all keys are strings in upper case, else return false.\nThe function should return false is the given dictionary is empty.\nExamples:\n>>> check_dict_case(Dict(\"a\" => \"apple\", \"b\" => \"banana\"))\ntrue\n>>> check_dict_case(Dict(\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"))\nfalse\n>>> check_dict_case(Dict(\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"))\nfalse\n>>> check_dict_case(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"))\nfalse\n>>> check_dict_case(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"))\ntrue\"\"\"\nfunction check_dict_case(dict::Dict{String, String}>)::Bool\n    if !haskey(dict, \"Name\") || !haskey(dict, \"Age\") || !haskey(dict, \"City\")\n        return false\n    end\n    if !haskey(dict, \"State\") || !haskey(dict, \"Zip\")\n        return false\n    end\n    if !haskey(dict, \"State\") && !haskey(dict, \"Zip\")\n        return false\n    end\n    if !haskey(dict, \"State\") && haskey(dict, \"Zip\")\n        return false\n    end\n    if !haskey(dict, \"State\") && !haskey(dict, \"Zip\")\n        return false\n    end\n    if !haskey(dict, \"State\") && haskey(dict, \"Zip\")\n        return false\n    end\n    if !haskey(dict, \"State\") && !haskey(dict, \"Zip\")\n        return false\n    end\n    if !haskey(dict, \"State\") && haskey(dict, \"Zip\")\n        return false\n    end\n    if !haskey(dict, \"State\") && !haskey(dict, \"Zip\")\n        return false\n    end\n    if !haskey(dict, \"State\")"], ["\"\"\"Implement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\n>>> count_up_to(5)\n[2, 3]\n>>> count_up_to(11)\n[2, 3, 5, 7]\n>>> count_up_to(0)\n[]\n>>> count_up_to(20)\n[2, 3, 5, 7, 11, 13, 17, 19]\n>>> count_up_to(1)\n[]\n>>> count_up_to(18)\n[2, 3, 5, 7, 11, 13, 17]\"\"\"\nfunction count_up_to(n::Int64)::Vector{Int64}\n    if n < 2 then\n        return []\n    end\n    if n < 3 then\n        return []\n    end\n    if n < 4 then\n        return []\n    end\n    if n < 5 then\n        return []\n    end\n    if n < 6 then\n        return []\n    end\n    if n < 7 then\n        return []\n    end\n    if n < 8 then\n        return []\n    end\n    if n < 9 then\n        return []\n    end\n    if n < 10 then\n        return []\n    end\n    if n < 11 then\n        return []\n    end\n    if n < 12 then\n        return []\n    end\n    if n < 13 then\n        return []\n    end\n    if n < 14 then\n        return []\n    end\n    if n < 15 then\n        return []\n    end\n    if n < 16 then\n        return []\n    end\n    if n < 17 then\n        return []\n    end\n    if n < 18 then\n        return []\n    end\n    if n < 19 then\n        return []\n    end\n    if n < 20 then\n        return []\n    end\n    if n < 21 then"], ["\"\"\"Complete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\n>>> multiply(148, 412)\n16\n>>> multiply(19, 28)\n72\n>>> multiply(2020, 1851)\n0\n>>> multiply(14, -15)\n20\"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\n    if a < b\n        return a\n    else\n        return b\n    end\nend"], ["\"\"\"Given a string s, count the number of uppercase vowels in even indices.\nFor example:\n>>> count_upper(\"aBCdEf\")\n1\n>>> count_upper(\"abcdefg\")\n0\n>>> count_upper(\"dBBE\")\n0\"\"\"\nfunction count_upper(s::String)::Int64 = 0"], ["\"\"\"Create a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\"\"\"\nfunction closest_integer(value::String)::Int64 =\n    if value == \"\"\n        return 0\n    elseif value == \"0\"\n        return 0\n    else\n        return closest_integer(value.split(\".\"))\nend"], ["\"\"\"Given a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a vector, where element at index\ni represents the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\n[3, 5, 7]\"\"\"\nfunction make_a_pile(n::Int64)::Vector{Int64}\n    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 2]\n    elseif n == 3\n        return [1, 2, 3]\n    elseif n == 4\n        return [1, 2, 3, 4]\n    elseif n == 5\n        return [1, 2, 3, 4, 5]\n    elseif n == 6\n        return [1, 2, 3, 4, 5, 6]\n    elseif n == 7\n        return [1, 2, 3, 4, 5, 6, 7]\n    elseif n == 8\n        return [1, 2, 3, 4, 5, 6, 7, 8]\n    elseif n == 9\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    elseif n == 10\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    elseif n == 11\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    elseif n == 12\n        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10"], ["\"\"\"You will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\nFor example:\n>>> words_string(\"Hi, my name is John\")\n[\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n>>> words_string(\"One, two, three, four, five, six\")\n[\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\"\"\"\nfunction words_string(s::String)::Vector{String} = s.split(\" \")"], ["\"\"\"This function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\nFor example:\n>>> choose_num(12, 15)\n14\n>>> choose_num(13, 12)\n-1\"\"\"\nfunction choose_num(x::Int64, y::Int64)::Int64\n    if x == y\n        return x\n    else\n        return choose_num(x, y - 1)\n    end\nend"], ["\"\"\"You are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer and convert that to binary.\nIf n is greater than m, return -1.\nExample:\n>>> rounded_avg(1, 5)\n\"0b11\"\n>>> rounded_avg(7, 5)\n-1\n>>> rounded_avg(10, 20)\n\"0b1111\"\n>>> rounded_avg(20, 33)\n\"0b11010\"\"\"\"\nfunction rounded_avg(n::Int64, m::Int64)::Union{String, Int64}\n    if n > m\n        return -1\n    endif\n    return binary(n)\nendfunction"], ["\"\"\"Given a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\nNote: Returned vector should be sorted in increasing order.\nFor example:\n>>> unique_digits([15, 33, 1422, 1])\n[1, 15, 33]\n>>> unique_digits([152, 323, 1422, 10])\n[]\"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64}\n    return sort(x, by=function(y) y % 2 == 0)\nend"], ["\"\"\"Given a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nFor example:\n>>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n[\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  If the vector is empty, return an empty vector:\n>>> by_length([])\n[]\n  If the vector has any strange number ignore it:\n>>> by_length([1, -1, 55])\n[\"One\"]\"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\n    if arr.empty?\n        return []\n    elseif arr.size == 1\n        return arr[1]\n    else\n        return by_length(arr[1:end])\n    end\nend"], ["\"\"\" Implement the function f that takes n as a parameter,\nand returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\n>>> f(5)\n[1, 2, 6, 24, 15]\"\"\"\nfunction f(n::Int64)::Vector{Int64} = Vector{Int64}(n)"], ["\"\"\"Given a positive integer n, return a tuple that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\nExample 1:\n>>> even_odd_palindrome(3)\n(1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\nExample 2:\n>>> even_odd_palindrome(12)\n(4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\nNote:\n    1. 1 <= n <= 10^3\n    2. returned tuple has the number of even and odd integer palindromes respectively.\"\"\"\nfunction even_odd_palindrome(n::Int64)::Tuple{Int64, Int64} =\n    (\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),\n        (n, n),"], ["\"\"\"Write a function count_nums which takes a vector of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums([])\n0\n>>> count_nums([-1, 11, -11])\n1\n>>> count_nums([1, 1, 2])\n3\"\"\"\nfunction count_nums(arr::Vector{Int64})::Int64\n    if arr.size == 0\n        return 0\n    end\n    if arr.size == 1\n        return 1\n    end\n    if arr.size == 2\n        return 2\n    end\n    if arr.size == 3\n        return 3\n    end\n    if arr.size == 4\n        return 4\n    end\n    if arr.size == 5\n        return 5\n    end\n    if arr.size == 6\n        return 6\n    end\n    if arr.size == 7\n        return 7\n    end\n    if arr.size == 8\n        return 8\n    end\n    if arr.size == 9\n        return 9\n    end\n    if arr.size == 10\n        return 10\n    end\n    if arr.size == 11\n        return 11\n    end\n    if arr.size == 12\n        return 12\n    end\n    if arr.size == 13\n        return 13\n    end\n    if arr.size == 14\n        return 14\n    end\n    if arr.size == 15\n        return 15\n    end\n    if arr.size == 16\n        return 16\n    end\n    if arr.size == 17\n        return 17\n    end\n    if arr.size == 18\n        return 18\n    end\n    if arr.size == 19\n        return 19\n    end\n    if arr.size == 20\n"], ["\"\"\"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the vector will be randomly ordered. Your task is to determine if\nit is possible to get a vector sorted in non-decreasing order by performing \nthe following operation on the given vector:\n    You are allowed to perform right shift operation any number of times.\nOne right shift operation means shifting all elements of the vector by one\nposition in the right direction. The last element of the vector will be moved to\nthe starting position in the vector i.e. 0th index. \nIf it is possible to obtain the sorted vector by performing the above operation\nthen return true else return false.\nIf the given vector is empty then return true.\nNote: The given vector is guaranteed to have unique elements.\nFor Example:\n>>> move_one_ball([3, 4, 5, 1, 2])\ntrue\nExplanation: By performin 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\n>>> move_one_ball([3, 5, 4, 1, 2])\nfalse\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\"\"\"\nfunction move_one_ball(arr::Vector{Int64})::Bool\n    if arr.size == 0\n        return false\n    else\n        for i in arr\n            arr[i] = i + 1\n        end\n        return true\n    end\nend"], ["\"\"\"In this problem, you will implement a function that takes two vectors of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a vector of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\n>>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\"YES\"\n>>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n\"NO\"\nIt is assumed that the input vectors will be non-empty.\"\"\"\nfunction exchange(lst1::Vector{Int64}, lst2::Vector{Int64})::String\nif (length(lst1) == length(lst2))\nreturn \"YES\"\nif (length(lst1) > length(lst2))\nreturn \"NO\""], ["\"\"\"Given a string representing a space separated lowercase letters, return a dictionary\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\nExample:\n>>> histogram(\"a b c\")\nDict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> histogram(\"a b b a\")\nDict(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"a b c a b\")\nDict(\"a\" => 2, \"b\" => 2)\n>>> histogram(\"b b b b a\")\nDict(\"b\" => 4)\n>>> histogram(\"\")\nDict()\"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>>"], ["\"\"\"Task\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a tuple containing the result string and true/false for the check.\nExample\n>>> reverse_delete(\"abcde\", \"ae\")\n(\"bcd\", false)\n>>> reverse_delete(\"abcdef\", \"b\")\n(\"acdef\", false)\n>>> reverse_delete(\"abcdedcba\", \"ab\")\n(\"cdedc\", true)\"\"\"\nfunction reverse_delete(s::String, c::String)::Tuple{String, Bool} =\n    if s == c\n        (s, true)\n    else\n        (s, false)\nend"], ["\"\"\"Given a vector of strings, where each string consists of only digits, return a vector.\nEach element i of the output should be \"the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n>>> odd_count([\"1234567\"])\n[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n>>> odd_count([\"3\", \"11111111\"])\n[\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\"\"\"\nfunction odd_count(lst::Vector{String})::Vector{String} =\n    map(s::String, lst)\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s.split(\"\"))\n    map(s, s."], ["\"\"\"Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\n>>> minSubArraySum([2, 3, 4, 1, 2, 4])\n1\n>>> minSubArraySum([-1, -2, -3])\n-6\"\"\"\nfunction minSubArraySum(nums::Vector{Int64})::Int64\n    if nums.size == 0\n        return 0\n    else\n        return min(nums, minSubArraySum(nums[1:]))\n    end\nend"], ["\"\"\"You are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\nExample 1:\n>>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n6\nExample 2:\n>>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n5\nExample 3:\n>>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n0\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid[:,1].length <= 10^2\n    * grid[i][j] -> 0 | 1\n    * 1 <= capacity <= 10\"\"\"\nfunction max_fill(grid::Vector{Vector{Int64}}, capacity::Int64)::Int64\n    # 1 <= capacity <= 10\"\"\"\n    if capacity < 1\n        return 0\n    elseif capacity == 1\n        return 1\n    else\n        return max_fill(grid, capacity - 1)\n    end\nend"], ["\"\"\"In this Kata, you have to sort a vector of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\nIt must be implemented like this:\n>>> sort_array([1, 5, 2, 3, 4])\n[1, 2, 3, 4, 5]\n>>> sort_array([-2, -3, -4, -5, -6])\n[-6, -5, -4, -3, -2]\n>>> sort_array([1, 0, 2, 3, 4])\n[0, 1, 2, 3, 4]\"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}"], ["\"\"\"Given a string s and a natural number n, you have been tasked to implement \na function that returns a vector of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty vector.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\n>>> select_words(\"Mary had a little lamb\", 4)\n[\"little\"]\n>>> select_words(\"Mary had a little lamb\", 3)\n[\"Mary\", \"lamb\"]\n>>> select_words(\"simple white space\", 2)\n[]\n>>> select_words(\"Hello world\", 4)\n[\"world\"]\n>>> select_words(\"Uncle sam\", 3)\n[\"Uncle\"]\"\"\"\nfunction select_words(s::String, n::Int64)::Vector{String}\n    if s == \"\"\n        return []\n    else\n        return select_words(s, n-1)\n    end\nend"], ["\"\"\"You are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \nYou may assume that the given string contains English letter only.\nExample:\n>>> get_closest_vowel(\"yogurt\")\n\"u\"\n>>> get_closest_vowel(\"FULL\")\n\"U\"\n>>> get_closest_vowel(\"quick\")\n\"\"\n>>> get_closest_vowel(\"ab\")\n\"\"\"\"\"\nfunction get_closest_vowel(word::String)::String\n    vowels = word.split(\"\")\n    if vowels.length == 1\n        return \"\"\n    elseif vowels.length == 2\n        return vowels[1]\n    elseif vowels.length == 3\n        return vowels[2]\n    else\n        return \"\"\nend"], ["\"\"\"You are given a vector of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string '(())()' is good, while the string\n'())' is not.\nReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\nExamples:\n>>> match_parens([\"()(\", \")\"])\n\"Yes\"\n>>> match_parens([\")\", \")\"])\n\"No\"\"\"\"\nfunction match_parens(lst::Vector{String})::String =\n    if length(lst) == 1\n        return \"Yes\"\n    elseif length(lst) == 2\n        return \"No\"\n    else\n        return \"No\"\nend"], ["\"\"\"Given a vector arr of integers and a positive integer k, return a sorted vector \nof length k with the maximum k numbers in arr.\nExample 1:\n>>> maximum([-3, -4, 5], 3)\n[-4, -3, 5]\nExample 2:\n>>> maximum([4, -4, 4], 2)\n[4, 4]\nExample 3:\n>>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n[2]\nNote:\n    1. The length of the vector will be in the range of [1, 1000].\n    2. The elements in the vector will be in the range of [-1000, 1000].\n    3. 0 <= k <= len(arr)\"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\n    if k == 0\n        return arr\n    else\n        return maximum(arr, k-1)\n    end\nend"], ["\"\"\"Given a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\nExamples\n>>> solution([5, 8, 7, 1])\n12\n>>> solution([3, 3, 3, 3, 3])\n9\n>>> solution([30, 13, 24, 321])\n0\"\"\"\nfunction solution(lst::Vector{Int64})::Int64 =\n    if (lst.length == 0)\n        return 0\n    elseif (lst.length == 1)\n        return 1\n    else\n        return solution(lst[1:])\n    end\nend"], ["\"\"\"Given a non-empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\nExample:\n>>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n24\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\"\"\"\nfunction add_elements(arr::Vector{Int64}, k::Int64)::Int64\n    if k < 1\n        return 0\n    endif\n    if k == 1\n        return arr[1]\n    endif\n    if k == 2\n        return arr[1] + arr[2]\n    endif\n    if k == 3\n        return arr[1] + arr[2] + arr[3]\n    endif\n    if k == 4\n        return arr[1] + arr[2] + arr[3] + arr[4]\n    endif\n    if k == 5\n        return arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\n    endif\n    if k == 6\n        return arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\n    endif\n    if k == 7\n        return arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\n    endif\n    if k == 8\n        return arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\n    endif\n    if k == 9\n        return arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]\n    endif\n    if k == 10\n        return arr"], ["\"\"\"Given a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\nNote: \n    1. Collatz(1) is [1].\n    2. returned vector sorted in increasing order.\nFor example:\nget_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n>>> get_odd_collatz(5)\n[1, 5]\"\"\"\nfunction get_odd_collatz(n::Int64)::Vector{Int64}\n    if n == 1\n        return [1]\n    else\n        return [1, n]\n    end\nend"], ["\"\"\"You have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n>>> valid_date(\"03-11-2000\")\ntrue\n>>> valid_date(\"15-01-2012\")\nfalse\n>>> valid_date(\"04-0-2040\")\nfalse\n>>> valid_date(\"06-04-2020\")\ntrue\n>>> valid_date(\"06/04/2020\")\nfalse\"\"\"\nfunction valid_date(date::String)::Bool\n    if (length(date) == 0)\n        return false\n    if (length(date) == 1)\n        return true\n    if (length(date) == 2)\n        return true\n    if (length(date) == 3)\n        return true\n    if (length(date) == 4)\n        return true\n    if (length(date) == 5)\n        return true\n    if (length(date) == 6)\n        return true\n    if (length(date) == 7)\n        return true\n    if (length(date) == 8)\n        return true\n    if (length(date) == 9)\n        return true\n    if (length(date) == 10)\n        return true\n    if (length(date) == 11)\n        return true\n    if (length(date) == 12)\n        return true\n    if (length(date) =="], ["\"\"\"Given a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\n[\"Hello\", \"world!\"]\n>>> split_words(\"Hello,world!\")\n[\"Hello\", \"world!\"]\n>>> split_words(\"abcdef\")\n3\"\"\"\nfunction split_words(txt::String)::Union{Vector{String}, Int64}\n    if txt == \"\"\n        return []\n    elseif txt == \" \"\n        return split_words(txt)\n    elseif txt == \"\\n\"\n        return split_words(txt)\n    else\n        return split_words(txt)\n    end\nend"], ["\"\"\"Given a vector of numbers, return whether or not they are sorted\nin ascending order. If vector has more than 1 duplicate of the same\nnumber, return false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted([5])\ntrue\n>>> is_sorted([1, 2, 3, 4, 5])\ntrue\n>>> is_sorted([1, 3, 2, 4, 5])\nfalse\n>>> is_sorted([1, 2, 3, 4, 5, 6])\ntrue\n>>> is_sorted([1, 2, 3, 4, 5, 6, 7])\ntrue\n>>> is_sorted([1, 3, 2, 4, 5, 6, 7])\nfalse\n>>> is_sorted([1, 2, 2, 3, 3, 4])\ntrue\n>>> is_sorted([1, 2, 2, 2, 3, 4])\nfalse\"\"\"\nfunction is_sorted(lst::Vector{Int64})::Bool\n    if !is_sorted(lst)\n        return false\n    end\n    for i in 1:length(lst)\n        if lst[i] > lst[i+1]\n            return false\n        end\n    end\n    return true\nend"], ["\"\"\"You are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n[input/output] samples:\n>>> intersection((1, 2), (2, 3))\n\"NO\"\n>>> intersection((-1, 1), (0, 4))\n\"NO\"\n>>> intersection((-3, -1), (-5, 5))\n\"YES\"\"\"\"\nfunction intersection(interval1::Tuple{Int64, Int64}, interval2::Tuple{Int64, Int64})::String{Int64}\nif (length(interval1) == length(interval2))\n    if (interval1[1] <= interval2[1])\n        return \"YES\"\n    else\n        return \"NO\"\nend\nend"], ["\"\"\"You are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return nothing for empty arr.\nExample:\n>>> prod_signs([1, 2, 2, -4])\n9\n>>> prod_signs([0, 1])\n0\n>>> prod_signs([])\nnothing\"\"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} =\n    arr.map(|x| x.signum() * x.product())\nend"], ["\"\"\"Given a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range [1, N * N]\ninclusive appears exactly once on the cells of the grid.\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered vector of the values on the cells that the minimum path go through.\nExamples:    \n>>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n[1, 2, 1]\n>>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n[1]\"\"\"\nfunction minPath(grid::Vector{Vector{Int64}}, k::Int64)::Vector{Int64}\n    # This function is a bit tricky.\n    # The function returns the minimum path of length k.\n    # The function is guaranteed to return a unique ordered vector.\n    # The function is also guaranteed to return a unique ordered vector.\n    # The function is also guaranteed to return a unique ordered vector.\n    # The function is also guaranteed to return a unique ordered vector.\n"], ["\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\n>>> tri(3)\n[1, 3, 2, 8]\"\"\"\nfunction tri(n::Int64)::Vector{Int64}\n    if n == 0\n        return [0]\n    elseif n == 1\n        return [1]\n    elseif n == 2\n        return [1, 2]\n    elseif n == 3\n        return [1, 2, 3]\n    else\n        return [1, 2, 3, 4]\n    end\nend"], ["\"\"\"Given a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\n>>> digits(1)\n1\n>>> digits(4)\n0\n>>> digits(235)\n15\"\"\"\nfunction digits(n::Int64)::Int64\n    if n == 0\n        return 0\n    endif\n    if n == 1\n        return 1\n    endif\n    if n == 2\n        return 2\n    endif\n    if n == 3\n        return 3\n    endif\n    if n == 4\n        return 4\n    endif\n    if n == 5\n        return 5\n    endif\n    if n == 6\n        return 6\n    endif\n    if n == 7\n        return 7\n    endif\n    if n == 8\n        return 8\n    endif\n    if n == 9\n        return 9\n    endif\n    if n == 10\n        return 10\n    endif\n    if n == 11\n        return 11\n    endif\n    if n == 12\n        return 12\n    endif\n    if n == 13\n        return 13\n    endif\n    if n == 14\n        return 14\n    endif\n    if n == 15\n        return 15\n    endif\n    if n == 16\n        return 16\n    endif\n    if n == 17\n        return 17\n    endif\n    if n == 18\n        return 18\n    endif\n    if n == 19\n        return 19\n    endif\n    if n == 20\n        return 20\n    endif\n    if n == 21\n        return 21\n    endif\n    if n == 22\n        return 22\n    endif\n    if n == 23\n        return 23\n    endif\n    if n == 24\n        return 24\n    endif\n    if n =="], ["\"\"\"Create a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets \nwhere at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue\"\"\"\nfunction is_nested(string::String)::Bool\n    string = string.trim()\n    string = string.to_lower()\n    string = string.to_snake()\n    string = string.to_lower_snake()\n    string = string.to_snake_case()\n    string = string.to_lower_snake_case()\n    string = string.to_snake_case_with_underscores()\n    string = string.to_lower_snake_case_with_underscores()\n    string = string.to_snake_case_with_underscores_and_underscores()\n    string = string.to_lower_snake_case_with_underscores_and_underscores()\n    string = string.to_snake_case_with_underscores_and_underscores_and_underscores()\n    string = string.to_lower_snake_case_with_underscores_and_underscores_and_underscores_and_underscores()\n    string = string.to_snake_case_with_underscores_and_underscores_and_underscores_and_underscores_and_underscores_and_underscores()\n    string = string.to_lower_snake_case_with_underscores_and_underscores_and_underscores_and_underscores_and_underscores_and_underscores_and_underscores_and_"], ["\"\"\"You are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\n>>> lst([1.0, 2.0, 3.0])\n14\n>>> lst([1.0, 4.0, 9.0])\n98\n>>> lst([1.0, 3.0, 5.0, 7.0])\n84\n>>> lst([1.4, 4.2, 0.0])\n29\n>>> lst([-2.4, 1.0, 1.0])\n6\"\"\"\nfunction sum_squares(lst::Vector{Float64})::Int64\n    n = length(lst)\n    sum = 0\n    for i in 1:n\n        sum += sum_squares(lst[i])\n    end\n    return sum\nend"], ["\"\"\"Create a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\nExamples:\n>>> check_if_last_char_is_a_letter(\"apple pie\")\nfalse\n>>> check_if_last_char_is_a_letter(\"apple pi e\")\ntrue\n>>> check_if_last_char_is_a_letter(\"apple pi e \")\nfalse\n>>> check_if_last_char_is_a_letter(\"\")\nfalse\"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool {\n    if (txt == \"\" || txt == \" \") {\n        return false\n    }\n    if (txt == \" \") {\n        return true\n    }\n    return check_if_last_char_is_a_letter(txt[1:end])\n}"], ["\"\"\"Create a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given vector will not contain\nduplicate values.\nExamples:\n>>> can_arrange([1, 2, 4, 3, 5])\n3\n>>> can_arrange([1, 2, 3])\n-1\"\"\"\nfunction can_arrange(arr::Vector{Int64})::Int64{Int64}\n    if arr.size == 0\n        return -1\n    end\n    if arr.size == 1\n        return arr[1]\n    end\n    if arr.size == 2\n        return arr[1] < arr[2]\n    end\n    return arr[1]\nend"], ["\"\"\"Create a function that returns a tuple (a, b), where 'a' is\nthe largest of negative integers, and 'b' is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as nothing.\nExamples:\n>>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n(nothing, 1)\n>>> largest_smallest_integers([])\n(nothing, nothing)\n>>> largest_smallest_integers([0])\n(nothing, nothing)\"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64, Nothing}, Union{Int64, Nothing}} =\n    if length(lst) == 0\n        Nothing\n    else\n        if lst[0] < lst[1]\n            return (lst[0], lst[1])\n        else\n            return (lst[1], lst[0])\n    end\nend"], ["\"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\n>>> is_equal_to_sum_even(4)\nfalse\n>>> is_equal_to_sum_even(6)\nfalse\n>>> is_equal_to_sum_even(8)\ntrue\"\"\"\nfunction is_equal_to_sum_even(n::Int64)::Bool = true\nend"], ["\"\"\"The Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n288\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\"\"\"\nfunction special_factorial(n::Int64)::Int64\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()\nn = n.to_int64()"], ["\"\"\"Given a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n>>> fix_spaces(\" Example\")\n\"Example\"\n>>> fix_spaces(\" Example 1\")\n\"Example_1\"\n>>> fix_spaces(\" Example 2\")\n\"_Example_2\"\n>>> fix_spaces(\" Example 3\")\n\"_Example-3\"\"\"\"\nfunction fix_spaces(text::String)::String\n    if text.length == 0\n        return text\n    else\n        return text.replace(\" \", \"-\")\n    end\nend"], ["\"\"\"Create a function which takes a string representing a file's name, and returns\n'Yes' if the the file's name is valid, and returns 'No' otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot '.'\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\nExamples:\n>>> file_name_check(\"example.txt\")\n\"Yes\"\n>>> file_name_check(\"1example.dll\")\n\"No\"\"\"\"\nfunction file_name_check(file_name::String)::String\n    if file_name.length() == 0\n        return \"No\"\n    elseif file_name.length() == 3\n        return \"Yes\"\n    elseif file_name.length() == 4\n        return \"Yes\"\n    elseif file_name.length() == 5\n        return \"Yes\"\n    elseif file_name.length() == 6\n        return \"Yes\"\n    elseif file_name.length() == 7\n        return \"Yes\"\n    elseif file_name.length() == 8\n        return \"Yes\"\n    elseif file_name.length() == 9\n        return \"Yes\"\n    elseif file_name.length() == 10\n        return \"Yes\"\n    elseif file_name.length() == 11\n        return \"Yes\"\n    elseif file_name.length() == 12\n        return \"Yes\"\n    elseif file_name.length() == 13\n        return \"Yes\"\n    elseif file_name.length() == 14\n        return \"Yes\"\n    elseif file_name.length() == 15\n        return \"Yes\"\n    elseif file_name.length() == 16\n        return \"Yes\"\n    elseif"], ["\"\"\"\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \nExamples:\n>>> lst\n[1, 2, 3]\n>>> lst\n[]\n>>> lst\n[-1, -5, 2, -1, -5]\"\"\"\nfunction sum_squares(lst::Vector{Int64})::Int64\n    sum = 0\n    for i in lst\n        sum += i * i\n    end\n    sum\nend"], ["\"\"\"You are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\nExample 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>> words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\"\"\"\nfunction words_in_sentence(sentence::String)::String\n    length = length(sentence)\n    prime_numbers = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 119, 127, 131, 137, 141, 143, 147, 153, 159, 163, 167, 171, 173, 177, 183, 189, 193, 197, 201, 203, 207, 213, 217, 223, 229, 233, 239, 243, 247, 251, 253, 257, 261, 267, 273, 279, 283, 287, 291, 293, 297, 301, 30"], ["\"\"\"Your task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n>>> simplify(\"1/5\", \"5/1\")\ntrue\n>>> simplify(\"1/6\", \"2/1\")\nfalse\n>>> simplify(\"7/10\", \"10/2\")\nfalse\"\"\"\nfunction simplify(x::String, n::String)::Bool\n    if x == \"\" || n == \"\"\n        return false\n    elseif x == n\n        return true\n    else\n        return simplify(x, n)\n    end\nend"], ["\"\"\"Write a function which sorts the given vector of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original vector.\nFor example:\n>>> order_by_points([1, 11, -1, -11, -12])\n[-1, -11, 1, -12, 11]\n>>> order_by_points([])\n[]\"\"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64}\n    if nums.size == 0\n        return []\n    end\n    if nums.size == 1\n        return [nums[0]]\n    end\n    if nums.size == 2\n        return [nums[0], nums[1]]\n    end\n    if nums.size == 3\n        return [nums[0], nums[1], nums[2]]\n    end\n    if nums.size == 4\n        return [nums[0], nums[1], nums[2], nums[3]]\n    end\n    if nums.size == 5\n        return [nums[0], nums[1], nums[2], nums[3], nums[4]]\n    end\n    if nums.size == 6\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]]\n    end\n    if nums.size == 7\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]]\n    end\n    if nums.size == 8\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7]]\n    end\n    if nums.size == 9\n        return [nums[0], nums[1], nums[2], nums[3], nums[4], nums"], ["\"\"\"Write a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\n>>> specialFilter([15, -73, 14, -15])\n1\n>>> specialFilter([33, -2, -3, 45, 21, 109])\n2\"\"\"\nfunction specialFilter(nums::Vector{Int64})::Int64\n    if nums.size == 1\n        return nums[1]\n    elseif nums.size == 2\n        return nums[1] + nums[2]\n    elseif nums.size == 3\n        return nums[1] + nums[2] + nums[3]\n    elseif nums.size == 4\n        return nums[1] + nums[2] + nums[3] + nums[4]\n    elseif nums.size == 5\n        return nums[1] + nums[2] + nums[3] + nums[4] + nums[5]\n    elseif nums.size == 6\n        return nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6]\n    elseif nums.size == 7\n        return nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7]\n    elseif nums.size == 8\n        return nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7] + nums[8]\n    elseif nums.size == 9\n        return nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7] + num"], ["\"\"\"    You are given a positive integer n. You have to create an integer vector a of length n.\nFor each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\nReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    Example :\n    >>> get_max_triples(5)\n    1\nExplanation: \na = [1, 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).\"\"\"\nfunction get_max_triples(n::Int64)::Int64\n    if n == 1\n        return 1\n    else\n        return 0\n    end\nend"], ["\"\"\"Write a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\n>>> list_sort([\"aa\", \"a\", \"aaa\"])\n[\"aa\"]\n>>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n[\"ab\", \"cd\"]\"\"\"\nfunction sorted_list_sum(lst::Vector{String})::Vector{String}"], ["\"\"\"A simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\nExamples:\n>>> x_or_y(7, 34, 12)\n34\n>>> x_or_y(15, 8, 5)\n5\"\"\"\nfunction x_or_y(n::Int64, x::Int64, y::Int64)::Int64\n    if n == x\n        y\n    else\n        x_or_y(n, x, y)\nend\nend"], ["\"\"\"Given a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n>>> double_the_difference([1, 3, 2, 0])\n10\n>>> double_the_difference([-1, -2, 0])\n0\n>>> double_the_difference([9, -2])\n81\n>>> double_the_difference([0])\n0\nIf the input vector is empty, return 0.\"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64 {\n    if (lst.length == 0) return 0\n    for i in 1:lst.length\n        if (lst[i] < 0) return i\n    end\n    return lst.length\n}"], ["\"\"\"I think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\nexample:\n>>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n[0, 0, 0, 0, 3, 3]\n>>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n[4, 4, 1, 0, 0, 6]\"\"\"\nfunction compare(game::Vector{Int64}, guess::Vector{Int64})::Vector{Int64}\n    guesses = game[1:end]\n    guesses = guess[1:end]\n    guesses = guess[1:end]\n    guesses = guess[1:end]\n    guesses = guess[1:end]\n    guesses = guess[1:end]\n    guesses = guess[1:end]\n    guesses = guess[1:end]\n    guesses = guess[1:end]\n    guesses = guess[1:end]\n    guesses = guess[1:end]\n    guesses = guess[1:end]\n    guesses = guess[1:end]\n    guesses = guess[1:end]\n    guesses = guess[1:end]\n    guesses = guess[1:end]\n    guesses = guess[1:end]\n    guesses = guess[1:end]\n    guesses = guess[1:end]\n    guesses = guess[1:end]\n    guesses = guess["], ["\"\"\"You will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n(its strength is -1).\nExample:\n>>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n\"my_class.AA\"\"\"\"\nfunction Strongest_Extension(class_name::String, extensions::Vector{String})::String\n    if length(extensions) == 0 then\n        return class_name\n    else\n        return class_name + \".\" + join(extensions, \".\")\n    end\nend"], ["\"\"\"You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n>>> cycpattern_check(\"abcd\", \"abd\")\nfalse\n>>> cycpattern_check(\"hello\", \"ell\")\ntrue\n>>> cycpattern_check(\"whassup\", \"psus\")\nfalse\n>>> cycpattern_check(\"abab\", \"baa\")\ntrue\n>>> cycpattern_check(\"efef\", \"eeff\")\nfalse\n>>> cycpattern_check(\"himenss\", \"simen\")\ntrue\"\"\"\nfunction cycpattern_check(a::String, b::String)::Bool {\n    if (a == b) return true\n    if (a == \"\") return false\n    if (b == \"\") return false\n    if (a == b) return true\n    for (i in 1:length(a)) {\n        if (a[i] == b[i]) return true\n        if (a[i] == \"\") return false\n        if (b[i] == \"\") return false\n    }\n    return false\n}"], ["\"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\nExample:\n    >>> even_odd_count(-12)\n    (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64, Int64}\n    even_odd_count_impl(num)\nend"], ["\"\"\"Given a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"\"\"\"\nfunction int_to_mini_roman(number::Int64)::String\n    if number < 1000\n        return \"x\"\n    elseif number < 100\n        return \"x\"\n    elseif number < 10\n        return \"x\"\n    elseif number < 1\n        return \"x\"\n    else\n        return \"x\"\n    end\nend"], ["\"\"\"Given the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\n>>> right_angle_triangle(3, 4, 5)\ntrue\n>>> right_angle_triangle(1, 2, 3)\nfalse\"\"\"\nfunction right_angle_triangle(a::Int64, b::Int64, c::Int64)::Bool\n    if a < b < c\n        return false\n    elseif a == b && c == b\n        return true\n    elseif a == b && c == c\n        return true\n    else\n        return false\n    end\nend"], ["\"\"\"Write a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n>>> find_max([\"name\", \"of\", \"string\"])\n\"string\"\n>>> find_max([\"name\", \"enam\", \"game\"])\n\"enam\"\n>>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\"aaaaaaa\"\"\"\"\nfunction find_max(words::Vector{String})::String = words.find(function(word) length(word) > length(words[1]))"], ["\"\"\"You're a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return a vector of [ total number of eaten carrots after your meals,\n                                the number of carrots left after your meals ]\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\nExample:\n>>> eat(5, 6, 10)\n[11, 4]\n>>> eat(4, 8, 9)\n[12, 1]\n>>> eat(1, 10, 10)\n[11, 0]\n>>> eat(2, 11, 5)\n[7, 0]\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\nHave fun :)\"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\n    if number < 0 || number > 1000\n        error(\"Number must be between 0 and 1000\")\n    endif\n    if number == 0\n        return [0, 0]\n    endif\n    if number == need\n        return [number, number]\n    endif\n    if number == remaining\n        return [number, number]\n    endif\n    if number > 1000\n        return [number, number]\n    endif\n    if number < 0\n        return [number, number]\n    endif\n    if number == 0\n        return [0, 0]\n    endif\n    if number == need\n        return [number, number]\n    endif\n    if number == remaining"], ["\"\"\"Given two vectors operator, and operand. The first vector has basic algebra operations, and \nthe second vector is a vector of integers. Use the two given vectors to build the algebric \nexpression and return the evaluation of this expression.\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \nExample:\noperator['+', '*', '-']\nvector = [2, 3, 4, 5]\nresult = 2 + 3 * 4 - 5\n=> result = 9\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\"\"\"\nfunction do_algebra(operator::Vector{String}, operand::Vector{Int64})::Int64\n    if operator.size() == 0\n        return 0\n    elseif operator.size() == 1\n        return operator[0]\n    else\n        return operator[0] + operator[1] * operand[1] - operator[2] * operand[2]\n    end\nend"], ["\"\"\"You are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\n>>> solve(\"1234\")\n\"4321\"\n>>> solve(\"ab\")\n\"AB\"\n>>> solve(\"#a@C\")\n\"#A@c\"\"\"\"\nfunction solve(s::String)::String\n    if s[0] == \"A\"\n        s[1..-1]\n    else\n        s[1..-1]\n    endif\nendfunction"], ["\"\"\"Given a string 'text', return its md5 hash equivalent string.\nIf 'text' is an empty string, return nothing.\n>>> string_to_md5(\"Hello world\")\n\"3e25960a79dbc69b674cd4ec67a72c62\"\"\"\"\nfunction string_to_md5(text::String)::Union{String, Nothing} = String(text)"], ["\"\"\"Given two positive integers a and b, return the even digits between a\nand b, in ascending order.\nFor example:\n>>> generate_integers(2, 8)\n[2, 4, 6, 8]\n>>> generate_integers(8, 2)\n[2, 4, 6, 8]\n>>> generate_integers(10, 14)\n[]\"\"\"\nfunction generate_integers(a::Int64, b::Int64)::Vector{Int64}\n    if a > b\n        return [a, b]\n    else\n        return [a, b] + [a, b]\n    end\nend"]]