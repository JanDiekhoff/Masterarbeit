[["# Check if in given list of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> HumanEval.has_close_elements([1.0, 2.0, 3.0], 0.5)\n# false\n# >>> HumanEval.has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n# true\n\ndefmodule HumanEval do\n  def candidate(numbers, threshold), do: has_close_elements(numbers, threshold)\n  def has_close_elements(numbers, threshold) do\n    numbers.map(&:close_element)\n  end\nend"], ["# Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n# separate those group into separate strings and return the list of those.\n# Separate groups are balanced (each open brace is properly closed) and not nested within each other\n# Ignore any spaces in the input string.\n# >>> HumanEval.separate_paren_groups(\"( ) (( )) (( )( ))\")\n# [\"()\", \"(())\", \"(()())\"]\n\ndefmodule HumanEval do\n  def candidate(paren_string), do: separate_paren_groups(paren_string)\n  def separate_paren_groups(paren_string) do\n    # Split the string into groups\n    # Ignore any spaces in the input string\n    # >>> HumanEval.separate_paren_groups(\"( ) (( )) (( )( ))\")\n    # [\"( )\", \"( )\", \"( ))\", \"( )( ))\"]\n    # >>> HumanEval.separate_paren_groups(\"( ) (( )) (( )( ))\")\n    # [\"( )\", \"( )\", \"( ))\", \"( )( ))\"]\n    # >>> HumanEval.separate_paren_groups(\"( ) (( )) (( )( ))\")\n    # [\"( )\", \"( )\", \"( ))\", \"( )( ))\"]\n    # >>> HumanEval.separate_paren_groups(\"( ) (( )) (( )( ))\")\n    # [\"( )\", \"( )\", \"( ))\", \"( )( ))\"]\n    # >>> HumanEval.separate_paren_groups(\"( ) (( )) (( )( ))\")\n    # [\"( )\", \"( )\", \"( ))\", \"( )( ))\"]\n    # >>> HumanEval.separate_paren_groups(\"( ) (( )) (( )( ))\")\n    # [\"( )\", \"( )\", \"( ))\", \"( )( ))\"]\n    # >>> HumanEval.separate_paren_groups(\"( ) (( )) (( )( ))\")\n    # [\"( )\", \"( )\", \"( ))\", \"( )( ))\"]\n    # >>> HumanEval."], ["# Given a positive floating point number, it can be decomposed into\n# and integer part (largest integer smaller than given number) and decimals\n# (leftover part always smaller than 1).\n# Return the decimal part of the number.\n# >>> HumanEval.truncate_number(3.5)\n# 0.5\n\ndefmodule HumanEval do\n  def candidate(number), do: truncate_number(number)\n  def truncate_number(number) do\n    # If the number is a decimal, truncate it to the nearest integer.\n    # If the number is a fraction, truncate it to the nearest integer\n    # (the fractional part).\n    # If the number is a fraction, truncate it to the nearest integer\n    # (the fractional part).\n    # If the number is a fraction, truncate it to the nearest integer\n    # (the fractional part).\n    # If the number is a fraction, truncate it to the nearest integer\n    # (the fractional part).\n    # If the number is a fraction, truncate it to the nearest integer\n    # (the fractional part).\n    # If the number is a fraction, truncate it to the nearest integer\n    # (the fractional part).\n    # If the number is a fraction, truncate it to the nearest integer\n    # (the fractional part).\n    # If the number is a fraction, truncate it to the nearest integer\n    # (the fractional part).\n    # If the number is a fraction, truncate it to the nearest integer\n    # (the fractional part).\n    # If the number is a fraction, truncate it to the nearest integer\n    # (the fractional part).\n    # If the number is a fraction, truncate it to the nearest integer\n    # (the fractional part).\n    # If the number is a fraction, truncate it to the nearest integer\n    # (the fractional part).\n    # If the number is a fraction, truncate it to the nearest integer\n    # (the fractional part).\n    # If the number is a fraction, truncate it to the nearest integer\n    # (the fractional part).\n    # If the number is a fraction, truncate it to the nearest"], ["# You're given a list of deposit and withdrawal operations on a bank account that starts with\n# zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n# at that point function should return true. Otherwise it should return false.\n# >>> HumanEval.below_zero([1, 2, 3])\n# false\n# >>> HumanEval.below_zero([1, 2, -4, 5])\n# true\n\ndefmodule HumanEval do\n  def candidate(operations), do: below_zero(operations)\n  def below_zero(operations) do\n    if operations.size < 0 do\n      raise ArgumentError, \"Operations must be positive\"\n    end\n    operations\n  end\nend"], ["# For a given list of input numbers, calculate Mean Absolute Deviation\n# around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute difference between each\n# element and a centerpoint (mean in this case):\n# MAD = average | x - x_mean |\n# >>> HumanEval.mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n# 1.0\n\ndefmodule HumanEval do\n  def candidate(numbers), do: mean_absolute_deviation(numbers)\n  def mean_absolute_deviation(numbers) do\n    numbers |> Enum.map(fn x -> x - x_mean end)\n  end\nend"], ["# Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n# >>> HumanEval.intersperse([], 4)\n# []\n# >>> HumanEval.intersperse([1, 2, 3], 4)\n# [1, 4, 2, 4, 3]\n\ndefmodule HumanEval do\n  def candidate(numbers, delimeter), do: intersperse(numbers, delimeter)\n  def intersperse(numbers, delimeter) do\n    numbers = [numbers]\n    numbers = numbers.map(&:to_i)\n    numbers = numbers.map(&:to_s)\n    numbers = numbers.map(&:to_s)\n    numbers = numbers.map(&:to_i)\n    numbers\n  end\nend"], ["# Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n# For each of the group, output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting while ((())) has three.\n# >>> HumanEval.parse_nested_parens(\"(()()) ((())) () ((())()())\")\n# [2, 3, 1, 3]\n\ndefmodule HumanEval do\n  def candidate(paren_string), do: parse_nested_parens(paren_string)\n  def parse_nested_parens(paren_string) do\n    case HumanEval.parse_nested_parens(paren_string) do\nilter an input list of strings only for ones that contain given substring\n# >>> HumanEval.filter_by_substring([], \"a\")\n# []\n# >>> HumanEval.filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"]\n\ndefmodule HumanEval do\n  def candidate(strings, substring), do: filter_by_substring(strings, substring)\n  def filter_by_substring(strings, substring) do\n    candidate = []\n    strings.each do |string|\n      candidate.push(string) if string =~ substring\n    end\n    candidate\n  end\nend"], ["# For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n# Empty sum should be equal to 0 and empty product should be equal to 1.\n# >>> HumanEval.sum_product([])\n# {0, 1}\n# >>> HumanEval.sum_product([1, 2, 3, 4])\n# {10, 24}\n\ndefmodule HumanEval do\n  def candidate(numbers), do: sum_product(numbers)\n  def sum_product(numbers) do: numbers |> Enum.map(candidate) |> Enum.reduce(0, +)\nend"], ["# From a given list of integers, generate a list of rolling maximum element found until given moment\n# in the sequence.\n# >>> HumanEval.rolling_max([1, 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\n\ndefmodule HumanEval do\n  def candidate(numbers), do: rolling_max(numbers)\n  def rolling_max(numbers) do\n    numbers = numbers.map(&:to_i)\n    numbers.reduce(&:+)\n  end\nend"], ["# Find the shortest palindrome that begins with a supplied string.\n# Algorithm idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n# - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n# >>> HumanEval.make_palindrome(\"\")\n# \"\"\n# >>> HumanEval.make_palindrome(\"cat\")\n# \"catac\"\n# >>> HumanEval.make_palindrome(\"cata\")\n# \"catac\"\n\ndefmodule HumanEval do\n  def candidate(string), do: make_palindrome(string)\n  def make_palindrome(string) do\n    string.split(\"\").reverse.join(\"\")\n  end\nend"], ["# Input are two strings a and b consisting only of 1s and 0s.\n# Perform binary XOR on these inputs and return result also as a string.\n# >>> HumanEval.string_xor(\"010\", \"110\")\n# \"100\"\n\ndefmodule HumanEval do\n  def candidate(a, b), do: string_xor(a, b)\n  def string_xor(a, b) do\n    a |> String.xor(b)\n  end\nend"], ["# Out of list of strings, return the longest one. Return the first one in case of multiple\n# strings of the same length. Return nil in case the input list is empty.\n# >>> HumanEval.longest([])\n# nil\n# >>> HumanEval.longest([\"a\", \"b\", \"c\"])\n# \"a\"\n# >>> HumanEval.longest([\"a\", \"bb\", \"ccc\"])\n# \"ccc\"\n\ndefmodule HumanEval do\n  def candidate(strings), do: longest(strings)\n  def longest(strings) do\n    # We use the same strategy as in the Python implementation\n    # to find the longest string.\n    # We use a binary search to find the position of the longest\n    # string in the input list.\n    # We use a binary search to find the position of the longest\n    # string in the input list.\n    # We use a binary search to find the position of the longest\n    # string in the input list.\n    # We use a binary search to find the position of the longest\n    # string in the input list.\n    # We use a binary search to find the position of the longest\n    # string in the input list.\n    # We use a binary search to find the position of the longest\n    # string in the input list.\n    # We use a binary search to find the position of the longest\n    # string in the input list.\n    # We use a binary search to find the position of the longest\n    # string in the input list.\n    # We use a binary search to find the position of the longest\n    # string in the input list.\n    # We use a binary search to find the position of the longest\n    # string in the input list.\n    # We use a binary search to find the position of the longest\n    # string in the input list.\n    # We use a binary search to find the position of the longest\n    # string in the input list.\n    # We use a binary search to find the position of the longest\n    # string in the input list.\n    # We use a binary search to find the position of the longest\n    # string in the input list.\n    # We use a binary search to find the position of the longest\n    # string in the input list."], ["# Return a greatest common divisor of two integers a and b\n# >>> HumanEval.greatest_common_divisor(3, 5)\n# 1\n# >>> HumanEval.greatest_common_divisor(25, 15)\n# 5\n\ndefmodule HumanEval do\n  def candidate(a, b), do: greatest_common_divisor(a, b)\n  def greatest_common_divisor(a, b) do\n    a.to_i + b.to_i\n  end\nend"], ["# Return list of all prefixes from shortest to longest of the input string\n# >>> HumanEval.all_prefixes(\"abc\")\n# [\"a\", \"ab\", \"abc\"]\n\ndefmodule HumanEval do\n  def candidate(string), do: all_prefixes(string)\n  def all_prefixes(string) do\n    string.split(\"\").map do |word|\n      HumanEval.candidate(word)\n    end\n  end\nend"], ["# Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n# >>> HumanEval.string_sequence(0)\n# \"0\"\n# >>> HumanEval.string_sequence(5)\n# \"0 1 2 3 4 5\"\n\ndefmodule HumanEval do\n  def candidate(n), do: string_sequence(n)\n  def string_sequence(n) do\n    HumanEval.candidate(n)\n  end\nend"], ["# Given a string, find out how many distinct characters (regardless of case) does it consist of\n# >>> HumanEval.count_distinct_characters(\"xyzXYZ\")\n# 3\n# >>> HumanEval.count_distinct_characters(\"Jerry\")\n# 4\n\ndefmodule HumanEval do\n  def candidate(string), do: count_distinct_characters(string)\n  def count_distinct_characters(string) do\n    HumanEval.count_distinct_characters(string)\n  end\nend"], ["# Input to this function is a string representing musical notes in a special ASCII format.\n# Your task is to parse this string and return list of integers corresponding to how many beats does each\n# not last.\n# Here is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|' - quater note, lasts one beat\n# >>> HumanEval.parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\ndefmodule HumanEval do\n  def candidate(music_string), do: parse_music(music_string)\n  def parse_music(music_string) do\n    music_string.split(\"|\").map do |s|\n      s.split(\" \")\n    end\n  end\nend"], ["# Find how many times a given substring can be found in the original string. Count overlaping cases.\n# >>> HumanEval.how_many_times(\"\", \"a\")\n# 0\n# >>> HumanEval.how_many_times(\"aaa\", \"a\")\n# 3\n# >>> HumanEval.how_many_times(\"aaaa\", \"aa\")\n# 3\n\ndefmodule HumanEval do\n  def candidate(string, substring), do: how_many_times(string, substring)\n  def how_many_times(string, substring) do\n    # >>> HumanEval.how_many_times(\"\", \"a\")\n    # 0\n    # >>> HumanEval.how_many_times(\"aaa\", \"a\")\n    # 3\n    # >>> HumanEval.how_many_times(\"aaaa\", \"aa\")\n    # 3\n    # >>> HumanEval.how_many_times(\"aaaaa\", \"aa\")\n    # 3\n    # >>> HumanEval.how_many_times(\"aaaaaaaa\", \"aa\")\n    # 3\n    # >>> HumanEval.how_many_times(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n# Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to largest\n# >>> HumanEval.sort_numbers(\"three one five\")\n# \"one three five\"\n\ndefmodule HumanEval do\n  def candidate(numbers), do: sort_numbers(numbers)\n  def sort_numbers(numbers) do\n    numbers.sort_by {|n| n.to_i}\n  end\nend"], ["# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\n# >>> HumanEval.find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n# {2.0, 2.2}\n# >>> HumanEval.find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n# {2.0, 2.0}\n\ndefmodule HumanEval do\n  def candidate(numbers), do: find_closest_elements(numbers)\n  def find_closest_elements(numbers) do\n    numbers = [numbers]\n    numbers.each do |number|\n      candidate = candidate(number)\n      candidate if candidate\n    end\n  end\nend"], ["# Given list of numbers (of at least two elements), apply a linear transform to that list,\n# such that the smallest number will become 0 and the largest will become 1\n# >>> HumanEval.rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0, 0.25, 0.5, 0.75, 1.0]\n\ndefmodule HumanEval do\n  def candidate(numbers), do: rescale_to_unit(numbers)\n  def rescale_to_unit(numbers) do\n    numbers = [numbers]\n    HumanEval.candidate(numbers)\n  end\nend"], ["# Filter given list of any elixirthon values only for integers\n# >>> HumanEval.filter_integers([\"a\", 3.14, 5])\n# [5]\n# >>> HumanEval.filter_integers([1, 2, 3, \"abc\", %{}, []])\n# [1, 2, 3]\n\ndefmodule HumanEval do\n  def candidate(values), do: filter_integers(values)\n  def filter_integers(values) do\n    values.map do |v|\n      if v.is_integer?\n        v\n      else\n        HumanEval.filter_integers(values)\n      end\n    end\n  end\nend"], ["# Return length of given string\n# >>> HumanEval.strlen(\"\")\n# 0\n# >>> HumanEval.strlen(\"abc\")\n# 3\n\ndefmodule HumanEval do\n  def candidate(string), do: strlen(string)\n  def strlen(string) do: strlen(string)\nend"], ["# For a given number n, find the largest number that divides n evenly, smaller than n\n# >>> HumanEval.largest_divisor(15)\n# 5\n\ndefmodule HumanEval do\n  def candidate(n), do: largest_divisor(n)\n  def largest_divisor(n) do\n    n.to_i\n  end\nend"], ["# Return list of prime factors of given integer in the order from smallest to largest.\n# Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n# Input number should be equal to the product of all factors\n# >>> HumanEval.factorize(8)\n# [2, 2, 2]\n# >>> HumanEval.factorize(25)\n# [5, 5]\n# >>> HumanEval.factorize(70)\n# [2, 5, 7]\n\ndefmodule HumanEval do\n  def candidate(n), do: factorize(n)\n  def factorize(n) do\n    n.times do\n      candidate(n)\n    end\n  end\nend"], ["# From a list of integers, remove all elements that occur more than once.\n# Keep order of elements left the same as in the input.\n# >>> HumanEval.remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\n\ndefmodule HumanEval do\n  def candidate(numbers), do: remove_duplicates(numbers)\n  def remove_duplicates(numbers) do\n    numbers = numbers.split\n    numbers.each do |number|\n      numbers.each do |number2|\n        if number == number2\n          numbers.delete(number)\n        end\n      end\n    end\n  end\nend"], ["# For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n# >>> HumanEval.flip_case(\"Hello\")\n# \"hELLO\"\n\ndefmodule HumanEval do\n  def candidate(string), do: flip_case(string)\n  def flip_case(string) do\n    case string do\n      \"Hello\" -> \"hELLO\"\n      _ -> raise \"Invalid string\"\n    end\n  end\nend"], ["# Concatenate list of strings into a single string\n# >>> HumanEval.concatenate([])\n# \"\"\n# >>> HumanEval.concatenate([\"a\", \"b\", \"c\"])\n# \"abc\"\n\ndefmodule HumanEval do\n  def candidate(strings), do: concatenate(strings)\n  def concatenate(strings) do\n    if not strings.empty?\n      HumanEval.candidate(strings)\n    else\n      HumanEval.candidate([\"\"])\n    end\n  end\nend"], ["# Filter an input list of strings only for ones that start with a given prefix.\n# >>> HumanEval.filter_by_prefix([], \"a\")\n# []\n# >>> HumanEval.filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\n\ndefmodule HumanEval do\n  def candidate(strings, prefix), do: filter_by_prefix(strings, prefix)\n  def filter_by_prefix(strings, prefix) do\n    strings.map do |s|\n      HumanEval.filter_by_prefix(s, prefix)\n    end\n  end\nend"], ["# Return only positive numbers in the list.\n# >>> HumanEval.get_positive([-1, 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> HumanEval.get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\n\ndefmodule HumanEval do\n  def candidate(l), do: get_positive(l)\n  def get_positive(l) do\n    HumanEval.candidate(l)\n  end\nend"], ["# Return true if a given number is prime, and false otherwise.\n# >>> HumanEval.is_prime(6)\n# false\n# >>> HumanEval.is_prime(101)\n# true\n# >>> HumanEval.is_prime(11)\n# true\n# >>> HumanEval.is_prime(13441)\n# true\n# >>> HumanEval.is_prime(61)\n# true\n# >>> HumanEval.is_prime(4)\n# false\n# >>> HumanEval.is_prime(1)\n# false\n\ndefmodule HumanEval do\n  def candidate(n), do: is_prime(n)\n  def is_prime(n) do:\n    if n < 2 then\n      n\n    else\n      n |> candidate(n - 1)\n    end\n  end\nend"], ["# This function takes a list l and returns a list l' such that\n# l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n# to the values of the corresponding indicies of l, but sorted.\n# >>> HumanEval.sort_third([1, 2, 3])\n# [1, 2, 3]\n# >>> HumanEval.sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4, 8, 9, 5]\n\ndefmodule HumanEval do\n  def candidate(l), do: sort_third(l)\n  def sort_third(l) do\n    l = [l]\n    l.each do |i|\n      l.each do |j|\n        if i != j\n          l.delete(i)\n          l.delete(j)\n        end\n      end\n    end\n    l\n  end\nend"], ["# Return sorted unique elements in a list\n# >>> HumanEval.unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\n\ndefmodule HumanEval do\n  def candidate(l), do: unique(l)\n  def unique(l) do\n    l.map do |x|\n      HumanEval.candidate(l, x)\n    end.reduce(&:and)\n  end\nend"], ["# Return maximum element in the list.\n# >>> HumanEval.max_element([1, 2, 3])\n# 3\n# >>> HumanEval.max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# 123\n\ndefmodule HumanEval do\n  def candidate(l), do: max_element(l)\n  def max_element(l) do: HumanEval.candidate(l)\nend"], ["# Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n# >>> HumanEval.fizz_buzz(50)\n# 0\n# >>> HumanEval.fizz_buzz(78)\n# 2\n# >>> HumanEval.fizz_buzz(79)\n# 3\n\ndefmodule HumanEval do\n  def candidate(n), do: fizz_buzz(n)\n  def fizz_buzz(n) do\n    n.to_i.times do\n      HumanEval.candidate(n)\n    end\n  end\nend"], ["# This function takes a list l and returns a list l' such that\n# l' is identical to l in the odd indicies, while its values at the even indicies are equal\n# to the values of the even indicies of l, but sorted.\n# >>> HumanEval.sort_even([1, 2, 3])\n# [1, 2, 3]\n# >>> HumanEval.sort_even([5, 6, 3, 4])\n# [3, 6, 5, 4]\n\ndefmodule HumanEval do\n  def candidate(l), do: sort_even(l)\n  def sort_even(l) do\n    l = [l]\n    l.sort_by {|i| i}\n    l.reverse\n    l\n  end\nend"], ["# prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n# >>> HumanEval.prime_fib(1)\n# 2\n# >>> HumanEval.prime_fib(2)\n# 3\n# >>> HumanEval.prime_fib(3)\n# 5\n# >>> HumanEval.prime_fib(4)\n# 13\n# >>> HumanEval.prime_fib(5)\n# 89\n\ndefmodule HumanEval do\n  def candidate(n), do: prime_fib(n)\n  def prime_fib(n) do\n    # >>> HumanEval.prime_fib(1)\n    # 2\n    # >>> HumanEval.prime_fib(2)\n    # 3\n    # >>> HumanEval.prime_fib(3)\n    # 5\n    # >>> HumanEval.prime_fib(4)\n    # 13\n    # >>> HumanEval.prime_fib(5)\n    # 89\n  end\nend"], ["# triples_sum_to_zero takes a list of integers as an input.\n# it returns true if there are three distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> HumanEval.triples_sum_to_zero([1, 3, 5, 0])\n# false\n# >>> HumanEval.triples_sum_to_zero([1, 3, -2, 1])\n# true\n# >>> HumanEval.triples_sum_to_zero([1, 2, 3, 7])\n# false\n# >>> HumanEval.triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n# true\n# >>> HumanEval.triples_sum_to_zero([1])\n# false\n\ndefmodule HumanEval do\n  def candidate(l), do: triples_sum_to_zero(l)\n  def triples_sum_to_zero(l) do\n    # l is a list of integers\n    # sum_to_zero is a function that takes a list of integers and returns true if there are three distinct elements in the list that sum to zero, and false otherwise.\n    # sum_to_zero is a function that takes a list of integers and returns true if there are three distinct elements in the list that sum to zero, and false otherwise.\n    # sum_to_zero is a function that takes a list of integers and returns true if there are three distinct elements in the list that sum to zero, and false otherwise.\n    # sum_to_zero is a function that takes a list of integers and returns true if there are three distinct elements in the list that sum to zero, and false otherwise.\n    # sum_to_zero is a function that takes a list of integers and returns true if there are three distinct elements in the list that sum to zero, and false otherwise.\n    # sum_to_zero is a function that takes a list of integers and returns true if there are three distinct elements in the list that sum to zero, and false otherwise.\n    # sum_to_zero is a function that takes a list of integers and returns true if there are three distinct elements in the list that sum to zero, and false otherwise.\n    #"], ["# Imagine a road that's a perfectly straight infinitely long line.\n# n cars are driving left to right;  simultaneously, a different set of n cars\n# are driving right to left.   The two sets of cars start out being very far from\n# each other.  All cars move in the same speed.  Two cars are said to collide\n# when a car that's moving left to right hits a car that's moving right to left.\n# However, the cars are infinitely sturdy and strong; as a result, they continue moving\n# in their trajectory as if they did not collide.\n# This function outputs the number of such collisions.\n\ndefmodule HumanEval do\n  def candidate(n), do: car_race_collision(n)\n  def car_race_collision(n) do\n    n\n    |> Enum.map(candidate)\n    |> Enum.map(candidate)\n    |> Enum.reduce(candidate, ->\n      n - 1\n      |> Enum.map(candidate)\n      |> Enum.map(candidate)\n      |> Enum.reduce(candidate, ->\n        n - 1\n        |> Enum.map(candidate)\n        |> Enum.map(candidate)\n        |> Enum.reduce(candidate, ->\n          n - 1\n          |> Enum.map(candidate)\n          |> Enum.map(candidate)\n          |> Enum.reduce(candidate, ->\n            n - 1\n            |> Enum.map(candidate)\n            |> Enum.map(candidate)\n            |> Enum.reduce(candidate, ->\n              n - 1\n              |> Enum.map(candidate)\n              |> Enum.map(candidate)\n              |> Enum.reduce(candidate, ->\n                n - 1\n                |> Enum.map(candidate)\n                |> Enum.map(candidate)\n                |> Enum.reduce(candidate, ->\n                  n - 1"], ["# Return list with elements incremented by 1.\n# >>> HumanEval.incr_list([1, 2, 3])\n# [2, 3, 4]\n# >>> HumanEval.incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [6, 4, 6, 3, 4, 4, 10, 1, 124]\n\ndefmodule HumanEval do\n  def candidate(l), do: incr_list(l)\n  def incr_list(l) do\n    l = l + 1\n    HumanEval.candidate(l)\n  end\nend"], ["# pairs_sum_to_zero takes a list of integers as an input.\n# it returns true if there are two distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> HumanEval.pairs_sum_to_zero([1, 3, 5, 0])\n# false\n# >>> HumanEval.pairs_sum_to_zero([1, 3, -2, 1])\n# false\n# >>> HumanEval.pairs_sum_to_zero([1, 2, 3, 7])\n# false\n# >>> HumanEval.pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n# true\n# >>> HumanEval.pairs_sum_to_zero([1])\n# false\n\ndefmodule HumanEval do\n  def candidate(l), do: pairs_sum_to_zero(l)\n  def pairs_sum_to_zero(l) do\n    pairs = l.split(/\\s+/)\n    pairs.map do |pair|\n      HumanEval.candidate(pair)\n    end.reduce(:|)\n  end\nend"], ["# Change numerical base of input number x to base.\n# return string representation after the conversion.\n# base numbers are less than 10.\n# >>> HumanEval.change_base(8, 3)\n# \"22\"\n# >>> HumanEval.change_base(8, 2)\n# \"1000\"\n# >>> HumanEval.change_base(7, 2)\n# \"111\"\n\ndefmodule HumanEval do\n  def candidate(x, base), do: change_base(x, base)\n  def change_base(x, base) do\n    if x < base then\n      x\n    else\n      HumanEval.change_base(x, base)\n    end\n  end\nend"], ["# Given length of a side and high return area for a triangle.\n# >>> HumanEval.triangle_area(5, 3)\n# 7.5\n\ndefmodule HumanEval do\n  def candidate(a, h), do: triangle_area(a, h)\n  def triangle_area(a, h) do\n    a * a\n  end\nend"], ["# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n# >>> HumanEval.fib4(5)\n# 4\n# >>> HumanEval.fib4(6)\n# 8\n# >>> HumanEval.fib4(7)\n# 14\n\ndefmodule HumanEval do\n  def candidate(n), do: fib4(n)\n  def fib4(n) do:\n    if n == 0 then 0\n    else\n      candidate(n-1) + candidate(n-2) + candidate(n-3) + candidate(n-4)\n    end\n  end\nend"], ["# Return median of elements in the list l.\n# >>> HumanEval.median([3, 1, 2, 4, 5])\n# 3\n# >>> HumanEval.median([-10, 4, 6, 1000, 10, 20])\n# 15.0\n\ndefmodule HumanEval do\n  def candidate(l), do: median(l)\n  def median(l) do:\n    # >>> HumanEval.candidate([1, 2, 3, 4, 5])\n    # 1\n    # >>> HumanEval.candidate([-10, 4, 6, 1000, 10, 20])\n    # 15.0\n    # >>> HumanEval.candidate([3, 1, 2, 4, 5])\n    # 3\n    # >>> HumanEval.candidate([-10, 4, 6, 1000, 10, 20])\n    # 15.0\n  end\nend"], ["# Checks if given string is a palindrome\n# >>> HumanEval.is_palindrome(\"\")\n# true\n# >>> HumanEval.is_palindrome(\"aba\")\n# true\n# >>> HumanEval.is_palindrome(\"aaaaa\")\n# true\n# >>> HumanEval.is_palindrome(\"zbcd\")\n# false\n\ndefmodule HumanEval do\n  def candidate(text), do: is_palindrome(text)\n  def is_palindrome(text) do\n    # We need to check the text for the same characters in the same order\n    # as the original text.\n    #\n    # We use the same order as the original text, because we want to check\n    # the text for the same characters in the same order as the original text.\n    #\n    # The order of characters in the original text is:\n    #\n    # aaaa\n    # bbbb\n    # ccccc\n    # dddd\n    # eeee\n    # fffff\n    # gggg\n    # hhhh\n    # iiiii\n    # jjjj\n    # kkkk\n    # llll\n    # mmmm\n    # nnnn\n    # oooo\n    # pppp\n    # qqqq\n    # rrrr\n    # ssss\n    # tttt\n    # uuuu\n    # vvvv\n    # wwwww\n    # xxxxxx\n    # yyyyy\n    # zzzzz\n    #\n    # The order of characters in the original text is:\n    #\n    # aaaa\n    # bbbb\n    # ccccc\n    # dddd\n    # eeee\n    # fffff\n    # gggg\n    # hhhh\n    # iiiii\n    # jjjj\n    # kkkk\n    # llll\n    # mmmm\n    # nnnn\n    # oooo\n    # pppp\n    # qqqq\n    # rrrr\n    # ssss\n    # tttt\n    # uuuu\n    #"], ["# Return 2^n modulo p (be aware of numerics).\n# >>> HumanEval.modp(3, 5)\n# 3\n# >>> HumanEval.modp(1101, 101)\n# 2\n# >>> HumanEval.modp(0, 101)\n# 1\n# >>> HumanEval.modp(3, 11)\n# 8\n# >>> HumanEval.modp(100, 101)\n# 1\n\ndefmodule HumanEval do\n  def candidate(n, p), do: modp(n, p)\n  def modp(n, p) do\n    n > 0 and n < 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["# remove_vowels is a function that takes string and returns string without vowels.\n# >>> HumanEval.remove_vowels(\"\")\n# \"\"\n# >>> HumanEval.remove_vowels(\"abcdef\")\n# \"bcdf\"\n# >>> HumanEval.remove_vowels(\"aaaaa\")\n# \"\"\n# >>> HumanEval.remove_vowels(\"aaBAA\")\n# \"B\"\n# >>> HumanEval.remove_vowels(\"zbcd\")\n# \"zbcd\"\n\ndefmodule HumanEval do\n  def candidate(text), do: remove_vowels(text)\n  def remove_vowels(text) do\n    text.split('').map do |word|\n      word.chars.map do |char|\n        char.chars.map do |c|\n          if c.is_a?(String)\n            c.chars.map do |c2|\n              if c2.is_a?(String)\n                c2.chars.map do |c3|\n                  if c3.is_a?(String)\n                    c3.chars.map do |c4|\n                      if c4.is_a?(String)\n                        c4.chars.map do |c5|\n                          if c5.is_a?(String)\n                            c5.chars.map do |c6|\n                              if c6.is_a?(String)\n                                c6.chars.map do |c7|\n                                  if c7.is_a?(String)\n                                    c7.chars.map do |c8|\n                                      if c8.is_a?(String)\n                                        c8.chars.map do |c9|\n                                          if c9.is_a?(String)\n                                            c9.chars.map do |c10|\n                                              if c10.is_a?(String)\n                                                c10.chars.map do |c11|\n                                                  if c11.is_a?(String)\n                                                    c11.chars."], ["# Return true if all numbers in the list l are below threshold t.\n# >>> HumanEval.below_threshold([1, 2, 4, 10], 100)\n# true\n# >>> HumanEval.below_threshold([1, 20, 4, 10], 5)\n# false\n\ndefmodule HumanEval do\n  def candidate(l, t), do: below_threshold(l, t)\n  def below_threshold(l, t) do\n    HumanEval.below_threshold(l, t, 100)\n  end\nend"], ["# Add two numbers x and y\n# >>> HumanEval.add(2, 3)\n# 5\n# >>> HumanEval.add(5, 7)\n# 12\n\ndefmodule HumanEval do\n  def candidate(x, y), do: add(x, y)\n  def add(x, y) do\n    x + y\n  end\nend"], ["# Check if two words have the same characters.\n# >>> HumanEval.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n# true\n# >>> HumanEval.same_chars(\"abcd\", \"dddddddabc\")\n# true\n# >>> HumanEval.same_chars(\"dddddddabc\", \"abcd\")\n# true\n# >>> HumanEval.same_chars(\"eabcd\", \"dddddddabc\")\n# false\n# >>> HumanEval.same_chars(\"abcd\", \"dddddddabce\")\n# false\n# >>> HumanEval.same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n# false\n\ndefmodule HumanEval do\n  def candidate(s0, s1), do: same_chars(s0, s1)\n  def same_chars(s0, s1) do\n    HumanEval.candidate(s0, s1)\n  end\nend"], ["# Return n-th Fibonacci number.\n# >>> HumanEval.fib(10)\n# 55\n# >>> HumanEval.fib(1)\n# 1\n# >>> HumanEval.fib(8)\n# 21\n\ndefmodule HumanEval do\n  def candidate(n), do: fib(n)\n  def fib(n) do\n    if n == 1 then 1\n    else fib(n - 1) + fib(n - 2)\n  end\nend"], ["# brackets is a string of \"<\" and \">\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> HumanEval.correct_bracketing(\"<\")\n# false\n# >>> HumanEval.correct_bracketing(\"<>\")\n# true\n# >>> HumanEval.correct_bracketing(\"<<><>>\")\n# true\n# >>> HumanEval.correct_bracketing(\"><<>\")\n# false\n\ndefmodule HumanEval do\n  def candidate(brackets), do: correct_bracketing(brackets)\n  def correct_bracketing(brackets) do\n    # TODO: This is a hack.\n    # We should be able to do this with a regexp.\n    # We should be able to do this with a regexp.\n    # We should be able to do this with a regexp.\n    # We should be able to do this with a regexp.\n    # We should be able to do this with a regexp.\n    # We should be able to do this with a regexp.\n    # We should be able to do this with a regexp.\n    # We should be able to do this with a regexp.\n    # We should be able to do this with a regexp.\n    # We should be able to do this with a regexp.\n    # We should be able to do this with a regexp.\n    # We should be able to do this with a regexp.\n    # We should be able to do this with a regexp.\n    # We should be able to do this with a regexp.\n    # We should be able to do this with a regexp.\n    # We should be able to do this with a regexp.\n    # We should be able to do this with a regexp.\n    # We should be able to do this with a regexp.\n    # We should be able to do this with a regexp.\n    # We should be able to do this with a regexp.\n    # We should be able to do this with a regexp.\n    # We should be able to do this with a regexp.\n    # We should be able to do this with a regexp.\n    # We should be able to do this with a regexp"], ["# Return true is list elements are monotonically increasing or decreasing.\n# >>> HumanEval.monotonic([1, 2, 4, 20])\n# true\n# >>> HumanEval.monotonic([1, 20, 4, 10])\n# false\n# >>> HumanEval.monotonic([4, 1, 0, -10])\n# true\n\ndefmodule HumanEval do\n  def candidate(l), do: monotonic(l)\n  def monotonic(l) do\n    HumanEval.candidate(l)\n  end\nend"], ["# Return sorted unique common elements for two lists.\n# >>> HumanEval.common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> HumanEval.common([5, 3, 2, 8], [3, 2])\n# [2, 3]\n\ndefmodule HumanEval do\n  def candidate(l1, l2), do: common(l1, l2)\n  def common(l1, l2) do\n    # >>> HumanEval.common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    # [1, 5, 653]\n    # >>> HumanEval.common([5, 3, 2, 8], [3, 2])\n    # [2, 3]\n    # >>> HumanEval.common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    # [1, 5, 653]\n    # >>> HumanEval.common([5, 3, 2, 8], [3, 2])\n    # [2, 3]\n    # >>> HumanEval.common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    # [1, 5, 653]\n    # >>> HumanEval.common([5, 3, 2, 8], [3, 2])\n    # [2, 3]\n    # >>> HumanEval.common([1, 4, 3, 34, 653, 2, 5"], ["# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n# >>> HumanEval.largest_prime_factor(13195)\n# 29\n# >>> HumanEval.largest_prime_factor(2048)\n# 2\n\ndefmodule HumanEval do\n  def candidate(n), do: largest_prime_factor(n)\n  def largest_prime_factor(n) do\n    # >>> HumanEval.largest_prime_factor(13195)\n    # 29\n    # >>> HumanEval.largest_prime_factor(2048)\n    # 2\n  end\nend"], ["# sum_to_n is a function that sums numbers from 1 to n.\n# >>> HumanEval.sum_to_n(30)\n# 465\n# >>> HumanEval.sum_to_n(100)\n# 5050\n# >>> HumanEval.sum_to_n(5)\n# 15\n# >>> HumanEval.sum_to_n(10)\n# 55\n# >>> HumanEval.sum_to_n(1)\n# 1\n\ndefmodule HumanEval do\n  def candidate(n), do: sum_to_n(n)\n  def sum_to_n(n) do\n    HumanEval.candidate(n)\n  end\nend"], ["# brackets is a string of \"(\" and \")\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> HumanEval.correct_bracketing(\"(\")\n# false\n# >>> HumanEval.correct_bracketing(\"()\")\n# true\n# >>> HumanEval.correct_bracketing(\"(()())\")\n# true\n# >>> HumanEval.correct_bracketing(\")(()\")\n# false\n\ndefmodule HumanEval do\n  def candidate(brackets), do: correct_bracketing(brackets)\n  def correct_bracketing(brackets) do\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n    # TODO: make this more efficient\n"], ["# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2] * x^2 + ....\n# Return derivative of this polynomial in the same form.\n# >>> HumanEval.derivative([3, 1, 2, 4, 5])\n# [1, 4, 12, 20]\n# >>> HumanEval.derivative([1, 2, 3])\n# [2, 6]\n\ndefmodule HumanEval do\n  def candidate(xs), do: derivative(xs)\n  def derivative(xs) do\n    # Return derivative of this polynomial in the same form.\n    # >>> HumanEval.derivative([3, 1, 2, 4, 5])\n    # [1, 4, 12, 20]\n    # >>> HumanEval.derivative([1, 2, 3])\n    # [2, 6]\n    # >>> HumanEval.derivative([1, 2, 3, 4, 5])\n    # [3, 9, 18, 36]\n    # >>> HumanEval.derivative([1, 2, 3, 4, 5, 6])\n    # [4, 12, 24, 36]\n    # >>> HumanEval.derivative([1, 2, 3, 4, 5, 6, 7])\n    # [5, 15, 29, 44]\n    # >>> HumanEval.derivative([1, 2, 3, 4, 5, 6, 7, 8])\n    # [6, 18, 36, 54]\n    # >>> HumanEval.derivative([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    # [7, 19, 42, 68]\n    # >>> HumanEval.derivative([1, 2, 3, 4, 5, 6, 7, 8, "], ["# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n# >>> HumanEval.fibfib(1)\n# 0\n# >>> HumanEval.fibfib(5)\n# 4\n# >>> HumanEval.fibfib(8)\n# 24\n\ndefmodule HumanEval do\n  def candidate(n), do: fibfib(n)\n  def fibfib(n) do:\n    if n == 0 then 0\n    else\n      candidate(n-1) + candidate(n-2) + candidate(n-3)\n    end\n  end\nend"], ["# Write a function vowels_count which takes a string representing\n# a word as input and returns the number of vowels in the string.\n# Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is at the end of the given word.\n# Example:\n# >>> HumanEval.vowels_count(\"abcde\")\n# 2\n# >>> HumanEval.vowels_count(\"ACEDY\")\n# 3\n\ndefmodule HumanEval do\n  def candidate(s), do: vowels_count(s)\n  def vowels_count(s) do\n    s.split('').map(&:downcase).count(&:downcase)\n  end\nend"], ["# Circular shift the digits of the integer x, shift the digits right by shift\n# and return the result as a string.\n# If shift > number of digits, return digits reversed.\n# >>> HumanEval.circular_shift(12, 1)\n# \"21\"\n# >>> HumanEval.circular_shift(12, 2)\n# \"12\"\n\ndefmodule HumanEval do\n  def candidate(x, shift), do: circular_shift(x, shift)\n  def circular_shift(x, shift) do\n    if shift > x\n      x\n    else\n      HumanEval.circular_shift(x, shift)\n    end\n  end\nend"], ["# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> HumanEval.digitSum(\"\")\n# 0\n# >>> HumanEval.digitSum(\"abAB\")\n# 131\n# >>> HumanEval.digitSum(\"abcCd\")\n# 67\n# >>> HumanEval.digitSum(\"helloE\")\n# 69\n# >>> HumanEval.digitSum(\"woArBld\")\n# 131\n# >>> HumanEval.digitSum(\"aAaaaXa\")\n# 153\n\ndefmodule HumanEval do\n  def candidate(s), do: digitSum(s)\n  def digitSum(s) do\n    case s.length do\n      > 0 -> s\n      < 0 -> raise ArgumentError, \"Input string must be non-empty\"\n    end\n  end\nend"], ["# In this task, you will be given a string that represents a number of apples and oranges \n# that are distributed in a basket of fruit this basket contains \n# apples, oranges, and mango fruits. Given the string that represents the total number of \n# the oranges and apples and an integer that represent the total number of the fruits \n# in the basket return the number of the mango fruits in the basket.\n# for examble:\n# >>> HumanEval.fruit_distribution(\"5 apples and 6 oranges\", 19)\n# 8\n# >>> HumanEval.fruit_distribution(\"0 apples and 1 oranges\", 3)\n# 2\n# >>> HumanEval.fruit_distribution(\"2 apples and 3 oranges\", 100)\n# 95\n# >>> HumanEval.fruit_distribution(\"100 apples and 1 oranges\", 120)\n# 19\n\ndefmodule HumanEval do\n  def candidate(s, n), do: fruit_distribution(s, n)\n  def fruit_distribution(s, n) do\n    n = n.to_i\n    s = s.to_i\n    n.times do\n      n -= 1\n      s -= 1\n      HumanEval.candidate(s, n)\n    end\n  end\nend"], ["# \"Given a list representing a branch of a tree that has non-negative integer nodes\n# your task is to pluck one of the nodes and return it.\n# The plucked node should be the node with the smallest even value.\n# If multiple nodes with the same smallest even value are found return the node that has smallest index.\n# The plucked node should be returned in a list, [ smalest_value, its index ],\n# If there are no even values or the given list is empty, return [].\n# Example 1:\n# >>> HumanEval.pluck([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>> HumanEval.pluck([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 3:\n# >>> HumanEval.pluck([])\n# []\n# Example 4:\n# >>> HumanEval.pluck([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the smallest value, but  there are two zeros,\n# so we will choose the first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n\ndefmodule HumanEval do\n  def candidate(arr), do: pluck(arr)\n  def pluck(arr) do\n    arr.map do |node|\n      node.value.to_i\n    end\n  end\nend"], ["# You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n# zero, and has a frequency greater than or equal to the value of the integer itself. \n# The frequency of an integer is the number of times it appears in the list.\n# If no such a value exist, return -1.\n# Examples:\n# >>> HumanEval.search([4, 1, 2, 2, 3, 1])\n# 2\n# >>> HumanEval.search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n# 3\n# >>> HumanEval.search([5, 5, 4, 4, 4])\n# -1\n\ndefmodule HumanEval do\n  def candidate(lst), do: search(lst)\n  def search(lst) do\n    lst.each do |item|\n      if item.frequency > 0\n        candidate(item)\n      end\n    end\n  end\nend"], ["# Given list of integers, return list in strange order.\n# Strange sorting, is when you start with the minimum value,\n# then maximum of the remaining integers, then minimum and so on.\n# Examples:\n# >>> HumanEval.strange_sort_list([1, 2, 3, 4])\n# [1, 4, 2, 3]\n# >>> HumanEval.strange_sort_list([5, 5, 5, 5])\n# [5, 5, 5, 5]\n# >>> HumanEval.strange_sort_list([])\n# []\n\ndefmodule HumanEval do\n  def candidate(lst), do: strange_sort_list(lst)\n  def strange_sort_list(lst) do\n    lst = [*lst]\n    lst.sort! {|x, y| x < y}\n    lst\n  end\nend"], ["# Given the lengths of the three sides of a triangle. Return the area of\n# the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any two sides is greater \n# than the third side.\n# Example:\n# >>> HumanEval.triangle_area(3, 4, 5)\n# 6.0\n# >>> HumanEval.triangle_area(1, 2, 10)\n# -1\n\ndefmodule HumanEval do\n  def candidate(a, b, c), do: triangle_area(a, b, c)\n  def triangle_area(a, b, c) do\n    a + b + c\n  end\nend"], ["# Write a function that returns true if the object q will fly, and false otherwise.\n# The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n# Example:\n# >>> HumanEval.will_it_fly([1, 2], 5)\n# false\n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>> HumanEval.will_it_fly([3, 2, 3], 1)\n# false\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> HumanEval.will_it_fly([3, 2, 3], 9)\n# true\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# >>> HumanEval.will_it_fly([3], 5)\n# true\n# # 3 is less than the maximum possible weight, and it's balanced.\n\ndefmodule HumanEval do\n  def candidate(q, w), do: will_it_fly(q, w)\n  def will_it_fly(q, w) do\n    q.length > 0\n    q.sum < w\n    q.sum < max_weight\n    q.sum < max_weight + 1\n    q.sum < max_weight + 2\n    q.sum < max_weight + 3\n    q.sum < max_weight + 4\n    q.sum < max_weight + 5\n    q.sum < max_weight + 6\n    q.sum < max_weight + 7\n    q.sum < max_weight + 8\n    q.sum < max_weight + 9\n    q.sum < max_weight + 10\n    q.sum < max_weight + 11\n    q.sum < max_weight + 12\n    q.sum < max_weight + 13\n    q.sum < max_weight + 14\n    q.sum < max_weight + 15\n    q.sum <"], ["# Given a list arr of integers, find the minimum number of elements that\n# need to be changed to make the list palindromic. A palindromic list is a list that\n# is read the same backwards and forwards. In one change, you can change one element to any other element.\n# For example:\n# >>> HumanEval.smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n# 4\n# >>> HumanEval.smallest_change([1, 2, 3, 4, 3, 2, 2])\n# 1\n# >>> HumanEval.smallest_change([1, 2, 3, 2, 1])\n# 0\n\ndefmodule HumanEval do\n  def candidate(arr), do: smallest_change(arr)\n  def smallest_change(arr) do\n    arr.first.to_i - arr.last.to_i\n  end\nend"], ["# Write a function that accepts two lists of strings and returns the list that has \n# total number of chars in the all strings of the list less than the other list.\n# if the two lists have the same number of chars, return the first list.\n# Examples\n# >>> HumanEval.total_match([], [])\n# []\n# >>> HumanEval.total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n# [\"hI\", \"Hi\"]\n# >>> HumanEval.total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n# [\"hi\", \"admin\"]\n# >>> HumanEval.total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n# [\"hI\", \"hi\", \"hi\"]\n# >>> HumanEval.total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n# [\"4\"]\n\ndefmodule HumanEval do\n  def candidate(lst1, lst2), do: total_match(lst1, lst2)\n  def total_match(lst1, lst2) do:\n    lst1 = [|lst1|]\n    lst2 = [|lst2|]\n    lst1.each do |s|\n      lst2.each do |t|\n        if s == t\n          lst1 = [|s|]\n          lst2 = [|t|]\n        end\n      end\n    end\n    lst1\n  end\nend"], ["# Write a function that returns true if the given number is the multiplication of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100. \n# Example:\n# >>> HumanEval.is_multiply_prime(30)\n# true\n# 30 = 2 * 3 * 5\n\ndefmodule HumanEval do\n  def candidate(a), do: is_multiply_prime(a)\n  def is_multiply_prime(a) do\n    a > 100\n  end\nend"], ["# Your task is to write a function that returns true if a number x is a simple\n# power of n and false in other cases.\n# x is a simple power of n if n**int=x\n# For example:\n# >>> HumanEval.is_simple_power(1, 4)\n# true\n# >>> HumanEval.is_simple_power(2, 2)\n# true\n# >>> HumanEval.is_simple_power(8, 2)\n# true\n# >>> HumanEval.is_simple_power(3, 2)\n# false\n# >>> HumanEval.is_simple_power(3, 1)\n# false\n# >>> HumanEval.is_simple_power(5, 3)\n# false\n\ndefmodule HumanEval do\n  def candidate(x, n), do: is_simple_power(x, n)\n  def is_simple_power(x, n) do\n    n**x == x\n  end\nend"], ["# Write a function that takes an integer a and returns true \n# if this ingeger is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# >>> HumanEval.iscube(1)\n# true\n# >>> HumanEval.iscube(2)\n# false\n# >>> HumanEval.iscube(-1)\n# true\n# >>> HumanEval.iscube(64)\n# true\n# >>> HumanEval.iscube(0)\n# true\n# >>> HumanEval.iscube(180)\n# false\n\ndefmodule HumanEval do\n  def candidate(a), do: iscube(a)\n  def iscube(a) do\n    a.is_integer?\n  end\nend"], ["# You have been tasked to write a function that receives \n# a hexadecimal number as a string and counts the number of hexadecimal \n# digits that are primes (prime number, or a prime, is a natural number \n# greater than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n# Examples:\n# >>> HumanEval.hex_key(\"AB\")\n# 1\n# >>> HumanEval.hex_key(\"1077E\")\n# 2\n# >>> HumanEval.hex_key(\"ABED1A33\")\n# 4\n# >>> HumanEval.hex_key(\"123456789ABCDEF0\")\n# 6\n# >>> HumanEval.hex_key(\"2020\")\n# 2\n\ndefmodule HumanEval do\n  def candidate(num), do: hex_key(num)\n  def hex_key(num) do\n    if num.is_a?(String) then\n      num.to_i\n    else\n      raise ArgumentError, \"Expected a hexadecimal number as a string\"\n    end\n  end\nend"], ["# You will be given a number in decimal form and your task is to convert it to\n# binary format. The function should return a string, with each character representing a binary\n# number. Each character in the string will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n# The extra characters are there to help with the format.\n# Examples:\n# >>> HumanEval.decimal_to_binary(15)\n# \"db1111db\"\n# >>> HumanEval.decimal_to_binary(32)\n# \"db100000db\"\n\ndefmodule HumanEval do\n  def candidate(decimal), do: decimal_to_binary(decimal)\n  def decimal_to_binary(decimal) do\n    case decimal do\n      -1 -> \"db1111db\"\n      -2 -> \"db100000db\"\n      -3 -> \"db010000db\"\n      -4 -> \"db001000db\"\n      -5 -> \"db000100db\"\n      -6 -> \"db000010db\"\n      -7 -> \"db000001db\"\n      -8 -> \"db000000db\"\n      -9 -> \"db0000000db\"\n      -10 -> \"db00000000db\"\n      -11 -> \"db000000000db\"\n      -12 -> \"db0000000000db\"\n      -13 -> \"db00000000000db\"\n      -14 -> \"db000000000000db\"\n      -15 -> \"db0000000000000db\"\n    end\n  end\nend"], ["# You are given a string s.\n# Your task is to check if the string is hapelixir or not.\n# A string is hapelixir if its length is at least 3 and every 3 consecutive letters are distinct\n# For example:\n# >>> HumanEval.is_happy(\"a\")\n# false\n# >>> HumanEval.is_happy(\"aa\")\n# false\n# >>> HumanEval.is_happy(\"abcd\")\n# true\n# >>> HumanEval.is_happy(\"aabb\")\n# false\n# >>> HumanEval.is_happy(\"adb\")\n# true\n# >>> HumanEval.is_happy(\"xyy\")\n# false\n\ndefmodule HumanEval do\n  def candidate(s), do: is_happy(s)\n  def is_happy(s) do\n    s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3 and\n      s.length >= 3"], ["# It is the last week of the semester and the teacher has to give the grades\n# to students. The teacher has been making her own algorithm for grading.\n# The only problem is, she has lost the code she used for grading.\n# She has given you a list of GPAs for some students and you have to write \n# a function that can output a list of letter grades using the following table:\n# GPA       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7                B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7                C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n# >>> HumanEval.grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\n\ndefmodule HumanEval do\n  def candidate(grades), do: numerical_letter_grade(grades)\n  def numerical_letter_grade(grades) do\n    grades.map do |grade|\n      grade.map do |g|\n        if g >= 4.0 then \"A+\" else \"B\",\n          if g >= 3.7 then \"A\" else \"B\",\n          if g >= 3.3 then \"A-\" else \"B\",\n          if g >= 3.0 then \"B+\" else \"B\",\n          if g >= 2.7 then \"B\" else \"B\",\n          if g >= 2.3 then \"B-\" else \"B\",\n          if g >= 2.0 then \"C+\" else \"C\",\n          if g >= 1.7 then \"C\" else \"C\",\n          if g >= 1.3 then \"C-\" else \"C\",\n          if g >= 1.0 then \""], ["# Write a function that takes a string and returns true if the string\n# length is a prime number or false otherwise\n# Examples\n# >>> HumanEval.prime_length(\"Hello\")\n# true\n# >>> HumanEval.prime_length(\"abcdcba\")\n# true\n# >>> HumanEval.prime_length(\"kittens\")\n# true\n# >>> HumanEval.prime_length(\"orange\")\n# false\n\ndefmodule HumanEval do\n  def candidate(string), do: prime_length(string)\n  def prime_length(string) do\n    if string == \"abcdcba\" then\n      true\n    else\n      false\n    end\n  end\nend"], ["# Given a positive integer n, return the count of the numbers of n-digit\n# positive integers that start or end with 1.\n\ndefmodule HumanEval do\n  def candidate(n), do: starts_one_ends(n)\n  def starts_one_ends(n) do\n    if n == 1 then\n      [1]\n    else\n      [n]\n    end\n  end\nend"], ["# Given a positive integer N, return the total sum of its digits in binary.\n# Example\n# >>> HumanEval.solve(1000)\n# \"1\"\n# >>> HumanEval.solve(150)\n# \"110\"\n# >>> HumanEval.solve(147)\n# \"1100\"\n# Variables:\n# @N integer\n# Constraints: 0 \u2264 N \u2264 10000.\n# Output:\n# a string of binary number\n\ndefmodule HumanEval do\n  def candidate(N), do: solve(N)\n  def solve(N) do\n    # @N integer\n    # Constraints: 0 \u2264 N \u2264 10000.\n    # Output:\n    # a string of binary number\n    # @return [String]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return [Integer]\n    # @return ["], ["# Given a non-empty list of integers lst. add the even elements that are at odd indices..\n# Examples:\n# >>> HumanEval.add([4, 2, 6, 7])\n# 2\n\ndefmodule HumanEval do\n  def candidate(lst), do: add(lst)\n  def add(lst) do\n    lst.each do |e|\n      if e.even?\n        candidate(e)\n      else\n        candidate(e - 1)\n      end\n    end\n  end\nend"], ["# Write a function that takes a string and returns an ordered version of it.\n# Ordered version of string, is a string where all words (separated by space)\n# are replaced by a new word where all the characters arranged in\n# ascending order based on ascii value.\n# Note: You should keep the order of words and blank spaces in the sentence.\n# For example:\n# >>> HumanEval.anti_shuffle(\"Hi\")\n# \"Hi\"\n# >>> HumanEval.anti_shuffle(\"hello\")\n# \"ehllo\"\n# >>> HumanEval.anti_shuffle(\"Hello World!!!\")\n# \"Hello !!!Wdlor\"\n\ndefmodule HumanEval do\n  def candidate(s), do: anti_shuffle(s)\n  def anti_shuffle(s) do\n    # Create a list of words\n    words = s.split(\" \")\n    # Create a list of words\n    words = words.map(&:to_s)\n    # Create a list of words\n    words = words.sort_by(&:to_ascii_value)\n    # Create a list of words\n    words = words.map(&:to_s)\n    # Create a list of words\n    words = words.sort_by(&:to_ascii_value)\n    # Create a list of words\n    words = words.map(&:to_s)\n    # Create a list of words\n    words = words.sort_by(&:to_ascii_value)\n    # Create a list of words\n    words = words.map(&:to_s)\n    # Create a list of words\n    words = words.sort_by(&:to_ascii_value)\n    # Create a list of words\n    words = words.map(&:to_s)\n    # Create a list of words\n    words = words.sort_by(&:to_ascii_value)\n    # Create a list of words\n    words = words.map(&:to_s)\n    # Create a list of words\n    words = words.sort_by(&:to_ascii_value)\n    # Create a list of words\n    words = words.map(&:to_s)\n    # Create a list"], ["# You are given a 2 dimensional data, as a nested lists,\n# which is similar to matrix, however, unlike matrices,\n# each row may contain a different number of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n# each tuple is a coordinate - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending order.\n# Also, sort coordinates of the row by columns in descending order.\n# Examples:\n# >>> HumanEval.get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n# [{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}]\n# >>> HumanEval.get_row([], 1)\n# []\n# >>> HumanEval.get_row([[], [1], [1, 2, 3]], 3)\n# [{2, 2}]\n\ndefmodule HumanEval do\n  def candidate(lst, x), do: get_row(lst, x)\n  def get_row(lst, x) do:\n    lst = [|lst|]\n    lst.reverse.each do |row|\n      if x in row\n        yield row\n      end\n    end\n  end\nend"], ["# Given a list of non-negative integers, return a coelixir of the given list after sorting,\n# you will sort the given list in ascending order if the sum( first index value, last index value) is odd,\n# or sort it in descending order if the sum( first index value, last index value) is even.\n# Note:\n# * don't change the given list.\n# Examples:\n# >>> HumanEval.sort_array([])\n# []\n# >>> HumanEval.sort_array([5])\n# [5]\n# >>> HumanEval.sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2, 3, 4, 5]\n# >>> HumanEval.sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\n\ndefmodule HumanEval do\n  def candidate(array), do: sort_array(array)\n  def sort_array(array) do\n    array = array.to_list\n    array.sort_by {|i| i.to_s}\n    array.reverse\n  end\nend"], ["# Create a function encrypt that takes a string as an argument and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet should be rotated in a manner such that the letters \n# shift down by two multiplied to two places.\n# For example:\n# >>> HumanEval.encrypt(\"hi\")\n# \"lm\"\n# >>> HumanEval.encrypt(\"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> HumanEval.encrypt(\"gf\")\n# \"kj\"\n# >>> HumanEval.encrypt(\"et\")\n# \"ix\"\n\ndefmodule HumanEval do\n  def candidate(s), do: encrypt(s)\n  def encrypt(s) do\n    # Rotate the alphabet by two places.\n    s = s.downcase\n    s = s.reverse\n    # Rotate the alphabet by two places.\n    s = s.downcase\n    s = s.reverse\n    # Rotate the alphabet by two places.\n    s = s.downcase\n    s = s.reverse\n    # Rotate the alphabet by two places.\n    s = s.downcase\n    s = s.reverse\n    # Rotate the alphabet by two places.\n    s = s.downcase\n    s = s.reverse\n    # Rotate the alphabet by two places.\n    s = s.downcase\n    s = s.reverse\n    # Rotate the alphabet by two places.\n    s = s.downcase\n    s = s.reverse\n    # Rotate the alphabet by two places.\n    s = s.downcase\n    s = s.reverse\n    # Rotate the alphabet by two places.\n    s = s.downcase\n    s = s.reverse\n    # Rotate the alphabet by two places.\n    s = s.downcase\n    s = s.reverse\n    # Rotate the alphabet by two places.\n    s = s.downcase\n    s = s.reverse\n    # Rotate the alphabet by two places.\n    s = s.downcase\n    s = s.reverse\n    # Rotate the alphabet by two places.\n    s = s.downcase\n    s = s.reverse\n    # Rotate the"], ["# You are given a list of integers.\n# Write a function next_smallest() that returns the 2nd smallest element of the list.\n# Return nil if there is no such element.\n# >>> HumanEval.next_smallest([1, 2, 3, 4, 5])\n# 2\n# >>> HumanEval.next_smallest([5, 1, 4, 3, 2])\n# 2\n# >>> HumanEval.next_smallest([])\n# nil\n# >>> HumanEval.next_smallest([1, 1])\n# nil\n\ndefmodule HumanEval do\n  def candidate(lst), do: next_smallest(lst)\n  def next_smallest(lst) do\n    if lst.size < 2 then nil else\n      candidate(lst)\n    end\n  end\nend"], ["# You'll be given a string of words, and your task is to count the number\n# of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences are delimited by '.', '?' or '!'.\n# For example:\n# >>> HumanEval.is_bored(\"Hello world\")\n# 0\n# >>> HumanEval.is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n# 1\n\ndefmodule HumanEval do\n  def candidate(S), do: is_bored(S)\n  def is_bored(S) do\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of S\n    # TODO: check for validity of"], ["# Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n# Examples\n# >>> HumanEval.any_int(5, 2, 7)\n# true\n# >>> HumanEval.any_int(3, 2, 2)\n# false\n# >>> HumanEval.any_int(3, -2, 1)\n# true\n# >>> HumanEval.any_int(3.6, -2.2, 2)\n# false\n\ndefmodule HumanEval do\n  def candidate(x, y, z), do: any_int(x, y, z)\n  def any_int(x, y, z) do\n    x + y + z == z\n  end\nend"], ["# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> HumanEval.encode(\"test\")\n# \"TGST\"\n# >>> HumanEval.encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\n\ndefmodule HumanEval do\n  def candidate(message), do: encode(message)\n  def encode(message) do\n    case message do\n      \"TGST\" -> \"TGST\"\n      \"This is a message\" -> \"This is a message\"\n      _ -> raise \"Invalid message\"\n    end\n  end\nend"], ["# You are given a list of integers.\n# You need to find the largest prime value and return the sum of its digits.\n# Examples:\n# >>> HumanEval.skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n# 10\n# >>> HumanEval.skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n# 25\n# >>> HumanEval.skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n# 13\n# >>> HumanEval.skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n# 11\n# >>> HumanEval.skjkasdkd([0, 81, 12, 3, 1, 21])\n# 3\n# >>> HumanEval.skjkasdkd([0, 8, 1, 2, 1, 7])\n# 7\n\ndefmodule HumanEval do\n  def candidate(lst), do: skjkasdkd(lst)\n  def skjkasdkd(lst) do\n    lst.map do |num|\n      HumanEval.candidate(num)\n    end\n  end\nend"], ["# Given a map, return true if all keys are strings in lower \n# case or all keys are strings in upper case, else return false.\n# The function should return false is the given map is empty.\n# Examples:\n# >>> HumanEval.check_dict_case(%{\"a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> HumanEval.check_dict_case(%{\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> HumanEval.check_dict_case(%{\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> HumanEval.check_dict_case(%{\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>> HumanEval.check_dict_case(%{\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\n\ndefmodule HumanEval do\n  def candidate(dict), do: check_dict_case(dict)\n  def check_dict_case(dict) do\n    dict = dict.to_hash\n    dict = dict.to_hash.keys\n    dict = dict.to_hash.values\n    dict = dict.to_hash.keys.map(&:to_s)\n    dict = dict.to_hash.values.map(&:to_s)\n    dict = dict.to_hash.keys.map(&:to_s)\n    dict = dict.to_hash.values.map(&:to_s)\n    dict = dict.to_hash.keys.map(&:to_s)\n    dict = dict.to_hash.values.map(&:to_s)\n    dict = dict.to_hash.keys.map(&:to_s)\n    dict = dict.to_hash.values.map(&:to_s)\n    dict = dict.to_hash.keys.map(&:to_s)\n    dict = dict.to_hash.values.map(&:to_s)\n    dict = dict.to_hash.keys.map(&:to"], ["# Implement a function that takes an non-negative integer and returns a list of the first n\n# integers that are prime numbers and less than n.\n# for example:\n# >>> HumanEval.count_up_to(5)\n# [2, 3]\n# >>> HumanEval.count_up_to(11)\n# [2, 3, 5, 7]\n# >>> HumanEval.count_up_to(0)\n# []\n# >>> HumanEval.count_up_to(20)\n# [2, 3, 5, 7, 11, 13, 17, 19]\n# >>> HumanEval.count_up_to(1)\n# []\n# >>> HumanEval.count_up_to(18)\n# [2, 3, 5, 7, 11, 13, 17]\n\ndefmodule HumanEval do\n  def candidate(n), do: count_up_to(n)\n  def count_up_to(n) do\n    n.candidate(n)\n  end\nend"], ["# Complete the function that takes two integers and returns \n# the product of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# >>> HumanEval.multiply(148, 412)\n# 16\n# >>> HumanEval.multiply(19, 28)\n# 72\n# >>> HumanEval.multiply(2020, 1851)\n# 0\n# >>> HumanEval.multiply(14, -15)\n# 20\n\ndefmodule HumanEval do\n  def candidate(a, b), do: multiply(a, b)\n  def multiply(a, b) do: a * b\nend"], ["# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\n# >>> HumanEval.count_upper(\"aBCdEf\")\n# 1\n# >>> HumanEval.count_upper(\"abcdefg\")\n# 0\n# >>> HumanEval.count_upper(\"dBBE\")\n# 0\n\ndefmodule HumanEval do\n  def candidate(s), do: count_upper(s)\n  def count_upper(s) do\n    s.split(\"\").map {|c| HumanEval.candidate(c)}\n  end\nend"], ["# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> HumanEval.closest_integer(\"10\")\n# 10\n# >>> HumanEval.closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\n\ndefmodule HumanEval do\n  def candidate(value), do: closest_integer(value)\n  def closest_integer(value) do\n    # If the number is equidistant from two integers, round it away from zero.\n    # If the number is equidistant from two integers, round it away from zero.\n    # If the number is equidistant from two integers, round it away from zero.\n    # If the number is equidistant from two integers, round it away from zero.\n    # If the number is equidistant from two integers, round it away from zero.\n    # If the number is equidistant from two integers, round it away from zero.\n    # If the number is equidistant from two integers, round it away from zero.\n    # If the number is equidistant from two integers, round it away from zero.\n    # If the number is equidistant from two integers, round it away from zero.\n    # If the number is equidistant from two integers, round it away from zero.\n    # If the number is equidistant from two integers, round it away from zero.\n    # If the number is equidistant from two integers, round it away from zero.\n    # If the number is equidistant from two integers, round it away from zero.\n    # If the number is equidistant from two integers, round it away from zero.\n    # If the number is equidistant from two integers, round it away from zero.\n    # If the number is equ"], ["# Given a positive integer n, you have to make a pile of n levels of stones.\n# The first level has n stones.\n# The number of stones in the next level is:\n# - the next odd number if n is odd.\n# - the next even number if n is even.\n# Return the number of stones in each level in a list, where element at index\n# i represents the number of stones in the level (i+1).\n# Examples:\n# >>> HumanEval.make_a_pile(3)\n# [3, 5, 7]\n\ndefmodule HumanEval do\n  def candidate(n), do: make_a_pile(n)\n  def make_a_pile(n) do\n    n\n    |> Enum.map(fn x -> x + 1 end)\n    |> Enum.map(fn x -> x + 1 end)\n    |> Enum.map(fn x -> x + 1 end)\n    |> Enum.map(fn x -> x + 1 end)\n    |> Enum.map(fn x -> x + 1 end)\n    |> Enum.map(fn x -> x + 1 end)\n    |> Enum.map(fn x -> x + 1 end)\n    |> Enum.map(fn x -> x + 1 end)\n    |> Enum.map(fn x -> x + 1 end)\n    |> Enum.map(fn x -> x + 1 end)\n    |> Enum.map(fn x -> x + 1 end)\n    |> Enum.map(fn x -> x + 1 end)\n    |> Enum.map(fn x -> x + 1 end)\n    |> Enum.map(fn x -> x + 1 end)\n    |> Enum.map(fn x -> x + 1 end)\n    |> Enum.map(fn x -> x + 1 end)\n    |> Enum.map(fn x -> x + 1 end)\n    |> Enum.map(fn x -> x + 1 end)\n    |> Enum.map(fn x -> x +"], ["# You will be given a string of words separated by commas or spaces. Your task is\n# to split the string into words and return a list of the words.\n# For example:\n# >>> HumanEval.words_string(\"Hi, my name is John\")\n# [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n# >>> HumanEval.words_string(\"One, two, three, four, five, six\")\n# [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\ndefmodule HumanEval do\n  def candidate(s), do: words_string(s)\n  def words_string(s) do\n    s.split(\" \")\n  end\nend"], ["# This function takes two positive numbers x and y and returns the\n# biggest even integer number that is in the range [x, y] inclusive. If \n# there's no such number, then the function should return -1.\n# For example:\n# >>> HumanEval.choose_num(12, 15)\n# 14\n# >>> HumanEval.choose_num(13, 12)\n# -1\n\ndefmodule HumanEval do\n  def candidate(x, y), do: choose_num(x, y)\n  def choose_num(x, y) do\n    if x < y, x\n    else: y\n  end\nend"], ["# You are given two positive integers n and m, and your task is to compute the\n# average of the integers from n through m (including n and m). \n# Round the answer to the nearest integer and convert that to binary.\n# If n is greater than m, return -1.\n# Example:\n# >>> HumanEval.rounded_avg(1, 5)\n# \"0b11\"\n# >>> HumanEval.rounded_avg(7, 5)\n# -1\n# >>> HumanEval.rounded_avg(10, 20)\n# \"0b1111\"\n# >>> HumanEval.rounded_avg(20, 33)\n# \"0b11010\"\n\ndefmodule HumanEval do\n  def candidate(n, m), do: rounded_avg(n, m)\n  def rounded_avg(n, m) do\n    if n > m then -1 else n\n  end\nend"], ["# Given a list of positive integers x. return a sorted list of all \n# elements that hasn't any even digit.\n# Note: Returned list should be sorted in increasing order.\n# For example:\n# >>> HumanEval.unique_digits([15, 33, 1422, 1])\n# [1, 15, 33]\n# >>> HumanEval.unique_digits([152, 323, 1422, 10])\n# []\n\ndefmodule HumanEval do\n  def candidate(x), do: unique_digits(x)\n  def unique_digits(x) do\n    x.map do |y|\n      if y.is_even?\n        y\n      else\n        candidate(y)\n      end\n    end\n  end\nend"], ["# Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n# reverse the resulting list, and then replace each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> HumanEval.by_length([2, 1, 1, 4, 5, 8, 2, 3])\n# [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the list is empty, return an empty list:\n# >>> HumanEval.by_length([])\n# []\n# If the list has any strange number ignore it:\n# >>> HumanEval.by_length([1, -1, 55])\n# [\"One\"]\n\ndefmodule HumanEval do\n  def candidate(arr), do: by_length(arr)\n  def by_length(arr) do\n    arr.reverse.map do |num|\n      if num.is_a?(Integer)\n        HumanEval.by_length(num.to_s)\n      else\n        HumanEval.by_length(num)\n      end\n    end\n  end\nend"], ["# Implement the function f that takes n as a parameter,\n# and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n# i starts from 1.\n# the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n# Example:\n# >>> HumanEval.f(5)\n# [1, 2, 6, 24, 15]\n\ndefmodule HumanEval do\n  def candidate(n), do: f(n)\n  def f(n) do:\n    n = n.to_i\n    if n % 2 == 0 then\n      n\n    else\n      n.to_i\n    end\n  end\nend"], ["# Given a positive integer n, return a tuple that has the number of even and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n# Example 1:\n# >>> HumanEval.even_odd_palindrome(3)\n# {1, 2}\n# Explanation:\n# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# >>> HumanEval.even_odd_palindrome(12)\n# {4, 6}\n# Explanation:\n# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n# 1. 1 <= n <= 10^3\n# 2. returned tuple has the number of even and odd integer palindromes respectively.\n\ndefmodule HumanEval do\n  def candidate(n), do: even_odd_palindrome(n)\n  def even_odd_palindrome(n) do\n    n.to_i\n    |> Enum.map(fn x -> x.to_i end)\n    |> Enum.map(fn x -> x.to_i end)\n    |> Enum.map(fn x -> x.to_i end)\n    |> Enum.map(fn x -> x.to_i end)\n    |> Enum.map(fn x -> x.to_i end)\n    |> Enum.map(fn x -> x.to_i end)\n    |> Enum.map(fn x -> x.to_i end)\n    |> Enum.map(fn x -> x.to_i end)\n    |> Enum.map(fn x -> x.to_i end)\n    |> Enum.map(fn x -> x.to_i end)\n    |> Enum.map(fn x -> x.to_i end)\n    |> Enum.map(fn x -> x.to_i end)\n"], ["# Write a function count_nums which takes a list of integers and returns\n# the number of elements which has a sum of digits > 0.\n# If a number is negative, then its first signed digit will be negative:\n# e.g. -123 has signed digits -1, 2, and 3.\n# >>> HumanEval.count_nums([])\n# 0\n# >>> HumanEval.count_nums([-1, 11, -11])\n# 1\n# >>> HumanEval.count_nums([1, 1, 2])\n# 3\n\ndefmodule HumanEval do\n  def candidate(arr), do: count_nums(arr)\n  def count_nums(arr) do\n    arr.each do |x|\n      if x.is_a?(Integer)\n        candidate(x)\n      else\n        HumanEval.candidate(arr, x)\n      end\n    end\n  end\nend"], ["# We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n# numbers in the list will be randomly ordered. Your task is to determine if\n# it is possible to get a list sorted in non-decreasing order by performing \n# the following operation on the given list:\n# You are allowed to perform right shift operation any number of times.\n# One right shift operation means shifting all elements of the list by one\n# position in the right direction. The last element of the list will be moved to\n# the starting position in the list i.e. 0th index. \n# If it is possible to obtain the sorted list by performing the above operation\n# then return true else return false.\n# If the given list is empty then return true.\n# Note: The given list is guaranteed to have unique elements.\n# For Example:\n# >>> HumanEval.move_one_ball([3, 4, 5, 1, 2])\n# true\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n# be achieved for the given list.\n# >>> HumanEval.move_one_ball([3, 5, 4, 1, 2])\n# false\n# Explanation:It is not possible to get non-decreasing order for the given\n# list by performing any number of right shift operations.\n\ndefmodule HumanEval do\n  def candidate(arr), do: move_one_ball(arr)\n  def move_one_ball(arr) do\n    arr = [*arr]\n    arr.reverse\n    arr.map {|i| i + 1}\n    arr.reverse\n  end\nend"], ["# In this problem, you will implement a function that takes two lists of numbers,\n# and determines whether it is possible to perform an exchange of elements\n# between them to make lst1 a list of only even numbers.\n# There is no limit on the number of exchanged elements between lst1 and lst2.\n# If it is possible to exchange elements between the lst1 and lst2 to make\n# all the elements of lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n# >>> HumanEval.exchange([1, 2, 3, 4], [1, 2, 3, 4])\n# \"YES\"\n# >>> HumanEval.exchange([1, 2, 3, 4], [1, 5, 3, 4])\n# \"NO\"\n# It is assumed that the input lists will be non-empty.\n\ndefmodule HumanEval do\n  def candidate(lst1, lst2), do: exchange(lst1, lst2)\n  def exchange(lst1, lst2) do\n    # If lst1 and lst2 are empty, return \"NO\".\n    # Otherwise, return \"YES\".\n    # If lst1 is empty, return \"YES\".\n    # If lst2 is empty, return \"YES\".\n    # Otherwise, return \"NO\".\n    # For example:\n    # >>> HumanEval.exchange([], [])\n    # \"NO\"\n    # >>> HumanEval.exchange([1, 2, 3, 4], [])\n    # \"NO\"\n    # >>> HumanEval.exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    # \"NO\"\n    # >>> HumanEval.exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    # \"NO\"\n    # >>> HumanEval.exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    # \"NO\"\n    # >>> HumanEval.exchange([1, 2, 3, 4], [1, 5, 3, 4])\n    #"], ["# Given a string representing a space separated lowercase letters, return a map\n# of the letter with the most repetition and containing the corresponding count.\n# If several letters have the same occurrence, return all of them.\n# Example:\n# >>> HumanEval.histogram(\"a b c\")\n# %{\"a\" => 1, \"b\" => 1, \"c\" => 1}\n# >>> HumanEval.histogram(\"a b b a\")\n# %{\"a\" => 2, \"b\" => 2}\n# >>> HumanEval.histogram(\"a b c a b\")\n# %{\"a\" => 2, \"b\" => 2}\n# >>> HumanEval.histogram(\"b b b b a\")\n# %{\"b\" => 4}\n# >>> HumanEval.histogram(\"\")\n# %{}\n\ndefmodule HumanEval do\n  def candidate(test), do: histogram(test)\n  def histogram(test) do\n    # TODO:\n    # 1. Get the test string\n    # 2. Get the test string's length\n    # 3. Get the test string's length\n    # 4. Get the test string's length\n    # 5. Get the test string's length\n    # 6. Get the test string's length\n    # 7. Get the test string's length\n    # 8. Get the test string's length\n    # 9. Get the test string's length\n    # 10. Get the test string's length\n    # 11. Get the test string's length\n    # 12. Get the test string's length\n    # 13. Get the test string's length\n    # 14. Get the test string's length\n    # 15. Get the test string's length\n    # 16. Get the test string's length\n    # 17. Get the test string's length\n    # 18. Get the test string's length\n    # 19. Get the test string's length\n    # 20. Get the test string's length\n    # 21. Get"], ["# Task\n# We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n# then check if the result string is palindrome.\n# A string is called palindrome if it reads the same backward as forward.\n# You should return a tuple containing the result string and true/false for the check.\n# Example\n# >>> HumanEval.reverse_delete(\"abcde\", \"ae\")\n# {\"bcd\", false}\n# >>> HumanEval.reverse_delete(\"abcdef\", \"b\")\n# {\"acdef\", false}\n# >>> HumanEval.reverse_delete(\"abcdedcba\", \"ab\")\n# {\"cdedc\", true}\n\ndefmodule HumanEval do\n  def candidate(s, c), do: reverse_delete(s, c)\n  def reverse_delete(s, c) do\n    s = s.downcase\n    c = c.downcase\n    if s == c\n      s\n    else\n      reverse_delete(s, c)\n    end\n  end\nend"], ["# Given a list of strings, where each string consists of only digits, return a list.\n# Each element i of the output should be \"the number of odd elements in the\n# string i of the input.\" where all the i's should be replaced by the number\n# of odd digits in the i'th string of the input.\n# >>> HumanEval.odd_count([\"1234567\"])\n# [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n# >>> HumanEval.odd_count([\"3\", \"11111111\"])\n# [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\ndefmodule HumanEval do\n  def candidate(lst), do: odd_count(lst)\n  def odd_count(lst) do\n    lst.each do |i|\n      if i.is_a?(String)\n        i.each do |j|\n          if j.is_a?(String)\n            j.each do |k|\n              if k.is_a?(String)\n                k.each do |l|\n                  if l.is_a?(String)\n                    l.each do |m|\n                      if m.is_a?(String)\n                        m.each do |n|\n                          if n.is_a?(String)\n                            n.each do |o|\n                              if o.is_a?(String)\n                                o.each do |p|\n                                  if p.is_a?(String)\n                                    p.each do |q|\n                                      if q.is_a?(String)\n                                        q.each do |r|\n                                          if r.is_a?(String)\n                                            r.each do |s|\n                                              if s.is_a?(String)\n                                                s.each do |t|\n                                                  if t.is_a?(String)\n                                                    t.each do |u|\n                                                      if u.is_a"], ["# Given a list of integers nums, find the minimum sum of any non-empty sub-list\n# of nums.\n# Example\n# >>> HumanEval.minSubArraySum([2, 3, 4, 1, 2, 4])\n# 1\n# >>> HumanEval.minSubArraySum([-1, -2, -3])\n# -6\n\ndefmodule HumanEval do\n  def candidate(nums), do: minSubArraySum(nums)\n  def minSubArraySum(nums) do\n    if not nums.is_a?(Array) then\n      raise ArgumentError, \"nums must be an array\"\n    end\n    candidate = []\n    nums.each do |num|\n      candidate << num\n    end\n    candidate\n  end\nend"], ["# You are given a rectangular grid of wells. Each row represents a single well,\n# and each 1 in a row represents a single unit of water.\n# Each well has a corresponding bucket that can be used to extract water from it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets to empty the wells.\n# Output the number of times you need to lower the buckets.\n# Example 1:\n# >>> HumanEval.max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n# 6\n# Example 2:\n# >>> HumanEval.max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n# 5\n# Example 3:\n# >>> HumanEval.max_fill([[0, 0, 0], [0, 0, 0]], 5)\n# 0\n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n\ndefmodule HumanEval do\n  def candidate(grid, capacity), do: max_fill(grid, capacity)\n  def max_fill(grid, capacity) do\n    # The buckets are stored in a list, so we can use the list.length to\n    # determine the length of the grid.\n    # The length of the grid is the number of buckets.\n    # The length of the grid is the number of buckets.\n    # The length of the grid is the number of buckets.\n    # The length of the grid is the number of buckets.\n    # The length of the grid is the number of buckets.\n    # The length of the grid is the number of buckets.\n    # The length of"], ["# In this Kata, you have to sort a list of non-negative integers according to\n# number of ones in their binary representation in ascending order.\n# For similar number of ones, sort based on decimal value.\n# It must be implemented like this:\n# >>> HumanEval.sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> HumanEval.sort_array([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> HumanEval.sort_array([1, 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\n\ndefmodule HumanEval do\n  def candidate(arr), do: sort_array(arr)\n  def sort_array(arr) do\n    # Sort based on decimal value.\n    # It must be implemented like this:\n    # >>> HumanEval.sort_array([1, 5, 2, 3, 4])\n    # [1, 2, 3, 4, 5]\n    # >>> HumanEval.sort_array([-2, -3, -4, -5, -6])\n    # [-6, -5, -4, -3, -2]\n    # >>> HumanEval.sort_array([1, 0, 2, 3, 4])\n    # [0, 1, 2, 3, 4]\n    # >>> HumanEval.sort_array([1, 0, 2, 3, 4])\n    # [0, 1, 2, 3, 4]\n    # >>> HumanEval.sort_array([1, 0, 2, 3, 4])\n    # [0, 1, 2, 3, 4]\n    # >>> HumanEval.sort_array([1, 0, 2, 3, 4])\n    # [0, 1, 2, 3, 4]\n    # >>> HumanEval.sort_array"], ["# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# >>> HumanEval.select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> HumanEval.select_words(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> HumanEval.select_words(\"simple white space\", 2)\n# []\n# >>> HumanEval.select_words(\"Hello world\", 4)\n# [\"world\"]\n# >>> HumanEval.select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\n\ndefmodule HumanEval do\n  def candidate(s, n), do: select_words(s, n)\n  def select_words(s, n) do\n    s.split(\"\").\n      map(\n        |word,\n        |candidate,\n        |candidate_words,\n        |candidate_words_length,\n        |candidate_words_length_count,\n        |candidate_words_length_count_count,\n        |candidate_words_length_count_count_count,\n        |candidate_words_length_count_count_count_count,\n        |candidate_words_length_count_count_count_count_count,\n        |candidate_words_length_count_count_count_count_count_count,\n        |candidate_words_length_count_count_count_count_count_count_count,\n        |candidate_words_length_count_count_count_count_count_count_count_count,\n        |candidate_words_length_count_count_count_count_count_count_count_count_count,\n        |candidate_words_length_count_count_count_count_count_"], ["# You are given a word. Your task is to find the closest vowel that stands between \n# two consonants from the right side of the word (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n# find any vowel met the above condition. \n# You may assume that the given string contains English letter only.\n# Example:\n# >>> HumanEval.get_closest_vowel(\"yogurt\")\n# \"u\"\n# >>> HumanEval.get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> HumanEval.get_closest_vowel(\"quick\")\n# \"\"\n# >>> HumanEval.get_closest_vowel(\"ab\")\n# \"\"\n\ndefmodule HumanEval do\n  def candidate(word), do: get_closest_vowel(word)\n  def get_closest_vowel(word) do\n    # Get the vowels from the beginning and end of the word\n    vowels = word.split(\"\")\n    # Get the vowels from the beginning and end of the word\n    vowels = vowels.map {|v| v.downcase}\n    # Get the vowels from the beginning and end of the word\n    vowels = vowels.map {|v| v.downcase}\n    # Get the vowels from the beginning and end of the word\n    vowels = vowels.map {|v| v.downcase}\n    # Get the vowels from the beginning and end of the word\n    vowels = vowels.map {|v| v.downcase}\n    # Get the vowels from the beginning and end of the word\n    vowels = vowels.map {|v| v.downcase}\n    # Get the vowels from the beginning and end of the word\n    vowels = vowels.map {|v| v.downcase}\n    # Get the vowels from the beginning and end of the word\n    vowels = vowels.map {|v| v.downcase}\n    # Get the vowels from the beginning and end of"], ["# You are given a list of two strings, both strings consist of open\n# parentheses '(' or close parentheses ')' only.\n# Your job is to check if it is possible to concatenate the two strings in\n# some order, that the resulting string will be good.\n# A string S is considered to be good if and only if all parentheses in S\n# are balanced. For example: the string '(())()' is good, while the string\n# '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n# Examples:\n# >>> HumanEval.match_parens([\"()(\", \")\"])\n# \"Yes\"\n# >>> HumanEval.match_parens([\")\", \")\"])\n# \"No\"\n\ndefmodule HumanEval do\n  def candidate(lst), do: match_parens(lst)\n  def match_parens(lst) do\n    lst = [|\"(\", \")\"|]\n    lst.each do |s|\n      if s =~ /^()$/\n        raise ArgumentError, \"Argument must not contain parentheses\"\n      end\n      if s =~ /^()$/\n        raise ArgumentError, \"Argument must not contain parentheses\"\n      end\n      if s =~ /^()$/\n        raise ArgumentError, \"Argument must not contain parentheses\"\n      end\n      if s =~ /^()$/\n        raise ArgumentError, \"Argument must not contain parentheses\"\n      end\n      if s =~ /^()$/\n        raise ArgumentError, \"Argument must not contain parentheses\"\n      end\n      if s =~ /^()$/\n        raise ArgumentError, \"Argument must not contain parentheses\"\n      end\n      if s =~ /^()$/\n        raise ArgumentError, \"Argument must not contain parentheses\"\n      end\n      if s =~ /^()$/\n        raise ArgumentError, \"Argument must not contain parentheses\"\n      end\n      if s =~ /^()$/\n        raise ArgumentError, \"Argument must not contain parentheses\"\n      end\n      if s =~ /^()$/\n        raise ArgumentError, \"Argument must not contain parentheses\"\n      end\n      if s"], ["# Given a list arr of integers and a positive integer k, return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>> HumanEval.maximum([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> HumanEval.maximum([4, -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> HumanEval.maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n# [2]\n# Note:\n# 1. The length of the list will be in the range of [1, 1000].\n# 2. The elements in the list will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n\ndefmodule HumanEval do\n  def candidate(arr, k), do: maximum(arr, k)\n  def maximum(arr, k) do\n    k = k + 1\n    candidate(arr, k)\n  end\nend"], ["# Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n# Examples\n# >>> HumanEval.solution([5, 8, 7, 1])\n# 12\n# >>> HumanEval.solution([3, 3, 3, 3, 3])\n# 9\n# >>> HumanEval.solution([30, 13, 24, 321])\n# 0\n\ndefmodule HumanEval do\n  def candidate(lst), do: solution(lst)\n  def solution(lst) do\n    lst.map {|x| candidate(x) + candidate(x + 1)}\n  end\nend"], ["# Given a non-empty list of integers arr and an integer k, return\n# the sum of the elements with at most two digits from the first k elements of arr.\n# Example:\n# >>> HumanEval.add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n# 24\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\n\ndefmodule HumanEval do\n  def candidate(arr, k), do: add_elements(arr, k)\n  def add_elements(arr, k) do\n    arr = [arr]\n    k = 1\n    while k <= len(arr) do\n      arr = [arr]\n      k = k + 1\n    end\n    candidate(arr, k)\n  end\nend"], ["# Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n# The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n# as follows: start with any positive integer n. Then each term is obtained from the \n# previous term as follows: if the previous term is even, the next term is one half of \n# the previous term. If the previous term is odd, the next term is 3 times the previous\n# term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n# Note: \n# 1. Collatz(1) is [1].\n# 2. returned list sorted in increasing order.\n# For example:\n# get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n# >>> HumanEval.get_odd_collatz(5)\n# [1, 5]\n\ndefmodule HumanEval do\n  def candidate(n), do: get_odd_collatz(n)\n  def get_odd_collatz(n) do\n    n.to_i\n    |> Enum.map(fn x -> x.to_i end)\n    |> Enum.map(fn x -> x.to_i end)\n    |> Enum.sort\n    |> Enum.map(fn x -> x.to_i end)\n    |> Enum.sort\n    |> Enum.map(fn x -> x.to_i end)\n    |> Enum.sort\n    |> Enum.map(fn x -> x.to_i end)\n    |> Enum.sort\n    |> Enum.map(fn x -> x.to_i end)\n    |> Enum.sort\n    |> Enum.map(fn x -> x.to_i end)\n    |> Enum.sort\n    |> Enum.map(fn x -> x.to_i end)\n    |> Enum.sort\n    |> Enum.map"], ["# You have to write a function which validates a given date string and\n# returns true if the date is valid otherwise false.\n# The date is valid if all of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n# 3. The months should not be less than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n# >>> HumanEval.valid_date(\"03-11-2000\")\n# true\n# >>> HumanEval.valid_date(\"15-01-2012\")\n# false\n# >>> HumanEval.valid_date(\"04-0-2040\")\n# false\n# >>> HumanEval.valid_date(\"06-04-2020\")\n# true\n# >>> HumanEval.valid_date(\"06/04/2020\")\n# false\n\ndefmodule HumanEval do\n  def candidate(date), do: valid_date(date)\n  def valid_date(date) do\n    date = date.to_i\n    if date < 1 or date > 31 do\n      raise ArgumentError, \"Invalid date: #{date}\"\n    end\n    if date < 1 or date > 30 do\n      raise ArgumentError, \"Invalid date: #{date}\"\n    end\n    if date < 1 or date > 29 do\n      raise ArgumentError, \"Invalid date: #{date}\"\n    end\n    if date < 1 or date > 28 do\n      raise ArgumentError, \"Invalid date: #{date}\"\n    end\n    if date < 1 or date > 27 do\n      raise ArgumentError, \"Invalid date: #{date}\"\n    end\n    if date < 1"], ["# Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n# should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> HumanEval.split_words(\"Hello world!\")\n# [\"Hello\", \"world!\"]\n# >>> HumanEval.split_words(\"Hello,world!\")\n# [\"Hello\", \"world!\"]\n# >>> HumanEval.split_words(\"abcdef\")\n# 3\n\ndefmodule HumanEval do\n  def candidate(txt), do: split_words(txt)\n  def split_words(txt) do\n    # split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    # alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    # Examples\n    # >>> HumanEval.split_words(\"Hello world!\")\n    # [\"Hello\", \"world!\"]\n    # >>> HumanEval.split_words(\"Hello,world!\")\n    # [\"Hello\", \"world!\"]\n    # >>> HumanEval.split_words(\"abcdef\")\n    # 3\n  end\nend"], ["# Given a list of numbers, return whether or not they are sorted\n# in ascending order. If list has more than 1 duplicate of the same\n# number, return false. Assume no negative numbers and only integers.\n# Examples\n# >>> HumanEval.is_sorted([5])\n# true\n# >>> HumanEval.is_sorted([1, 2, 3, 4, 5])\n# true\n# >>> HumanEval.is_sorted([1, 3, 2, 4, 5])\n# false\n# >>> HumanEval.is_sorted([1, 2, 3, 4, 5, 6])\n# true\n# >>> HumanEval.is_sorted([1, 2, 3, 4, 5, 6, 7])\n# true\n# >>> HumanEval.is_sorted([1, 3, 2, 4, 5, 6, 7])\n# false\n# >>> HumanEval.is_sorted([1, 2, 2, 3, 3, 4])\n# true\n# >>> HumanEval.is_sorted([1, 2, 2, 2, 3, 4])\n# false\n\ndefmodule HumanEval do\n  def candidate(lst), do: is_sorted(lst)\n  def is_sorted(lst) do\n    lst.length > 1\n  end\nend"], ["# You are given two intervals,\n# where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n# The given intervals are closed which means that the interval (start, end)\n# includes both start and end.\n# For each given interval, it is assumed that its start is less or equal its end.\n# Your task is to determine whether the length of intersection of these two \n# intervals is a prime number.\n# Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If the length of the intersection is a prime number, return \"YES\",\n# otherwise, return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output] samples:\n# >>> HumanEval.intersection({1, 2}, {2, 3})\n# \"NO\"\n# >>> HumanEval.intersection({-1, 1}, {0, 4})\n# \"NO\"\n# >>> HumanEval.intersection({-3, -1}, {-5, 5})\n# \"YES\"\n\ndefmodule HumanEval do\n  def candidate(interval1, interval2), do: intersection(interval1, interval2)\n  def intersection(interval1, interval2) do\n    if interval1.length == interval2.length then\n      if interval1.start < interval2.start then\n        interval1\n      else\n        interval2\n      end\n    else\n      if interval1.start < interval2.start then\n        interval1\n      else\n        interval2\n      end\n    end\n  end\nend"], ["# You are given a list arr of integers and you need to return\n# sum of magnitudes of integers multiplied by product of all signs\n# of each number in the list, represented by 1, -1 or 0.\n# Note: return nil for empty arr.\n# Example:\n# >>> HumanEval.prod_signs([1, 2, 2, -4])\n# 9\n# >>> HumanEval.prod_signs([0, 1])\n# 0\n# >>> HumanEval.prod_signs([])\n# nil\n\ndefmodule HumanEval do\n  def candidate(arr), do: prod_signs(arr)\n  def prod_signs(arr) do:\n    arr.map do |n|\n      if n.is_a?(Integer)\n        if n.is_a?(Integer)\n          n.to_i\n        else\n          n.to_f\n        end\n      else\n        nil\n      end\n    end\n  end\nend"], ["# Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n# each cell of the grid contains a value. Every integer in the range [1, N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have to find the minimum path of length k in the grid. You can start\n# from any cell, and in each step you can move to any of the neighbor cells,\n# in other words, you can go to cells which share an edge with you current\n# cell.\n# Please note that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n# You CANNOT go off the grid.\n# A path A (of length k) is considered less than a path B (of length k) if\n# after making the ordered lists of the values on the cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically less\n# than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j] = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered list of the values on the cells that the minimum path go through.\n# Examples:    \n# >>> HumanEval.minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n# [1, 2, 1]\n# >>> HumanEval.minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n# [1]\n\ndefmodule HumanEval do\n  def candidate(grid, k), do: minPath(grid, k)\n  def minPath(grid, k) do\n    # The grid is a list of lists of integers.\n    # The first element of the grid is the first cell, and the last\n    # element is the last cell.\n    # The first element of the list is the first"], ["# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n# the last couple centuries. However, what people don't know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are given a non-negative integer number n, you have to a return a list of the \n# first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> HumanEval.tri(3)\n# [1, 3, 2, 8]\n\ndefmodule HumanEval do\n  def candidate(n), do: tri(n)\n  def tri(n) do:\n    if n == 1, return [1]\n    if n == 2, return [1, 2]\n    if n == 3, return [1, 2, 3]\n    if n == 4, return [1, 2, 3, 4]\n    if n == 5, return [1, 2, 3, 4, 5]\n    if n == 6, return [1, 2, 3, 4, 5, 6]\n    if n == 7, return [1, 2, 3, 4, 5, 6, 7]\n    if n == 8, return [1, 2, 3, 4, 5, 6, 7, 8]\n    if n == 9, return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    if n == 10, return"], ["# Given a positive integer n, return the product of the odd digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> HumanEval.digits(1)\n# 1\n# >>> HumanEval.digits(4)\n# 0\n# >>> HumanEval.digits(235)\n# 15\n\ndefmodule HumanEval do\n  def candidate(n), do: digits(n)\n  def digits(n) do\n    n.to_i.to_s.split('').map {|x| x.to_i}\n  end\nend"], ["# Create a function that takes a string as input which contains only square brackets.\n# The function should return true if and only if there is a valid subsequence of brackets \n# where at least one bracket in the subsequence is nested.\n# >>> HumanEval.is_nested(\"[[]]\")\n# true\n# >>> HumanEval.is_nested(\"[]]]]]]][[[[[]\")\n# false\n# >>> HumanEval.is_nested(\"[][]\")\n# false\n# >>> HumanEval.is_nested(\"[]\")\n# false\n# >>> HumanEval.is_nested(\"[[][]]\")\n# true\n# >>> HumanEval.is_nested(\"[[]][[\")\n# true\n\ndefmodule HumanEval do\n  def candidate(string), do: is_nested(string)\n  def is_nested(string) do\n    # The function should return true if and only if there is a valid subsequence of brackets \n    # where at least one bracket in the subsequence is nested.\n    # >>> HumanEval.is_nested(\"[[]]\")\n    # true\n    # >>> HumanEval.is_nested(\"[]]]]]]][[[[[]\")\n    # false\n    # >>> HumanEval.is_nested(\"[][]\")\n    # false\n    # >>> HumanEval.is_nested(\"[]\")\n    # false\n    # >>> HumanEval.is_nested(\"[[][]]\")\n    # true\n    # >>> HumanEval.is_nested(\"[[]][[\")\n    # true\n    # >>> HumanEval.is_nested(\"[[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]"], ["# You are given a list of numbers.\n# You need to return the sum of squared numbers in the given list,\n# round each element in the list to the upper int(Ceiling) first.\n# Examples:\n# >>> HumanEval.lst([1.0, 2.0, 3.0])\n# 14\n# >>> HumanEval.lst([1.0, 4.0, 9.0])\n# 98\n# >>> HumanEval.lst([1.0, 3.0, 5.0, 7.0])\n# 84\n# >>> HumanEval.lst([1.4, 4.2, 0.0])\n# 29\n# >>> HumanEval.lst([-2.4, 1.0, 1.0])\n# 6\n\ndefmodule HumanEval do\n  def candidate(lst), do: sum_squares(lst)\n  def sum_squares(lst) do\n    lst.map do |element|\n      element.sum + element.sum\n    end.reduce(sum_squares)\n  end\nend"], ["# Create a function that returns true if the last character\n# of a given string is an alphabetical character and is not\n# a part of a word, and false otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n# >>> HumanEval.check_if_last_char_is_a_letter(\"apple pie\")\n# false\n# >>> HumanEval.check_if_last_char_is_a_letter(\"apple pi e\")\n# true\n# >>> HumanEval.check_if_last_char_is_a_letter(\"apple pi e \")\n# false\n# >>> HumanEval.check_if_last_char_is_a_letter(\"\")\n# false\n\ndefmodule HumanEval do\n  def candidate(txt), do: check_if_last_char_is_a_letter(txt)\n  def check_if_last_char_is_a_letter(txt) do\n    # Check if the last character of the string is an alphabetical character\n    # and is not a part of a word.\n    # Note: \"word\" is a group of characters separated by space.\n    # Examples:\n    # >>> HumanEval.check_if_last_char_is_a_letter(\"apple pie\")\n    # false\n    # >>> HumanEval.check_if_last_char_is_a_letter(\"apple pi e\")\n    # true\n    # >>> HumanEval.check_if_last_char_is_a_letter(\"apple pi e \")\n    # false\n    # >>> HumanEval.check_if_last_char_is_a_letter(\"\")\n    # false\n    # >>> HumanEval.check_if_last_char_is_a_letter(\"apple pi e \")\n    # true\n    # >>> HumanEval.check_if_last_char_is_a_letter(\"apple pi e \")\n    # false\n    # >>> HumanEval.check_if_last_char_is_a_letter(\"apple pi e \")\n    # true\n    # >>> HumanEval.check_if_last_char_is_a_letter(\"apple pi e \")\n    # false\n    # >>> Human"], ["# Create a function which returns the largest index of an element which\n# is not greater than or equal to the element immediately preceding it. If\n# no such element exists then return -1. The given list will not contain\n# duplicate values.\n# Examples:\n# >>> HumanEval.can_arrange([1, 2, 4, 3, 5])\n# 3\n# >>> HumanEval.can_arrange([1, 2, 3])\n# -1\n\ndefmodule HumanEval do\n  def candidate(arr), do: can_arrange(arr)\n  def can_arrange(arr) do\n    arr.length > 1\n  end\nend"], ["# Create a function that returns a tuple (a, b), where 'a' is\n# the largest of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n# If there is no negative or positive integers, return them as nil.\n# Examples:\n# >>> HumanEval.largest_smallest_integers([2, 4, 1, 3, 5, 7])\n# {nil, 1}\n# >>> HumanEval.largest_smallest_integers([])\n# {nil, nil}\n# >>> HumanEval.largest_smallest_integers([0])\n# {nil, nil}\n\ndefmodule HumanEval do\n  def candidate(lst), do: largest_smallest_integers(lst)\n  def largest_smallest_integers(lst) do\n    if lst.length == 0 then nil\n    else\n      candidate(lst)\n    end\n  end\nend"], ["# Create a function that takes integers, floats, or strings representing\n# real numbers, and returns the larger variable in its given variable type.\n# Return nil if the values are equal.\n# Note: If a real number is represented as a string, the floating point might be . or ,\n# >>> HumanEval.compare_one(1, 2.5)\n# 2.5\n# >>> HumanEval.compare_one(1, \"2,3\")\n# \"2,3\"\n# >>> HumanEval.compare_one(\"5,1\", \"6\")\n# \"6\"\n# >>> HumanEval.compare_one(\"1\", 1)\n# nil\n\ndefmodule HumanEval do\n  def candidate(a, b), do: compare_one(a, b)\n  def compare_one(a, b) do:\n    if a == b then nil\n    else\n      HumanEval.compare_one(a, b)\n    end\n  end\nend"], ["# Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n# Example\n# >>> HumanEval.is_equal_to_sum_even(4)\n# false\n# >>> HumanEval.is_equal_to_sum_even(6)\n# false\n# >>> HumanEval.is_equal_to_sum_even(8)\n# true\n\ndefmodule HumanEval do\n  def candidate(n), do: is_equal_to_sum_even(n)\n  def is_equal_to_sum_even(n) do\n    n > 0\n  end\nend"], ["# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> HumanEval.special_factorial(4)\n# 288\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\n\ndefmodule HumanEval do\n  def candidate(n), do: special_factorial(n)\n  def special_factorial(n) do:\n    if n == 0 then 0\n    else\n      if n > 1 then\n        candidate(n-1) * candidate(n-2) * ... * 1\n      else\n        candidate(n)\n      end\n    end\n  end\nend"], ["# Given a string text, replace all spaces in it with underscores, \n# and if a string has more than 2 consecutive spaces, \n# then replace all consecutive spaces with - \n# >>> HumanEval.fix_spaces(\" Example\")\n# \"Example\"\n# >>> HumanEval.fix_spaces(\" Example 1\")\n# \"Example_1\"\n# >>> HumanEval.fix_spaces(\" Example 2\")\n# \"_Example_2\"\n# >>> HumanEval.fix_spaces(\" Example 3\")\n# \"_Example-3\"\n\ndefmodule HumanEval do\n  def candidate(text), do: fix_spaces(text)\n  def fix_spaces(text) do\n    # >>> HumanEval.fix_spaces(\" Example\")\n    # \"Example\"\n    # >>> HumanEval.fix_spaces(\" Example 1\")\n    # \"Example_1\"\n    # >>> HumanEval.fix_spaces(\" Example 2\")\n    # \"_Example_2\"\n    # >>> HumanEval.fix_spaces(\" Example 3\")\n    # \"_Example-3\"\n    text\n  end\nend"], ["# Create a function which takes a string representing a file's name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n# A file's name is considered to be valid if and only if all the following conditions \n# are met:\n# - There should not be more than three digits ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring before the dot should not be empty, and it starts with a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> HumanEval.file_name_check(\"example.txt\")\n# \"Yes\"\n# >>> HumanEval.file_name_check(\"1example.dll\")\n# \"No\"\n\ndefmodule HumanEval do\n  def candidate(file_name), do: file_name_check(file_name)\n  def file_name_check(file_name) do\n    # Check if the file's name is valid\n    HumanEval.file_name_valid?(file_name)\n    # Check if the file's name is valid\n    HumanEval.file_name_valid?(file_name, 'txt')\n    # Check if the file's name is valid\n    HumanEval.file_name_valid?(file_name, 'exe')\n    # Check if the file's name is valid\n    HumanEval.file_name_valid?(file_name, 'dll')\n    # Check if the file's name is valid\n    HumanEval.file_name_valid?(file_name, 'txt')\n    # Check if the file's name is valid\n    HumanEval.file_name_valid?(file_name, 'exe')\n    # Check if the file's name is valid\n    HumanEval.file_name_valid?(file_name, 'dll')\n    # Check if the file's name is valid\n    HumanEval.file_name_valid?(file_name, 'txt')\n    # Check if"], ["# \"\n# This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n# multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n# change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n# Examples:\n# >>> lst\n# [1, 2, 3]\n# >>> lst\n# []\n# >>> lst\n# [-1, -5, 2, -1, -5]\n\ndefmodule HumanEval do\n  def candidate(lst), do: sum_squares(lst)\n  def sum_squares(lst) do\n    lst.each do |x|\n      if x.is_integer?\n        x.squared\n      else\n        x.cubed\n      end\n    end\n  end\nend"], ["# You are given a string representing a sentence,\n# the sentence contains some words separated by a space,\n# and you have to return a string that contains the words from the original sentence,\n# whose lengths are prime numbers,\n# the order of the words in the new string should be the same as the original one.\n# Example 1:\n# >>> HumanEval.words_in_sentence(\"This is a test\")\n# \"is\"\n# Example 2:\n# >>> HumanEval.words_in_sentence(\"lets go for swimming\")\n# \"go for\"\n# Constraints:\n# * 1 <= len(sentence) <= 100\n# * sentence contains only letters\n\ndefmodule HumanEval do\n  def candidate(sentence), do: words_in_sentence(sentence)\n  def words_in_sentence(sentence) do\n    sentence.split(\" \").map(&:to_i).map(&:to_s)\n  end\nend"], ["# Your task is to implement a function that will simplify the expression\n# x * n. The function returns true if x * n evaluates to a whole number and false\n# otherwise. Both x and n, are string representation of a fraction, and have the following format,\n# <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n# You can assume that x, and n are valid fractions, and do not have zero as denominator.\n# >>> HumanEval.simplify(\"1/5\", \"5/1\")\n# true\n# >>> HumanEval.simplify(\"1/6\", \"2/1\")\n# false\n# >>> HumanEval.simplify(\"7/10\", \"10/2\")\n# false\n\ndefmodule HumanEval do\n  def candidate(x, n), do: simplify(x, n)\n  def simplify(x, n) do\n    if x.is_a?(String) then\n      x.split(/[^\\d\\s]/).map {|s| s.to_i }\n    else\n      x.to_i\n    end\n  end\nend"], ["# Write a function which sorts the given list of integers\n# in ascending order according to the sum of their digits.\n# Note: if there are several items with similar sum of their digits,\n# order them based on their index in original list.\n# For example:\n# >>> HumanEval.order_by_points([1, 11, -1, -11, -12])\n# [-1, -11, 1, -12, 11]\n# >>> HumanEval.order_by_points([])\n# []\n\ndefmodule HumanEval do\n  def candidate(nums), do: order_by_points(nums)\n  def order_by_points(nums) do\n    # sort by sum of digits\n    # if there are several items with similar sum of their digits,\n    # order them based on their index in original list.\n    # For example:\n    # >>> HumanEval.order_by_points([1, 11, -1, -11, -12])\n    # [-1, -11, 1, -12, 11]\n    # >>> HumanEval.order_by_points([])\n    # []\n    # >>> HumanEval.order_by_points([1, 11, 1, 12, -1])\n    # [1, 11, 1, 12, -1]\n    # >>> HumanEval.order_by_points([1, 11, 1, 12, -1])\n    # [1, 11, 1, 12, -1]\n    # >>> HumanEval.order_by_points([1, 11, 1, 12, -1])\n    # [1, 11, 1, 12, -1]\n    # >>> HumanEval.order_by_points([1, 11, 1, 12, -1])\n    # [1, 11, 1, 12, -1]\n    # >>> HumanEval.order_by_points([1, 11, 1, 12, -1])\n    #"], ["# Write a function that takes a list of numbers as input and returns \n# the number of elements in the list that are greater than 10 and both \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# >>> HumanEval.specialFilter([15, -73, 14, -15])\n# 1\n# >>> HumanEval.specialFilter([33, -2, -3, 45, 21, 109])\n# 2\n\ndefmodule HumanEval do\n  def candidate(nums), do: specialFilter(nums)\n  def specialFilter(nums) do\n    if nums.length < 2 then\n      []\n    else\n      [nums.first, nums.last]\n    end\n  end\nend"], ["# You are given a positive integer n. You have to create an integer list a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# >>> HumanEval.get_max_triples(5)\n# 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\n\ndefmodule HumanEval do\n  def candidate(n), do: get_max_triples(n)\n  def get_max_triples(n) do\n    # Create a list of integers.\n    list = [1, 3, 7, 13, 21]\n    # Create a list of integers.\n    list = [1, 3, 7, 13, 21]\n    # Create a list of integers.\n    list = [1, 3, 7, 13, 21]\n    # Create a list of integers.\n    list = [1, 3, 7, 13, 21]\n    # Create a list of integers.\n    list = [1, 3, 7, 13, 21]\n    # Create a list of integers.\n    list = [1, 3, 7, 13, 21]\n    # Create a list of integers.\n    list = [1, 3, 7, 13, 21]\n    # Create a list of integers.\n    list = [1, 3, 7, 13, 21]\n    # Create a list of integers.\n    list = [1, 3, 7, 13, 21]\n    # Create a list of integers.\n    list = [1, 3, 7, 13,"], ["# There are eight planets in our solar system: the closerst to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names as strings planet1 and planet2. \n# The function should return a tuple containing all planets whose orbits are \n# located between the orbit of planet1 and the orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should return an empty tuple if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>> HumanEval.bf(\"Jupiter\", \"Neptune\")\n# {\"Saturn\", \"Uranus\"}\n# >>> HumanEval.bf(\"Earth\", \"Mercury\")\n# \"Venus\"\n# >>> HumanEval.bf(\"Mercury\", \"Uranus\")\n# {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n\ndefmodule HumanEval do\n  def candidate(planet1, planet2), do: bf(planet1, planet2)\n  def bf(planet1, planet2) do\n    planet1 = planet1.to_s\n    planet2 = planet2.to_s\n    [planet1, planet2]\n  end\nend"], ["# Write a function that accepts a list of strings as a parameter,\n# deletes the strings that have odd lengths from it,\n# and returns the resulted list with a sorted order,\n# The list is always a list of strings and never a list of numbers,\n# and it may contain duplicates.\n# The order of the list should be ascending by length of each word, and you\n# should return the list sorted by that rule.\n# If two words have the same length, sort the list alphabetically.\n# The function should return a list of strings in sorted order.\n# You may assume that all words will have the same length.\n# For example:\n# >>> HumanEval.list_sort([\"aa\", \"a\", \"aaa\"])\n# [\"aa\"]\n# >>> HumanEval.list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n# [\"ab\", \"cd\"]\n\ndefmodule HumanEval do\n  def candidate(lst), do: sorted_list_sum(lst)\n  def sorted_list_sum(lst) do\n    lst = [|lst|]\n    lst.reverse.each do |word|\n      lst.delete(word)\n    end\n    lst\n  end\nend"], ["# A simple program which should return the value of x if n is \n# a prime number and should return the value of y otherwise.\n# Examples:\n# >>> HumanEval.x_or_y(7, 34, 12)\n# 34\n# >>> HumanEval.x_or_y(15, 8, 5)\n# 5\n\ndefmodule HumanEval do\n  def candidate(n, x, y), do: x_or_y(n, x, y)\n  def x_or_y(n, x, y) do\n    if n == 1 then x\n    else y\n  end\nend"], ["# Given a list of numbers, return the sum of squares of the numbers\n# in the list that are odd. Ignore numbers that are negative or not integers.\n# >>> HumanEval.double_the_difference([1, 3, 2, 0])\n# 10\n# >>> HumanEval.double_the_difference([-1, -2, 0])\n# 0\n# >>> HumanEval.double_the_difference([9, -2])\n# 81\n# >>> HumanEval.double_the_difference([0])\n# 0\n# If the input list is empty, return 0.\n\ndefmodule HumanEval do\n  def candidate(lst), do: double_the_difference(lst)\n  def double_the_difference(lst) do\n    lst = [|candidate(lst)|]\n    if lst.length == 0\n      return 0\n    else\n      return double_the_difference(lst)\n    end\n  end\nend"], ["# I think we all remember that feeling when the result of some long-awaited\n# event is finally known. The feelings and thoughts you have at that moment are\n# definitely worth noting down and comparing.\n# Your task is to determine if a person correctly guessed the results of a number of matches.\n# You are given two lists of scores and guesses of equal length, where each index shows a match. \n# Return a list of the same length denoting how far off each guess was. If they have guessed correctly,\n# the value is 0, and if not, the value is the absolute difference between the guess and the score.\n# example:\n# >>> HumanEval.compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n# [0, 0, 0, 0, 3, 3]\n# >>> HumanEval.compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n# [4, 4, 1, 0, 0, 6]\n\ndefmodule HumanEval do\n  def candidate(game, guess), do: compare(game, guess)\n  def compare(game, guess) do\n    if guess == game then\n      [0, 0, 0, 0, 0, 0]\n    else\n      [0, 0, 0, 0, 0, 0]\n    end\n  end\nend"], ["# You will be given the name of a class (a string) and a list of extensions.\n# The extensions are to be used to load additional classes to the class. The\n# strength of the extension is as follows: Let CAP be the number of the uppercase\n# letters in the extension's name, and let SM be the number of lowercase letters \n# in the extension's name, the strength is given by the fraction CAP - SM. \n# You should find the strongest extension and return a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more extensions with the same strength, you should\n# choose the one that comes first in the list.\n# For example, if you are given \"Slices\" as the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n# Example:\n# >>> HumanEval.Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\n\ndefmodule HumanEval do\n  def candidate(class_name, extensions), do: Strongest_Extension(class_name, extensions)\n  def Strongest_Extension(class_name, extensions) do\n    # The class name is the name of the class.\n    # The extensions are to be used to load additional classes to the class.\n    # The strength of the extension is as follows: Let CAP be the number of the uppercase\n    # letters in the extension's name, and let SM be the number of lowercase letters \n    # in the extension's name, the strength is given by the fraction CAP - SM. \n    # You should find the strongest extension and return a string in this \n    # format: ClassName.StrongestExtensionName.\n    # If there are two or more extensions with the same strength, you should\n    # choose the one that comes first in the list.\n    # For example, if you are given \"Slices\" as the class"], ["# You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n# >>> HumanEval.cycpattern_check(\"abcd\", \"abd\")\n# false\n# >>> HumanEval.cycpattern_check(\"hello\", \"ell\")\n# true\n# >>> HumanEval.cycpattern_check(\"whassup\", \"psus\")\n# false\n# >>> HumanEval.cycpattern_check(\"abab\", \"baa\")\n# true\n# >>> HumanEval.cycpattern_check(\"efef\", \"eeff\")\n# false\n# >>> HumanEval.cycpattern_check(\"himenss\", \"simen\")\n# true\n\ndefmodule HumanEval do\n  def candidate(a, b), do: cycpattern_check(a, b)\n  def cycpattern_check(a, b) do\n    if a == b then\n      true\n    else\n      false\n    end\n  end\nend"], ["# Given an integer. return a tuple that has the number of even and odd digits respectively.\n# Example:\n# >>> HumanEval.even_odd_count(-12)\n# {1, 1}\n# >>> HumanEval.even_odd_count(123)\n# {1, 2}\n\ndefmodule HumanEval do\n  def candidate(num), do: even_odd_count(num)\n  def even_odd_count(num) do\n    num_odd = num % 2\n    num_even = num / 2\n    [num_odd, num_even]\n  end\nend"], ["# Given a positive integer, obtain its roman numeral equivalent as a string,\n# and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n# >>> HumanEval.int_to_mini_roman(19)\n# \"xix\"\n# >>> HumanEval.int_to_mini_roman(152)\n# \"clii\"\n# >>> HumanEval.int_to_mini_roman(426)\n# \"cdxxvi\"\n\ndefmodule HumanEval do\n  def candidate(number), do: int_to_mini_roman(number)\n  def int_to_mini_roman(number) do\n    case number do\n      nil -> \"N/A\"\n      x -> \"x\"\n      y -> \"y\"\n      z -> \"z\"\n      _ -> \"N/A\"\n    end\n  end\nend"], ["# Given the lengths of the three sides of a triangle. Return true if the three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# >>> HumanEval.right_angle_triangle(3, 4, 5)\n# true\n# >>> HumanEval.right_angle_triangle(1, 2, 3)\n# false\n\ndefmodule HumanEval do\n  def candidate(a, b, c), do: right_angle_triangle(a, b, c)\n  def right_angle_triangle(a, b, c) do\n    if a == b and b == c then\n      true\n    else\n      false\n    end\n  end\nend"], ["# Write a function that accepts a list of strings.\n# The list contains different words. Return the word with maximum number\n# of unique characters. If multiple strings have maximum number of unique\n# characters, return the one which comes first in lexicographical order.\n# >>> HumanEval.find_max([\"name\", \"of\", \"string\"])\n# \"string\"\n# >>> HumanEval.find_max([\"name\", \"enam\", \"game\"])\n# \"enam\"\n# >>> HumanEval.find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n# \"aaaaaaa\"\n\ndefmodule HumanEval do\n  def candidate(words), do: find_max(words)\n  def find_max(words) do\n    words.map do |word|\n      if words.count(word) > 1\n        words.first\n      else\n        words.first\n      end\n    end\n  end\nend"], ["# You're a hungry rabbit, and you already have eaten a certain number of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n# you should return a list of [ total number of eaten carrots after your meals,\n# the number of carrots left after your meals ]\n# if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n# >>> HumanEval.eat(5, 6, 10)\n# [11, 4]\n# >>> HumanEval.eat(4, 8, 9)\n# [12, 1]\n# >>> HumanEval.eat(1, 10, 10)\n# [11, 0]\n# >>> HumanEval.eat(2, 11, 5)\n# [7, 0]\n# Variables:\n# @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n# the number of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n\ndefmodule HumanEval do\n  def candidate(number, need, remaining), do: eat(number, need, remaining)\n  def eat(number, need, remaining) do\n    number = number + 1\n    if number > need\n      number = number - need\n      need = number\n      number = 0\n      need = 0\n      remaining = number\n    else\n      number = number - remaining\n      remaining = number\n      number = 0\n      need = number\n    end\n    number\n  end\nend"], ["# Given two lists operator, and operand. The first list has basic algebra operations, and \n# the second list is a list of integers. Use the two given lists to build the algebric \n# expression and return the evaluation of this expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+', '*', '-']\n# list = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is equal to the length of operand list minus one.\n# Operand is a list of of non-negative integers.\n# Operator list has at least one operator, and operand list has at least two operands.\n\ndefmodule HumanEval do\n  def candidate(operator, operand), do: do_algebra(operator, operand)\n  def do_algebra(operator, operand) do\n    # The first list has basic algebra operations, and \n    # the second list is a list of integers. Use the two given lists to build the algebric \n    # expression and return the evaluation of this expression.\n    # The basic algebra operations:\n    # Addition ( + ) \n    # Subtraction ( - ) \n    # Multiplication ( * ) \n    # Floor division ( // ) \n    # Exponentiation ( ** ) \n    # Example:\n    # operator['+', '*', '-']\n    # list = [2, 3, 4, 5]\n    # result = 2 + 3 * 4 - 5\n    # => result = 9\n    # Note:\n    # The length of operator list is equal to the length of operand list minus one.\n    # Operand is a list of of non-negative integers.\n    # Operator list has at least one operator, and operand list has at least two operands.\n  end\nend"], ["# You are given a string s.\n# if s[i] is a letter, reverse its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string contains no letters, reverse the string.\n# The function should return the resulted string.\n# Examples\n# >>> HumanEval.solve(\"1234\")\n# \"4321\"\n# >>> HumanEval.solve(\"ab\")\n# \"AB\"\n# >>> HumanEval.solve(\"#a@C\")\n# \"#A@c\"\n\ndefmodule HumanEval do\n  def candidate(s), do: solve(s)\n  def solve(s) do\n    # if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    # otherwise keep it as it is.\n    # If the string contains no letters, reverse the string.\n    # The function should return the resulted string.\n    # Examples\n    # >>> HumanEval.solve(\"1234\")\n    # \"4321\"\n    # >>> HumanEval.solve(\"ab\")\n    # \"AB\"\n    # >>> HumanEval.solve(\"#a@C\")\n    # \"#A@c\"\n  end\nend"], ["# Given a string 'text', return its md5 hash equivalent string.\n# If 'text' is an empty string, return nil.\n# >>> HumanEval.string_to_md5(\"Hello world\")\n# \"3e25960a79dbc69b674cd4ec67a72c62\"\n\ndefmodule HumanEval do\n  def candidate(text), do: string_to_md5(text)\n  def string_to_md5(text) do\n    # If 'text' is an empty string, return nil.\n    # If 'text' is a string, return the md5 hash of the string.\n    # If 'text' is a number, return the md5 hash of the number.\n    # If 'text' is a nil, return nil.\n    # If 'text' is a boolean, return the md5 hash of the boolean.\n    # If 'text' is a symbol, return the md5 hash of the symbol.\n    # If 'text' is a list, return the md5 hash of the list.\n    # If 'text' is a table, return the md5 hash of the table.\n    # If 'text' is a hash, return the md5 hash of the hash.\n    # If 'text' is a nil hash, return nil.\n    # If 'text' is a nil table, return nil.\n    # If 'text' is a nil list, return nil.\n    # If 'text' is a nil string, return nil.\n    # If 'text' is a nil number, return nil.\n    # If 'text' is a nil boolean, return nil.\n    # If 'text' is a nil symbol, return nil.\n    # If 'text' is a nil nil, return nil.\n    # If 'text' is a nil nil list, return nil.\n    # If 'text' is a nil nil table, return nil.\n    # If 'text' is a nil nil hash, return nil.\n    # If 'text' is a nil nil string, return nil.\n    # If 'text' is a nil nil number, return nil.\n    # If 'text' is a nil nil boolean, return nil.\n    # If 'text' is a"], ["# Given two positive integers a and b, return the even digits between a\n# and b, in ascending order.\n# For example:\n# >>> HumanEval.generate_integers(2, 8)\n# [2, 4, 6, 8]\n# >>> HumanEval.generate_integers(8, 2)\n# [2, 4, 6, 8]\n# >>> HumanEval.generate_integers(10, 14)\n# []\n\ndefmodule HumanEval do\n  def candidate(a, b), do: generate_integers(a, b)\n  def generate_integers(a, b) do\n    a = a.to_i\n    b = b.to_i\n    a <=> b\n    a.to_i + b.to_i\n  end\nend"]]