[["# <func> # Ruby\n# Check if in given array of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> has_close_elements.call([1.0, 2.0, 3.0], 0.5)\n# false\n# >>> has_close_elements.call([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n# true\ndef has_close_elements(numbers, threshold)\n  if numbers.length < 2\n    return false\n  end"], ["# <func> # Ruby\n# Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n# separate those group into separate strings and return the array of those.\n# Separate groups are balanced (each open brace is properly closed) and not nested within each other\n# Ignore any spaces in the input string.\n# >>> separate_paren_groups.call(\"( ) (( )) (( )( ))\")\n# [\"()\", \"(())\", \"(()())\"]\ndef separate_paren_groups(paren_string)\n  # Split the string into groups of parentheses\n  groups = paren_string.split(/\\s+/)\n  # Return the array of groups\n  return groups\nend"], ["# <func> # Ruby\n# Given a positive floating point number, it can be decomposed into\n# and integer part (largest integer smaller than given number) and decimals\n# (leftover part always smaller than 1).\n# Return the decimal part of the number.\n# >>> truncate_number.call(3.5)\n# 0.5\ndef truncate_number(number)\n  number = number.to_f\n  number = number.to_i\n  number = number.to_f.floor\n  number = number.to_i.floor\n  number = number.to_f.ceil\n  number = number.to_i.ceil\n  number\nend"], ["# <func> # Ruby\n# You're given an array of deposit and withdrawal operations on a bank account that starts with\n# zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n# at that point function should return true. Otherwise it should return false.\n# >>> below_zero.call([1, 2, 3])\n# false\n# >>> below_zero.call([1, 2, -4, 5])\n# true\ndef below_zero(operations)\noperations.each do |operation|\nif operation.deposit < 0\nreturn true\nreturn false\nend\nend\nend"], ["# <func> # Ruby\n# For a given array of input numbers, calculate Mean Absolute Deviation\n# around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute difference between each\n# element and a centerpoint (mean in this case):\n# MAD = average | x - x_mean |\n# >>> mean_absolute_deviation.call([1.0, 2.0, 3.0, 4.0])\n# 1.0\ndef mean_absolute_deviation(numbers)\n  numbers.each_with_index do |number, index|\n    mean = number.abs\n    if index == 0\n      mean = mean / numbers.size\n    end\n    mean_abs_deviation = mean_absolute_deviation(numbers[index + 1..-1])\n    mean_abs_deviation.abs + mean\n  end\nend"], ["# <func> # Ruby\n# Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n# >>> intersperse.call([], 4)\n# []\n# >>> intersperse.call([1, 2, 3], 4)\n# [1, 4, 2, 4, 3]\ndef intersperse(numbers, delimeter)\n  numbers.each_with_index do |number, index|\n    if index == numbers.size - 1\n      numbers[index + 1] = numbers[index] + delimeter\n    else\n      numbers[index + 1] = numbers[index] + delimeter\n    end\n  end\nend"], ["# <func> # Ruby\n# Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n# For each of the group, output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting while ((())) has three.\n# >>> parse_nested_parens.call(\"(()()) ((())) () ((())()())\")\n# [2, 3, 1, 3]\ndef parse_nested_parens(paren_string)\n  # Parses the string into a list of groups\n  groups = paren_string.split(/\\s+/)\n  # Finds the deepest level of nesting\n  max_level = groups.max_by(&:size)\n  # Returns the deepest level of nesting\n  return max_level\nend"], ["# <func> # Ruby\n# Filter an input array of strings only for ones that contain given substring\n# >>> filter_by_substring.call([], \"a\")\n# []\n# >>> filter_by_substring.call([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"]\ndef filter_by_substring(strings, substring)\n  strings.reject { |s| s =~ /#{substring}/ }\nend"], ["# <func> # Ruby\n# For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n# Empty sum should be equal to 0 and empty product should be equal to 1.\n# >>> sum_product.call([])\n# [0, 1]\n# >>> sum_product.call([1, 2, 3, 4])\n# [10, 24]\ndef sum_product(numbers)\n  numbers.inject(0) do |sum, number|\n    sum + number\n  end\nend"], ["# <func> # Ruby\n# From a given array of integers, generate an array of rolling maximum element found until given moment\n# in the sequence.\n# >>> rolling_max.call([1, 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n  numbers.each_with_object([]) do |number, accumulator|\n    accumulator << number if number > accumulator.first\n  end\nend"], ["# <func> # Ruby\n# Find the shortest palindrome that begins with a supplied string.\n# Algorithm idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n# - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n# >>> make_palindrome.call(\"\")\n# \"\"\n# >>> make_palindrome.call(\"cat\")\n# \"catac\"\n# >>> make_palindrome.call(\"cata\")\n# \"catac\"\ndef make_palindrome(string)"], ["# <func> # Ruby\n# Input are two strings a and b consisting only of 1s and 0s.\n# Perform binary XOR on these inputs and return result also as a string.\n# >>> string_xor.call(\"010\", \"110\")\n# \"100\"\ndef string_xor(a, b)\n  a.unshift(b.unshift(0))\n  a.unshift(0)\n  b.unshift(0)\n  a.unshift(0)\n  b.unshift(0)\n  a.unshift(0)\n  b.unshift(0)\n  a.unshift(0)\n  b.unshift(0)\n  a.unshift(0)\n  b.unshift(0)\n  a.unshift(0)\n  b.unshift(0)\n  a.unshift(0)\n  b.unshift(0)\n  a.unshift(0)\n  b.unshift(0)\n  a.unshift(0)\n  b.unshift(0)\n  a.unshift(0)\n  b.unshift(0)\n  a.unshift(0)\n  b.unshift(0)\n  a.unshift(0)\n  b.unshift(0)\n  a.unshift(0)\n  b.unshift(0)\n  a.unshift(0)\n  b.unshift(0)\n  a.unshift(0)\n  b.unshift(0)\n  a.unshift(0)\n  b.unshift(0)\n  a.unshift(0)\n  b.unshift(0)\n  a.unshift(0)\n  b.unshift(0)\n  a.unshift(0)\n  b.unshift(0)\n  a.unshift(0)\n  b.unshift(0)\n  a.unshift(0)\n  b.unshift(0)\n  a.unshift(0)\n  b.unshift(0)\n  a.unshift(0)\n  b.unshift(0)\n  a"], ["# <func> # Ruby\n# Out of array of strings, return the longest one. Return the first one in case of multiple\n# strings of the same length. Return nil in case the input array is empty.\n# >>> longest.call([])\n# nil\n# >>> longest.call([\"a\", \"b\", \"c\"])\n# \"a\"\n# >>> longest.call([\"a\", \"bb\", \"ccc\"])\n# \"ccc\"\ndef longest(strings)\n  strings.max_by(&:length).first\nend"], ["# <func> # Ruby\n# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor.call(3, 5)\n# 1\n# >>> greatest_common_divisor.call(25, 15)\n# 5\ndef greatest_common_divisor(a, b)\n  a, b = b, a\n  while b > 1\n    b = b - 1\n    a, b = b, a\n  end\n  a\nend"], ["# <func> # Ruby\n# Return array of all prefixes from shortest to longest of the input string\n# >>> all_prefixes.call(\"abc\")\n# [\"a\", \"ab\", \"abc\"]\ndef all_prefixes(string)\n  string.split(\"\").map { |s| s.split(\"-\") }.sort.reverse\nend"], ["# <func> # Ruby\n# Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n# >>> string_sequence.call(0)\n# \"0\"\n# >>> string_sequence.call(5)\n# \"0 1 2 3 4 5\"\ndef string_sequence(n)\n  n.times do |i|\n    return \"#{i} \"\n  end\nend"], ["# <func> # Ruby\n# Given a string, find out how many distinct characters (regardless of case) does it consist of\n# >>> count_distinct_characters.call(\"xyzXYZ\")\n# 3\n# >>> count_distinct_characters.call(\"Jerry\")\n# 4\ndef count_distinct_characters(string)\n  string.split(\"\").map(&:to_i).uniq.size\nend"], ["# <func> # Ruby\n# Input to this function is a string representing musical notes in a special ASCII format.\n# Your task is to parse this string and return array of integers corresponding to how many beats does each\n# not last.\n# Here is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|' - quater note, lasts one beat\n# >>> parse_music.call(\"o o| .| o| o| .| .| .| .| o o\")\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string)\nmusic_string.split(' ').map { |note| note.to_i }\nend"], ["# <func> # Ruby\n# Find how many times a given substring can be found in the original string. Count overlaping cases.\n# >>> how_many_times.call(\"\", \"a\")\n# 0\n# >>> how_many_times.call(\"aaa\", \"a\")\n# 3\n# >>> how_many_times.call(\"aaaa\", \"aa\")\n# 3\ndef how_many_times(string, substring)\n  string.chars.each_with_index do |char, index|\n    if char == substring\n      return index\n    end\n  end\n  return 0\nend"], ["# <func> # Ruby\n# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n# Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to largest\n# >>> sort_numbers.call(\"three one five\")\n# \"one three five\"\ndef sort_numbers(numbers)\nnumbers.sort.reverse.map { |n| n.to_i }\nend"], ["# <func> # Ruby\n# From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\n# >>> find_closest_elements.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n# [2.0, 2.2]\n# >>> find_closest_elements.call([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n# [2.0, 2.0]\ndef find_closest_elements(numbers)\n  numbers.sort.reverse.each do |number|\n    return numbers.min { |a, b| a <=> b } if number < number\n  end\n  return numbers.min { |a, b| a <=> b }\nend"], ["# <func> # Ruby\n# Given array of numbers (of at least two elements), apply a linear transform to that array,\n# such that the smallest number will become 0 and the largest will become 1\n# >>> rescale_to_unit.call([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0, 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers)\n  numbers.map { |n| n.to_i }.reduce(:+)\nend"], ["# <func> # Ruby\n# Filter given array of any rbthon values only for integers\n# >>> filter_integers.call([\"a\", 3.14, 5])\n# [5]\n# >>> filter_integers.call([1, 2, 3, \"abc\", {}, []])\n# [1, 2, 3]\ndef filter_integers(values)\n  values.each_with_object([]) do |v, res|\n    if v.is_a?(Integer)\n      res << v\n    else\n      res << v.to_i\n    end\n  end\nend"], ["# <func> # Ruby\n# Return length of given string\n# >>> strlen.call(\"\")\n# 0\n# >>> strlen.call(\"abc\")\n# 3\ndef strlen(string)\n  string.length\nend"], ["# <func> # Ruby\n# For a given number n, find the largest number that divides n evenly, smaller than n\n# >>> largest_divisor.call(15)\n# 5\ndef largest_divisor(n)\n  n.to_i.times do |i|\n    n = i\n    n.to_i.times do |i|\n      n = i\n    end\n    n.to_i.times do |i|\n      n = i\n    end\n    n.to_i.times do |i|\n      n = i\n    end\n    n.to_i.times do |i|\n      n = i\n    end\n    n.to_i.times do |i|\n      n = i\n    end\n    n.to_i.times do |i|\n      n = i\n    end\n    n.to_i.times do |i|\n      n = i\n    end\n    n.to_i.times do |i|\n      n = i\n    end\n    n.to_i.times do |i|\n      n = i\n    end\n    n.to_i.times do |i|\n      n = i\n    end\n    n.to_i.times do |i|\n      n = i\n    end\n    n.to_i.times do |i|\n      n = i\n    end\n    n.to_i.times do |i|\n      n = i\n    end\n    n.to_i.times do |i|\n      n = i\n    end\n    n.to_i.times do |i|\n      n = i\n    end\n    n.to_i.times do |i|\n      n = i\n    end\n    n.to_i.times do |i|\n      n = i\n    end\n    n.to_i.times do |i|\n      n = i\n    end\n    n.to_i.times do |i|\n      n = i\n    end\n    n.to_i.times do |i|\n      n = i\n    end\n    n.to_i.times do |i|\n      n ="], ["# <func> # Ruby\n# Return array of prime factors of given integer in the order from smallest to largest.\n# Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n# Input number should be equal to the product of all factors\n# >>> factorize.call(8)\n# [2, 2, 2]\n# >>> factorize.call(25)\n# [5, 5]\n# >>> factorize.call(70)\n# [2, 5, 7]\ndef factorize(n)\nn = n.to_i\nif n == 1\nreturn [1]\nif n == 2\nreturn [2]\nif n == 3\nreturn [3]\nif n == 4\nreturn [4]\nif n == 5\nreturn [5]\nif n == 6\nreturn [6]\nif n == 7\nreturn [7]\nif n == 8\nreturn [8]\nif n == 9\nreturn [9]\nif n == 10\nreturn [10]\nif n == 11\nreturn [11]\nif n == 12\nreturn [12]\nif n == 13\nreturn [13]\nif n == 14\nreturn [14]\nif n == 15\nreturn [15]\nif n == 16\nreturn [16]\nif n == 17\nreturn [17]\nif n == 18\nreturn [18]\nif n == 19\nreturn [19]\nif n == 20\nreturn [20]\nif n == 21\nreturn [21]\nif n == 22\nreturn [22]\nif n == 23\nreturn [23]\nif n == 24\nreturn [24]\nif n == 25\nreturn [25]\nif n == 26\nreturn [26]\nif n == 27\nreturn [27]\nif n == 28\nreturn [28]\nif n == 29\nreturn [29]\nif n == 30\nreturn [30]"], ["# <func> # Ruby\n# From an array of integers, remove all elements that occur more than once.\n# Keep order of elements left the same as in the input.\n# >>> remove_duplicates.call([1, 2, 3, 2, 4])\n# [1, 3, 4]\ndef remove_duplicates(numbers)\n  numbers.each_with_object([]) do |number, result|\n    if number.count > 1\n      result << number\n    end\n  end\nend"], ["# <func> # Ruby\n# For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n# >>> flip_case.call(\"Hello\")\n# \"hELLO\"\ndef flip_case(string)\n  string.split(\"\").map { |c| c.upcase }.join(\"\")\nend"], ["# <func> # Ruby\n# Concatenate array of strings into a single string\n# >>> concatenate.call([])\n# \"\"\n# >>> concatenate.call([\"a\", \"b\", \"c\"])\n# \"abc\"\ndef concatenate(strings)\n  strings.each_with_index do |string, index|\n    if index == strings.length - 1\n      return string\n    else\n      return string + concatenate(strings[index + 1..-1])\n    end\n  end\nend"], ["# <func> # Ruby\n# Filter an input array of strings only for ones that start with a given prefix.\n# >>> filter_by_prefix.call([], \"a\")\n# []\n# >>> filter_by_prefix.call([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\ndef filter_by_prefix(strings, prefix)\n  strings.each_with_index do |string, index|\n    if string.start_with?(prefix)\n      strings[index]\n    else\n      strings[index] = nil\n    end\n  end\n  strings\nend"], ["# <func> # Ruby\n# Return only positive numbers in the array.\n# >>> get_positive.call([-1, 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive.call([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l)\nl.sort.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl.reverse!\nl."], ["# <func> # Ruby\n# Return true if a given number is prime, and false otherwise.\n# >>> is_prime.call(6)\n# false\n# >>> is_prime.call(101)\n# true\n# >>> is_prime.call(11)\n# true\n# >>> is_prime.call(13441)\n# true\n# >>> is_prime.call(61)\n# true\n# >>> is_prime.call(4)\n# false\n# >>> is_prime.call(1)\n# false\ndef is_prime(n)\n  n = n.to_i\n  n = n.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to_i.to_s\n  n = n.to"], ["# <func> # Ruby\n# This function takes an array l and returns an array l' such that\n# l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n# to the values of the corresponding indicies of l, but sorted.\n# >>> sort_third.call([1, 2, 3])\n# [1, 2, 3]\n# >>> sort_third.call([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4, 8, 9, 5]\ndef sort_third(l)\nl.sort! { |a, b| a % 3 == b % 3 }\nl.sort! { |a, b| a <=> b }\nl.sort! { |a, b| a <=> b }\nl.sort! { |a, b| a <=> b }\nl.sort! { |a, b| a <=> b }\nl.sort! { |a, b| a <=> b }\nl.sort! { |a, b| a <=> b }\nl.sort! { |a, b| a <=> b }\nl.sort! { |a, b| a <=> b }\nl.sort! { |a, b| a <=> b }\nl.sort! { |a, b| a <=> b }\nl.sort! { |a, b| a <=> b }\nl.sort! { |a, b| a <=> b }\nl.sort! { |a, b| a <=> b }\nl.sort! { |a, b| a <=> b }\nl.sort! { |a, b| a <=> b }\nl.sort! { |a, b| a <=> b }\nl.sort! { |a, b| a <=> b }\nl.sort! { |a, b| a <=> b }\nl.sort! { |a, b| a <=> b }\nl.sort! { |a, b| a <=> b }\nl.sort! { |a,"], ["# <func> # Ruby\n# Return sorted unique elements in an array\n# >>> unique.call([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\ndef unique(l)\n  l.sort.uniq\nend"], ["# <func> # Ruby\n# Return maximum element in the array.\n# >>> max_element.call([1, 2, 3])\n# 3\n# >>> max_element.call([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# 123\ndef max_element(l)\n  l.max_by(&:value)\nend"], ["# <func> # Ruby\n# Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n# >>> fizz_buzz.call(50)\n# 0\n# >>> fizz_buzz.call(78)\n# 2\n# >>> fizz_buzz.call(79)\n# 3\ndef fizz_buzz(n)\n  return 0 if n == 0\n  return 1 if n == 1\n  return 2 if n == 2\n  return 3 if n == 3\n  return 4 if n == 4\n  return 5 if n == 5\n  return 6 if n == 6\n  return 7 if n == 7\n  return 8 if n == 8\n  return 9 if n == 9\n  return 10 if n == 10\n  return 11 if n == 11\n  return 12 if n == 12\n  return 13 if n == 13\n  return 14 if n == 14\n  return 15 if n == 15\n  return 16 if n == 16\n  return 17 if n == 17\n  return 18 if n == 18\n  return 19 if n == 19\n  return 20 if n == 20\n  return 21 if n == 21\n  return 22 if n == 22\n  return 23 if n == 23\n  return 24 if n == 24\n  return 25 if n == 25\n  return 26 if n == 26\n  return 27 if n == 27\n  return 28 if n == 28\n  return 29 if n == 29\n  return 30 if n == 30\n  return 31 if n == 31\n  return 32 if n == 32\n  return 33 if n == 33\n  return 34 if n == 34\n  return 35 if n == 3"], ["# <func> # Ruby\n# This function takes an array l and returns an array l' such that\n# l' is identical to l in the odd indicies, while its values at the even indicies are equal\n# to the values of the even indicies of l, but sorted.\n# >>> sort_even.call([1, 2, 3])\n# [1, 2, 3]\n# >>> sort_even.call([5, 6, 3, 4])\n# [3, 6, 5, 4]\ndef sort_even(l)\nl.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort."], ["# <func> # Ruby\n# prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n# >>> prime_fib.call(1)\n# 2\n# >>> prime_fib.call(2)\n# 3\n# >>> prime_fib.call(3)\n# 5\n# >>> prime_fib.call(4)\n# 13\n# >>> prime_fib.call(5)\n# 89\ndef prime_fib(n)\n  n = n.to_i\n  fib = []\n  fib.push(n)\n  fib.push(n + 1)\n  fib.push(n + 2)\n  fib.push(n + 3)\n  fib.push(n + 4)\n  fib.push(n + 5)\n  fib.push(n + 6)\n  fib.push(n + 7)\n  fib.push(n + 8)\n  fib.push(n + 9)\n  fib.push(n + 10)\n  fib.push(n + 11)\n  fib.push(n + 12)\n  fib.push(n + 13)\n  fib.push(n + 14)\n  fib.push(n + 15)\n  fib.push(n + 16)\n  fib.push(n + 17)\n  fib.push(n + 18)\n  fib.push(n + 19)\n  fib.push(n + 20)\n  fib.push(n + 21)\n  fib.push(n + 22)\n  fib.push(n + 23)\n  fib.push(n + 24)\n  fib.push(n + 25)\n  fib.push(n + 26)\n  fib.push(n + 27)\n  fib.push(n + 28)\n  fib.push(n + 29)\n  fib.push(n + 30)\n  fib.push(n + 31)\n  fib"], ["# <func> # Ruby\n# triples_sum_to_zero takes an array of integers as an input.\n# it returns true if there are three distinct elements in the array that\n# sum to zero, and false otherwise.\n# >>> triples_sum_to_zero.call([1, 3, 5, 0])\n# false\n# >>> triples_sum_to_zero.call([1, 3, -2, 1])\n# true\n# >>> triples_sum_to_zero.call([1, 2, 3, 7])\n# false\n# >>> triples_sum_to_zero.call([2, 4, -5, 3, 9, 7])\n# true\n# >>> triples_sum_to_zero.call([1])\n# false\ndef triples_sum_to_zero(l)\n  l.each do |x|\n    l.each do |y|\n      l.each do |z|\n        if x + y + z == 0\n          return true\n        end\n      end\n    end\n  end\n  false\nend"], ["# <func> # Ruby\n# Imagine a road that's a perfectly straight infinitely long line.\n# n cars are driving left to right;  simultaneously, a different set of n cars\n# are driving right to left.   The two sets of cars start out being very far from\n# each other.  All cars move in the same speed.  Two cars are said to collide\n# when a car that's moving left to right hits a car that's moving right to left.\n# However, the cars are infinitely sturdy and strong; as a result, they continue moving\n# in their trajectory as if they did not collide.\n# This function outputs the number of such collisions.\ndef car_race_collision(n)\n  n_cars = n.to_i\n  n_cars.times do |i|\n    n_cars.times do |j|\n      n_cars.times do |k|\n        n_cars.times do |l|\n          if i == j && i == k && i == l\n            return 1\n          end\n        end\n      end\n    end\n  end\nend"], ["# <func> # Ruby\n# Return array with elements incremented by 1.\n# >>> incr_list.call([1, 2, 3])\n# [2, 3, 4]\n# >>> incr_list.call([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [6, 4, 6, 3, 4, 4, 10, 1, 124]\ndef incr_list(l)\nl.each { |n| l.push(n+1) }\nend"], ["# <func> # Ruby\n# pairs_sum_to_zero takes an array of integers as an input.\n# it returns true if there are two distinct elements in the array that\n# sum to zero, and false otherwise.\n# >>> pairs_sum_to_zero.call([1, 3, 5, 0])\n# false\n# >>> pairs_sum_to_zero.call([1, 3, -2, 1])\n# false\n# >>> pairs_sum_to_zero.call([1, 2, 3, 7])\n# false\n# >>> pairs_sum_to_zero.call([2, 4, -5, 3, 5, 7])\n# true\n# >>> pairs_sum_to_zero.call([1])\n# false\ndef pairs_sum_to_zero(l)\n  l.sort.each do |a, b|\n    if a == b\n      return false\n    end\n  end\n  return true\nend"], ["# <func> # Ruby\n# Change numerical base of input number x to base.\n# return string representation after the conversion.\n# base numbers are less than 10.\n# >>> change_base.call(8, 3)\n# \"22\"\n# >>> change_base.call(8, 2)\n# \"1000\"\n# >>> change_base.call(7, 2)\n# \"111\"\ndef change_base(x, base)\n  return x.to_s.change_base(base)\nend"], ["# <func> # Ruby\n# Given length of a side and high return area for a triangle.\n# >>> triangle_area.call(5, 3)\n# 7.5\ndef triangle_area(a, h)\n  a = a.to_f\n  h = h.to_f\n  return 0 if a == h\n  return 0 if a == 0\n  return 1 if h == 0\n  return 1 if h == 1\n  return 2 if a == 1\n  return 2 if a == 2\n  return 3 if a == 3\n  return 3 if a == 4\n  return 4 if a == 5\n  return 5 if a == 6\n  return 6 if a == 7\n  return 7 if a == 8\n  return 8 if a == 9\n  return 9 if a == 10\n  return 10 if a == 11\n  return 11 if a == 12\n  return 12 if a == 13\n  return 13 if a == 14\n  return 14 if a == 15\n  return 15 if a == 16\n  return 16 if a == 17\n  return 17 if a == 18\n  return 18 if a == 19\n  return 19 if a == 20\n  return 20 if a == 21\n  return 21 if a == 22\n  return 22 if a == 23\n  return 23 if a == 24\n  return 24 if a == 25\n  return 25 if a == 26\n  return 26 if a == 27\n  return 27 if a == 28\n  return 28 if a == 29\n  return 29 if a == 30\n  return 30 if a == 31\n  return 31 if a == 32\n  return 32 if a == 33\n  return 33 if a == 34\n  return 34 if a == 35\n "], ["# <func> # Ruby\n# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n# >>> fib4.call(5)\n# 4\n# >>> fib4.call(6)\n# 8\n# >>> fib4.call(7)\n# 14\ndef fib4(n)"], ["# <func> # Ruby\n# Return median of elements in the array l.\n# >>> median.call([3, 1, 2, 4, 5])\n# 3\n# >>> median.call([-10, 4, 6, 1000, 10, 20])\n# 15.0\ndef median(l)\n  return l.median if l.size > 1\n  return l.first if l.size == 1\n  return l.first.median if l.size == 1\n  raise ArgumentError, \"l must be a list\"\nend"], ["# <func> # Ruby\n# Checks if given string is a palindrome\n# >>> is_palindrome.call(\"\")\n# true\n# >>> is_palindrome.call(\"aba\")\n# true\n# >>> is_palindrome.call(\"aaaaa\")\n# true\n# >>> is_palindrome.call(\"zbcd\")\n# false\ndef is_palindrome(text)\n  text.split.each do |word|\n    if word.length == 1\n      return true\n    end\n  end\n  return false\nend"], ["# <func> # Ruby\n# Return 2^n modulo p (be aware of numerics).\n# >>> modp.call(3, 5)\n# 3\n# >>> modp.call(1101, 101)\n# 2\n# >>> modp.call(0, 101)\n# 1\n# >>> modp.call(3, 11)\n# 8\n# >>> modp.call(100, 101)\n# 1\ndef modp(n, p)\n  n = n.to_i\n  p = p.to_i\n  return 2**n % p if n > 0\n  raise ArgumentError, \"p must be positive\"\nend"], ["# <func> # Ruby\n# remove_vowels is a function that takes string and returns string without vowels.\n# >>> remove_vowels.call(\"\")\n# \"\"\n# >>> remove_vowels.call(\"abcdef\")\n# \"bcdf\"\n# >>> remove_vowels.call(\"aaaaa\")\n# \"\"\n# >>> remove_vowels.call(\"aaBAA\")\n# \"B\"\n# >>> remove_vowels.call(\"zbcd\")\n# \"zbcd\"\ndef remove_vowels(text)\n  text.gsub!(/[aeiou]/, '')\nend"], ["# <func> # Ruby\n# Return true if all numbers in the array l are below threshold t.\n# >>> below_threshold.call([1, 2, 4, 10], 100)\n# true\n# >>> below_threshold.call([1, 20, 4, 10], 5)\n# false\ndef below_threshold(l, t)\n  l.each do |n|\n    if n < t\n      return true\n    end\n  end\n  return false\nend"], ["# <func> # Ruby\n# Add two numbers x and y\n# >>> add.call(2, 3)\n# 5\n# >>> add.call(5, 7)\n# 12\ndef add(x, y)\n  x + y\nend"], ["# <func> # Ruby\n# Check if two words have the same characters.\n# >>> same_chars.call(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n# true\n# >>> same_chars.call(\"abcd\", \"dddddddabc\")\n# true\n# >>> same_chars.call(\"dddddddabc\", \"abcd\")\n# true\n# >>> same_chars.call(\"eabcd\", \"dddddddabc\")\n# false\n# >>> same_chars.call(\"abcd\", \"dddddddabce\")\n# false\n# >>> same_chars.call(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n# false\ndef same_chars(s0, s1)\n  return true if s0 == s1\n  return false if s0.length != s1.length\n  return true if s0.length == s1.length\n  return false if s0.length != s1.length\n  return true if s0.length == s1.length\n  return false if s0.length != s1.length\n  return true if s0.length == s1.length\n  return false if s0.length != s1.length\n  return true if s0.length == s1.length\n  return false if s0.length != s1.length\n  return true if s0.length == s1.length\n  return false if s0.length != s1.length\n  return true if s0.length == s1.length\n  return false if s0.length != s1.length\n  return true if s0.length == s1.length\n  return false if s0.length != s1.length\n  return true if s0.length == s1.length\n  return false if s0.length != s1.length\n  return true if s0.length == s1.length\n  return false if s0.length != s1.length\n  return true if s0.length == s1.length\n  return false if s0.length != s1.length\n  return true if s0.length == s1.length\n  return false if s0.length !="], ["# <func> # Ruby\n# Return n-th Fibonacci number.\n# >>> fib.call(10)\n# 55\n# >>> fib.call(1)\n# 1\n# >>> fib.call(8)\n# 21\ndef fib(n)\n  n = n.to_i\n  if n == 0 or n == 1\n    return 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend"], ["# <func> # Ruby\n# brackets is a string of \"<\" and \">\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"<\")\n# false\n# >>> correct_bracketing.call(\"<>\")\n# true\n# >>> correct_bracketing.call(\"<<><>>\")\n# true\n# >>> correct_bracketing.call(\"><<>\")\n# false\ndef correct_bracketing(brackets)\n  brackets.each do |bracket|\n    if bracket.is_a?(String)\n      bracket.split(' ').each do |opening_bracket|\n        if opening_bracket.is_a?(String)\n          opening_bracket.split(' ').each do |closing_bracket|\n            if closing_bracket.is_a?(String)\n              closing_bracket.split(' ').each do |closing_bracket_2|\n                if closing_bracket_2.is_a?(String)\n                  closing_bracket_2.split(' ').each do |closing_bracket_3|\n                    if closing_bracket_3.is_a?(String)\n                      closing_bracket_3.split(' ').each do |closing_bracket_4|\n                        if closing_bracket_4.is_a?(String)\n                          closing_bracket_4.split(' ').each do |closing_bracket_5|\n                            if closing_bracket_5.is_a?(String)\n                              closing_bracket_5.split(' ').each do |closing_bracket_6|\n                                if closing_bracket_6.is_a?(String)\n                                  closing_bracket_6.split(' ').each do |closing_bracket_7|\n                                    if closing_bracket_7.is_a?(String)\n                                      closing_bracket_7.split(' ').each do |closing_bracket_8|\n                                        if closing_bracket_8.is_a?(String)\n                                          closing_bracket_8.split(' ').each do"], ["# <func> # Ruby\n# Return true is array elements are monotonically increasing or decreasing.\n# >>> monotonic.call([1, 2, 4, 20])\n# true\n# >>> monotonic.call([1, 20, 4, 10])\n# false\n# >>> monotonic.call([4, 1, 0, -10])\n# true\ndef monotonic(l)\n  return true if l.size == 1\n  return false if l.size == 0\n  return false if l.size == 1 and l.first == l.last\n  return true if l.size == 1 and l.first < l.last\n  return false if l.size == 1 and l.first == l.last\n  return false if l.size == 1 and l.first == l.last\n  return false if l.size == 1 and l.first == l.last\n  return false if l.size == 1 and l.first == l.last\n  return false if l.size == 1 and l.first == l.last\n  return false if l.size == 1 and l.first == l.last\n  return false if l.size == 1 and l.first == l.last\n  return false if l.size == 1 and l.first == l.last\n  return false if l.size == 1 and l.first == l.last\n  return false if l.size == 1 and l.first == l.last\n  return false if l.size == 1 and l.first == l.last\n  return false if l.size == 1 and l.first == l.last\n  return false if l.size == 1 and l.first == l.last\n  return false if l.size == 1 and l.first == l.last\n  return false if l.size == 1 and l.first == l.last\n  return false if l.size == 1 and l.first == l.last\n  return false if l.size == 1 and l.first == l.last\n  return false if l.size == 1 and l.first == l.last\n  return false if l.size == "], ["# <func> # Ruby\n# Return sorted unique common elements for two arrays.\n# >>> common.call([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common.call([5, 3, 2, 8], [3, 2])\n# [2, 3]\ndef common(l1, l2)\nl1.sort.map { |x| l2.sort.map { |y| x == y ? x : y } }\nend"], ["# <func> # Ruby\n# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n# >>> largest_prime_factor.call(13195)\n# 29\n# >>> largest_prime_factor.call(2048)\n# 2\ndef largest_prime_factor(n)\n  n = n.to_i\n  if n == 1\n    return 1\n  elsif n == 2\n    return 2\n  elsif n == 3\n    return 3\n  elsif n == 4\n    return 4\n  elsif n == 5\n    return 5\n  elsif n == 6\n    return 6\n  elsif n == 7\n    return 7\n  elsif n == 8\n    return 8\n  elsif n == 9\n    return 9\n  elsif n == 10\n    return 10\n  elsif n == 11\n    return 11\n  elsif n == 12\n    return 12\n  elsif n == 13\n    return 13\n  elsif n == 14\n    return 14\n  elsif n == 15\n    return 15\n  elsif n == 16\n    return 16\n  elsif n == 17\n    return 17\n  elsif n == 18\n    return 18\n  elsif n == 19\n    return 19\n  elsif n == 20\n    return 20\n  elsif n == 21\n    return 21\n  elsif n == 22\n    return 22\n  elsif n == 23\n    return 23\n  elsif n == 24\n    return 24\n  elsif n == 25\n    return 25\n  elsif n == 26\n    return 26\n  elsif n == 27\n    return 27\n  elsif n == 28\n    return 28\n  elsif n == 29\n    return 29\n  elsif n == "], ["# <func> # Ruby\n# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n.call(30)\n# 465\n# >>> sum_to_n.call(100)\n# 5050\n# >>> sum_to_n.call(5)\n# 15\n# >>> sum_to_n.call(10)\n# 55\n# >>> sum_to_n.call(1)\n# 1\ndef sum_to_n(n)\n  n.times { |i| i.to_i + 1 }\nend"], ["# <func> # Ruby\n# brackets is a string of \"(\" and \")\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"(\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"(()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n  return true if brackets.length == 1\n  brackets.each do |bracket|\n    if bracket.is_a?(String)\n      return true if bracket == brackets.last\n    else\n      return true if bracket == brackets[0]\n    end\n  end\n  false\nend"], ["# <func> # Ruby\n# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2] * x^2 + ....\n# Return derivative of this polynomial in the same form.\n# >>> derivative.call([3, 1, 2, 4, 5])\n# [1, 4, 12, 20]\n# >>> derivative.call([1, 2, 3])\n# [2, 6]\ndef derivative(xs)\n@_derivative(xs)\n@_derivative(xs[0])\n@_derivative(xs[1])\n@_derivative(xs[2])\n@_derivative(xs[3])\n@_derivative(xs[4])\n@_derivative(xs[5])\n@_derivative(xs[6])\n@_derivative(xs[7])\n@_derivative(xs[8])\n@_derivative(xs[9])\n@_derivative(xs[10])\n@_derivative(xs[11])\n@_derivative(xs[12])\n@_derivative(xs[13])\n@_derivative(xs[14])\n@_derivative(xs[15])\n@_derivative(xs[16])\n@_derivative(xs[17])\n@_derivative(xs[18])\n@_derivative(xs[19])\n@_derivative(xs[20])\n@_derivative(xs[21])\n@_derivative(xs[22])\n@_derivative(xs[23])\n@_derivative(xs[24])\n@_derivative(xs[25])\n@_derivative(xs[26])\n@_derivative(xs[27])\n@_derivative(xs[28])\n@_derivative(xs[29])\n@_derivative(xs[30])\n@_derivative(xs[31])\n@_derivative(xs[32"], ["# <func> # Ruby\n# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n# >>> fibfib.call(1)\n# 0\n# >>> fibfib.call(5)\n# 4\n# >>> fibfib.call(8)\n# 24\ndef fibfib(n)"], ["# <func> # Ruby\n# Write a function vowels_count which takes a string representing\n# a word as input and returns the number of vowels in the string.\n# Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is at the end of the given word.\n# Example:\n# >>> vowels_count.call(\"abcde\")\n# 2\n# >>> vowels_count.call(\"ACEDY\")\n# 3\ndef vowels_count(s)\n  s.split.count { |c| c.is_a?(String) && c.downcase.include?(\"a\") }\nend"], ["# <func> # Ruby\n# Circular shift the digits of the integer x, shift the digits right by shift\n# and return the result as a string.\n# If shift > number of digits, return digits reversed.\n# >>> circular_shift.call(12, 1)\n# \"21\"\n# >>> circular_shift.call(12, 2)\n# \"12\"\ndef circular_shift(x, shift)\n  return x.to_s.reverse if shift > x.size\n  x.to_s.reverse.shuffle!\n  x.to_s.reverse\nend"], ["# <func> # Ruby\n# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum.call(\"\")\n# 0\n# >>> digitSum.call(\"abAB\")\n# 131\n# >>> digitSum.call(\"abcCd\")\n# 67\n# >>> digitSum.call(\"helloE\")\n# 69\n# >>> digitSum.call(\"woArBld\")\n# 131\n# >>> digitSum.call(\"aAaaaXa\")\n# 153\ndef digitSum(s)\n  s.split(\"\").map { |c| c.to_i }.reduce(:+)\nend"], ["# <func> # Ruby\n# In this task, you will be given a string that represents a number of apples and oranges \n# that are distributed in a basket of fruit this basket contains \n# apples, oranges, and mango fruits. Given the string that represents the total number of \n# the oranges and apples and an integer that represent the total number of the fruits \n# in the basket return the number of the mango fruits in the basket.\n# for examble:\n# >>> fruit_distribution.call(\"5 apples and 6 oranges\", 19)\n# 8\n# >>> fruit_distribution.call(\"0 apples and 1 oranges\", 3)\n# 2\n# >>> fruit_distribution.call(\"2 apples and 3 oranges\", 100)\n# 95\n# >>> fruit_distribution.call(\"100 apples and 1 oranges\", 120)\n# 19\ndef fruit_distribution(s, n)\n  n.times do |i|\n    s.split(\" \").each do |x|\n      if x.to_i == i\n        s.split(\" \").each do |y|\n          if y.to_i == i\n            s.split(\" \").each do |z|\n              if z.to_i == i\n                return i\n              end\n            end\n          end\n        end\n      end\n    end\n  end\nend"], ["# <func> # Ruby\n# \"Given an array representing a branch of a tree that has non-negative integer nodes\n# your task is to pluck one of the nodes and return it.\n# The plucked node should be the node with the smallest even value.\n# If multiple nodes with the same smallest even value are found return the node that has smallest index.\n# The plucked node should be returned in an array, [ smalest_value, its index ],\n# If there are no even values or the given array is empty, return [].\n# Example 1:\n# >>> pluck.call([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>> pluck.call([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 3:\n# >>> pluck.call([])\n# []\n# Example 4:\n# >>> pluck.call([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the smallest value, but  there are two zeros,\n# so we will choose the first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\ndef pluck(arr)\narr.sort!\narr.map { |n| n.value }.min\nend"], ["# <func> # Ruby\n# You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n# zero, and has a frequency greater than or equal to the value of the integer itself. \n# The frequency of an integer is the number of times it appears in the array.\n# If no such a value exist, return -1.\n# Examples:\n# >>> search.call([4, 1, 2, 2, 3, 1])\n# 2\n# >>> search.call([1, 2, 2, 3, 3, 3, 4, 4, 4])\n# 3\n# >>> search.call([5, 5, 4, 4, 4])\n# -1\ndef search(lst)\n  if lst.empty?\n    -1\n  else\n    lst.max.frequency\n  end\nend"], ["# <func> # Ruby\n# Given array of integers, return array in strange order.\n# Strange sorting, is when you start with the minimum value,\n# then maximum of the remaining integers, then minimum and so on.\n# Examples:\n# >>> strange_sort_list.call([1, 2, 3, 4])\n# [1, 4, 2, 3]\n# >>> strange_sort_list.call([5, 5, 5, 5])\n# [5, 5, 5, 5]\n# >>> strange_sort_list.call([])\n# []\ndef strange_sort_list(lst)\n  lst.sort!\n  lst.reverse!\n  lst.map! { |x| x.to_i }\nend"], ["# <func> # Ruby\n# Given the lengths of the three sides of a triangle. Return the area of\n# the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any two sides is greater \n# than the third side.\n# Example:\n# >>> triangle_area.call(3, 4, 5)\n# 6.0\n# >>> triangle_area.call(1, 2, 10)\n# -1\ndef triangle_area(a, b, c)\n  if a == b == c\n    -1\n  else\n    a + b + c\n  end\nend"], ["# <func> # Ruby\n# Write a function that returns true if the object q will fly, and false otherwise.\n# The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n# Example:\n# >>> will_it_fly.call([1, 2], 5)\n# false\n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>> will_it_fly.call([3, 2, 3], 1)\n# false\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> will_it_fly.call([3, 2, 3], 9)\n# true\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# >>> will_it_fly.call([3], 5)\n# true\n# # 3 is less than the maximum possible weight, and it's balanced.\ndef will_it_fly(q, w)\n  q.balance? ? q.sum(w) < w : false\nend"], ["# <func> # Ruby\n# Given an array arr of integers, find the minimum number of elements that\n# need to be changed to make the array palindromic. A palindromic array is an array that\n# is read the same backwards and forwards. In one change, you can change one element to any other element.\n# For example:\n# >>> smallest_change.call([1, 2, 3, 5, 4, 7, 9, 6])\n# 4\n# >>> smallest_change.call([1, 2, 3, 4, 3, 2, 2])\n# 1\n# >>> smallest_change.call([1, 2, 3, 2, 1])\n# 0\ndef smallest_change(arr)\n  arr.each_with_object([]) do |element, result|\n    result << element if result.empty?\n    result.push(element)\n  end\nend"], ["# <func> # Ruby\n# Write a function that accepts two arrays of strings and returns the array that has \n# total number of chars in the all strings of the array less than the other array.\n# if the two arrays have the same number of chars, return the first array.\n# Examples\n# >>> total_match.call([], [])\n# []\n# >>> total_match.call([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n# [\"hI\", \"Hi\"]\n# >>> total_match.call([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n# [\"hi\", \"admin\"]\n# >>> total_match.call([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n# [\"hI\", \"hi\", \"hi\"]\n# >>> total_match.call([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n# [\"4\"]\ndef total_match(lst1, lst2)\n  return [] if lst1.size == lst2.size\n  return [] if lst1.size == 0\n  return [] if lst2.size == 0\n  total = 0\n  for i in 0..lst1.size-1\n    if lst1[i] == lst2[i]\n      total += 1\n    end\n  end\n  return total\nend"], ["# <func> # Ruby\n# Write a function that returns true if the given number is the multiplication of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100. \n# Example:\n# >>> is_multiply_prime.call(30)\n# true\n# 30 = 2 * 3 * 5\ndef is_multiply_prime(a)\n  if a == 1\n    return false\n  elsif a == 2\n    return true\n  elsif a == 3\n    return true\n  elsif a == 5\n    return true\n  elsif a == 7\n    return true\n  elsif a == 11\n    return true\n  elsif a == 13\n    return true\n  elsif a == 17\n    return true\n  elsif a == 19\n    return true\n  elsif a == 23\n    return true\n  elsif a == 29\n    return true\n  elsif a == 31\n    return true\n  elsif a == 37\n    return true\n  elsif a == 41\n    return true\n  elsif a == 43\n    return true\n  elsif a == 47\n    return true\n  elsif a == 49\n    return true\n  elsif a == 53\n    return true\n  elsif a == 59\n    return true\n  elsif a == 61\n    return true\n  elsif a == 67\n    return true\n  elsif a == 71\n    return true\n  elsif a == 73\n    return true\n  elsif a == 77\n    return true\n  elsif a == 81\n    return true\n  elsif a == 83\n    return true\n  elsif a == 87\n    return true\n  elsif a == 89\n    return true\n  elsif a == 93\n    return true\n  elsif a == 97\n    return true\n  elsif a == 101\n    return true\n  elsif a == 103\n    return true\n  els"], ["# <func> # Ruby\n# Your task is to write a function that returns true if a number x is a simple\n# power of n and false in other cases.\n# x is a simple power of n if n**int=x\n# For example:\n# >>> is_simple_power.call(1, 4)\n# true\n# >>> is_simple_power.call(2, 2)\n# true\n# >>> is_simple_power.call(8, 2)\n# true\n# >>> is_simple_power.call(3, 2)\n# false\n# >>> is_simple_power.call(3, 1)\n# false\n# >>> is_simple_power.call(5, 3)\n# false\ndef is_simple_power(x, n)\n  if n == 1\n    x == 1\n  else\n    x == n**x\n  end\nend"], ["# <func> # Ruby\n# Write a function that takes an integer a and returns true \n# if this ingeger is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# >>> iscube.call(1)\n# true\n# >>> iscube.call(2)\n# false\n# >>> iscube.call(-1)\n# true\n# >>> iscube.call(64)\n# true\n# >>> iscube.call(0)\n# true\n# >>> iscube.call(180)\n# false\ndef iscube(a)\n  return a == 1\nend"], ["# <func> # Ruby\n# You have been tasked to write a function that receives \n# a hexadecimal number as a string and counts the number of hexadecimal \n# digits that are primes (prime number, or a prime, is a natural number \n# greater than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n# Examples:\n# >>> hex_key.call(\"AB\")\n# 1\n# >>> hex_key.call(\"1077E\")\n# 2\n# >>> hex_key.call(\"ABED1A33\")\n# 4\n# >>> hex_key.call(\"123456789ABCDEF0\")\n# 6\n# >>> hex_key.call(\"2020\")\n# 2\ndef hex_key(num)\n  if num.to_i == 0\n    return 0\n  elsif num.to_i == 1\n    return 1\n  elsif num.to_i == 2\n    return 2\n  elsif num.to_i == 3\n    return 3\n  elsif num.to_i == 4\n    return 4\n  elsif num.to_i == 5\n    return 5\n  elsif num.to_i == 6\n    return 6\n  elsif num.to_i == 7\n    return 7\n  elsif num.to_i == 8\n    return 8\n  elsif num.to"], ["# <func> # Ruby\n# You will be given a number in decimal form and your task is to convert it to\n# binary format. The function should return a string, with each character representing a binary\n# number. Each character in the string will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n# The extra characters are there to help with the format.\n# Examples:\n# >>> decimal_to_binary.call(15)\n# \"db1111db\"\n# >>> decimal_to_binary.call(32)\n# \"db100000db\"\ndef decimal_to_binary(decimal)\n  if decimal == 0\n    return \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["# <func> # Ruby\n# You are given a string s.\n# Your task is to check if the string is haprb or not.\n# A string is haprb if its length is at least 3 and every 3 consecutive letters are distinct\n# For example:\n# >>> is_happy.call(\"a\")\n# false\n# >>> is_happy.call(\"aa\")\n# false\n# >>> is_happy.call(\"abcd\")\n# true\n# >>> is_happy.call(\"aabb\")\n# false\n# >>> is_happy.call(\"adb\")\n# true\n# >>> is_happy.call(\"xyy\")\n# false\ndef is_happy(s)\n  s.length.must.be.at_least(3)\n  s.each_char.must.be.uniquely_sorted\n  s.each_char.must.be.uniquely_sorted\n  s.each_char.must.be.uniquely_sorted\n  s.each_char.must.be.uniquely_sorted\n  s.each_char.must.be.uniquely_sorted\n  s.each_char.must.be.uniquely_sorted\n  s.each_char.must.be.uniquely_sorted\n  s.each_char.must.be.uniquely_sorted\n  s.each_char.must.be.uniquely_sorted\n  s.each_char.must.be.uniquely_sorted\n  s.each_char.must.be.uniquely_sorted\n  s.each_char.must.be.uniquely_sorted\n  s.each_char.must.be.uniquely_sorted\n  s.each_char.must.be.uniquely_sorted\n  s.each_char.must.be.uniquely_sorted\n  s.each_char.must.be.uniquely_sorted\n  s.each_char.must.be.uniquely_sorted\n  s.each_char.must.be.uniquely_sorted\n  s.each_char.must.be.uniquely_sorted\n  s.each_char"], ["# <func> # Ruby\n# It is the last week of the semester and the teacher has to give the grades\n# to students. The teacher has been making her own algorithm for grading.\n# The only problem is, she has lost the code she used for grading.\n# She has given you an array of GPAs for some students and you have to write \n# a function that can output an array of letter grades using the following table:\n# GPA       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7                B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7                C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n# >>> grade_equation.call([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\ndef numerical_letter_grade(grades)\n  grades.map { |g| g.to_i.to_s.upcase }\nend"], ["# <func> # Ruby\n# Write a function that takes a string and returns true if the string\n# length is a prime number or false otherwise\n# Examples\n# >>> prime_length.call(\"Hello\")\n# true\n# >>> prime_length.call(\"abcdcba\")\n# true\n# >>> prime_length.call(\"kittens\")\n# true\n# >>> prime_length.call(\"orange\")\n# false\ndef prime_length(string)\n  string.length.is_a?(Integer) ? true : false\nend"], ["# <func> # Ruby\n# Given a positive integer n, return the count of the numbers of n-digit\n# positive integers that start or end with 1.\ndef starts_one_ends(n)\n  n.times do |i|\n    if i == 1\n      return 1\n    else\n      return starts_one_ends(i - 1) + 1\n    end\n  end\nend"], ["# <func> # Ruby\n# Given a positive integer N, return the total sum of its digits in binary.\n# Example\n# >>> solve.call(1000)\n# \"1\"\n# >>> solve.call(150)\n# \"110\"\n# >>> solve.call(147)\n# \"1100\"\n# Variables:\n# @N integer\n# Constraints: 0 \u2264 N \u2264 10000.\n# Output:\n# a string of binary number\ndef solve(n)\n  n = n.to_i\n  n = n.to_s\n  n = n.to_s(2)\n  n = n.to_s(3)\n  n = n.to_s(4)\n  n = n.to_s(5)\n  n = n.to_s(6)\n  n = n.to_s(7)\n  n = n.to_s(8)\n  n = n.to_s(9)\n  n = n.to_s(10)\n  n = n.to_s(11)\n  n = n.to_s(12)\n  n = n.to_s(13)\n  n = n.to_s(14)\n  n = n.to_s(15)\n  n = n.to_s(16)\n  n = n.to_s(17)\n  n = n.to_s(18)\n  n = n.to_s(19)\n  n = n.to_s(20)\n  n = n.to_s(21)\n  n = n.to_s(22)\n  n = n.to_s(23)\n  n = n.to_s(24)\n  n = n.to_s(25)\n  n = n.to_s(26)\n  n = n.to_s(27)\n  n = n.to_s(28)\n  n = n.to_s(29)\n  n = n.to_s"], ["# <func> # Ruby\n# Given a non-empty array of integers lst. add the even elements that are at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n  lst.each_with_index do |e, i|\n    if i % 2 == 0\n      add_even(e)\n    else\n      add_odd(e)\n    end\n  end\nend"], ["# <func> # Ruby\n# Write a function that takes a string and returns an ordered version of it.\n# Ordered version of string, is a string where all words (separated by space)\n# are replaced by a new word where all the characters arranged in\n# ascending order based on ascii value.\n# Note: You should keep the order of words and blank spaces in the sentence.\n# For example:\n# >>> anti_shuffle.call(\"Hi\")\n# \"Hi\"\n# >>> anti_shuffle.call(\"hello\")\n# \"ehllo\"\n# >>> anti_shuffle.call(\"Hello World!!!\")\n# \"Hello !!!Wdlor\"\ndef anti_shuffle(s)\ns.gsub(/(\\w+)/, function(word) {\nreturn word.to_s.upcase\nend)\nend"], ["# <func> # Ruby\n# You are given a 2 dimensional data, as a nested arrays,\n# which is similar to matrix, however, unlike matrices,\n# each row may contain a different number of columns.\n# Given lst, and integer x, find integers x in the array,\n# and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n# each array is a coordinate - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending order.\n# Also, sort coordinates of the row by columns in descending order.\n# Examples:\n# >>> get_row.call([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n# [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n# >>> get_row.call([], 1)\n# []\n# >>> get_row.call([[], [1], [1, 2, 3]], 3)\n# [[2, 2]]\ndef get_row(lst, x)"], ["# <func> # Ruby\n# Given an array of non-negative integers, return a corb of the given array after sorting,\n# you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n# or sort it in descending order if the sum( first index value, last index value) is even.\n# Note:\n# * don't change the given array.\n# Examples:\n# >>> sort_array.call([])\n# []\n# >>> sort_array.call([5])\n# [5]\n# >>> sort_array.call([2, 4, 3, 0, 1, 5])\n# [0, 1, 2, 3, 4, 5]\n# >>> sort_array.call([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\ndef sort_array(array)\narray.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort.sort."], ["# <func> # Ruby\n# Create a function encrypt that takes a string as an argument and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet should be rotated in a manner such that the letters \n# shift down by two multiplied to two places.\n# For example:\n# >>> encrypt.call(\"hi\")\n# \"lm\"\n# >>> encrypt.call(\"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> encrypt.call(\"gf\")\n# \"kj\"\n# >>> encrypt.call(\"et\")\n# \"ix\"\ndef encrypt(s)\n  alphabet = s.to_s.split(\"\")\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2)\n  alphabet.rotate(2"], ["# <func> # Ruby\n# You are given an array of integers.\n# Write a function next_smallest() that returns the 2nd smallest element of the array.\n# Return nil if there is no such element.\n# >>> next_smallest.call([1, 2, 3, 4, 5])\n# 2\n# >>> next_smallest.call([5, 1, 4, 3, 2])\n# 2\n# >>> next_smallest.call([])\n# nil\n# >>> next_smallest.call([1, 1])\n# nil\ndef next_smallest(lst)\n  return nil if lst.empty?\n  return lst.last if lst.size == 1\n  return lst.last.next_smallest(lst)\nend"], ["# <func> # Ruby\n# You'll be given a string of words, and your task is to count the number\n# of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored.call(\"Hello world\")\n# 0\n# >>> is_bored.call(\"The sky is blue. The sun is shining. I love this weather\")\n# 1\ndef is_bored(s)\n  s.split('.').each do |word|\n    if word.start_with?('I')\n      return 0\n    end\n  end\n  return 1\nend"], ["# <func> # Ruby\n# Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n# Examples\n# >>> any_int.call(5, 2, 7)\n# true\n# >>> any_int.call(3, 2, 2)\n# false\n# >>> any_int.call(3, -2, 1)\n# true\n# >>> any_int.call(3.6, -2.2, 2)\n# false\ndef any_int(x, y, z)\n  return x == y && y == z && z == x\nend"], ["# <func> # Ruby\n# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode.call(\"test\")\n# \"TGST\"\n# >>> encode.call(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\ndef encode(message)\n  message.split(\"\").map { |letter| letter.upcase }.join(\"\")\nend"], ["# <func> # Ruby\n# You are given an array of integers.\n# You need to find the largest prime value and return the sum of its digits.\n# Examples:\n# >>> skjkasdkd.call([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n# 10\n# >>> skjkasdkd.call([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n# 25\n# >>> skjkasdkd.call([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n# 13\n# >>> skjkasdkd.call([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n# 11\n# >>> skjkasdkd.call([0, 81, 12, 3, 1, 21])\n# 3\n# >>> skjkasdkd.call([0, 8, 1, 2, 1, 7])\n# 7\ndef skjkasdkd(lst)\n  lst.sort.reverse.map { |x| x.to_i }.reduce(:+)\nend"], ["# <func> # Ruby\n# Given a hash, return true if all keys are strings in lower \n# case or all keys are strings in upper case, else return false.\n# The function should return false is the given hash is empty.\n# Examples:\n# >>> check_dict_case.call({\"a\" => \"apple\", \"b\" => \"banana\"})\n# true\n# >>> check_dict_case.call({\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# false\n# >>> check_dict_case.call({\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# false\n# >>> check_dict_case.call({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# false\n# >>> check_dict_case.call({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# true\ndef check_dict_case(dict)\n  case dict\n    when Hash\n      return check_case(dict)\n    when String\n      return check_case(dict.to_s)\n    else\n      return false\n  end\nend"], ["# <func> # Ruby\n# Implement a function that takes an non-negative integer and returns an array of the first n\n# integers that are prime numbers and less than n.\n# for example:\n# >>> count_up_to.call(5)\n# [2, 3]\n# >>> count_up_to.call(11)\n# [2, 3, 5, 7]\n# >>> count_up_to.call(0)\n# []\n# >>> count_up_to.call(20)\n# [2, 3, 5, 7, 11, 13, 17, 19]\n# >>> count_up_to.call(1)\n# []\n# >>> count_up_to.call(18)\n# [2, 3, 5, 7, 11, 13, 17]\ndef count_up_to(n)\n  n.times do |i|\n    i.times do |j|\n      if j < n\n        yield j\n      end\n    end\n  end\nend"], ["# <func> # Ruby\n# Complete the function that takes two integers and returns \n# the product of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# >>> multiply.call(148, 412)\n# 16\n# >>> multiply.call(19, 28)\n# 72\n# >>> multiply.call(2020, 1851)\n# 0\n# >>> multiply.call(14, -15)\n# 20\ndef multiply(a, b)\n  a.unit_digits.each { |unit_digit| b.unit_digits.each { |unit_digit| yield unit_digit * a.unit_digits.first.unit_digits.last } }\nend"], ["# <func> # Ruby\n# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\n# >>> count_upper.call(\"aBCdEf\")\n# 1\n# >>> count_upper.call(\"abcdefg\")\n# 0\n# >>> count_upper.call(\"dBBE\")\n# 0\ndef count_upper(s)\n  s.split.each_with_index.map { |v, i|\n    if v.is_a?(String)\n      if i % 2 == 0\n        count_upper(v.upcase)\n      else\n        count_lower(v.downcase)\n      end\n    else\n      count_lower(v.upcase)\n    end\n  }.reduce(:+)\nend"], ["# <func> # Ruby\n# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer.call(\"10\")\n# 10\n# >>> closest_integer.call(\"15.3\")\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\ndef closest_integer(value)\n  value = value.to_i\n  if value == 0\n    return 0\n  else\n    return value - 1\n  end\nend"], ["# <func> # Ruby\n# Given a positive integer n, you have to make a pile of n levels of stones.\n# The first level has n stones.\n# The number of stones in the next level is:\n# - the next odd number if n is odd.\n# - the next even number if n is even.\n# Return the number of stones in each level in an array, where element at index\n# i represents the number of stones in the level (i+1).\n# Examples:\n# >>> make_a_pile.call(3)\n# [3, 5, 7]\ndef make_a_pile(n)\nn = n.to_i\npile = []\nlevels = []\nwhile n > 0\nlevels.push(n)\npile.push(n)\npile.push(n + 1)\npile.push(n + 2)\npile.push(n + 3)\npile.push(n + 4)\npile.push(n + 5)\npile.push(n + 6)\npile.push(n + 7)\npile.push(n + 8)\npile.push(n + 9)\npile.push(n + 10)\npile.push(n + 11)\npile.push(n + 12)\npile.push(n + 13)\npile.push(n + 14)\npile.push(n + 15)\npile.push(n + 16)\npile.push(n + 17)\npile.push(n + 18)\npile.push(n + 19)\npile.push(n + 20)\npile.push(n + 21)\npile.push(n + 22)\npile.push(n + 23)\npile.push(n + 24)\npile.push(n + 25)\npile.push(n + 26)\npile.push(n + 27)\npile.push(n + "], ["# <func> # Ruby\n# You will be given a string of words separated by commas or spaces. Your task is\n# to split the string into words and return an array of the words.\n# For example:\n# >>> words_string.call(\"Hi, my name is John\")\n# [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n# >>> words_string.call(\"One, two, three, four, five, six\")\n# [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\ndef words_string(s)\n  s.split(',').map(&:capitalize).map(&:join)\nend"], ["# <func> # Ruby\n# This function takes two positive numbers x and y and returns the\n# biggest even integer number that is in the range [x, y] inclusive. If \n# there's no such number, then the function should return -1.\n# For example:\n# >>> choose_num.call(12, 15)\n# 14\n# >>> choose_num.call(13, 12)\n# -1\ndef choose_num(x, y)\n  return x if x < y\n  return y if y < x\n  return x + 1 if x == y\n  return y + 1 if y == x\n  return x + 1 if x == y\n  return y + 1 if y == x\n  return x + 1 if x == y\n  return y + 1 if y == x\n  return x + 1 if x == y\n  return y + 1 if y == x\n  return x + 1 if x == y\n  return y + 1 if y == x\n  return x + 1 if x == y\n  return y + 1 if y == x\n  return x + 1 if x == y\n  return y + 1 if y == x\n  return x + 1 if x == y\n  return y + 1 if y == x\n  return x + 1 if x == y\n  return y + 1 if y == x\n  return x + 1 if x == y\n  return y + 1 if y == x\n  return x + 1 if x == y\n  return y + 1 if y == x\n  return x + 1 if x == y\n  return y + 1 if y == x\n  return x + 1 if x == y\n  return y + 1 if y == x\n  return x + 1 if x == y\n  return y + 1 if y == x\n  return x + 1 if x == y\n  return y + 1 if y == x\n  return x + 1 if x == y\n  return y + 1 if y == x\n  return x + 1 if x == y\n  return y + 1 if y == x\n  return x + 1"], ["# <func> # Ruby\n# You are given two positive integers n and m, and your task is to compute the\n# average of the integers from n through m (including n and m). \n# Round the answer to the nearest integer and convert that to binary.\n# If n is greater than m, return -1.\n# Example:\n# >>> rounded_avg.call(1, 5)\n# \"0b11\"\n# >>> rounded_avg.call(7, 5)\n# -1\n# >>> rounded_avg.call(10, 20)\n# \"0b1111\"\n# >>> rounded_avg.call(20, 33)\n# \"0b11010\"\ndef rounded_avg(n, m)\n  if n > m\n    -1\n  else\n    n.to_i + m.to_i\n  end\nend"], ["# <func> # Ruby\n# Given an array of positive integers x. return a sorted array of all \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted in increasing order.\n# For example:\n# >>> unique_digits.call([15, 33, 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits.call([152, 323, 1422, 10])\n# []\ndef unique_digits(x)\n  x.sort!\n  x.uniq!\nend"], ["# <func> # Ruby\n# Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n# reverse the resulting array, and then replace each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> by_length.call([2, 1, 1, 4, 5, 8, 2, 3])\n# [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is empty, return an empty array:\n# >>> by_length.call([])\n# []\n# If the array has any strange number ignore it:\n# >>> by_length.call([1, -1, 55])\n# [\"One\"]\ndef by_length(arr)\n  arr.sort.reverse.map { |i| i.to_s.upcase }\nend"], ["# <func> # Ruby\n# Implement the function f that takes n as a parameter,\n# and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n# i starts from 1.\n# the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n# Example:\n# >>> f.call(5)\n# [1, 2, 6, 24, 15]\ndef f(n)\n  if n % 2 == 0\n    return [n]\n  else\n    return [n * f(n - 1)]\n  end\nend"], ["# <func> # Ruby\n# Given a positive integer n, return an array that has the number of even and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n# Example 1:\n# >>> even_odd_palindrome.call(3)\n# [1, 2]\n# Explanation:\n# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# >>> even_odd_palindrome.call(12)\n# [4, 6]\n# Explanation:\n# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n# 1. 1 <= n <= 10^3\n# 2. returned array has the number of even and odd integer palindromes respectively.\ndef even_odd_palindrome(n)\n  # Return the number of even and odd integer palindromes within the range(1, n), inclusive.\n  # Example 1:\n  # >>> even_odd_palindrome(3)\n  # [1, 2]\n  # Explanation:\n  # Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n  # Example 2:\n  # >>> even_odd_palindrome(12)\n  # [4, 6]\n  # Explanation:\n  # Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n  # Note:\n  # 1. 1 <= n <= 10^3\n  # 2. returned array has the number of even and odd integer palindromes respectively.\n  # Example 3:\n  # >>> even_odd_palindrome(1000000)\n  # [1000"], ["# <func> # Ruby\n# Write a function count_nums which takes an array of integers and returns\n# the number of elements which has a sum of digits > 0.\n# If a number is negative, then its first signed digit will be negative:\n# e.g. -123 has signed digits -1, 2, and 3.\n# >>> count_nums.call([])\n# 0\n# >>> count_nums.call([-1, 11, -11])\n# 1\n# >>> count_nums.call([1, 1, 2])\n# 3\ndef count_nums(arr)\n  arr.inject(0) { |sum, num| sum + num.sum(1) }\nend"], ["# <func> # Ruby\n# We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n# numbers in the array will be randomly ordered. Your task is to determine if\n# it is possible to get an array sorted in non-decreasing order by performing \n# the following operation on the given array:\n# You are allowed to perform right shift operation any number of times.\n# One right shift operation means shifting all elements of the array by one\n# position in the right direction. The last element of the array will be moved to\n# the starting position in the array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing the above operation\n# then return true else return false.\n# If the given array is empty then return true.\n# Note: The given array is guaranteed to have unique elements.\n# For Example:\n# >>> move_one_ball.call([3, 4, 5, 1, 2])\n# true\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n# be achieved for the given array.\n# >>> move_one_ball.call([3, 5, 4, 1, 2])\n# false\n# Explanation:It is not possible to get non-decreasing order for the given\n# array by performing any number of right shift operations.\ndef move_one_ball(arr)\n  arr.sort!\n  arr.reverse!\n  arr.each_with_index do |ball, index|\n    if index == arr.length - 1\n      arr[index] = ball\n    else\n      arr[index] = arr[index - 1] + 1\n    end\n  end\n  arr\nend"], ["# <func> # Ruby\n# In this problem, you will implement a function that takes two arrays of numbers,\n# and determines whether it is possible to perform an exchange of elements\n# between them to make lst1 an array of only even numbers.\n# There is no limit on the number of exchanged elements between lst1 and lst2.\n# If it is possible to exchange elements between the lst1 and lst2 to make\n# all the elements of lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n# >>> exchange.call([1, 2, 3, 4], [1, 2, 3, 4])\n# \"YES\"\n# >>> exchange.call([1, 2, 3, 4], [1, 5, 3, 4])\n# \"NO\"\n# It is assumed that the input arrays will be non-empty.\ndef exchange(lst1, lst2)"], ["# <func> # Ruby\n# Given a string representing a space separated lowercase letters, return a hash\n# of the letter with the most repetition and containing the corresponding count.\n# If several letters have the same occurrence, return all of them.\n# Example:\n# >>> histogram.call(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n# >>> histogram.call(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram.call(\"a b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram.call(\"b b b b a\")\n# {\"b\" => 4}\n# >>> histogram.call(\"\")\n# {}\ndef histogram(test)\n  return {} unless test\n  test = test.to_s\n  test = test.downcase\n  test = test.split(\" \")\n  test.each_with_object({}) do |letter, hash|\n    hash[letter] = hash.values.max\n  end\nend"], ["# <func> # Ruby\n# Task\n# We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n# then check if the result string is palindrome.\n# A string is called palindrome if it reads the same backward as forward.\n# You should return an array containing the result string and true/false for the check.\n# Example\n# >>> reverse_delete.call(\"abcde\", \"ae\")\n# [\"bcd\", false]\n# >>> reverse_delete.call(\"abcdef\", \"b\")\n# [\"acdef\", false]\n# >>> reverse_delete.call(\"abcdedcba\", \"ab\")\n# [\"cdedc\", true]\ndef reverse_delete(s, c)\n  return s.delete(c)\nend"], ["# <func> # Ruby\n# Given an array of strings, where each string consists of only digits, return an array.\n# Each element i of the output should be \"the number of odd elements in the\n# string i of the input.\" where all the i's should be replaced by the number\n# of odd digits in the i'th string of the input.\n# >>> odd_count.call([\"1234567\"])\n# [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n# >>> odd_count.call([\"3\", \"11111111\"])\n# [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\ndef odd_count(lst)\n  lst.each_with_object([]) do |str, count|\n    str.each_with_object([]) do |i, count|\n      if i.size % 2 == 0\n        count.push(i.size)\n      else\n        count.push(i.size + 1)\n      end\n    end\n  end\nend"], ["# <func> # Ruby\n# Given an array of integers nums, find the minimum sum of any non-empty sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2, 4])\n# 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n  nums.each_with_object(Hash.new(0)) do |num, h|\n    h[num] += num\n  end\nend"], ["# <func> # Ruby\n# You are given a rectangular grid of wells. Each row represents a single well,\n# and each 1 in a row represents a single unit of water.\n# Each well has a corresponding bucket that can be used to extract water from it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets to empty the wells.\n# Output the number of times you need to lower the buckets.\n# Example 1:\n# >>> max_fill.call([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n# 6\n# Example 2:\n# >>> max_fill.call([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n# 5\n# Example 3:\n# >>> max_fill.call([[0, 0, 0], [0, 0, 0]], 5)\n# 0\n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\ndef max_fill(grid, capacity)\n  # Create a list of buckets\n  buckets = []\n  # Create a list of wells\n  wells = []\n  # Create a list of unit of water\n  units = []\n  # Create a list of rows\n  rows = []\n  # Create a list of buckets\n  buckets = []\n  # Create a list of wells\n  wells = []\n  # Create a list of units of water\n  units = []\n  # Create a list of rows\n  rows = []\n  # Create a list of buckets\n  buckets = []\n  # Create a list of wells\n  wells = []\n  # Create a list of units of"], ["# <func> # Ruby\n# In this Kata, you have to sort an array of non-negative integers according to\n# number of ones in their binary representation in ascending order.\n# For similar number of ones, sort based on decimal value.\n# It must be implemented like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1, 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\narr.sort.call\nend"], ["# <func> # Ruby\n# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns an array of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty array.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# >>> select_words.call(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words.call(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words.call(\"simple white space\", 2)\n# []\n# >>> select_words.call(\"Hello world\", 4)\n# [\"world\"]\n# >>> select_words.call(\"Uncle sam\", 3)\n# [\"Uncle\"]\ndef select_words(s, n)\n  # Create an empty array\n  words = []\n  # Loop through the string s\n  # and for each character\n  # in the string, check if it is a consonant\n  # and if so, add it to the array\n  # and increment the counter\n  # for each consonant\n  # in the string\n  # and if the counter is 4,\n  # return the array\n  # and the counter\n  # else, increment the counter\n  # and return the array\n  # and the counter\n  # for each consonant\n  # in the string\n  # and if the counter is 4\n  # return the array\n  # and the counter\n  # else, increment the counter\n  # and return the array\n  # and the counter\n  # for each consonant\n  # in the string\n  # and if the counter is 4\n  # return the array\n  # and the counter\n  # else, increment the counter\n  # and return the array\n  # and the counter\n  # for each consonant\n  # in the string\n  # and if the counter is 4\n  # return the array\n  # and the counter\n  # else, increment the counter\n  # and return the array\n"], ["# <func> # Ruby\n# You are given a word. Your task is to find the closest vowel that stands between \n# two consonants from the right side of the word (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n# find any vowel met the above condition. \n# You may assume that the given string contains English letter only.\n# Example:\n# >>> get_closest_vowel.call(\"yogurt\")\n# \"u\"\n# >>> get_closest_vowel.call(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel.call(\"quick\")\n# \"\"\n# >>> get_closest_vowel.call(\"ab\")\n# \"\"\ndef get_closest_vowel(word)\n  vowels = word.split(\"\").map(&:downcase).map(&:to_i)\n  vowels.each_with_index do |vowel, index|\n    if vowel == \"a\" || vowel == \"e\" || vowel == \"i\" || vowel == \"o\" || vowel == \"u\"\n      return vowel\n    end\n  end\n  return \"\"\nend"], ["# <func> # Ruby\n# You are given an array of two strings, both strings consist of open\n# parentheses '(' or close parentheses ')' only.\n# Your job is to check if it is possible to concatenate the two strings in\n# some order, that the resulting string will be good.\n# A string S is considered to be good if and only if all parentheses in S\n# are balanced. For example: the string '(())()' is good, while the string\n# '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n# Examples:\n# >>> match_parens.call([\"()(\", \")\"])\n# \"Yes\"\n# >>> match_parens.call([\")\", \")\"])\n# \"No\"\ndef match_parens(lst)\n  # Check if the given array is empty\n  if lst.empty?\n    return \"No\"\n  end"], ["# <func> # Ruby\n# Given an array arr of integers and a positive integer k, return a sorted array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>> maximum.call([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum.call([4, -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum.call([-3, 2, 1, 2, -1, -2, 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\ndef maximum(arr, k)\n  if k == 0\n    arr.sort\n    arr.reverse\n    arr.sort\n  else\n    arr.sort { |a, b| a <=> b }\n    arr.reverse\n    arr.sort { |a, b| b <=> a }\n  end\nend"], ["# <func> # Ruby\n# Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n# Examples\n# >>> solution.call([5, 8, 7, 1])\n# 12\n# >>> solution.call([3, 3, 3, 3, 3])\n# 9\n# >>> solution.call([30, 13, 24, 321])\n# 0\ndef solution(lst)\n  if lst.size == 0\n    return 0\n  elsif lst.size % 2 == 0\n    return sum(lst.map(&:odd?))\n  else\n    return sum(lst.map(&:odd?)) + sum(lst.map(&:even?))\n  end\nend"], ["# <func> # Ruby\n# Given a non-empty array of integers arr and an integer k, return\n# the sum of the elements with at most two digits from the first k elements of arr.\n# Example:\n# >>> add_elements.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n# 24\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\ndef add_elements(arr, k)\n  if arr.length < k\n    raise ArgumentError.new(\"arr.length < k\")\n  end"], ["# <func> # Ruby\n# Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n# The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n# as follows: start with any positive integer n. Then each term is obtained from the \n# previous term as follows: if the previous term is even, the next term is one half of \n# the previous term. If the previous term is odd, the next term is 3 times the previous\n# term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n# Note: \n# 1. Collatz(1) is [1].\n# 2. returned array sorted in increasing order.\n# For example:\n# get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n# >>> get_odd_collatz.call(5)\n# [1, 5]\ndef get_odd_collatz(n)\n  collatz_sequence = Collatz.new(n)\n  collatz_sequence.each_with_index do |collatz_number, i|\n    collatz_number = collatz_number.to_i if collatz_number.is_a? Integer\n    collatz_number = collatz_number.to_i if collatz_number.is_a? Fixnum\n    collatz_number = collatz_number.to_i if collatz_number.is_a? Float\n    collatz_number = collatz_number.to_i if collatz_number.is_a? String\n    collatz_number = collatz_number.to_i if collatz_number.is_a? Array\n    collatz_number = collatz_number.to_i if collatz_number.is_a? Fixnum\n    collatz_number = collatz_number.to_i if collatz_number.is_a? Float\n    collatz_number = collatz_number.to_i if collatz_number.is_a? String\n"], ["# <func> # Ruby\n# You have to write a function which validates a given date string and\n# returns true if the date is valid otherwise false.\n# The date is valid if all of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n# 3. The months should not be less than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n# >>> valid_date.call(\"03-11-2000\")\n# true\n# >>> valid_date.call(\"15-01-2012\")\n# false\n# >>> valid_date.call(\"04-0-2040\")\n# false\n# >>> valid_date.call(\"06-04-2020\")\n# true\n# >>> valid_date.call(\"06/04/2020\")\n# false\ndef valid_date(date)\n  date.to_i.to_s.length.to_i.to_s.length.to_i.to_s.length.to_i.to_s.length.to_i.to_s.length.to_i.to_s.length.to_i.to_s.length.to_i.to_s.length.to_i.to_s.length.to_i.to_s.length.to_i.to_s.length.to_i.to_s.length.to_i.to_s.length.to_i.to_s.length.to_i.to_s.length.to_i.to_s.length.to_i.to_s.length.to_i.to_s.length.to_i.to_s.length."], ["# <func> # Ruby\n# Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n# should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> split_words.call(\"Hello world!\")\n# [\"Hello\", \"world!\"]\n# >>> split_words.call(\"Hello,world!\")\n# [\"Hello\", \"world!\"]\n# >>> split_words.call(\"abcdef\")\n# 3\ndef split_words(txt)\n  txt.split(' ').map { |word| word.to_i }.reduce(:+)\nend"], ["# <func> # Ruby\n# Given an array of numbers, return whether or not they are sorted\n# in ascending order. If array has more than 1 duplicate of the same\n# number, return false. Assume no negative numbers and only integers.\n# Examples\n# >>> is_sorted.call([5])\n# true\n# >>> is_sorted.call([1, 2, 3, 4, 5])\n# true\n# >>> is_sorted.call([1, 3, 2, 4, 5])\n# false\n# >>> is_sorted.call([1, 2, 3, 4, 5, 6])\n# true\n# >>> is_sorted.call([1, 2, 3, 4, 5, 6, 7])\n# true\n# >>> is_sorted.call([1, 3, 2, 4, 5, 6, 7])\n# false\n# >>> is_sorted.call([1, 2, 2, 3, 3, 4])\n# true\n# >>> is_sorted.call([1, 2, 2, 2, 3, 4])\n# false\ndef is_sorted(lst)\n  return false unless lst.size > 1\n  return false unless lst.sort.size > 1\n  return false unless lst.sort.sort.size > 1\n  return false unless lst.sort.sort.sort.size > 1\n  return false unless lst.sort.sort.sort.size > 1\n  return false unless lst.sort.sort.sort.size > 1\n  return false unless lst.sort.sort.sort.sort.size > 1\n  return false unless lst.sort.sort.sort.sort.size > 1\n  return false unless lst.sort.sort.sort.sort.size > 1\n  return false unless lst.sort.sort.sort.sort.size > 1\n  return false unless lst.sort.sort.sort.sort.size > 1\n  return false unless lst.sort.sort.sort.sort.size > 1\n  return false unless lst.sort.sort.sort.sort.size > 1\n  return false unless"], ["# <func> # Ruby\n# You are given two intervals,\n# where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n# The given intervals are closed which means that the interval (start, end)\n# includes both start and end.\n# For each given interval, it is assumed that its start is less or equal its end.\n# Your task is to determine whether the length of intersection of these two \n# intervals is a prime number.\n# Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If the length of the intersection is a prime number, return \"YES\",\n# otherwise, return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output] samples:\n# >>> intersection.call([1, 2], [2, 3])\n# \"NO\"\n# >>> intersection.call([-1, 1], [0, 4])\n# \"NO\"\n# >>> intersection.call([-3, -1], [-5, 5])\n# \"YES\"\ndef intersection(interval1, interval2)"], ["# <func> # Ruby\n# You are given an array arr of integers and you need to return\n# sum of magnitudes of integers multiplied by product of all signs\n# of each number in the array, represented by 1, -1 or 0.\n# Note: return nil for empty arr.\n# Example:\n# >>> prod_signs.call([1, 2, 2, -4])\n# 9\n# >>> prod_signs.call([0, 1])\n# 0\n# >>> prod_signs.call([])\n# nil\ndef prod_signs(arr)\n  arr.map { |x| x.to_i.to_s.split('-').map { |y| y.to_i }.reduce(:+) }.flatten\nend"], ["# <func> # Ruby\n# Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n# each cell of the grid contains a value. Every integer in the range [1, N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have to find the minimum path of length k in the grid. You can start\n# from any cell, and in each step you can move to any of the neighbor cells,\n# in other words, you can go to cells which share an edge with you current\n# cell.\n# Please note that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n# You CANNOT go off the grid.\n# A path A (of length k) is considered less than a path B (of length k) if\n# after making the ordered arrays of the values on the cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically less\n# than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j] = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered array of the values on the cells that the minimum path go through.\n# Examples:    \n# >>> minPath.call([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n# [1, 2, 1]\n# >>> minPath.call([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n# [1]\ndef minPath(grid, k)\n  # Initialize the array of the values on the cells that the minimum path go through.\n  lst_A = []\n  lst_B = []\n  # Loop through the grid.\n  for row in grid\n    for col in row\n      # If the cell is not empty, add the value to the array.\n      if col.empty"], ["# <func> # Ruby\n# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n# the last couple centuries. However, what people don't know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are given a non-negative integer number n, you have to a return an array of the \n# first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> tri.call(3)\n# [1, 3, 2, 8]\ndef tri(n)\n  if n == 0 or n == 1\n    [0, 1]\n  else\n    [n, n + 1, n + 2]\n  end\nend"], ["# <func> # Ruby\n# Given a positive integer n, return the product of the odd digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> digits.call(1)\n# 1\n# >>> digits.call(4)\n# 0\n# >>> digits.call(235)\n# 15\ndef digits(n)\n  n.to_s.split('').map { |x| x.to_i }.reduce(:+)\nend"], ["# <func> # Ruby\n# Create a function that takes a string as input which contains only square brackets.\n# The function should return true if and only if there is a valid subsequence of brackets \n# where at least one bracket in the subsequence is nested.\n# >>> is_nested.call(\"[[]]\")\n# true\n# >>> is_nested.call(\"[]]]]]]][[[[[]\")\n# false\n# >>> is_nested.call(\"[][]\")\n# false\n# >>> is_nested.call(\"[]\")\n# false\n# >>> is_nested.call(\"[[][]]\")\n# true\n# >>> is_nested.call(\"[[]][[\")\n# true\ndef is_nested(string)\n  string.split(\"[[]]\").any? { |subsequence| subsequence.split(\"]\").any? { |bracket| bracket.split(\"]\").any? { |nested_bracket| nested_bracket.split(\"]\").any? { |nested_bracket_nested_bracket| nested_bracket_nested_bracket.split(\"]\").any? { |nested_bracket_nested_bracket_nested_bracket| nested_bracket_nested_bracket_nested_bracket.split(\"]\").any? { |nested_bracket_nested_bracket_nested_bracket_nested_bracket| nested_bracket_nested_bracket_nested_bracket_nested_bracket.split(\"]\").any? { |nested_bracket_nested_bracket_nested_bracket_nested_bracket_nested_bracket| nested_bracket_nested_bracket_nested_bracket_nested_bracket_nested_bracket.split(\"]\").any? { |nested_bracket_nested_bracket_nested_bracket_nested_bracket_nested_bracket_nested_bracket| nested_bracket_nested_bracket_nested_bracket_nested_bracket_nested_bracket_nested_bracket.split(\"]\").any? { |nested_bracket_nested_bracket_nested_bracket_nested_bracket_nested_bracket_nested_bracket_nested_bracket| nested_bracket_nested_bracket_"], ["# <func> # Ruby\n# You are given an array of numbers.\n# You need to return the sum of squared numbers in the given array,\n# round each element in the array to the upper int(Ceiling) first.\n# Examples:\n# >>> lst.call([1.0, 2.0, 3.0])\n# 14\n# >>> lst.call([1.0, 4.0, 9.0])\n# 98\n# >>> lst.call([1.0, 3.0, 5.0, 7.0])\n# 84\n# >>> lst.call([1.4, 4.2, 0.0])\n# 29\n# >>> lst.call([-2.4, 1.0, 1.0])\n# 6\ndef sum_squares(lst)\n  lst.map { |x| x.squared }.reduce(:+)\nend"], ["# <func> # Ruby\n# Create a function that returns true if the last character\n# of a given string is an alphabetical character and is not\n# a part of a word, and false otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n# >>> check_if_last_char_is_a_letter.call(\"apple pie\")\n# false\n# >>> check_if_last_char_is_a_letter.call(\"apple pi e\")\n# true\n# >>> check_if_last_char_is_a_letter.call(\"apple pi e \")\n# false\n# >>> check_if_last_char_is_a_letter.call(\"\")\n# false\ndef check_if_last_char_is_a_letter(txt)\n  txt.split(' ').each do |word|\n    if word.include?(' ')\n      return false\n    else\n      return true\n    end\n  end\n  return false\nend"], ["# <func> # Ruby\n# Create a function which returns the largest index of an element which\n# is not greater than or equal to the element immediately preceding it. If\n# no such element exists then return -1. The given array will not contain\n# duplicate values.\n# Examples:\n# >>> can_arrange.call([1, 2, 4, 3, 5])\n# 3\n# >>> can_arrange.call([1, 2, 3])\n# -1\ndef can_arrange(arr)\n  arr.sort!\n  arr.max_by(&:abs)\nend"], ["# <func> # Ruby\n# Create a function that returns an array (a, b), where 'a' is\n# the largest of negative integers, and 'b' is the smallest\n# of positive integers in an array.\n# If there is no negative or positive integers, return them as nil.\n# Examples:\n# >>> largest_smallest_integers.call([2, 4, 1, 3, 5, 7])\n# [nil, 1]\n# >>> largest_smallest_integers.call([])\n# [nil, nil]\n# >>> largest_smallest_integers.call([0])\n# [nil, nil]\ndef largest_smallest_integers(lst)\n  return nil if lst.empty?\n  return nil if lst.size == 0\n  return nil if lst.size == 1\n  return nil if lst.size == 2\n  return nil if lst.size == 3\n  return nil if lst.size == 4\n  return nil if lst.size == 5\n  return nil if lst.size == 6\n  return nil if lst.size == 7\n  return nil if lst.size == 8\n  return nil if lst.size == 9\n  return nil if lst.size == 10\n  return nil if lst.size == 11\n  return nil if lst.size == 12\n  return nil if lst.size == 13\n  return nil if lst.size == 14\n  return nil if lst.size == 15\n  return nil if lst.size == 16\n  return nil if lst.size == 17\n  return nil if lst.size == 18\n  return nil if lst.size == 19\n  return nil if lst.size == 20\n  return nil if lst.size == 21\n  return nil if lst.size == 22\n  return nil if lst.size == 23\n  return nil if lst.size == 24\n  return nil if lst.size == 25\n  return nil if lst.size == 26\n  return nil if lst.size == 27\n  return nil if lst.size == 28\n"], ["# <func> # Ruby\n# Create a function that takes integers, floats, or strings representing\n# real numbers, and returns the larger variable in its given variable type.\n# Return nil if the values are equal.\n# Note: If a real number is represented as a string, the floating point might be . or ,\n# >>> compare_one.call(1, 2.5)\n# 2.5\n# >>> compare_one.call(1, \"2,3\")\n# \"2,3\"\n# >>> compare_one.call(\"5,1\", \"6\")\n# \"6\"\n# >>> compare_one.call(\"1\", 1)\n# nil\ndef compare_one(a, b)\n  if a.is_a?(Float) && b.is_a?(Float)\n    a.abs.to_f <=> b.abs.to_f\n  else\n    a.to_s <=> b.to_s\n  end\nend"], ["# <func> # Ruby\n# Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n# Example\n# >>> is_equal_to_sum_even.call(4)\n# false\n# >>> is_equal_to_sum_even.call(6)\n# false\n# >>> is_equal_to_sum_even.call(8)\n# true\ndef is_equal_to_sum_even(n)\n  n.to_s.include?('+') ? n.to_s.split('+').map(&:to_i).reduce(&:+) : 0\nend"], ["# <func> # Ruby\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial.call(4)\n# 288\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\ndef special_factorial(n)\n  n = n.to_i\n  n = n.to_s\n  n = n.to_f\n  n = n.to_i\n  n = n.to_s\n  n = n.to_f\n  n = n.to_i\n  n = n.to_s\n  n = n.to_i\n  n = n.to_s\n  n = n.to_i\n  n = n.to_s\n  n = n.to_i\n  n = n.to_s\n  n = n.to_i\n  n = n.to_s\n  n = n.to_i\n  n = n.to_s\n  n = n.to_i\n  n = n.to_s\n  n = n.to_i\n  n = n.to_s\n  n = n.to_i\n  n = n.to_s\n  n = n.to_i\n  n = n.to_s\n  n = n.to_i\n  n = n.to_s\n  n = n.to_i\n  n = n.to_s\n  n = n.to_i\n  n = n.to_s\n  n = n.to_i\n  n = n.to_s\n  n = n.to_i\n  n = n.to_s\n  n = n.to_i\n  n = n.to_s\n  n = n.to_i\n  n = n.to_s\n  n = n.to_i\n  n = n.to_s\n  n = n.to_i\n  n = n.to_s\n  n ="], ["# <func> # Ruby\n# Given a string text, replace all spaces in it with underscores, \n# and if a string has more than 2 consecutive spaces, \n# then replace all consecutive spaces with - \n# >>> fix_spaces.call(\" Example\")\n# \"Example\"\n# >>> fix_spaces.call(\" Example 1\")\n# \"Example_1\"\n# >>> fix_spaces.call(\" Example 2\")\n# \"_Example_2\"\n# >>> fix_spaces.call(\" Example 3\")\n# \"_Example-3\"\ndef fix_spaces(text)\n  text.gsub(/[ \\t]+/,\"-\")\nend"], ["# <func> # Ruby\n# Create a function which takes a string representing a file's name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n# A file's name is considered to be valid if and only if all the following conditions \n# are met:\n# - There should not be more than three digits ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring before the dot should not be empty, and it starts with a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> file_name_check.call(\"example.txt\")\n# \"Yes\"\n# >>> file_name_check.call(\"1example.dll\")\n# \"No\"\ndef file_name_check(file_name)\n  return true if file_name =~ /^[a-zA-Z0-9\\.\\-]+$/\n  return false if file_name =~ /^[a-zA-Z0-9\\.\\-]+$/\n  return false if file_name =~ /^[a-zA-Z0-9\\.\\-]+$/\n  return false if file_name =~ /^[a-zA-Z0-9\\.\\-]+$/\n  return false if file_name =~ /^[a-zA-Z0-9\\.\\-]+$/\n  return false if file_name =~ /^[a-zA-Z0-9\\.\\-]+$/\n  return false if file_name =~ /^[a-zA-Z0-9\\.\\-]+$/\n  return false if file_name =~ /^[a-zA-Z0-9\\.\\-]+$/\n  return false if file_name =~ /^[a-zA-Z0-9\\.\\-]+$/\n  return false if file_name =~ /^[a-zA-Z0-9\\.\\-]+$/\n  return false if file_name =~ /^[a-zA-Z0"], ["# <func> # Ruby\n# \"\n# This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n# multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n# change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n# Examples:\n# >>> lst\n# [1, 2, 3]\n# >>> lst\n# []\n# >>> lst\n# [-1, -5, 2, -1, -5]\ndef sum_squares(lst)\n  lst.each_with_index do |i, j|\n    if i % 3 == 0 && j % 3 == 0\n      i *= 3\n      j *= 3\n    else\n      i *= 2\n      j *= 2\n    end\n    i += j\n  end\n  sum = 0\n  lst.each_with_index do |i, j|\n    sum += i * j\n  end\n  sum\nend"], ["# <func> # Ruby\n# You are given a string representing a sentence,\n# the sentence contains some words separated by a space,\n# and you have to return a string that contains the words from the original sentence,\n# whose lengths are prime numbers,\n# the order of the words in the new string should be the same as the original one.\n# Example 1:\n# >>> words_in_sentence.call(\"This is a test\")\n# \"is\"\n# Example 2:\n# >>> words_in_sentence.call(\"lets go for swimming\")\n# \"go for\"\n# Constraints:\n# * 1 <= len(sentence) <= 100\n# * sentence contains only letters\ndef words_in_sentence(sentence)"], ["# <func> # Ruby\n# Your task is to implement a function that will simplify the expression\n# x * n. The function returns true if x * n evaluates to a whole number and false\n# otherwise. Both x and n, are string representation of a fraction, and have the following format,\n# <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n# You can assume that x, and n are valid fractions, and do not have zero as denominator.\n# >>> simplify.call(\"1/5\", \"5/1\")\n# true\n# >>> simplify.call(\"1/6\", \"2/1\")\n# false\n# >>> simplify.call(\"7/10\", \"10/2\")\n# false\ndef simplify(x, n)\n  if x.is_a?(String) && n.is_a?(String)\n    if x.to_f.is_a?(Float) && n.to_f.is_a?(Float)\n      return x.to_f.to_f == n.to_f.to_f\n    else\n      return x.to_f == n.to_f\n    end\n  else\n    return x == n\n  end\nend"], ["# <func> # Ruby\n# Write a function which sorts the given array of integers\n# in ascending order according to the sum of their digits.\n# Note: if there are several items with similar sum of their digits,\n# order them based on their index in original array.\n# For example:\n# >>> order_by_points.call([1, 11, -1, -11, -12])\n# [-1, -11, 1, -12, 11]\n# >>> order_by_points.call([])\n# []\ndef order_by_points(nums)\n  nums.sort { |a, b| a.sum + b.sum }\nend"], ["# <func> # Ruby\n# Write a function that takes an array of numbers as input and returns \n# the number of elements in the array that are greater than 10 and both \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# >>> specialFilter.call([15, -73, 14, -15])\n# 1\n# >>> specialFilter.call([33, -2, -3, 45, 21, 109])\n# 2\ndef specialFilter(nums)\n  nums.each_with_index do |num, i|\n    if num.to_i > 10 && num.to_i.odd? && num.to_i.to_s[0, 1] == '1' && num.to_i.to_s[0, 1] == '3'\n      nums[i] = nums[i].to_i + 1\n    end\n  end\n  nums\nend"], ["# <func> # Ruby\n# You are given a positive integer n. You have to create an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# >>> get_max_triples.call(5)\n# 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\ndef get_max_triples(n)\n  a = [1, 3, 7, 13, 21]\n  return a.length if n == 1\n  return 0 if n == 1\n  return 1 if n == 2\n  return 2 if n == 3\n  return 3 if n == 4\n  return 4 if n == 5\n  return 5 if n == 6\n  return 6 if n == 7\n  return 7 if n == 8\n  return 8 if n == 9\n  return 9 if n == 10\n  return 10 if n == 11\n  return 11 if n == 12\n  return 12 if n == 13\n  return 13 if n == 14\n  return 14 if n == 15\n  return 15 if n == 16\n  return 16 if n == 17\n  return 17 if n == 18\n  return 18 if n == 19\n  return 19 if n == 20\n  return 20 if n == 21\n  return 21 if n == 22\n  return 22 if n == 23\n  return 23 if n == 24\n  return 24 if n == 25\n  return 25"], ["# <func> # Ruby\n# There are eight planets in our solar system: the closerst to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names as strings planet1 and planet2. \n# The function should return an array containing all planets whose orbits are \n# located between the orbit of planet1 and the orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should return an empty array if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>> bf.call(\"Jupiter\", \"Neptune\")\n# [\"Saturn\", \"Uranus\"]\n# >>> bf.call(\"Earth\", \"Mercury\")\n# \"Venus\"\n# >>> bf.call(\"Mercury\", \"Uranus\")\n# [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\ndef bf(planet1, planet2)\n  # Create an empty array\n  # The array should contain all planets whose orbits are located between\n  # the orbit of planet1 and the orbit of planet2, sorted by the proximity to\n  # the sun.\n  # The function should return an empty array if planet1 or planet2\n  # are not correct planet names.\n  # Examples\n  # >>> bf.call(\"Jupiter\", \"Neptune\")\n  # [\"Saturn\", \"Uranus\"]\n  # >>> bf.call(\"Earth\", \"Mercury\")\n  # \"Venus\"\n  # >>> bf.call(\"Mercury\", \"Uranus\")\n  # [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\n  #\n  # The function should return an empty array if planet1 or planet2\n  # are not correct planet names.\n  # Examples\n  # >>> bf.call(\"Jupiter\", \"Neptune\")\n  # [\"Saturn\", \"Uranus\"]\n  # >>> bf.call"], ["# <func> # Ruby\n# Write a function that accepts an array of strings as a parameter,\n# deletes the strings that have odd lengths from it,\n# and returns the resulted array with a sorted order,\n# The array is always an array of strings and never an array of numbers,\n# and it may contain duplicates.\n# The order of the array should be ascending by length of each word, and you\n# should return the array sorted by that rule.\n# If two words have the same length, sort the array alphabetically.\n# The function should return an array of strings in sorted order.\n# You may assume that all words will have the same length.\n# For example:\n# >>> list_sort.call([\"aa\", \"a\", \"aaa\"])\n# [\"aa\"]\n# >>> list_sort.call([\"ab\", \"a\", \"aaa\", \"cd\"])\n# [\"ab\", \"cd\"]\ndef sorted_list_sum(lst)"], ["# <func> # Ruby\n# A simple program which should return the value of x if n is \n# a prime number and should return the value of y otherwise.\n# Examples:\n# >>> x_or_y.call(7, 34, 12)\n# 34\n# >>> x_or_y.call(15, 8, 5)\n# 5\ndef x_or_y(n, x, y)\n  if n == 1\n    x\n  elsif n == 2\n    y\n  elsif n == 3\n    x\n  elsif n == 4\n    y\n  elsif n == 5\n    x\n  elsif n == 6\n    y\n  elsif n == 7\n    x\n  elsif n == 8\n    y\n  elsif n == 9\n    x\n  elsif n == 10\n    y\n  elsif n == 11\n    x\n  elsif n == 12\n    y\n  elsif n == 13\n    x\n  elsif n == 14\n    y\n  elsif n == 15\n    x\n  elsif n == 16\n    y\n  elsif n == 17\n    x\n  elsif n == 18\n    y\n  elsif n == 19\n    x\n  elsif n == 20\n    y\n  elsif n == 21\n    x\n  elsif n == 22\n    y\n  elsif n == 23\n    x\n  elsif n == 24\n    y\n  elsif n == 25\n    x\n  elsif n == 26\n    y\n  elsif n == 27\n    x\n  elsif n == 28\n    y\n  elsif n == 29\n    x\n  elsif n == 30\n    y\n  elsif n == 31\n    x\n  elsif n == 32\n    y\n  elsif n == 33\n    x\n  elsif n == 34\n    y\n  elsif n == 3"], ["# <func> # Ruby\n# Given an array of numbers, return the sum of squares of the numbers\n# in the array that are odd. Ignore numbers that are negative or not integers.\n# >>> double_the_difference.call([1, 3, 2, 0])\n# 10\n# >>> double_the_difference.call([-1, -2, 0])\n# 0\n# >>> double_the_difference.call([9, -2])\n# 81\n# >>> double_the_difference.call([0])\n# 0\n# If the input array is empty, return 0.\ndef double_the_difference(lst)\n  if lst.empty?\n    return 0\n  elsif lst.size == 1\n    return lst[0] * 2\n  elsif lst.size == 2\n    return lst[0] * lst[1]\n  elsif lst.size == 3\n    return lst[0] * lst[1] * lst[2]\n  elsif lst.size == 4\n    return lst[0] * lst[1] * lst[2] * lst[3]\n  elsif lst.size == 5\n    return lst[0] * lst[1] * lst[2] * lst[3] * lst[4]\n  elsif lst.size == 6\n    return lst[0] * lst[1] * lst[2] * lst[3] * lst[4] * lst[5]\n  elsif lst.size == 7\n    return lst[0] * lst[1] * lst[2] * lst[3] * lst[4] * lst[5] * lst[6]\n  elsif lst.size == 8\n    return lst[0] * lst[1] * lst[2] * lst[3] * lst[4] * lst[5] * lst[6] * lst[7]\n  elsif lst.size == 9\n    return lst[0] * lst[1] * lst[2] * lst[3] * lst[4] * lst[5] * lst[6] * lst[7] * lst[8]\n  elsif lst"], ["# <func> # Ruby\n# I think we all remember that feeling when the result of some long-awaited\n# event is finally known. The feelings and thoughts you have at that moment are\n# definitely worth noting down and comparing.\n# Your task is to determine if a person correctly guessed the results of a number of matches.\n# You are given two arrays of scores and guesses of equal length, where each index shows a match. \n# Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n# the value is 0, and if not, the value is the absolute difference between the guess and the score.\n# example:\n# >>> compare.call([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n# [0, 0, 0, 0, 3, 3]\n# >>> compare.call([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n# [4, 4, 1, 0, 0, 6]\ndef compare(game, guess)\n  guesses = game.map { |score| score.to_i }\n  guesses.each_with_index do |score, index|\n    guesses[index] = score - guess\n  end\n  guesses.each do |score, difference|\n    if score == guess\n      difference\n    else\n      difference - score\n    end\n  end\nend"], ["# <func> # Ruby\n# You will be given the name of a class (a string) and an array of extensions.\n# The extensions are to be used to load additional classes to the class. The\n# strength of the extension is as follows: Let CAP be the number of the uppercase\n# letters in the extension's name, and let SM be the number of lowercase letters \n# in the extension's name, the strength is given by the fraction CAP - SM. \n# You should find the strongest extension and return a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more extensions with the same strength, you should\n# choose the one that comes first in the array.\n# For example, if you are given \"Slices\" as the class and an array of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension.call(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\ndef Strongest_Extension(class_name, extensions)\n  if extensions.length == 0\n    return class_name\n  elsif extensions.length == 1\n    return extensions.first\n  elsif extensions.length == 2\n    return extensions.first.capitalize\n  else\n    raise ArgumentError, \"You must provide at least one extension\"\n  end\nend"], ["# <func> # Ruby\n# You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n# >>> cycpattern_check.call(\"abcd\", \"abd\")\n# false\n# >>> cycpattern_check.call(\"hello\", \"ell\")\n# true\n# >>> cycpattern_check.call(\"whassup\", \"psus\")\n# false\n# >>> cycpattern_check.call(\"abab\", \"baa\")\n# true\n# >>> cycpattern_check.call(\"efef\", \"eeff\")\n# false\n# >>> cycpattern_check.call(\"himenss\", \"simen\")\n# true\ndef cycpattern_check(a, b)\n  return a.include? b\nend"], ["# <func> # Ruby\n# Given an integer. return an array that has the number of even and odd digits respectively.\n# Example:\n# >>> even_odd_count.call(-12)\n# [1, 1]\n# >>> even_odd_count.call(123)\n# [1, 2]\ndef even_odd_count(num)\n  even_odd_count = []\n  num.to_s.split('').each_with_index do |e, i|\n    even_odd_count << i if e % 2 == 0\n  end\n  even_odd_count\nend"], ["# <func> # Ruby\n# Given a positive integer, obtain its roman numeral equivalent as a string,\n# and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n# >>> int_to_mini_roman.call(19)\n# \"xix\"\n# >>> int_to_mini_roman.call(152)\n# \"clii\"\n# >>> int_to_mini_roman.call(426)\n# \"cdxxvi\"\ndef int_to_mini_roman(number)\n  number = number.to_i\n  if number < 1000\n    return number.to_s.downcase\n  else\n    return number.to_s.upcase\n  end\nend"], ["# <func> # Ruby\n# Given the lengths of the three sides of a triangle. Return true if the three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# >>> right_angle_triangle.call(3, 4, 5)\n# true\n# >>> right_angle_triangle.call(1, 2, 3)\n# false\ndef right_angle_triangle(a, b, c)\n  return a == b && b == c && c == a\nend"], ["# <func> # Ruby\n# Write a function that accepts an array of strings.\n# The array contains different words. Return the word with maximum number\n# of unique characters. If multiple strings have maximum number of unique\n# characters, return the one which comes first in lexicographical order.\n# >>> find_max.call([\"name\", \"of\", \"string\"])\n# \"string\"\n# >>> find_max.call([\"name\", \"enam\", \"game\"])\n# \"enam\"\n# >>> find_max.call([\"aaaaaaa\", \"bb\", \"cc\"])\n# \"aaaaaaa\"\ndef find_max(words)\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each do |word|\nwords.sort.each"], ["# <func> # Ruby\n# You're a hungry rabbit, and you already have eaten a certain number of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n# you should return an array of [ total number of eaten carrots after your meals,\n# the number of carrots left after your meals ]\n# if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n# >>> eat.call(5, 6, 10)\n# [11, 4]\n# >>> eat.call(4, 8, 9)\n# [12, 1]\n# >>> eat.call(1, 10, 10)\n# [11, 0]\n# >>> eat.call(2, 11, 5)\n# [7, 0]\n# Variables:\n# @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n# the number of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\ndef eat(number, need, remaining)\nnumber = number.to_i\nneed = need.to_i\nremaining = remaining.to_i\nif number <= 0\nreturn [number, need, remaining]\nif number > need\nreturn [number, need, remaining]\nif number > remaining\nreturn [number, number, remaining]\nreturn [number, number, number]"], ["# <func> # Ruby\n# Given two arrays operator, and operand. The first array has basic algebra operations, and \n# the second array is an array of integers. Use the two given arrays to build the algebric \n# expression and return the evaluation of this expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator array is equal to the length of operand array minus one.\n# Operand is an array of of non-negative integers.\n# Operator array has at least one operator, and operand array has at least two operands.\ndef do_algebra(operator, operand)\n  operator.each do |operator_name, operator_value|\n    operand.each do |operand_name, operand_value|\n      if operator_name == '+' && operand_value.size == 2\n        result = operator_value.first + operand_value.second\n      elsif operator_name == '-' && operand_value.size == 2\n        result = operator_value.first - operand_value.second\n      elsif operator_name == '*' && operand_value.size == 2\n        result = operator_value.first * operand_value.second\n      elsif operator_name == '/' && operand_value.size == 2\n        result = operator_value.first / operand_value.second\n      elsif operator_name == '**' && operand_value.size == 2\n        result = operator_value.first ** operand_value.second\n      elsif operator_name == '^' && operand_value.size == 2\n        result = operator_value.first ^ operand_value.second\n      elsif operator_name == '+' && operand_value.size == 2\n        result ="], ["# <func> # Ruby\n# You are given a string s.\n# if s[i] is a letter, reverse its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string contains no letters, reverse the string.\n# The function should return the resulted string.\n# Examples\n# >>> solve.call(\"1234\")\n# \"4321\"\n# >>> solve.call(\"ab\")\n# \"AB\"\n# >>> solve.call(\"#a@C\")\n# \"#A@c\"\ndef solve(s)\n  s.chars.each_with_index do |c, i|\n    if c.is_a?(String)\n      s[i] = c.upcase\n    else\n      s[i] = c\n    end\n  end\n  s\nend"], ["# <func> # Ruby\n# Given a string 'text', return its md5 hash equivalent string.\n# If 'text' is an empty string, return nil.\n# >>> string_to_md5.call(\"Hello world\")\n# \"3e25960a79dbc69b674cd4ec67a72c62\"\ndef string_to_md5(text)\n  text.chomp!\n  md5 = Digest::MD5.new\n  md5.update(text.encode('utf-8', 'ignore').chomp)\n  md5.hexdigest\nend"], ["# <func> # Ruby\n# Given two positive integers a and b, return the even digits between a\n# and b, in ascending order.\n# For example:\n# >>> generate_integers.call(2, 8)\n# [2, 4, 6, 8]\n# >>> generate_integers.call(8, 2)\n# [2, 4, 6, 8]\n# >>> generate_integers.call(10, 14)\n# []\ndef generate_integers(a, b)\n  a = a.to_i\n  b = b.to_i\n  return [a, b] if a < b\n  return [b, a] if b < a\n  return [a, b] if a == b\n  return [b, a] if b == a\n  return [a, b] if a == b\n  return [b, a] if a == b\n  return [a, b] if a == b\n  return [b, a] if b == a\n  return [a, b] if a == b\n  return [b, a] if b == a\n  return [a, b] if a == b\n  return [b, a] if b == a\n  return [a, b] if a == b\n  return [b, a] if b == a\n  return [a, b] if a == b\n  return [b, a] if b == a\n  return [a, b] if a == b\n  return [b, a] if b == a\n  return [a, b] if a == b\n  return [b, a] if b == a\n  return [a, b] if a == b\n  return [b, a] if b == a\n  return [a, b] if a == b\n  return [b, a] if b == a\n  return [a, b] if a == b\n  return [b, a] if b == a\n  return [a, b] if a == b\n  return [b, a] if b == a\n  return [a, b] if a == b\n  return [b, a] if b == a\n  return [a, b"]]