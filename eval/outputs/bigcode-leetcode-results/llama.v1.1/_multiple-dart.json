[["//Check if in given list of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nbool has_close_elements(List<double> numbers, double threshold) {\n  for (auto& number : numbers) {\n    if (number < threshold) {\n      return false;\n    }\n  }\n  return true;"], ["//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the list of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nList<String> separate_paren_groups(String paren_string) {\n    List<String> result = new ArrayList<>();\n    String[] split_paren_string = paren_string.split(\"\\\\s+\");\n    for (String s : split_paren_string) {\n        if (s.isEmpty()) {\n            result.add(s);\n        } else {\n            result.add(s.substring(1, s.length()));\n        }\n    }\n    return result;"], ["//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\ndouble truncate_number(double number) {\n  double result = number;\n  if (number < 0) {\n    result = -result;\n  }\n  return result;"], ["//You're given a list of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nbool below_zero(List<int> operations) {\n  if (operations.size() == 0) {\n    return false;\n  }\n  int balance = 0;\n  for (int operation : operations) {\n    balance += operation;\n  }\n  return balance < 0;"], ["//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\ndouble mean_absolute_deviation(List<double> numbers) {\n  double sum = 0;\n  for (double number : numbers) {\n    sum += number;\n  }\n  return sum / numbers.size();"], ["//Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nList<int> intersperse(List<int> numbers, int delimeter) {\n    List<int> result = new List<int>();\n    for (int i = 0; i < numbers.Count; i++) {\n        result.Add(numbers[i] + delimeter);\n    }\n    return result;"], ["//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nList<int> parse_nested_parens(String paren_string) {\n    List<int> result = new ArrayList<>();\n    int current_level = 0;\n    int current_depth = 0;\n    int current_parent = 0;\n    int current_parent_depth = 0;\n    int current_parent_level = 0;\n    int current_level = 0;\n    int current_depth = 0;\n    int current_parent_depth = 0;\n    int current_parent_level = 0;\n    int current_parent_depth = 0;\n    int current_parent_level = 0;\n    int current_parent_depth = 0;\n    int current_parent_level = 0;\n    int current_parent_depth = 0;\n    int current_parent_level = 0;\n    int current_parent_depth = 0;\n    int current_parent_level = 0;\n    int current_parent_depth = 0;\n    int current_parent_level = 0;\n    int current_parent_depth = 0;\n    int current_parent_level = 0;\n    int current_parent_depth = 0;\n    int current_parent_level = 0;\n    int current_parent_depth = 0;\n    int current_parent_level = 0;\n    int current_parent_depth = 0;\n    int current_parent_level = 0;\n    int current_parent_depth = 0;\n    int current_parent_level = 0;\n    int current_parent_depth = 0;\n    int current_parent_level = 0;\n    int current_parent_depth = 0;\n    int current_parent_level = 0;\n   "], ["//Filter an input list of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nList<String> filter_by_substring(List<String> strings, String substring) {\n    return strings.stream()\n            .filter(s -> s.startsWith(substring))\n            .collect(Collectors.toList());"], ["//For a given list of integers, return a record consisting of a sum and a product of all the integers in a list.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n(int, int) sum_product(List<int> numbers) {\n  if (numbers.isEmpty()) {\n    return (0, 1);\n  }\n  return (0, 0);"], ["//From a given list of integers, generate a list of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nList<int> rolling_max(List<int> numbers) {\n    List<int> result = new List<int>();\n    for (int i = 0; i < numbers.Count; i++) {\n        if (numbers[i] > result.Count) {\n            result.Add(numbers[i]);\n        }\n    }\n    return result;"], ["//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nString make_palindrome(String string) {\n    int length = string.length();\n    int index = length - 1;\n    String prefix = \"\";\n    String suffix = \"\";\n    String result = \"\";\n    while (index >= 0) {\n        if (string.charAt(index) == string.charAt(index - 1)) {\n            index--;\n        } else {\n            break;\n        }\n        if (index == 0) {\n            prefix = string.substring(0, index);\n            suffix = string.substring(index);\n        } else {\n            result = prefix + suffix;\n            prefix = \"\";\n            suffix = \"\";\n        }\n    }\n    return result;"], ["//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nString string_xor(String a, String b) {\n    String result = \"\";\n    for (int i = 0; i < a.length(); i++) {\n        result += a.charAt(i) ^ b.charAt(i);\n    }\n    return result;"], ["//Out of list of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return null in case the input list is empty.\n// >>> longest([])\n// null\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nString? longest(List<String> strings) {\n  if (strings.isEmpty()) {\n    return null;\n  }\n  var result = strings[0];\n  for (var i = 1; i < strings.count; i++) {\n    if (result.length > strings[i].length) {\n      result = strings[i];\n    }\n  }\n  return result;"], ["//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nint greatest_common_divisor(int a, int b) {\n  if (a == b) {\n    return a;\n  }\n  int c = greatest_common_divisor(a, b);\n  if (c == a) {\n    return b;\n  }\n  return greatest_common_divisor(a, c);"], ["//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nList<String> all_prefixes(String string) {\n    List<String> prefixes = new ArrayList<>();\n    for (int i = 0; i < string.length(); i++) {\n        String current = string.substring(i, i + 1);\n        if (current.equals(\"\")) {\n            continue;\n        }\n        prefixes.add(current);\n    }\n    return prefixes;"], ["//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nString string_sequence(int n) {\n    return string_sequence(n, n);"], ["//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nint count_distinct_characters(String string) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.charAt(i) != ' ') {\n            count++;\n        }\n    }\n    return count;"], ["//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return list of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nList<int> parse_music(String music_string) {\n    List<int> music_list = new List<int>();\n    String[] music_array = music_string.split(\" \");\n    for (String music_string_element : music_array) {\n        if (music_string_element.equals(\"o o| .| o| o| .| .| .| .| o o\")) {\n            music_list.add(Integer.parseInt(music_string_element));\n        }\n    }\n    return music_list;"], ["//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nint how_many_times(String string, String substring) {\n    int count = 0;\n    for (int i = 0; i < string.length(); i++) {\n        if (string.charAt(i) == substring.charAt(i)) {\n            count++;\n        }\n    }\n    return count;"], ["//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nString sort_numbers(String numbers) {\n    String sorted = \"\";\n    for (int i = 0; i < numbers.length(); i++) {\n        sorted += numbers.charAt(i) + \" \";\n    }\n    return sorted;"], ["//From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// (2.0, 2.0)\n(double, double) find_closest_elements(List<double> numbers) {\n  // Find the smallest number in the list.\n  double smallest = 0;\n  for (List<double> number : numbers) {\n    if (number < smallest) {\n      smallest = number;\n    }\n  }\n  // Find the largest number in the list.\n  double largest = 0;\n  for (List<double> number : numbers) {\n    if (number > largest) {\n      largest = number;\n    }\n  }\n  // Return the smallest and largest numbers.\n  return (smallest, largest);"], ["//Given list of numbers (of at least two elements), apply a linear transform to that list,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nList<double> rescale_to_unit(List<double> numbers) {\n    List<double> rescaled = new ArrayList<double>();\n    for (int i = 0; i < numbers.size(); i++) {\n        rescaled.add(numbers.get(i) * 100.0 / 100.0);\n    }\n    return rescaled;"], ["//Filter given list of any dartthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nList<int> filter_integers(List values) {\n    return values.filter(x => x % 1 == 0);"], ["//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nint strlen(String string) {\n    int len = 0;\n    for (int i = 0; i < string.length(); i++) {\n        len += string.charAt(i);\n    }\n    return len;"], ["//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nint largest_divisor(int n) {\n  if (n < 2) {\n    return 1;\n  }\n  if (n % 2 == 0) {\n    return n;\n  }\n  if (n % 2 == 1) {\n    return n / 2;\n  }\n  return n / 2 + largest_divisor(n / 2);"], ["//Return list of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nList<int> factorize(int n) {\n    int[] factors = new int[n];\n    for (int i = 1; i <= n; i++) {\n        factors[i] = i;\n    }\n    int[] result = new int[n];\n    for (int i = 1; i <= n; i++) {\n        result[i] = factors[i];\n    }\n    int[] result2 = new int[n];\n    for (int i = 1; i <= n; i++) {\n        result2[i] = result[i];\n    }\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= i; j++) {\n            if (result[i] == result2[j]) {\n                result2[j] = 0;\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= i; j++) {\n            if (result2[j] == 0) {\n                result2[j] = result[i];\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= i; j++) {\n            if (result[i] == result2[j]) {\n                result2[j] = 0;\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= i; j++) {\n            if (result2[j] == 0) {\n                result2[j] ="], ["//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nList<int> remove_duplicates(List<int> numbers) {\n    List<int> result = new List<int>();\n    for (int i = 0; i < numbers.Count; i++) {\n        if (numbers[i] != numbers[i + 1]) {\n            result.Add(numbers[i]);\n        }\n    }\n    return result;"], ["//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nString flip_case(String string) {\n    string = string.toLowerCase();\n    return string;"], ["//Concatenate list of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nString concatenate(List<String> strings) {\n    return strings.stream().map(String::concat).collect(Collectors.joining());"], ["//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nList<String> filter_by_prefix(List<String> strings, String prefix) {\n    return strings.stream()\n            .filter(s -> s.startsWith(prefix))\n            .collect(Collectors.toList());"], ["//Return only positive numbers in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nList<int> get_positive(List<int> l) {\n    List<int> result = new List<int>();\n    for (int i = 0; i < l.Count; i++) {\n        if (l[i] > 0) {\n            result.Add(l[i]);\n        }\n    }\n    return result;"], ["//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nbool is_prime(int n) {\n  if (n <= 2)\n    return false;\n  if (n == 2)\n    return true;\n  if (n == 3)\n    return true;\n  if (n == 5)\n    return true;\n  if (n == 7)\n    return true;\n  if (n == 11)\n    return true;\n  if (n == 13)\n    return true;\n  if (n == 17)\n    return true;\n  if (n == 19)\n    return true;\n  if (n == 23)\n    return true;\n  if (n == 29)\n    return true;\n  if (n == 31)\n    return true;\n  if (n == 37)\n    return true;\n  if (n == 41)\n    return true;\n  if (n == 43)\n    return true;\n  if (n == 47)\n    return true;\n  if (n == 49)\n    return true;\n  if (n == 53)\n    return true;\n  if (n == 59)\n    return true;\n  if (n == 61)\n    return true;\n  if (n == 67)\n    return true;\n  if (n == 71)\n    return true;\n  if (n == 73)\n    return true;\n  if (n == 79)\n    return true;\n  if (n == 81)\n    return true;\n  if (n == 87)\n    return true;\n  if (n == 93)"], ["//This function takes a list l and returns a list l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nList<int> sort_third(List<int> l) {\n    List<int> result = new List<int>();\n    for (int i = 0; i < l.Count; i++) {\n        if (l[i] % 3 == 0) {\n            result.Add(l[i]);\n        }\n    }\n    return result;"], ["//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nList<int> unique(List<int> l) {\n    return l.Distinct().ToList();"], ["//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nint max_element(List<int> l) {\n    return l.max_element();"], ["//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nint fizz_buzz(int n) {\n    int i;\n    for (i = 0; i < n; i++) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 0;"], ["//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nList<int> sort_even(List<int> l) {\n    return l.sort((x, y) => {\n        if (x < y) return -1;\n        if (x > y) return 1;\n        return 0;\n    });"], ["//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nint prime_fib(int n) {\n    if (n <= 1) return 0;\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 13;\n    if (n == 5) return 89;\n    int res = 1;\n    for (int i = 6; i <= n; i++) {\n        if (n % i == 0) {\n            res = res * i;\n        }\n    }\n    return res;"], ["//triples_sum_to_zero takes a list of integers as an input.\n// it returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nbool triples_sum_to_zero(List<int> l) {\n  return l.size() == 3 &&\n         l[0] == l[1] &&\n         l[2] == l[3];"], ["//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nint car_race_collision(int n) {\n    int i, j;\n    int collision_count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            if (i == j) continue;\n            if (i < j) {\n                collision_count++;\n            }\n        }\n    }\n    return collision_count;"], ["//Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nList<int> incr_list(List<int> l) {\n    List<int> result = new List<int>();\n    for (int i = 0; i < l.Count; i++)\n        result.Add(l[i] + 1);\n    return result;"], ["//pairs_sum_to_zero takes a list of integers as an input.\n// it returns true if there are two distinct elements in the list that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nbool pairs_sum_to_zero(List<int> l) {\n  if (l.size() == 0)\n    return true;\n  if (l.size() == 1)\n    return false;\n  int sum = 0;\n  for (int i = 0; i < l.size(); i++) {\n    sum += l[i];\n  }\n  return sum == 0;"], ["//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nString change_base(int x, int base) {\n  return String.format(\"%d\", x * base);"], ["//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\ndouble triangle_area(int a, int h) {\n  return a * h;"], ["//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nint fib4(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 0;\n    if (n == 4)\n        return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);"], ["//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\ndouble median(List<int> l) {\n    double median = 0;\n    for (int i = 0; i < l.size(); i++) {\n        median = median + l.get(i);\n    }\n    return median;"], ["//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nbool is_palindrome(String text) {\n    if (text.length() == 0) {\n        return false;\n    }\n    int i = 0;\n    for (int j = 0; j < text.length(); j++) {\n        if (text[j] == text[j + 1]) {\n            return false;\n        }\n        if (text[j] == text[j + 1]) {\n            return false;\n        }\n        if (text[j] != text[j + 1]) {\n            return false;\n        }\n        i++;\n    }\n    return true;"], ["//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nint modp(int n, int p) {\n    if (n == 0) {\n        return 0;\n    }\n    if (p == 0) {\n        return 1;\n    }\n    if (n == p) {\n        return 0;\n    }\n    if (n < p) {\n        return modp(n, p);\n    }\n    if (n > p) {\n        return modp(n, p);\n    }\n    int result = 0;\n    for (int i = 1; i <= n; i++) {\n        if (i == p) {\n            result = result + modp(i, p);\n        } else {\n            result = result + modp(i, n);\n        }\n    }\n    return result;"], ["//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nString remove_vowels(String text) {\n    String result = text.replaceAll(\"\\\\p{InCombiningDiacriticalMarks}\", \"\");\n    return result;"], ["//Return true if all numbers in the list l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nbool below_threshold(List<int> l, int t) {\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] < t) {\n      return false;\n    }\n  }\n  return true;"], ["//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nint add(int x, int y) {\n    return x + y;"], ["//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nbool same_chars(String s0, String s1) {\n    return s0 == s1;"], ["//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nint fib(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);"], ["//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nbool correct_bracketing(String brackets) {\n  if (brackets.size() == 0) {\n    return true;\n  }\n  for (int i = 0; i < brackets.size(); ++i) {\n    if (brackets[i] == '(') {\n      return true;\n    }\n    if (brackets[i] == ')') {\n      return true;\n    }\n  }\n  return false;"], ["//Return true is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nbool monotonic(List<int> l) {\n    return l.size() == 0 || l.size() == 1;"], ["//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nList<int> common(List<int> l1, List<int> l2) {\n    return l1.Select(x => l2.Select(y => x == y)).ToList();"], ["//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nint largest_prime_factor(int n) {\n  if (n < 2)\n    return 1;\n  if (n == 1)\n    return 1;\n  if (n == 2)\n    return 2;\n  if (n == 3)\n    return 3;\n  if (n == 4)\n    return 4;\n  if (n == 5)\n    return 5;\n  if (n == 6)\n    return 6;\n  if (n == 7)\n    return 7;\n  if (n == 8)\n    return 8;\n  if (n == 9)\n    return 9;\n  if (n == 10)\n    return 10;\n  if (n == 11)\n    return 11;\n  if (n == 12)\n    return 12;\n  if (n == 13)\n    return 13;\n  if (n == 14)\n    return 14;\n  if (n == 15)\n    return 15;\n  if (n == 16)\n    return 16;\n  if (n == 17)\n    return 17;\n  if (n == 18)\n    return 18;\n  if (n == 19)\n    return 19;\n  if (n == 20)\n    return 20;\n  if (n == 21)\n    return 21;\n  if (n == 22)\n    return 22;\n  if (n == 23)\n    return 23;\n  if (n == 24)\n    return 24;\n  if (n == 25)\n    return 25;\n  if (n == 26)\n    return 26;\n "], ["//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nint sum_to_n(int n) {\n    return n + sum_to_n(n - 1);"], ["//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nbool correct_bracketing(String brackets) {\n  if (brackets.length() == 0) {\n    return false;\n  }\n  for (int i = 0; i < brackets.length(); ++i) {\n    if (brackets[i] == '(') {\n      return true;\n    }\n    if (brackets[i] == ')') {\n      return false;\n    }\n  }\n  return false;"], ["//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nList<int> derivative(List<int> xs) {\n    return xs.map(x => x * x).toList();"], ["//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nint fibfib(int n) {\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    if (n == 2)\n        return 2;\n    if (n == 3)\n        return 3;\n    if (n == 4)\n        return 4;\n    if (n == 5)\n        return 5;\n    if (n == 6)\n        return 6;\n    if (n == 7)\n        return 7;\n    if (n == 8)\n        return 8;\n    if (n == 9)\n        return 9;\n    if (n == 10)\n        return 10;\n    if (n == 11)\n        return 11;\n    if (n == 12)\n        return 12;\n    if (n == 13)\n        return 13;\n    if (n == 14)\n        return 14;\n    if (n == 15)\n        return 15;\n    if (n == 16)\n        return 16;\n    if (n == 17)\n        return 17;\n    if (n == 18)\n        return 18;\n    if (n == 19)\n        return 19;\n    if (n == 20)\n        return 20;\n    if (n =="], ["//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nint vowels_count(String s) {\n  int count = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n      count++;\n    }\n  }\n  return count;"], ["//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nString circular_shift(int x, int shift) {\n  if (x < 0) {\n    return \"0\" + circular_shift(x, shift - 1);\n  }\n  return \"0\" + circular_shift(x, shift);"], ["//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nint digitSum(String s) {\n    int sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s.charAt(i) >= '0' && s.charAt(i) <= '9') {\n            sum += s.charAt(i);\n        }\n    }\n    return sum;"], ["//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nint fruit_distribution(String s, int n) {\n    int total = 0;\n    int fruit_count = 0;\n    int fruit_count_mango = 0;\n    int fruit_count_orange = 0;\n    int fruit_count_apple = 0;\n    int fruit_count_banana = 0;\n    int fruit_count_mango_banana = 0;\n    int fruit_count_orange_banana = 0;\n    int fruit_count_apple_banana = 0;\n    int fruit_count_mango_banana_mango = 0;\n    int fruit_count_orange_banana_mango = 0;\n    int fruit_count_apple_banana_mango = 0;\n    int fruit_count_mango_banana_mango = 0;\n    int fruit_count_orange_banana_mango_mango = 0;\n    int fruit_count_apple_banana_mango_mango = 0;\n    int fruit_count_mango_banana_mango_mango = 0;\n    int fruit_count_orange_banana_mango_mango_mango = 0;\n    int fruit_count_apple_banana"], ["//\"Given a list representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in a list, [ smalest_value, its index ],\n// If there are no even values or the given list is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nList<int> pluck(List<int> arr) {\n    int smallest_value = 0;\n    int index = 0;\n    for (int node : arr) {\n        if (node.value < smallest_value) {\n            smallest_value = node.value;\n            index = node.index;\n        }\n    }\n    return arr.subList(index, arr.size());"], ["//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nint search(List<int> lst) {\n    int max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return max;"], ["//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nList<int> strange_sort_list(List<int> lst) {\n    List<int> sorted = new List<int>();\n    for (int i = 0; i < lst.Count; i++) {\n        if (lst[i] > lst[i + 1]) {\n            sorted.Add(lst[i]);\n            sorted.Add(lst[i + 1]);\n        }\n    }\n    return sorted;"], ["//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\ndouble triangle_area(int a, int b, int c) {\n  if (a == b && b == c) {\n    return a;\n  }\n  double area = 0;\n  if (a < b) {\n    area = b * a;\n  } else if (b < c) {\n    area = c * b;\n  } else {\n    area = a * c;\n  }\n  return area;"], ["//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(List<int> q, int w) {\n    if (q.size() == 0) return false;\n    if (q.size() == 1) return true;\n    if (q.size() == 2) return q[0] <= w;\n    if (q.size() == 3) return q[0] <= w && q[1] <= w;\n    if (q.size() == 4) return q[0] <= w && q[1] <= w && q[2] <= w;\n    if (q.size() == 5) return q[0] <= w && q[1] <= w && q[2] <= w && q[3] <= w;\n    if (q.size() == 6) return q[0] <= w && q[1] <= w && q[2] <= w && q[3] <= w && q[4] <= w;\n    if (q.size() == 7) return q[0] <= w && q[1] <= w && q[2] <= w && q[3] <= w && q[4] <= w && q[5] <= w;\n   "], ["//Given a list arr of integers, find the minimum number of elements that\n// need to be changed to make the list palindromic. A palindromic list is a list that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nint smallest_change(List<int> arr) {\n    int smallest_change = arr.size();\n    for (int i = arr.size() - 1; i >= 0; i--) {\n        if (arr[i] != arr[i + 1]) {\n            smallest_change--;\n        }\n    }\n    return smallest_change;"], ["//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nList<String> total_match(List<String> lst1, List<String> lst2) {\n    if (lst1.size() == lst2.size()) {\n        return lst1;\n    } else {\n        return lst2;\n    }"], ["//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(int a) {\n    if (a < 100) {\n        return false;\n    }\n    if (a % 2 == 0) {\n        return false;\n    }\n    if (a % 3 == 0) {\n        return false;\n    }\n    if (a % 5 == 0) {\n        return false;\n    }\n    if (a % 7 == 0) {\n        return false;\n    }\n    if (a % 11 == 0) {\n        return false;\n    }\n    if (a % 13 == 0) {\n        return false;\n    }\n    if (a % 17 == 0) {\n        return false;\n    }\n    if (a % 19 == 0) {\n        return false;\n    }\n    if (a % 21 == 0) {\n        return false;\n    }\n    if (a % 23 == 0) {\n        return false;\n    }\n    if (a % 27 == 0) {\n        return false;\n    }\n    if (a % 31 == 0) {\n        return false;\n    }\n    if (a % 33 == 0) {\n        return false;\n    }\n    if (a % 37 == 0) {\n        return false;\n    }\n    if (a % 39 == 0) {\n        return false;\n    }\n    if (a % 41 == 0) {\n        return false;\n    }\n    if (a % 43 == 0) {\n        return false;\n    }\n    if (a % 47 == 0) {\n        return false;\n    }\n    if (a % 51 =="], ["//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nbool is_simple_power(int x, int n) {\n  if (n == 1)\n    return true;\n  if (n == 2)\n    return true;\n  if (n == 3)\n    return true;\n  if (n == 4)\n    return true;\n  if (n == 5)\n    return true;\n  if (n == 6)\n    return true;\n  if (n == 7)\n    return true;\n  if (n == 8)\n    return true;\n  if (n == 9)\n    return true;\n  if (n == 10)\n    return true;\n  if (n == 11)\n    return true;\n  if (n == 12)\n    return true;\n  if (n == 13)\n    return true;\n  if (n == 14)\n    return true;\n  if (n == 15)\n    return true;\n  if (n == 16)\n    return true;\n  if (n == 17)\n    return true;\n  if (n == 18)\n    return true;\n  if (n == 19)\n    return true;\n  if (n == 20)\n    return true;\n  if (n == 21)\n    return true;\n  if (n == 22)\n    return true;\n  if (n == 23)\n    return true;\n  if (n == 24"], ["//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nbool iscube(int a) {\n  if (a < 0) {\n    return false;\n  }\n  if (a % 2 == 0) {\n    return false;\n  }\n  if (a % 4 == 0) {\n    return false;\n  }\n  if (a % 8 == 0) {\n    return false;\n  }\n  if (a % 16 == 0) {\n    return false;\n  }\n  if (a % 32 == 0) {\n    return false;\n  }\n  if (a % 64 == 0) {\n    return false;\n  }\n  if (a % 128 == 0) {\n    return false;\n  }\n  if (a % 256 == 0) {\n    return false;\n  }\n  if (a % 512 == 0) {\n    return false;\n  }\n  if (a % 1024 == 0) {\n    return false;\n  }\n  if (a % 2048 == 0) {\n    return false;\n  }\n  if (a % 4096 == 0) {\n    return false;\n  }\n  if (a % 8192 == 0) {\n    return false;\n  }\n  if (a % 16384 == 0) {\n    return false;\n  }\n  if (a % 32768 == 0) {\n    return false;\n  }\n  if (a % 65536 == 0) {\n"], ["//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nint hex_key(String num) {\n    int count = 0;\n    for (int i = 0; i < num.length(); i++) {\n        if (num.charAt(i) == 'A' || num.charAt(i) == 'B' || num.charAt(i) == 'C' || num.charAt(i) == 'D' || num.charAt(i) == 'E' || num.charAt(i) == 'F') {\n            count++;\n        }\n    }\n    return count;"], ["//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nString decimal_to_binary(int decimal) {\n    String result = \"\";\n    for (int i = 0; i < decimal; i++) {\n        result += \"db\";\n    }\n    return result;"], ["//You are given a string s.\n// Your task is to check if the string is hapdart or not.\n// A string is hapdart if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nbool is_happy(String s) {\n    if (s.length() < 3) {\n        return false;\n    }\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i] == 'b' || s[i] == 'c') {\n            return false;\n        }\n    }\n    return true;"], ["//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nList<String> numerical_letter_grade(List<double> grades) {\n    List<String> letter_grades = new ArrayList<>();\n    for (double grade : grades) {\n        if (grade >= 4.0) {\n            letter_grades.add(\"A+\");\n        } else if (grade >= 3.7) {\n            letter_grades.add(\"A\");\n        } else if (grade >= 3.3) {\n            letter_grades.add(\"A-\");\n        } else if (grade >= 3.0) {\n            letter_grades.add(\"B+\");\n        } else if (grade >= 2.7) {\n            letter_grades.add(\"B\");\n        } else if (grade >= 2.3) {\n            letter_grades.add(\"B-\");\n        } else if (grade >= 2.0) {\n            letter_grades.add(\"C+\");\n        } else if (grade >="], ["//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nbool prime_length(String string) {\n    if (string.length() % 2 == 0) {\n        return false;\n    }\n    if (string.length() == 1) {\n        return true;\n    }\n    int prime_length = 1;\n    for (int i = 1; i < string.length(); i++) {\n        if (string[i] != ' ') {\n            prime_length++;\n        }\n    }\n    return prime_length == string.length();"], ["//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nint starts_one_ends(int n) {\n    int i = 1;\n    int j = 1;\n    int k = 1;\n    int l = 1;\n    int m = 1;\n    int n_start = 0;\n    int n_end = 0;\n    int n_start_end = 0;\n    int n_start_end_1 = 0;\n    int n_start_end_2 = 0;\n    int n_start_end_3 = 0;\n    int n_start_end_4 = 0;\n    int n_start_end_5 = 0;\n    int n_start_end_6 = 0;\n    int n_start_end_7 = 0;\n    int n_start_end_8 = 0;\n    int n_start_end_9 = 0;\n    int n_start_end_10 = 0;\n    int n_start_end_11 = 0;\n    int n_start_end_12 = 0;\n    int n_start_end_13 = 0;\n    int n_start_end_14 = 0;\n    int n_start_end_15 = 0;\n    int n_start_end_16 = 0;\n    int n_start_end_17 = 0;\n    int n_start_end_18 = 0;\n    int n_start_end_19 = 0;\n    int n_start_end_20 = 0;\n    int n_start_end_21 = 0;\n    int n_start_end_22 = 0;\n    int n_start_end_23 = 0;\n    int n_start_end_24 = 0;\n    int n_start_end_25 = 0;\n    int n_start_end_26 = 0;\n    int n_start_end_27 = 0;\n"], ["//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nString solve(int N) {\n    if (N <= 0) {\n        return \"0\";\n    }\n    if (N <= 1000) {\n        return \"1\";\n    }\n    if (N <= 10000) {\n        return \"110\";\n    }\n    if (N <= 100000) {\n        return \"1100\";\n    }\n    return \"1000000\";"], ["//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nint add(List<int> lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;"], ["//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nString anti_shuffle(String s) {\n    String new_s = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (c == ' ') {\n            new_s = new_s + c;\n        }\n    }\n    return new_s;"], ["//You are given a 2 dimensional data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the list,\n// and return list of records, [(x1, y1), (x2, y2) ...] such that\n// each record is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [(2, 2)]\nList<(int, int)> get_row(List<List<int>> lst, int x) {\n    List<(int, int)> result = new List<(int, int)>();\n    for (int i = 0; i < lst.size(); i++) {\n        if (i == x) {\n            result.add((i, i));\n        }\n        else {\n            for (int j = i + 1; j < lst.size(); j++) {\n                if (lst[i].size() == lst[j].size()) {\n                    result.add((i, j));\n                }\n            }\n        }\n    }\n    return result;"], ["//Given a list of non-negative integers, return a codart of the given list after sorting,\n// you will sort the given list in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given list.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nList<int> sort_array(List<int> array) {\n    List<int> result = new List<int>();\n    for (int i = 0; i < array.Count; i++) {\n        if (array[i] % 2 == 0) {\n            result.Add(array[i]);\n        }\n    }\n    return result;"], ["//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nString encrypt(String s) {\n    StringBuilder result = new StringBuilder();\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (c >= 'a' && c <= 'z') {\n            result.append(c);\n        } else {\n            result.append(c - 'a');\n        }\n    }\n    return result.toString();"], ["//You are given a list of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the list.\n// Return null if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// null\n// >>> next_smallest([1, 1])\n// null\nint? next_smallest(List<int> lst) {\n    if (lst.size() == 0)\n        return null;\n    int? smallest = lst.first();\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst.first() < smallest) {\n            smallest = lst.first();\n        }\n    }\n    return smallest;"], ["//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nint is_bored(String S) {\n    int i = 0;\n    for (String s : S.split(\"\\\\.\")) {\n        if (s.equals(\"I\")) {\n            i++;\n        }\n    }\n    return i;"], ["//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nbool any_int(double x, double y, double z) {\n    if (x == y && y == z)\n        return true;\n    if (x == y || x == z || y == z)\n        return false;\n    return any_int(x, y, z);"], ["//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nString encode(String message) {\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0; i < message.length(); i++) {\n        char c = message.charAt(i);\n        if (c >= 'A' && c <= 'Z') {\n            builder.append(c);\n        } else if (c >= 'a' && c <= 'z') {\n            builder.append(c);\n        } else {\n            builder.append('_');\n        }\n    }\n    return builder.toString();"], ["//You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nint skjkasdkd(List<int> lst) {\n    int max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return max;"], ["//Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nbool check_dict_case(Map<String, String> dict) {\n  for (Map<String, String>::Element* e = dict.begin();\n       e != dict.end();\n       ++e) {\n    if (e->second == \"\") {\n      return false;\n    }\n  }\n  return true;"], ["//Implement a function that takes an non-negative integer and returns a list of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nList<int> count_up_to(int n) {\n    List<int> result = new List<int>();\n    for (int i = 2; i <= n; i++) {\n        if (i % 2 == 0) {\n            result.Add(i);\n        }\n    }\n    return result;"], ["//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nint multiply(int a, int b) {\n  if (a == 0 || b == 0) {\n    return 0;\n  }\n  return a * b;"], ["//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nint count_upper(String s) {\n  int count = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s.charAt(i) == 'A' || s.charAt(i) == 'B' || s.charAt(i) == 'C' || s.charAt(i) == 'D' || s.charAt(i) == 'E' || s.charAt(i) == 'F' || s.charAt(i) == 'G' || s.charAt(i) == 'H' || s.charAt(i) == 'I' || s.charAt(i) == 'J' || s.charAt(i) == 'K' || s.charAt(i) == 'L' || s.charAt(i) == 'M' || s.charAt(i) == 'N' || s.charAt(i) == 'O' || s.charAt(i) == 'P' || s.charAt(i) == 'Q' || s.charAt(i) == 'R' || s.charAt(i) == 'S' || s.charAt(i) == 'T' || s.charAt(i) == 'U' || s.charAt(i) == 'V' || s.charAt(i) == 'W' || s.charAt(i) == 'X' || s.charAt(i) == 'Y' || s.charAt(i) == 'Z') {\n      count++;\n    }\n  }\n  return count;"], ["//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nint closest_integer(String value) {\n  if (value.is_number()) {\n    return value.as_number();\n  } else {\n    return value.as_string().as_number();\n  }"], ["//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nList<int> make_a_pile(int n) {\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// >>> make_a_pile(3)\n// [3, 5, 7]\n// >>> make_a_pile(4)\n// [3, 5, 7, 11]\nList<int> make_a_pile(int n) {\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// >>> make_a_pile(4)\n// [3, 5, 7, 11]\n// >>> make_a_pile(5)\n// [3, 5, 7, 11, 13]\nList<int> make_a_pile(int n) {\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number"], ["//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return a list of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nList<String> words_string(String s) {\n    List<String> words = new ArrayList<>();\n    String[] words_array = s.split(\" \");\n    for (String word : words_array) {\n        words.add(word);\n    }\n    return words;"], ["//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nint choose_num(int x, int y) {\n  if (x == y) {\n    return y;\n  }\n  int num = 0;\n  for (int i = x; i <= y; i++) {\n    if (i == x) {\n      num++;\n    }\n    else {\n      num = num + choose_num(i, y);\n    }\n  }\n  return num;"], ["//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nList<int> unique_digits(List<int> x) {\n    List<int> sorted = new List<int>();\n    for (int i = 0; i < x.size(); i++) {\n        if (x[i] % 2 == 0) {\n            sorted.add(x[i]);\n        }\n    }\n    return sorted;"], ["//Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the list is empty, return an empty list:\n// >>> by_length([])\n// []\n// If the list has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nList<String> by_length(List<int> arr) {\n    return arr.stream().map(i -> i % 10).collect(Collectors.toList());"], ["//Implement the function f that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nList<int> f(int n) {\n    List<int> result = new List<int>();\n    for (int i = 1; i <= n; i++) {\n        result.Add(i * f(i - 1));\n    }\n    return result;"], ["//Given a positive integer n, return a record that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// (1, 2)\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// (4, 6)\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned record has the number of even and odd integer palindromes respectively.\n(int, int) even_odd_palindrome(int n) {\n    if (n <= 1) {\n        return {1, 2};\n    }\n    if (n <= 10) {\n        return {1, 2, 3, 4, 5, 6, 7, 8, 9, 11};\n    }\n    return {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 5"], ["//Write a function count_nums which takes a list of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nint count_nums(List<int> arr) {\n    int count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0) {\n            count++;\n        }\n    }\n    return count;"], ["//We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the list will be randomly ordered. Your task is to determine if\n// it is possible to get a list sorted in non-decreasing order by performing \n// the following operation on the given list:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the list by one\n// position in the right direction. The last element of the list will be moved to\n// the starting position in the list i.e. 0th index. \n// If it is possible to obtain the sorted list by performing the above operation\n// then return true else return false.\n// If the given list is empty then return true.\n// Note: The given list is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given list.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// list by performing any number of right shift operations.\nbool move_one_ball(List<int> arr) {\n    int i = 0;\n    int j = arr.size();\n    int k = arr[0];\n    for (i = 0; i < j; i++) {\n        if (arr[i] > k) {\n            arr[i] = arr[i - 1];\n            arr[i - 1] = k;\n        }\n    }\n    return true;"], ["//In this problem, you will implement a function that takes two lists of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 a list of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input lists will be non-empty.\nString exchange(List<int> lst1, List<int> lst2) {\n    if (lst1.size() == lst2.size()) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }"], ["//Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nMap<String, int> histogram(String test) {\n  Map<String, int> result = new HashMap<>();\n  for (String word : test.split(\" \")) {\n    result.put(word, 1);\n  }\n  return result;"], ["//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a record containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// (\"bcd\", false)\n// >>> reverse_delete(\"abcdef\", \"b\")\n// (\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// (\"cdedc\", true)\n(String, bool) reverse_delete(String s, String c) {\n    if (s == c) return true;\n    if (s.length() == 0) return false;\n    if (c.length() == 0) return true;\n    if (c.charAt(0) == c.charAt(s.length() - 1)) return true;\n    return reverse_delete(s.substring(1, s.length() - 1), c.substring(1, c.length() - 1));"], ["//Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nList<String> odd_count(List<String> lst) {\n    List<String> output = new ArrayList<>();\n    for (String s : lst) {\n        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '1') {\n                count++;\n            }\n        }\n        output.add(String.valueOf(count));\n    }\n    return output;"], ["//Given a list of integers nums, find the minimum sum of any non-empty sub-list\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nint minSubArraySum(List<int> nums) {\n    int min = nums.size() - 1;\n    for (int i = min; i >= 0; i--) {\n        if (nums[i] < nums[min]) {\n            min = i;\n        }\n    }\n    return min;"], ["//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nint max_fill(List<List<int>> grid, int capacity) {\n    int n = grid.length;\n    int max_fill = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < i; j++) {\n            if (grid[i][j] == 1) {\n                max_fill = max_fill + 1;\n            }\n        }\n    }\n    return max_fill;"], ["//In this Kata, you have to sort a list of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nList<int> sort_array(List<int> arr) {\n    int[] array = arr.toArray(new int[arr.size()]);\n    Arrays.sort(array);\n    return array;"], ["//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nList<String> select_words(String s, int n) {\n    List<String> result = new ArrayList<>();\n    for (int i = 0; i < s.length(); i++) {\n        if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            result.add(s.charAt(i));\n        }\n    }\n    return result;"], ["//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nString get_closest_vowel(String word) {\n    int start = 0;\n    int end = word.length();\n    int vowel_index = 0;\n    int vowel_count = 0;\n    int vowel_index_end = 0;\n    int vowel_count_end = 0;\n    int vowel_index_start = 0;\n    int vowel_count_start = 0;\n    int vowel_index_end_start = 0;\n    int vowel_count_end_start = 0;\n    int vowel_index_end_end = 0;\n    int vowel_count_end_end = 0;\n    int vowel_index_start_end = 0;\n    int vowel_count_start_end = 0;\n    int vowel_index_start_end_end = 0;\n    int vowel_count_start_end_end = 0;\n    int vowel_index_end_start_end = 0;\n    int vowel_count_end_start_end = 0;\n    int vowel_index_end_start_end_end = 0;\n    int vowel_count_end_start_end_end = 0;\n    int vowel_index_end_end_end = 0;\n    int vowel_count_end_end_end = 0;\n    int vowel_index_end_end_end_end"], ["//You are given a list of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nString match_parens(List<String> lst) {\n  // The first element of the list is the string to be matched.\n  // The second element is the string to be matched.\n  // The third element is the string to be matched.\n  // The fourth element is the string to be matched.\n  // The fifth element is the string to be matched.\n  // The sixth element is the string to be matched.\n  // The seventh element is the string to be matched.\n  // The eighth element is the string to be matched.\n  // The ninth element is the string to be matched.\n  // The tenth element is the string to be matched.\n  // The eleventh element is the string to be matched.\n  // The twelfth element is the string to be matched.\n  // The thirteenth element is the string to be matched.\n  // The fourteenth element is the string to be matched.\n  // The fifteenth element is the string to be matched.\n  // The sixteenth element is the string to be matched.\n  // The seventeenth element is the string to be matched.\n  // The eighteenth element is the string to be matched.\n  // The nineteenth element is the string to be matched.\n  // The twentieth element is the string to be matched.\n  // The thirtieth element is the string to be matched.\n  // The thirty-first element is the string to be matched.\n  // The thirty-second element is the"], ["//Given a list arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the list will be in the range of [1, 1000].\n// 2. The elements in the list will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nList<int> maximum(List<int> arr, int k) {\n    if (arr.length < k) {\n        throw new IllegalArgumentException(\"Argument k must be greater than or equal to the length of the list.\");\n    }\n    int max = arr[k];\n    for (int i = k + 1; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;"], ["//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nint solution(List<int> lst) {\n    if (lst.size() == 0) {\n        return 0;\n    }\n    int result = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        result += solution(lst.subList(i, i + 1));\n    }\n    return result;"], ["//Given a non-empty list of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nint add_elements(List<int> arr, int k) {\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n    return sum;"], ["//Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nList<int> get_odd_collatz(int n) {\n    List<int> list = new List<int>();\n    int current = 1;\n    int next = 1;\n    while (current <= n) {\n        if (current % 2 == 0) {\n            list.Add(next);\n            next = 1;\n        }\n        else {\n            list.Add(current);\n            current = next;\n            next = 1;\n        }\n    }\n    return list;"], ["//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nbool valid_date(String date) {\n    if (date.length() < 1 || date.length() > 31) {\n        return false;\n    }\n    if (date.length() < 1 || date.length() > 30) {\n        return false;\n    }\n    if (date.length() < 1 || date.length() > 29) {\n        return false;\n    }\n    if (date.length() < 1 || date.length() > 12) {\n        return false;\n    }\n    if (date.length() < 1 || date.length() > 11) {\n        return false;\n    }\n    if (date.length() < 1 || date.length() > 10) {\n        return false;\n    }\n    if (date.length() < 1 || date.length() > 9) {\n        return false;\n    }"], ["//Given a list of numbers, return whether or not they are sorted\n// in ascending order. If list has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nbool is_sorted(List<int> lst) {\n  if (lst.size() == 0) {\n    return true;\n  }\n  for (int i = 0; i < lst.size(); i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;"], ["//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection((1, 2), (2, 3))\n// \"NO\"\n// >>> intersection((-1, 1), (0, 4))\n// \"NO\"\n// >>> intersection((-3, -1), (-5, 5))\n// \"YES\"\nString intersection((int, int) interval1, (int, int) interval2) {\n    if (interval1.length == interval2.length) {\n        for (int i = 0; i < interval1.length; i++) {\n            if (interval1[i] < interval2[i]) {\n                return \"NO\";\n            }\n        }\n    }\n    return \"YES\";"], ["//You are given a list arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the list, represented by 1, -1 or 0.\n// Note: return null for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// null\nint? prod_signs(List<int> arr) {\n    if (arr.isEmpty()) {\n        return null;\n    }\n    int? result = null;\n    for (int i = 0; i < arr.size(); i++) {\n        int sign = arr[i];\n        if (sign == 0) {\n            result = result ?? arr[i];\n        } else if (sign == -1) {\n            result = result ?? -arr[i];\n        } else {\n            result = result ?? arr[i];\n        }\n    }\n    return result;"], ["//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered lists of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered list of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nList<int> minPath(List<List<int>> grid, int k) {\n    List<int> result = new List<int>();\n    int i = 0;\n    int j = 0;\n    int min = 0;\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid.size(); j++) {"], ["//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nList<int> tri(int n) {\n    List<int> list = new List<int>();\n    for (int i = 1; i <= n; i++) {\n        list.Add(i);\n    }\n    return list;"], ["//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nint digits(int n) {\n    int result = 0;\n    for (int i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            result++;\n        }\n    }\n    return result;"], ["//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nbool is_nested(String string) {\n    if (string.empty()) {\n        return false;\n    }\n    if (string.length() == 0) {\n        return true;\n    }\n    if (string[0] == '[' && string[string.length() - 1] == ']') {\n        return true;\n    }\n    for (int i = 1; i < string.length(); i++) {\n        if (string[i] == '[' || string[i] == ']') {\n            return true;\n        }\n    }\n    return false;"], ["//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nint sum_squares(List<double> lst) {\n  int sum = 0;\n  for (int i = 0; i < lst.size(); i++) {\n    sum += lst[i];\n  }\n  return sum;"], ["//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nbool check_if_last_char_is_a_letter(String txt) {\n    if (txt.length() == 0) {\n        return false;\n    }\n    char last_char = txt[txt.length() - 1];\n    if (last_char == ' ') {\n        return false;\n    }\n    if (last_char == 'a' || last_char == 'A') {\n        return true;\n    }\n    return false;"], ["//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given list will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nint can_arrange(List<int> arr) {\n  if (arr.size() == 0) {\n    return -1;\n  }\n\n  // If the list is empty, return -1.\n  if (arr.size() == 0) {\n    return -1;\n  }\n\n  // If the list is not sorted, return -1.\n  if (arr.size() != arr.sort().size()) {\n    return -1;\n  }\n\n  // If the list is sorted, return the index of the first element that is\n  // greater than or equal to the element immediately preceding the given\n  // element.\n  int index = 0;\n  for (int i = 0; i < arr.size(); ++i) {\n    if (arr.sort().at(i) > arr.sort().at(i - 1)) {\n      index = i;\n      break;\n    }\n  }\n\n  return index;"], ["//Create a function that returns a record (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as null.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// (null, 1)\n// >>> largest_smallest_integers([])\n// (null, null)\n// >>> largest_smallest_integers([0])\n// (null, null)\n(int?, int?) largest_smallest_integers(List<int> lst) {\n  if (lst.isEmpty()) {\n    return null;\n  }\n  if (lst.size() == 0) {\n    return (null, 0);\n  }\n  int largest = lst.get(0);\n  int smallest = lst.get(lst.size() - 1);\n  return (largest, smallest);"], ["//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nbool is_equal_to_sum_even(int n) {\n  return n == sum_even(n);"], ["//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nint special_factorial(int n) {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    if (n == 2) {\n        return 1;\n    }\n    if (n == 3) {\n        return 1;\n    }\n    if (n == 4) {\n        return 1;\n    }\n    if (n == 5) {\n        return 1;\n    }\n    if (n == 6) {\n        return 1;\n    }\n    if (n == 7) {\n        return 1;\n    }\n    if (n == 8) {\n        return 1;\n    }\n    if (n == 9) {\n        return 1;\n    }\n    if (n == 10) {\n        return 1;\n    }\n    if (n == 11) {\n        return 1;\n    }\n    if (n == 12) {\n        return 1;\n    }\n    if (n == 13) {\n        return 1;\n    }\n    if (n == 14) {\n        return 1;\n    }\n    if (n == 15) {\n        return 1;\n    }\n    if (n == 16) {\n        return 1;\n    }\n    if (n == 17) {\n        return 1;\n    }\n    if (n == 18) {\n        return 1;\n    }\n    if (n == 19) {\n        return 1;\n    }\n    if (n == 20) {\n        return 1;"], ["//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nString fix_spaces(String text) {\n    text = text.replaceAll(\"\\\\s+\", \"-\");\n    return text;"], ["//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nString file_name_check(String file_name) {\n    if (file_name.length() == 0) {\n        return \"No\";\n    }\n    if (file_name.length() > 3) {\n        return \"No\";\n    }\n    if (file_name.charAt(0) == '.') {\n        return \"Yes\";\n    }\n    if (file_name.charAt(0) == '.' && file_name.charAt(1) == '.' && file_name.charAt(2) == '.' && file_name.charAt(3) == '.' && file_name.charAt(4) == '.' && file_name.charAt(5) == '.' && file_name.charAt(6) == '.' && file_name.charAt(7) == '.' && file_name.charAt(8) == '.' && file_name.charAt(9) == '.' && file_name.charAt(10) == '.' && file_name.charAt(11) == '.' && file_name.charAt(12) == '.' && file_name.charAt(13) == '.' && file_name.charAt(14) == '.' && file_name.charAt(15"], ["//\"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nint sum_squares(List<int> lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            sum += lst[i];\n        } else {\n            sum += lst[i * 3 + 1];\n        }\n    }\n    return sum;"], ["//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nString words_in_sentence(String sentence) {\n    // Create a new StringBuilder\n    StringBuilder builder = new StringBuilder();\n    // Create a new array to store the words\n    int[] words = new int[sentence.length()];\n    // Create a new array to store the lengths of the words\n    int[] lengths = new int[sentence.length()];\n    // Create a new array to store the words\n    int[] words_in_sentence = new int[sentence.length()];\n    // Create a new array to store the lengths of the words\n    int[] lengths_in_sentence = new int[sentence.length()];\n    // Create a new array to store the words\n    int[] words_in_sentence_2 = new int[sentence.length()];\n    // Create a new array to store the lengths of the words\n    int[] lengths_in_sentence_2 = new int[sentence.length()];\n    // Create a new array to store the words\n    int[] words_in_sentence_3 = new int[sentence.length()];\n    // Create a new array to store the lengths of the words\n    int[] lengths_in_sentence_3 = new int[sentence.length()];\n    // Create a new array to store the words\n    int[] words_in_sentence_4 = new int[sentence.length()];\n    // Create a new array to store the lengths of the words\n    int[] lengths_in_sentence_4 = new int[sentence.length()];\n    // Create a"], ["//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nbool simplify(String x, String n) {\n    if (x == null || n == null) {\n        return false;\n    }\n    if (x.equals(n)) {\n        return true;\n    }\n    if (x.equals(\"\")) {\n        return false;\n    }\n    if (n.equals(\"\")) {\n        return false;\n    }\n    if (x.equals(n)) {\n        return true;\n    }\n    if (x.equals(\"\")) {\n        return false;\n    }\n    if (n.equals(\"\")) {\n        return false;\n    }\n    if (x.equals(n)) {\n        return true;\n    }\n    if (x.equals(\"\")) {\n        return false;\n    }\n    if (n.equals(\"\")) {\n        return false;\n    }\n    if (x.equals(n)) {\n        return true;\n    }\n    if (x.equals(\"\")) {\n        return false;\n    }\n    if (n.equals(\"\")) {\n        return false;\n    }\n    if (x.equals(n)) {\n        return true;\n    }\n    if (x.equals(\"\")) {\n        return false;\n    }\n    if (n.equals(\"\")) {\n        return false;\n    }\n    if (x.equals(n)) {\n        return true;\n    }\n    if (x.equals(\"\")) {\n        return false;\n    }\n    if (n.equals(\"\")) {"], ["//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nList<int> order_by_points(List<int> nums) {\n  List<int> sorted = new List<int>();\n  for (int i = 0; i < nums.size(); i++) {\n    sorted.add(nums[i]);\n  }\n  return sorted;"], ["//Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nint specialFilter(List<int> nums) {\n    int count = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        if (nums[i] >= 10 && nums[i] % 2 == 0) {\n            count++;\n        }\n    }\n    return count;"], ["//You are given a positive integer n. You have to create an integer list a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nint get_max_triples(int n) {\n    int a[n];\n    int i, j, k;\n    for (i = 1; i <= n; i++) {\n        for (j = i; j <= n; j++) {\n            for (k = i; k <= n; k++) {\n                if (a[i] + a[j] + a[k] == n) {\n                    return i;\n                }\n            }\n        }\n    }\n    return -1;"], ["//Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nList<String> sorted_list_sum(List<String> lst) {\n    List<String> sorted_list = new ArrayList<>();\n    for (String s : lst) {\n        if (s.length() % 2 == 0) {\n            sorted_list.add(s);\n        }\n    }\n    return sorted_list;"], ["//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nint x_or_y(int n, int x, int y) {\n    if (n == 1) {\n        return x;\n    } else if (n == 2) {\n        return y;\n    } else if (n == 3) {\n        return x_or_y(n-1, x, y);\n    } else if (n == 4) {\n        return x_or_y(n-2, x, y);\n    } else if (n == 5) {\n        return x_or_y(n-3, x, y);\n    } else if (n == 6) {\n        return x_or_y(n-4, x, y);\n    } else if (n == 7) {\n        return x_or_y(n-5, x, y);\n    } else if (n == 8) {\n        return x_or_y(n-6, x, y);\n    } else if (n == 9) {\n        return x_or_y(n-7, x, y);\n    } else if (n == 10) {\n        return x_or_y(n-8, x, y);\n    } else if (n == 11) {\n        return x_or_y(n-9, x, y);\n    } else if (n == 12) {\n        return x_or_y(n-10, x, y);\n    } else if (n == 13) {\n        return x_or_y(n-11, x, y);\n    } else if (n == 14) {\n        return x_or_y(n-12, x, y);\n    } else if (n == 15) {\n        return x_or_y(n-1"], ["//Given a list of numbers, return the sum of squares of the numbers\n// in the list that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input list is empty, return 0.\nint double_the_difference(List<double> lst) {\n  if (lst.size() == 0) return 0;\n  return lst.size() - 1;"], ["//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two lists of scores and guesses of equal length, where each index shows a match. \n// Return a list of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nList<int> compare(List<int> game, List<int> guess) {\n    int guessed = 0;\n    int guessedDiff = 0;\n    for (int i = 0; i < game.Count; i++) {\n        if (game[i] == guess[i]) {\n            guessed++;\n        } else {\n            guessedDiff++;\n        }\n    }\n    return new List<int>(game.Where(x => guessed == guessedDiff).ToList());"], ["//You will be given the name of a class (a string) and a list of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the list.\n// For example, if you are given \"Slices\" as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nString Strongest_Extension(String class_name, List<String> extensions) {\n  // TODO: Implement this method.\n  return \"\";"], ["//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nbool cycpattern_check(String a, String b) {\n    if (a.length() != b.length()) {\n        return false;\n    }\n    for (int i = 0; i < a.length(); i++) {\n        if (a[i] != b[i]) {\n            return false;\n        }\n    }\n    return true;"], ["//Given an integer. return a record that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// (1, 1)\n// >>> even_odd_count(123)\n// (1, 2)\n(int, int) even_odd_count(int num) {\n    int even_num = 0, odd_num = 0;\n    int count = 0;\n    for (int i = 0; i < num; i++) {\n        if (num % 2 == 0) {\n            even_num++;\n        } else {\n            odd_num++;\n        }\n        count++;\n    }\n    return (even_num, odd_num);"], ["//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nString int_to_mini_roman(int number) {\n    String result = \"\";\n    if (number < 1000) {\n        result = String.valueOf(number).toLowerCase();\n    }\n    return result;"], ["//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nbool right_angle_triangle(int a, int b, int c) {\n  if (a == b && b == c)\n    return true;\n  if (a == c && b == c)\n    return true;\n  if (a == c && b == b)\n    return true;\n  return false;"], ["//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nString find_max(List<String> words) {\n    int max = 0;\n    for (String word : words) {\n        if (word.length() > max) {\n            max = word.length();\n        }\n    }\n    return words.get(0);"], ["//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return a list of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nList<int> eat(int number, int need, int remaining) {\n    List<int> list = new List<int>();\n    int total = 0;\n    int needToEat = 0;\n    int remainingToEat = 0;\n    int eaten = 0;\n    int left = 0;\n    int current = 0;\n    while (eaten < number) {\n        if (eaten >= number) {\n            eaten = 0;\n            left = number - eaten;\n            remainingToEat = remaining - left;\n            remaining = remainingToEat;\n            remainingToEat = 0;\n            eaten = 0;\n            left = 0;\n            eaten += number;\n            eaten += number;\n            eaten += number;\n            e"], ["//Given two lists operator, and operand. The first list has basic algebra operations, and \n// the second list is a list of integers. Use the two given lists to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list is equal to the length of operand list minus one.\n// Operand is a list of of non-negative integers.\n// Operator list has at least one operator, and operand list has at least two operands.\nint do_algebra(List<String> operator, List<int> operand) {\n    int result = 0;\n    for (int i = 0; i < operator.size(); i++) {\n        if (operator[i] == '+') {\n            result += operator[i + 1] * operand[i];\n        } else if (operator[i] == '-') {\n            result -= operator[i + 1] * operand[i];\n        } else if (operator[i] == '*') {\n            result *= operator[i + 1];\n        } else if (operator[i] == '/') {\n            result /= operator[i + 1];\n        } else if (operator[i] == '%') {\n            result %= operator[i + 1];\n        } else if (operator[i] == '^') {\n            result ^= operator[i + 1];\n        } else if (operator[i] == '&') {\n            result &= operator[i + 1];\n        } else if (operator[i] == '|') {\n            result |= operator[i + 1];\n        } else if (operator[i] == '^') {\n            result ^= operator[i + "], ["//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nString solve(String s) {\n    if (s.length() == 0) {\n        return s;\n    }\n    char[] c = s.toCharArray();\n    for (int i = 0; i < c.length; i++) {\n        if (c[i] == ' ') {\n            c[i] = c[i].toLowerCase();\n        }\n    }\n    return new String(c);"], ["//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return null.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nString? string_to_md5(String text) {\n    let md5 = MD5()\n    md5.update(text.utf8)\n    return md5.hash"], ["//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nList<int> generate_integers(int a, int b) {\n    List<int> integers = new List<int>();\n    for (int i = a; i <= b; i++) {\n        integers.Add(i);\n    }\n    return integers;"]]