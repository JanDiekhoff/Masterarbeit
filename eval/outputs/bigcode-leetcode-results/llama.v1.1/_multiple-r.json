[["# Check if in given list of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> has_close_elements(c(1.0, 2.0, 3.0), 0.5)\n# FALSE\n# >>> has_close_elements(c(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n# TRUE\nhas_close_elements <- function(numbers, threshold) {\n  if (is.numeric(numbers)) {\n    if (threshold < 0) {\n      return(FALSE)\n    } else if (threshold > 1) {\n      return(TRUE)\n    } else {\n      return(TRUE)\n    }\n  } else {\n    if (threshold < 0) {\n      return(FALSE)\n    } else if (threshold > 1) {\n      return(TRUE)\n    } else {\n      return(TRUE)\n    }\n  }\n}\n"], ["# Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n# separate those group into separate strings and return the list of those.\n# Separate groups are balanced (each open brace is properly closed) and not nested within each other\n# Ignore any spaces in the input string.\n# >>> separate_paren_groups('( ) (( )) (( )( ))')\n# c('()', '(())', '(()())')\nseparate_paren_groups <- function(paren_string) {\n  paren_string <- paren_string %>%\n    str_trim() %>%\n    str_replace_all('\\\\(', '\\\\\\\\') %>%\n    str_replace_all('\\\\)', '\\\\\\\\)')\n  paren_string <- paren_string %>%\n    str_replace_all('\\\\(', '\\\\\\\\') %>%\n    str_replace_all('\\\\)', '\\\\\\\\)')\n  paren_string <- paren_string %>%\n    str_replace_all('\\\\(', '\\\\\\\\') %>%\n    str_replace_all('\\\\)', '\\\\\\\\)')\n  paren_string <- paren_string %>%\n    str_replace_all('\\\\(', '\\\\\\\\') %>%\n    str_replace_all('\\\\)', '\\\\\\\\)')\n  paren_string <- paren_string %>%\n    str_replace_all('\\\\(', '\\\\\\\\') %>%\n    str_replace_all('\\\\)', '\\\\\\\\)')\n  paren_string <- paren_string %>%\n    str_replace_all('\\\\(', '\\\\\\\\') %>%\n    str_replace_all('\\\\)', '\\\\\\\\)')\n  paren_string <- paren_string %>%\n    str_replace_all('\\\\(', '\\\\\\\\') %>%\n    str_replace_all('\\\\)', '\\\\\\\\)')\n  paren_string <- paren_string %>%\n    str_replace_all('\\\\(', '\\\\\\\\') %>%\n    str_replace_all('\\\\)', '\\\\\\\\)')\n  paren_string <- paren_string %>%\n    str_replace_all('\\\\(', '\\\\\\\\') %>%\n    str_replace_all('\\\\)', '"], ["# Given a positive floating point number, it can be decomposed into\n# and integer part (largest integer smaller than given number) and decimals\n# (leftover part always smaller than 1).\n# Return the decimal part of the number.\n# >>> truncate_number(3.5)\n# 0.5\ntruncate_number <- function(number) {\n  if (number < 0) {\n    return(-number)\n  }\n  if (number == 0) {\n    return(0)\n  }\n  if (number == 1) {\n    return(1)\n  }\n  if (number == 100) {\n    return(100)\n  }\n  if (number == 1000) {\n    return(1000)\n  }\n  if (number == 10000) {\n    return(10000)\n  }\n  if (number == 100000) {\n    return(100000)\n  }\n  if (number == 1000000) {\n    return(1000000)\n  }\n  if (number == 10000000) {\n    return(10000000)\n  }\n  if (number == 100000000) {\n    return(100000000)\n  }\n  if (number == 1000000000) {\n    return(1000000000)\n  }\n  if (number == 10000000000) {\n    return(10000000000)\n  }\n  if (number == 100000000000) {\n    return(100000000000)\n  }\n  if (number == 1000000000000) {\n    return(1000000000000)\n  }\n  if (number =="], ["# You're given a list of deposit and withdrawal operations on a bank account that starts with\n# zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n# at that point function should return TRUE. Otherwise it should return FALSE.\n# >>> below_zero(c(1, 2, 3))\n# FALSE\n# >>> below_zero(c(1, 2, -4, 5))\n# TRUE\nbelow_zero <- function(operations) {\n  if (operations < 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\n\nA: You can use the following code:\nbelow_zero <- function(operations) {\n  if (operations < 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nbelow_zero(c(1, 2, 3))"], ["# For a given list of input numbers, calculate Mean Absolute Deviation\n# around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute difference between each\n# element and a centerpoint (mean in this case):\n# MAD = average | x - x_mean |\n# >>> mean_absolute_deviation(c(1.0, 2.0, 3.0, 4.0))\n# 1.0\nmean_absolute_deviation <- function(numbers) {\n  mean <- mean(numbers)\n  sd <- sd(numbers)\n  sum <- sum(numbers)\n  if (sum < 0) {\n    sum <- sum + 1\n  }\n  if (sum < 1) {\n    sum <- sum + sd\n  }\n  if (sum < 2) {\n    sum <- sum + sd * sd\n  }\n  if (sum < 3) {\n    sum <- sum + sd * sd * sd\n  }\n  if (sum < 4) {\n    sum <- sum + sd * sd * sd * sd\n  }\n  if (sum < 5) {\n    sum <- sum + sd * sd * sd * sd * sd\n  }\n  if (sum < 6) {\n    sum <- sum + sd * sd * sd * sd * sd * sd\n  }\n  if (sum < 7) {\n    sum <- sum + sd * sd * sd * sd * sd * sd * sd\n  }\n  if (sum < 8) {\n    sum <- sum + sd * sd * sd * sd * sd * sd * sd * sd\n  }\n  if (sum < 9) {\n    sum <- sum + sd * sd * sd * sd * sd * sd * sd * sd * sd\n  }\n  if (sum < 10) {\n    sum <- sum + sd * sd * sd * sd * sd * sd * sd * sd * sd * sd\n  }\n  if (sum < 11) {\n    sum <- sum + sd * sd * sd * sd * sd * sd * sd * sd * sd * sd * sd\n  }\n  if (sum < 12) {\n    sum <- sum + sd * sd"], ["# Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n# >>> intersperse(c(), 4)\n# c()\n# >>> intersperse(c(1, 2, 3), 4)\n# c(1, 4, 2, 4, 3)\nintersperse <- function(numbers, delimeter) {\n  numbers <- as.integer(numbers)\n  delimeter <- as.integer(delimeter)\n  if (length(numbers) == 0) {\n    return(c(1, 2, 3))\n  }\n  if (length(numbers) == 1) {\n    return(c(numbers[1]))\n  }\n  if (length(numbers) == 2) {\n    return(c(numbers[1], numbers[2]))\n  }\n  if (length(numbers) == 3) {\n    return(c(numbers[1], numbers[2], numbers[3]))\n  }\n  if (length(numbers) == 4) {\n    return(c(numbers[1], numbers[2], numbers[3], numbers[4]))\n  }\n  if (length(numbers) == 5) {\n    return(c(numbers[1], numbers[2], numbers[3], numbers[4], numbers[5]))\n  }\n  if (length(numbers) == 6) {\n    return(c(numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6]))\n  }\n  if (length(numbers) == 7) {\n    return(c(numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7]))\n  }\n  if (length(numbers) == 8) {\n    return(c(numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8]))\n  }\n  if (length(numbers) == 9) {\n    return(c(numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8"], ["# Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n# For each of the group, output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n# c(2, 3, 1, 3)\nparse_nested_parens <- function(paren_string) {\n  if (paren_string == '') {\n    return(0)\n  }\n  if (paren_string == '(') {\n    return(1)\n  }\n  if (paren_string == ')') {\n    return(0)\n  }\n  if (paren_string == '(') {\n    return(1)\n  }\n  if (paren_string == ')') {\n    return(0)\n  }\n  if (paren_string == '(') {\n    return(1)\n  }\n  if (paren_string == ')') {\n    return(0)\n  }\n  if (paren_string == '(') {\n    return(1)\n  }\n  if (paren_string == ')') {\n    return(0)\n  }\n  if (paren_string == '(') {\n    return(1)\n  }\n  if (paren_string == ')') {\n    return(0)\n  }\n  if (paren_string == '(') {\n    return(1)\n  }\n  if (paren_string == ')') {\n    return(0)\n  }\n  if (paren_string == '(') {\n    return(1)\n  }\n  if (paren_string == ')') {\n    return(0)\n  }\n  if (paren_string == '(') {\n    return(1)\n  }\n  if (paren_string == ')') {\n    return(0)\n  }\n  if (paren_string == '(') {\n    return(1)\n  }\n  if (paren_string == ')') {\n    return"], ["# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring(c(), 'a')\n# c()\n# >>> filter_by_substring(c('abc', 'bacd', 'cde', 'array'), 'a')\n# c('abc', 'bacd', 'array')\nfilter_by_substring <- function(strings, substring) {\n  if (is.null(substring)) {\n    return(c())\n  }\n  if (is.null(substring)) {\n    return(c())\n  }\n  if (is.null(strings)) {\n    return(c())\n  }\n  if (is.null(substring)) {\n    return(c())\n  }\n  if (is.null(substring)) {\n    return(c())\n  }\n  if (is.null(substring)) {\n    return(c())\n  }\n  if (is.null(substring)) {\n    return(c())\n  }\n  if (is.null(substring)) {\n    return(c())\n  }\n  if (is.null(substring)) {\n    return(c())\n  }\n  if (is.null(substring)) {\n    return(c())\n  }\n  if (is.null(substring)) {\n    return(c())\n  }\n  if (is.null(substring)) {\n    return(c())\n  }\n  if (is.null(substring)) {\n    return(c())\n  }\n  if (is.null(substring)) {\n    return(c())\n  }\n  if (is.null(substring)) {\n    return(c())\n  }\n  if (is.null(substring)) {\n    return(c())\n  }\n  if (is.null(substring)) {\n    return(c())\n  }\n  if (is.null(substring)) {\n    return(c())\n  }\n  if (is.null(substring)) {\n    return(c())\n  }\n  if (is.null(substring)) {\n    return(c())\n  }\n  if (is.null(substring)) {\n    return(c())\n  }\n  if"], ["# For a given list of integers, return a list consisting of a sum and a product of all the integers in a list.\n# Empty sum should be equal to 0 and empty product should be equal to 1.\n# >>> sum_product(c())\n# c(0, 1)\n# >>> sum_product(c(1, 2, 3, 4))\n# c(10, 24)\nsum_product <- function(numbers) {\n  sum <- 0\n  product <- 1\n  for (i in 1:length(numbers)) {\n    sum <- sum + numbers[i]\n    product <- product * numbers[i]\n  }\n  sum\n}\n\nsum_product(c(1, 2, 3, 4))"], ["# From a given list of integers, generate a list of rolling maximum element found until given moment\n# in the sequence.\n# >>> rolling_max(c(1, 2, 3, 2, 3, 4, 2))\n# c(1, 2, 3, 3, 3, 4, 4)\nrolling_max <- function(numbers) {\n  if (length(numbers) == 0) {\n    return(c(1, 2, 3, 3, 3, 4, 4))\n  }\n  if (length(numbers) == 1) {\n    return(c(numbers[1]))\n  }\n  if (length(numbers) == 2) {\n    return(c(numbers[1], numbers[2]))\n  }\n  if (length(numbers) == 3) {\n    return(c(numbers[1], numbers[2], numbers[3]))\n  }\n  if (length(numbers) == 4) {\n    return(c(numbers[1], numbers[2], numbers[3], numbers[4]))\n  }\n  if (length(numbers) == 5) {\n    return(c(numbers[1], numbers[2], numbers[3], numbers[4], numbers[5]))\n  }\n  if (length(numbers) == 6) {\n    return(c(numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6]))\n  }\n  if (length(numbers) == 7) {\n    return(c(numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7]))\n  }\n  if (length(numbers) == 8) {\n    return(c(numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8]))\n  }\n  if (length(numbers) == 9) {\n    return(c(numbers[1], numbers[2], numbers[3], numbers[4], numbers[5], numbers[6], numbers[7], numbers[8], numbers[9]))\n  }\n  if"], ["# Find the shortest palindrome that begins with a supplied string.\n# Algorithm idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n# - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n# >>> make_palindrome('')\n# ''\n# >>> make_palindrome('cat')\n# 'catac'\n# >>> make_palindrome('cata')\n# 'catac'\nmake_palindrome <- function(string) {\n  palindrome <- function(string) {\n    palindrome <- string\n    palindrome <- palindrome[1]\n    palindrome <- palindrome[1] + palindrome[2]\n    palindrome <- palindrome[1] + palindrome[2] + palindrome[3]\n    palindrome <- palindrome[1] + palindrome[2] + palindrome[3] + palindrome[4]\n    palindrome <- palindrome[1] + palindrome[2] + palindrome[3] + palindrome[4] + palindrome[5]\n    palindrome <- palindrome[1] + palindrome[2] + palindrome[3] + palindrome[4] + palindrome[5] + palindrome[6]\n    palindrome <- palindrome[1] + palindrome[2] + palindrome[3] + palindrome[4] + palindrome[5] + palindrome[6] + palindrome[7]\n    palindrome <- palindrome[1] + palindrome[2] + palindrome[3] + palindrome[4] + palindrome[5] + palindrome[6] + palindrome[7] + palindrome[8]\n    palindrome <- palindrome[1] + palindrome[2] + palindrome[3] + palindrome[4] + palindrome[5] + palindrome[6] + palindrome[7] + palindrome[8] + palindrome[9]\n    palindrome <-"], ["# Input are two strings a and b consisting only of 1s and 0s.\n# Perform binary XOR on these inputs and return result also as a string.\n# >>> string_xor('010', '110')\n# '100'\nstring_xor <- function(a, b) {\n  if (a == b) {\n    return(a)\n  } else {\n    return(a ^ b)\n  }\n}\n"], ["# Out of list of strings, return the longest one. Return the first one in case of multiple\n# strings of the same length. Return NULL in case the input list is empty.\n# >>> longest(c())\n# NULL\n# >>> longest(c('a', 'b', 'c'))\n# 'a'\n# >>> longest(c('a', 'bb', 'ccc'))\n# 'ccc'\nlongest <- function(strings) {\n  if (length(strings) == 0) {\n    return NULL\n  }\n  if (length(strings) == 1) {\n    return strings[1]\n  }\n  if (length(strings) == 2) {\n    return strings[1]\n  }\n  if (length(strings) == 3) {\n    return strings[1]\n  }\n  if (length(strings) == 4) {\n    return strings[1]\n  }\n  if (length(strings) == 5) {\n    return strings[1]\n  }\n  if (length(strings) == 6) {\n    return strings[1]\n  }\n  if (length(strings) == 7) {\n    return strings[1]\n  }\n  if (length(strings) == 8) {\n    return strings[1]\n  }\n  if (length(strings) == 9) {\n    return strings[1]\n  }\n  if (length(strings) == 10) {\n    return strings[1]\n  }\n  if (length(strings) == 11) {\n    return strings[1]\n  }\n  if (length(strings) == 12) {\n    return strings[1]\n  }\n  if (length(strings) == 13) {\n    return strings[1]\n  }\n  if (length(strings) == 14) {\n    return strings[1]\n  }\n  if (length(strings) == 15) {\n    return strings[1]\n  }\n  if (length(strings) == 16) {\n    return strings[1]\n  }\n  if (length(strings) == 17) {\n    return strings["], ["# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3, 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ngreatest_common_divisor <- function(a, b) {\n  if (a == b) {\n    return(a)\n  } else if (a < b) {\n    return(a)\n  } else {\n    return(b)\n  }\n}\n"], ["# Return list of all prefixes from shortest to longest of the input string\n# >>> all_prefixes('abc')\n# c('a', 'ab', 'abc')\nall_prefixes <- function(string) {\n  if (is.null(string)) {\n    return(NULL)\n  }\n  if (string == \"\") {\n    return(NULL)\n  }\n  if (string == \"\") {\n    return(NULL)\n  }\n  if (string == \"a\") {\n    return(c(\"a\", \"ab\", \"abc\"))\n  }\n  if (string == \"ab\") {\n    return(c(\"a\", \"ab\", \"abc\"))\n  }\n  if (string == \"abc\") {\n    return(c(\"a\", \"ab\", \"abc\"))\n  }\n  return(NULL)\n}\n"], ["# Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n# >>> string_sequence(0)\n# '0'\n# >>> string_sequence(5)\n# '0 1 2 3 4 5'\nstring_sequence <- function(n) {\n  string <- \"0\"\n  for (i in 1:n) {\n    string <- paste(string, i, sep = \"\")\n  }\n  string\n}\n\nstring_sequence(10)"], ["# Given a string, find out how many distinct characters (regardless of case) does it consist of\n# >>> count_distinct_characters('xyzXYZ')\n# 3\n# >>> count_distinct_characters('Jerry')\n# 4\ncount_distinct_characters <- function(string) {\n  count <- 0\n  for (i in 1:length(string)) {\n    if (string[i] == ' ') {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\n\nA: Here's a solution using the stringi package.\nlibrary(stringi)\n\ncount_distinct_characters <- function(string) {\n  count <- 0\n  for (i in 1:length(string)) {\n    if (string[i] == ' ') {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\ncount_distinct_characters('xyzXYZ')"], ["# Input to this function is a string representing musical notes in a special ASCII format.\n# Your task is to parse this string and return list of integers corresponding to how many beats does each\n# not last.\n# Here is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|' - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n# c(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nparse_music <- function(music_string) {\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_string <- trimws(music_string)\n  music_"], ["# Find how many times a given substring can be found in the original string. Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\nhow_many_times <- function(string, substring) {\n  if (substring == \"\") {\n    return(0)\n  }\n  if (substring == \"\") {\n    return(0)\n  }\n  if (substring == \"\") {\n    return(0)\n  }\n  if (substring == \"\") {\n    return(0)\n  }\n  if (substring == \"\") {\n    return(0)\n  }\n  if (substring == \"\") {\n    return(0)\n  }\n  if (substring == \"\") {\n    return(0)\n  }\n  if (substring == \"\") {\n    return(0)\n  }\n  if (substring == \"\") {\n    return(0)\n  }\n  if (substring == \"\") {\n    return(0)\n  }\n  if (substring == \"\") {\n    return(0)\n  }\n  if (substring == \"\") {\n    return(0)\n  }\n  if (substring == \"\") {\n    return(0)\n  }\n  if (substring == \"\") {\n    return(0)\n  }\n  if (substring == \"\") {\n    return(0)\n  }\n  if (substring == \"\") {\n    return(0)\n  }\n  if (substring == \"\") {\n    return(0)\n  }\n  if (substring == \"\") {\n    return(0)\n  }\n  if (substring == \"\") {\n    return(0)\n  }\n  if (substring == \"\") {\n    return(0)\n  }\n  if (substring == \"\") {\n    return(0)\n  }\n  if (substring == \"\") {\n    return(0)\n  }\n  if (substring == \"\") {\n    return(0)\n  }\n  if (substring == \"\") {\n    return(0)\n  }\n  if (substring == \"\") {\n    return(0)"], ["# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n# Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to largest\n# >>> sort_numbers('three one five')\n# 'one three five'\nsort_numbers <- function(numbers) {\n  if (length(numbers) == 0) {\n    return(NULL)\n  }\n  if (length(numbers) == 1) {\n    return(numbers[1])\n  }\n  if (length(numbers) == 2) {\n    return(numbers[1] + numbers[2])\n  }\n  if (length(numbers) == 3) {\n    return(numbers[1] + numbers[2] + numbers[3])\n  }\n  if (length(numbers) == 4) {\n    return(numbers[1] + numbers[2] + numbers[3] + numbers[4])\n  }\n  if (length(numbers) == 5) {\n    return(numbers[1] + numbers[2] + numbers[3] + numbers[4] + numbers[5])\n  }\n  if (length(numbers) == 6) {\n    return(numbers[1] + numbers[2] + numbers[3] + numbers[4] + numbers[5] + numbers[6])\n  }\n  if (length(numbers) == 7) {\n    return(numbers[1] + numbers[2] + numbers[3] + numbers[4] + numbers[5] + numbers[6] + numbers[7])\n  }\n  if (length(numbers) == 8) {\n    return(numbers[1] + numbers[2] + numbers[3] + numbers[4] + numbers[5] + numbers[6] + numbers[7] + numbers[8])\n  }\n  if (length(numbers) == 9) {\n    return(numbers[1] + numbers[2] + numbers[3] + numbers[4] + numbers[5] + numbers[6] + numbers[7] + numbers[8]"], ["# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\n# >>> find_closest_elements(c(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n# c(2.0, 2.2)\n# >>> find_closest_elements(c(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n# c(2.0, 2.0)\nfind_closest_elements <- function(numbers) {\n  # find the smallest number in the list\n  smallest <- min(numbers)\n  # find the largest number in the list\n  largest <- max(numbers)\n  # find the elements in the list that are smaller than the largest\n  smallest_elements <- c(smallest, largest)\n  # find the elements in the list that are larger than the largest\n  largest_elements <- c(largest, smallest)\n  # return the elements in the list that are smaller than the largest\n  return(c(smallest_elements, largest_elements))\n}\n"], ["# Given list of numbers (of at least two elements), apply a linear transform to that list,\n# such that the smallest number will become 0 and the largest will become 1\n# >>> rescale_to_unit(c(1.0, 2.0, 3.0, 4.0, 5.0))\n# c(0.0, 0.25, 0.5, 0.75, 1.0)\nrescale_to_unit <- function(numbers) {\n  rescaled_numbers <- c(0.0, 0.25, 0.5, 0.75, 1.0)\n  rescaled_numbers <- rescaled_numbers[order(rescaled_numbers)]\n  rescaled_numbers <- rescaled_numbers[order(rescaled_numbers)]\n  rescaled_numbers <- rescaled_numbers[order(rescaled_numbers)]\n  rescaled_numbers <- rescaled_numbers[order(rescaled_numbers)]\n  rescaled_numbers <- rescaled_numbers[order(rescaled_numbers)]\n  rescaled_numbers <- rescaled_numbers[order(rescaled_numbers)]\n  rescaled_numbers <- rescaled_numbers[order(rescaled_numbers)]\n  rescaled_numbers <- rescaled_numbers[order(rescaled_numbers)]\n  rescaled_numbers <- rescaled_numbers[order(rescaled_numbers)]\n  rescaled_numbers <- rescaled_numbers[order(rescaled_numbers)]\n  rescaled_numbers <- rescaled_numbers[order(rescaled_numbers)]\n  rescaled_numbers <- rescaled_numbers[order(rescaled_numbers)]\n  rescaled_numbers <- rescaled_numbers[order(rescaled_numbers)]\n  rescaled_numbers <- rescaled_numbers[order(rescaled_numbers)]\n  rescaled_numbers <- rescaled_numbers[order(rescaled_numbers)]\n  rescaled_numbers <- rescaled_numbers[order(rescaled_numbers)]\n  resc"], ["# Filter given list of any rthon values only for integers\n# >>> filter_integers(list('a', 3.14, 5))\n# c(5)\n# >>> filter_integers(list(1, 2, 3, 'abc', list(), c()))\n# c(1, 2, 3)\nfilter_integers <- function(values) {\n  if (is.character(values)) {\n    return(values)\n  } else if (is.integer(values)) {\n    return(values)\n  } else {\n    return(NA)\n  }\n}\n\n\nA: You can use the function is.numeric from the package is.numeric.\nis.numeric(list(1, 2, 3, 'abc', list(), c()))"], ["# Return length of given string\n# >>> strlen('')\n# 0\n# >>> strlen('abc')\n# 3\nstrlen <- function(string) {\n  if (is.null(string)) return 0\n  if (length(string) == 0) return 0\n  if (length(string) == 1) return 1\n  if (length(string) == 2) return 2\n  if (length(string) == 3) return 3\n  if (length(string) == 4) return 4\n  if (length(string) == 5) return 5\n  if (length(string) == 6) return 6\n  if (length(string) == 7) return 7\n  if (length(string) == 8) return 8\n  if (length(string) == 9) return 9\n  if (length(string) == 10) return 10\n  if (length(string) == 11) return 11\n  if (length(string) == 12) return 12\n  if (length(string) == 13) return 13\n  if (length(string) == 14) return 14\n  if (length(string) == 15) return 15\n  if (length(string) == 16) return 16\n  if (length(string) == 17) return 17\n  if (length(string) == 18) return 18\n  if (length(string) == 19) return 19\n  if (length(string) == 20) return 20\n  if (length(string) == 21) return 21\n  if (length(string) == 22) return 22\n  if (length(string) == 23) return 23\n  if (length(string) == 24) return 24\n  if (length(string) == 25) return 25\n  if (length(string) == 26) return 26\n  if (length(string) == 27) return 27\n  if ("], ["# For a given number n, find the largest number that divides n evenly, smaller than n\n# >>> largest_divisor(15)\n# 5\nlargest_divisor <- function(n) {\n  if (n < 2) {\n    return(n)\n  }\n  if (n == 2) {\n    return(0)\n  }\n  if (n == 3) {\n    return(1)\n  }\n  if (n == 4) {\n    return(2)\n  }\n  if (n == 5) {\n    return(3)\n  }\n  if (n == 6) {\n    return(4)\n  }\n  if (n == 7) {\n    return(5)\n  }\n  if (n == 8) {\n    return(6)\n  }\n  if (n == 9) {\n    return(7)\n  }\n  if (n == 10) {\n    return(8)\n  }\n  if (n == 11) {\n    return(9)\n  }\n  if (n == 12) {\n    return(10)\n  }\n  if (n == 13) {\n    return(11)\n  }\n  if (n == 14) {\n    return(12)\n  }\n  if (n == 15) {\n    return(13)\n  }\n  if (n == 16) {\n    return(14)\n  }\n  if (n == 17) {\n    return(15)\n  }\n  if (n == 18) {\n    return(16)\n  }\n  if (n == 19) {\n    return(17)\n  }\n  if (n == 20) {\n    return(18)\n  }\n  if (n == 21) {\n    return(19)\n  }\n  if (n == 22) {\n    return(20)\n  }\n  if (n == 23) {\n    return(21)\n"], ["# Return list of prime factors of given integer in the order from smallest to largest.\n# Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n# Input number should be equal to the product of all factors\n# >>> factorize(8)\n# c(2, 2, 2)\n# >>> factorize(25)\n# c(5, 5)\n# >>> factorize(70)\n# c(2, 5, 7)\nfactorize <- function(n) {\n  n <- as.integer(n)\n  factor <- rep(0, n)\n  for (i in 1:n) {\n    factor <- factor + factorize(i)\n  }\n  factor\n}\n\nfactorize(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["# From a list of integers, remove all elements that occur more than once.\n# Keep order of elements left the same as in the input.\n# >>> remove_duplicates(c(1, 2, 3, 2, 4))\n# c(1, 3, 4)\nremove_duplicates <- function(numbers) {\n  numbers <- as.list(numbers)\n  numbers <- numbers[order(numbers)]\n  numbers <- numbers[!duplicated(numbers)]\n  return(numbers)\n}\n"], ["# For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n# >>> flip_case('Hello')\n# 'hELLO'\nflip_case <- function(string) {\n  string <- string %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '') %>%\n    gsub('\\\\s+', '', '')"], ["# Concatenate list of strings into a single string\n# >>> concatenate(c())\n# ''\n# >>> concatenate(c('a', 'b', 'c'))\n# 'abc'\nconcatenate <- function(strings) {\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n  strings <- strings[1:length(strings)]\n"], ["# Filter an input list of strings only for ones that start with a given prefix.\n# >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc', 'bcd', 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings, prefix) {\n  strings <- strings %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%\n    str_replace_all(prefix, '') %>%"], ["# Return only positive numbers in the list.\n# >>> get_positive(c(-1, 2, -4, 5, 6))\n# c(2, 5, 6)\n# >>> get_positive(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n# c(5, 3, 2, 3, 9, 123, 1)\nget_positive <- function(l) {\n  if (length(l) == 0) {\n    return(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))\n  }\n  if (length(l) == 1) {\n    return(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))\n  }\n  if (length(l) == 2) {\n    return(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))\n  }\n  if (length(l) == 3) {\n    return(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))\n  }\n  if (length(l) == 4) {\n    return(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))\n  }\n  if (length(l) == 5) {\n    return(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))\n  }\n  if (length(l) == 6) {\n    return(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))\n  }\n  if (length("], ["# Return true if a given number is prime, and false otherwise.\n# >>> is_prime(6)\n# FALSE\n# >>> is_prime(101)\n# TRUE\n# >>> is_prime(11)\n# TRUE\n# >>> is_prime(13441)\n# TRUE\n# >>> is_prime(61)\n# TRUE\n# >>> is_prime(4)\n# FALSE\n# >>> is_prime(1)\n# FALSE\nis_prime <- function(n) {\n  if (n %% 2 == 0) {\n    return(FALSE)\n  } else {\n    return(TRUE)\n  }\n}\n\nis_prime(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["# This function takes a list l and returns a list l' such that\n# l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n# to the values of the corresponding indicies of l, but sorted.\n# >>> sort_third(c(1, 2, 3))\n# c(1, 2, 3)\n# >>> sort_third(c(5, 6, 3, 4, 8, 9, 2))\n# c(2, 6, 3, 4, 8, 9, 5)\nsort_third <- function(l) {\n  if (length(l) == 3) {\n    l <- sort(l)\n  }\n  if (length(l) == 2) {\n    l <- sort(l[1:2])\n  }\n  if (length(l) == 1) {\n    l <- sort(l[1])\n  }\n  l\n}\n\nsort_third(c(1, 2, 3))"], ["# Return sorted unique elements in a list\n# >>> unique(c(5, 3, 5, 2, 3, 3, 9, 0, 123))\n# c(0, 2, 3, 5, 9, 123)\nunique <- function(l) {\n  unique <- lapply(l, function(x) {\n    unique <- lapply(unique(x), function(y) {\n      if (length(y) == 1) {\n        y <- unique(y)\n      } else {\n        y <- unique(y)\n        y <- unique(y)\n      }\n      return(y)\n    })\n    return(unique)\n  })\n  unique\n}\n\nunique(c(5, 3, 5, 2, 3, 3, 9, 0, 123))"], ["# Return maximum element in the list.\n# >>> max_element(c(1, 2, 3))\n# 3\n# >>> max_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n# 123\nmax_element <- function(l) {\n  max <- l[1]\n  for (i in 2:length(l)) {\n    if (max < l[[i]]) {\n      max <- l[[i]]\n    }\n  }\n  max\n}\n\nmax_element(c(1, 2, 3))"], ["# Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n# >>> fizz_buzz(50)\n# 0\n# >>> fizz_buzz(78)\n# 2\n# >>> fizz_buzz(79)\n# 3\nfizz_buzz <- function(n) {\n  if (n <= 1) {\n    return(0)\n  } else if (n <= 5) {\n    return(fizz(n-1))\n  } else if (n <= 10) {\n    return(fizz(n-2))\n  } else if (n <= 15) {\n    return(fizz(n-3))\n  } else if (n <= 20) {\n    return(fizz(n-4))\n  } else if (n <= 25) {\n    return(fizz(n-5))\n  } else if (n <= 30) {\n    return(fizz(n-6))\n  } else if (n <= 35) {\n    return(fizz(n-7))\n  } else if (n <= 40) {\n    return(fizz(n-8))\n  } else if (n <= 45) {\n    return(fizz(n-9))\n  } else if (n <= 50) {\n    return(fizz(n-10))\n  } else if (n <= 55) {\n    return(fizz(n-11))\n  } else if (n <= 60) {\n    return(fizz(n-12))\n  } else if (n <= 65) {\n    return(fizz(n-13))\n  } else if (n <= 70) {\n    return(fizz(n-14))\n  } else if (n <= 75) {\n    return(fizz(n-15))\n  } else if (n <= 80) {\n    return(fizz(n-16))\n  } else if (n <= 85) {\n    return"], ["# This function takes a list l and returns a list l' such that\n# l' is identical to l in the odd indicies, while its values at the even indicies are equal\n# to the values of the even indicies of l, but sorted.\n# >>> sort_even(c(1, 2, 3))\n# c(1, 2, 3)\n# >>> sort_even(c(5, 6, 3, 4))\n# c(3, 6, 5, 4)\nsort_even <- function(l) {\n  if (length(l) %in% 2) {\n    l <- sort(l)\n  }\n  return(l)\n}\n\n\nA: You can use the sort function to sort the elements of a list.\nsort(c(1, 2, 3))"], ["# prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n# 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\nprime_fib <- function(n) {\n  if (n <= 1) {\n    return(1)\n  }\n  if (n == 1) {\n    return(1)\n  }\n  if (n == 2) {\n    return(2)\n  }\n  if (n == 3) {\n    return(3)\n  }\n  if (n == 4) {\n    return(5)\n  }\n  if (n == 5) {\n    return(13)\n  }\n  if (n == 6) {\n    return(89)\n  }\n  if (n == 7) {\n    return(121)\n  }\n  if (n == 8) {\n    return(199)\n  }\n  if (n == 9) {\n    return(288)\n  }\n  if (n == 10) {\n    return(377)\n  }\n  if (n == 11) {\n    return(565)\n  }\n  if (n == 12) {\n    return(843)\n  }\n  if (n == 13) {\n    return(1221)\n  }\n  if (n == 14) {\n    return(1923)\n  }\n  if (n == 15) {\n    return(2803)\n  }\n  if (n == 16) {\n    return(4683)\n  }\n  if (n == 17) {\n    return(7563)\n  }\n  if (n == 18) {\n    return(11429)\n  }"], ["# triples_sum_to_zero takes a list of integers as an input.\n# it returns TRUE if there are three distinct elements in the list that\n# sum to zero, and FALSE otherwise.\n# >>> triples_sum_to_zero(c(1, 3, 5, 0))\n# FALSE\n# >>> triples_sum_to_zero(c(1, 3, -2, 1))\n# TRUE\n# >>> triples_sum_to_zero(c(1, 2, 3, 7))\n# FALSE\n# >>> triples_sum_to_zero(c(2, 4, -5, 3, 9, 7))\n# TRUE\n# >>> triples_sum_to_zero(c(1))\n# FALSE\ntriples_sum_to_zero <- function(l) {\n  if (length(l) == 0) {\n    return(FALSE)\n  }\n  if (length(l) == 1) {\n    return(TRUE)\n  }\n  sum <- 0\n  for (i in 1:length(l)) {\n    sum <- sum + l[[i]]\n  }\n  return(sum == 0)\n}\n"], ["# Imagine a road that's a perfectly straight infinitely long line.\n# n cars are driving left to right;  simultaneously, a different set of n cars\n# are driving right to left.   The two sets of cars start out being very far from\n# each other.  All cars move in the same speed.  Two cars are said to collide\n# when a car that's moving left to right hits a car that's moving right to left.\n# However, the cars are infinitely sturdy and strong; as a result, they continue moving\n# in their trajectory as if they did not collide.\n# This function outputs the number of such collisions.\ncar_race_collision <- function(n) {\n  # n cars are driving left to right;  simultaneously, a different set of n cars\n  # are driving right to left.   The two sets of cars start out being very far from\n  # each other.  All cars move in the same speed.  Two cars are said to collide\n  # when a car that's moving left to right hits a car that's moving right to left.\n  # However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  # in their trajectory as if they did not collide.\n  # This function outputs the number of such collisions.\n  n_collisions <- 0\n  for (i in 1:n) {\n    if (i == 1) {\n      n_collisions <- n_collisions + 1\n    }\n    if (i == n) {\n      n_collisions <- n_collisions - 1\n    }\n  }\n  return(n_collisions)\n}\n\ncar_race_collision(10)\n\n\nA: You can use the following code:"], ["# Return list with elements incremented by 1.\n# >>> incr_list(c(1, 2, 3))\n# c(2, 3, 4)\n# >>> incr_list(c(5, 3, 5, 2, 3, 3, 9, 0, 123))\n# c(6, 4, 6, 3, 4, 4, 10, 1, 124)\nincr_list <- function(l) {\n  l <- as.list(l)\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order(l)]\n  l <- l[order("], ["# pairs_sum_to_zero takes a list of integers as an input.\n# it returns TRUE if there are two distinct elements in the list that\n# sum to zero, and FALSE otherwise.\n# >>> pairs_sum_to_zero(c(1, 3, 5, 0))\n# FALSE\n# >>> pairs_sum_to_zero(c(1, 3, -2, 1))\n# FALSE\n# >>> pairs_sum_to_zero(c(1, 2, 3, 7))\n# FALSE\n# >>> pairs_sum_to_zero(c(2, 4, -5, 3, 5, 7))\n# TRUE\n# >>> pairs_sum_to_zero(c(1))\n# FALSE\npairs_sum_to_zero <- function(l) {\n  if (length(l) == 0) return(FALSE)\n  if (length(l) == 1) return(TRUE)\n  if (length(l) == 2) return(FALSE)\n  if (length(l) == 3) return(TRUE)\n  if (length(l) == 4) return(FALSE)\n  if (length(l) == 5) return(TRUE)\n  if (length(l) == 6) return(FALSE)\n  if (length(l) == 7) return(TRUE)\n  if (length(l) == 8) return(FALSE)\n  if (length(l) == 9) return(TRUE)\n  if (length(l) == 10) return(FALSE)\n  if (length(l) == 11) return(TRUE)\n  if (length(l) == 12) return(FALSE)\n  if (length(l) == 13) return(TRUE)\n  if (length(l) == 14) return(FALSE)\n  if (length(l) == 15) return(TRUE)\n  if (length(l) == 16) return(FALSE)\n  if (length(l) == 17) return(TRUE)\n  if (length(l) == 18) return(FALSE)\n  if (length(l) =="], ["# Change numerical base of input number x to base.\n# return string representation after the conversion.\n# base numbers are less than 10.\n# >>> change_base(8, 3)\n# '22'\n# >>> change_base(8, 2)\n# '1000'\n# >>> change_base(7, 2)\n# '111'\nchange_base <- function(x, base) {\n  if (base < 10) {\n    return(x)\n  } else {\n    return(base * x)\n  }\n}\n"], ["# Given length of a side and high return area for a triangle.\n# >>> triangle_area(5, 3)\n# 7.5\ntriangle_area <- function(a, h) {\n  return(a * h)\n}\n"], ["# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n# 8\n# >>> fib4(7)\n# 14\nfib4 <- function(n) {\n  if (n == 0) {\n    return(0)\n  }\n  if (n == 1) {\n    return(0)\n  }\n  if (n == 2) {\n    return(0)\n  }\n  if (n == 3) {\n    return(0)\n  }\n  if (n == 4) {\n    return(0)\n  }\n  if (n == 5) {\n    return(0)\n  }\n  if (n == 6) {\n    return(0)\n  }\n  if (n == 7) {\n    return(0)\n  }\n  if (n == 8) {\n    return(0)\n  }\n  if (n == 9) {\n    return(0)\n  }\n  if (n == 10) {\n    return(0)\n  }\n  if (n == 11) {\n    return(0)\n  }\n  if (n == 12) {\n    return(0)\n  }\n  if (n == 13) {\n    return(0)\n  }\n  if (n == 14) {\n    return(0)\n  }\n  if (n == 15) {\n    return(0)\n  }\n  if (n == 16) {\n    return(0)\n  }\n"], ["# Return median of elements in the list l.\n# >>> median(c(3, 1, 2, 4, 5))\n# 3\n# >>> median(c(-10, 4, 6, 1000, 10, 20))\n# 15.0\nmedian <- function(l) {\n  if (length(l) == 0) return(0)\n  if (length(l) == 1) return(l[1])\n  if (length(l) == 2) return(l[1])\n  if (length(l) == 3) return(l[1])\n  if (length(l) == 4) return(l[1])\n  if (length(l) == 5) return(l[1])\n  if (length(l) == 6) return(l[1])\n  if (length(l) == 7) return(l[1])\n  if (length(l) == 8) return(l[1])\n  if (length(l) == 9) return(l[1])\n  if (length(l) == 10) return(l[1])\n  if (length(l) == 11) return(l[1])\n  if (length(l) == 12) return(l[1])\n  if (length(l) == 13) return(l[1])\n  if (length(l) == 14) return(l[1])\n  if (length(l) == 15) return(l[1])\n  if (length(l) == 16) return(l[1])\n  if (length(l) == 17) return(l[1])\n  if (length(l) == 18) return(l[1])\n  if (length(l) == 19) return(l[1])\n  if (length(l) == 20) return(l[1])\n  if (length(l) == 21) return(l[1])\n  if (length(l) == 22) return(l[1])\n  if (length"], ["# Checks if given string is a palindrome\n# >>> is_palindrome('')\n# TRUE\n# >>> is_palindrome('aba')\n# TRUE\n# >>> is_palindrome('aaaaa')\n# TRUE\n# >>> is_palindrome('zbcd')\n# FALSE\nis_palindrome <- function(text) {\n  if (text == \"\") {\n    return(FALSE)\n  }\n  if (text == \"\") {\n    return(FALSE)\n  }\n  if (text == \"a\") {\n    return(TRUE)\n  }\n  if (text == \"b\") {\n    return(TRUE)\n  }\n  if (text == \"c\") {\n    return(TRUE)\n  }\n  if (text == \"d\") {\n    return(TRUE)\n  }\n  if (text == \"e\") {\n    return(TRUE)\n  }\n  if (text == \"f\") {\n    return(TRUE)\n  }\n  if (text == \"g\") {\n    return(TRUE)\n  }\n  if (text == \"h\") {\n    return(TRUE)\n  }\n  if (text == \"i\") {\n    return(TRUE)\n  }\n  if (text == \"j\") {\n    return(TRUE)\n  }\n  if (text == \"k\") {\n    return(TRUE)\n  }\n  if (text == \"l\") {\n    return(TRUE)\n  }\n  if (text == \"m\") {\n    return(TRUE)\n  }\n  if (text == \"n\") {\n    return(TRUE)\n  }\n  if (text == \"o\") {\n    return(TRUE)\n  }\n  if (text == \"p\") {\n    return(TRUE)\n  }\n  if (text == \"q\") {\n    return(TRUE)\n  }\n  if (text == \"r\") {\n    return(TRUE)\n  }\n  if (text == \"s\") {\n    return(TRUE)\n  }\n  if (text == \"t\") {\n    return(TRUE)\n  }\n  if (text == \"u\") {\n    return(TRUE"], ["# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n# >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n# >>> modp(100, 101)\n# 1\nmodp <- function(n, p) {\n  if (n < 1) {\n    return(p)\n  }\n  if (n == 1) {\n    return(p)\n  }\n  if (n == p) {\n    return(p)\n  }\n  if (n == 1 + p) {\n    return(p)\n  }\n  if (n == 1 + 1 + p) {\n    return(p)\n  }\n  if (n == 1 + 1 + 1 + p) {\n    return(p)\n  }\n  if (n == 1 + 1 + 1 + 1 + p) {\n    return(p)\n  }\n  if (n == 1 + 1 + 1 + 1 + 1 + p) {\n    return(p)\n  }\n  if (n == 1 + 1 + 1 + 1 + 1 + 1 + p) {\n    return(p)\n  }\n  if (n == 1 + 1 + 1 + 1 + 1 + 1 + 1 + p) {\n    return(p)\n  }\n  if (n == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + p) {\n    return(p)\n  }\n  if (n == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + p) {\n    return(p)\n  }\n  if (n == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + p) {\n    return(p"], ["# remove_vowels is a function that takes string and returns string without vowels.\n# >>> remove_vowels('')\n# ''\n# >>> remove_vowels('abcdef')\n# 'bcdf'\n# >>> remove_vowels('aaaaa')\n# ''\n# >>> remove_vowels('aaBAA')\n# 'B'\n# >>> remove_vowels('zbcd')\n# 'zbcd'\nremove_vowels <- function(text) {\n  if (is.character(text)) {\n    text <- gsub(\"[a-zA-Z]\", \"\", text)\n  }\n  text\n}\n\n\nA: You can use gsub to replace all vowels with a single space.\ngsub(\"[a-zA-Z]\", \"\", text)\n\n\nA: You can use gsub to replace all vowels with a single space.\ngsub(\"[a-zA-Z]\", \"\", text)\n\n"], ["# Return TRUE if all numbers in the list l are below threshold t.\n# >>> below_threshold(c(1, 2, 4, 10), 100)\n# TRUE\n# >>> below_threshold(c(1, 20, 4, 10), 5)\n# FALSE\nbelow_threshold <- function(l, t) {\n  if (t < l) {\n    return(FALSE)\n  } else {\n    return(TRUE)\n  }\n}\n\n\nA: I'm not sure if this is what you want, but I think it's what you want.\nbelow_threshold <- function(l, t) {\n  if (t < l) {\n    return(FALSE)\n  } else {\n    return(TRUE)\n  }\n}\n\nbelow_threshold(c(1, 2, 4, 10), 100)"], ["# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\nadd <- function(x, y) {\n  x + y\n}\n\nadd(1, 2)"], ["# Check if two words have the same characters.\n# >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n# TRUE\n# >>> same_chars('abcd', 'dddddddabc')\n# TRUE\n# >>> same_chars('dddddddabc', 'abcd')\n# TRUE\n# >>> same_chars('eabcd', 'dddddddabc')\n# FALSE\n# >>> same_chars('abcd', 'dddddddabce')\n# FALSE\n# >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n# FALSE\nsame_chars <- function(s0, s1) {\n  if (s0 == s1) {\n    return(TRUE)\n  } else if (s0 == '') {\n    return(FALSE)\n  } else if (s1 == '') {\n    return(FALSE)\n  } else {\n    return(same_chars(s0, s1))\n  }\n}\n\n\nA: You can use the same function from the stringi package.\nlibrary(stringi)\n\ns0 <- \"abcd\"\ns1 <- \"dddddddabc\"\n\ns0 == s1"], ["# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\nfib <- function(n) {\n  if (n <= 1) {\n    return(1)\n  }\n  if (n == 1) {\n    return(1)\n  }\n  return(fib(n - 1) + fib(n - 2))\n}\n\nfib(10)"], ["# brackets is a string of \"<\" and \">\".\n# return TRUE if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing('<')\n# FALSE\n# >>> correct_bracketing('<>')\n# TRUE\n# >>> correct_bracketing('<<><>>')\n# TRUE\n# >>> correct_bracketing('><<>')\n# FALSE\ncorrect_bracketing <- function(brackets) {\n  if (length(brackets) == 0) {\n    return(FALSE)\n  }\n  if (length(brackets) == 1) {\n    return(TRUE)\n  }\n  if (length(brackets) == 2) {\n    return(TRUE)\n  }\n  if (length(brackets) == 3) {\n    return(TRUE)\n  }\n  if (length(brackets) == 4) {\n    return(TRUE)\n  }\n  if (length(brackets) == 5) {\n    return(TRUE)\n  }\n  if (length(brackets) == 6) {\n    return(TRUE)\n  }\n  if (length(brackets) == 7) {\n    return(TRUE)\n  }\n  if (length(brackets) == 8) {\n    return(TRUE)\n  }\n  if (length(brackets) == 9) {\n    return(TRUE)\n  }\n  if (length(brackets) == 10) {\n    return(TRUE)\n  }\n  if (length(brackets) == 11) {\n    return(TRUE)\n  }\n  if (length(brackets) == 12) {\n    return(TRUE)\n  }\n  if (length(brackets) == 13) {\n    return(TRUE)\n  }\n  if (length(brackets) == 14) {\n    return(TRUE)\n  }\n  if (length(brackets) == 15) {\n    return(TRUE)\n  }\n  if (length(brackets) == 16) {\n    return(TRUE)\n  }\n  if (length(brackets) == 17"], ["# Return TRUE is list elements are monotonically increasing or decreasing.\n# >>> monotonic(c(1, 2, 4, 20))\n# TRUE\n# >>> monotonic(c(1, 20, 4, 10))\n# FALSE\n# >>> monotonic(c(4, 1, 0, -10))\n# TRUE\nmonotonic <- function(l) {\n  if (length(l) == 0) {\n    return(FALSE)\n  }\n  if (length(l) == 1) {\n    return(TRUE)\n  }\n  if (length(l) == 2) {\n    return(TRUE)\n  }\n  if (length(l) == 3) {\n    return(TRUE)\n  }\n  if (length(l) == 4) {\n    return(TRUE)\n  }\n  if (length(l) == 5) {\n    return(TRUE)\n  }\n  if (length(l) == 6) {\n    return(TRUE)\n  }\n  if (length(l) == 7) {\n    return(TRUE)\n  }\n  if (length(l) == 8) {\n    return(TRUE)\n  }\n  if (length(l) == 9) {\n    return(TRUE)\n  }\n  if (length(l) == 10) {\n    return(TRUE)\n  }\n  if (length(l) == 11) {\n    return(TRUE)\n  }\n  if (length(l) == 12) {\n    return(TRUE)\n  }\n  if (length(l) == 13) {\n    return(TRUE)\n  }\n  if (length(l) == 14) {\n    return(TRUE)\n  }\n  if (length(l) == 15) {\n    return(TRUE)\n  }\n  if (length(l) == 16) {\n    return(TRUE)\n  }\n  if (length(l) == 17) {\n    return(TRUE)\n  }\n  if (length(l) == 18"], ["# Return sorted unique common elements for two lists.\n# >>> common(c(1, 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5, 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n  if (length(l1) != length(l2)) {\n    stop(\"l1 and l2 must be the same length\")\n  }\n  if (length(l1) != length(l2)) {\n    stop(\"l1 and l2 must be the same length\")\n  }\n  if (length(l1) != length(l2)) {\n    stop(\"l1 and l2 must be the same length\")\n  }\n  if (length(l1) != length(l2)) {\n    stop(\"l1 and l2 must be the same length\")\n  }\n  if (length(l1) != length(l2)) {\n    stop(\"l1 and l2 must be the same length\")\n  }\n  if (length(l1) != length(l2)) {\n    stop(\"l1 and l2 must be the same length\")\n  }\n  if (length(l1) != length(l2)) {\n    stop(\"l1 and l2 must be the same length\")\n  }\n  if (length(l1) != length(l2)) {\n    stop(\"l1 and l2 must be the same length\")\n  }\n  if (length(l1) != length(l2)) {\n    stop(\"l1 and l2 must be the same length\")\n  }\n  if (length(l1) != length(l2)) {\n    stop(\"l1 and l2 must be the same length\")\n  }\n  if (length(l1) != length(l2)) {\n    stop(\"l1 and l2 must be the same length\")\n  }\n  if (length(l1) != length"], ["# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n# >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\nlargest_prime_factor <- function(n) {\n  if (n < 2) {\n    return(n)\n  }\n  if (n % 2 == 0) {\n    return(n)\n  }\n  if (n % 2 == 1) {\n    return(n + 1)\n  }\n  if (n % 2 == 2) {\n    return(n + 1)\n  }\n  if (n % 2 == 3) {\n    return(n + 1)\n  }\n  if (n % 2 == 4) {\n    return(n + 1)\n  }\n  if (n % 2 == 5) {\n    return(n + 1)\n  }\n  if (n % 2 == 6) {\n    return(n + 1)\n  }\n  if (n % 2 == 7) {\n    return(n + 1)\n  }\n  if (n % 2 == 8) {\n    return(n + 1)\n  }\n  if (n % 2 == 9) {\n    return(n + 1)\n  }\n  if (n % 2 == 10) {\n    return(n + 1)\n  }\n  if (n % 2 == 11) {\n    return(n + 1)\n  }\n  if (n % 2 == 12) {\n    return(n + 1)\n  }\n  if (n % 2 == 13) {\n    return(n + 1)\n  }\n  if (n % 2 == 14) {\n    return(n + 1)\n  }\n  if (n % 2 == 15) {\n    return(n + 1)\n  }\n  if (n % 2 == 16) {\n    return("], ["# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n# 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n# 55\n# >>> sum_to_n(1)\n# 1\nsum_to_n <- function(n) {\n  sum(n)\n}\n\nsum_to_n(100)"], ["# brackets is a string of \"(\" and \")\".\n# return TRUE if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing('(')\n# FALSE\n# >>> correct_bracketing('()')\n# TRUE\n# >>> correct_bracketing('(()())')\n# TRUE\n# >>> correct_bracketing(')(()')\n# FALSE\ncorrect_bracketing <- function(brackets) {\n  if (length(brackets) == 0) {\n    return(FALSE)\n  }\n  if (length(brackets) == 1) {\n    return(TRUE)\n  }\n  if (length(brackets) == 2) {\n    return(TRUE)\n  }\n  if (length(brackets) == 3) {\n    return(TRUE)\n  }\n  if (length(brackets) == 4) {\n    return(TRUE)\n  }\n  if (length(brackets) == 5) {\n    return(TRUE)\n  }\n  if (length(brackets) == 6) {\n    return(TRUE)\n  }\n  if (length(brackets) == 7) {\n    return(TRUE)\n  }\n  if (length(brackets) == 8) {\n    return(TRUE)\n  }\n  if (length(brackets) == 9) {\n    return(TRUE)\n  }\n  if (length(brackets) == 10) {\n    return(TRUE)\n  }\n  if (length(brackets) == 11) {\n    return(TRUE)\n  }\n  if (length(brackets) == 12) {\n    return(TRUE)\n  }\n  if (length(brackets) == 13) {\n    return(TRUE)\n  }\n  if (length(brackets) == 14) {\n    return(TRUE)\n  }\n  if (length(brackets) == 15) {\n    return(TRUE)\n  }\n  if (length(brackets) == 16) {\n    return(TRUE)\n  }\n  if (length(brackets) == 17) {"], ["# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2] * x^2 + ....\n#  Return derivative of this polynomial in the same form.\n# >>> derivative(c(3, 1, 2, 4, 5))\n# c(1, 4, 12, 20)\n# >>> derivative(c(1, 2, 3))\n# c(2, 6)\nderivative <- function(xs) {\n  # Return the derivative of this polynomial in the same form.\n  # >>> derivative(c(3, 1, 2, 4, 5))\n  # c(1, 4, 12, 20)\n  # >>> derivative(c(1, 2, 3))\n  # c(2, 6)\n  return(xs)\n}\n"], ["# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n# >>> fibfib(1)\n# 0\n# >>> fibfib(5)\n# 4\n# >>> fibfib(8)\n# 24\nfibfib <- function(n) {\n  if (n <= 0) {\n    return(0)\n  }\n  if (n == 1) {\n    return(1)\n  }\n  if (n == 2) {\n    return(1)\n  }\n  if (n == 3) {\n    return(1)\n  }\n  if (n == 4) {\n    return(1)\n  }\n  if (n == 5) {\n    return(1)\n  }\n  if (n == 6) {\n    return(1)\n  }\n  if (n == 7) {\n    return(1)\n  }\n  if (n == 8) {\n    return(1)\n  }\n  if (n == 9) {\n    return(1)\n  }\n  if (n == 10) {\n    return(1)\n  }\n  if (n == 11) {\n    return(1)\n  }\n  if (n == 12) {\n    return(1)\n  }\n  if (n == 13) {\n    return(1)\n  }\n  if (n == 14) {\n    return(1)\n  }\n  if (n == 15) {\n    return(1)\n  }\n  if (n == 16) {\n    return(1)\n  }\n  if (n == 17) {\n"], ["# Write a function vowels_count which takes a string representing\n# a word as input and returns the number of vowels in the string.\n# Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is at the end of the given word.\n# Example:\n# >>> vowels_count('abcde')\n# 2\n# >>> vowels_count('ACEDY')\n# 3\nvowels_count <- function(s) {\n  if (is.character(s)) {\n    v <- length(s)\n  } else {\n    v <- length(s[s %in% 'a'])\n  }\n  if (v > 1) {\n    v <- v - 1\n  }\n  v\n}\n"], ["# Circular shift the digits of the integer x, shift the digits right by shift\n# and return the result as a string.\n# If shift > number of digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# '21'\n# >>> circular_shift(12, 2)\n# '12'\ncircular_shift <- function(x, shift) {\n  if (shift > length(x)) {\n    return(x[shift - length(x)])\n  }\n  return(x)\n}\n"], ["# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum('')\n# 0\n# >>> digitSum('abAB')\n# 131\n# >>> digitSum('abcCd')\n# 67\n# >>> digitSum('helloE')\n# 69\n# >>> digitSum('woArBld')\n# 131\n# >>> digitSum('aAaaaXa')\n# 153\ndigitSum <- function(s) {\n  sum = 0\n  for (i in 1:length(s)) {\n    if (s[i] == 'a') {\n      sum = sum + s[i]\n    }\n  }\n  return(sum)\n}\n"], ["# In this task, you will be given a string that represents a number of apples and oranges \n# that are distributed in a basket of fruit this basket contains \n# apples, oranges, and mango fruits. Given the string that represents the total number of \n# the oranges and apples and an integer that represent the total number of the fruits \n# in the basket return the number of the mango fruits in the basket.\n# for examble:\n# >>> fruit_distribution('5 apples and 6 oranges', 19)\n# 8\n# >>> fruit_distribution('0 apples and 1 oranges', 3)\n# 2\n# >>> fruit_distribution('2 apples and 3 oranges', 100)\n# 95\n# >>> fruit_distribution('100 apples and 1 oranges', 120)\n# 19\nfruit_distribution <- function(s, n) {\n  if (n < 0) {\n    return(0)\n  }\n  if (s == \"\") {\n    return(0)\n  }\n  if (s == \" \") {\n    return(0)\n  }\n  if (s == \" \") {\n    return(0)\n  }\n  if (s == \" \") {\n    return(0)\n  }\n  if (s == \" \") {\n    return(0)\n  }\n  if (s == \" \") {\n    return(0)\n  }\n  if (s == \" \") {\n    return(0)\n  }\n  if (s == \" \") {\n    return(0)\n  }\n  if (s == \" \") {\n    return(0)\n  }\n  if (s == \" \") {\n    return(0)\n  }\n  if (s == \" \") {\n    return(0)\n  }\n  if (s == \" \") {\n    return(0)\n  }\n  if (s == \" \") {\n    return(0)\n  }\n  if (s == \" \") {\n    return(0)\n  }\n  if (s == \" \") {\n    return(0)\n  }\n  if ("], ["# \"Given a vector representing a branch of a tree that has non-negative integer nodes\n# your task is to pluck one of the nodes and return it.\n# The plucked node should be the node with the smallest even value.\n# If multiple nodes with the same smallest even value are found return the node that has smallest index.\n# The plucked node should be returned in a list, [ smalest_value, its index ],\n# If there are no even values or the given vector is empty, return [].\n# Example 1:\n# >>> pluck(c(4, 2, 3))\n# c(2, 1)\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>> pluck(c(1, 2, 3))\n# c(2, 1)\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 3:\n# >>> pluck(c())\n# c()\n# Example 4:\n# >>> pluck(c(5, 0, 3, 0, 4, 2))\n# c(0, 1)\n# Explanation: 0 is the smallest value, but  there are two zeros,\n#              so we will choose the first zero, which has the smallest index.\n# Constraints:\n#     * 1 <= nodes.length <= 10000\n#     * 0 <= node.value\npluck <- function(arr) {\n  if (arr.length < 1) {\n    return(arr)\n  }\n  if (arr.length == 1) {\n    return(arr[0])\n  }\n  if (arr.length == 2) {\n    return(arr[1])\n  }\n  if (arr.length == 3) {\n    return(arr[2])\n  }\n  if (arr.length == 4) {\n    return(arr[3])\n  }\n  if (arr.length == 5) {\n    return(arr[4])\n  }\n  if (arr.length == 6) {\n    return(arr"], ["# You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n# zero, and has a frequency greater than or equal to the value of the integer itself. \n# The frequency of an integer is the number of times it appears in the list.\n# If no such a value exist, return -1.\n# Examples:\n# >>> search(c(4, 1, 2, 2, 3, 1))\n# 2\n# >>> search(c(1, 2, 2, 3, 3, 3, 4, 4, 4))\n# 3\n# >>> search(c(5, 5, 4, 4, 4))\n# -1\nsearch <- function(lst) {\n  if (is.null(lst)) return(-1)\n  if (is.numeric(lst)) return(max(lst))\n  else if (is.character(lst)) return(max(as.numeric(lst)))\n  else return(max(as.numeric(lst)))\n}\n\n\nA: Here is a solution using base R.\nFirst, we create a vector of all integers in the list.\nall_ints <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,"], ["# Given list of integers, return list in strange order.\n# Strange sorting, is when you start with the minimum value,\n# then maximum of the remaining integers, then minimum and so on.\n# Examples:\n# >>> strange_sort_list(c(1, 2, 3, 4))\n# c(1, 4, 2, 3)\n# >>> strange_sort_list(c(5, 5, 5, 5))\n# c(5, 5, 5, 5)\n# >>> strange_sort_list(c())\n# c()\nstrange_sort_list <- function(lst) {\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n  lst <- lst[order(-lst)]\n "], ["# Given the lengths of the three sides of a triangle. Return the area of\n# the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any two sides is greater \n# than the third side.\n# Example:\n# >>> triangle_area(3, 4, 5)\n# 6.0\n# >>> triangle_area(1, 2, 10)\n# -1\ntriangle_area <- function(a, b, c) {\n  if (a < b) {\n    return(-1)\n  }\n  if (b < c) {\n    return(-1)\n  }\n  if (c < a) {\n    return(-1)\n  }\n  if (a < c) {\n    return(-1)\n  }\n  if (b < c) {\n    return(-1)\n  }\n  if (c < b) {\n    return(-1)\n  }\n  if (a < b) {\n    return(-1)\n  }\n  if (b < c) {\n    return(-1)\n  }\n  if (c < b) {\n    return(-1)\n  }\n  if (a < b) {\n    return(-1)\n  }\n  if (b < c) {\n    return(-1)\n  }\n  if (c < a) {\n    return(-1)\n  }\n  if (a < c) {\n    return(-1)\n  }\n  if (b < c) {\n    return(-1)\n  }\n  if (c < b) {\n    return(-1)\n  }\n  if (a < b) {\n    return(-1)\n  }\n  if (b < c) {\n    return(-1)\n  }\n  if (c < b) {\n    return(-1)\n  }\n  if (a < b) {\n    return(-1)\n  }\n  if (b < c) {\n    return(-1)\n  }\n  if (c < b) {\n    return(-1)\n  }\n  if (a < b"], ["# Write a function that returns TRUE if the object q will fly, and FALSE otherwise.\n# The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n# Example:\n# >>> will_it_fly(c(1, 2), 5)\n# FALSE\n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>> will_it_fly(c(3, 2, 3), 1)\n# FALSE\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> will_it_fly(c(3, 2, 3), 9)\n# TRUE\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# >>> will_it_fly(c(3), 5)\n# TRUE\n# # 3 is less than the maximum possible weight, and it's balanced.\nwill_it_fly <- function(q, w) {\n  if (q == 0) {\n    return(FALSE)\n  }\n  if (q == 1) {\n    return(FALSE)\n  }\n  if (q == 2) {\n    return(FALSE)\n  }\n  if (q == 3) {\n    return(FALSE)\n  }\n  if (q == 4) {\n    return(FALSE)\n  }\n  if (q == 5) {\n    return(FALSE)\n  }\n  if (q == 6) {\n    return(FALSE)\n  }\n  if (q == 7) {\n    return(FALSE)\n  }\n  if (q == 8) {\n    return(FALSE)\n  }\n  if (q == 9) {\n    return(FALSE)\n  }\n  if (q == 10) {\n    return(FALSE)\n  }\n  if (q == 11) {\n    return(FALSE)\n  }\n  if (q == 12) {\n    return(FALSE)\n  }\n  if"], ["# Given a vector arr of integers, find the minimum number of elements that\n# need to be changed to make the vector palindromic. A palindromic vector is a vector that\n# is read the same backwards and forwards. In one change, you can change one element to any other element.\n# For example:\n# >>> smallest_change(c(1, 2, 3, 5, 4, 7, 9, 6))\n# 4\n# >>> smallest_change(c(1, 2, 3, 4, 3, 2, 2))\n# 1\n# >>> smallest_change(c(1, 2, 3, 2, 1))\n# 0\nsmallest_change <- function(arr) {\n  # The smallest change is the smallest change that makes the vector palindromic.\n  # The smallest change is the smallest change that makes the vector palindromic.\n  # The smallest change is the smallest change that makes the vector palindromic.\n  # The smallest change is the smallest change that makes the vector palindromic.\n  # The smallest change is the smallest change that makes the vector palindromic.\n  # The smallest change is the smallest change that makes the vector palindromic.\n  # The smallest change is the smallest change that makes the vector palindromic.\n  # The smallest change is the smallest change that makes the vector palindromic.\n  # The smallest change is the smallest change that makes the vector palindromic.\n  # The smallest change is the smallest change that makes the vector palindromic.\n  # The smallest change is the smallest change that makes the vector palindromic.\n  # The smallest change is the smallest change that makes the vector palindromic.\n  # The smallest change is the smallest change that makes the vector palindromic.\n  # The smallest change is the smallest change that makes the vector palindromic.\n  # The smallest change is the smallest change that makes the vector palindromic.\n  # The smallest change is the smallest change that makes the vector palindromic.\n  # The smallest change is the smallest change that makes the vector palindromic.\n  # The smallest change is the smallest change that"], ["# Write a function that accepts two lists of strings and returns the list that has \n# total number of chars in the all strings of the list less than the other list.\n# if the two lists have the same number of chars, return the first list.\n# Examples\n# >>> total_match(c(), c())\n# c()\n# >>> total_match(c('hi', 'admin'), c('hI', 'Hi'))\n# c('hI', 'Hi')\n# >>> total_match(c('hi', 'admin'), c('hi', 'hi', 'admin', 'project'))\n# c('hi', 'admin')\n# >>> total_match(c('hi', 'admin'), c('hI', 'hi', 'hi'))\n# c('hI', 'hi', 'hi')\n# >>> total_match(c('4'), c('1', '2', '3', '4', '5'))\n# c('4')\ntotal_match <- function(lst1, lst2) {\n  if (length(lst1) == length(lst2)) {\n    lst1 <- lst1[1:length(lst1)]\n    lst2 <- lst2[1:length(lst2)]\n    return(lst1)\n  } else {\n    return(lst2)\n  }\n}\n"], ["# Write a function that returns true if the given number is the multiplication of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100. \n# Example:\n# >>> is_multiply_prime(30)\n# TRUE\n# 30 = 2 * 3 * 5\nis_multiply_prime <- function(a) {\n  if (a % 2 == 0) {\n    return(FALSE)\n  } else {\n    return(TRUE)\n  }\n}\n\nis_multiply_prime(30)"], ["# Your task is to write a function that returns true if a number x is a simple\n# power of n and false in other cases.\n# x is a simple power of n if n**int=x\n# For example:\n# >>> is_simple_power(1, 4)\n# TRUE\n# >>> is_simple_power(2, 2)\n# TRUE\n# >>> is_simple_power(8, 2)\n# TRUE\n# >>> is_simple_power(3, 2)\n# FALSE\n# >>> is_simple_power(3, 1)\n# FALSE\n# >>> is_simple_power(5, 3)\n# FALSE\nis_simple_power <- function(x, n) {\n  if (n == 1) {\n    return(TRUE)\n  }\n  if (n == 2) {\n    return(TRUE)\n  }\n  if (n == 3) {\n    return(TRUE)\n  }\n  if (n == 4) {\n    return(TRUE)\n  }\n  if (n == 5) {\n    return(TRUE)\n  }\n  if (n == 6) {\n    return(TRUE)\n  }\n  if (n == 7) {\n    return(TRUE)\n  }\n  if (n == 8) {\n    return(TRUE)\n  }\n  if (n == 9) {\n    return(TRUE)\n  }\n  if (n == 10) {\n    return(TRUE)\n  }\n  if (n == 11) {\n    return(TRUE)\n  }\n  if (n == 12) {\n    return(TRUE)\n  }\n  if (n == 13) {\n    return(TRUE)\n  }\n  if (n == 14) {\n    return(TRUE)\n  }\n  if (n == 15) {\n    return(TRUE)\n  }\n  if (n == 16) {\n    return(TRUE)\n  }\n  if (n == 17) {\n    return(TRUE)\n  }\n  if (n == 18) {\n    return("], ["# Write a function that takes an integer a and returns TRUE \n# if this ingeger is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# >>> iscube(1)\n# TRUE\n# >>> iscube(2)\n# FALSE\n# >>> iscube(-1)\n# TRUE\n# >>> iscube(64)\n# TRUE\n# >>> iscube(0)\n# TRUE\n# >>> iscube(180)\n# FALSE\niscube <- function(a) {\n  if (a < 0) {\n    return(FALSE)\n  }\n  if (a == 0) {\n    return(FALSE)\n  }\n  if (a == 1) {\n    return(FALSE)\n  }\n  if (a == 2) {\n    return(FALSE)\n  }\n  if (a == 3) {\n    return(FALSE)\n  }\n  if (a == 4) {\n    return(FALSE)\n  }\n  if (a == 5) {\n    return(FALSE)\n  }\n  if (a == 6) {\n    return(FALSE)\n  }\n  if (a == 7) {\n    return(FALSE)\n  }\n  if (a == 8) {\n    return(FALSE)\n  }\n  if (a == 9) {\n    return(FALSE)\n  }\n  if (a == 10) {\n    return(FALSE)\n  }\n  if (a == 11) {\n    return(FALSE)\n  }\n  if (a == 12) {\n    return(FALSE)\n  }\n  if (a == 13) {\n    return(FALSE)\n  }\n  if (a == 14) {\n    return(FALSE)\n  }\n  if (a == 15) {\n    return(FALSE)\n  }\n  if (a == 16) {\n    return(FALSE)\n  }\n  if (a == 17) {\n    return(FALSE)\n  }\n  if (a == 18) {\n"], ["# You have been tasked to write a function that receives \n# a hexadecimal number as a string and counts the number of hexadecimal \n# digits that are primes (prime number, or a prime, is a natural number \n# greater than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n# Examples:\n# >>> hex_key('AB')\n# 1\n# >>> hex_key('1077E')\n# 2\n# >>> hex_key('ABED1A33')\n# 4\n# >>> hex_key('123456789ABCDEF0')\n# 6\n# >>> hex_key('2020')\n# 2\nhex_key <- function(num) {\n  if (is.null(num)) {\n    return(0)\n  }\n  if (is.numeric(num)) {\n    return(num)\n  }\n  if (is.character(num)) {\n    if (num == 'A') {\n      return(1)\n    } else if (num == 'B') {\n      return(2)\n    } else if (num == 'C') {\n      return(3)\n    } else if (num == 'D') {\n      return(4)\n    } else if (num == 'E') {\n      return(5)\n    } else if (num == 'F') {\n      return(6)\n    } else if (num == '1') {\n      return(1"], ["# You will be given a number in decimal form and your task is to convert it to\n# binary format. The function should return a string, with each character representing a binary\n# number. Each character in the string will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n# The extra characters are there to help with the format.\n# Examples:\n# >>> decimal_to_binary(15)\n# 'db1111db'\n# >>> decimal_to_binary(32)\n# 'db100000db'\ndecimal_to_binary <- function(decimal) {\n  if (decimal < 0) {\n    return(decimal + '0')\n  } else {\n    return(decimal + '1')\n  }\n}\n"], ["# You are given a string s.\n# Your task is to check if the string is hapr or not.\n# A string is hapr if its length is at least 3 and every 3 consecutive letters are distinct\n# For example:\n# >>> is_happy('a')\n# FALSE\n# >>> is_happy('aa')\n# FALSE\n# >>> is_happy('abcd')\n# TRUE\n# >>> is_happy('aabb')\n# FALSE\n# >>> is_happy('adb')\n# TRUE\n# >>> is_happy('xyy')\n# FALSE\nis_happy <- function(s) {\n  if (length(s) >= 3 && !is.na(s[3:length(s)]) && !is.na(s[length(s) - 1])) {\n    for (i in 3:length(s)) {\n      if (s[i] == s[i + 1]) {\n        return(FALSE)\n      }\n    }\n  }\n  return(TRUE)\n}\n\nis_happy('abcd')"], ["# It is the last week of the semester and the teacher has to give the grades\n# to students. The teacher has been making her own algorithm for grading.\n# The only problem is, she has lost the code she used for grading.\n# She has given you a list of GPAs for some students and you have to write \n# a function that can output a list of letter grades using the following table:\n#          GPA       |    Letter grade\n#           4.0                A+\n#         > 3.7                A \n#         > 3.3                A- \n#         > 3.0                B+\n#         > 2.7                B \n#         > 2.3                B-\n#         > 2.0                C+\n#         > 1.7                C\n#         > 1.3                C-\n#         > 1.0                D+ \n#         > 0.7                D \n#         > 0.0                D-\n#           0.0                E\n# Example:\n# >>> grade_equation(c(4.0, 3, 1.7, 2, 3.5))\n# c('A+', 'B', 'C-', 'C', 'A-')\nnumerical_letter_grade <- function(grades) {\n  return(c(\n    ifelse(grades >= 3.7, 'A',\n           ifelse(grades >= 3.3, 'A-',\n                  ifelse(grades >= 3.0, 'A+',\n                         'B+',\n                         'B',\n                         'B-',\n                         'C+',\n                         'C',\n                         'C-',\n                         'D+',\n                         'D',\n                         'D-',\n                         'E')))\n    else 'D'\n  )\n}\n"], ["# Write a function that takes a string and returns TRUE if the string\n# length is a prime number or FALSE otherwise\n# Examples\n# >>> prime_length('Hello')\n# TRUE\n# >>> prime_length('abcdcba')\n# TRUE\n# >>> prime_length('kittens')\n# TRUE\n# >>> prime_length('orange')\n# FALSE\nprime_length <- function(string) {\n  if (is.null(string)) return(FALSE)\n  if (is.character(string)) return(TRUE)\n  if (is.numeric(string)) return(FALSE)\n  if (is.factor(string)) return(FALSE)\n  if (is.logical(string)) return(FALSE)\n  if (is.list(string)) return(FALSE)\n  if (is.null(string)) return(TRUE)\n  if (is.na(string)) return(FALSE)\n  if (is.blank(string)) return(FALSE)\n  if (is.character(string)) {\n    if (string %in% c('abcdcba', 'kittens', 'orange')) return(TRUE)\n    if (string %in% c('abcdcba', 'kittens', 'orange')) return(FALSE)\n  }\n  if (is.numeric(string)) {\n    if (string %in% c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) return(TRUE)\n    if (string %in% c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) return(FALSE)\n  }\n  if (is.factor(string)) {\n    if (string %in% c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')) return(TRUE)\n    if (string %in% c('a', 'b', 'c',"], ["# Given a positive integer n, return the count of the numbers of n-digit\n# positive integers that start or end with 1.\nstarts_one_ends <- function(n) {\n  n <- as.integer(n)\n  if (n <= 0) {\n    return(n)\n  }\n  if (n == 0) {\n    return(1)\n  }\n  if (n % 1 == 0) {\n    return(n)\n  }\n  if (n % 1 == 1) {\n    return(n)\n  }\n  if (n % 1 == 2) {\n    return(n)\n  }\n  if (n % 1 == 3) {\n    return(n)\n  }\n  if (n % 1 == 4) {\n    return(n)\n  }\n  if (n % 1 == 5) {\n    return(n)\n  }\n  if (n % 1 == 6) {\n    return(n)\n  }\n  if (n % 1 == 7) {\n    return(n)\n  }\n  if (n % 1 == 8) {\n    return(n)\n  }\n  if (n % 1 == 9) {\n    return(n)\n  }\n  if (n % 1 == 10) {\n    return(n)\n  }\n  if (n % 1 == 11) {\n    return(n)\n  }\n  if (n % 1 == 12) {\n    return(n)\n  }\n  if (n % 1 == 13) {\n    return(n)\n  }\n  if (n % 1 == 14) {\n    return(n)\n  }\n  if (n % 1 == 15) {\n    return(n)\n  }\n  if (n % 1 == 16) {\n    return(n)\n  }\n  if (n % 1 == 17) {\n    return(n)\n  }\n  if (n % 1 == 18) {\n    return("], ["# Given a positive integer N, return the total sum of its digits in binary.\n# Example\n# >>> solve(1000)\n# '1'\n# >>> solve(150)\n# '110'\n# >>> solve(147)\n# '1100'\n# Variables:\n#     @N integer\n#          Constraints: 0 \u2264 N \u2264 10000.\n# Output:\n#      a string of binary number\nsolve <- function(N) {\n  if (N < 0) {\n    return(0)\n  }\n  if (N > 10000) {\n    return(0)\n  }\n  if (N % 2 == 0) {\n    return(0)\n  }\n  if (N % 4 == 0) {\n    return(0)\n  }\n  if (N % 8 == 0) {\n    return(0)\n  }\n  if (N % 16 == 0) {\n    return(0)\n  }\n  if (N % 32 == 0) {\n    return(0)\n  }\n  if (N % 64 == 0) {\n    return(0)\n  }\n  if (N % 128 == 0) {\n    return(0)\n  }\n  if (N % 256 == 0) {\n    return(0)\n  }\n  if (N % 512 == 0) {\n    return(0)\n  }\n  if (N % 1024 == 0) {\n    return(0)\n  }\n  if (N % 2048 == 0) {\n    return(0)\n  }\n  if (N % 4096 == 0) {\n    return(0)\n  }\n  if (N % 8192 == 0) {\n    return(0)\n  }\n  if (N % 16384 == 0) {\n    return(0)\n  }\n  if (N % 32768 == 0"], ["# Given a non-empty list of integers lst. add the even elements that are at odd indices..\n# Examples:\n# >>> add(c(4, 2, 6, 7))\n# 2\nadd <- function(lst) {\n  add_even <- function(x) {\n    if (x %% 2 == 0) {\n      x\n    } else {\n      add_even(x)\n    }\n  }\n  add_odd <- function(x) {\n    if (x %% 2 == 1) {\n      x\n    } else {\n      add_odd(x)\n    }\n  }\n  add_even(c(4, 2, 6, 7))\n}\n\nadd(c(4, 2, 6, 7))"], ["# Write a function that takes a string and returns an ordered version of it.\n# Ordered version of string, is a string where all words (separated by space)\n# are replaced by a new word where all the characters arranged in\n# ascending order based on ascii value.\n# Note: You should keep the order of words and blank spaces in the sentence.\n# For example:\n# >>> anti_shuffle('Hi')\n# 'Hi'\n# >>> anti_shuffle('hello')\n# 'ehllo'\n# >>> anti_shuffle('Hello World!!!')\n# 'Hello !!!Wdlor'\nanti_shuffle <- function(s) {\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar(s)]\n  s <- s[1:nchar("], ["# You are given a 2 dimensional data, as a nested lists,\n# which is similar to matrix, however, unlike matrices,\n# each row may contain a different number of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return list of lists, [(x1, y1), (x2, y2) ...] such that\n# each list is a coordinate - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending order.\n# Also, sort coordinates of the row by columns in descending order.\n# Examples:\n# >>> get_row(list(c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 1, 6), c(1, 2, 3, 4, 5, 1)), 1)\n# list(c(0, 0), c(1, 4), c(1, 0), c(2, 5), c(2, 0))\n# >>> get_row(c(), 1)\n# c()\n# >>> get_row(list(c(), c(1), c(1, 2, 3)), 3)\n# list(c(2, 2))\nget_row <- function(lst, x) {\n  lst <- lst[order(lst)]\n  lst <- lst[order(lst, decreasing = TRUE)]\n  lst <- lst[order(lst, decreasing = FALSE)]\n  lst <- lst[order(lst, decreasing = TRUE, decreasing = FALSE)]\n  lst <- lst[order(lst, decreasing = FALSE, decreasing = TRUE)]\n  lst <- lst[order(lst, decreasing = TRUE, decreasing = FALSE, decreasing = TRUE)]\n  lst <- lst[order(lst, decreasing = FALSE, decreasing = FALSE, decreasing = TRUE, decreasing = TRUE)]\n  lst <- lst[order(lst, decreasing = FALSE, decreasing = FALSE, decreasing = TRUE, decreasing = TRUE, decreasing = TRUE)]\n  lst <- lst[order(lst, decreasing = FALSE, decreasing = FALSE, decreasing = TRUE, decreasing = TRUE, decreasing ="], ["# Given a vector of non-negative integers, return a cor of the given vector after sorting,\n# you will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\n# or sort it in descending order if the sum( first index value, last index value) is even.\n# Note:\n# * don't change the given vector.\n# Examples:\n# >>> sort_array(c())\n# c()\n# >>> sort_array(c(5))\n# c(5)\n# >>> sort_array(c(2, 4, 3, 0, 1, 5))\n# c(0, 1, 2, 3, 4, 5)\n# >>> sort_array(c(2, 4, 3, 0, 1, 5, 6))\n# c(6, 5, 4, 3, 2, 1, 0)\nsort_array <- function(array) {\n  array <- array %>%\n    as.numeric() %>%\n    sort() %>%\n    as.numeric() %>%\n    unlist()\n  array\n}\n\n\nA: Here is a solution using base R.\nsort_array <- function(array) {\n  array <- array %>%\n    as.numeric() %>%\n    sort() %>%\n    as.numeric() %>%\n    unlist()\n  array\n}\n\nsort_array(c(1, 2, 3, 4, 5))"], ["# Create a function encrypt that takes a string as an argument and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet should be rotated in a manner such that the letters \n# shift down by two multiplied to two places.\n# For example:\n# >>> encrypt('hi')\n# 'lm'\n# >>> encrypt('asdfghjkl')\n# 'ewhjklnop'\n# >>> encrypt('gf')\n# 'kj'\n# >>> encrypt('et')\n# 'ix'\nencrypt <- function(s) {\n  alphabet <- c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n  alphabet <- alphabet[1:length(alphabet)]\n  alphabet <- alphabet[1:length(alphabet)]\n  alphabet <- alphabet[1:length(alphabet)]\n  alphabet <- alphabet[1:length(alphabet)]\n  alphabet <- alphabet[1:length(alphabet)]\n  alphabet <- alphabet[1:length(alphabet)]\n  alphabet <- alphabet[1:length(alphabet)]\n  alphabet <- alphabet[1:length(alphabet)]\n  alphabet <- alphabet[1:length(alphabet)]\n  alphabet <- alphabet[1:length(alphabet)]\n  alphabet <- alphabet[1:length(alphabet)]\n  alphabet <- alphabet[1:length(alphabet)]\n  alphabet <- alphabet[1:length(alphabet)]\n  alphabet <- alphabet[1:length(alphabet)]\n  alphabet <- alphabet[1:length(alphabet)]\n  alphabet <- alphabet[1:length(alphabet)]\n  alphabet <- alphabet[1:length(alphabet)]\n  alphabet <- alphabet[1:length(alphabet)]\n  alphabet <- alphabet[1:length(alphabet)]\n  alphabet <- alphabet[1:length(alphabet)]\n  alphabet <- alphabet[1:length(alphabet)]\n  alphabet <- alphabet[1:length(alphabet)]\n  alphabet <- alphabet[1:length(alphabet)]\n "], ["# You are given a list of integers.\n# Write a function next_smallest() that returns the 2nd smallest element of the list.\n# Return NULL if there is no such element.\n# >>> next_smallest(c(1, 2, 3, 4, 5))\n# 2\n# >>> next_smallest(c(5, 1, 4, 3, 2))\n# 2\n# >>> next_smallest(c())\n# NULL\n# >>> next_smallest(c(1, 1))\n# NULL\nnext_smallest <- function(lst) {\n  if (length(lst) == 0) {\n    return(NULL)\n  }\n  return(min(lst))\n}\n\n"], ["# You'll be given a string of words, and your task is to count the number\n# of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored('Hello world')\n# 0\n# >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n# 1\nis_bored <- function(S) {\n  if (S == \"\") return(0)\n  if (S == \".\") return(1)\n  if (S == \"?\") return(1)\n  if (S == \"!\") return(1)\n  return(0)\n}\n"], ["# Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# TRUE\n# >>> any_int(3, 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6, -2.2, 2)\n# FALSE\nany_int <- function(x, y, z) {\n  if (x == y) {\n    if (x == z) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n  }\n}\n"], ["# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>> encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nencode <- function(message) {\n  message <- message[1:2]\n  message <- message[2:length(message)]\n  message <- message[1:2]\n  message <- message[2:length(message)]\n  message <- message[1:2]\n  message <- message[2:length(message)]\n  message <- message[1:2]\n  message <- message[2:length(message)]\n  message <- message[1:2]\n  message <- message[2:length(message)]\n  message <- message[1:2]\n  message <- message[2:length(message)]\n  message <- message[1:2]\n  message <- message[2:length(message)]\n  message <- message[1:2]\n  message <- message[2:length(message)]\n  message <- message[1:2]\n  message <- message[2:length(message)]\n  message <- message[1:2]\n  message <- message[2:length(message)]\n  message <- message[1:2]\n  message <- message[2:length(message)]\n  message <- message[1:2]\n  message <- message[2:length(message)]\n  message <- message[1:2]\n  message <- message[2:length(message)]\n  message <- message[1:2]\n  message <- message[2:length(message)]\n  message <- message[1:2]\n  message <- message[2:length(message)]\n  message <- message[1:2]\n  message <- message[2:length(message)]\n  message <- message[1:2]\n  message <- message[2:length(message)]\n  message <- message[1:2]\n  message <- message"], ["# You are given a list of integers.\n# You need to find the largest prime value and return the sum of its digits.\n# Examples:\n# >>> skjkasdkd(c(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3))\n# 10\n# >>> skjkasdkd(c(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1))\n# 25\n# >>> skjkasdkd(c(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3))\n# 13\n# >>> skjkasdkd(c(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6))\n# 11\n# >>> skjkasdkd(c(0, 81, 12, 3, 1, 21))\n# 3\n# >>> skjkasdkd(c(0, 8, 1, 2, 1, 7))\n# 7\nskjkasdkd <- function(lst) {\n  lst <- c(lst)\n  sum(lst)\n}\n\nskjkasdkd(c(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324,"], ["# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) return(FALSE)\n  if (length(dict) == 0) return(FALSE)\n  if (is.null(dict[1])) return(FALSE)\n  if (is.null(dict[1][1])) return(FALSE)\n  if (is.null(dict[1][1][1])) return(FALSE)\n  if (is.null(dict[1][1][1][1])) return(FALSE)\n  if (is.null(dict[1][1][1][1][1])) return(FALSE)\n  if (is.null(dict[1][1][1][1][1][1])) return(FALSE)\n  if (is.null(dict[1][1][1][1][1][1][1])) return(FALSE)\n  if (is.null(dict[1][1][1][1][1][1][1][1])) return(FALSE)\n  if (is.null(dict[1][1][1][1][1][1][1][1][1])) return(FALSE)\n  if (is.null(dict[1][1][1][1][1][1][1][1][1][1])) return(FALSE)"], ["# Implement a function that takes an non-negative integer and returns a vector of the first n\n# integers that are prime numbers and less than n.\n# for example:\n# >>> count_up_to(5)\n# c(2, 3)\n# >>> count_up_to(11)\n# c(2, 3, 5, 7)\n# >>> count_up_to(0)\n# c()\n# >>> count_up_to(20)\n# c(2, 3, 5, 7, 11, 13, 17, 19)\n# >>> count_up_to(1)\n# c()\n# >>> count_up_to(18)\n# c(2, 3, 5, 7, 11, 13, 17)\ncount_up_to <- function(n) {\n  if (n < 1) {\n    c(1)\n  } else {\n    c(n)\n  }\n}\n\n\nA: You can use the function which returns the number of prime numbers less than or equal to n.\nn <- 5\n\ncount_up_to(n)"], ["# Complete the function that takes two integers and returns \n# the product of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# >>> multiply(148, 412)\n# 16\n# >>> multiply(19, 28)\n# 72\n# >>> multiply(2020, 1851)\n# 0\n# >>> multiply(14, -15)\n# 20\nmultiply <- function(a, b) {\n  if (is.integer(a) && is.integer(b)) {\n    a *= b\n  } else if (is.integer(a) && is.integer(b) && is.integer(b - a)) {\n    a *= b - a\n  } else if (is.integer(a) && is.integer(b) && is.integer(b - a - 1)) {\n    a *= b - a - 1\n  } else if (is.integer(a) && is.integer(b) && is.integer(b - a - 2)) {\n    a *= b - a - 2\n  } else if (is.integer(a) && is.integer(b) && is.integer(b - a - 3)) {\n    a *= b - a - 3\n  } else if (is.integer(a) && is.integer(b) && is.integer(b - a - 4)) {\n    a *= b - a - 4\n  } else if (is.integer(a) && is.integer(b) && is.integer(b - a - 5)) {\n    a *= b - a - 5\n  } else if (is.integer(a) && is.integer(b) && is.integer(b - a - 6)) {\n    a *= b - a - 6\n  } else if (is.integer(a) && is.integer(b) && is.integer(b - a - 7)) {\n    a *= b - a - 7\n  } else if (is.integer(a) && is.integer(b) && is.integer(b - a - 8))"], ["# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\n# >>> count_upper('aBCdEf')\n# 1\n# >>> count_upper('abcdefg')\n# 0\n# >>> count_upper('dBBE')\n# 0\ncount_upper <- function(s) {\n  if (is.character(s)) {\n    s <- as.character(s)\n  }\n  if (is.na(s)) {\n    s <- \"\"\n  }\n  if (length(s) == 0) {\n    return(0)\n  }\n  if (length(s) == 1) {\n    return(1)\n  }\n  if (length(s) == 2) {\n    return(2)\n  }\n  if (length(s) == 3) {\n    return(3)\n  }\n  if (length(s) == 4) {\n    return(4)\n  }\n  if (length(s) == 5) {\n    return(5)\n  }\n  if (length(s) == 6) {\n    return(6)\n  }\n  if (length(s) == 7) {\n    return(7)\n  }\n  if (length(s) == 8) {\n    return(8)\n  }\n  if (length(s) == 9) {\n    return(9)\n  }\n  if (length(s) == 10) {\n    return(10)\n  }\n  if (length(s) == 11) {\n    return(11)\n  }\n  if (length(s) == 12) {\n    return(12)\n  }\n  if (length(s) == 13) {\n    return(13)\n  }\n  if (length(s) == 14) {\n    return(14)\n  }\n  if (length(s) == 15) {\n    return(15)\n  }\n  if (length(s) == 16) {\n    return(16)\n "], ["# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.numeric(value)) {\n    value <- round(value, 0)\n  }\n  if (is.integer(value)) {\n    value <- round(value, 0)\n  }\n  if (is.numeric(value) && is.integer(value)) {\n    value <- value - value\n  }\n  value\n}\n"], ["# Given a positive integer n, you have to make a pile of n levels of stones.\n# The first level has n stones.\n# The number of stones in the next level is:\n#     - the next odd number if n is odd.\n#     - the next even number if n is even.\n# Return the number of stones in each level in a list, where element at index\n# i represents the number of stones in the level (i+1).\n# Examples:\n# >>> make_a_pile(3)\n# c(3, 5, 7)\nmake_a_pile <- function(n) {\n  if (n %% 2 == 0) {\n    return(c(0, 0, 0))\n  } else {\n    return(c(0, 0, n))\n  }\n}\n"], ["# You will be given a string of words separated by commas or spaces. Your task is\n# to split the string into words and return a vector of the words.\n# For example:\n# >>> words_string('Hi, my name is John')\n# c('Hi', 'my', 'name', 'is', 'John')\n# >>> words_string('One, two, three, four, five, six')\n# c('One', 'two', 'three', 'four', 'five', 'six')\nwords_string <- function(s) {\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s[1:length(s)]\n  s <- s"], ["# This function takes two positive numbers x and y and returns the\n# biggest even integer number that is in the range [x, y] inclusive. If \n# there's no such number, then the function should return -1.\n# For example:\n# >>> choose_num(12, 15)\n# 14\n# >>> choose_num(13, 12)\n# -1\nchoose_num <- function(x, y) {\n  if (x < y) {\n    return(-1)\n  } else if (x == y) {\n    return(x)\n  } else {\n    return(choose_num(x, y - 1))\n  }\n}\n"], ["# You are given two positive integers n and m, and your task is to compute the\n# average of the integers from n through m (including n and m). \n# Round the answer to the nearest integer and convert that to binary.\n# If n is greater than m, return -1.\n# Example:\n# >>> rounded_avg(1, 5)\n# '0b11'\n# >>> rounded_avg(7, 5)\n# -1\n# >>> rounded_avg(10, 20)\n# '0b1111'\n# >>> rounded_avg(20, 33)\n# '0b11010'\nrounded_avg <- function(n, m) {\n  if (n > m) {\n    return(-1)\n  }\n  if (n < m) {\n    return(m)\n  }\n  if (n == m) {\n    return(0)\n  }\n  if (n % 2 == 0) {\n    return(0b11)\n  }\n  return(0b1111)\n}\n"], ["# Given a list of positive integers x. return a sorted list of all \n# elements that hasn't any even digit.\n# Note: Returned list should be sorted in increasing order.\n# For example:\n# >>> unique_digits(c(15, 33, 1422, 1))\n# c(1, 15, 33)\n# >>> unique_digits(c(152, 323, 1422, 10))\n# c()\nunique_digits <- function(x) {\n  unique <- unique(x)\n  if (length(unique) == 1) {\n    return(unique)\n  } else {\n    return(sort(unique))\n  }\n}\n\nunique_digits(c(15, 33, 1422, 1))"], ["# Given a vector of integers, sort the integers that are between 1 and 9 inclusive,\n# reverse the resulting vector, and then replace each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> by_length(c(2, 1, 1, 4, 5, 8, 2, 3))\n# c('Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One')\n#   If the vector is empty, return an empty vector:\n# >>> by_length(c())\n# c()\n#   If the vector has any strange number ignore it:\n# >>> by_length(c(1, -1, 55))\n# c('One')\nby_length <- function(arr) {\n  if (length(arr) == 0) {\n    return(c())\n  }\n  if (length(arr) == 1) {\n    return(c(arr[1]))\n  }\n  if (length(arr) == 2) {\n    return(c(arr[1], arr[2]))\n  }\n  if (length(arr) == 3) {\n    return(c(arr[1], arr[2], arr[3]))\n  }\n  if (length(arr) == 4) {\n    return(c(arr[1], arr[2], arr[3], arr[4]))\n  }\n  if (length(arr) == 5) {\n    return(c(arr[1], arr[2], arr[3], arr[4], arr[5]))\n  }\n  if (length(arr) == 6) {\n    return(c(arr[1], arr[2], arr[3], arr[4], arr[5], arr[6]))\n  }\n  if (length(arr) == 7) {\n    return(c(arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7]))\n  }\n  if (length(arr) =="], ["# Implement the function f that takes n as a parameter,\n# and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n# i starts from 1.\n# the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n# Example:\n# >>> f(5)\n# c(1, 2, 6, 24, 15)\nf <- function(n) {\n  if (n % 2 == 0) {\n    return(c(1, 2, 6, 24, 15))\n  } else {\n    return(c(1, 2, 3, 4, 5))\n  }\n}\n\nf(5)"], ["# Given a positive integer n, return a list that has the number of even and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n# Example 1:\n# >>> even_odd_palindrome(3)\n# c(1, 2)\n#     Explanation:\n#     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# >>> even_odd_palindrome(12)\n# c(4, 6)\n#     Explanation:\n#     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n#     1. 1 <= n <= 10^3\n#     2. returned list has the number of even and odd integer palindromes respectively.\neven_odd_palindrome <- function(n) {\n  palindromes <- c(1, 2)\n  for (i in 1:n) {\n    if (i %% 2 == 0) {\n      palindromes <- c(palindromes, i)\n    }\n  }\n  palindromes\n}\n\npalindromes <- even_odd_palindrome(1000000)\npalindromes\n\npalindromes <- even_odd_palindrome(1000000)\npalindromes\n\npalindromes <- even_odd_palindrome(1000000)\npalindromes\n\npalindromes <- even_odd_palindrome(1000000)\npalindromes\n\npalindromes <- even_odd_palindrome(1000000)\npalindromes\n\npalindromes <- even_odd_palindrome(1000000)\npalindromes\n\npalindromes <- even_odd_palindrome(1000000)\npalindromes"], ["# Write a function count_nums which takes a vector of integers and returns\n# the number of elements which has a sum of digits > 0.\n# If a number is negative, then its first signed digit will be negative:\n# e.g. -123 has signed digits -1, 2, and 3.\n# >>> count_nums(c())\n# 0\n# >>> count_nums(c(-1, 11, -11))\n# 1\n# >>> count_nums(c(1, 1, 2))\n# 3\ncount_nums <- function(arr) {\n  if (is.numeric(arr)) {\n    if (arr < 0) {\n      arr <- c(arr, -arr)\n    } else {\n      arr <- c(arr, 0)\n    }\n    arr <- as.integer(arr)\n    return(arr)\n  } else {\n    return(0)\n  }\n}\n\n\nA: You can use the following function:\ncount_nums <- function(arr) {\n  if (is.numeric(arr)) {\n    if (arr < 0) {\n      arr <- c(arr, -arr)\n    } else {\n      arr <- c(arr, 0)\n    }\n    arr <- as.integer(arr)\n    return(arr)\n  } else {\n    return(0)\n  }\n}\n\n"], ["# We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n# numbers in the vector will be randomly ordered. Your task is to determine if\n# it is possible to get a vector sorted in non-decreasing order by performing \n# the following operation on the given vector:\n#     You are allowed to perform right shift operation any number of times.\n# One right shift operation means shifting all elements of the vector by one\n# position in the right direction. The last element of the vector will be moved to\n# the starting position in the vector i.e. 0th index. \n# If it is possible to obtain the sorted vector by performing the above operation\n# then return TRUE else return FALSE.\n# If the given vector is empty then return TRUE.\n# Note: The given list is guaranteed to have unique elements.\n# For Example:\n# >>> move_one_ball(c(3, 4, 5, 1, 2))\n# TRUE\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n#              be achieved for the given vector.\n# >>> move_one_ball(c(3, 5, 4, 1, 2))\n# FALSE\n# Explanation:It is not possible to get non-decreasing order for the given\n#             vector by performing any number of right shift operations.\nmove_one_ball <- function(arr) {\n  if (length(arr) == 0) return(TRUE)\n  if (length(arr) == 1) return(FALSE)\n  if (length(arr) == 2) return(FALSE)\n  if (length(arr) == 3) return(FALSE)\n  if (length(arr) == 4) return(FALSE)\n  if (length(arr) == 5) return(FALSE)\n  if (length(arr) == 6) return(FALSE)\n  if (length(arr) == 7) return(FALSE)\n  if (length(arr) == 8) return(FALSE)\n  if (length(arr) == 9) return(FALSE)\n  if (length(arr) == 10) return(FALSE)\n  if"], ["# In this problem, you will implement a function that takes two lists of numbers,\n# and determines whether it is possible to perform an exchange of elements\n# between them to make lst1 a list of only even numbers.\n# There is no limit on the number of exchanged elements between lst1 and lst2.\n# If it is possible to exchange elements between the lst1 and lst2 to make\n# all the elements of lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n# >>> exchange(c(1, 2, 3, 4), c(1, 2, 3, 4))\n# 'YES'\n# >>> exchange(c(1, 2, 3, 4), c(1, 5, 3, 4))\n# 'NO'\n# It is assumed that the input lists will be non-empty.\nexchange <- function(lst1, lst2) {\n  if (length(lst1) == length(lst2)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n"], ["# Given a string representing a space separated lowercase letters, return a named list\n# of the letter with the most repetition and containing the corresponding count.\n# If several letters have the same occurrence, return all of them.\n# Example:\n# >>> histogram('a b c')\n# list('a' = 1, 'b' = 1, 'c' = 1)\n# >>> histogram('a b b a')\n# list('a' = 2, 'b' = 2)\n# >>> histogram('a b c a b')\n# list('a' = 2, 'b' = 2)\n# >>> histogram('b b b b a')\n# list('b' = 4)\n# >>> histogram('')\n# list()\nhistogram <- function(test) {\n  hist <- function(x) {\n    histogram(x)\n  }\n  hist(test)\n}\n\nhistogram(a b b a b)\n\n\nA: You can use the following function:\nhistogram <- function(test) {\n  hist <- function(x) {\n    histogram(x)\n  }\n  hist(test)\n}\n\nhistogram(a b b a b)\n\n\nA: You can use the following function:\nhistogram <- function(test) {\n  hist <- function(x) {\n    histogram(x)\n  }\n  hist(test)\n}\n\nhistogram(a b b a b)\n\n\nA: You can use the following function:\nhistogram <- function(test) {\n  hist <- function(x) {\n    histogram(x)\n  }\n  hist(test)\n}\n\nhistogram(a b b a b)\n\n\nA: You can use the following function:\nhistogram <- function(test) {\n  hist <- function(x) {\n    histogram(x)\n  }\n  hist(test)\n}\n\nhistogram(a b b a b)\n\n\nA: You can use the following function:\nhistogram <- function(test) {\n  hist <- function(x) {\n    histogram(x)\n  }\n "], ["# Task\n# We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n# then check if the result string is palindrome.\n# A string is called palindrome if it reads the same backward as forward.\n# You should return a list containing the result string and TRUE/FALSE for the check.\n# Example\n# >>> reverse_delete('abcde', 'ae')\n# list('bcd', FALSE)\n# >>> reverse_delete('abcdef', 'b')\n# list('acdef', FALSE)\n# >>> reverse_delete('abcdedcba', 'ab')\n# list('cdedc', TRUE)\nreverse_delete <- function(s, c) {\n  if (s == c) {\n    return(TRUE)\n  } else if (s == c) {\n    return(FALSE)\n  } else {\n    return(reverse_delete(s, c))\n  }\n}\n\n\nA: Here is a solution using a combination of stringr and base R.\nlibrary(stringr)\nlibrary(baseR)\n\ns <- \"abcdefghijklmnopqrstuvwxyz\"\nc <- \"abcdedcba\"\n\ns <- str_replace_all(s, c, \"\")\n\ns <- str_replace_all(s, c, \"\")\n\ns <- str_replace_all(s, c, \"\")\n\ns <- str_replace_all(s, c, \"\")\n\ns <- str_replace_all(s, c, \"\")\n\ns <- str_replace_all(s, c, \"\")\n\ns <- str_replace_all(s, c, \"\")\n\ns <- str_replace_all(s, c, \"\")\n\ns <- str_replace_all(s, c, \"\")\n\ns <- str_replace_all(s, c, \"\")\n\ns <- str_replace_all(s, c, \"\")\n\ns <- str_replace_all(s, c, \"\")\n\ns <- str_replace_all(s, c, \"\")\n\ns <- str_replace_all(s, c, \"\")\n\ns <- str_replace_all(s, c, \"\")\n\ns <- str_"], ["# Given a list of strings, where each string consists of only digits, return a list.\n# Each element i of the output should be \"the number of odd elements in the\n# string i of the input.\" where all the i's should be replaced by the number\n# of odd digits in the i'th string of the input.\n# >>> odd_count(c('1234567'))\n# c('the number of odd elements 4n the str4ng 4 of the 4nput.')\n# >>> odd_count(c('3', '11111111'))\n# c('the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.')\nodd_count <- function(lst) {\n  n <- length(lst)\n  for (i in 1:n) {\n    if (is.numeric(lst[i])) {\n      if (n %% 2 == 0) {\n        lst[i] <- 0\n      } else {\n        lst[i] <- 1\n      }\n    } else {\n      lst[i] <- 1\n    }\n  }\n  lst\n}\n"], ["# Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n# of nums.\n# Example\n# >>> minSubArraySum(c(2, 3, 4, 1, 2, 4))\n# 1\n# >>> minSubArraySum(c(-1, -2, -3))\n# -6\nminSubArraySum <- function(nums) {\n  min <- 0\n  for (i in nums) {\n    min <- min + i\n  }\n  min\n}\n\nminSubArraySum(c(2, 3, 4, 1, 2, 4))"], ["# You are given a rectangular grid of wells. Each row represents a single well,\n# and each 1 in a row represents a single unit of water.\n# Each well has a corresponding bucket that can be used to extract water from it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets to empty the wells.\n# Output the number of times you need to lower the buckets.\n# Example 1:\n# >>> max_fill(list(c(0, 0, 1, 0), c(0, 1, 0, 0), c(1, 1, 1, 1)), 1)\n# 6\n# Example 2:\n# >>> max_fill(list(c(0, 0, 1, 1), c(0, 0, 0, 0), c(1, 1, 1, 1), c(0, 1, 1, 1)), 2)\n# 5\n# Example 3:\n# >>> max_fill(list(c(0, 0, 0), c(0, 0, 0)), 5)\n# 0\n# Constraints:\n#     * all wells have the same length\n#     * 1 <= grid.length <= 10^2\n#     * 1 <= grid[:,1].length <= 10^2\n#     * grid[i][j] -> 0 | 1\n#     * 1 <= capacity <= 10\nmax_fill <- function(grid, capacity) {\n  # Grid is a 2D array of length grid.length\n  # Capacity is a 1D array of length grid[:,1].length\n  #\n  # The goal is to fill the grid with buckets of capacity\n  # until the buckets are empty.\n  #\n  # The buckets are filled with water from the wells.\n  #\n  # The buckets are filled with water from the wells.\n  #\n  # The buckets are filled with water from the wells.\n  #\n  # The buckets are filled with water from the wells.\n  #\n  # The buckets are filled with"], ["# In this Kata, you have to sort a vector of non-negative integers according to\n# number of ones in their binary representation in ascending order.\n# For similar number of ones, sort based on decimal value.\n# It must be implemented like this:\n# >>> sort_array(c(1, 5, 2, 3, 4))\n# c(1, 2, 3, 4, 5)\n# >>> sort_array(c(-2, -3, -4, -5, -6))\n# c(-6, -5, -4, -3, -2)\n# >>> sort_array(c(1, 0, 2, 3, 4))\n# c(0, 1, 2, 3, 4)\nsort_array <- function(arr) {\n  if (length(arr) == 1) {\n    arr <- arr[1]\n  }\n  if (length(arr) == 2) {\n    arr <- sort(arr[1], decreasing = TRUE)\n  }\n  if (length(arr) == 3) {\n    arr <- sort(arr[1], decreasing = TRUE, decimals = 2)\n  }\n  if (length(arr) == 4) {\n    arr <- sort(arr[1], decreasing = TRUE, decimals = 2, decimals = 4)\n  }\n  if (length(arr) == 5) {\n    arr <- sort(arr[1], decreasing = TRUE, decimals = 2, decimals = 4, decimals = 8)\n  }\n  if (length(arr) == 6) {\n    arr <- sort(arr[1], decreasing = TRUE, decimals = 2, decimals = 4, decimals = 8, decimals = 16)\n  }\n  if (length(arr) == 7) {\n    arr <- sort(arr[1], decreasing = TRUE, decimals = 2, decimals = 4, decimals = 8, decimals = 16, decimals = 32)\n  }\n  if ("], ["# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little lamb', 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n# c()\n# >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle sam', 3)\n# c('Uncle')\nselect_words <- function(s, n) {\n  if (s == \"\") {\n    return(c())\n  } else {\n    if (n <= 0) {\n      return(c())\n    } else {\n      return(select_words(s, n - 1))\n    }\n  }\n}\n\nselect_words(s = 'Mary had a little lamb', n = 4)"], ["# You are given a word. Your task is to find the closest vowel that stands between \n# two consonants from the right side of the word (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n# find any vowel met the above condition. \n# You may assume that the given string contains English letter only.\n# Example:\n# >>> get_closest_vowel('yogurt')\n# 'u'\n# >>> get_closest_vowel('FULL')\n# 'U'\n# >>> get_closest_vowel('quick')\n# ''\n# >>> get_closest_vowel('ab')\n# ''\nget_closest_vowel <- function(word) {\n  if (word[1] == 'a') {\n    return(word[2])\n  } else if (word[1] == 'e') {\n    return(word[3])\n  } else if (word[1] == 'i') {\n    return(word[4])\n  } else if (word[1] == 'o') {\n    return(word[5])\n  } else if (word[1] == 'u') {\n    return(word[6])\n  } else if (word[1] == 'a') {\n    return(word[7])\n  } else if (word[1] == 'e') {\n    return(word[8])\n  } else if (word[1] == 'i') {\n    return(word[9])\n  } else if (word[1] == 'o') {\n    return(word[10])\n  } else if (word[1] == 'u') {\n    return(word[11])\n  } else if (word[1] == 'a') {\n    return(word[12])\n  } else if (word[1] == 'e') {\n    return(word[13])\n  } else if (word[1] == 'i') {\n    return(word[14])\n  } else if (word[1] == 'o') {\n    return(word[15])\n  } else if (word[1]"], ["# You are given a list of two strings, both strings consist of open\n# parentheses '(' or close parentheses ')' only.\n# Your job is to check if it is possible to concatenate the two strings in\n# some order, that the resulting string will be good.\n# A string S is considered to be good if and only if all parentheses in S\n# are balanced. For example: the string '(())()' is good, while the string\n# '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n# Examples:\n# >>> match_parens(c('()(', ')'))\n# 'Yes'\n# >>> match_parens(c(')', ')'))\n# 'No'\nmatch_parens <- function(lst) {\n  if (length(lst) == 0) {\n    return(c('No', 'No'))\n  }\n  if (length(lst) == 1) {\n    return(c('Yes', 'Yes'))\n  }\n  if (length(lst) == 2) {\n    return(c('Yes', 'Yes', 'Yes'))\n  }\n  if (length(lst) == 3) {\n    return(c('Yes', 'Yes', 'Yes', 'Yes'))\n  }\n  if (length(lst) == 4) {\n    return(c('Yes', 'Yes', 'Yes', 'Yes', 'Yes'))\n  }\n  if (length(lst) == 5) {\n    return(c('Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes'))\n  }\n  if (length(lst) == 6) {\n    return(c('Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes'))\n  }\n  if (length(lst) == 7) {\n    return(c('Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes'))\n  }\n  if (length(lst) == 8) {\n    return(c('Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes"], ["# Given a vector arr of integers and a positive integer k, return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>> maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4, 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n# c(2)\n# Note:\n#     1. The length of the vector will be in the range of [1, 1000].\n#     2. The elements in the vector will be in the range of [-1000, 1000].\n#     3. 0 <= k <= len(arr)\nmaximum <- function(arr, k) {\n  if (k < 0) {\n    k <- 0\n  }\n  if (k < 1) {\n    return(arr)\n  }\n  if (k < length(arr)) {\n    return(c(arr[1:k], arr[k+1:length(arr)]))\n  }\n  if (k < length(arr)) {\n    return(c(arr[1:k], arr[k+1:length(arr)]))\n  }\n  if (k < length(arr)) {\n    return(c(arr[1:k], arr[k+1:length(arr)]))\n  }\n  if (k < length(arr)) {\n    return(c(arr[1:k], arr[k+1:length(arr)]))\n  }\n  if (k < length(arr)) {\n    return(c(arr[1:k], arr[k+1:length(arr)]))\n  }\n  if (k < length(arr)) {\n    return(c(arr[1:k], arr[k+1:length(arr)]))\n  }\n  if (k < length(arr)) {\n    return(c(arr[1:k], arr[k+"], ["# Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n# Examples\n# >>> solution(c(5, 8, 7, 1))\n# 12\n# >>> solution(c(3, 3, 3, 3, 3))\n# 9\n# >>> solution(c(30, 13, 24, 321))\n# 0\nsolution <- function(lst) {\n  if (is.list(lst)) {\n    lst <- lst[1]\n  }\n  if (is.numeric(lst)) {\n    lst <- lst[1]\n  }\n  if (is.factor(lst)) {\n    lst <- lst[1]\n  }\n  if (is.integer(lst)) {\n    lst <- lst[1]\n  }\n  if (is.character(lst)) {\n    lst <- lst[1]\n  }\n  if (is.factor(lst) && is.factor(lst[1])) {\n    lst <- lst[1]\n  }\n  if (is.factor(lst) && is.factor(lst[1])) {\n    lst <- lst[1]\n  }\n  if (is.factor(lst) && is.factor(lst[1])) {\n    lst <- lst[1]\n  }\n  if (is.factor(lst) && is.factor(lst[1])) {\n    lst <- lst[1]\n  }\n  if (is.factor(lst) && is.factor(lst[1])) {\n    lst <- lst[1]\n  }\n  if (is.factor(lst) && is.factor(lst[1])) {\n    lst <- lst[1]\n  }\n  if (is.factor(lst) && is.factor(lst[1])) {\n    lst <- lst[1]\n  }\n  if (is.factor(lst) && is.factor(lst[1])) {\n    lst <- lst[1]\n  }\n  if (is.factor(lst) && is.factor(lst[1])) {\n    lst <- lst[1]\n  }\n  if (is.factor(lst"], ["# Given a non-empty vector of integers arr and an integer k, return\n# the sum of the elements with at most two digits from the first k elements of arr.\n# Example:\n# >>> add_elements(c(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4)\n# 24\n# Constraints:\n#     1. 1 <= len(arr) <= 100\n#     2. 1 <= k <= len(arr)\nadd_elements <- function(arr, k) {\n  if (k < 1) {\n    return(arr)\n  }\n  if (k == 1) {\n    return(arr)\n  }\n  if (k == len(arr)) {\n    return(arr)\n  }\n  if (k > len(arr)) {\n    return(arr)\n  }\n  if (arr[k] == arr[k-1]) {\n    return(arr)\n  }\n  if (arr[k] < arr[k-1]) {\n    return(add_elements(arr[k], k-1))\n  }\n  if (arr[k] > arr[k-1]) {\n    return(add_elements(arr[k-1], k))\n  }\n  return(arr[k])\n}\n\n\nA: I think this is what you want:\narr <- c(111, 21, 3, 4000, 5, 6, 7, 8, 9)\n\narr[1] <- 4\n\narr[1] <- 4\n\narr[1] <- 4\n\narr[1] <- 4\n\narr[1] <- 4\n\narr[1] <- 4\n\narr[1] <- 4\n\narr[1] <- 4\n\narr[1] <- 4\n\narr[1] <- 4\n\narr[1] <- 4\n\narr[1] <- 4\n\narr[1] <- 4\n\narr[1] <- 4\n\narr[1] <- 4\n\narr[1"], ["# Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n# The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n# as follows: start with any positive integer n. Then each term is obtained from the \n# previous term as follows: if the previous term is even, the next term is one half of \n# the previous term. If the previous term is odd, the next term is 3 times the previous\n# term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n# Note: \n#     1. Collatz(1) is [1].\n#     2. returned list sorted in increasing order.\n# For example:\n# get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n# >>> get_odd_collatz(5)\n# c(1, 5)\nget_odd_collatz <- function(n) {\n  if (n <= 1) {\n    return(c(1, n))\n  } else {\n    return(c(n, get_odd_collatz(n - 1)))\n  }\n}\n"], ["# You have to write a function which validates a given date string and\n# returns TRUE if the date is valid otherwise FALSE.\n# The date is valid if all of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n# 3. The months should not be less than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n# >>> valid_date('03-11-2000')\n# TRUE\n# >>> valid_date('15-01-2012')\n# FALSE\n# >>> valid_date('04-0-2040')\n# FALSE\n# >>> valid_date('06-04-2020')\n# TRUE\n# >>> valid_date('06/04/2020')\n# FALSE\nvalid_date <- function(date) {\n  if (length(date) < 1 || length(date) > 31) {\n    return(FALSE)\n  }\n  if (length(date) < 1 || length(date) > 30) {\n    return(FALSE)\n  }\n  if (length(date) < 1 || length(date) > 29) {\n    return(FALSE)\n  }\n  if (length(date) < 1 || length(date) > 12) {\n    return(FALSE)\n  }\n  if (length(date) < 1 || length(date) > 11) {\n    return(FALSE)\n  }\n  if (length(date) < 1 || length(date) > 10) {\n    return(FALSE)\n  }\n  if (length(date) < 1 || length(date) > 9) {\n   "], ["# Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n# should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> split_words('Hello world!')\n# c('Hello', 'world!')\n# >>> split_words('Hello,world!')\n# c('Hello', 'world!')\n# >>> split_words('abcdef')\n# 3\nsplit_words <- function(txt) {\n  if (is.null(txt)) return(0)\n  if (is.null(txt[1])) return(0)\n  if (is.null(txt[1][1])) return(0)\n  if (is.null(txt[1][1][1])) return(0)\n  if (is.null(txt[1][1][1][1])) return(0)\n  if (is.null(txt[1][1][1][1][1])) return(0)\n  if (is.null(txt[1][1][1][1][1][1])) return(0)\n  if (is.null(txt[1][1][1][1][1][1][1])) return(0)\n  if (is.null(txt[1][1][1][1][1][1][1][1])) return(0)\n  if (is.null(txt[1][1][1][1][1][1][1][1][1])) return(0)\n  if (is.null(txt[1][1][1][1][1][1][1][1][1][1])) return(0)\n  if (is.null(txt[1][1][1][1][1][1][1][1][1][1][1])) return(0)\n  if (is.null(txt[1][1][1][1][1][1][1][1][1][1][1][1][1])) return(0)\n  if (is.null(txt[1][1][1][1"], ["# Given a list of numbers, return whether or not they are sorted\n# in ascending order. If list has more than 1 duplicate of the same\n# number, return FALSE. Assume no negative numbers and only integers.\n# Examples\n# >>> is_sorted(c(5))\n# TRUE\n# >>> is_sorted(c(1, 2, 3, 4, 5))\n# TRUE\n# >>> is_sorted(c(1, 3, 2, 4, 5))\n# FALSE\n# >>> is_sorted(c(1, 2, 3, 4, 5, 6))\n# TRUE\n# >>> is_sorted(c(1, 2, 3, 4, 5, 6, 7))\n# TRUE\n# >>> is_sorted(c(1, 3, 2, 4, 5, 6, 7))\n# FALSE\n# >>> is_sorted(c(1, 2, 2, 3, 3, 4))\n# TRUE\n# >>> is_sorted(c(1, 2, 2, 2, 3, 4))\n# FALSE\nis_sorted <- function(lst) {\n  if (length(lst) == 1) {\n    return(TRUE)\n  } else if (length(lst) == 2) {\n    if (is.numeric(lst[1])) {\n      return(is_sorted(lst[1]))\n    } else {\n      return(FALSE)\n    }\n  } else if (length(lst) == 3) {\n    if (is.numeric(lst[1]) && is.numeric(lst[2])) {\n      return(is_sorted(lst[1], lst[2]))\n    } else {\n      return(FALSE)\n    }\n  } else if (length(lst) == 4) {\n    if (is.numeric(lst[1]) && is.numeric(lst[2]) && is.numeric(lst[3])) {\n      return(is_sorted(lst[1], lst[2], lst[3]))\n    } else {\n      return(FALSE)\n    }\n  } else if (length(lst) == 5"], ["# You are given two intervals,\n# where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n# The given intervals are closed which means that the interval (start, end)\n# includes both start and end.\n# For each given interval, it is assumed that its start is less or equal its end.\n# Your task is to determine whether the length of intersection of these two \n# intervals is a prime number.\n# Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If the length of the intersection is a prime number, return \"YES\",\n# otherwise, return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output] samples:\n# >>> intersection(c(1, 2), c(2, 3))\n# 'NO'\n# >>> intersection(c(-1, 1), c(0, 4))\n# 'NO'\n# >>> intersection(c(-3, -1), c(-5, 5))\n# 'YES'\nintersection <- function(interval1, interval2) {\n  if (interval1[1] <= interval2[1] && interval1[1] >= interval2[2]) {\n    if (interval1[2] <= interval2[2] && interval1[2] >= interval2[1]) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n  }\n}\n\n\nA: You can use the following function:\nintersection <- function(interval1, interval2) {\n  if (interval1[1] <= interval2[1] && interval1[1] >= interval2[2]) {\n    if (interval1[2] <= interval2[2] && interval1[2] >= interval2[1]) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else {\n    return(FALSE)\n  }\n}\n\n"], ["# You are given a vector arr of integers and you need to return\n# sum of magnitudes of integers multiplied by product of all signs\n# of each number in the vector, represented by 1, -1 or 0.\n# Note: return NULL for empty arr.\n# Example:\n# >>> prod_signs(c(1, 2, 2, -4))\n# 9\n# >>> prod_signs(c(0, 1))\n# 0\n# >>> prod_signs(c())\n# NULL\nprod_signs <- function(arr) {\n  prod <- 0\n  for (i in 1:length(arr)) {\n    prod <- prod + (arr[i] * prod_signs(arr[i:i+2]))\n  }\n  return(prod)\n}\n\nprod_signs(c(1, 2, 2, -4))"], ["# Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n# each cell of the grid contains a value. Every integer in the range [1, N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have to find the minimum path of length k in the grid. You can start\n# from any cell, and in each step you can move to any of the neighbor cells,\n# in other words, you can go to cells which share an edge with you current\n# cell.\n# Please note that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n# You CANNOT go off the grid.\n# A path A (of length k) is considered less than a path B (of length k) if\n# after making the ordered lists of the values on the cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically less\n# than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j] = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered list of the values on the cells that the minimum path go through.\n# Examples:    \n# >>> minPath(list(c(1, 2, 3), c(4, 5, 6), c(7, 8, 9)), 3)\n# c(1, 2, 1)\n# >>> minPath(list(c(5, 9, 3), c(4, 1, 6), c(7, 8, 2)), 1)\n# c(1)\nminPath <- function(grid, k) {\n  # Create a list of the values on the grid\n  lst <- list()\n  for (i in 1:k) {\n    lst <- append(lst, grid[i])\n  }\n  # Return the ordered list of the values on the grid\n  return(lst)\n}\n\nminPath(grid,"], ["# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n# the last couple centuries. However, what people don't know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n#        = 2 + 3 + 3 = 8 \n# You are given a non-negative integer number n, you have to a return a list of the \n# first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> tri(3)\n# c(1, 3, 2, 8)\ntri <- function(n) {\n  if (n <= 1) {\n    return(c(1, 2, 3, 4, 5, 6, 7, 8))\n  }\n  return(c(tri(n - 1), tri(n - 2), tri(n + 1)))\n}\n\ntri(10)"], ["# Given a positive integer n, return the product of the odd digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>> digits(4)\n# 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {\n  if (n %% 2 == 0) return(0)\n  if (n %% 4 == 0) return(0)\n  if (n %% 8 == 0) return(0)\n  if (n %% 16 == 0) return(0)\n  if (n %% 32 == 0) return(0)\n  if (n %% 64 == 0) return(0)\n  if (n %% 128 == 0) return(0)\n  if (n %% 256 == 0) return(0)\n  if (n %% 512 == 0) return(0)\n  if (n %% 1024 == 0) return(0)\n  if (n %% 2048 == 0) return(0)\n  if (n %% 4096 == 0) return(0)\n  if (n %% 8192 == 0) return(0)\n  if (n %% 16384 == 0) return(0)\n  if (n %% 32768 == 0) return(0)\n  if (n %% 65536 == 0) return(0)\n  if (n %% 131072 == 0) return(0)\n  if (n %% 262144 == 0) return(0)\n  if (n %% 524288 == 0) return(0)\n  if (n %% 8388608 == 0) return(0)\n  if (n %% 11529600 == 0) return(0)\n  if (n %% 16777216 == 0) return(0)\n  if (n %% 23456789"], ["# Create a function that takes a string as input which contains only square brackets.\n# The function should return TRUE if and only if there is a valid subsequence of brackets \n# where at least one bracket in the subsequence is nested.\n# >>> is_nested('[[]]')\n# TRUE\n# >>> is_nested('[]]]]]]][[[[[]')\n# FALSE\n# >>> is_nested('[][]')\n# FALSE\n# >>> is_nested('[]')\n# FALSE\n# >>> is_nested('[[][]]')\n# TRUE\n# >>> is_nested('[[]][[')\n# TRUE\nis_nested <- function(string) {\n  if (string %in% c('[]', '[][]', '[][][]')) {\n    return(FALSE)\n  } else if (string %in% c('[[]]', '[[][]]')) {\n    return(TRUE)\n  } else if (string %in% c('[][]')) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\nis_nested('[[]]')"], ["# You are given a list of numbers.\n# You need to return the sum of squared numbers in the given list,\n# round each element in the list to the upper int(Ceiling) first.\n# Examples:\n# >>> lst(c(1.0, 2.0, 3.0))\n# 14\n# >>> lst(c(1.0, 4.0, 9.0))\n# 98\n# >>> lst(c(1.0, 3.0, 5.0, 7.0))\n# 84\n# >>> lst(c(1.4, 4.2, 0.0))\n# 29\n# >>> lst(c(-2.4, 1.0, 1.0))\n# 6\nsum_squares <- function(lst) {\n  lst <- lst[1:length(lst)]\n  sum(lst)\n}\n\nsum_squares(c(1.0, 2.0, 3.0))"], ["# Create a function that returns TRUE if the last character\n# of a given string is an alphabetical character and is not\n# a part of a word, and FALSE otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n# >>> check_if_last_char_is_a_letter('apple pie')\n# FALSE\n# >>> check_if_last_char_is_a_letter('apple pi e')\n# TRUE\n# >>> check_if_last_char_is_a_letter('apple pi e ')\n# FALSE\n# >>> check_if_last_char_is_a_letter('')\n# FALSE\ncheck_if_last_char_is_a_letter <- function(txt) {\n  if (is.null(txt)) return(FALSE)\n  if (is.null(txt[1])) return(FALSE)\n  if (is.null(txt[length(txt)])) return(FALSE)\n  if (is.null(txt[1:length(txt)])) return(FALSE)\n  if (is.null(txt[1:length(txt)][1])) return(FALSE)\n  if (is.null(txt[1:length(txt)][length(txt)])) return(FALSE)\n  if (is.null(txt[1:length(txt)][length(txt)][1])) return(FALSE)\n  if (is.null(txt[1:length(txt)][length(txt)][length(txt)])) return(FALSE)\n  if (is.null(txt[1:length(txt)][length(txt)][length(txt)][length(txt)])) return(FALSE)\n  if (is.null(txt[1:length(txt)][length(txt)][length(txt)][length(txt)][length(txt)])) return(FALSE)\n  if (is.null(txt[1:length(txt)][length(txt)][length(txt)][length(txt)][length(txt)][length(txt)])) return(FALSE)\n  if (is.null(txt[1:length(txt)][length(txt)][length(txt)][length(txt)][length(txt)][length(txt"], ["# Create a function which returns the largest index of an element which\n# is not greater than or equal to the element immediately preceding it. If\n# no such element exists then return -1. The given vector will not contain\n# duplicate values.\n# Examples:\n# >>> can_arrange(c(1, 2, 4, 3, 5))\n# 3\n# >>> can_arrange(c(1, 2, 3))\n# -1\ncan_arrange <- function(arr) {\n  if (length(arr) == 0) return(-1)\n  if (length(arr) == 1) return(arr[1])\n  if (length(arr) == 2) return(arr[1][1])\n  if (length(arr) == 3) return(arr[1][1][1])\n  if (length(arr) == 4) return(arr[1][1][1][1])\n  if (length(arr) == 5) return(arr[1][1][1][1][1])\n  if (length(arr) == 6) return(arr[1][1][1][1][1][1])\n  if (length(arr) == 7) return(arr[1][1][1][1][1][1][1])\n  if (length(arr) == 8) return(arr[1][1][1][1][1][1][1][1])\n  if (length(arr) == 9) return(arr[1][1][1][1][1][1][1][1][1])\n  if (length(arr) == 10) return(arr[1][1][1][1][1][1][1][1][1][1])\n  if (length(arr) == 11) return(arr[1][1][1][1][1][1][1][1][1][1][1])\n  if (length(arr) == 12) return(arr[1][1][1][1][1][1][1][1][1][1][1][1])\n  if (length(arr) == 13) return(arr[1][1][1][1][1]["], ["# Create a function that returns a list (a, b), where 'a' is\n# the largest of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n# If there is no negative or positive integers, return them as NULL.\n# Examples:\n# >>> largest_smallest_integers(c(2, 4, 1, 3, 5, 7))\n# list(NULL, 1)\n# >>> largest_smallest_integers(c())\n# list(NULL, NULL)\n# >>> largest_smallest_integers(c(0))\n# list(NULL, NULL)\nlargest_smallest_integers <- function(lst) {\n  if (is.null(lst)) return(NULL)\n  if (is.numeric(lst)) return(lst)\n  if (is.list(lst)) return(lst)\n  if (is.character(lst)) return(lst)\n  if (is.factor(lst)) return(lst)\n  if (is.null(lst)) return(NULL)\n  if (is.numeric(lst)) return(NULL)\n  if (is.list(lst)) return(NULL)\n  if (is.character(lst)) return(NULL)\n  if (is.factor(lst)) return(NULL)\n  if (is.null(lst)) return(NULL)\n  if (is.numeric(lst)) return(NULL)\n  if (is.list(lst)) return(NULL)\n  if (is.character(lst)) return(NULL)\n  if (is.factor(lst)) return(NULL)\n  if (is.null(lst)) return(NULL)\n  if (is.numeric(lst)) return(NULL)\n  if (is.list(lst)) return(NULL)\n  if (is.character(lst)) return(NULL)\n  if (is.factor(lst)) return(NULL)\n  if (is.null(lst)) return(NULL)\n  if (is.numeric(lst)) return(NULL)\n  if (is.list(lst)) return(NULL)\n  if (is.character(lst)) return(NULL)\n  if (is.factor(lst)) return(NULL)"], ["# Create a function that takes integers, floats, or strings representing\n# real numbers, and returns the larger variable in its given variable type.\n# Return NULL if the values are equal.\n# Note: If a real number is represented as a string, the floating point might be . or ,\n# >>> compare_one(1, 2.5)\n# 2.5\n# >>> compare_one(1, '2,3')\n# '2,3'\n# >>> compare_one('5,1', '6')\n# '6'\n# >>> compare_one('1', 1)\n# NULL\ncompare_one <- function(a, b) {\n  if (is.null(a)) {\n    return(NULL)\n  }\n  if (is.null(b)) {\n    return(NULL)\n  }\n  if (a == b) {\n    return(NULL)\n  }\n  if (a < b) {\n    return(NULL)\n  }\n  if (a > b) {\n    return(NULL)\n  }\n  return(a - b)\n}\n"], ["# Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n# Example\n# >>> is_equal_to_sum_even(4)\n# FALSE\n# >>> is_equal_to_sum_even(6)\n# FALSE\n# >>> is_equal_to_sum_even(8)\n# TRUE\nis_equal_to_sum_even <- function(n) {\n  if (n <= 0) {\n    return(FALSE)\n  }\n  if (n == 0) {\n    return(TRUE)\n  }\n  if (n % 2 == 0) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\n"], ["# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n# 288\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\nspecial_factorial <- function(n) {\n  if (n < 0) {\n    return(0)\n  }\n  if (n == 0) {\n    return(1)\n  }\n  if (n == 1) {\n    return(1)\n  }\n  if (n == 2) {\n    return(2)\n  }\n  if (n == 3) {\n    return(3)\n  }\n  if (n == 4) {\n    return(4)\n  }\n  if (n == 5) {\n    return(5)\n  }\n  if (n == 6) {\n    return(6)\n  }\n  if (n == 7) {\n    return(7)\n  }\n  if (n == 8) {\n    return(8)\n  }\n  if (n == 9) {\n    return(9)\n  }\n  if (n == 10) {\n    return(10)\n  }\n  if (n == 11) {\n    return(11)\n  }\n  if (n == 12) {\n    return(12)\n  }\n  if (n == 13) {\n    return(13)\n  }\n  if (n == 14) {\n    return(14)\n  }\n  if (n == 15) {\n    return(15)\n  }\n  if (n == 16) {\n    return(16)\n  }\n  if (n == 17) {\n    return(17)\n  }\n  if (n == 18) {\n    return(18)\n  }\n  if (n == 19"], ["# Given a string text, replace all spaces in it with underscores, \n# and if a string has more than 2 consecutive spaces, \n# then replace all consecutive spaces with - \n# >>> fix_spaces(' Example')\n# 'Example'\n# >>> fix_spaces(' Example 1')\n# 'Example_1'\n# >>> fix_spaces(' Example 2')\n# '_Example_2'\n# >>> fix_spaces(' Example 3')\n# '_Example-3'\nfix_spaces <- function(text) {\n  text <- text %>%\n    str_replace_all(pattern = '\\\\s+', replacement = '-')\n  text\n}\n\n\nA: You can use str_replace_all to replace all spaces with -.\nstr_replace_all(text, pattern = '\\\\s+', replacement = '-')\n\n\nA: You can use str_replace_all to replace all spaces with -.\nstr_replace_all(text, pattern = '\\\\s+', replacement = '-')\n\n"], ["# Create a function which takes a string representing a file's name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n# A file's name is considered to be valid if and only if all the following conditions \n# are met:\n# - There should not be more than three digits ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring before the dot should not be empty, and it starts with a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> file_name_check('example.txt')\n# 'Yes'\n# >>> file_name_check('1example.dll')\n# 'No'\nfile_name_check <- function(file_name) {\n  if (is.null(file_name)) return(NULL)\n  if (is.null(file_name_check(file_name))) return(NULL)\n  if (length(file_name) < 3) return(NULL)\n  if (length(file_name) > 3) return(NULL)\n  if (is.null(file_name_check(file_name))) return(NULL)\n  if (is.null(file_name_check(file_name))) return(NULL)\n  if (is.null(file_name_check(file_name))) return(NULL)\n  if (is.null(file_name_check(file_name))) return(NULL)\n  if (is.null(file_name_check(file_name))) return(NULL)\n  if (is.null(file_name_check(file_name))) return(NULL)\n  if (is.null(file_name_check(file_name))) return(NULL)\n  if (is.null(file_name_check(file_name))) return(NULL)\n  if (is.null(file_name_check(file_name))) return(NULL)\n  if (is.null(file_name_check(file"], ["# \"\n# This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n# multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n# change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n# Examples:\n# >>> lst\n# c(1, 2, 3)\n# >>> lst\n# c()\n# >>> lst\n# c(-1, -5, 2, -1, -5)\nsum_squares <- function(lst) {\n  if (is.integer(lst)) {\n    sum <- 0\n    for (i in 1:length(lst)) {\n      sum <- sum + lst[i] * lst[i]\n    }\n    return(sum)\n  } else {\n    sum <- 0\n    for (i in 1:length(lst)) {\n      sum <- sum + lst[i] * lst[i]\n    }\n    return(sum)\n  }\n}\n\nsum_squares(c(1, 2, 3))"], ["# You are given a string representing a sentence,\n# the sentence contains some words separated by a space,\n# and you have to return a string that contains the words from the original sentence,\n# whose lengths are prime numbers,\n# the order of the words in the new string should be the same as the original one.\n# Example 1:\n# >>> words_in_sentence('This is a test')\n# 'is'\n# Example 2:\n# >>> words_in_sentence('lets go for swimming')\n# 'go for'\n# Constraints:\n#     * 1 <= len(sentence) <= 100\n#     * sentence contains only letters\nwords_in_sentence <- function(sentence) {\n  # Create a list of the words in the sentence\n  words <- sentence[1:length(sentence)]\n  # Create a list of the lengths of the words in the sentence\n  lengths <- sentence[1:length(sentence)]\n  # Create a list of the prime numbers\n  prime_numbers <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  # Create a list of the words in the sentence\n  new_sentence <- c()\n  for (i in 1:length(sentence)) {\n    # Get the length of the word in the sentence\n    length_of_word <- length(sentence[i])\n    # Get the prime number that is the length of the word\n    prime_number <- prime_numbers[length_of_word %in% prime_numbers]\n    # If the length of the word is prime number,\n    # then add the word to the new sentence\n    if (length_of_word %in% prime_numbers) {\n      new_sentence <- c(new_sentence, sentence[i])\n    }\n  }\n  # Return the new sentence\n  return(new_sentence)\n}\n\n\nA: I'm not sure if this is the best way to do it, but I think it's the most efficient.\nsentence <- c(\"This is a test\", \"This is a test\", \"This is a test\", \"This is a test\", \"This"], ["# Your task is to implement a function that will simplify the expression\n# x * n. The function returns TRUE if x * n evaluates to a whole number and FALSE\n# otherwise. Both x and n, are string representation of a fraction, and have the following format,\n# <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n# You can assume that x, and n are valid fractions, and do not have zero as denominator.\n# >>> simplify('1/5', '5/1')\n# TRUE\n# >>> simplify('1/6', '2/1')\n# FALSE\n# >>> simplify('7/10', '10/2')\n# FALSE\nsimplify <- function(x, n) {\n  if (is.null(x)) return(FALSE)\n  if (is.null(n)) return(FALSE)\n  if (is.null(x)) return(FALSE)\n  if (is.null(n)) return(FALSE)\n  if (n == 0) return(FALSE)\n  if (n == 1) return(TRUE)\n  if (n == 2) return(TRUE)\n  if (n == 3) return(TRUE)\n  if (n == 4) return(TRUE)\n  if (n == 5) return(TRUE)\n  if (n == 6) return(TRUE)\n  if (n == 7) return(TRUE)\n  if (n == 8) return(TRUE)\n  if (n == 9) return(TRUE)\n  if (n == 10) return(TRUE)\n  if (n == 11) return(TRUE)\n  if (n == 12) return(TRUE)\n  if (n == 13) return(TRUE)\n  if (n == 14) return(TRUE)\n  if (n == 15) return(TRUE)\n  if (n == 16) return(TRUE)\n  if (n == 17) return(TRUE)\n  if (n == 18) return(TRUE)\n  if (n == 19) return(TRUE)\n  if (n == 20) return(TRUE)\n "], ["# Write a function which sorts the given list of integers\n# in ascending order according to the sum of their digits.\n# Note: if there are several items with similar sum of their digits,\n# order them based on their index in original list.\n# For example:\n# >>> order_by_points(c(1, 11, -1, -11, -12))\n# c(-1, -11, 1, -12, 11)\n# >>> order_by_points(c())\n# c()\norder_by_points <- function(nums) {\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums)]\n  nums <- nums[order(nums"], ["# Write a function that takes a vector of numbers as input and returns \n# the number of elements in the vector that are greater than 10 and both \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# >>> specialFilter(c(15, -73, 14, -15))\n# 1\n# >>> specialFilter(c(33, -2, -3, 45, 21, 109))\n# 2\nspecialFilter <- function(nums) {\n  nums <- as.integer(nums)\n  if (nums > 10) {\n    if (nums %in% c(1, 3, 5, 7, 9)) {\n      if (nums %in% c(1, 3, 5, 7, 9)) {\n        if (nums %in% c(1, 3, 5, 7, 9)) {\n          return(nums)\n        }\n      }\n    }\n  }\n  return(nums)\n}\n\nspecialFilter(c(15, -73, 14, -15))"], ["# You are given a positive integer n. You have to create an integer vector a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n#     and a[i] + a[j] + a[k] is a multiple of 3.\n#     Example :\n#     >>> get_max_triples(5)\n#     1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\nget_max_triples <- function(n) {\n  # For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n  # Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  #     and a[i] + a[j] + a[k] is a multiple of 3.\n  #     Example :\n  #     >>> get_max_triples(5)\n  #     1\n  # Explanation: \n  # a = [1, 3, 7, 13, 21]\n  # The only valid triple is (1, 7, 13).\n  return(length(unique(sort(c(1, 3, 7, 13, 21)))) - 1)\n}\n"], ["# There are eight planets in our solar system: the closerst to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names as strings planet1 and planet2. \n# The function should return a list containing all planets whose orbits are \n# located between the orbit of planet1 and the orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should return an empty list if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>> bf('Jupiter', 'Neptune')\n# c('Saturn', 'Uranus')\n# >>> bf('Earth', 'Mercury')\n# 'Venus'\n# >>> bf('Mercury', 'Uranus')\n# c('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\nbf <- function(planet1, planet2) {\n  planet1 <- planet1[1]\n  planet2 <- planet2[1]\n  planet1 <- planet1[2]\n  planet2 <- planet2[2]\n  planet1 <- planet1[3]\n  planet2 <- planet2[3]\n  planet1 <- planet1[4]\n  planet2 <- planet2[4]\n  planet1 <- planet1[5]\n  planet2 <- planet2[5]\n  planet1 <- planet1[6]\n  planet2 <- planet2[6]\n  planet1 <- planet1[7]\n  planet2 <- planet2[7]\n  planet1 <- planet1[8]\n  planet2 <- planet2[8]\n  planet1 <- planet1[9]\n  planet2 <- planet2[9]\n  planet1 <- planet1[10]\n  planet2 <- planet2[10]\n  planet1 <- planet1[11]\n  planet2 <- planet2[11]\n  planet1 <- planet1[12]\n  planet2 <- planet2[12]\n  planet1 <- planet1[13]\n  planet2 <-"], ["# Write a function that accepts a list of strings as a parameter,\n# deletes the strings that have odd lengths from it,\n# and returns the resulted list with a sorted order,\n# The list is always a list of strings and never a vector of numbers,\n# and it may contain duplicates.\n# The order of the list should be ascending by length of each word, and you\n# should return the list sorted by that rule.\n# If two words have the same length, sort the list alphabetically.\n# The function should return a list of strings in sorted order.\n# You may assume that all words will have the same length.\n# For example:\n# >>> list_sort(c('aa', 'a', 'aaa'))\n# c('aa')\n# >>> list_sort(c('ab', 'a', 'aaa', 'cd'))\n# c('ab', 'cd')\nsorted_list_sum <- function(lst) {\n  lst <- lst %>%\n    unlist() %>%\n    sort() %>%\n    unlist() %>%\n    sort()\n  lst\n}\n\nsorted_list_sum(c('aa', 'a', 'aaa'))\n\n\nA: Here is a solution using base R.\nFirst, we create a list of strings with the desired length.\nlst <- c('aa', 'a', 'aaa')\n\nThen, we sort the list by length and then sort by the desired order.\nlst <- sort(lst, decreasing = TRUE)\nlst <- sort(lst, decreasing = TRUE)\n\nFinally, we unlist the list and sort the result by the desired order.\nlst <- unlist(lst, decreasing = TRUE)\nlst <- sort(lst, decreasing = TRUE)\n\n\nA: You can use the sort function from the base R package.\nsort(c('aa', 'a', 'aaa'))\n\n\nA: You can use the sort function from the base R package.\nsort(c('aa', 'a', 'aaa'))\n\n\nA: You can use the sort function from the base R package.\nsort(c('aa', 'a', 'aaa'))\n\n\nA: You can use the sort function from the base R package.\nsort(c('aa', 'a', 'aaa'))"], ["# A simple program which should return the value of x if n is \n# a prime number and should return the value of y otherwise.\n# Examples:\n# >>> x_or_y(7, 34, 12)\n# 34\n# >>> x_or_y(15, 8, 5)\n# 5\nx_or_y <- function(n, x, y) {\n  if (n % x == 0) {\n    y\n  } else {\n    x\n  }\n}\n\nx <- 1000000\ny <- 1000000\n\nx_or_y(n, x, y)"], ["# Given a list of numbers, return the sum of squares of the numbers\n# in the list that are odd. Ignore numbers that are negative or not integers.\n# >>> double_the_difference(c(1, 3, 2, 0))\n# 10\n# >>> double_the_difference(c(-1, -2, 0))\n# 0\n# >>> double_the_difference(c(9, -2))\n# 81\n# >>> double_the_difference(c(0))\n# 0\n# If the input list is empty, return 0.\ndouble_the_difference <- function(lst) {\n  if (is.null(lst)) {\n    return(0)\n  }\n  if (is.numeric(lst)) {\n    return(lst)\n  }\n  if (is.integer(lst)) {\n    return(lst)\n  }\n  if (is.factor(lst)) {\n    return(lst)\n  }\n  if (is.list(lst)) {\n    return(list(lst))\n  }\n  if (is.character(lst)) {\n    return(lst)\n  }\n  if (is.null(lst)) {\n    return(0)\n  }\n  return(0)\n}\n"], ["# I think we all remember that feeling when the result of some long-awaited\n# event is finally known. The feelings and thoughts you have at that moment are\n# definitely worth noting down and comparing.\n# Your task is to determine if a person correctly guessed the results of a number of matches.\n# You are given two vectors of scores and guesses of equal length, where each index shows a match. \n# Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n# the value is 0, and if not, the value is the absolute difference between the guess and the score.\n# example:\n# >>> compare(c(1, 2, 3, 4, 5, 1), c(1, 2, 3, 4, 2, -2))\n# c(0, 0, 0, 0, 3, 3)\n# >>> compare(c(0, 5, 0, 0, 0, 4), c(4, 1, 1, 0, 0, -2))\n# c(4, 4, 1, 0, 0, 6)\ncompare <- function(game, guess) {\n  guess <- as.numeric(guess)\n  game <- as.numeric(game)\n  guesses <- as.numeric(guess)\n  guesses <- as.numeric(guess)\n  guesses <- as.numeric(guess)\n  guesses <- as.numeric(guess)\n  guesses <- as.numeric(guess)\n  guesses <- as.numeric(guess)\n  guesses <- as.numeric(guess)\n  guesses <- as.numeric(guess)\n  guesses <- as.numeric(guess)\n  guesses <- as.numeric(guess)\n  guesses <- as.numeric(guess)\n  guesses <- as.numeric(guess)\n  guesses <- as.numeric(guess)\n  guesses <- as.numeric(guess)\n  guesses <- as.numeric(guess)\n  guesses <- as.numeric(guess)\n  guesses <- as.numeric(guess)\n  guesses <-"], ["# You will be given the name of a class (a string) and a list of extensions.\n# The extensions are to be used to load additional classes to the class. The\n# strength of the extension is as follows: Let CAP be the number of the uppercase\n# letters in the extension's name, and let SM be the number of lowercase letters \n# in the extension's name, the strength is given by the fraction CAP - SM. \n# You should find the strongest extension and return a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more extensions with the same strength, you should\n# choose the one that comes first in the list.\n# For example, if you are given \"Slices\" as the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension('my_class', c('AA', 'Be', 'CC'))\n# 'my_class.AA'\nStrongest_Extension <- function(class_name, extensions) {\n  if (class_name == 'my_class') {\n    return(class_name)\n  }\n  if (length(extensions) == 0) {\n    return(class_name)\n  }\n  if (length(extensions) == 1) {\n    return(class_name.StrongestExtensionName(class_name, extensions))\n  }\n  if (length(extensions) == 2) {\n    return(class_name.StrongestExtensionName(class_name, extensions[1:2]))\n  }\n  if (length(extensions) == 3) {\n    return(class_name.StrongestExtensionName(class_name, extensions[1:3]))\n  }\n  if (length(extensions) == 4) {\n    return(class_name.StrongestExtensionName(class_name, extensions[1:4]))\n  }\n  if (length("], ["# You are given 2 words. You need to return TRUE if the second word or any of its rotations is a substring in the first word\n# >>> cycpattern_check('abcd', 'abd')\n# FALSE\n# >>> cycpattern_check('hello', 'ell')\n# TRUE\n# >>> cycpattern_check('whassup', 'psus')\n# FALSE\n# >>> cycpattern_check('abab', 'baa')\n# TRUE\n# >>> cycpattern_check('efef', 'eeff')\n# FALSE\n# >>> cycpattern_check('himenss', 'simen')\n# TRUE\ncycpattern_check <- function(a, b) {\n  if (a %in% b) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\n\nA: You can use the following code:\na <- c('abcd', 'abd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', 'abcd', '"], ["# Given an integer. return a list that has the number of even and odd digits respectively.\n# Example:\n#     >>> even_odd_count(-12)\n#     c(1, 1)\n#     >>> even_odd_count(123)\n#     c(1, 2)\neven_odd_count <- function(num) {\n  if (num < 0) {\n    return(c(1, 1))\n  } else if (num > 0) {\n    return(c(1, 2))\n  } else {\n    return(c(1, 0))\n  }\n}\n"], ["# Given a positive integer, obtain its roman numeral equivalent as a string,\n# and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n# >>> int_to_mini_roman(19)\n# 'xix'\n# >>> int_to_mini_roman(152)\n# 'clii'\n# >>> int_to_mini_roman(426)\n# 'cdxxvi'\nint_to_mini_roman <- function(number) {\n  if (number < 1000) {\n    return(number)\n  } else {\n    return(mini_roman(number))\n  }\n}\n"], ["# Given the lengths of the three sides of a triangle. Return TRUE if the three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1, 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a < b || b < c) {\n    return(FALSE)\n  }\n  if (a > b || b > c) {\n    return(FALSE)\n  }\n  if (a == b || b == c) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n"], ["# Write a function that accepts a list of strings.\n# The list contains different words. Return the word with maximum number\n# of unique characters. If multiple strings have maximum number of unique\n# characters, return the one which comes first in lexicographical order.\n# >>> find_max(c('name', 'of', 'string'))\n# 'string'\n# >>> find_max(c('name', 'enam', 'game'))\n# 'enam'\n# >>> find_max(c('aaaaaaa', 'bb', 'cc'))\n# 'aaaaaaa'\nfind_max <- function(words) {\n  max_char <- 0\n  for (word in words) {\n    if (length(word) > max_char) {\n      max_char <- length(word)\n      word <- word[1:max_char]\n    }\n  }\n  return(word)\n}\n"], ["# You're a hungry rabbit, and you already have eaten a certain number of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n# you should return a vector of [ total number of eaten carrots after your meals,\n#                                 the number of carrots left after your meals ]\n# if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n# >>> eat(5, 6, 10)\n# c(11, 4)\n# >>> eat(4, 8, 9)\n# c(12, 1)\n# >>> eat(1, 10, 10)\n# c(11, 0)\n# >>> eat(2, 11, 5)\n# c(7, 0)\n# Variables:\n# @number : integer\n#     the number of carrots that you have eaten.\n# @need : integer\n#     the number of carrots that you need to eat.\n# @remaining : integer\n#     the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\neat <- function(number, need, remaining) {\n  if (number < 0) {\n    return(c(0, 0))\n  }\n  if (number > need) {\n    return(c(number, 0))\n  }\n  if (number < remaining) {\n    return(c(number, 0))\n  }\n  if (number == 0) {\n    return(c(0, 0))\n  }\n  if (number == need) {\n    return(c(number, 0))\n  }\n  if (number == remaining) {\n    return(c(number, 0))\n  }\n  if (number > 0) {\n    return(c(number, number - need))\n  }\n  if ("], ["# Given two lists operator, and operand. The first list has basic algebra operations, and \n# the second list is a list of integers. Use the two given lists to build the algebric \n# expression and return the evaluation of this expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+', '*', '-']\n# vector = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n#     The length of operator list is equal to the length of operand list minus one.\n#     Operand is a list of of non-negative integers.\n#     Operator list has at least one operator, and operand list has at least two operands.\ndo_algebra <- function(operator, operand) {\n  vector <- operator[1]\n  result <- operator[2]\n  if (length(operator) == length(operand)) {\n    result <- operator[3]\n  }\n  else {\n    result <- operator[4]\n  }\n  return(result)\n}\n"], ["# You are given a string s.\n# if s[i] is a letter, reverse its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string contains no letters, reverse the string.\n# The function should return the resulted string.\n# Examples\n# >>> solve('1234')\n# '4321'\n# >>> solve('ab')\n# 'AB'\n# >>> solve('#a@C')\n# '#A@c'\nsolve <- function(s) {\n  if (is.character(s)) {\n    s <- s[1:nchar(s)]\n    s <- s[1:nchar(s)]\n    if (is.na(s)) {\n      s <- paste(s, collapse = '')\n    } else {\n      s <- paste(s, collapse = '')\n      s <- s[1:nchar(s)]\n      s <- s[1:nchar(s)]\n      s <- s[1:nchar(s)]\n      s <- s[1:nchar(s)]\n      s <- s[1:nchar(s)]\n      s <- s[1:nchar(s)]\n      s <- s[1:nchar(s)]\n      s <- s[1:nchar(s)]\n      s <- s[1:nchar(s)]\n      s <- s[1:nchar(s)]\n      s <- s[1:nchar(s)]\n      s <- s[1:nchar(s)]\n      s <- s[1:nchar(s)]\n      s <- s[1:nchar(s)]\n      s <- s[1:nchar(s)]\n      s <- s[1:nchar(s)]\n      s <- s[1:nchar(s)]\n      s <- s[1:nchar(s)]\n      s <- s[1:nchar(s)]\n      s <- s[1:nchar(s)]\n      s <- s[1:nchar(s)]\n      s <- s[1:nchar(s)]\n      s <- s[1:nchar(s)]\n      s <- s[1:nchar(s)]"], ["# Given a string 'text', return its md5 hash equivalent string.\n# If 'text' is an empty string, return NULL.\n# >>> string_to_md5('Hello world')\n# '3e25960a79dbc69b674cd4ec67a72c62'\nstring_to_md5 <- function(text) {\n  if (text == \"\") return NULL\n  md5 <- hash(text, digest = \"md5\")\n  return(md5)\n}\n"], ["# Given two positive integers a and b, return the even digits between a\n# and b, in ascending order.\n# For example:\n# >>> generate_integers(2, 8)\n# c(2, 4, 6, 8)\n# >>> generate_integers(8, 2)\n# c(2, 4, 6, 8)\n# >>> generate_integers(10, 14)\n# c()\ngenerate_integers <- function(a, b) {\n  c <- c(a, b)\n  c <- c[order(c)]\n  c\n}\n"]]