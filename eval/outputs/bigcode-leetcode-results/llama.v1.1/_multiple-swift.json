[["/// Check if in given array of numbers, are any two numbers closer to each other than\n/// given threshold.\n/// >>> has_close_elements(numbers: [1.0, 2.0, 3.0], threshold: 0.5)\n/// false\n/// >>> has_close_elements(numbers: [1.0, 2.8, 3.0, 4.0, 5.0, 2.0], threshold: 0.3)\n/// true\nfunc has_close_elements(numbers: [Double], threshold: Double) -> Bool {\n    var result = false\n    for number in numbers {\n        if number < threshold {\n            result = true\n        }\n    }\n    return result"], ["/// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n/// separate those group into separate strings and return the array of those.\n/// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n/// Ignore any spaces in the input string.\n/// >>> separate_paren_groups(paren_string: \"( ) (( )) (( )( ))\")\n/// [\"()\", \"(())\", \"(()())\"]\nfunc separate_paren_groups(paren_string: String) -> [String] {\n    var result: [String] = []\n    let open_braces = paren_string.split(separator: \"(\")\n    for open_brace in open_braces {\n        let open_brace_string = open_brace.trimmingCharacters(in: .whitespacesAndNewlines)\n        let open_brace_string_trimmed = open_brace_string.replacingOccurrences(of: \" \", with: \"\")\n        let open_brace_string_trimmed_trimmed = open_brace_string_trimmed.replacingOccurrences(of: \" \", with: \" \")\n        let open_braces_trimmed = open_braces.filter { $0.trimmingCharacters(in: .whitespacesAndNewlines) == open_brace_string_trimmed_trimmed }\n        let open_braces_trimmed_trimmed = open_braces_trimmed.filter { $0.trimmingCharacters(in: .whitespacesAndNewlines) == open_brace_string_trimmed }\n        let open_braces_trimmed_trimmed_trimmed = open_braces_trimmed_trimmed.filter { $0.trimmingCharacters(in: .whitespacesAndNewlines) == open_brace_string_trimmed }\n        let open_braces_trimmed_trimmed_trimmed_trimmed = open_braces_trimmed_trimmed_trimmed.filter { $0.trimmingCharacters(in: .whitespacesAndNewlines) == open_brace_string_trimmed }\n        if let open_bra"], ["/// Given a positive floating point number, it can be decomposed into\n/// and integer part (largest integer smaller than given number) and decimals\n/// (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n/// >>> truncate_number(number: 3.5)\n/// 0.5\nfunc truncate_number(number: Double) -> Double {\n    var result: Double = number\n    var remainder: Double = 0.0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int"], ["/// You're given an array of deposit and withdrawal operations on a bank account that starts with\n/// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n/// at that point function should return true. Otherwise it should return false.\n/// >>> below_zero(operations: [1, 2, 3])\n/// false\n/// >>> below_zero(operations: [1, 2, -4, 5])\n/// true\nfunc below_zero(operations: [Int]) -> Bool {\n    var result = false\n    for operation in operations {\n        if operation < 0 {\n            result = true\n            break\n        }\n    }\n    return result"], ["/// For a given array of input numbers, calculate Mean Absolute Deviation\n/// around the mean of this dataset.\n/// Mean Absolute Deviation is the average absolute difference between each\n/// element and a centerpoint (mean in this case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) -> Double {\n  let mean = numbers.reduce(0.0, +)\n  return mean - mean.sqrt()"], ["/// Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n/// >>> intersperse(numbers: [] as [Int], delimeter: 4)\n/// [] as [Int]\n/// >>> intersperse(numbers: [1, 2, 3], delimeter: 4)\n/// [1, 4, 2, 4, 3]\nfunc intersperse(numbers: [Int], delimeter: Int) -> [Int] {\n    var result: [Int] = []\n    var i: Int = 0\n    while i < numbers.count {\n        result.append(numbers[i])\n        i += 1\n    }\n    return result"], ["/// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n/// For each of the group, output the deepest level of nesting of parentheses.\n/// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n/// >>> parse_nested_parens(paren_string: \"(()()) ((())) () ((())()())\")\n/// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string: String) -> [Int] {\n    let string = paren_string.trimmingCharacters(in: .whitespacesAndNewlines)\n    let result = [0]\n    let index = 0\n    while let char = string[index] {\n        if char == '(' {\n            result.append(index)\n            index += 1\n        } else if char == ')':\n            index += 1\n        } else if char == ')' {\n            index += 1\n        } else {\n            result.append(index)\n        }\n    }\n    return result"], ["/// Filter an input array of strings only for ones that contain given substring\n/// >>> filter_by_substring(strings: [] as [String], substring: \"a\")\n/// [] as [String]\n/// >>> filter_by_substring(strings: [\"abc\", \"bacd\", \"cde\", \"array\"], substring: \"a\")\n/// [\"abc\", \"bacd\", \"array\"]\nfunc filter_by_substring(strings: [String], substring: String) -> [String] {\n    return strings.filter { $0.contains(substring) }"], ["/// For a given array of integers, return a tuple consisting of a sum and a product of all the integers in an array.\n/// Empty sum should be equal to 0 and empty product should be equal to 1.\n/// >>> sum_product(numbers: [] as [Int])\n/// (0, 1)\n/// >>> sum_product(numbers: [1, 2, 3, 4])\n/// (10, 24)\nfunc sum_product(numbers: [Int]) -> (Int, Int) {\n    var sum = 0\n    var product = 1\n    for number in numbers {\n        sum += number\n        product *= number\n    }\n    return (sum, product)"], ["/// From a given array of integers, generate an array of rolling maximum element found until given moment\n/// in the sequence.\n/// >>> rolling_max(numbers: [1, 2, 3, 2, 3, 4, 2])\n/// [1, 2, 3, 3, 3, 4, 4]\nfunc rolling_max(numbers: [Int]) -> [Int] {\n    var max: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var"], ["/// Find the shortest palindrome that begins with a supplied string.\n/// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string that is a palindrome.\n/// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(string: \"\")\n/// \"\"\n/// >>> make_palindrome(string: \"cat\")\n/// \"catac\"\n/// >>> make_palindrome(string: \"cata\")\n/// \"catac\"\nfunc make_palindrome(string: String) -> String {\n    let palindrome = string.prefix(string.length - 1)\n    let prefix = string.substring(0, string.length - 1)\n    let suffix = string.substring(string.length - 1, string.length)\n    return palindrome + prefix + suffix"], ["/// Input are two strings a and b consisting only of 1s and 0s.\n/// Perform binary XOR on these inputs and return result also as a string.\n/// >>> string_xor(a: \"010\", b: \"110\")\n/// \"100\"\nfunc string_xor(a: String, b: String) -> String {\n    var result = \"\"\n    var i = 0\n    for x in a {\n        for y in b {\n            if x == y {\n                result += \"0\"\n            } else {\n                result += \"1\"\n            }\n            i++\n        }\n    }\n    return result"], ["/// Out of array of strings, return the longest one. Return the first one in case of multiple\n/// strings of the same length. Return nil in case the input array is empty.\n/// >>> longest(strings: [] as [String])\n/// nil\n/// >>> longest(strings: [\"a\", \"b\", \"c\"])\n/// \"a\"\n/// >>> longest(strings: [\"a\", \"bb\", \"ccc\"])\n/// \"ccc\"\nfunc longest(strings: [String]) -> String? {\n    var result: String? = nil\n    var i: Int = 0\n    var j: Int = strings.count\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int"], ["/// Return a greatest common divisor of two integers a and b\n/// >>> greatest_common_divisor(a: 3, b: 5)\n/// 1\n/// >>> greatest_common_divisor(a: 25, b: 15)\n/// 5\nfunc greatest_common_divisor(a: Int, b: Int) -> Int {\n    var c = 0\n    for i in 1..<a {\n        c += i\n    }\n    for i in 1..<b {\n        c += i\n    }\n    return c"], ["/// Return array of all prefixes from shortest to longest of the input string\n/// >>> all_prefixes(string: \"abc\")\n/// [\"a\", \"ab\", \"abc\"]\nfunc all_prefixes(string: String) -> [String] {\n    var prefixes: [String] = []\n    for character in string {\n        if character != ' ' {\n            prefixes.append(character)\n        }\n    }\n    return prefixes"], ["/// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n/// >>> string_sequence(n: 0)\n/// \"0\"\n/// >>> string_sequence(n: 5)\n/// \"0 1 2 3 4 5\"\nfunc string_sequence(n: Int) -> String {\n    let string = String(n)\n    return string"], ["/// Given a string, find out how many distinct characters (regardless of case) does it consist of\n/// >>> count_distinct_characters(string: \"xyzXYZ\")\n/// 3\n/// >>> count_distinct_characters(string: \"Jerry\")\n/// 4\nfunc count_distinct_characters(string: String) -> Int {\n    var count = 0\n    for character in string.characters {\n        count += 1\n    }\n    return count"], ["/// Input to this function is a string representing musical notes in a special ASCII format.\n/// Your task is to parse this string and return array of integers corresponding to how many beats does each\n/// not last.\n/// Here is a legend:\n/// 'o' - whole note, lasts four beats\n/// 'o|' - half note, lasts two beats\n/// '.|' - quater note, lasts one beat\n/// >>> parse_music(music_string: \"o o| .| o| o| .| .| .| .| o o\")\n/// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunc parse_music(music_string: String) -> [Int] {\n    var music_array: [Int] = []\n    var music_array_len: Int = 0\n    var music_array_index: Int = 0\n    var music_array_last_beat: Int = 0\n    var music_array_first_beat: Int = 0\n    var music_array_last_note: Int = 0\n    var music_array_first_note: Int = 0\n    var music_array_last_note_len: Int = 0\n    var music_array_first_note_len: Int = 0\n    var music_array_last_note_index: Int = 0\n    var music_array_first_note_index: Int = 0\n    var music_array_last_note_index_len: Int = 0\n    var music_array_first_note_index_len: Int = 0\n    var music_array_last_note_len: Int = 0\n    var music_array_first_note_len: Int = 0\n    var music_array_last_note_index_len_len: Int = 0\n    var music_array_first_note_index_len_len: Int = 0\n    var music_array_last_note_index_len_len_len: Int = 0\n    var music_array_first_note_index_len_len_len_len: Int = 0\n    var"], ["/// Find how many times a given substring can be found in the original string. Count overlaping cases.\n/// >>> how_many_times(string: \"\", substring: \"a\")\n/// 0\n/// >>> how_many_times(string: \"aaa\", substring: \"a\")\n/// 3\n/// >>> how_many_times(string: \"aaaa\", substring: \"aa\")\n/// 3\nfunc how_many_times(string: String, substring: String) -> Int {\n    let length = string.count\n    let count = 0\n    for i in 0..<length {\n        if string[i] == substring[i] {\n            count += 1\n        }\n    }\n    return count"], ["/// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n/// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n/// Return the string with numbers sorted from smallest to largest\n/// >>> sort_numbers(numbers: \"three one five\")\n/// \"one three five\"\nfunc sort_numbers(numbers: String) -> String {\n    var sorted = \"\"\n    for number in numbers.components(separatedBy: \" \") {\n        sorted += number + \" \"\n    }\n    return sorted"], ["/// From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n/// other and return them in order (smaller number, larger number).\n/// >>> find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double]) -> (Double, Double) {\n    var result: (Double, Double) = (0.0, 0.0)\n    var closest: Double = 0.0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Double = 0.0\n    var b: Double = 0.0\n    var c: Double = 0.0\n    var d: Double = 0.0\n    var e: Double = 0.0\n    var f: Double = 0.0\n    var g: Double = 0.0\n    var h: Double = 0.0\n    var i: Double = 0.0\n    var j: Double = 0.0\n    var k: Double = 0.0\n    var l: Double = 0.0\n    var m: Double = 0.0\n    var n: Double = 0.0\n    var"], ["/// Given array of numbers (of at least two elements), apply a linear transform to that array,\n/// such that the smallest number will become 0 and the largest will become 1\n/// >>> rescale_to_unit(numbers: [1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers: [Double]) -> [Double] {\n    var result: [Double] = []\n    for number in numbers {\n        result.append(number)\n    }\n    return result"], ["/// Filter given array of any swiftthon values only for integers\n/// >>> filter_integers(values: [\"a\", 3.14, 5])\n/// [5]\n/// >>> filter_integers(values: [1, 2, 3, \"abc\", [:] as [AnyHashable : AnyHashable], [] as [AnyHashable]])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n    return values.map { Int(self) }"], ["/// Return length of given string\n/// >>> strlen(string: \"\")\n/// 0\n/// >>> strlen(string: \"abc\")\n/// 3\nfunc strlen(string: String) -> Int {\n    return string.count"], ["/// For a given number n, find the largest number that divides n evenly, smaller than n\n/// >>> largest_divisor(n: 15)\n/// 5\nfunc largest_divisor(n: Int) -> Int {\n    var divisor = 1\n    var remainder = n % divisor\n    while remainder != 0 {\n        divisor *= 2\n        remainder = n % divisor\n    }\n    return divisor"], ["/// Return array of prime factors of given integer in the order from smallest to largest.\n/// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n/// Input number should be equal to the product of all factors\n/// >>> factorize(n: 8)\n/// [2, 2, 2]\n/// >>> factorize(n: 25)\n/// [5, 5]\n/// >>> factorize(n: 70)\n/// [2, 5, 7]\nfunc factorize(n: Int) -> [Int] {\n    var factors = [Int]()\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k"], ["/// From an array of integers, remove all elements that occur more than once.\n/// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates(numbers: [1, 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int] {\n    var result: [Int] = []\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c"], ["/// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n/// >>> flip_case(string: \"Hello\")\n/// \"hELLO\"\nfunc flip_case(string: String) -> String {\n    return string.replacingOccurrences(of: \" \", with: \" \")"], ["/// Concatenate array of strings into a single string\n/// >>> concatenate(strings: [] as [String])\n/// \"\"\n/// >>> concatenate(strings: [\"a\", \"b\", \"c\"])\n/// \"abc\"\nfunc concatenate(strings: [String]) -> String {\n    var result = \"\"\n    for string in strings {\n        result += string\n    }\n    return result"], ["/// Filter an input array of strings only for ones that start with a given prefix.\n/// >>> filter_by_prefix(strings: [] as [String], prefix: \"a\")\n/// [] as [String]\n/// >>> filter_by_prefix(strings: [\"abc\", \"bcd\", \"cde\", \"array\"], prefix: \"a\")\n/// [\"abc\", \"array\"]\nfunc filter_by_prefix(strings: [String], prefix: String) -> [String] {\n    return strings.filter { $0.prefix == prefix }"], ["/// Return only positive numbers in the array.\n/// >>> get_positive(l: [-1, 2, -4, 5, 6])\n/// [2, 5, 6]\n/// >>> get_positive(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// [5, 3, 2, 3, 9, 123, 1]\nfunc get_positive(l: [Int]) -> [Int] {\n    var result: [Int] = []\n    for i in l {\n        if i >= 0 {\n            result.append(i)\n        }\n    }\n    return result"], ["/// Return true if a given number is prime, and false otherwise.\n/// >>> is_prime(n: 6)\n/// false\n/// >>> is_prime(n: 101)\n/// true\n/// >>> is_prime(n: 11)\n/// true\n/// >>> is_prime(n: 13441)\n/// true\n/// >>> is_prime(n: 61)\n/// true\n/// >>> is_prime(n: 4)\n/// false\n/// >>> is_prime(n: 1)\n/// false\nfunc is_prime(n: Int) -> Bool {\n    var isPrime = false\n    for i in 2..<n {\n        if n % i == 0 {\n            isPrime = false\n            break\n        }\n    }\n    return isPrime"], ["/// This function takes an array l and returns an array l' such that\n/// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n/// to the values of the corresponding indicies of l, but sorted.\n/// >>> sort_third(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_third(l: [5, 6, 3, 4, 8, 9, 2])\n/// [2, 6, 3, 4, 8, 9, 5]\nfunc sort_third(l: [Int]) -> [Int] {\n    var result: [Int] = []\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: [Int] = []\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: [Int] = []\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n   "], ["/// Return sorted unique elements in an array\n/// >>> unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int] {\n    var result: [Int] = []\n    var i: Int = 0\n    for element in l {\n        if result.contains(element) {\n            result.remove(element)\n        } else {\n            result.append(element)\n        }\n        i += 1\n    }\n    return result"], ["/// Return maximum element in the array.\n/// >>> max_element(l: [1, 2, 3])\n/// 3\n/// >>> max_element(l: [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n/// 123\nfunc max_element(l: [Int]) -> Int {\n    let max = 0\n    for i in l {\n        if i > max {\n            max = i\n        }\n    }\n    return max"], ["/// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n/// >>> fizz_buzz(n: 50)\n/// 0\n/// >>> fizz_buzz(n: 78)\n/// 2\n/// >>> fizz_buzz(n: 79)\n/// 3\nfunc fizz_buzz(n: Int) -> Int {\n    var result = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n"], ["/// This function takes an array l and returns an array l' such that\n/// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n/// to the values of the even indicies of l, but sorted.\n/// >>> sort_even(l: [1, 2, 3])\n/// [1, 2, 3]\n/// >>> sort_even(l: [5, 6, 3, 4])\n/// [3, 6, 5, 4]\nfunc sort_even(l: [Int]) -> [Int] {\n    var result: [Int] = []\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: [Int] = []\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var z1: Int = 0\n    var z2: Int = 0\n    var z3: Int = 0\n    var z4: Int = 0\n    var z5: Int = 0\n    var z6: Int = 0\n    var z7: Int = 0\n    var z8: Int = 0\n    var z9: Int = 0\n    var z10: Int = 0\n    var z11: Int = 0\n    var z12: Int = 0\n    var z13: Int = 0\n    var z14: Int = 0\n    var z15: Int = 0\n    var z16: Int = 0\n    var z17: Int = 0\n    var z18: Int = 0\n    var z19: Int = 0\n    var z20: Int = 0\n"], ["/// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n/// >>> prime_fib(n: 1)\n/// 2\n/// >>> prime_fib(n: 2)\n/// 3\n/// >>> prime_fib(n: 3)\n/// 5\n/// >>> prime_fib(n: 4)\n/// 13\n/// >>> prime_fib(n: 5)\n/// 89\nfunc prime_fib(n: Int) -> Int {\n    var fib = 1\n    var i = 0\n    var j = 1\n    var k = 1\n    var l = 1\n    var m = 1\n    var n = 1\n    var p = 1\n    var q = 1\n    var r = 1\n    var s = 1\n    var t = 1\n    var u = 1\n    var v = 1\n    var w = 1\n    var x = 1\n    var y = 1\n    var z = 1\n    var z1 = 1\n    var z2 = 1\n    var z3 = 1\n    var z4 = 1\n    var z5 = 1\n    var z6 = 1\n    var z7 = 1\n    var z8 = 1\n    var z9 = 1\n    var z10 = 1\n    var z11 = 1\n    var z12 = 1\n    var z13 = 1\n    var z14 = 1\n    var z15 = 1\n    var z16 = 1\n    var z17 = 1\n    var z18 = 1\n    var z19 = 1\n    var z20 = 1\n    var z21 = 1\n    var z22 = 1\n    var z23 = 1\n    var z24 = 1\n    var z25 = 1\n    var z26 = 1\n    var z27 = 1\n    var z28 = 1\n    var z29 = 1\n    var z30 ="], ["/// triples_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are three distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> triples_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> triples_sum_to_zero(l: [1, 3, -2, 1])\n/// true\n/// >>> triples_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> triples_sum_to_zero(l: [2, 4, -5, 3, 9, 7])\n/// true\n/// >>> triples_sum_to_zero(l: [1])\n/// false\nfunc triples_sum_to_zero(l: [Int]) -> Bool {\n    let sum = 0\n    for i in l {\n        sum += i\n    }\n    return sum == 0"], ["/// Imagine a road that's a perfectly straight infinitely long line.\n/// n cars are driving left to right;  simultaneously, a different set of n cars\n/// are driving right to left.   The two sets of cars start out being very far from\n/// each other.  All cars move in the same speed.  Two cars are said to collide\n/// when a car that's moving left to right hits a car that's moving right to left.\n/// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n/// in their trajectory as if they did not collide.\n/// This function outputs the number of such collisions.\nfunc car_race_collision(n: Int) -> Int {\n    var collisionCount: Int = 0\n    var cars: [Car] = []\n    var cars_left: [Car] = []\n    var cars_right: [Car] = []\n    var cars_left_right: [Car] = []\n    var cars_left_right_left: [Car] = []\n    var cars_left_right_right: [Car] = []\n    var cars_left_right_right_left: [Car] = []\n    var cars_left_right_right_right: [Car] = []\n    var cars_left_right_right_right_left: [Car] = []\n    var cars_left_right_right_right_right: [Car] = []\n    var cars_left_right_right_right_right_left: [Car] = []\n    var cars_left_right_right_right_right_right_left: [Car] = []\n    var cars_left_right_right_right_right_right_right_left: [Car] = []\n    var cars_left_right_right_right_right_right_right_right_left: [Car] = []\n    var cars_left_right_right_right_right_right_right_right_right_left: [Car] = []\n    var cars_left_right_right_right_right_right_right_right_right_right_left: [Car] = []\n    var cars_left_right_right_right_right_right_right_right_"], ["/// Return array with elements incremented by 1.\n/// >>> incr_list(l: [1, 2, 3])\n/// [2, 3, 4]\n/// >>> incr_list(l: [5, 3, 5, 2, 3, 3, 9, 0, 123])\n/// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunc incr_list(l: [Int]) -> [Int] {\n    var incr = 0\n    var result = [Int]()\n    for i in l {\n        incr += i\n        result.append(incr)\n    }\n    return result"], ["/// pairs_sum_to_zero takes an array of integers as an input.\n/// it returns true if there are two distinct elements in the array that\n/// sum to zero, and false otherwise.\n/// >>> pairs_sum_to_zero(l: [1, 3, 5, 0])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(l: [1, 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(l: [2, 4, -5, 3, 5, 7])\n/// true\n/// >>> pairs_sum_to_zero(l: [1])\n/// false\nfunc pairs_sum_to_zero(l: [Int]) -> Bool {\n    var sum = 0\n    for i in l {\n        sum += i\n    }\n    return sum == 0"], ["/// Change numerical base of input number x to base.\n/// return string representation after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(x: 8, base: 3)\n/// \"22\"\n/// >>> change_base(x: 8, base: 2)\n/// \"1000\"\n/// >>> change_base(x: 7, base: 2)\n/// \"111\"\nfunc change_base(x: Int, base: Int) -> String {\n    var result = \"\"\n    var base_num = base\n    var base_num_str = \"\"\n    var base_num_int = Int(base_num)\n    var base_num_int_str = \"\"\n    var base_num_str = \"\"\n    var base_num_str_int = \"\"\n    var base_num_str_int_str = \"\"\n    var base_num_str_int_str_str = \"\"\n    var base_num_str_int_str_str_str = \"\"\n    var base_num_str_int_str_str_str_str = \"\"\n    var base_num_str_int_str_str_str_str = \"\"\n    var base_num_str_int_str_str_str_str_str = \"\"\n    var base_num_str_int_str_str_str_str_str = \"\"\n    var base_num_str_int_str_str_str_str_str_str = \"\"\n    var base_num_str_int_str_str_str_str_str_str = \"\"\n    var base_num_str_int_str_str_str_str_str_str_str = \"\"\n    var base_num_str_int_str_str_str_str_str_str_str = \"\"\n    var base_num_str_int_str_str_str_str_str_str_str = \"\"\n    var base_num_str_int_str_str_str_str_str_str_str_str = \"\"\n    var base_num_str_int_str_str_str_str_str_str_str_str = \"\"\n    var base"], ["/// Given length of a side and high return area for a triangle.\n/// >>> triangle_area(a: 5, h: 3)\n/// 7.5\nfunc triangle_area(a: Int, h: Int) -> Double {\n    let area = 0.0\n    for i in 0..<a {\n        for j in 0..<h {\n            area += 1.0\n        }\n    }\n    return area"], ["/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2) -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n/// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n/// >>> fib4(n: 5)\n/// 4\n/// >>> fib4(n: 6)\n/// 8\n/// >>> fib4(n: 7)\n/// 14\nfunc fib4(n: Int) -> Int {\n    var result = 0\n    for i in 1..<n {\n        result = result + i\n    }\n    return result"], ["/// Return median of elements in the array l.\n/// >>> median(l: [3, 1, 2, 4, 5])\n/// 3\n/// >>> median(l: [-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l: [Int]) -> Double {\n    var median = 0.0\n    for i in 0..<l.count {\n        if l[i] > median {\n            median = l[i]\n        }\n    }\n    return median"], ["/// Checks if given string is a palindrome\n/// >>> is_palindrome(text: \"\")\n/// true\n/// >>> is_palindrome(text: \"aba\")\n/// true\n/// >>> is_palindrome(text: \"aaaaa\")\n/// true\n/// >>> is_palindrome(text: \"zbcd\")\n/// false\nfunc is_palindrome(text: String) -> Bool {\n    let text = text.trimmingCharacters(in: .whitespacesAndNewlines)\n    let result = text.components(separatedBy: .whitespaces).count == text.count\n    return result"], ["/// Return 2^n modulo p (be aware of numerics).\n/// >>> modp(n: 3, p: 5)\n/// 3\n/// >>> modp(n: 1101, p: 101)\n/// 2\n/// >>> modp(n: 0, p: 101)\n/// 1\n/// >>> modp(n: 3, p: 11)\n/// 8\n/// >>> modp(n: 100, p: 101)\n/// 1\nfunc modp(n: Int, p: Int) -> Int {\n    var result = n\n    var i = 0\n    while i < n {\n        result = result * 2 + modp(p, i)\n        i += 1\n    }\n    return result"], ["/// remove_vowels is a function that takes string and returns string without vowels.\n/// >>> remove_vowels(text: \"\")\n/// \"\"\n/// >>> remove_vowels(text: \"abcdef\")\n/// \"bcdf\"\n/// >>> remove_vowels(text: \"aaaaa\")\n/// \"\"\n/// >>> remove_vowels(text: \"aaBAA\")\n/// \"B\"\n/// >>> remove_vowels(text: \"zbcd\")\n/// \"zbcd\"\nfunc remove_vowels(text: String) -> String {\n    let regex = try! NSRegularExpression(pattern: \"([a-z])\", options: [])\n    let result = regex.stringByReplacingMatches(in: text, options: [.matchWildcard], range: NSRange(location: 0, length: text.count)) { result, _ in\n        return result.replacedText\n    }\n    return result.replacedText"], ["/// Return true if all numbers in the array l are below threshold t.\n/// >>> below_threshold(l: [1, 2, 4, 10], t: 100)\n/// true\n/// >>> below_threshold(l: [1, 20, 4, 10], t: 5)\n/// false\nfunc below_threshold(l: [Int], t: Int) -> Bool {\n    let min = Int(l.min())\n    let max = Int(l.max())\n    let diff = min - t\n    if diff < 0 {\n        return true\n    }\n    for i in 0..<l.count {\n        if l[i] < t {\n            return false\n        }\n    }\n    return true"], ["/// Add two numbers x and y\n/// >>> add(x: 2, y: 3)\n/// 5\n/// >>> add(x: 5, y: 7)\n/// 12\nfunc add(x: Int, y: Int) -> Int {\n    return x + y"], ["/// Check if two words have the same characters.\n/// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddeddabc\")\n/// true\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabc\")\n/// true\n/// >>> same_chars(s0: \"dddddddabc\", s1: \"abcd\")\n/// true\n/// >>> same_chars(s0: \"eabcd\", s1: \"dddddddabc\")\n/// false\n/// >>> same_chars(s0: \"abcd\", s1: \"dddddddabce\")\n/// false\n/// >>> same_chars(s0: \"eabcdzzzz\", s1: \"dddzzzzzzzddddabc\")\n/// false\nfunc same_chars(s0: String, s1: String) -> Bool {\n    let chars = s0.utf8.characters\n    let chars2 = s1.utf8.characters\n    return chars == chars2"], ["/// Return n-th Fibonacci number.\n/// >>> fib(n: 10)\n/// 55\n/// >>> fib(n: 1)\n/// 1\n/// >>> fib(n: 8)\n/// 21\nfunc fib(n: Int) -> Int {\n    var result: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 1\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 1\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var"], ["/// brackets is a string of \"<\" and \">\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets: \"<\")\n/// false\n/// >>> correct_bracketing(brackets: \"<>\")\n/// true\n/// >>> correct_bracketing(brackets: \"<<><>>\")\n/// true\n/// >>> correct_bracketing(brackets: \"><<>\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n    var result: Bool = false\n    for bracket in brackets {\n        if bracket.isEmpty {\n            result = true\n            break\n        }\n        if result {\n            result = false\n            break\n        }\n        if bracket == \"<\" {\n            result = true\n            break\n        }\n        if bracket == \">\" {\n            result = true\n            break\n        }\n        if bracket == \"<<\" {\n            result = true\n            break\n        }\n        if bracket == \">>\" {\n            result = true\n            break\n        }\n    }\n    return result"], ["/// Return true is array elements are monotonically increasing or decreasing.\n/// >>> monotonic(l: [1, 2, 4, 20])\n/// true\n/// >>> monotonic(l: [1, 20, 4, 10])\n/// false\n/// >>> monotonic(l: [4, 1, 0, -10])\n/// true\nfunc monotonic(l: [Int]) -> Bool {\n    return l.count == 1 &&\n        l[0] == monotonic(l[0])"], ["/// Return sorted unique common elements for two arrays.\n/// >>> common(l1: [1, 4, 3, 34, 653, 2, 5], l2: [5, 7, 1, 5, 9, 653, 121])\n/// [1, 5, 653]\n/// >>> common(l1: [5, 3, 2, 8], l2: [3, 2])\n/// [2, 3]\nfunc common(l1: [Int], l2: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for l1 in l1 {\n        for l2 in l2 {\n            if l1 == l2 {\n                result.append(l1)\n            } else {\n                result.append(l2)\n            }\n            i++\n        }\n    }\n    return result"], ["/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n/// >>> largest_prime_factor(n: 13195)\n/// 29\n/// >>> largest_prime_factor(n: 2048)\n/// 2\nfunc largest_prime_factor(n: Int) -> Int {\n    var result: Int = 1\n    var i: Int = 1\n    var j: Int = 1\n    var k: Int = 1\n    var l: Int = 1\n    var m: Int = 1\n    var n: Int = 1\n    var p: Int = 1\n    var q: Int = 1\n    var r: Int = 1\n    var s: Int = 1\n    var t: Int = 1\n    var u: Int = 1\n    var v: Int = 1\n    var w: Int = 1\n    var x: Int = 1\n    var y: Int = 1\n    var z: Int = 1\n    var a: Int = 1\n    var b: Int = 1\n    var c: Int = 1\n    var d: Int = 1\n    var e: Int = 1\n    var f: Int = 1\n    var g: Int = 1\n    var h: Int = 1\n    var i: Int = 1\n    var j: Int = 1\n    var k: Int = 1\n    var l: Int = 1\n    var m: Int = 1\n    var n: Int = 1\n    var p: Int = 1\n    var q: Int = 1\n    var r: Int = 1\n    var s: Int = 1\n    var t: Int = 1\n    var u: Int = 1\n    var v: Int = 1\n    var w: Int = 1\n    var x: Int = 1\n    var y: Int = 1\n    var z: Int = 1\n    var a: Int = 1\n    var b: Int = 1\n    var c: Int = 1\n    var d: Int = 1\n    var e: Int = 1"], ["/// sum_to_n is a function that sums numbers from 1 to n.\n/// >>> sum_to_n(n: 30)\n/// 465\n/// >>> sum_to_n(n: 100)\n/// 5050\n/// >>> sum_to_n(n: 5)\n/// 15\n/// >>> sum_to_n(n: 10)\n/// 55\n/// >>> sum_to_n(n: 1)\n/// 1\nfunc sum_to_n(n: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    return n + sum_to_n(n - 1)"], ["/// brackets is a string of \"(\" and \")\".\n/// return true if every opening bracket has a corresponding closing bracket.\n/// >>> correct_bracketing(brackets: \"(\")\n/// false\n/// >>> correct_bracketing(brackets: \"()\")\n/// true\n/// >>> correct_bracketing(brackets: \"(()())\")\n/// true\n/// >>> correct_bracketing(brackets: \")(()\")\n/// false\nfunc correct_bracketing(brackets: String) -> Bool {\n    var result: Bool = false\n    var open: [String] = []\n    var close: [String] = []\n    var openIndex: Int = 0\n    var closeIndex: Int = 0\n    var openCount: Int = 0\n    var closeCount: Int = 0\n    var currentIndex: Int = 0\n    var currentOpenIndex: Int = 0\n    var currentCloseIndex: Int = 0\n    var currentOpenCount: Int = 0\n    var currentCloseCount: Int = 0\n    var currentIndex: Int = 0\n    var currentOpenIndex: Int = 0\n    var currentCloseIndex: Int = 0\n    var currentOpenCount: Int = 0\n    var currentCloseCount: Int = 0\n    var currentIndex: Int = 0\n    var currentOpenIndex: Int = 0\n    var currentCloseIndex: Int = 0\n    var currentOpenCount: Int = 0\n    var currentCloseCount: Int = 0\n    var currentIndex: Int = 0\n    var currentOpenIndex: Int = 0\n    var currentCloseIndex: Int = 0\n    var currentOpenCount: Int = 0\n    var currentCloseCount: Int = 0\n    var currentIndex: Int = 0\n    var currentOpenIndex: Int = 0\n    var currentCloseIndex: Int = 0\n    var currentOpenCount: Int = 0\n    var currentCloseCount: Int = 0\n    var currentIndex: Int = 0\n    var currentOpenIndex: Int = 0\n    var currentCloseIndex: Int = 0\n    var currentOpenCount: Int = 0\n    var currentCloseCount: Int = 0\n   "], ["/// xs represent coefficients of a polynomial.\n/// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n/// Return derivative of this polynomial in the same form.\n/// >>> derivative(xs: [3, 1, 2, 4, 5])\n/// [1, 4, 12, 20]\n/// >>> derivative(xs: [1, 2, 3])\n/// [2, 6]\nfunc derivative(xs: [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<xs.count {\n        result.append(xs[i] * result[i])\n    }\n    return result"], ["/// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n/// fibfib(0) == 0\n/// fibfib(1) == 0\n/// fibfib(2) == 1\n/// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n/// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n/// >>> fibfib(n: 1)\n/// 0\n/// >>> fibfib(n: 5)\n/// 4\n/// >>> fibfib(n: 8)\n/// 24\nfunc fibfib(n: Int) -> Int {\n    var fib = 0\n    for i in 1..<n {\n        fib = fib + fib\n    }\n    return fib"], ["/// Write a function vowels_count which takes a string representing\n/// a word as input and returns the number of vowels in the string.\n/// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(s: \"abcde\")\n/// 2\n/// >>> vowels_count(s: \"ACEDY\")\n/// 3\nfunc vowels_count(s: String) -> Int {\n    var vowels = 0\n    var i = 0\n    for c in s {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            vowels += 1\n        }\n        if c == 'y' {\n            vowels += 1\n        }\n        i += 1\n    }\n    return vowels"], ["/// Circular shift the digits of the integer x, shift the digits right by shift\n/// and return the result as a string.\n/// If shift > number of digits, return digits reversed.\n/// >>> circular_shift(x: 12, shift: 1)\n/// \"21\"\n/// >>> circular_shift(x: 12, shift: 2)\n/// \"12\"\nfunc circular_shift(x: Int, shift: Int) -> String {\n    var result = \"\"\n    var i = 0\n    while i < shift {\n        result += x\n        i += 1\n    }\n    return result"], ["/// Task\n/// Write a function that takes a string as input and returns the sum of the upper characters only'\n/// ASCII codes.\n/// Examples:\n/// >>> digitSum(s: \"\")\n/// 0\n/// >>> digitSum(s: \"abAB\")\n/// 131\n/// >>> digitSum(s: \"abcCd\")\n/// 67\n/// >>> digitSum(s: \"helloE\")\n/// 69\n/// >>> digitSum(s: \"woArBld\")\n/// 131\n/// >>> digitSum(s: \"aAaaaXa\")\n/// 153\nfunc digitSum(s: String) -> Int {\n    var sum = 0\n    for i in 0..<s.characters.count {\n        sum += s.characters[i]\n    }\n    return sum"], ["/// In this task, you will be given a string that represents a number of apples and oranges \n/// that are distributed in a basket of fruit this basket contains \n/// apples, oranges, and mango fruits. Given the string that represents the total number of \n/// the oranges and apples and an integer that represent the total number of the fruits \n/// in the basket return the number of the mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(s: \"5 apples and 6 oranges\", n: 19)\n/// 8\n/// >>> fruit_distribution(s: \"0 apples and 1 oranges\", n: 3)\n/// 2\n/// >>> fruit_distribution(s: \"2 apples and 3 oranges\", n: 100)\n/// 95\n/// >>> fruit_distribution(s: \"100 apples and 1 oranges\", n: 120)\n/// 19\nfunc fruit_distribution(s: String, n: Int) -> Int {\n    var total = 0\n    var fruitCount = 0\n    for i in 0..<n {\n        var fruit = String(s.characters.first!)\n        if fruit == \"O\" {\n            total += 1\n        } else {\n            fruitCount += 1\n        }\n    }\n    return total"], ["/// \"Given an array representing a branch of a tree that has non-negative integer nodes\n/// your task is to pluck one of the nodes and return it.\n/// The plucked node should be the node with the smallest even value.\n/// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n/// The plucked node should be returned in an array, [ smalest_value, its index ],\n/// If there are no even values or the given array is empty, return [].\n/// Example 1:\n/// >>> pluck(arr: [4, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n/// Example 2:\n/// >>> pluck(arr: [1, 2, 3])\n/// [2, 1]\n/// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n/// Example 3:\n/// >>> pluck(arr: [] as [Int])\n/// [] as [Int]\n/// Example 4:\n/// >>> pluck(arr: [5, 0, 3, 0, 4, 2])\n/// [0, 1]\n/// Explanation: 0 is the smallest value, but  there are two zeros,\n/// so we will choose the first zero, which has the smallest index.\n/// Constraints:\n/// * 1 <= nodes.length <= 10000\n/// * 0 <= node.value\nfunc pluck(arr: [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    for node in arr {\n        if node.value == 0 {\n            result.append(node)\n        } else {\n            result.append(i)\n            i += 1\n        }\n    }\n    return result"], ["/// You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n/// zero, and has a frequency greater than or equal to the value of the integer itself. \n/// The frequency of an integer is the number of times it appears in the array.\n/// If no such a value exist, return -1.\n/// Examples:\n/// >>> search(lst: [4, 1, 2, 2, 3, 1])\n/// 2\n/// >>> search(lst: [1, 2, 2, 3, 3, 3, 4, 4, 4])\n/// 3\n/// >>> search(lst: [5, 5, 4, 4, 4])\n/// -1\nfunc search(lst: [Int]) -> Int {\n    var result: Int = -1\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var"], ["/// Given array of integers, return array in strange order.\n/// Strange sorting, is when you start with the minimum value,\n/// then maximum of the remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(lst: [1, 2, 3, 4])\n/// [1, 4, 2, 3]\n/// >>> strange_sort_list(lst: [5, 5, 5, 5])\n/// [5, 5, 5, 5]\n/// >>> strange_sort_list(lst: [] as [Int])\n/// [] as [Int]\nfunc strange_sort_list(lst: [Int]) -> [Int] {\n    var result: [Int] = []\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int"], ["/// Given the lengths of the three sides of a triangle. Return the area of\n/// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when the sum of any two sides is greater \n/// than the third side.\n/// Example:\n/// >>> triangle_area(a: 3, b: 4, c: 5)\n/// 6.0\n/// >>> triangle_area(a: 1, b: 2, c: 10)\n/// -1\nfunc triangle_area(a: Int, b: Int, c: Int) -> Double {\n    if a == b || a == c || b == c {\n        return 0.0\n    }\n    let a1 = a - b\n    let b1 = b - c\n    let c1 = c - a\n    let a2 = a - b1\n    let b2 = b - c1\n    let c2 = c - a1\n    let a3 = a1 + b2\n    let b3 = b1 + c2\n    let c3 = c1 + a2\n    let a4 = a2 + b3\n    let b4 = b1 + c3\n    let c4 = c1 + a3\n    let a5 = a3 + b4\n    let b5 = b2 + c4\n    let c5 = c1 + a4\n    let a6 = a4 + b5\n    let b6 = b2 + c5\n    let c6 = c1 + a5\n    let a7 = a5 + b6\n    let b7 = b2 + c6\n    let c7 = c1 + a6\n    let a8 = a6 + b7\n    let b8 = b2 + c7\n    let c8 = c1 + a7\n    let a9 = a7 + b8\n    let b9 = b2 + c8\n    let c9 = c1 + a8\n    let a10 = a8 + b9\n    let b10 = b2 + c9\n    let c10 = c1 + a9\n    let a11 = a9 + b10\n   "], ["/// Write a function that returns true if the object q will fly, and false otherwise.\n/// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n/// Example:\n/// >>> will_it_fly(q: [1, 2], w: 5)\n/// false\n/// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n/// >>> will_it_fly(q: [3, 2, 3], w: 1)\n/// false\n/// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n/// >>> will_it_fly(q: [3, 2, 3], w: 9)\n/// true\n/// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n/// >>> will_it_fly(q: [3], w: 5)\n/// true\n/// # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q: [Int], w: Int) -> Bool {\n    var sum = 0\n    for i in q {\n        sum += i\n    }\n    var max = sum\n    for i in q {\n        if sum > max {\n            max = sum\n        }\n    }\n    return max <= w"], ["/// Given an array arr of integers, find the minimum number of elements that\n/// need to be changed to make the array palindromic. A palindromic array is an array that\n/// is read the same backwards and forwards. In one change, you can change one element to any other element.\n/// For example:\n/// >>> smallest_change(arr: [1, 2, 3, 5, 4, 7, 9, 6])\n/// 4\n/// >>> smallest_change(arr: [1, 2, 3, 4, 3, 2, 2])\n/// 1\n/// >>> smallest_change(arr: [1, 2, 3, 2, 1])\n/// 0\nfunc smallest_change(arr: [Int]) -> Int {\n    var smallestChange = arr.minimum\n    for i in arr.indices {\n        smallestChange = smallestChange.plus(i)\n    }\n    return smallestChange"], ["/// Write a function that accepts two arrays of strings and returns the array that has \n/// total number of chars in the all strings of the array less than the other array.\n/// if the two arrays have the same number of chars, return the first array.\n/// Examples\n/// >>> total_match(lst1: [] as [String], lst2: [] as [String])\n/// [] as [String]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"Hi\"])\n/// [\"hI\", \"Hi\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hi\", \"hi\", \"admin\", \"project\"])\n/// [\"hi\", \"admin\"]\n/// >>> total_match(lst1: [\"hi\", \"admin\"], lst2: [\"hI\", \"hi\", \"hi\"])\n/// [\"hI\", \"hi\", \"hi\"]\n/// >>> total_match(lst1: [\"4\"], lst2: [\"1\", \"2\", \"3\", \"4\", \"5\"])\n/// [\"4\"]\nfunc total_match(lst1: [String], lst2: [String]) -> [String] {\n    var result: [String] = []\n    for i in 0..<lst1.count {\n        var match = false\n        for j in 0..<lst2.count {\n            if lst1[i] == lst2[j] {\n                match = true\n                break\n            }\n        }\n        if !match {\n            result.append(lst1[i])\n        }\n    }\n    return result"], ["/// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then 100. \n/// Example:\n/// >>> is_multiply_prime(a: 30)\n/// true\n/// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a: Int) -> Bool {\n    if a == 1 {\n        return false\n    }\n    if a == 2 {\n        return false\n    }\n    if a == 3 {\n        return false\n    }\n    if a == 5 {\n        return false\n    }\n    if a == 11 {\n        return false\n    }\n    if a == 13 {\n        return false\n    }\n    if a == 17 {\n        return false\n    }\n    if a == 19 {\n        return false\n    }\n    if a == 23 {\n        return false\n    }\n    if a == 29 {\n        return false\n    }\n    if a == 31 {\n        return false\n    }\n    if a == 37 {\n        return false\n    }\n    if a == 41 {\n        return false\n    }\n    if a == 43 {\n        return false\n    }\n    if a == 47 {\n        return false\n    }\n    if a == 49 {\n        return false\n    }\n    if a == 53 {\n        return false\n    }\n    if a == 57 {\n        return false\n    }\n    if a == 61 {\n        return false\n    }\n    if a == 63 {\n        return false\n    }\n    if a == 67 {\n        return false\n    }\n    if a == 71 {\n        return false\n    }\n    if a == 73 {\n        return false\n    }\n    if a == 77 {\n        return false\n    }\n    if a == 81 {\n        return false\n    }\n    if a == 83 {\n        return false\n    }\n    if a"], ["/// Your task is to write a function that returns true if a number x is a simple\n/// power of n and false in other cases.\n/// x is a simple power of n if n**int=x\n/// For example:\n/// >>> is_simple_power(x: 1, n: 4)\n/// true\n/// >>> is_simple_power(x: 2, n: 2)\n/// true\n/// >>> is_simple_power(x: 8, n: 2)\n/// true\n/// >>> is_simple_power(x: 3, n: 2)\n/// false\n/// >>> is_simple_power(x: 3, n: 1)\n/// false\n/// >>> is_simple_power(x: 5, n: 3)\n/// false\nfunc is_simple_power(x: Int, n: Int) -> Bool {\n    if x == n {\n        return true\n    }\n    if n == 1 {\n        return false\n    }\n    if n == 2 {\n        return false\n    }\n    if n == 3 {\n        return false\n    }\n    if n == 4 {\n        return false\n    }\n    if n == 5 {\n        return false\n    }\n    if n == 6 {\n        return false\n    }\n    if n == 7 {\n        return false\n    }\n    if n == 8 {\n        return false\n    }\n    if n == 9 {\n        return false\n    }\n    if n == 10 {\n        return false\n    }\n    if n == 11 {\n        return false\n    }\n    if n == 12 {\n        return false\n    }\n    if n == 13 {\n        return false\n    }\n    if n == 14 {\n        return false\n    }\n    if n == 15 {\n        return false\n    }\n    if n == 16 {\n        return false\n    }\n    if n == 17 {\n        return false\n    }\n    if n == 18 {\n        return false\n    }\n    if n == 19 {\n        return false\n    }\n   "], ["/// Write a function that takes an integer a and returns true \n/// if this ingeger is a cube of some integer number.\n/// Note: you may assume the input is always valid.\n/// Examples:\n/// >>> iscube(a: 1)\n/// true\n/// >>> iscube(a: 2)\n/// false\n/// >>> iscube(a: -1)\n/// true\n/// >>> iscube(a: 64)\n/// true\n/// >>> iscube(a: 0)\n/// true\n/// >>> iscube(a: 180)\n/// false\nfunc iscube(a: Int) -> Bool {\n    if a < 0 {\n        return false\n    }\n    if a > 180 {\n        return false\n    }\n    return a % 2 == 0"], ["/// You have been tasked to write a function that receives \n/// a hexadecimal number as a string and counts the number of hexadecimal \n/// digits that are primes (prime number, or a prime, is a natural number \n/// greater than 1 that is not a product of two smaller natural numbers).\n/// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n/// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n/// So you have to determine a number of the following digits: 2, 3, 5, 7, \n/// B (=decimal 11), D (=decimal 13).\n/// Note: you may assume the input is always correct or empty string, \n/// and symbols A,B,C,D,E,F are always uppercase.\n/// Examples:\n/// >>> hex_key(num: \"AB\")\n/// 1\n/// >>> hex_key(num: \"1077E\")\n/// 2\n/// >>> hex_key(num: \"ABED1A33\")\n/// 4\n/// >>> hex_key(num: \"123456789ABCDEF0\")\n/// 6\n/// >>> hex_key(num: \"2020\")\n/// 2\nfunc hex_key(num: String) -> Int {\n    var hex_digits = [String]()\n    var hex_digits_count = 0\n    var hex_digits_count_prime = 0\n    var hex_digits_count_even = 0\n    var hex_digits_count_odd = 0\n    var hex_digits_count_odd_prime = 0\n    var hex_digits_count_even_prime = 0\n    var hex_digits_count_even_odd = 0\n    var hex_digits_count_odd_even = 0\n    var hex_digits_count_odd_even_prime = 0\n    var hex_digits_"], ["/// You will be given a number in decimal form and your task is to convert it to\n/// binary format. The function should return a string, with each character representing a binary\n/// number. Each character in the string will be '0' or '1'.\n/// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n/// The extra characters are there to help with the format.\n/// Examples:\n/// >>> decimal_to_binary(decimal: 15)\n/// \"db1111db\"\n/// >>> decimal_to_binary(decimal: 32)\n/// \"db100000db\"\nfunc decimal_to_binary(decimal: Int) -> String {\n    var result: String = \"\"\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t"], ["/// You are given a string s.\n/// Your task is to check if the string is hapswift or not.\n/// A string is hapswift if its length is at least 3 and every 3 consecutive letters are distinct\n/// For example:\n/// >>> is_happy(s: \"a\")\n/// false\n/// >>> is_happy(s: \"aa\")\n/// false\n/// >>> is_happy(s: \"abcd\")\n/// true\n/// >>> is_happy(s: \"aabb\")\n/// false\n/// >>> is_happy(s: \"adb\")\n/// true\n/// >>> is_happy(s: \"xyy\")\n/// false\nfunc is_happy(s: String) -> Bool {\n    var length = s.length\n    for i in 0 ..< length {\n        if s[i] == 'a' || s[i] == 'b' || s[i] == 'c' || s[i] == 'd' || s[i] == 'e' || s[i] == 'f' || s[i] == 'g' || s[i] == 'h' || s[i] == 'i' || s[i] == 'j' || s[i] == 'k' || s[i] == 'l' || s[i] == 'm' || s[i] == 'n' || s[i] == 'o' || s[i] == 'p' || s[i] == 'q' || s[i] == 'r' || s[i] == 's' || s[i] == 't' || s[i] == 'u' || s[i] == 'v' || s[i] == 'w' || s[i] == 'x' || s[i] == 'y' || s[i] == 'z' || s[i] == 'a' || s[i] == 'b' || s[i] == 'c' || s[i] == 'd' || s[i] == 'e' || s[i] == 'f' || s[i] == 'g' || s[i] == 'h' || s[i] == 'i' || s[i]"], ["/// It is the last week of the semester and the teacher has to give the grades\n/// to students. The teacher has been making her own algorithm for grading.\n/// The only problem is, she has lost the code she used for grading.\n/// She has given you an array of GPAs for some students and you have to write \n/// a function that can output an array of letter grades using the following table:\n/// GPA       |    Letter grade\n/// 4.0                A+\n/// > 3.7                A \n/// > 3.3                A- \n/// > 3.0                B+\n/// > 2.7                B \n/// > 2.3                B-\n/// > 2.0                C+\n/// > 1.7                C\n/// > 1.3                C-\n/// > 1.0                D+ \n/// > 0.7                D \n/// > 0.0                D-\n/// 0.0                E\n/// Example:\n/// >>> numerical_letter_grade(grades: [4.0, 3, 1.7, 2, 3.5])\n/// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunc numerical_letter_grade(grades: [Double]) -> [String] {\n    var letter_grades: [String] = []\n    for grade in grades {\n        if grade >= 4.0 {\n            letter_grades.append(\"A+\")\n        } else if grade >= 3.7 {\n            letter_grades.append(\"A\")\n        } else if grade >= 3.3 {\n            letter_grades.append(\"A-\")\n        } else if grade >= 3.0 {\n            letter_grades.append(\"B+\")\n        } else if grade >= 2.7 {\n            letter_grades.append(\"B\")\n        } else if grade >= 2.3 {\n            letter_grades.append(\"B-\")\n        } else if grade >= 2.0 {\n            letter_grades.append(\"C+\")\n        } else if grade >= 1.7 {\n            letter_grades.append"], ["/// Write a function that takes a string and returns true if the string\n/// length is a prime number or false otherwise\n/// Examples\n/// >>> prime_length(string: \"Hello\")\n/// true\n/// >>> prime_length(string: \"abcdcba\")\n/// true\n/// >>> prime_length(string: \"kittens\")\n/// true\n/// >>> prime_length(string: \"orange\")\n/// false\nfunc prime_length(string: String) -> Bool {\n    let length = Int(string.count)\n    if length % 2 == 0 {\n        return false\n    }\n    return true"], ["/// Given a positive integer n, return the count of the numbers of n-digit\n/// positive integers that start or end with 1.\nfunc starts_one_ends(n: Int) -> Int {\n\tvar i: Int = 1\n\tvar j: Int = n\n\tvar k: Int = 0\n\tvar l: Int = 0\n\tvar m: Int = 0\n\tvar n: Int = 0\n\tvar o: Int = 0\n\tvar p: Int = 0\n\tvar q: Int = 0\n\tvar r: Int = 0\n\tvar s: Int = 0\n\tvar t: Int = 0\n\tvar u: Int = 0\n\tvar v: Int = 0\n\tvar w: Int = 0\n\tvar x: Int = 0\n\tvar y: Int = 0\n\tvar z: Int = 0\n\tvar a: Int = 0\n\tvar b: Int = 0\n\tvar c: Int = 0\n\tvar d: Int = 0\n\tvar e: Int = 0\n\tvar f: Int = 0\n\tvar g: Int = 0\n\tvar h: Int = 0\n\tvar i: Int = 0\n\tvar j: Int = 0\n\tvar k: Int = 0\n\tvar l: Int = 0\n\tvar m: Int = 0\n\tvar n: Int = 0\n\tvar o: Int = 0\n\tvar p: Int = 0\n\tvar q: Int = 0\n\tvar r: Int = 0\n\tvar s: Int = 0\n\tvar t: Int = 0\n\tvar u: Int = 0\n\tvar v: Int = 0\n\tvar w: Int = 0\n\tvar x: Int = 0\n\tvar y: Int = 0\n\tvar z: Int = 0\n\tvar a: Int = 0\n\tvar b: Int = 0\n\tvar c: Int = 0\n\tvar d: Int = 0\n\tvar e: Int = 0\n\tvar f: Int = 0\n\tvar g: Int = 0\n\tvar h: Int = 0"], ["/// Given a positive integer N, return the total sum of its digits in binary.\n/// Example\n/// >>> solve(N: 1000)\n/// \"1\"\n/// >>> solve(N: 150)\n/// \"110\"\n/// >>> solve(N: 147)\n/// \"1100\"\n/// Variables:\n/// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n/// Output:\n/// a string of binary number\nfunc solve(N: Int) -> String {\n    var result = \"\"\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j ="], ["/// Given a non-empty array of integers lst. add the even elements that are at odd indices..\n/// Examples:\n/// >>> add(lst: [4, 2, 6, 7])\n/// 2\nfunc add(lst: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n        sum += lst[i]\n    }\n    return sum"], ["/// Write a function that takes a string and returns an ordered version of it.\n/// Ordered version of string, is a string where all words (separated by space)\n/// are replaced by a new word where all the characters arranged in\n/// ascending order based on ascii value.\n/// Note: You should keep the order of words and blank spaces in the sentence.\n/// For example:\n/// >>> anti_shuffle(s: \"Hi\")\n/// \"Hi\"\n/// >>> anti_shuffle(s: \"hello\")\n/// \"ehllo\"\n/// >>> anti_shuffle(s: \"Hello World!!!\")\n/// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s: String) -> String {\n    var newSentence = s\n    var newSentenceArray = []\n    for i in 0..<s.count {\n        var newSentenceArrayIndex = i\n        var newSentenceArrayIndex2 = i\n        var newSentenceArrayIndex3 = i\n        var newSentenceArrayIndex4 = i\n        var newSentenceArrayIndex5 = i\n        var newSentenceArrayIndex6 = i\n        var newSentenceArrayIndex7 = i\n        var newSentenceArrayIndex8 = i\n        var newSentenceArrayIndex9 = i\n        var newSentenceArrayIndex10 = i\n        var newSentenceArrayIndex11 = i\n        var newSentenceArrayIndex12 = i\n        var newSentenceArrayIndex13 = i\n        var newSentenceArrayIndex14 = i\n        var newSentenceArrayIndex15 = i\n        var newSentenceArrayIndex16 = i\n        var newSentenceArrayIndex17 = i\n        var newSentenceArrayIndex18 = i\n        var newSentenceArrayIndex19 = i\n        var newSentenceArrayIndex20 = i\n        var newSentenceArrayIndex21 = i\n        var newSentenceArrayIndex22 = i\n        var newSentenceArrayIndex23 = i\n        var newSentenceArrayIndex24 = i\n        var newSentenceArrayIndex25 = i\n        var"], ["/// You are given a 2 dimensional data, as a nested arrays,\n/// which is similar to matrix, however, unlike matrices,\n/// each row may contain a different number of columns.\n/// Given lst, and integer x, find integers x in the array,\n/// and return array of tuples, [(x1, y1), (x2, y2) ...] such that\n/// each tuple is a coordinate - (row, columns), starting with 0.\n/// Sort coordinates initially by rows in ascending order.\n/// Also, sort coordinates of the row by columns in descending order.\n/// Examples:\n/// >>> get_row(lst: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], x: 1)\n/// [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n/// >>> get_row(lst: [] as [[Int]], x: 1)\n/// [] as [(Int, Int)]\n/// >>> get_row(lst: [[] as [Int], [1], [1, 2, 3]], x: 3)\n/// [(2, 2)]\nfunc get_row(lst: [[Int]], x: Int) -> [(Int, Int)] {\n    var result: [(Int, Int)] = []\n    var i = 0\n    var j = 0\n    for row in lst {\n        for col in row {\n            if i == x {\n                result.append((row, col))\n            }\n            i += 1\n        }\n        j += 1\n    }\n    return result"], ["/// Given an array of non-negative integers, return a coswift of the given array after sorting,\n/// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n/// or sort it in descending order if the sum( first index value, last index value) is even.\n/// Note:\n/// * don't change the given array.\n/// Examples:\n/// >>> sort_array(array: [] as [Int])\n/// [] as [Int]\n/// >>> sort_array(array: [5])\n/// [5]\n/// >>> sort_array(array: [2, 4, 3, 0, 1, 5])\n/// [0, 1, 2, 3, 4, 5]\n/// >>> sort_array(array: [2, 4, 3, 0, 1, 5, 6])\n/// [6, 5, 4, 3, 2, 1, 0]\nfunc sort_array(array: [Int]) -> [Int] {\n    var result = array\n    var i = 0\n    var j = 0\n    var sum = 0\n    var lastIndex = 0\n    var firstIndex = 0\n    var lastIndex = array.count - 1\n    var firstIndex = 0\n    var lastIndex = array.count - 1\n    var sum = 0\n    var lastIndex = array.count - 1\n    var firstIndex = 0\n    var lastIndex = array.count - 1\n    var sum = 0\n    var lastIndex = array.count - 1\n    var firstIndex = 0\n    var lastIndex = array.count - 1\n    var sum = 0\n    var lastIndex = array.count - 1\n    var firstIndex = 0\n    var lastIndex = array.count - 1\n    var sum = 0\n    var lastIndex = array.count - 1\n    var firstIndex = 0\n    var lastIndex = array.count - 1\n    var sum = 0\n    var lastIndex = array.count - 1\n    var firstIndex = 0\n    var lastIndex ="], ["/// Create a function encrypt that takes a string as an argument and\n/// returns a string encrypted with the alphabet being rotated. \n/// The alphabet should be rotated in a manner such that the letters \n/// shift down by two multiplied to two places.\n/// For example:\n/// >>> encrypt(s: \"hi\")\n/// \"lm\"\n/// >>> encrypt(s: \"asdfghjkl\")\n/// \"ewhjklnop\"\n/// >>> encrypt(s: \"gf\")\n/// \"kj\"\n/// >>> encrypt(s: \"et\")\n/// \"ix\"\nfunc encrypt(s: String) -> String {\n    var alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    var rotatedAlphabet = \"\"\n    var rotatedString = \"\"\n    var rotatedStringLength = 0\n    var rotatedStringLength2 = 0\n    var rotatedStringLength3 = 0\n    var rotatedStringLength4 = 0\n    var rotatedStringLength5 = 0\n    var rotatedStringLength6 = 0\n    var rotatedStringLength7 = 0\n    var rotatedStringLength8 = 0\n    var rotatedStringLength9 = 0\n    var rotatedStringLength10 = 0\n    var rotatedStringLength11 = 0\n    var rotatedStringLength12 = 0\n    var rotatedStringLength13 = 0\n    var rotatedStringLength14 = 0\n    var rotatedStringLength15 = 0\n    var rotatedStringLength16 = 0\n    var rotatedStringLength17 = 0\n    var rotatedStringLength18 = 0\n    var rotatedStringLength19 = 0\n    var rotatedStringLength20 = 0\n    var rotatedStringLength21 = 0\n    var rotatedStringLength22 = 0\n    var rotatedStringLength23 = 0\n    var rotatedStringLength24 = 0\n    var rotatedStringLength25 = 0\n    var rotatedStringLength26 = 0\n    var rot"], ["/// You are given an array of integers.\n/// Write a function next_smallest() that returns the 2nd smallest element of the array.\n/// Return nil if there is no such element.\n/// >>> next_smallest(lst: [1, 2, 3, 4, 5])\n/// 2\n/// >>> next_smallest(lst: [5, 1, 4, 3, 2])\n/// 2\n/// >>> next_smallest(lst: [] as [Int])\n/// nil\n/// >>> next_smallest(lst: [1, 1])\n/// nil\nfunc next_smallest(lst: [Int]) -> Int? {\n    var smallest = 0\n    for i in 0..<lst.count {\n        if smallest < i {\n            smallest = i\n        }\n    }\n    return smallest"], ["/// You'll be given a string of words, and your task is to count the number\n/// of boredoms. A boredom is a sentence that starts with the word \"I\".\n/// Sentences are delimited by '.', '?' or '!'.\n/// For example:\n/// >>> is_bored(S: \"Hello world\")\n/// 0\n/// >>> is_bored(S: \"The sky is blue. The sun is shining. I love this weather\")\n/// 1\nfunc is_bored(S: String) -> Int {\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0"], ["/// Create a function that takes 3 numbers.\n/// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n/// Returns false in any other cases.\n/// Examples\n/// >>> any_int(x: 5, y: 2, z: 7)\n/// true\n/// >>> any_int(x: 3, y: 2, z: 2)\n/// false\n/// >>> any_int(x: 3, y: -2, z: 1)\n/// true\n/// >>> any_int(x: 3.6, y: -2.2, z: 2)\n/// false\nfunc any_int(x: Double, y: Double, z: Double) -> Bool {\n    if x == y && y == z {\n        return true\n    }\n    if x == y && y == z {\n        return true\n    }\n    if x == y && y == z {\n        return true\n    }\n    return false"], ["/// Write a function that takes a message, and encodes in such a \n/// way that it swaps case of all letters, replaces all vowels in \n/// the message with the letter that appears 2 places ahead of that \n/// vowel in the english alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode(message: \"test\")\n/// \"TGST\"\n/// >>> encode(message: \"This is a message\")\n/// \"tHKS KS C MGSSCGG\"\nfunc encode(message: String) -> String {\n    var result = message\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var"], ["/// You are given an array of integers.\n/// You need to find the largest prime value and return the sum of its digits.\n/// Examples:\n/// >>> skjkasdkd(lst: [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n/// 10\n/// >>> skjkasdkd(lst: [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n/// 25\n/// >>> skjkasdkd(lst: [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n/// 13\n/// >>> skjkasdkd(lst: [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n/// 11\n/// >>> skjkasdkd(lst: [0, 81, 12, 3, 1, 21])\n/// 3\n/// >>> skjkasdkd(lst: [0, 8, 1, 2, 1, 7])\n/// 7\nfunc skjkasdkd(lst: [Int]) -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n        sum += lst[i]\n    }\n    return sum"], ["/// Implement a function that takes an non-negative integer and returns an array of the first n\n/// integers that are prime numbers and less than n.\n/// for example:\n/// >>> count_up_to(n: 5)\n/// [2, 3]\n/// >>> count_up_to(n: 11)\n/// [2, 3, 5, 7]\n/// >>> count_up_to(n: 0)\n/// [] as [Int]\n/// >>> count_up_to(n: 20)\n/// [2, 3, 5, 7, 11, 13, 17, 19]\n/// >>> count_up_to(n: 1)\n/// [] as [Int]\n/// >>> count_up_to(n: 18)\n/// [2, 3, 5, 7, 11, 13, 17]\nfunc count_up_to(n: Int) -> [Int] {\n    var result: [Int] = []\n    var i: Int = 0\n    while i < n {\n        result.append(i)\n        i += 1\n    }\n    return result"], ["/// Complete the function that takes two integers and returns \n/// the product of their unit digits.\n/// Assume the input is always valid.\n/// Examples:\n/// >>> multiply(a: 148, b: 412)\n/// 16\n/// >>> multiply(a: 19, b: 28)\n/// 72\n/// >>> multiply(a: 2020, b: 1851)\n/// 0\n/// >>> multiply(a: 14, b: -15)\n/// 20\nfunc multiply(a: Int, b: Int) -> Int {\n    var result = 0\n    for i in 0..<a {\n        for j in 0..<b {\n            result = result * i + j\n        }\n    }\n    return result"], ["/// Given a string s, count the number of uppercase vowels in even indices.\n/// For example:\n/// >>> count_upper(s: \"aBCdEf\")\n/// 1\n/// >>> count_upper(s: \"abcdefg\")\n/// 0\n/// >>> count_upper(s: \"dBBE\")\n/// 0\nfunc count_upper(s: String) -> Int {\n    var count = 0\n    for c in s {\n        if c.isUpper {\n            count += 1\n        }\n    }\n    return count"], ["/// Create a function that takes a value (string) representing a number\n/// and returns the closest integer to it. If the number is equidistant\n/// from two integers, round it away from zero.\n/// Examples\n/// >>> closest_integer(value: \"10\")\n/// 10\n/// >>> closest_integer(value: \"15.3\")\n/// 15\n/// Note:\n/// Rounding away from zero means that if the given number is equidistant\n/// from two integers, the one you should return is the one that is the\n/// farthest from zero. For example closest_integer(\"14.5\") should\n/// return 15 and closest_integer(\"-14.5\") should return -15.\nfunc closest_integer(value: String) -> Int {\n\tvar closest = 0\n\tvar closest_integer = 0\n\tvar closest_integer_to_zero = 0\n\tvar closest_integer_to_zero_to_zero = 0\n\tvar closest_integer_to_zero_to_zero_to_zero = 0\n\tvar closest_integer_to_zero_to_zero_to_zero_to_zero = 0\n\tvar closest_integer_to_zero_to_zero_to_zero_to_zero_to_zero = 0\n\tvar closest_integer_to_zero_to_zero_to_zero_to_zero_to_zero = 0\n\tvar closest_integer_to_zero_to_zero_to_zero_to_zero_to_zero_to_zero = 0\n\tvar closest_integer_to_zero_to_zero_to_zero_to_zero_to_zero_to_zero = 0\n\tvar closest_integer_to_zero_to_zero_to_zero_to_zero_to_zero_to_zero_to_zero = 0\n\tvar closest_integer_to_zero_to_zero_to_zero_to_zero_to_zero_to_zero_to_zero = 0\n\tvar closest_integer_to_zero_to_zero_to_zero_to_zero_to_zero_to_zero_to_zero = 0\n\tvar closest_"], ["/// Given a positive integer n, you have to make a pile of n levels of stones.\n/// The first level has n stones.\n/// The number of stones in the next level is:\n/// - the next odd number if n is odd.\n/// - the next even number if n is even.\n/// Return the number of stones in each level in an array, where element at index\n/// i represents the number of stones in the level (i+1).\n/// Examples:\n/// >>> make_a_pile(n: 3)\n/// [3, 5, 7]\nfunc make_a_pile(n: Int) -> [Int] {\n    var pile: [Int] = []\n    for i in 1...n {\n        pile.append(i)\n    }\n    return pile"], ["/// You will be given a string of words separated by commas or spaces. Your task is\n/// to split the string into words and return an array of the words.\n/// For example:\n/// >>> words_string(s: \"Hi, my name is John\")\n/// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n/// >>> words_string(s: \"One, two, three, four, five, six\")\n/// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunc words_string(s: String) -> [String] {\n    var words = [String]()\n    var i = 0\n    var j = 0\n    while i < s.count {\n        var word = s[i]\n        if word == \" \" {\n            words.append(s[j])\n            j += 1\n        } else {\n            words.append(word)\n        }\n        i += 1\n        j += 1\n    }\n    return words"], ["/// This function takes two positive numbers x and y and returns the\n/// biggest even integer number that is in the range [x, y] inclusive. If \n/// there's no such number, then the function should return -1.\n/// For example:\n/// >>> choose_num(x: 12, y: 15)\n/// 14\n/// >>> choose_num(x: 13, y: 12)\n/// -1\nfunc choose_num(x: Int, y: Int) -> Int {\n    let range = Int(x) ..< Int(y)\n    let num = Int(range.max)\n    if num == 0 {\n        return -1\n    }\n    return num"], ["extension Int: Error {}\n        \n/// You are given two positive integers n and m, and your task is to compute the\n/// average of the integers from n through m (including n and m). \n/// Round the answer to the nearest integer and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n/// >>> rounded_avg(n: 1, m: 5)\n/// .success(\"0b11\")\n/// >>> rounded_avg(n: 7, m: 5)\n/// .failure(-1)\n/// >>> rounded_avg(n: 10, m: 20)\n/// .success(\"0b1111\")\n/// >>> rounded_avg(n: 20, m: 33)\n/// .success(\"0b11010\")\nfunc rounded_avg(n: Int, m: Int) -> Result<String, Int> {\n    var avg = 0\n    var i = n\n    var j = m\n    while i <= j {\n        avg += i\n        i += 1\n    }\n    return .success(avg)"], ["/// Given an array of positive integers x. return a sorted array of all \n/// elements that hasn't any even digit.\n/// Note: Returned array should be sorted in increasing order.\n/// For example:\n/// >>> unique_digits(x: [15, 33, 1422, 1])\n/// [1, 15, 33]\n/// >>> unique_digits(x: [152, 323, 1422, 10])\n/// [] as [Int]\nfunc unique_digits(x: [Int]) -> [Int] {\n    var result: [Int] = []\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var x1 = 0\n    var y1 = 0\n    var z1 = 0\n    var x2 = 0\n    var y2 = 0\n    var z2 = 0\n    var x3 = 0\n    var y3 = 0\n    var z3 = 0\n    var x4 = 0\n    var y4 = 0\n    var z4 = 0\n    var x5 = 0\n    var y5 = 0\n    var z5 = 0\n    var x6 = 0\n    var y6 = 0\n    var z6 = 0\n    var x7 = 0\n    var y7 = 0\n    var z7 = 0\n    var x8 = 0\n    var y8 = 0\n    var z8 = 0\n    var x9 = 0\n    var y9 = 0\n    var z9 = 0\n    var x10 = 0\n    var y10 = 0\n"], ["/// Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n/// reverse the resulting array, and then replace each digit by its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(arr: [2, 1, 1, 4, 5, 8, 2, 3])\n/// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n/// If the array is empty, return an empty array:\n/// >>> by_length(arr: [] as [Int])\n/// [] as [String]\n/// If the array has any strange number ignore it:\n/// >>> by_length(arr: [1, -1, 55])\n/// [\"One\"]\nfunc by_length(arr: [Int]) -> [String] {\n    var result = [String]()\n    var i = 0\n    var length = arr.count\n    while i < length {\n        result.append(arr[i])\n        i += 1\n    }\n    return result"], ["/// Implement the function f that takes n as a parameter,\n/// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n/// or the sum of numbers from 1 to i otherwise.\n/// i starts from 1.\n/// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n/// Example:\n/// >>> f(n: 5)\n/// [1, 2, 6, 24, 15]\nfunc f(n: Int) -> [Int] {\n    var result = [Int]()\n    for i in 1..<n {\n        result.append(i)\n    }\n    return result"], ["/// Given a positive integer n, return a tuple that has the number of even and odd\n/// integer palindromes that fall within the range(1, n), inclusive.\n/// Example 1:\n/// >>> even_odd_palindrome(n: 3)\n/// (1, 2)\n/// Explanation:\n/// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n/// Example 2:\n/// >>> even_odd_palindrome(n: 12)\n/// (4, 6)\n/// Explanation:\n/// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n/// Note:\n/// 1. 1 <= n <= 10^3\n/// 2. returned tuple has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n: Int) -> (Int, Int) {\n    var even_odd_palindrome: (Int, Int) = (0, 0)\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var palindrome = 0\n    var palindrome_count = 0\n    var even_odd_palindrome_count = 0\n    var even_odd_palindrome_count_inclusive = 0\n    var even_odd_palindrome_count_exclusive = 0\n    var even_odd_palindrome_count_exclusive_inclusive = 0\n    var even_odd_palindrome_count_exclusive_inclusive = 0\n    var even_odd_palindrome_count_exclusive_inclusive = 0\n    var even_odd_palindrome_count_exclusive_inclusive = 0\n    var even_odd_palindrome_count_exclusive_inclusive = 0\n    var even_"], ["/// Write a function count_nums which takes an array of integers and returns\n/// the number of elements which has a sum of digits > 0.\n/// If a number is negative, then its first signed digit will be negative:\n/// e.g. -123 has signed digits -1, 2, and 3.\n/// >>> count_nums(arr: [] as [Int])\n/// 0\n/// >>> count_nums(arr: [-1, 11, -11])\n/// 1\n/// >>> count_nums(arr: [1, 1, 2])\n/// 3\nfunc count_nums(arr: [Int]) -> Int {\n    var count = 0\n    for i in arr {\n        if i > 0 {\n            count += 1\n        }\n    }\n    return count"], ["/// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n/// numbers in the array will be randomly ordered. Your task is to determine if\n/// it is possible to get an array sorted in non-decreasing order by performing \n/// the following operation on the given array:\n/// You are allowed to perform right shift operation any number of times.\n/// One right shift operation means shifting all elements of the array by one\n/// position in the right direction. The last element of the array will be moved to\n/// the starting position in the array i.e. 0th index. \n/// If it is possible to obtain the sorted array by performing the above operation\n/// then return true else return false.\n/// If the given array is empty then return true.\n/// Note: The given array is guaranteed to have unique elements.\n/// For Example:\n/// >>> move_one_ball(arr: [3, 4, 5, 1, 2])\n/// true\n/// Explanation: By performin 2 right shift operations, non-decreasing order can\n/// be achieved for the given array.\n/// >>> move_one_ball(arr: [3, 5, 4, 1, 2])\n/// false\n/// Explanation:It is not possible to get non-decreasing order for the given\n/// array by performing any number of right shift operations.\nfunc move_one_ball(arr: [Int]) -> Bool {\n    var result: Bool = false\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int ="], ["/// In this problem, you will implement a function that takes two arrays of numbers,\n/// and determines whether it is possible to perform an exchange of elements\n/// between them to make lst1 an array of only even numbers.\n/// There is no limit on the number of exchanged elements between lst1 and lst2.\n/// If it is possible to exchange elements between the lst1 and lst2 to make\n/// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return \"NO\".\n/// For example:\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\n/// \"YES\"\n/// >>> exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4])\n/// \"NO\"\n/// It is assumed that the input arrays will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String {\n    var result = \"NO\"\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n   "], ["/// Given a string representing a space separated lowercase letters, return a dictionary\n/// of the letter with the most repetition and containing the corresponding count.\n/// If several letters have the same occurrence, return all of them.\n/// Example:\n/// >>> histogram(test: \"a b c\")\n/// [\"a\" : 1, \"b\" : 1, \"c\" : 1]\n/// >>> histogram(test: \"a b b a\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"a b c a b\")\n/// [\"a\" : 2, \"b\" : 2]\n/// >>> histogram(test: \"b b b b a\")\n/// [\"b\" : 4]\n/// >>> histogram(test: \"\")\n/// [:] as [String : Int]\nfunc histogram(test: String) -> [String : Int] {\n    var histogram: [String : Int] = [:]\n    var count = 0\n    var countString = \"\"\n    var countString2 = \"\"\n    var countString3 = \"\"\n    var countString4 = \"\"\n    var countString5 = \"\"\n    var countString6 = \"\"\n    var countString7 = \"\"\n    var countString8 = \"\"\n    var countString9 = \"\"\n    var countString10 = \"\"\n    var countString11 = \"\"\n    var countString12 = \"\"\n    var countString13 = \"\"\n    var countString14 = \"\"\n    var countString15 = \"\"\n    var countString16 = \"\"\n    var countString17 = \"\"\n    var countString18 = \"\"\n    var countString19 = \"\"\n    var countString20 = \"\"\n    var countString21 = \"\"\n    var countString22 = \"\"\n    var countString23 = \"\"\n    var countString24 = \"\"\n    var countString25 = \"\"\n    var countString26 = \"\"\n    var countString27 = \"\"\n    var countString28 = \"\"\n    var countString29 = \"\"\n    var countString30 = \"\"\n    var countString31 = \"\"\n    var countString32 = \"\"\n    var countString3"], ["/// Task\n/// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n/// then check if the result string is palindrome.\n/// A string is called palindrome if it reads the same backward as forward.\n/// You should return a tuple containing the result string and true/false for the check.\n/// Example\n/// >>> reverse_delete(s: \"abcde\", c: \"ae\")\n/// (\"bcd\", false)\n/// >>> reverse_delete(s: \"abcdef\", c: \"b\")\n/// (\"acdef\", false)\n/// >>> reverse_delete(s: \"abcdedcba\", c: \"ab\")\n/// (\"cdedc\", true)\nfunc reverse_delete(s: String, c: String) -> (String, Bool) {\n    var result = s\n    var resultLength = s.length\n    var resultIndex = 0\n    var resultIndexLength = resultLength\n    var resultIndex = 0\n    var resultIndexLength = resultIndexLength\n    var result = \"\"\n    var resultLength = result.length\n    var resultIndex = 0\n    var resultIndexLength = resultIndex.length\n    var resultIndex = 0\n    var resultIndexLength = resultIndex.length\n    var result = \"\"\n    var resultLength = result.length\n    var resultIndex = 0\n    var resultIndexLength = resultIndex.length\n    var resultIndex = 0\n    var resultIndexLength = resultIndex.length\n    var resultIndex = 0\n    var resultIndexLength = resultIndex.length\n    var resultIndex = 0\n    var resultIndexLength = resultIndex.length\n    var resultIndex = 0\n    var resultIndexLength = resultIndex.length\n    var resultIndex = 0\n    var resultIndexLength = resultIndex.length\n    var resultIndex = 0\n    var resultIndexLength = resultIndex.length\n    var resultIndex = 0\n    var resultIndexLength = resultIndex.length\n    var resultIndex = 0\n    var resultIndexLength = resultIndex.length\n    var resultIndex = 0\n    var resultIndexLength = resultIndex.length\n    var resultIndex = 0\n    var resultIndexLength = result"], ["/// Given an array of strings, where each string consists of only digits, return an array.\n/// Each element i of the output should be \"the number of odd elements in the\n/// string i of the input.\" where all the i's should be replaced by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(lst: [\"1234567\"])\n/// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n/// >>> odd_count(lst: [\"3\", \"11111111\"])\n/// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunc odd_count(lst: [String]) -> [String] {\n    var result: [String] = []\n    for i in 0..<lst.count {\n        var count = 0\n        for j in 0..<lst[i].count {\n            if j % 2 == 0 {\n                count += 1\n            }\n        }\n        result.append(String(count))\n    }\n    return result"], ["/// Given an array of integers nums, find the minimum sum of any non-empty sub-array\n/// of nums.\n/// Example\n/// >>> minSubArraySum(nums: [2, 3, 4, 1, 2, 4])\n/// 1\n/// >>> minSubArraySum(nums: [-1, -2, -3])\n/// -6\nfunc minSubArraySum(nums: [Int]) -> Int {\n    var min = nums.min()\n    for num in nums {\n        if min < num {\n            min = num\n        }\n    }\n    return min"], ["/// You are given a rectangular grid of wells. Each row represents a single well,\n/// and each 1 in a row represents a single unit of water.\n/// Each well has a corresponding bucket that can be used to extract water from it, \n/// and all buckets have the same capacity.\n/// Your task is to use the buckets to empty the wells.\n/// Output the number of times you need to lower the buckets.\n/// Example 1:\n/// >>> max_fill(grid: [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], capacity: 1)\n/// 6\n/// Example 2:\n/// >>> max_fill(grid: [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], capacity: 2)\n/// 5\n/// Example 3:\n/// >>> max_fill(grid: [[0, 0, 0], [0, 0, 0]], capacity: 5)\n/// 0\n/// Constraints:\n/// * all wells have the same length\n/// * 1 <= grid.length <= 10^2\n/// * 1 <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// * 1 <= capacity <= 10\nfunc max_fill(grid: [[Int]], capacity: Int) -> Int {\n    var max_fill = Int()\n    var i = 0\n    var j = 0\n    var n = grid.length\n    var n_capacity = capacity\n    var n_buckets = 1\n    var n_buckets_capacity = capacity\n    var n_buckets_capacity_capacity = capacity\n    var n_buckets_capacity_capacity_n = capacity\n    var n_buckets_capacity_capacity_n_n = capacity\n    var n_buckets_capacity_capacity_n_n_n = capacity\n    var n_buckets_capacity_capacity_"], ["/// In this Kata, you have to sort an array of non-negative integers according to\n/// number of ones in their binary representation in ascending order.\n/// For similar number of ones, sort based on decimal value.\n/// It must be implemented like this:\n/// >>> sort_array(arr: [1, 5, 2, 3, 4])\n/// [1, 2, 3, 4, 5]\n/// >>> sort_array(arr: [-2, -3, -4, -5, -6])\n/// [-6, -5, -4, -3, -2]\n/// >>> sort_array(arr: [1, 0, 2, 3, 4])\n/// [0, 1, 2, 3, 4]\nfunc sort_array(arr: [Int]) -> [Int] {\n    var result: [Int] = []\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var z1: Int = 0\n    var z2: Int = 0\n    var z3: Int = 0\n    var z4: Int = 0\n    var z5: Int = 0\n    var z6: Int = 0\n    var z7: Int = 0\n    var z8: Int = 0\n    var z9: Int = 0\n    var z10: Int = 0\n    var z11: Int = 0\n    var z12: Int = 0\n    var z13: Int = 0\n    var z14: Int = "], ["/// Given a string s and a natural number n, you have been tasked to implement \n/// a function that returns an array of all words from string s that contain exactly \n/// n consonants, in order these words appear in the string s.\n/// If the string s is empty then the function should return an empty array.\n/// Note: you may assume the input string contains only letters and spaces.\n/// Examples:\n/// >>> select_words(s: \"Mary had a little lamb\", n: 4)\n/// [\"little\"]\n/// >>> select_words(s: \"Mary had a little lamb\", n: 3)\n/// [\"Mary\", \"lamb\"]\n/// >>> select_words(s: \"simple white space\", n: 2)\n/// [] as [String]\n/// >>> select_words(s: \"Hello world\", n: 4)\n/// [\"world\"]\n/// >>> select_words(s: \"Uncle sam\", n: 3)\n/// [\"Uncle\"]\nfunc select_words(s: String, n: Int) -> [String] {\n    var result: [String] = []\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n   "], ["/// You are given a word. Your task is to find the closest vowel that stands between \n/// two consonants from the right side of the word (case sensitive).\n/// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n/// find any vowel met the above condition. \n/// You may assume that the given string contains English letter only.\n/// Example:\n/// >>> get_closest_vowel(word: \"yogurt\")\n/// \"u\"\n/// >>> get_closest_vowel(word: \"FULL\")\n/// \"U\"\n/// >>> get_closest_vowel(word: \"quick\")\n/// \"\"\n/// >>> get_closest_vowel(word: \"ab\")\n/// \"\"\nfunc get_closest_vowel(word: String) -> String {\n    var closestVowel: String?\n    var closestVowelIndex: Int?\n    var closestVowelLength: Int?\n    var closestVowelLengthIndex: Int?\n    var closestVowelLengthIndex = 0\n    var closestVowelIndex = 0\n    var closestVowelIndexLength = 0\n    var closestVowelLength = 0\n    var closestVowelLengthIndex = 0\n    var closestVowelLengthIndex = 0\n    var closestVowelLengthIndex = 0\n    var closestVowelLengthIndex = 0\n    var closestVowelLengthIndex = 0\n    var closestVowelLengthIndex = 0\n    var closestVowelLengthIndex = 0\n    var closestVowelLengthIndex = 0\n    var closestVowelLengthIndex = 0\n    var closestVowelLengthIndex = 0\n    var closestVowelLengthIndex = 0\n    var closestVowelLengthIndex = 0\n    var closestVowelLengthIndex = 0\n    var closestVowelLengthIndex = 0\n    var closestVowelLengthIndex = 0\n    var closestVowelLengthIndex = 0\n    var closestVowelLengthIndex = 0\n    var closestVowelLengthIndex = 0\n    var closestVowelLengthIndex = 0\n    var closestVowelLengthIndex = 0\n    var closestVowelLengthIndex = 0\n    var closestVowelLengthIndex"], ["/// You are given an array of two strings, both strings consist of open\n/// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if it is possible to concatenate the two strings in\n/// some order, that the resulting string will be good.\n/// A string S is considered to be good if and only if all parentheses in S\n/// are balanced. For example: the string '(())()' is good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(lst: [\"()(\", \")\"])\n/// \"Yes\"\n/// >>> match_parens(lst: [\")\", \")\"])\n/// \"No\"\nfunc match_parens(lst: [String]) -> String {\n    var result: String = \"\"\n    var i: Int = 0\n    for item in lst {\n        if i == 0 {\n            result += item\n        } else {\n            if item == \"(\" || item == \")\") {\n                result += \"(\"\n            } else {\n                result += item\n            }\n            i += 1\n        }\n    }\n    return result"], ["/// Given an array arr of integers and a positive integer k, return a sorted array \n/// of length k with the maximum k numbers in arr.\n/// Example 1:\n/// >>> maximum(arr: [-3, -4, 5], k: 3)\n/// [-4, -3, 5]\n/// Example 2:\n/// >>> maximum(arr: [4, -4, 4], k: 2)\n/// [4, 4]\n/// Example 3:\n/// >>> maximum(arr: [-3, 2, 1, 2, -1, -2, 1], k: 1)\n/// [2]\n/// Note:\n/// 1. The length of the array will be in the range of [1, 1000].\n/// 2. The elements in the array will be in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfunc maximum(arr: [Int], k: Int) -> [Int] {\n    var max: [Int] = []\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var len: Int = 0\n    var maxLen: Int = 0\n    var iLen: Int = 0\n    var jLen: Int = 0\n    var kLen: Int = 0\n    var lenLen: Int = 0\n    var maxLenLen: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var len: Int = 0\n    var maxLen: Int = 0\n    var iLen: Int = 0\n    var jLen: Int = 0\n    var kLen: Int = 0\n    var lenLen: Int = 0\n    var maxLenLen: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var len: Int = 0\n    var maxLen: Int = 0\n    var iLen: Int = 0\n    var jLen: Int = 0\n    var k"], ["/// Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n/// Examples\n/// >>> solution(lst: [5, 8, 7, 1])\n/// 12\n/// >>> solution(lst: [3, 3, 3, 3, 3])\n/// 9\n/// >>> solution(lst: [30, 13, 24, 321])\n/// 0\nfunc solution(lst: [Int]) -> Int {\n    var sum = 0\n    for element in lst {\n        sum += element\n    }\n    return sum"], ["/// Given a non-empty array of integers arr and an integer k, return\n/// the sum of the elements with at most two digits from the first k elements of arr.\n/// Example:\n/// >>> add_elements(arr: [111, 21, 3, 4000, 5, 6, 7, 8, 9], k: 4)\n/// 24\n/// Constraints:\n/// 1. 1 <= len(arr) <= 100\n/// 2. 1 <= k <= len(arr)\nfunc add_elements(arr: [Int], k: Int) -> Int {\n    var sum = 0\n    var i = 0\n    for element in arr {\n        if i < k {\n            sum += element\n            i += 1\n        }\n    }\n    return sum"], ["/// Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n/// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n/// as follows: start with any positive integer n. Then each term is obtained from the \n/// previous term as follows: if the previous term is even, the next term is one half of \n/// the previous term. If the previous term is odd, the next term is 3 times the previous\n/// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n/// Note: \n/// 1. Collatz(1) is [1].\n/// 2. returned array sorted in increasing order.\n/// For example:\n/// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n/// >>> get_odd_collatz(n: 5)\n/// [1, 5]\nfunc get_odd_collatz(n: Int) -> [Int] {\n    var collatz: [Int] = []\n    for i in 1..<n {\n        collatz.append(i)\n    }\n    return collatz"], ["/// You have to write a function which validates a given date string and\n/// returns true if the date is valid otherwise false.\n/// The date is valid if all of the following rules are satisfied:\n/// 1. The date string is not empty.\n/// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n/// 3. The months should not be less than 1 or higher than 12.\n/// 4. The date should be in the format: mm-dd-yyyy\n/// >>> valid_date(date: \"03-11-2000\")\n/// true\n/// >>> valid_date(date: \"15-01-2012\")\n/// false\n/// >>> valid_date(date: \"04-0-2040\")\n/// false\n/// >>> valid_date(date: \"06-04-2020\")\n/// true\n/// >>> valid_date(date: \"06/04/2020\")\n/// false\nfunc valid_date(date: String) -> Bool {\n    if let date = date {\n        let formatter = DateFormatter()\n        formatter.dateStyle = .medium\n        formatter.timeStyle = .medium\n        formatter.locale = Locale(identifier: \"en_US_POSIX\")\n        let dateString = formatter.string(from: date)\n        return dateString.isEqual(to: date)\n    }\n    return false"], ["extension Int: Error {}\n        \n/// Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n/// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n/// Examples\n/// >>> split_words(txt: \"Hello world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"Hello,world!\")\n/// .success([\"Hello\", \"world!\"])\n/// >>> split_words(txt: \"abcdef\")\n/// .failure(3)\nfunc split_words(txt: String) -> Result<[String], Int> {\n    let words = txt.components(separatedBy: .whitespacesAndNewlines)\n    if words.count == 0 {\n        return .failure(0)\n    }\n    let words_split = words.map {\n        let word = String(words[$0])\n        return word.components(separatedBy: .whitespacesAndNewlines)\n    }\n    return .success(words_split.count)"], ["/// Given an array of numbers, return whether or not they are sorted\n/// in ascending order. If array has more than 1 duplicate of the same\n/// number, return false. Assume no negative numbers and only integers.\n/// Examples\n/// >>> is_sorted(lst: [5])\n/// true\n/// >>> is_sorted(lst: [1, 2, 3, 4, 5])\n/// true\n/// >>> is_sorted(lst: [1, 3, 2, 4, 5])\n/// false\n/// >>> is_sorted(lst: [1, 2, 3, 4, 5, 6])\n/// true\n/// >>> is_sorted(lst: [1, 2, 3, 4, 5, 6, 7])\n/// true\n/// >>> is_sorted(lst: [1, 3, 2, 4, 5, 6, 7])\n/// false\n/// >>> is_sorted(lst: [1, 2, 2, 3, 3, 4])\n/// true\n/// >>> is_sorted(lst: [1, 2, 2, 2, 3, 4])\n/// false\nfunc is_sorted(lst: [Int]) -> Bool {\n    var result: Bool = false\n    for i in 0..<lst.count {\n        if result && lst[i] > lst[i+1] {\n            result = false\n        }\n    }\n    return result"], ["/// You are given two intervals,\n/// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n/// The given intervals are closed which means that the interval (start, end)\n/// includes both start and end.\n/// For each given interval, it is assumed that its start is less or equal its end.\n/// Your task is to determine whether the length of intersection of these two \n/// intervals is a prime number.\n/// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n/// which its length is 1, which not a prime number.\n/// If the length of the intersection is a prime number, return \"YES\",\n/// otherwise, return \"NO\".\n/// If the two intervals don't intersect, return \"NO\".\n/// [input/output] samples:\n/// >>> intersection(interval1: (1, 2), interval2: (2, 3))\n/// \"NO\"\n/// >>> intersection(interval1: (-1, 1), interval2: (0, 4))\n/// \"NO\"\n/// >>> intersection(interval1: (-3, -1), interval2: (-5, 5))\n/// \"YES\"\nfunc intersection(interval1: (Int, Int), interval2: (Int, Int)) -> String {\n    var length = 0\n    var start = interval1.first\n    var end = interval1.last\n    var start2 = interval2.first\n    var end2 = interval2.last\n    var length2 = 0\n    var i = start\n    var j = start2\n    var k = end\n    var m = end2\n    var n = start2\n    var length3 = 0\n    var i2 = start\n    var j2 = start2\n    var k2 = end\n    var m2 = end2\n    var n2 = start2\n    var length4 = 0\n    var i3 = start\n    var j3 = start2\n    var k3 = end\n    var m3 = end2\n    var n3 = start2\n    var length5 = 0\n    var i4 = start\n    var j4 = start2\n    var k4 = end"], ["/// You are given an array arr of integers and you need to return\n/// sum of magnitudes of integers multiplied by product of all signs\n/// of each number in the array, represented by 1, -1 or 0.\n/// Note: return nil for empty arr.\n/// Example:\n/// >>> prod_signs(arr: [1, 2, 2, -4])\n/// 9\n/// >>> prod_signs(arr: [0, 1])\n/// 0\n/// >>> prod_signs(arr: [] as [Int])\n/// nil\nfunc prod_signs(arr: [Int]) -> Int? {\n    var prod = 0\n    for i in arr {\n        if i == 0 {\n            prod = prod + 1\n        } else if i == 1 {\n            prod = prod - 1\n        } else if i == -1 {\n            prod = prod * -1\n        } else {\n            prod = prod * i\n        }\n    }\n    return prod"], ["/// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n/// each cell of the grid contains a value. Every integer in the range [1, N * N]\n/// inclusive appears exactly once on the cells of the grid.\n/// You have to find the minimum path of length k in the grid. You can start\n/// from any cell, and in each step you can move to any of the neighbor cells,\n/// in other words, you can go to cells which share an edge with you current\n/// cell.\n/// Please note that a path of length k means visiting exactly k cells (not\n/// necessarily distinct).\n/// You CANNOT go off the grid.\n/// A path A (of length k) is considered less than a path B (of length k) if\n/// after making the ordered arrays of the values on the cells that A and B go\n/// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n/// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n/// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n/// lst_A[j] = lst_B[j].\n/// It is guaranteed that the answer is unique.\n/// Return an ordered array of the values on the cells that the minimum path go through.\n/// Examples:    \n/// >>> minPath(grid: [[1, 2, 3], [4, 5, 6], [7, 8, 9]], k: 3)\n/// [1, 2, 1]\n/// >>> minPath(grid: [[5, 9, 3], [4, 1, 6], [7, 8, 2]], k: 1)\n/// [1]\nfunc minPath(grid: [[Int]], k: Int) -> [Int] {\n    var path: [Int] = []\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o:"], ["/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n/// the last couple centuries. However, what people don't know is Tribonacci sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) = 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n/// tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You are given a non-negative integer number n, you have to a return an array of the \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>> tri(n: 3)\n/// [1, 3, 2, 8]\nfunc tri(n: Int) -> [Int] {\n    var array = [Int]()\n    for i in 1...n {\n        array.append(i)\n    }\n    return array"], ["/// Given a positive integer n, return the product of the odd digits.\n/// Return 0 if all digits are even.\n/// For example:\n/// >>> digits(n: 1)\n/// 1\n/// >>> digits(n: 4)\n/// 0\n/// >>> digits(n: 235)\n/// 15\nfunc digits(n: Int) -> Int {\n    var result = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var z1 = 0\n    var z2 = 0\n    var z3 = 0\n    var z4 = 0\n    var z5 = 0\n    var z6 = 0\n    var z7 = 0\n    var z8 = 0\n    var z9 = 0\n    var z10 = 0\n    var z11 = 0\n    var z12 = 0\n    var z13 = 0\n    var z14 = 0\n    var z15 = 0\n    var z16 = 0\n    var z17 = 0\n    var z18 = 0\n    var z19 = 0\n    var z20 = 0\n    var z21 = 0\n    var z22 = 0\n    var z23 = 0\n    var z24 = 0\n    var z25 = 0\n    var z26 = 0\n    var z27 = 0\n    var z28 = 0\n    var z29 = 0\n    var z30 = 0\n    var z31 = 0\n    var z32 = 0\n    var z33 = 0\n    var"], ["/// Create a function that takes a string as input which contains only square brackets.\n/// The function should return true if and only if there is a valid subsequence of brackets \n/// where at least one bracket in the subsequence is nested.\n/// >>> is_nested(string: \"[[]]\")\n/// true\n/// >>> is_nested(string: \"[]]]]]]][[[[[]\")\n/// false\n/// >>> is_nested(string: \"[][]\")\n/// false\n/// >>> is_nested(string: \"[]\")\n/// false\n/// >>> is_nested(string: \"[[][]]\")\n/// true\n/// >>> is_nested(string: \"[[]][[\")\n/// true\nfunc is_nested(string: String) -> Bool {\n    let subsequence = string.subsequence(of: [])\n    return subsequence.count > 0 && subsequence.count > 1 && subsequence.count > 2"], ["/// You are given an array of numbers.\n/// You need to return the sum of squared numbers in the given array,\n/// round each element in the array to the upper int(Ceiling) first.\n/// Examples:\n/// >>> sum_squares(lst: [1.0, 2.0, 3.0])\n/// 14\n/// >>> sum_squares(lst: [1.0, 4.0, 9.0])\n/// 98\n/// >>> sum_squares(lst: [1.0, 3.0, 5.0, 7.0])\n/// 84\n/// >>> sum_squares(lst: [1.4, 4.2, 0.0])\n/// 29\n/// >>> sum_squares(lst: [-2.4, 1.0, 1.0])\n/// 6\nfunc sum_squares(lst: [Double]) -> Int {\n    var sum = 0\n    for i in 0..<lst.count {\n        sum += i * i\n    }\n    return sum"], ["/// Create a function that returns true if the last character\n/// of a given string is an alphabetical character and is not\n/// a part of a word, and false otherwise.\n/// Note: \"word\" is a group of characters separated by space.\n/// Examples:\n/// >>> check_if_last_char_is_a_letter(txt: \"apple pie\")\n/// false\n/// >>> check_if_last_char_is_a_letter(txt: \"apple pi e\")\n/// true\n/// >>> check_if_last_char_is_a_letter(txt: \"apple pi e \")\n/// false\n/// >>> check_if_last_char_is_a_letter(txt: \"\")\n/// false\nfunc check_if_last_char_is_a_letter(txt: String) -> Bool {\n    let lastChar = txt.lastIndexOf(char: Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u16) { $0 == Character(u"], ["/// Create a function which returns the largest index of an element which\n/// is not greater than or equal to the element immediately preceding it. If\n/// no such element exists then return -1. The given array will not contain\n/// duplicate values.\n/// Examples:\n/// >>> can_arrange(arr: [1, 2, 4, 3, 5])\n/// 3\n/// >>> can_arrange(arr: [1, 2, 3])\n/// -1\nfunc can_arrange(arr: [Int]) -> Int {\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var"], ["/// Create a function that returns a tuple (a, b), where 'a' is\n/// the largest of negative integers, and 'b' is the smallest\n/// of positive integers in an array.\n/// If there is no negative or positive integers, return them as nil.\n/// Examples:\n/// >>> largest_smallest_integers(lst: [2, 4, 1, 3, 5, 7])\n/// (nil, 1)\n/// >>> largest_smallest_integers(lst: [] as [Int])\n/// (nil, nil)\n/// >>> largest_smallest_integers(lst: [0])\n/// (nil, nil)\nfunc largest_smallest_integers(lst: [Int]) -> (Int?, Int?) {\n    var largest: Int?\n    var smallest: Int?\n    var i: Int\n    var j: Int\n    var k: Int\n    var len: Int\n    var max: Int\n    var min: Int\n    var maxInt: Int\n    var minInt: Int\n    var iMax: Int\n    var jMax: Int\n    var kMax: Int\n    var lenMax: Int\n    var maxIntMax: Int\n    var minIntMax: Int\n    var max: Int\n    var min: Int\n    var maxInt: Int\n    var minInt: Int\n    var i: Int\n    var j: Int\n    var k: Int\n    var len: Int\n    var max: Int\n    var min: Int\n    var maxInt: Int\n    var minInt: Int\n    var iMax: Int\n    var jMax: Int\n    var kMax: Int\n    var lenMax: Int\n    var maxIntMax: Int\n    var minIntMax: Int\n    var max: Int\n    var min: Int\n    var maxInt: Int\n    var minInt: Int\n    var i: Int\n    var j: Int\n    var k: Int\n    var len: Int\n    var max: Int\n    var min: Int\n    var maxInt: Int\n    var minInt: Int\n    var iMax: Int\n    var jMax: Int\n    var kMax: Int\n    var lenMax: Int\n    var maxIntMax:"], ["enum Value: Equatable, Hashable {\n    case intValue(Int)\n    case doubleValue(Double)\n    case stringValue(String)\n}\n\n            \n/// Create a function that takes integers, floats, or strings representing\n/// real numbers, and returns the larger variable in its given variable type.\n/// Return nil if the values are equal.\n/// Note: If a real number is represented as a string, the floating point might be . or ,\n/// >>> compare_one(a: .intValue(1), b: .doubleValue(2.5))\n/// .doubleValue(2.5)\n/// >>> compare_one(a: .intValue(1), b: .stringValue(\"2,3\"))\n/// .stringValue(\"2,3\")\n/// >>> compare_one(a: .stringValue(\"5,1\"), b: .stringValue(\"6\"))\n/// .stringValue(\"6\")\n/// >>> compare_one(a: .stringValue(\"1\"), b: .intValue(1))\n/// nil\nfunc compare_one(a: Value, b: Value) -> Value? {\n    if a == b {\n        return a\n    }\n    if a.type == b.type {\n        return a\n    }\n    if a.type == .stringValue && b.type == .stringValue {\n        return a.stringValue.compare(b.stringValue)\n    }\n    if a.type == .stringValue && b.type == .doubleValue {\n        return a.stringValue.compare(b.doubleValue)\n    }\n    if a.type == .doubleValue && b.type == .stringValue {\n        return a.doubleValue.compare(b.stringValue)\n    }\n    if a.type == .doubleValue && b.type == .intValue {\n        return a.doubleValue.compare(b.intValue)\n    }\n    return nil"], ["/// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n/// Example\n/// >>> is_equal_to_sum_even(n: 4)\n/// false\n/// >>> is_equal_to_sum_even(n: 6)\n/// false\n/// >>> is_equal_to_sum_even(n: 8)\n/// true\nfunc is_equal_to_sum_even(n: Int) -> Bool {\n    return n == sum(n)"], ["/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>> special_factorial(n: 4)\n/// 288\n/// The function will receive an integer as input and should return the special\n/// factorial of this integer.\nfunc special_factorial(n: Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 3\n    }\n    if n == 4 {\n        return 4\n    }\n    if n == 5 {\n        return 5\n    }\n    if n == 6 {\n        return 6\n    }\n    if n == 7 {\n        return 7\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n        return 9\n    }\n    if n == 10 {\n        return 10\n    }\n    if n == 11 {\n        return 11\n    }\n    if n == 12 {\n        return 12\n    }\n    if n == 13 {\n        return 13\n    }\n    if n == 14 {\n        return 14\n    }\n    if n == 15 {\n        return 15\n    }\n    if n == 16 {\n        return 16\n    }\n    if n == 17 {\n        return 17\n    }\n    if n == 18 {\n        return 18\n    }\n    if n == 19 {\n        return 19\n    }\n    if n == 20 {\n        return 20\n    }\n    if n == 21 {\n        return 21\n    }\n    if n == 22 {\n        return 22\n    }\n    if n == 2"], ["/// Given a string text, replace all spaces in it with underscores, \n/// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive spaces with - \n/// >>> fix_spaces(text: \" Example\")\n/// \"Example\"\n/// >>> fix_spaces(text: \" Example 1\")\n/// \"Example_1\"\n/// >>> fix_spaces(text: \" Example 2\")\n/// \"_Example_2\"\n/// >>> fix_spaces(text: \" Example 3\")\n/// \"_Example-3\"\nfunc fix_spaces(text: String) -> String {\n    let regex = try! NSRegularExpression(pattern: \"\\\\s+\", options: .caseInsensitive)\n    let result = regex.stringByReplacingMatches(in: text, options: [.matchFirst], range: NSMakeRange(0, text.length))\n    return result.replacedText"], ["/// Create a function which takes a string representing a file's name, and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n/// A file's name is considered to be valid if and only if all the following conditions \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in the file's name.\n/// - The file's name contains exactly one dot '.'\n/// - The substring before the dot should not be empty, and it starts with a letter from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>> file_name_check(file_name: \"example.txt\")\n/// \"Yes\"\n/// >>> file_name_check(file_name: \"1example.dll\")\n/// \"No\"\nfunc file_name_check(file_name: String) -> String {\n    let file_name_checker = FileNameChecker()\n    file_name_checker.check(file_name)\n    return file_name_checker.result"], ["/// You are given a string representing a sentence,\n/// the sentence contains some words separated by a space,\n/// and you have to return a string that contains the words from the original sentence,\n/// whose lengths are prime numbers,\n/// the order of the words in the new string should be the same as the original one.\n/// Example 1:\n/// >>> words_in_sentence(sentence: \"This is a test\")\n/// \"is\"\n/// Example 2:\n/// >>> words_in_sentence(sentence: \"lets go for swimming\")\n/// \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n/// * sentence contains only letters\nfunc words_in_sentence(sentence: String) -> String {\n    var result: String = \"\"\n    var length: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var u: Int = 0\n    var v: Int = 0\n    var w: Int = 0\n    var x: Int = 0\n    var y: Int = 0\n    var z: Int = 0\n    var a: Int = 0\n    var b: Int = 0\n    var c: Int = 0\n    var d: Int = 0\n    var e: Int = 0\n    var f: Int = 0\n    var g: Int = 0\n    var h: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var o: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var"], ["/// Your task is to implement a function that will simplify the expression\n/// x * n. The function returns true if x * n evaluates to a whole number and false\n/// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n/// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n/// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n/// >>> simplify(x: \"1/5\", n: \"5/1\")\n/// true\n/// >>> simplify(x: \"1/6\", n: \"2/1\")\n/// false\n/// >>> simplify(x: \"7/10\", n: \"10/2\")\n/// false\nfunc simplify(x: String, n: String) -> Bool {\n    let numerator = x.components(separatedBy: \"/\")\n    let denominator = n.components(separatedBy: \"/\")\n    let numeratorString = String(numerator)\n    let denominatorString = String(denominator)\n    let numeratorString = numeratorString.components(separatedBy: \"/\")\n    let denominatorString = denominatorString.components(separatedBy: \"/\")\n    let numeratorString = numeratorString.components(separatedBy: \"/\")\n    let denominatorString = denominatorString.components(separatedBy: \"/\")\n    let numerator = numeratorString.components(separatedBy: \"/\")\n    let denominator = denominatorString.components(separatedBy: \"/\")\n    let numeratorString = numeratorString.components(separatedBy: \"/\")\n    let denominatorString = denominatorString.components(separatedBy: \"/\")\n    let numeratorString = numeratorString.components(separatedBy: \"/\")\n    let denominatorString = denominatorString.components(separatedBy: \"/\")\n    let numeratorString = numeratorString.components(separatedBy: \"/\")\n    let denominatorString = denominatorString.components(separatedBy: \"/\")\n    let numeratorString = numeratorString.components(separatedBy: \"/\")\n    let denominatorString = denominatorString.components(separatedBy: \"/\")\n    let"], ["/// Write a function which sorts the given array of integers\n/// in ascending order according to the sum of their digits.\n/// Note: if there are several items with similar sum of their digits,\n/// order them based on their index in original array.\n/// For example:\n/// >>> order_by_points(nums: [1, 11, -1, -11, -12])\n/// [-1, -11, 1, -12, 11]\n/// >>> order_by_points(nums: [] as [Int])\n/// [] as [Int]\nfunc order_by_points(nums: [Int]) -> [Int] {\n    var result: [Int] = []\n    var i = 0\n    for num in nums {\n        result.append(num)\n        if i < nums.count {\n            result.append(nums[i])\n        }\n        i += 1\n    }\n    return result"], ["/// Write a function that takes an array of numbers as input and returns \n/// the number of elements in the array that are greater than 10 and both \n/// first and last digits of a number are odd (1, 3, 5, 7, 9).\n/// For example:\n/// >>> specialFilter(nums: [15, -73, 14, -15])\n/// 1\n/// >>> specialFilter(nums: [33, -2, -3, 45, 21, 109])\n/// 2\nfunc specialFilter(nums: [Int]) -> Int {\n    var result = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var"], ["/// You are given a positive integer n. You have to create an integer array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n/// >>> get_max_triples(n: 5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n/// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n: Int) -> Int {\n    var max_triples: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var a: [Int] = [1, 3, 7, 13, 21]\n    while i < n {\n        if a[i] + a[j] + a[k] == 3 {\n            max_triples = max_triples + 1\n            i += 1\n        } else if i == n {\n            max_triples = max_triples + 1\n            j += 1\n        } else if j == n {\n            max_triples = max_triples + 1\n            k += 1\n        } else if k == n {\n            max_triples = max_triples + 1\n            a[i] += a[j] + a[k]\n        } else {\n            max_triples = max_triples + 1\n            i += 1\n        }\n    }\n    return max_triples"], ["/// Write a function that accepts an array of strings as a parameter,\n/// deletes the strings that have odd lengths from it,\n/// and returns the resulted array with a sorted order,\n/// The array is always an array of strings and never an array of numbers,\n/// and it may contain duplicates.\n/// The order of the array should be ascending by length of each word, and you\n/// should return the array sorted by that rule.\n/// If two words have the same length, sort the array alphabetically.\n/// The function should return an array of strings in sorted order.\n/// You may assume that all words will have the same length.\n/// For example:\n/// >>> sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\n/// [\"aa\"]\n/// >>> sorted_list_sum(lst: [\"ab\", \"a\", \"aaa\", \"cd\"])\n/// [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst: [String]) -> [String] {\n    var result: [String] = []\n    for word in lst {\n        var sum = 0\n        for i in 0 ..< word.length {\n            sum += word[i]\n        }\n        result.append(sum)\n    }\n    return result"], ["/// A simple program which should return the value of x if n is \n/// a prime number and should return the value of y otherwise.\n/// Examples:\n/// >>> x_or_y(n: 7, x: 34, y: 12)\n/// 34\n/// >>> x_or_y(n: 15, x: 8, y: 5)\n/// 5\nfunc x_or_y(n: Int, x: Int, y: Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return y\n    }\n    if n == 2 {\n        return x\n    }\n    if n == 3 {\n        return y\n    }\n    if n == 4 {\n        return x\n    }\n    if n == 5 {\n        return y\n    }\n    if n == 6 {\n        return x\n    }\n    if n == 7 {\n        return y\n    }\n    if n == 8 {\n        return x\n    }\n    if n == 9 {\n        return y\n    }\n    if n == 10 {\n        return x\n    }\n    if n == 11 {\n        return y\n    }\n    if n == 12 {\n        return x\n    }\n    if n == 13 {\n        return y\n    }\n    if n == 14 {\n        return x\n    }\n    if n == 15 {\n        return y\n    }\n    return 0"], ["/// Given an array of numbers, return the sum of squares of the numbers\n/// in the array that are odd. Ignore numbers that are negative or not integers.\n/// >>> double_the_difference(lst: [1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(lst: [-1, -2, 0])\n/// 0\n/// >>> double_the_difference(lst: [9, -2])\n/// 81\n/// >>> double_the_difference(lst: [0])\n/// 0\n/// If the input array is empty, return 0.\nfunc double_the_difference(lst: [Double]) -> Int {\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n"], ["/// I think we all remember that feeling when the result of some long-awaited\n/// event is finally known. The feelings and thoughts you have at that moment are\n/// definitely worth noting down and comparing.\n/// Your task is to determine if a person correctly guessed the results of a number of matches.\n/// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n/// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n/// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n/// example:\n/// >>> compare(game: [1, 2, 3, 4, 5, 1], guess: [1, 2, 3, 4, 2, -2])\n/// [0, 0, 0, 0, 3, 3]\n/// >>> compare(game: [0, 5, 0, 0, 0, 4], guess: [4, 1, 1, 0, 0, -2])\n/// [4, 4, 1, 0, 0, 6]\nfunc compare(game: [Int], guess: [Int]) -> [Int] {\n    var guesses = game.map { guess.map { $0 } }\n    var guessesDiff = guesses.map { $0 - guess }\n    var guessesDiffs = guessesDiff.map { $0 }\n    var guessesDiffsDiff = guessesDiffs.map { $0 }\n    var guessesDiffsDiffs = guessesDiffsDiff.map { $0 }\n    var guessesDiffsDiffsDiff = guessesDiffsDiffsDiff.map { $0 }\n    var guessesDiffsDiffsDiffs = guessesDiffsDiffsDiffs.map { $0 }\n    var guessesDiffsDiffsDiffsDiff = guessesDiffsDiffsDiffsDiff.map { $0 }\n    var guessesDiffsDiffsDiffs = guessesDiffsDiffsDiffs.map { $0 }\n    var guessesDiffsDiffs = guessesDiffs.map { $0 }\n    var"], ["/// You will be given the name of a class (a string) and an array of extensions.\n/// The extensions are to be used to load additional classes to the class. The\n/// strength of the extension is as follows: Let CAP be the number of the uppercase\n/// letters in the extension's name, and let SM be the number of lowercase letters \n/// in the extension's name, the strength is given by the fraction CAP - SM. \n/// You should find the strongest extension and return a string in this \n/// format: ClassName.StrongestExtensionName.\n/// If there are two or more extensions with the same strength, you should\n/// choose the one that comes first in the array.\n/// For example, if you are given \"Slices\" as the class and an array of the\n/// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n/// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n/// (its strength is -1).\n/// Example:\n/// >>> Strongest_Extension(class_name: \"my_class\", extensions: [\"AA\", \"Be\", \"CC\"])\n/// \"my_class.AA\"\nfunc Strongest_Extension(class_name: String, extensions: [String]) -> String {\n    var result: String = \"\"\n    var i: Int = 0\n    for extension in extensions {\n        if extension.count > i {\n            result = result + extension\n            i = extension.count\n        }\n    }\n    return result"], ["/// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n/// >>> cycpattern_check(a: \"abcd\", b: \"abd\")\n/// false\n/// >>> cycpattern_check(a: \"hello\", b: \"ell\")\n/// true\n/// >>> cycpattern_check(a: \"whassup\", b: \"psus\")\n/// false\n/// >>> cycpattern_check(a: \"abab\", b: \"baa\")\n/// true\n/// >>> cycpattern_check(a: \"efef\", b: \"eeff\")\n/// false\n/// >>> cycpattern_check(a: \"himenss\", b: \"simen\")\n/// true\nfunc cycpattern_check(a: String, b: String) -> Bool {\n    let cyc = a.cyclen(b)\n    return cyc == 1"], ["/// Given an integer. return a tuple that has the number of even and odd digits respectively.\n/// Example:\n/// >>> even_odd_count(num: -12)\n/// (1, 1)\n/// >>> even_odd_count(num: 123)\n/// (1, 2)\nfunc even_odd_count(num: Int) -> (Int, Int) {\n    var even_odd_count: Int = 0\n    var odd_count: Int = 0\n    var even_odd_count_even: Int = 0\n    var odd_count_even: Int = 0\n    var even_odd_count_odd: Int = 0\n    var odd_count_odd: Int = 0\n    var even_odd_count_odd_even: Int = 0\n    var odd_count_odd_even: Int = 0\n    var even_odd_count_odd_odd: Int = 0\n    var odd_count_odd_odd: Int = 0\n    var even_odd_count_odd_odd_even: Int = 0\n    var odd_count_odd_odd_even: Int = 0\n    var even_odd_count_odd_odd_odd: Int = 0\n    var odd_count_odd_odd_odd: Int = 0\n    var even_odd_count_odd_odd_even: Int = 0\n    var odd_count_odd_odd_even: Int = 0\n    var even_odd_count_odd_odd_odd_even: Int = 0\n    var odd_count_odd_odd_odd_even: Int = 0\n    var even_odd_count_odd_odd_odd_odd: Int = 0\n    var odd_count_odd_odd_odd_odd: Int = 0\n    var even_odd_count_odd_odd_odd_even: Int = 0\n    var odd_count_odd_odd_odd_even: Int = 0\n    var even_odd_count_odd_odd_odd_odd_even: Int = 0\n    var odd_count_odd_odd_odd_odd_even: Int = 0\n    var even_odd"], ["/// Given a positive integer, obtain its roman numeral equivalent as a string,\n/// and return it in lowercase.\n/// Restrictions: 1 <= num <= 1000\n/// Examples:\n/// >>> int_to_mini_roman(number: 19)\n/// \"xix\"\n/// >>> int_to_mini_roman(number: 152)\n/// \"clii\"\n/// >>> int_to_mini_roman(number: 426)\n/// \"cdxxvi\"\nfunc int_to_mini_roman(number: Int) -> String {\n    let numberFormatter = NumberFormatter()\n    numberFormatter.numberStyle = .decimal\n    numberFormatter.minimumFractionDigits = 1\n    numberFormatter.maximumFractionDigits = 1\n    numberFormatter.maximumFractionDigits = 1\n    numberFormatter.maximumFractionDigits = 1\n    numberFormatter.maximumFractionDigits = 1\n    numberFormatter.maximumFractionDigits = 1\n    numberFormatter.maximumFractionDigits = 1\n    numberFormatter.maximumFractionDigits = 1\n    numberFormatter.maximumFractionDigits = 1\n    numberFormatter.maximumFractionDigits = 1\n    numberFormatter.maximumFractionDigits = 1\n    numberFormatter.maximumFractionDigits = 1\n    numberFormatter.maximumFractionDigits = 1\n    numberFormatter.maximumFractionDigits = 1\n    numberFormatter.maximumFractionDigits = 1\n    numberFormatter.maximumFractionDigits = 1\n    numberFormatter.maximumFractionDigits = 1\n    numberFormatter.maximumFractionDigits = 1\n    numberFormatter.maximumFractionDigits = 1\n    numberFormatter.maximumFractionDigits = 1\n    numberFormatter.maximumFractionDigits = 1\n    numberFormatter.maximumFractionDigits = 1\n    numberFormatter.maximumFractionDigits = 1\n    numberFormatter.maximumFractionDigits = 1\n    numberFormatter.maximumFractionDigits ="], ["/// Given the lengths of the three sides of a triangle. Return true if the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n/// Example:\n/// >>> right_angle_triangle(a: 3, b: 4, c: 5)\n/// true\n/// >>> right_angle_triangle(a: 1, b: 2, c: 3)\n/// false\nfunc right_angle_triangle(a: Int, b: Int, c: Int) -> Bool {\n    var result = false\n    if a > b && b > c {\n        result = true\n    } else if a > c && b > c {\n        result = true\n    } else if a > c && b < c {\n        result = true\n    } else if a < b && b < c {\n        result = true\n    } else if a < c && b < c {\n        result = true\n    } else if a < c && b > c {\n        result = true\n    } else if a > c && b > c {\n        result = true\n    } else if a > c && b < c {\n        result = true\n    } else if a < c && b > c {\n        result = true\n    } else if a < c && b < c {\n        result = true\n    } else if a < c && b < c {\n        result = true\n    } else if a < c && b > c {\n        result = true\n    } else if a > c && b < c {\n        result = true\n    } else if a > c && b > c {\n        result = true\n    } else if a < c && b > c {\n        result = true\n    } else if a < c && b < c {\n        result = true\n    } else if a < c && b < c {\n        result = true\n    } else if a < c && b > c {\n        result = true\n    } else if a < c && b < c {\n        result = true\n    } else if a < c && b < c {\n        result = true\n    } else if a < c"], ["/// Write a function that accepts an array of strings.\n/// The array contains different words. Return the word with maximum number\n/// of unique characters. If multiple strings have maximum number of unique\n/// characters, return the one which comes first in lexicographical order.\n/// >>> find_max(words: [\"name\", \"of\", \"string\"])\n/// \"string\"\n/// >>> find_max(words: [\"name\", \"enam\", \"game\"])\n/// \"enam\"\n/// >>> find_max(words: [\"aaaaaaa\", \"bb\", \"cc\"])\n/// \"aaaaaaa\"\nfunc find_max(words: [String]) -> String {\n    var max = \"\"\n    var i = 0\n    var j = 0\n    var k = 0\n    var len = words.count\n    var current = \"\"\n    var current_len = 0\n    var current_index = 0\n    var current_index_len = 0\n    var current_index_len_max = 0\n    var current_index_len_min = 0\n    var current_index_len_min_max = 0\n    var current_index_len_min_min = 0\n    var current_index_len_min_max_max = 0\n    var current_index_len_max = 0\n    var current_index_len_max_min = 0\n    var current_index_len_max_max = 0\n    var current_index_len_max_min_max = 0\n    var current_index_len_max_min_max_max = 0\n    var current_index_len_max_min_max_min = 0\n    var current_index_len_max_min_max_min_max = 0\n    var current_index_len_max_min_max_min_max_max = 0\n    var current_index_len_max_min_max_min_max_min = 0\n    var current_index_len_max_min_max_min_max_min_max_max = 0\n    var current_index_len_max_min_max_min_max_min_max_min_max_max_max = "], ["/// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n/// but now you need to eat more carrots to complete the day's meals.\n/// you should return an array of [ total number of eaten carrots after your meals,\n/// the number of carrots left after your meals ]\n/// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n/// Example:\n/// >>> eat(number: 5, need: 6, remaining: 10)\n/// [11, 4]\n/// >>> eat(number: 4, need: 8, remaining: 9)\n/// [12, 1]\n/// >>> eat(number: 1, need: 10, remaining: 10)\n/// [11, 0]\n/// >>> eat(number: 2, need: 11, remaining: 5)\n/// [7, 0]\n/// Variables:\n/// @number : integer\n/// the number of carrots that you have eaten.\n/// @need : integer\n/// the number of carrots that you need to eat.\n/// @remaining : integer\n/// the number of remaining carrots thet exist in stock\n/// Constrain:\n/// * 0 <= number <= 1000\n/// * 0 <= need <= 1000\n/// * 0 <= remaining <= 1000\n/// Have fun :)\nfunc eat(number: Int, need: Int, remaining: Int) -> [Int] {\n    var eaten: [Int] = [0]\n    var remaining: Int = 0\n    var need: Int = 0\n    var number: Int = 0\n    var i: Int = 0\n    var j: Int = 0\n    var k: Int = 0\n    var l: Int = 0\n    var m: Int = 0\n    var n: Int = 0\n    var p: Int = 0\n    var q: Int = 0\n    var r: Int = 0\n    var s: Int = 0\n    var t: Int = 0\n    var"], ["/// Given two arrays operator, and operand. The first array has basic algebra operations, and \n/// the second array is an array of integers. Use the two given arrays to build the algebric \n/// expression and return the evaluation of this expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// array = [2, 3, 4, 5]\n/// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator array is equal to the length of operand array minus one.\n/// Operand is an array of of non-negative integers.\n/// Operator array has at least one operator, and operand array has at least two operands.\nfunc do_algebra(operator: [String], operand: [Int]) -> Int {\n    var result: Int = 0\n    for operator in operator {\n        for operand in operand {\n            if operator == operand {\n                result += operand\n            }\n        }\n    }\n    return result"], ["/// You are given a string s.\n/// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the string contains no letters, reverse the string.\n/// The function should return the resulted string.\n/// Examples\n/// >>> solve(s: \"1234\")\n/// \"4321\"\n/// >>> solve(s: \"ab\")\n/// \"AB\"\n/// >>> solve(s: \"#a@C\")\n/// \"#A@c\"\nfunc solve(s: String) -> String {\n    if s == nil {\n        return s\n    }\n    var result = s\n    var i = 0\n    var len = s.length\n    var j = 0\n    var case = \"\"\n    var caseLetter = \"\"\n    var caseLetterLetter = \"\"\n    for i in 0..<len {\n        if s[i] == 'a' {\n            case = \"A\"\n            caseLetter = \"A\"\n            caseLetterLetter = \"A\"\n        } else if s[i] == 'b' {\n            case = \"B\"\n            caseLetter = \"B\"\n            caseLetterLetter = \"B\"\n        } else if s[i] == 'c' {\n            case = \"C\"\n            caseLetter = \"C\"\n            caseLetterLetter = \"C\"\n        } else if s[i] == 'd' {\n            case = \"D\"\n            caseLetter = \"D\"\n            caseLetterLetter = \"D\"\n        } else if s[i] == 'e' {\n            case = \"E\"\n            caseLetter = \"E\"\n            caseLetterLetter = \"E\"\n        } else if s[i] == 'f' {\n            case = \"F\"\n            caseLetter = \"F\"\n            caseLetterLetter = \"F\"\n        } else if s[i] == 'g' {\n            case = \"G\"\n            caseLetter = \"G\"\n            caseLetterLetter = \"G\"\n        } else if s[i] == 'h' {"], ["/// Given a string 'text', return its md5 hash equivalent string.\n/// If 'text' is an empty string, return nil.\n/// >>> string_to_md5(text: \"Hello world\")\n/// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunc string_to_md5(text: String) -> String? {\n\tvar md5String: String? = nil\n\tvar md5 = md5(text)\n\tif md5.length > 0 {\n\t\tmd5String = md5.description\n\t}\n\treturn md5String"], ["/// Given two positive integers a and b, return the even digits between a\n/// and b, in ascending order.\n/// For example:\n/// >>> generate_integers(a: 2, b: 8)\n/// [2, 4, 6, 8]\n/// >>> generate_integers(a: 8, b: 2)\n/// [2, 4, 6, 8]\n/// >>> generate_integers(a: 10, b: 14)\n/// [] as [Int]\nfunc generate_integers(a: Int, b: Int) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    while i < a {\n        result.append(a)\n        i += 1\n    }\n    return result"]]