[["# Check if in given array of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n# \"\"\n# >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n# 1\nsub has_close_elements {\n    my($numbers, $threshold) = @_;\n    my $result = [];\n    my $i = 0;\n    my $num_elements = 0;\n    my $num_close_elements = 0;\n    my $num_non_close_elements = 0;\n    my $num_non_close_elements_per_num_close_elements = 0;\n    my $num_non_close_elements_per_num_non_close_elements = 0;\n    my $num_non_close_elements_per_num_close_elements = 0;\n    my $num_close_elements = 0;\n    my $num_non_close_elements = 0;\n    my $num_non_close_elements_per_num_non_close_elements = 0;\n    my $num_non_close_elements_per_num_close_elements = 0;\n    my $num_close_elements_per_num_non_close_elements = 0;\n    my $num_non_close_elements_per_num_close_elements = 0;\n    my $num_non_close_elements_per_num_non_close_elements = 0;\n    my $num_close_elements_per_num_non_close_elements = 0;\n    my $num_non_close_elements_per_num_non_close_elements = 0;\n    my $num_non_close_elements_per_num_close_elements = 0;\n    my $num_close_elements_per_num_non_close_elements = 0;\n    my $num_non_close_elements_per_num_non_close_elements ="], ["# Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n# separate those group into separate strings and return the array of those.\n# Separate groups are balanced (each open brace is properly closed) and not nested within each other\n# Ignore any spaces in the input string.\n# >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n# [\"()\", \"(())\", \"(()())\"]\nsub separate_paren_groups {\n    my($paren_string) = @_;\n    my($open_braces) = split('(', $paren_string);\n    my($close_braces) = split(')', $paren_string);\n    my($open_braces_array) = map { $_->[0] } @$open_braces;\n    my($close_braces_array) = map { $_->[1] } @$close_braces;\n    my($open_braces_array_without_spaces) = map { $_->[0] } @$open_braces_array;\n    my($close_braces_array_without_spaces) = map { $_->[1] } @$close_braces_array;\n    my($open_braces_array_without_spaces_without_spaces) = map { $_->[0] } @$open_braces_array_without_spaces;\n    my($close_braces_array_without_spaces_without_spaces) = map { $_->[1] } @$close_braces_array_without_spaces_without_spaces;\n    my($open_braces_array_without_spaces_without_spaces_without_spaces) = map { $_->[0] } @$open_braces_array_without_spaces_without_spaces_without_spaces;\n    my($close_braces_array_without_spaces_without_spaces_without_spaces) = map { $_->[1] } @$close_braces_array_without_spaces_without_spaces_without_spaces;\n    my($open_braces_array_without_spaces_without_spaces_without_spaces_without_spaces) = map { $_->[0] } @"], ["# Given a positive floating point number, it can be decomposed into\n# and integer part (largest integer smaller than given number) and decimals\n# (leftover part always smaller than 1).\n# Return the decimal part of the number.\n# >>> truncate_number(3.5)\n# 0.5\nsub truncate_number {\n    my($number) = @_;\n    my($decimals) = $number =~ /(\\d+)\\.(\\d+)/;\n    my($decimals_integer) = $decimals =~ /(\\d+)/;\n    my($decimals_integer_integer) = $decimals_integer =~ /(\\d+)/;\n    my($decimals_integer_integer_integer) = $decimals_integer_integer =~ /(\\d+)/;\n    my($decimals_integer_integer_integer_integer) = $decimals_integer_integer_integer =~ /(\\d+)/;\n    my($decimals_integer_integer_integer_integer_integer) = $decimals_integer_integer_integer_integer =~ /(\\d+)/;\n    my($decimals_integer_integer_integer_integer_integer_integer) = $decimals_integer_integer_integer_integer_integer =~ /(\\d+)/;\n    my($decimals_integer_integer_integer_integer_integer_integer) = $decimals_integer_integer_integer_integer_integer_integer =~ /(\\d+)/;\n    my($decimals_integer_integer_integer_integer_integer_integer_integer) = $decimals_integer_integer_integer_integer_integer_integer_integer =~ /(\\d+)/;\n    my($decimals_integer_integer_integer_integer_integer_integer_integer) = $decimals_integer_integer_integer_integer_integer_integer_integer =~ /(\\d+)/;\n    my($decimals_integer_integer_integer_integer_integer_integer_integer) = $decimals_integer_integer_integer_integer_integer_integer_integer =~ /(\\d+)/;\n    my($decimals_integer_integer_integer_integer_integer_integer"], ["# You're given an array of deposit and withdrawal operations on a bank account that starts with\n# zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n# at that point function should return 1. Otherwise it should return ''.\n# >>> below_zero([1, 2, 3])\n# \"\"\n# >>> below_zero([1, 2, -4, 5])\n# 1\nsub below_zero {\n    my($operations) = @_;\n    my $balance = $operations->[0];\n    my $balance_min = $operations->[1];\n    my $balance_max = $operations->[2];\n    my $balance_min_minus_balance = $operations->[3];\n    my $balance_max_minus_balance = $operations->[4];\n    my $balance_min_minus_balance_minus_balance = $operations->[5];\n    my $balance_max_minus_balance_minus_balance = $operations->[6];\n    my $balance_min_minus_balance_minus_balance_minus_balance = $operations->[7];\n    my $balance_max_minus_balance_minus_balance_minus_balance = $operations->[8];\n    my $balance_min_minus_balance_minus_balance_minus_balance_minus_balance = $operations->[9];\n    my $balance_max_minus_balance_minus_balance_minus_balance_minus_balance = $operations->[10];\n    my $balance_min_minus_balance_minus_balance_minus_balance_minus_balance_minus_balance = $operations->[11];\n    my $balance_max_minus_balance_minus_balance_minus_balance_minus_balance_minus_balance = $operations->[12];\n    my $balance_min_minus_balance_minus_balance_minus_balance_minus_balance_minus_balance_"], ["# For a given array of input numbers, calculate Mean Absolute Deviation\n# around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute difference between each\n# element and a centerpoint (mean in this case):\n# MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n# 1.0\nsub mean_absolute_deviation {\n    my($numbers) = @_;\n    my $mean = 0;\n    my $std = 0;\n    my $sum = 0;\n    my $i;\n    for my $number (sort { $number <=> $numbers->[$_] } @numbers) {\n        $sum += $number;\n        $mean += $number;\n        $std += $number - $mean;\n        $i++;\n    }\n    return $mean / $i;\n}"], ["# Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n# >>> intersperse([], 4)\n# []\n# >>> intersperse([1, 2, 3], 4)\n# [1, 4, 2, 4, 3]\nsub intersperse {\n    my($numbers, $delimeter) = @_;\n    my @result = ();\n    for my $number (sort { $a <=> $b } @numbers) {\n        push @result, $number . $delimeter;\n    }\n    return @result;\n}"], ["# Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n# For each of the group, output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting while ((())) has three.\n# >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n# [2, 3, 1, 3]\nsub parse_nested_parens {\n    my($paren_string) = @_;\n    my($paren_depth) = $paren_string =~ /(\\(.*\\))/;\n    my($paren_depth_max) = $paren_depth - 1;\n    my($paren_depth_min) = $paren_depth - 1;\n    my($paren_depth_max_min) = $paren_depth_min - $paren_depth_max;\n    my($paren_depth_max_max) = $paren_depth_max - $paren_depth_max_min;\n    my($paren_depth_max_min_max) = $paren_depth_max_min - $paren_depth_max_min;\n    my($paren_depth_max_max_min) = $paren_depth_max_max - $paren_depth_max_max;\n    my($paren_depth_max_min_max_min) = $paren_depth_max_min_max - $paren_depth_max_min_max;\n    my($paren_depth_max_min_max_min_max) = $paren_depth_max_min_max_min_max - $paren_depth_max_min_max_min;\n    my($paren_depth_max_min_max_min_max_max) = $paren_depth_max_min_max_min_max_max - $paren_depth_max_min_max_min_max_max;\n    my($paren_depth_max_min_max_min_max_max_max) = $paren_depth_max_min_max_min_max_max_max - $paren_"], ["# Filter an input array of strings only for ones that contain given substring\n# >>> filter_by_substring([], \"a\")\n# []\n# >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"]\nsub filter_by_substring {\n    my($strings, $substring) = @_;\n    my @result = [];\n    for my $string (@strings) {\n        if ($string =~ /$substring/i) {\n            push @result, $string;\n        }\n    }\n    return @result;\n}"], ["# For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n# Empty sum should be equal to 0 and empty product should be equal to 1.\n# >>> sum_product([])\n# [0, 1]\n# >>> sum_product([1, 2, 3, 4])\n# [10, 24]\nsub sum_product {\n    my($numbers) = @_;\n    my($sum, $product) = @_;\n    my($sum_product) = @_;\n    my($sum_product_result) = @_;\n    my($product_result) = @_;\n    my($sum_product_result) = @_;\n    my($sum_product_result_result) = @_;\n    my($product_result_result) = @_;\n    my($sum_product_result_result) = @_;\n    my($sum_product_result_result_result) = @_;\n    my($sum_product_result_result_result_result) = @_;\n    my($sum_product_result_result_result_result_result) = @_;\n    my($sum_product_result_result_result_result_result_result) = @_;\n    my($sum_product_result_result_result_result_result_result_result) = @_;\n    my($sum_product_result_result_result_result_result_result_result_result) = @_;\n    my($sum_product_result_result_result_result_result_result_result_result_result) = @_;\n    my($sum_product_result_result_result_result_result_result_result_result_result_result) = @_;\n    my($sum_product_result_result_result_result_result_result_result_result_result_result_result) = @_;\n    my($sum_product_result_result_result_result_result_result_result_result_result_result_result_result) = @_;\n    my($sum_product_result_result_result_result_result_result_result_result_result_result_result_result_result) = @_;\n    my($sum"], ["# From a given array of integers, generate an array of rolling maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\nsub rolling_max {\n    my($numbers) = @_;\n    my $max = 0;\n    for my $number (sort { $number <=> $numbers[$_] } @$numbers) {\n        $max = $number if $max < $number;\n    }\n    return $max;\n}"], ["# Find the shortest palindrome that begins with a supplied string.\n# Algorithm idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n# - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n# >>> make_palindrome(\"\")\n# \"\"\n# >>> make_palindrome(\"cat\")\n# \"catac\"\n# >>> make_palindrome(\"cata\")\n# \"catac\"\nsub make_palindrome {\n    my($string) = @_;\n    my $prefix = \"\";\n    my $suffix = \"\";\n    my $postfix = \"\";\n    my $length = 0;\n    my $index = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $"], ["# Input are two strings a and b consisting only of 1s and 0s.\n# Perform binary XOR on these inputs and return result also as a string.\n# >>> string_xor(\"010\", \"110\")\n# \"100\"\nsub string_xor {\n    my($a, $b) = @_;\n    my $result = \"\";\n    for (0 .. $#a) {\n        $result .= $a[$_] ^ $b[$_];\n    }\n    return $result;\n}"], ["# Out of array of strings, return the longest one. Return the first one in case of multiple\n# strings of the same length. Return undef in case the input array is empty.\n# >>> longest([])\n# undef\n# >>> longest([\"a\", \"b\", \"c\"])\n# \"a\"\n# >>> longest([\"a\", \"bb\", \"ccc\"])\n# \"ccc\"\nsub longest {\n    my($strings) = @_;\n    my $max = 0;\n    my $i = 0;\n    my $len = scalar(@$strings);\n    while ($i < $len) {\n        my $string = shift @$strings;\n        if ($string eq $max) {\n            return $string;\n        }\n        if ($string eq $strings[$i]) {\n            $max = $string;\n        }\n        $i++;\n    }\n    return undef;\n}"], ["# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3, 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\nsub greatest_common_divisor {\n    my($a, $b) = @_;\n    my $gcd = $a . $b;\n    my $i = 1;\n    while ($i <= $gcd) {\n        $gcd = $gcd - $i;\n        $i++;\n    }\n    return $gcd;\n}"], ["# Return array of all prefixes from shortest to longest of the input string\n# >>> all_prefixes(\"abc\")\n# [\"a\", \"ab\", \"abc\"]\nsub all_prefixes {\n    my($string) = @_;\n    my @prefixes = split(/\\s+/, $string);\n    return @prefixes;\n}"], ["# Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n# >>> string_sequence(0)\n# \"0\"\n# >>> string_sequence(5)\n# \"0 1 2 3 4 5\"\nsub string_sequence {\n    my($n) = @_;\n    my($sequence) = @_;\n    my($length) = @_;\n    my($result) = @_;\n    my($start) = @_;\n    my($end) = @_;\n    my($result_length) = @_;\n    my($result_length_end) = @_;\n    my($result_length_start) = @_;\n    my($result_length_end_start) = @_;\n    my($result_length_end_end) = @_;\n    my($result_length_end_end_end) = @_;\n    my($result_length_end_end_end_end) = @_;\n    my($result_length_end_end_end_end_end) = @_;\n    my($result_length_end_end_end_end_end_end) = @_;\n    my($result_length_end_end_end_end_end_end_end) = @_;\n    my($result_length_end_end_end_end_end_end_end_end) = @_;\n    my($result_length_end_end_end_end_end_end_end_end_end) = @_;\n    my($result_length_end_end_end_end_end_end_end_end_end_end) = @_;\n    my($result_length_end_end_end_end_end_end_end_end_end_end_end) = @_;\n    my($result_length_end_end_end_end_end_end_end_end_end_end_end_end_end) = @_;\n    my($result_length_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end) = @_;\n    my($result_length_end_end_end_end_end_"], ["# Given a string, find out how many distinct characters (regardless of case) does it consist of\n# >>> count_distinct_characters(\"xyzXYZ\")\n# 3\n# >>> count_distinct_characters(\"Jerry\")\n# 4\nsub count_distinct_characters {\n    my($string) = @_;\n    my $count = 0;\n    my $count_distinct = 0;\n    my $count_distinct_characters = 0;\n    my $count_distinct_words = 0;\n    my $count_distinct_lines = 0;\n    my $count_distinct_lines_with_spaces = 0;\n    my $count_distinct_lines_with_whitespace = 0;\n    my $count_distinct_lines_with_whitespace_and_spaces = 0;\n    my $count_distinct_lines_with_whitespace_and_spaces_and_spaces = 0;\n    my $count_distinct_lines_with_whitespace_and_spaces_and_spaces_and_spaces = 0;\n    my $count_distinct_lines_with_whitespace_and_spaces_and_spaces_and_spaces_and_spaces = 0;\n    my $count_distinct_lines_with_whitespace_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces = 0;\n    my $count_distinct_lines_with_whitespace_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces = 0;\n    my $count_distinct_lines_with_whitespace_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces = 0;\n    my $count_distinct_lines_with_whitespace_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces_and_spaces = 0;\n    my $count_distinct_lines_with_whitespace_and_spaces_and_spaces_and"], ["# Input to this function is a string representing musical notes in a special ASCII format.\n# Your task is to parse this string and return array of integers corresponding to how many beats does each\n# not last.\n# Here is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|' - quater note, lasts one beat\n# >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nsub parse_music {\n    my($music_string) = @_;\n    my $music_array = [];\n    my $music_array_len = 0;\n    my $music_array_last_beat = 0;\n    my $music_array_first_beat = 0;\n    my $music_array_last_note = 0;\n    my $music_array_first_note = 0;\n    my $music_array_last_note_and_beat = 0;\n    my $music_array_first_note_and_beat = 0;\n    my $music_array_last_note_and_beat_and_beat = 0;\n    my $music_array_first_note_and_beat_and_beat = 0;\n    my $music_array_last_note_and_beat_and_beat_and_note = 0;\n    my $music_array_first_note_and_beat_and_note = 0;\n    my $music_array_last_note_and_beat_and_note_and_note = 0;\n    my $music_array_first_note_and_beat_and_note_and_note_and_note = 0;\n    my $music_array_last_note_and_beat_and_note_and_note_and_note_and_note = 0;\n    my $music_array_first_note_and_be"], ["# Find how many times a given substring can be found in the original string. Count overlaping cases.\n# >>> how_many_times(\"\", \"a\")\n# 0\n# >>> how_many_times(\"aaa\", \"a\")\n# 3\n# >>> how_many_times(\"aaaa\", \"aa\")\n# 3\nsub how_many_times {\n    my($string, $substring) = @_;\n    my($count) = 0;\n    my($overlap) = 0;\n    my($overlap_count) = 0;\n    my($overlap_count_max) = 0;\n    my($overlap_count_min) = 0;\n    my($overlap_count_max_min) = 0;\n    my($overlap_count_max_min_max) = 0;\n    my($overlap_count_max_min_max_max) = 0;\n    my($overlap_count_max_min_max_max_max) = 0;\n    my($overlap_count_max_min_max_max_max_max) = 0;\n    my($overlap_count_max_min_max_max_max_max_max) = 0;\n    my($overlap_count_max_min_max_max_max_max_max_max) = 0;\n    my($overlap_count_max_min_max_max_max_max_max_max_max) = 0;\n    my($overlap_count_max_min_max_max_max_max_max_max_max_max) = 0;\n    my($overlap_count_max_min_max_max_max_max_max_max_max_max_max) = 0;\n    my($overlap_count_max_min_max_max_max_max_max_max_max_max_max) = 0;\n    my($overlap_count_max_min_max_max_max_max_max_max_max_max_max_max) = 0;\n    my($overlap_count_max_min_max_max_max_max"], ["# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n# Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers {\n    my($numbers) = @_;\n    my $result = \"\";\n    for my $number (sort { $number <=> $numbers->[$_] } @$numbers) {\n        $result .= $number;\n    }\n    return $result;\n}"], ["# From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n# [2.0, 2.2]\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n# [2.0, 2.0]\nsub find_closest_elements {\n    my($numbers) = @_;\n    my $closest_element = $numbers->[0];\n    my $closest_element_index = 0;\n    my $closest_element_value = $numbers->[0];\n    my $closest_element_index_value = 0;\n    my $closest_element_index_value_to_return = 0;\n    my $closest_element_index_value_to_return_to_return = 0;\n    my $closest_element_index_value_to_return_to_return_to_return = 0;\n    my $closest_element_index_value_to_return_to_return_to_return_to_return = 0;\n    my $closest_element_index_value_to_return_to_return_to_return_to_return = 0;\n    my $closest_element_index_value_to_return_to_return_to_return_to_return = 0;\n    my $closest_element_index_value_to_return_to_return_to_return_to_return = 0;\n    my $closest_element_index_value_to_return_to_return_to_return_to_return = 0;\n    my $closest_element_index_value_to_return_to_return_to_return_to_return = 0;\n    my $closest_element_index_value_to_return_to_return_to_return_"], ["# Given array of numbers (of at least two elements), apply a linear transform to that array,\n# such that the smallest number will become 0 and the largest will become 1\n# >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0, 0.25, 0.5, 0.75, 1.0]\nsub rescale_to_unit {\n    my($numbers) = @_;\n    my $min = 0;\n    my $max = 1;\n    my $step = 1;\n    my $rescale = 1;\n    my $rescale_to_unit = 1;\n    my $rescale_to_unit_step = 1;\n    my $rescale_to_unit_min = 0;\n    my $rescale_to_unit_max = 1;\n    my $rescale_to_unit_step_min = 1;\n    my $rescale_to_unit_step_max = 1;\n    my $rescale_to_unit_min_step = 1;\n    my $rescale_to_unit_max_step = 1;\n    my $rescale_to_unit_min_step_min = 1;\n    my $rescale_to_unit_max_step_min = 1;\n    my $rescale_to_unit_min_step_max = 1;\n    my $rescale_to_unit_max_step_max = 1;\n    my $rescale_to_unit_min_step_min_max = 1;\n    my $rescale_to_unit_max_step_min_max = 1;\n    my $rescale_to_unit_min_step_max_min = 1;\n    my $rescale_to_unit_max_step_min_max = 1;\n    my $rescale_to_unit_min_step_max_min = 1;\n    my $rescale_to_unit"], ["# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1, 2, 3]\nsub filter_integers {\n    my($values) = @_;\n    my %filtered = map { $_->[0] } @values;\n    return map { $_->[0] } keys %filtered;\n}"], ["# Return length of given string\n# >>> strlen(\"\")\n# 0\n# >>> strlen(\"abc\")\n# 3\nsub strlen {\n    my($string) = @_;\n    my($len) = 0;\n    for(my $i=0; $i<@$string; $i++) {\n        $len += $string->[$i];\n    }\n    return $len;\n}"], ["# For a given number n, find the largest number that divides n evenly, smaller than n\n# >>> largest_divisor(15)\n# 5\nsub largest_divisor {\n    my($n) = @_;\n    my($divisor) = $n / 10;\n    my($remainder) = $n % 10;\n    my($divisor_remainder) = $divisor / $remainder;\n    return $divisor_remainder if $divisor_remainder > 1;\n    return $divisor_remainder;\n}"], ["# Return array of prime factors of given integer in the order from smallest to largest.\n# Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n# Input number should be equal to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\nsub factorize {\n    my($n) = @_;\n    my @factors = factor($n);\n    my $factors_count = scalar @factors;\n    my @factors_array = map { $_->[0] } @factors;\n    my $factors_count_array = map { $_->[0] } @factors_array;\n    my $factors_count_array_map = map { $_->[0] } @factors_count_array;\n    my $factors_count_array_map_reverse = map { $_->[0] } @factors_count_array_map;\n    my $factors_count_array_map_reverse_reverse = map { $_->[0] } @factors_count_array_map_reverse;\n    my $factors_count_array_map_reverse_reverse_reverse = map { $_->[0] } @factors_count_array_map_reverse_reverse;\n    my $factors_count_array_map_reverse_reverse_reverse_reverse = map { $_->[0] } @factors_count_array_map_reverse_reverse_reverse;\n    my $factors_count_array_map_reverse_reverse_reverse_reverse_reverse = map { $_->[0] } @factors_count_array_map_reverse_reverse_reverse_reverse;\n    my $factors_count_array_map_reverse_reverse_reverse_reverse_reverse_reverse = map { $_->[0] } @factors_count_array_map_reverse_reverse_reverse_reverse_reverse;\n    my $factors_count_array_map_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse"], ["# From an array of integers, remove all elements that occur more than once.\n# Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n    my $result = [];\n    for my $number (sort { $a <=> $b } @$numbers) {\n        $result = $result . $number unless $result eq $number;\n    }\n    return $result;\n}"], ["# For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n    my($string) = @_;\n    my $new_string = $string;\n    $new_string =~ s/[A-Z]/a/g;\n    return $new_string;\n}"], ["# Concatenate array of strings into a single string\n# >>> concatenate([])\n# \"\"\n# >>> concatenate([\"a\", \"b\", \"c\"])\n# \"abc\"\nsub concatenate {\n    my($strings) = @_;\n    my $result = \"\";\n    for my $string (@$strings) {\n        $result .= $string;\n    }\n    return $result;\n}"], ["# Filter an input array of strings only for ones that start with a given prefix.\n# >>> filter_by_prefix([], \"a\")\n# []\n# >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\nsub filter_by_prefix {\n    my($strings, $prefix) = @_;\n    my $result = [];\n    for my $string (@$strings) {\n        if ($string =~ /$prefix/i) {\n            push @$result, $string;\n        }\n    }\n    return $result;\n}"], ["# Return only positive numbers in the array.\n# >>> get_positive([-1, 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\nsub get_positive {\n    my($l) = @_;\n    my $pos = 0;\n    for my $i (0..$#l) {\n        $pos = $l->[$i] if $l->[$i] > $l->[$i-1];\n    }\n    return $pos;\n}"], ["# Return true if a given number is prime, and false otherwise.\n# >>> is_prime(6)\n# \"\"\n# >>> is_prime(101)\n# 1\n# >>> is_prime(11)\n# 1\n# >>> is_prime(13441)\n# 1\n# >>> is_prime(61)\n# 1\n# >>> is_prime(4)\n# \"\"\n# >>> is_prime(1)\n# \"\"\nsub is_prime {\n    my($n) = @_;\n    my($mod, $divisor) = split(/\\//, $n);\n    my($mod_divisor) = split(/\\//, $divisor);\n    my($mod_divisor_mod) = split(/\\//, $divisor);\n    my($mod_divisor_mod_mod) = split(/\\//, $divisor);\n    my($mod_divisor_mod_divisor) = split(/\\//, $divisor);\n    my($mod_divisor_divisor) = split(/\\//, $divisor);\n    my($mod_divisor_divisor_mod) = split(/\\//, $divisor);\n    my($mod_divisor_divisor_divisor) = split(/\\//, $divisor);\n    my($mod_divisor_divisor_divisor_mod) = split(/\\//, $divisor);\n    my($mod_divisor_divisor_divisor_divisor) = split(/\\//, $divisor);\n    my($mod_divisor_divisor_divisor_divisor_mod) = split(/\\//, $divisor);\n    my($mod_divisor_divisor_divisor_divisor_divisor) = split(/\\//, $divisor);\n    my($mod_divisor_divisor_divisor_divisor_divisor_mod) = split(/\\//, $divisor);\n    my($mod_divisor_divisor_"], ["# This function takes an array l and returns an array l' such that\n# l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n# to the values of the corresponding indicies of l, but sorted.\n# >>> sort_third([1, 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4, 8, 9, 5]\nsub sort_third {\n    my($l) = @_;\n    my %indices = sort { $a <=> $b } (map { $_->[0] } @$l);\n    my %values = map { $_->[1] } @$l;\n    my %sorted = map { $_->[0] } @$l;\n    my @sorted_indices = sort { $a <=> $b } \\%indices;\n    my @sorted_values = sort { $a <=> $b } \\%values;\n    my @sorted_values_sorted = sort { $a <=> $b } \\%sorted;\n    return @sorted_values_sorted;\n}"], ["# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n    my($r) = @_;\n    my($i) = @_;\n    my($j) = @_;\n    my($k) = @_;\n    my($l) = @_;\n    my($m) = @_;\n    my($n) = @_;\n    my($o) = @_;\n    my($p) = @_;\n    my($q) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my($r) = @_;\n    my"], ["# Return maximum element in the array.\n# >>> max_element([1, 2, 3])\n# 3\n# >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# 123\nsub max_element {\n    my($l) = @_;\n    my $r = $l;\n    while (my($k, $v) = each(%{$l})) {\n        $r = $k if $v > $r;\n    }\n    return $r;\n}"], ["# Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n# >>> fizz_buzz(50)\n# 0\n# >>> fizz_buzz(78)\n# 2\n# >>> fizz_buzz(79)\n# 3\nsub fizz_buzz {\n    my($n) = @_;\n    my($fizz, $buzz, $zero) = (0, 0, 0);\n    for(1..$n) {\n        $zero += 1;\n        $fizz += $zero;\n        $buzz += $zero;\n    }\n    return $fizz + $buzz;\n}"], ["# This function takes an array l and returns an array l' such that\n# l' is identical to l in the odd indicies, while its values at the even indicies are equal\n# to the values of the even indicies of l, but sorted.\n# >>> sort_even([1, 2, 3])\n# [1, 2, 3]\n# >>> sort_even([5, 6, 3, 4])\n# [3, 6, 5, 4]\nsub sort_even {\n    my($l) = @_;\n    my($l_even) = @{$l};\n    my($l_odd) = @{$l_even};\n    my($l_even_sorted) = @{$l_odd};\n    my($l_odd_sorted) = @{$l_even};\n    my($l_even_sorted_sorted) = @{$l_odd_sorted};\n    my($l_odd_sorted_sorted) = @{$l_even_sorted};\n    my($l_even_sorted_sorted_sorted) = @{$l_odd_sorted_sorted};\n    my($l_odd_sorted_sorted_sorted) = @{$l_even_sorted_sorted};\n    my($l_even_sorted_sorted_sorted_sorted) = @{$l_odd_sorted_sorted_sorted};\n    my($l_even_sorted_sorted_sorted_sorted_sorted) = @{$l_even_sorted_sorted_sorted_sorted};\n    my($l_even_sorted_sorted_sorted_sorted_sorted_sorted) = @{$l_odd_sorted_sorted_sorted_sorted_sorted};\n    my($l_even_sorted_sorted_sorted_sorted_sorted_sorted_sorted) = @{$l_even_sorted_sorted_sorted_sorted_sorted_sorted};\n    my($l_even_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted) = @{$l_odd_sorted_sorted_sorted_sorted_sorted_sorted_sorted};\n    my($l_even_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted) = @{$l_even_sorted_sorted_sorted_sorted_sorted_sorted_sorted"], ["# prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n# 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\nsub prime_fib {\n    my($n) = @_;\n    my($i) = 1;\n    while($i <= $n) {\n        my($fib) = $i * $i;\n        my($prev) = $i;\n        my($next) = $i + 1;\n        my($prev_prev) = $prev * $prev;\n        my($prev_next) = $prev_prev * $prev_prev;\n        my($prev_prev_prev) = $prev_prev * $prev_prev * $prev_prev;\n        my($prev_prev_prev_prev) = $prev_prev_prev * $prev_prev_prev * $prev_prev_prev;\n        my($prev_prev_prev_prev_prev) = $prev_prev_prev_prev * $prev_prev_prev_prev * $prev_prev_prev_prev;\n        my($prev_prev_prev_prev_prev_prev) = $prev_prev_prev_prev_prev * $prev_prev_prev_prev_prev * $prev_prev_prev_prev_prev;\n        my($prev_prev_prev_prev_prev_prev_prev_prev) = $prev_prev_prev_prev_prev_prev_prev * $prev_prev_prev_prev_prev_prev_prev * $prev_prev_prev_prev_prev_prev_prev;\n        my($prev_prev_prev_prev_prev_prev_prev_prev_prev) = $prev_prev_prev_prev_prev_prev_prev_prev * $prev_prev_prev_prev_prev_prev_prev_prev_prev;\n        my($prev_prev_prev_prev_prev_prev_prev_prev_prev_prev) = $prev_prev_"], ["# triples_sum_to_zero takes an array of integers as an input.\n# it returns 1 if there are three distinct elements in the array that\n# sum to zero, and '' otherwise.\n# >>> triples_sum_to_zero([1, 3, 5, 0])\n# \"\"\n# >>> triples_sum_to_zero([1, 3, -2, 1])\n# 1\n# >>> triples_sum_to_zero([1, 2, 3, 7])\n# \"\"\n# >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n# 1\n# >>> triples_sum_to_zero([1])\n# \"\"\nsub triples_sum_to_zero {\n    my($l) = @_;\n    my($sum) = 0;\n    my($i) = 0;\n    my($j) = 0;\n    my($k) = 0;\n    my($l) = 0;\n    my($m) = 0;\n    my($n) = 0;\n    my($p) = 0;\n    my($q) = 0;\n    my($r) = 0;\n    my($s) = 0;\n    my($t) = 0;\n    my($u) = 0;\n    my($v) = 0;\n    my($w) = 0;\n    my($x) = 0;\n    my($y) = 0;\n    my($z) = 0;\n    my($a) = 0;\n    my($b) = 0;\n    my($c) = 0;\n    my($d) = 0;\n    my($e) = 0;\n    my($f) = 0;\n    my($g) = 0;\n    my($h) = 0;\n    my($i) = 0;\n    my($j) = 0;\n    my($k) = 0;\n    my($l) = 0;\n    my($m) = 0;\n    my($n) = "], ["# Imagine a road that's a perfectly straight infinitely long line.\n# n cars are driving left to right;  simultaneously, a different set of n cars\n# are driving right to left.   The two sets of cars start out being very far from\n# each other.  All cars move in the same speed.  Two cars are said to collide\n# when a car that's moving left to right hits a car that's moving right to left.\n# However, the cars are infinitely sturdy and strong; as a result, they continue moving\n# in their trajectory as if they did not collide.\n# This function outputs the number of such collisions.\nsub car_race_collision {\n    my($n) = @_;\n    my $start = 0;\n    my $end = $n;\n    my $collisions = 0;\n    my $collision_count = 0;\n    my $collision_rate = 0;\n    my $collision_rate_max = 0;\n    my $collision_rate_min = 0;\n    my $collision_rate_max_min = 0;\n    my $collision_rate_max_min_max = 0;\n    my $collision_rate_min_max = 0;\n    my $collision_rate_min_max_min = 0;\n    my $collision_rate_min_max_min_max = 0;\n    my $collision_rate_min_max_min_max_min = 0;\n    my $collision_rate_min_max_min_max_min_max = 0;\n    my $collision_rate_min_max_min_max_min_max_min = 0;\n    my $collision_rate_min_max_min_max_min_max_min_max = 0;\n    my $collision_rate_min_max_min_max_min_max_min_max_min = 0;\n    my $collision_rate_min_max_min_max_min_max_min_max_min_max = 0;\n    my $collision_rate_min_max_min_max_"], ["# Return array with elements incremented by 1.\n# >>> incr_list([1, 2, 3])\n# [2, 3, 4]\n# >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [6, 4, 6, 3, 4, 4, 10, 1, 124]\nsub incr_list {\n    my($l) = @_;\n    my($i) = 0;\n    while(1) {\n        $i++;\n        if($i == $l) {\n            return $l;\n        }\n        $l = $l + 1;\n    }\n}"], ["# pairs_sum_to_zero takes an array of integers as an input.\n# it returns 1 if there are two distinct elements in the array that\n# sum to zero, and '' otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# \"\"\n# >>> pairs_sum_to_zero([1, 3, -2, 1])\n# \"\"\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# \"\"\n# >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n# 1\n# >>> pairs_sum_to_zero([1])\n# \"\"\nsub pairs_sum_to_zero {\n    my($l) = @_;\n    my $result = 0;\n    my $sum = 0;\n    for(my $i=0; $i < $l; $i++) {\n        $sum += $l;\n    }\n    return $sum if $sum == 0;\n    return $sum if $sum == 1;\n    return $sum if $sum == $l;\n    return $sum if $sum == 0;\n    return $sum if $sum == $l;\n    return $sum;\n}"], ["# Change numerical base of input number x to base.\n# return string representation after the conversion.\n# base numbers are less than 10.\n# >>> change_base(8, 3)\n# \"22\"\n# >>> change_base(8, 2)\n# \"1000\"\n# >>> change_base(7, 2)\n# \"111\"\nsub change_base {\n    my($x, $base) = @_;\n    my $new = $x;\n    my $old = $base;\n    my $i = 0;\n    while ($i < $base) {\n        $new = sprintf(\"%0$d\", $new);\n        $old = sprintf(\"%0$d\", $old);\n        $i++;\n    }\n    return $new;\n}"], ["# Given length of a side and high return area for a triangle.\n# >>> triangle_area(5, 3)\n# 7.5\nsub triangle_area {\n    my($a, $h) = @_;\n    my($x, $y) = ($a, $h);\n    my($x_min, $y_min, $x_max, $y_max) = ($a, $h);\n    my($x_min_sq, $y_min_sq, $x_max_sq, $y_max_sq) = ($a, $h);\n    my($x_min_sq_per_y, $y_min_sq_per_x) = ($a, $h);\n    my($x_max_sq_per_y, $y_max_sq_per_x) = ($a, $h);\n    my($x_min_sq_per_y, $y_min_sq_per_x) = ($a, $h);\n    my($x_max_sq_per_y, $y_max_sq_per_x) = ($a, $h);\n    my($x_min_sq_per_y, $y_min_sq_per_x) = ($a, $h);\n    my($x_max_sq_per_y, $y_max_sq_per_x) = ($a, $h);\n    my($x_min_sq_per_y, $y_min_sq_per_x) = ($a, $h);\n    my($x_max_sq_per_y, $y_max_sq_per_x) = ($a, $h);\n    my($x_min_sq_per_y, $y_min_sq_per_x) = ($a, $h);\n    my($x_max_sq_per_y, $y_max_sq_per_x) = ($a, $h);\n    my($x_min_sq_per_y, $y_min_sq_per_x) = ($a, $h);\n    my($x_max_sq_per_y, $y_max_sq_per_x)"], ["# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n# 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n    my($a, $b, $c, $d) = @_;\n    my($a1, $b1, $c1, $d1) = @_;\n    my($a2, $b2, $c2, $d2) = @_;\n    my($a3, $b3, $c3, $d3) = @_;\n    my($a4, $b4, $c4, $d4) = @_;\n    my($a5, $b5, $c5, $d5) = @_;\n    my($a6, $b6, $c6, $d6) = @_;\n    my($a7, $b7, $c7, $d7) = @_;\n    my($a8, $b8, $c8, $d8) = @_;\n    my($a9, $b9, $c9, $d9) = @_;\n    my($a10, $b10, $c10, $d10) = @_;\n    my($a11, $b11, $c11, $d11) = @_;\n    my($a12, $b12, $c12, $d12) = @_;\n    my($a13, $b13, $c13, $d13) = @_;\n    my($a14"], ["# Return median of elements in the array l.\n# >>> median([3, 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\nsub median {\n    my($l) = @_;\n    my $median = $l[0];\n    my $median_len = $l[1];\n    my $median_num = $l[2];\n    my $median_arr = $l[3];\n    my $median_arr_len = $l[4];\n    my $median_arr_num = $l[5];\n    my $median_arr_num_len = $l[6];\n    my $median_arr_num_arr = $l[7];\n    my $median_arr_num_arr_len = $l[8];\n    my $median_arr_num_arr_num = $l[9];\n    my $median_arr_num_arr_num_len = $l[10];\n    my $median_arr_num_arr_num_arr = $l[11];\n    my $median_arr_num_arr_num_arr_len = $l[12];\n    my $median_arr_num_arr_num_arr_num = $l[13];\n    my $median_arr_num_arr_num_arr_num_len = $l[14];\n    my $median_arr_num_arr_num_arr_num_arr = $l[15];\n    my $median_arr_num_arr_num_arr_num_arr_len = $l[16];\n    my $median_arr_num_arr_num_arr_num_arr_num = $l[17];\n    my $median_arr_num_arr_num_arr_num_arr_num_len = $l[18];\n    my $median_arr_num_arr_num_arr_num_arr_num_arr = $l["], ["# Checks if given string is a palindrome\n# >>> is_palindrome(\"\")\n# 1\n# >>> is_palindrome(\"aba\")\n# 1\n# >>> is_palindrome(\"aaaaa\")\n# 1\n# >>> is_palindrome(\"zbcd\")\n# \"\"\nsub is_palindrome {\n    my($text) = @_;\n    my($result) = $text =~ s/([a-z])/g;\n    return $result eq $text;\n}"], ["# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n# >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n# >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my($mod) = $p;\n    my($modp) = $n;\n    my($modp) = $mod;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp;\n    my($modp) = $modp"], ["# remove_vowels is a function that takes string and returns string without vowels.\n# >>> remove_vowels(\"\")\n# \"\"\n# >>> remove_vowels(\"abcdef\")\n# \"bcdf\"\n# >>> remove_vowels(\"aaaaa\")\n# \"\"\n# >>> remove_vowels(\"aaBAA\")\n# \"B\"\n# >>> remove_vowels(\"zbcd\")\n# \"zbcd\"\nsub remove_vowels {\n    my($text) = @_;\n    my $result = '';\n    for my $vowel (qw(a e i o u)) {\n        $result .= $text =~ s/[$vowel]//g;\n    }\n    return $result;\n}"], ["# Return 1 if all numbers in the array l are below threshold t.\n# >>> below_threshold([1, 2, 4, 10], 100)\n# 1\n# >>> below_threshold([1, 20, 4, 10], 5)\n# \"\"\nsub below_threshold {\n    my($l, $t) = @_;\n    my $below = 0;\n    my $above = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t_i = 0;\n    my $t_j = 0;\n    my $t_k = 0;\n    my $t_l = 0;\n    my $t_m = 0;\n    my $t_n = 0;\n    my $t_o = 0;\n    my $t_p = 0;\n    my $t_q = 0;\n    my $t_r = 0;\n    my $t_s = 0;\n    my $t_t = 0;\n    my $t_u = 0;\n    my $t_v = 0;\n    my $t_w = 0;\n    my $t_x = 0;\n    my $t_y = 0;\n    my $t_z = 0;\n    my $t_w_i = 0;\n    my $t_w_j = 0;\n    my $t_w_k = 0;\n    my $t_w_l = 0;\n    my $t_w_m = 0;\n    my $t_w_n = 0;\n    my $t_w_o = 0;\n    my $t_w_p = 0;\n"], ["# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\nsub add {\n    my($x, $y) = @_;\n    return $x + $y;\n}"], ["# Check if two words have the same characters.\n# >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n# 1\n# >>> same_chars(\"abcd\", \"dddddddabc\")\n# 1\n# >>> same_chars(\"dddddddabc\", \"abcd\")\n# 1\n# >>> same_chars(\"eabcd\", \"dddddddabc\")\n# \"\"\n# >>> same_chars(\"abcd\", \"dddddddabce\")\n# \"\"\n# >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n# \"\"\nsub same_chars {\n    my($s0, $s1) = @_;\n    my($s2) = @_;\n    my($s3) = @_;\n    my($s4) = @_;\n    my($s5) = @_;\n    my($s6) = @_;\n    my($s7) = @_;\n    my($s8) = @_;\n    my($s9) = @_;\n    my($s10) = @_;\n    my($s11) = @_;\n    my($s12) = @_;\n    my($s13) = @_;\n    my($s14) = @_;\n    my($s15) = @_;\n    my($s16) = @_;\n    my($s17) = @_;\n    my($s18) = @_;\n    my($s19) = @_;\n    my($s20) = @_;\n    my($s21) = @_;\n    my($s22) = @_;\n    my($s23) = @_;\n    my($s24) = @_;\n    my($s25) = @_;\n    my($s26) = @_;\n    my($s27) = @_;\n    my($s28) = @_;\n    my($s29) = @_;\n    my($s30) = @_;\n    my($s31) = @_;\n    my($s32) = @_;\n    my"], ["# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    my($a, $b, $c) = @_;\n    $c = $c + $b;\n    $a = $a + $c;\n    return $a;\n}"], ["# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($corrected) = 0;\n    my($opening) = 0;\n    my($closing) = 0;\n    my($corrected_opening) = 0;\n    my($corrected_closing) = 0;\n    my($corrected_opening_closing) = 0;\n    my($corrected_opening_closing_bracket) = 0;\n    my($corrected_opening_closing_bracket_with_space) = 0;\n    my($corrected_opening_closing_bracket_with_space_and_space) = 0;\n    my($corrected_opening_closing_bracket_with_space_and_space_and_space) = 0;\n    my($corrected_opening_closing_bracket_with_space_and_space_and_space_and_space_and_space) = 0;\n    my($corrected_opening_closing_bracket_with_space_and_space_and_space_and_space_and_space_and_space) = 0;\n    my($corrected_opening_closing_bracket_with_space_and_space_and_space_and_space_and_space_and_space_and_space) = 0;\n    my($corrected_opening_closing_bracket_with_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space_and_space) = 0;\n    my($corrected_opening_closing_bracket_with_space_and_space_and_space_and_space_and_"], ["# Return 1 is array elements are monotonically increasing or decreasing.\n# >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n# >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n    my $i = 0;\n    while ($l > 0) {\n        $i++;\n        $l = $l - $i;\n    }\n    return $i;\n}"], ["# Return sorted unique common elements for two arrays.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\nsub common {\n    my($l1, $l2) = @_;\n    my $l1_keys = keys %$l1;\n    my $l2_keys = keys %$l2;\n    my $l1_values = values %$l1;\n    my $l2_values = values %$l2;\n    my $l1_keys_unique = keys %$l1_keys;\n    my $l2_keys_unique = keys %$l2_keys;\n    my $l1_values_unique = values %$l1_values;\n    my $l2_values_unique = values %$l2_values;\n    my $l1_keys_unique_and_values = keys %$l1_keys_unique;\n    my $l2_keys_unique_and_values = keys %$l2_keys_unique;\n    my $l1_values_unique_and_values = values %$l1_values_unique;\n    my $l2_values_unique_and_values = values %$l2_values_unique;\n    my $l1_keys_unique_and_values_and_values = keys %$l1_keys_unique_and_values;\n    my $l2_keys_unique_and_values_and_values = keys %$l2_keys_unique_and_values;\n    my $l1_values_unique_and_values_and_values = values %$l1_values_unique_and_values;\n    my $l2_values_unique_and_values_and_values = values %$l2_values_unique_and_values;\n    my $l1_keys_unique_and_values_and_values_"], ["# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n# >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\nsub largest_prime_factor {\n    my($n) = @_;\n    my $prime = 1;\n    while ($prime <= $n) {\n        $prime = $prime * 2;\n    }\n    return $prime;\n}"], ["# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n# 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n# 55\n# >>> sum_to_n(1)\n# 1\nsub sum_to_n {\n    my($n) = @_;\n    my($sum) = 0;\n    for(1..$n){\n        $sum += $_;\n    }\n    return $sum;\n}"], ["# brackets is a string of \"(\" and \")\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\")\n# \"\"\n# >>> correct_bracketing(\"()\")\n# 1\n# >>> correct_bracketing(\"(()())\")\n# 1\n# >>> correct_bracketing(\")(()\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $corrected = 0;\n    my $opening = 0;\n    my $closing = 0;\n    my $corrected_opening = 0;\n    my $corrected_closing = 0;\n    my $corrected_opening_closing = 0;\n    my $corrected_opening_closing_closing = 0;\n    my $corrected_opening_closing_closing_closing = 0;\n    my $corrected_opening_closing_closing_closing_closing = 0;\n    my $corrected_opening_closing_closing_closing_closing_closing = 0;\n    my $corrected_opening_closing_closing_closing_closing_closing_closing = 0;\n    my $corrected_opening_closing_closing_closing_closing_closing_closing_closing = 0;\n    my $corrected_opening_closing_closing_closing_closing_closing_closing_closing_closing = 0;\n    my $corrected_opening_closing_closing_closing_closing_closing_closing_closing_closing = 0;\n    my $corrected_opening_closing_closing_closing_closing_closing_closing_closing_closing_closing = 0;\n    my $corrected_opening_closing_closing_closing_closing_closing_closing_closing_closing_closing = 0;\n    my $corrected_opening_closing_closing_closing_clos"], ["# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2] * x^2 + ....\n# Return derivative of this polynomial in the same form.\n# >>> derivative([3, 1, 2, 4, 5])\n# [1, 4, 12, 20]\n# >>> derivative([1, 2, 3])\n# [2, 6]\nsub derivative {\n    my($xs) = @_;\n    my($x) = @_;\n    my($y) = @_;\n    my($z) = @_;\n    my($d) = @_;\n    my($d_x) = @_;\n    my($d_y) = @_;\n    my($d_z) = @_;\n    my($d_x_y) = @_;\n    my($d_x_z) = @_;\n    my($d_y_z) = @_;\n    my($d_x_y_z) = @_;\n    my($d_x_y_z_w) = @_;\n    my($d_x_y_z_w_x) = @_;\n    my($d_x_y_z_w_x_y) = @_;\n    my($d_x_y_z_w_x_y_z) = @_;\n    my($d_x_y_z_w_x_y_z_w) = @_;\n    my($d_x_y_z_w_x_y_z_w_x) = @_;\n    my($d_x_y_z_w_x_y_z_w_x_y) = @_;\n    my($d_x_y_z_w_x_y_z_w_x_y_z) = @_;\n    my($d_x_y_z_w_x_y_z_w_x_y_z_w) = @_;\n    my($d_x_y_z_w_x_y_z_w_x_y_z_w_x) = @_;\n    my($d_x_y_z_w_x"], ["# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n# >>> fibfib(1)\n# 0\n# >>> fibfib(5)\n# 4\n# >>> fibfib(8)\n# 24\nsub fibfib {\n    my($n) = @_;\n    my($i) = 0;\n    my($j) = 1;\n    my($k) = 2;\n    my($l) = 3;\n    my($m) = 4;\n    my($n) = 5;\n    my($p) = 8;\n    my($q) = 16;\n    my($r) = 32;\n    my($s) = 64;\n    my($t) = 128;\n    my($u) = 256;\n    my($v) = 512;\n    my($w) = 1024;\n    my($x) = 2048;\n    my($y) = 4096;\n    my($z) = 8192;\n    my($a) = 1;\n    my($b) = 2;\n    my($c) = 4;\n    my($d) = 8;\n    my($e) = 16;\n    my($f) = 32;\n    my($g) = 64;\n    my($h) = 128;\n    my($i) = 256;\n    my($j) = 512;\n    my($k) = 1024;\n    my($l) = 2048;\n    my($m) = 4096"], ["# Write a function vowels_count which takes a string representing\n# a word as input and returns the number of vowels in the string.\n# Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is at the end of the given word.\n# Example:\n# >>> vowels_count(\"abcde\")\n# 2\n# >>> vowels_count(\"ACEDY\")\n# 3\nsub vowels_count {\n    my($s) = @_;\n    my $count = 0;\n    my $len = length($s);\n    for (0 .. $len - 1) {\n        if ($s[$_] eq 'e') {\n            $count++;\n        }\n    }\n    return $count;\n}"], ["# Circular shift the digits of the integer x, shift the digits right by shift\n# and return the result as a string.\n# If shift > number of digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>> circular_shift(12, 2)\n# \"12\"\nsub circular_shift {\n    my($x, $shift) = @_;\n    my($digits) = ($shift < $x) ? $shift - $x : $x;\n    my($digits_reversed) = ($digits < 0) ? $digits + 1 : $digits;\n    my($digits_reverse) = ($digits_reversed < 0) ? $digits_reverse + 1 : $digits_reverse;\n    my($digits_reverse_reverse) = ($digits_reverse_reverse < 0) ? $digits_reverse_reverse + 1 : $digits_reverse_reverse;\n    my($digits_reverse_reverse_reverse) = ($digits_reverse_reverse_reverse < 0) ? $digits_reverse_reverse_reverse + 1 : $digits_reverse_reverse_reverse;\n    my($digits_reverse_reverse_reverse_reverse) = ($digits_reverse_reverse_reverse_reverse < 0) ? $digits_reverse_reverse_reverse_reverse + 1 : $digits_reverse_reverse_reverse_reverse;\n    my($digits_reverse_reverse_reverse_reverse_reverse) = ($digits_reverse_reverse_reverse_reverse_reverse < 0) ? $digits_reverse_reverse_reverse_reverse_reverse + 1 : $digits_reverse_reverse_reverse_reverse_reverse;\n    my($digits_reverse_reverse_reverse_reverse_reverse_reverse) = ($digits_reverse_reverse_reverse_reverse_reverse_reverse < 0) ? $digits_reverse_reverse_reverse_reverse_reverse_reverse + 1 : $digits_reverse_reverse_reverse_reverse_reverse_reverse;\n    my($digits_reverse_reverse_reverse_reverse_reverse_reverse_reverse) = ($digits_reverse"], ["# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum(\"\")\n# 0\n# >>> digitSum(\"abAB\")\n# 131\n# >>> digitSum(\"abcCd\")\n# 67\n# >>> digitSum(\"helloE\")\n# 69\n# >>> digitSum(\"woArBld\")\n# 131\n# >>> digitSum(\"aAaaaXa\")\n# 153\nsub digitSum {\n    my($s) = @_;\n    my $sum = 0;\n    for my $c (0 .. 255) {\n        $sum += $s[$c];\n    }\n    return $sum;\n}"], ["# In this task, you will be given a string that represents a number of apples and oranges \n# that are distributed in a basket of fruit this basket contains \n# apples, oranges, and mango fruits. Given the string that represents the total number of \n# the oranges and apples and an integer that represent the total number of the fruits \n# in the basket return the number of the mango fruits in the basket.\n# for examble:\n# >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n# 8\n# >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n# 2\n# >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n# 95\n# >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n# 19\nsub fruit_distribution {\n    my($s, $n) = @_;\n    my $total = 0;\n    my $fruit_count = 0;\n    my $mango_count = 0;\n    my $total_count = 0;\n    my $mango_count_total = 0;\n    my $oranges_count = 0;\n    my $oranges_count_total = 0;\n    my $fruit_count_total = 0;\n    my $fruit_count_total_total = 0;\n    my $mango_count_total = 0;\n    my $mango_count_total_total = 0;\n    my $oranges_count_total = 0;\n    my $oranges_count_total_total = 0;\n    my $fruit_count_total = 0;\n    my $fruit_count_total_total = 0;\n    my $mango_count_total = 0;\n    my $mango_count_total_total = 0;\n    my $oranges_count_total = 0;\n    my $oranges_count_total_total = 0;\n    my $fruit_count_total = 0;\n    my $fruit_count_"], ["# \"Given an array representing a branch of a tree that has non-negative integer nodes\n# your task is to pluck one of the nodes and return it.\n# The plucked node should be the node with the smallest even value.\n# If multiple nodes with the same smallest even value are found return the node that has smallest index.\n# The plucked node should be returned in an array, [ smalest_value, its index ],\n# If there are no even values or the given array is empty, return [].\n# Example 1:\n# >>> pluck([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>> pluck([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 3:\n# >>> pluck([])\n# []\n# Example 4:\n# >>> pluck([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the smallest value, but  there are two zeros,\n# so we will choose the first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\nsub pluck {\n    my($arr) = @_;\n    my $index = 0;\n    my $value = 0;\n    my $node = 0;\n    my $plucked = [];\n    my $plucked_index = [];\n    my $plucked_value = [];\n    my $plucked_index_value = [];\n    my $plucked_value_value = [];\n    my $plucked_value_index = [];\n    my $plucked_value_index_value = [];\n    my $plucked_value_index_value_value = [];\n    my $plucked_value_index_value_value_value = [];\n    my $plucked_value_index_value_"], ["# You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n# zero, and has a frequency greater than or equal to the value of the integer itself. \n# The frequency of an integer is the number of times it appears in the array.\n# If no such a value exist, return -1.\n# Examples:\n# >>> search([4, 1, 2, 2, 3, 1])\n# 2\n# >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n# 3\n# >>> search([5, 5, 4, 4, 4])\n# -1\nsub search {\n    my($lst) = @_;\n    my $max = 0;\n    my $count = 0;\n    for my $i (0 .. $#lst) {\n        my $val = $lst[$i];\n        if ($val > 0) {\n            $count++;\n            if ($count == $#lst) {\n                $max = $val;\n            }\n        }\n    }\n    return $max;\n}"], ["# Given array of integers, return array in strange order.\n# Strange sorting, is when you start with the minimum value,\n# then maximum of the remaining integers, then minimum and so on.\n# Examples:\n# >>> strange_sort_list([1, 2, 3, 4])\n# [1, 4, 2, 3]\n# >>> strange_sort_list([5, 5, 5, 5])\n# [5, 5, 5, 5]\n# >>> strange_sort_list([])\n# []\nsub strange_sort_list {\n    my($lst) = @_;\n    my $min = 0;\n    my $max = 0;\n    my $step = 1;\n    my $i = 0;\n    my $temp = [];\n    while ($i < $#lst) {\n        my $value = $lst[$i];\n        $min = $value if $value < $min;\n        $max = $value if $value > $max;\n        $step = $step + 1;\n        $i++;\n        $temp = $temp . $value;\n    }\n    $temp = $temp . $min;\n    $temp = $temp . $max;\n    $temp = $temp . $step;\n    $temp = $temp . $i;\n    return $temp;\n}"], ["# Given the lengths of the three sides of a triangle. Return the area of\n# the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any two sides is greater \n# than the third side.\n# Example:\n# >>> triangle_area(3, 4, 5)\n# 6.0\n# >>> triangle_area(1, 2, 10)\n# -1\nsub triangle_area {\n    my($a, $b, $c) = @_;\n    my($sum) = ($a+$b+$c);\n    my($sum_squared) = ($sum*$sum);\n    my($sum_squared_squared) = ($sum_squared*$sum_squared);\n    my($sum_squared_squared_squared) = ($sum_squared_squared*$sum_squared_squared);\n    my($sum_squared_squared_squared_squared) = ($sum_squared_squared_squared*$sum_squared_squared_squared);\n    my($sum_squared_squared_squared_squared_squared) = ($sum_squared_squared_squared_squared_squared*$sum_squared_squared_squared_squared);\n    my($sum_squared_squared_squared_squared_squared_squared) = ($sum_squared_squared_squared_squared_squared_squared_squared*$sum_squared_squared_squared_squared_squared_squared);\n    my($sum_squared_squared_squared_squared_squared_squared_squared) = ($sum_squared_squared_squared_squared_squared_squared_squared_squared_squared*$sum_squared_squared_squared_squared_squared_squared_squared_squared);\n    my($sum_squared_squared_squared_squared_squared_squared_squared_squared) = ($sum_squared_squared_squared_"], ["# Write a function that returns 1 if the object q will fly, and '' otherwise.\n# The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n# Example:\n# >>> will_it_fly([1, 2], 5)\n# \"\"\n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>> will_it_fly([3, 2, 3], 1)\n# \"\"\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> will_it_fly([3, 2, 3], 9)\n# 1\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# >>> will_it_fly([3], 5)\n# 1\n# # 3 is less than the maximum possible weight, and it's balanced.\nsub will_it_fly {\n    my($q, $w) = @_;\n    my($sum) = 0;\n    my($balanced) = 0;\n    my($max_weight) = 0;\n    my($weight) = 0;\n    my($balanced_array) = 0;\n    my($balanced_array_length) = 0;\n    my($sum_of_elements) = 0;\n    my($sum_of_elements_length) = 0;\n    my($sum_of_elements_weight) = 0;\n    my($sum_of_elements_weight_length) = 0;\n    my($sum_of_elements_sum) = 0;\n    my($sum_of_elements_sum_length) = 0;\n    my($sum_of_elements_sum_weight) = 0;\n    my($sum_of_elements_sum_weight_length) = 0;\n    my($sum_of_elements_sum_weight_sum) = 0;\n    my($sum_of_elements_sum_weight_sum_length) = 0;\n    my"], ["# Given an array arr of integers, find the minimum number of elements that\n# need to be changed to make the array palindromic. A palindromic array is an array that\n# is read the same backwards and forwards. In one change, you can change one element to any other element.\n# For example:\n# >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n# 4\n# >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n# 1\n# >>> smallest_change([1, 2, 3, 2, 1])\n# 0\nsub smallest_change {\n    my($arr) = @_;\n    my $change = 0;\n    my $new_arr = [];\n    my $i = 0;\n    my $j = 0;\n    while ($i < $#arr) {\n        my $old_arr = $arr[$i];\n        my $new_arr = $arr[$j];\n        $j++;\n        $j = $j - 1;\n        $i++;\n        $i = $i - 1;\n        $j++;\n        $j = $j + 1;\n        $j = $j + 1;\n        $j++;\n        $j = $j - 1;\n        $j = $j - 1;\n        $j++;\n        $j = $j - 1;\n        $j = $j - 1;\n        $j++;\n        $j = $j - 1;\n        $j = $j - 1;\n        $j++;\n        $j = $j - 1;\n        $j = $j - 1;\n        $j++;\n        $j = $j - 1;\n        $j = $j - 1;\n        $j++;\n        $j = $j - 1;\n        $j = $j - 1;\n        $j++;\n        $j = $j - 1;\n        $j = $j - 1;\n        $j++;\n        $j = $j - 1"], ["# Write a function that accepts two arrays of strings and returns the array that has \n# total number of chars in the all strings of the array less than the other array.\n# if the two arrays have the same number of chars, return the first array.\n# Examples\n# >>> total_match([], [])\n# []\n# >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n# [\"hI\", \"Hi\"]\n# >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n# [\"hi\", \"admin\"]\n# >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n# [\"hI\", \"hi\", \"hi\"]\n# >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n# [\"4\"]\nsub total_match {\n    my($lst1, $lst2) = @_;\n    my $len1 = length($lst1);\n    my $len2 = length($lst2);\n    my $len1_diff = $len1 - $len2;\n    my $len2_diff = $len2 - $len1;\n    my $len1_diff_abs = abs($len1_diff);\n    my $len2_diff_abs = abs($len2_diff);\n    my $len1_diff_abs_abs = abs($len1_diff_abs);\n    my $len2_diff_abs_abs = abs($len2_diff_abs);\n    my $len1_diff_abs_abs_abs = abs($len1_diff_abs_abs);\n    my $len2_diff_abs_abs_abs = abs($len2_diff_abs_abs);\n    my $len1_diff_abs_abs_abs_abs = abs($len1_diff_abs_abs_abs);\n    my $len2_diff_abs_abs_abs_abs = abs($len2_diff_abs_abs_abs);\n    my $len1_diff_abs_abs_abs_abs = abs($len1_diff_abs_abs_abs);\n    my $len2_diff_abs_abs_"], ["# Write a function that returns true if the given number is the multiplication of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100. \n# Example:\n# >>> is_multiply_prime(30)\n# 1\n# 30 = 2 * 3 * 5\nsub is_multiply_prime {\n    my($a) = @_;\n    my($b) = @_;\n    my($c) = @_;\n    my($d) = @_;\n    my($e) = @_;\n    my($f) = @_;\n    my($g) = @_;\n    my($h) = @_;\n    my($i) = @_;\n    my($j) = @_;\n    my($k) = @_;\n    my($l) = @_;\n    my($m) = @_;\n    my($n) = @_;\n    my($o) = @_;\n    my($p) = @_;\n    my($q) = @_;\n    my($r) = @_;\n    my($s) = @_;\n    my($t) = @_;\n    my($u) = @_;\n    my($v) = @_;\n    my($w) = @_;\n    my($x) = @_;\n    my($y) = @_;\n    my($z) = @_;\n    my($a_prime) = @_;\n    my($b_prime) = @_;\n    my($c_prime) = @_;\n    my($d_prime) = @_;\n    my($e_prime) = @_;\n    my($f_prime) = @_;\n    my($g_prime) = @_;\n    my($h_prime) = @_;\n    my($i_prime) = @_;\n    my($j_prime) = @_;\n    my($k_prime) = @_;\n    my($l_prime) = @_;\n    my($m_prime) = @_;\n    my($n_prime) = @_;\n    my($o_prime) = @_;\n    my($p_prime) = @_;\n    my($q_prime) = @_;\n    my($"], ["# Your task is to write a function that returns true if a number x is a simple\n# power of n and false in other cases.\n# x is a simple power of n if n**int=x\n# For example:\n# >>> is_simple_power(1, 4)\n# 1\n# >>> is_simple_power(2, 2)\n# 1\n# >>> is_simple_power(8, 2)\n# 1\n# >>> is_simple_power(3, 2)\n# \"\"\n# >>> is_simple_power(3, 1)\n# \"\"\n# >>> is_simple_power(5, 3)\n# \"\"\nsub is_simple_power {\n    my($x, $n) = @_;\n    my($power) = $n;\n    my($result) = $x;\n    my($result_pow) = $x;\n    my($result_pow_2) = $x;\n    my($result_pow_3) = $x;\n    my($result_pow_4) = $x;\n    my($result_pow_5) = $x;\n    my($result_pow_6) = $x;\n    my($result_pow_7) = $x;\n    my($result_pow_8) = $x;\n    my($result_pow_9) = $x;\n    my($result_pow_10) = $x;\n    my($result_pow_11) = $x;\n    my($result_pow_12) = $x;\n    my($result_pow_13) = $x;\n    my($result_pow_14) = $x;\n    my($result_pow_15) = $x;\n    my($result_pow_16) = $x;\n    my($result_pow_17) = $x;\n    my($result_pow_18) = $x;\n    my($result_pow_19) = $x;\n    my($result_pow_20) = $x;\n    my($result_pow_21) = $x;\n    my($result_pow_22) = $"], ["# Write a function that takes an integer a and returns 1 \n# if this ingeger is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n# \"\"\nsub iscube {\n    my($a) = @_;\n    my $b = $a * $a;\n    my $c = $a * $b;\n    my $d = $a * $c;\n    my $e = $a * $d;\n    my $f = $a * $e;\n    my $g = $a * $f;\n    my $h = $a * $g;\n    my $i = $a * $h;\n    my $j = $a * $i;\n    my $k = $a * $j;\n    my $l = $a * $k;\n    my $m = $a * $l;\n    my $n = $a * $m;\n    my $o = $a * $n;\n    my $p = $a * $o;\n    my $q = $a * $p;\n    my $r = $a * $q;\n    my $s = $a * $r;\n    my $t = $a * $s;\n    my $u = $a * $t;\n    my $v = $a * $u;\n    my $w = $a * $v;\n    my $x = $a * $w;\n    my $y = $a * $x;\n    my $z = $a * $y;\n    my $a = $z;\n    my $b = $z;\n    my $c = $z;\n    my $d = $z;\n    my $e = $z;\n    my $f = $z;\n    my $g = $z;\n    my $h = $"], ["# You have been tasked to write a function that receives \n# a hexadecimal number as a string and counts the number of hexadecimal \n# digits that are primes (prime number, or a prime, is a natural number \n# greater than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\")\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n# 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my($hex_digits) = split('', $num);\n    my($hex_digits_count) = 0;\n    for(my $i=0; $i<$hex_digits; $i++) {\n        my($hex_digits_count) = $hex_digits_count + 1;\n        if($hex_digits_count == 2) {\n            $hex_digits_count = 0;\n            $hex_digits_count++;\n        }\n    }\n    return $hex_digits_count;\n}"], ["# You will be given a number in decimal form and your task is to convert it to\n# binary format. The function should return a string, with each character representing a binary\n# number. Each character in the string will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n# The extra characters are there to help with the format.\n# Examples:\n# >>> decimal_to_binary(15)\n# \"db1111db\"\n# >>> decimal_to_binary(32)\n# \"db100000db\"\nsub decimal_to_binary {\n    my($decimal) = @_;\n    my $binary = \"\";\n    my $count = 0;\n    my $i = 0;\n    my $decimal_string = \"\";\n    while($i < $decimal) {\n        $decimal_string .= $decimal_string . $binary;\n        $binary = \"\";\n        $i++;\n    }\n    return $decimal_string;\n}"], ["# You are given a string s.\n# Your task is to check if the string is happl or not.\n# A string is happl if its length is at least 3 and every 3 consecutive letters are distinct\n# For example:\n# >>> is_happy(\"a\")\n# \"\"\n# >>> is_happy(\"aa\")\n# \"\"\n# >>> is_happy(\"abcd\")\n# 1\n# >>> is_happy(\"aabb\")\n# \"\"\n# >>> is_happy(\"adb\")\n# 1\n# >>> is_happy(\"xyy\")\n# \"\"\nsub is_happy {\n    my($s) = @_;\n    my $len = length($s);\n    my $distinct = 3;\n    my $happy = 0;\n    for(my $i = 0; $i < $len; $i++) {\n        my $c = $s[$i];\n        if($c eq $c) {\n            $happy++;\n        }\n        else {\n            $happy = 0;\n        }\n    }\n    return $happy;\n}"], ["# It is the last week of the semester and the teacher has to give the grades\n# to students. The teacher has been making her own algorithm for grading.\n# The only problem is, she has lost the code she used for grading.\n# She has given you an array of GPAs for some students and you have to write \n# a function that can output an array of letter grades using the following table:\n# GPA       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7                B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7                C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n# >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nsub numerical_letter_grade {\n    my($grades) = @_;\n    my $grade_equation = [];\n    for my $grade (sort { $a <=> $b } @grades) {\n        $grade_equation[] = $grade;\n    }\n    return $grade_equation;\n}"], ["# Write a function that takes a string and returns 1 if the string\n# length is a prime number or '' otherwise\n# Examples\n# >>> prime_length(\"Hello\")\n# 1\n# >>> prime_length(\"abcdcba\")\n# 1\n# >>> prime_length(\"kittens\")\n# 1\n# >>> prime_length(\"orange\")\n# \"\"\nsub prime_length {\n    my($string) = @_;\n    my $prime = 0;\n    my $length = 0;\n    my $length_prime = 0;\n    my $length_prime_prime = 0;\n    my $length_prime_prime_prime = 0;\n    my $length_prime_prime_prime_prime = 0;\n    my $length_prime_prime_prime_prime_prime = 0;\n    my $length_prime_prime_prime_prime_prime_prime = 0;\n    my $length_prime_prime_prime_prime_prime_prime_prime = 0;\n    my $length_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n    my $length_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n    my $length_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n    my $length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n    my $length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n    my $length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n    my $length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n    my $length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime = 0;\n    my $length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime"], ["# Given a positive integer n, return the count of the numbers of n-digit\n# positive integers that start or end with 1.\nsub starts_one_ends {\n    my($n) = @_;\n    my $start = 1;\n    my $end = $n;\n    while ($start <= $end) {\n        my $one = int(rand(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["# Given a positive integer N, return the total sum of its digits in binary.\n# Example\n# >>> solve(1000)\n# \"1\"\n# >>> solve(150)\n# \"110\"\n# >>> solve(147)\n# \"1100\"\n# Variables:\n# @N integer\n# Constraints: 0 \u2264 N \u2264 10000.\n# Output:\n# a string of binary number\nsub solve {\n    my($N) = @_;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a_1 = 0;\n    my $a_2 = 0;\n    my $a_3 = 0;\n    my $a_4 = 0;\n    my $a_5 = 0;\n    my $a_6 = 0;\n    my $a_7 = 0;\n    my $a_8 = 0;\n    my $a_9 = 0;\n    my $a_10 = 0;\n    my $a_11 = 0;\n    my $a_12 = 0;\n    my $a_13 = 0;\n    my $a_14"], ["# Given a non-empty array of integers lst. add the even elements that are at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n    my($lst) = @_;\n    my @even = @$lst;\n    my @odd = @$lst;\n    my $sum = 0;\n    for my $i (0 .. $#$lst) {\n        if ($odd[$i] == 0) {\n            $sum += $even[$i];\n        }\n        else {\n            $sum += $even[$i] + $odd[$i];\n        }\n    }\n    return $sum;\n}"], ["# Write a function that takes a string and returns an ordered version of it.\n# Ordered version of string, is a string where all words (separated by space)\n# are replaced by a new word where all the characters arranged in\n# ascending order based on ascii value.\n# Note: You should keep the order of words and blank spaces in the sentence.\n# For example:\n# >>> anti_shuffle(\"Hi\")\n# \"Hi\"\n# >>> anti_shuffle(\"hello\")\n# \"ehllo\"\n# >>> anti_shuffle(\"Hello World!!!\")\n# \"Hello !!!Wdlor\"\nsub anti_shuffle {\n    my($s) = @_;\n    my($new_s) = $s;\n    my($old_s) = $s;\n    my($new_word) = $new_s;\n    my($old_word) = $old_s;\n    my($new_space) = $new_s;\n    my($old_space) = $old_s;\n    my($new_space) = $new_s;\n    my($old_space) = $old_s;\n    my($new_space) = $new_s;\n    my($old_space) = $old_s;\n    my($new_space) = $new_s;\n    my($old_space) = $old_s;\n    my($new_space) = $new_s;\n    my($old_space) = $old_s;\n    my($new_space) = $new_s;\n    my($old_space) = $old_s;\n    my($new_space) = $new_s;\n    my($old_space) = $old_s;\n    my($new_space) = $new_s;\n    my($old_space) = $old_s;\n    my($new_space) = $new_s;\n    my($old_space) = $old_s;\n    my($new_space) = $new_s;\n    my($old_space) = $old_s;\n    my($new_space) = $new_s;\n    my($old_space) = $old"], ["# You are given a 2 dimensional data, as a nested arrays,\n# which is similar to matrix, however, unlike matrices,\n# each row may contain a different number of columns.\n# Given lst, and integer x, find integers x in the array,\n# and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n# each array is a coordinate - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending order.\n# Also, sort coordinates of the row by columns in descending order.\n# Examples:\n# >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n# [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n# >>> get_row([], 1)\n# []\n# >>> get_row([[], [1], [1, 2, 3]], 3)\n# [[2, 2]]\nsub get_row {\n    my($lst, $x) = @_;\n    my %coords;\n    my @rows = sort { $a <=> $b } @lst;\n    my @rows_desc = sort { $a <=> $b } @lst;\n    my $row = 0;\n    my $col = 0;\n    for my $row (0 .. $#rows) {\n        for my $col (0 .. $#rows_desc) {\n            if ($row == $x) {\n                $col = 0;\n            }\n            else {\n                $col = $row;\n            }\n            push(@coords{$col}, $row);\n            $row += 1;\n        }\n    }\n    return \\%coords;\n}"], ["# Given an array of non-negative integers, return a copl of the given array after sorting,\n# you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n# or sort it in descending order if the sum( first index value, last index value) is even.\n# Note:\n# * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n# >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2, 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\nsub sort_array {\n    my($array) = @_;\n    my $sum = 0;\n    for my $i (0 .. $#{$array}) {\n        $sum += $array[$i];\n    }\n    my $result = [];\n    for my $i (0 .. $#{$array}) {\n        $result[$i] = $array[$i];\n    }\n    return $result;\n}"], ["# Create a function encrypt that takes a string as an argument and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet should be rotated in a manner such that the letters \n# shift down by two multiplied to two places.\n# For example:\n# >>> encrypt(\"hi\")\n# \"lm\"\n# >>> encrypt(\"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> encrypt(\"gf\")\n# \"kj\"\n# >>> encrypt(\"et\")\n# \"ix\"\nsub encrypt {\n    my($s) = @_;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $rotated = $alphabet;\n    my $rotated_len = length($rotated);\n    my $rotated_shift = 2;\n    my $rotated_shift_len = length($rotated_shift);\n    my $rotated_shift_shift = 2;\n    my $rotated_shift_shift_len = length($rotated_shift_shift);\n    my $rotated_shift_shift_shift = 2;\n    my $rotated_shift_shift_shift_len = length($rotated_shift_shift_shift);\n    my $rotated_shift_shift_shift_shift = 2;\n    my $rotated_shift_shift_shift_shift_len = length($rotated_shift_shift_shift_shift);\n    my $rotated_shift_shift_shift_shift_shift = 2;\n    my $rotated_shift_shift_shift_shift_shift_len = length($rotated_shift_shift_shift_shift_shift);\n    my $rotated_shift_shift_shift_shift_shift_shift = 2;\n    my $rotated_shift_shift_shift_shift_shift_shift_len = length($rotated_shift_shift_shift_shift_shift_shift);\n    my $rotated_shift_shift_shift_shift_shift_shift_shift_len = length($rotated_shift_shift_shift_shift_shift_shift_shift_shift);\n    my $rotated_shift_shift_shift_shift_shift_shift_"], ["# You are given an array of integers.\n# Write a function next_smallest() that returns the 2nd smallest element of the array.\n# Return undef if there is no such element.\n# >>> next_smallest([1, 2, 3, 4, 5])\n# 2\n# >>> next_smallest([5, 1, 4, 3, 2])\n# 2\n# >>> next_smallest([])\n# undef\n# >>> next_smallest([1, 1])\n# undef\nsub next_smallest {\n    my($lst) = @_;\n    my $min = 0;\n    my $max = $lst->length;\n    for my $i (1 .. $max) {\n        if ($lst->[$i] < $min) {\n            $min = $lst->[$i];\n        }\n    }\n    return $min;\n}"], ["# You'll be given a string of words, and your task is to count the number\n# of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\")\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n# 1\nsub is_bored {\n    my($S) = @_;\n    my $count = 0;\n    my $sentence = '';\n    my $sentence_end = '';\n    my $sentence_start = '';\n    my $sentence_end_end = '';\n    my $sentence_start_end = '';\n    my $sentence_end_end_end = '';\n    my $sentence_start_end_end = '';\n    my $sentence_end_end_end_end = '';\n    my $sentence_end_end_end_end_end = '';\n    my $sentence_end_end_end_end_end_end = '';\n    my $sentence_end_end_end_end_end_end_end = '';\n    my $sentence_end_end_end_end_end_end_end_end = '';\n    my $sentence_end_end_end_end_end_end_end_end_end = '';\n    my $sentence_end_end_end_end_end_end_end_end_end_end = '';\n    my $sentence_end_end_end_end_end_end_end_end_end_end_end = '';\n    my $sentence_end_end_end_end_end_end_end_end_end_end_end_end = '';\n    my $sentence_end_end_end_end_end_end_end_end_end_end_end_end_end = '';\n    my $sentence_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end = '';\n    my $sentence_end_end"], ["# Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# 1\n# >>> any_int(3, 2, 2)\n# \"\"\n# >>> any_int(3, -2, 1)\n# 1\n# >>> any_int(3.6, -2.2, 2)\n# \"\"\nsub any_int {\n    my($x, $y, $z) = @_;\n    return 1 if $x == $y && $y == $z;\n    return 0 if $x == $z && $y == $z;\n    return 0 if $x == $y && $y == $z;\n    return 0 if $x == $z && $y == $y;\n    return 0 if $x == $y && $y == $z;\n    return 0 if $x == $z && $y == $y;\n    return 0 if $x == $y && $y == $z;\n    return 0 if $x == $z && $y == $y;\n    return 0 if $x == $y && $y == $z;\n    return 0 if $x == $z && $y == $y;\n    return 0 if $x == $y && $y == $z;\n    return 0 if $x == $z && $y == $y;\n    return 0 if $x == $y && $y == $z;\n    return 0 if $x == $z && $y == $y;\n    return 0 if $x == $y && $y == $z;\n    return 0 if $x == $z && $y == $y;\n    return 0 if $x == $y && $y == $z;\n    return 0 if $x == $z && $y == $y;\n    return 0 if $x == $y && $y == $z;\n    return 0 if $x == $z && $y == $y;\n    return "], ["# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $enc = encode_message($message);\n    return $enc;\n}"], ["# You are given an array of integers.\n# You need to find the largest prime value and return the sum of its digits.\n# Examples:\n# >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n# 10\n# >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n# 25\n# >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n# 13\n# >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n# 11\n# >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n# 3\n# >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n# 7\nsub skjkasdkd {\n    my($lst) = @_;\n    my($sum) = 0;\n    for my $i (0 .. $#$lst) {\n        $sum += $lst[$i];\n    }\n    return $sum;\n}"], ["# Given a hash, return 1 if all keys are strings in lower \n# case or all keys are strings in upper case, else return ''.\n# The function should return '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>> check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case {\n    my($dict) = @_;\n    my($case_case) = $dict->{'case_case'};\n    my($case_upper) = $dict->{'case_upper'};\n    my($case_lower) = $dict->{'case_lower'};\n    my($case_upper_case) = $dict->{'case_upper_case'};\n    my($case_lower_case) = $dict->{'case_lower_case'};\n    my($case_upper_case_lower) = $dict->{'case_upper_case_lower'};\n    my($case_lower_case_lower) = $dict->{'case_lower_case_lower'};\n    my($case_upper_case_upper) = $dict->{'case_upper_case_upper'};\n    my($case_lower_case_upper) = $dict->{'case_lower_case_upper'};\n    my($case_upper_case_lower) = $dict->{'case_upper_case_lower'};\n    my($case_lower_case_lower) = $dict->{'case_lower_case_lower'};\n    my($case_upper_case_upper_case) = $dict->{'case"], ["# Implement a function that takes an non-negative integer and returns an array of the first n\n# integers that are prime numbers and less than n.\n# for example:\n# >>> count_up_to(5)\n# [2, 3]\n# >>> count_up_to(11)\n# [2, 3, 5, 7]\n# >>> count_up_to(0)\n# []\n# >>> count_up_to(20)\n# [2, 3, 5, 7, 11, 13, 17, 19]\n# >>> count_up_to(1)\n# []\n# >>> count_up_to(18)\n# [2, 3, 5, 7, 11, 13, 17]\nsub count_up_to {\n    my($n) = @_;\n    my @count = ();\n    my $i = 0;\n    while ($i < $n) {\n        my $count_up = $i;\n        my $count = 0;\n        while ($count < $n) {\n            my $count_down = $count;\n            my $count_down_up = $count_down + $count_up;\n            my $count_down_down = $count_down_up - $count_up;\n            my $count_down_down_down = $count_down_down - $count_down;\n            my $count_down_down_down_down = $count_down_down_down - $count_down;\n            my $count_down_down_down_down_down = $count_down_down_down_down - $count_down;\n            my $count_down_down_down_down_down_down = $count_down_down_down_down_down - $count_down;\n            my $count_down_down_down_down_down_down_down = $count_down_down_down_down_down_down - $count_down;\n            my $count_down_down_down_down_down_down_down_down = $count_down_down_down_down_down_"], ["# Complete the function that takes two integers and returns \n# the product of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# >>> multiply(148, 412)\n# 16\n# >>> multiply(19, 28)\n# 72\n# >>> multiply(2020, 1851)\n# 0\n# >>> multiply(14, -15)\n# 20\nsub multiply {\n    my($a, $b) = @_;\n    my($unit) = $a =~ /^(\\d+)$/;\n    my($unit_digits) = $b =~ /^(\\d+)$/;\n    my($result) = $unit_digits * $unit;\n    return $result;\n}"], ["# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\n# >>> count_upper(\"aBCdEf\")\n# 1\n# >>> count_upper(\"abcdefg\")\n# 0\n# >>> count_upper(\"dBBE\")\n# 0\nsub count_upper {\n    my($s) = @_;\n    my($i, $j) = @_;\n    my($k, $l) = @_;\n    my($m, $n) = @_;\n    my($o, $p) = @_;\n    my($q, $r) = @_;\n    my($s, $t) = @_;\n    my($u, $v) = @_;\n    my($w, $x) = @_;\n    my($y, $z) = @_;\n    my($a, $b) = @_;\n    my($c, $d) = @_;\n    my($e, $f) = @_;\n    my($g, $h) = @_;\n    my($i, $j) = @_;\n    my($k, $l) = @_;\n    my($m, $n) = @_;\n    my($o, $p) = @_;\n    my($q, $r) = @_;\n    my($s, $t) = @_;\n    my($u, $v) = @_;\n    my($w, $x) = @_;\n    my($y, $z) = @_;\n    my($a, $b) = @_;\n    my($c, $d) = @_;\n    my($e, $f) = @_;\n    my($g, $h) = @_;\n    my($i, $j) = @_;\n    my($k, $l) = @_;\n    my($m, $n) = @_;\n    my($o, $p) = @_;\n    my($q, $r) = @_;\n    my($s, $t) = @_;\n    my($u, $v) = @_;\n    my($w, $x) = @_;\n    my($y, $z) = @_;\n    my($a"], ["# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nsub closest_integer {\n    my($value) = @_;\n    my($min, $max) = @_;\n    my($min_int, $max_int) = @_;\n    my($min_int_diff, $max_int_diff) = @_;\n    my($min_int_diff_to_zero, $max_int_diff_to_zero) = @_;\n    my($min_int_diff_to_zero_to_zero, $max_int_diff_to_zero_to_zero) = @_;\n    my($min_int_diff_to_zero_to_zero_to_zero, $max_int_diff_to_zero_to_zero_to_zero) = @_;\n    my($min_int_diff_to_zero_to_zero_to_zero_to_zero, $max_int_diff_to_zero_to_zero_to_zero_to_zero) = @_;\n    my($min_int_diff_to_zero_to_zero_to_zero_to_zero_to_zero, $max_int_diff_to_zero_to_zero_to_zero_to_zero_to_zero) = @_;\n    my($min_int_diff_to_zero_to_zero_to_zero_to_zero_to_zero, $max_int_diff_to_zero_to_zero_to_zero_to_zero_to_zero) = @_;\n    my($min_int_"], ["# Given a positive integer n, you have to make a pile of n levels of stones.\n# The first level has n stones.\n# The number of stones in the next level is:\n# - the next odd number if n is odd.\n# - the next even number if n is even.\n# Return the number of stones in each level in an array, where element at index\n# i represents the number of stones in the level (i+1).\n# Examples:\n# >>> make_a_pile(3)\n# [3, 5, 7]\nsub make_a_pile {\n    my($n) = @_;\n    my @levels = (1..$n);\n    my @array = ();\n    my $i = 0;\n    while(1) {\n        my $num = shift @levels;\n        if($num == 1) {\n            $array[0] = $i;\n            $i++;\n        }\n        else {\n            $array[0] = $num;\n            $i++;\n        }\n    }\n    return @array;\n}"], ["# You will be given a string of words separated by commas or spaces. Your task is\n# to split the string into words and return an array of the words.\n# For example:\n# >>> words_string(\"Hi, my name is John\")\n# [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n# >>> words_string(\"One, two, three, four, five, six\")\n# [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nsub words_string {\n    my($s) = @_;\n    my @words = split(/\\s+/, $s);\n    return @words;\n}"], ["# This function takes two positive numbers x and y and returns the\n# biggest even integer number that is in the range [x, y] inclusive. If \n# there's no such number, then the function should return -1.\n# For example:\n# >>> choose_num(12, 15)\n# 14\n# >>> choose_num(13, 12)\n# -1\nsub choose_num {\n    my($x, $y) = @_;\n    my $num = 0;\n    my $num_in_range = 0;\n    my $num_out_of_range = 0;\n    my $num_in_range_exclusive = 0;\n    my $num_out_of_range_exclusive = 0;\n    my $num_in_range_inclusive = 0;\n    my $num_out_of_range_inclusive = 0;\n    my $num_in_range_inclusive_exclusive = 0;\n    my $num_out_of_range_inclusive_exclusive = 0;\n    my $num_in_range_exclusive = 0;\n    my $num_out_of_range_exclusive = 0;\n    my $num_in_range_inclusive = 0;\n    my $num_out_of_range_inclusive = 0;\n    my $num_in_range_inclusive_exclusive = 0;\n    my $num_out_of_range_inclusive_exclusive = 0;\n    my $num_in_range_exclusive = 0;\n    my $num_out_of_range_exclusive = 0;\n    my $num_in_range_exclusive_inclusive = 0;\n    my $num_out_of_range_exclusive_inclusive = 0;\n    my $num_in_range_exclusive_inclusive = 0;\n    my $num_out_of_range_exclusive_inclusive = 0;\n    my $num_in"], ["# You are given two positive integers n and m, and your task is to compute the\n# average of the integers from n through m (including n and m). \n# Round the answer to the nearest integer and convert that to binary.\n# If n is greater than m, return -1.\n# Example:\n# >>> rounded_avg(1, 5)\n# \"0b11\"\n# >>> rounded_avg(7, 5)\n# -1\n# >>> rounded_avg(10, 20)\n# \"0b1111\"\n# >>> rounded_avg(20, 33)\n# \"0b11010\"\nsub rounded_avg {\n    my($n, $m) = @_;\n    my $avg = 0;\n    my $i = 0;\n    my $round = 0;\n    while($i < $m) {\n        $avg += $n;\n        $i++;\n        $round++;\n        if($n > $m) {\n            $avg -= $n;\n            $i++;\n            $round++;\n        }\n    }\n    return $avg;\n}"], ["# Given an array of positive integers x. return a sorted array of all \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits {\n    my($x) = @_;\n    my @sorted = sort { $a <=> $b } @$x;\n    return @sorted;\n}"], ["# Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n# reverse the resulting array, and then replace each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n# [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is empty, return an empty array:\n# >>> by_length([])\n# []\n# If the array has any strange number ignore it:\n# >>> by_length([1, -1, 55])\n# [\"One\"]\nsub by_length {\n    my($arr) = @_;\n    my $result = [];\n    my $length = 0;\n    for my $i (0 .. $#$arr) {\n        $length++;\n        if ($i == $length) {\n            $result = $arr;\n            return $result;\n        }\n        $result->[$i] = $arr->[$i];\n    }\n    return $result;\n}"], ["# Implement the function f that takes n as a parameter,\n# and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n# i starts from 1.\n# the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n# Example:\n# >>> f(5)\n# [1, 2, 6, 24, 15]\nsub f {\n    my($n) = @_;\n    my($i) = 0;\n    my($sum) = 0;\n    my($factorial) = 1;\n    my($factorial_i) = 1;\n    while(1) {\n        my($i) = rand(1, $n);\n        my($sum) = rand(1, $n);\n        my($factorial) = rand(1, $n);\n        my($factorial_i) = rand(1, $n);\n        if($i % 2 == 0) {\n            $sum = $sum * $factorial;\n            $factorial_i = $factorial_i * $factorial;\n            $factorial_i = $factorial_i + $sum;\n        }\n        else {\n            $sum = $sum * $factorial;\n            $factorial_i = $factorial_i * $factorial;\n            $factorial_i = $factorial_i + $sum;\n        }\n        $i++;\n        if($i == $n) {\n            $sum = $sum * $factorial;\n            $factorial_i = $factorial_i * $factorial;\n            $factorial_i = $factorial_i + $sum;\n        }\n        else {\n            $sum = $sum * $factorial;\n            $factorial_i = $factorial_i * $factorial;\n            $factorial_i = $factorial_i + $sum;\n        }\n        $i++;\n        if($i == $n) {\n            $sum = $sum * $factorial;\n"], ["# Given a positive integer n, return an array that has the number of even and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n# Example 1:\n# >>> even_odd_palindrome(3)\n# [1, 2]\n# Explanation:\n# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# >>> even_odd_palindrome(12)\n# [4, 6]\n# Explanation:\n# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n# 1. 1 <= n <= 10^3\n# 2. returned array has the number of even and odd integer palindromes respectively.\nsub even_odd_palindrome {\n    my($n) = @_;\n    my @even_odd_palindromes = ();\n    my @odd_palindromes = ();\n    my $i = 1;\n    while ($i <= $n) {\n        my $even_palindrome = $even_palindromes[0];\n        my $odd_palindrome = $odd_palindromes[0];\n        my $even_odd_palindrome = $even_odd_palindromes[0];\n        my $odd_odd_palindrome = $odd_odd_palindromes[0];\n        my $even_odd_palindrome_count = 0;\n        my $odd_odd_palindrome_count = 0;\n        my $even_odd_palindrome_count = 0;\n        my $odd_odd_palindrome_count = 0;\n        my $even_odd_palindrome_count = 0;\n        my $odd_odd_palindrome_count = 0;\n        while ($i <= $n) {\n            my $even_palindrome_count = 0;\n            my $odd_"], ["# Write a function count_nums which takes an array of integers and returns\n# the number of elements which has a sum of digits > 0.\n# If a number is negative, then its first signed digit will be negative:\n# e.g. -123 has signed digits -1, 2, and 3.\n# >>> count_nums([])\n# 0\n# >>> count_nums([-1, 11, -11])\n# 1\n# >>> count_nums([1, 1, 2])\n# 3\nsub count_nums {\n    my($arr) = @_;\n    my $sum = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = "], ["# We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n# numbers in the array will be randomly ordered. Your task is to determine if\n# it is possible to get an array sorted in non-decreasing order by performing \n# the following operation on the given array:\n# You are allowed to perform right shift operation any number of times.\n# One right shift operation means shifting all elements of the array by one\n# position in the right direction. The last element of the array will be moved to\n# the starting position in the array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing the above operation\n# then return 1 else return ''.\n# If the given array is empty then return 1.\n# Note: The given array is guaranteed to have unique elements.\n# For Example:\n# >>> move_one_ball([3, 4, 5, 1, 2])\n# 1\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n# be achieved for the given array.\n# >>> move_one_ball([3, 5, 4, 1, 2])\n# \"\"\n# Explanation:It is not possible to get non-decreasing order for the given\n# array by performing any number of right shift operations.\nsub move_one_ball {\n    my($arr) = @_;\n    my $len = length($arr);\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = "], ["# In this problem, you will implement a function that takes two arrays of numbers,\n# and determines whether it is possible to perform an exchange of elements\n# between them to make lst1 an array of only even numbers.\n# There is no limit on the number of exchanged elements between lst1 and lst2.\n# If it is possible to exchange elements between the lst1 and lst2 to make\n# all the elements of lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n# >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n# \"YES\"\n# >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n# \"NO\"\n# It is assumed that the input arrays will be non-empty.\nsub exchange {\n    my($lst1, $lst2) = @_;\n    my $result = \"NO\";\n    my $len1 = length($lst1);\n    my $len2 = length($lst2);\n    my $len1_even = 0;\n    my $len2_even = 0;\n    my $len1_odd = 0;\n    my $len2_odd = 0;\n    for(my $i = 0; $i < $len1; $i++) {\n        my $elem1 = $lst1->[$i];\n        my $elem2 = $lst2->[$i];\n        if($elem1 == $elem2) {\n            $result = \"YES\";\n            $len1_even = $len1_even + 1;\n            $len2_even = $len2_even + 1;\n            $len1_odd = $len1_odd + 1;\n            $len2_odd = $len2_odd + 1;\n        }\n        else {\n            $result = \"NO\";\n            $len1_even = $len1_even + 1;\n            $len2_even = $len2_even + 1;\n            $len1_odd = $len1_odd + 1;\n            $len2_odd = $len2_odd"], ["# Given a string representing a space separated lowercase letters, return a hash\n# of the letter with the most repetition and containing the corresponding count.\n# If several letters have the same occurrence, return all of them.\n# Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n# >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n    my $count = 0;\n    my $histogram = {};\n    my $count_array = [];\n    my $count_array_length = 0;\n    my $count_array_index = 0;\n    my $count_array_value = 0;\n    my $count_array_value_index = 0;\n    my $count_array_value_length = 0;\n    my $count_array_value_index_length = 0;\n    my $count_array_value_index_length_index = 0;\n    my $count_array_value_index_length_index_index = 0;\n    my $count_array_value_index_length_index_length = 0;\n    my $count_array_value_index_length_index_length_index = 0;\n    my $count_array_value_index_length_index_length_index_index = 0;\n    my $count_array_value_index_length_index_length_index_index_index = 0;\n    my $count_array_value_index_length_index_length_index_index_index = 0;\n    my $count_array_value_index_length_index_length_index_index_index_index = 0;\n    my $count_array_value_index_length_index_length_index_index_index"], ["# Task\n# We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n# then check if the result string is palindrome.\n# A string is called palindrome if it reads the same backward as forward.\n# You should return an array containing the result string and 1/'' for the check.\n# Example\n# >>> reverse_delete(\"abcde\", \"ae\")\n# [\"bcd\", \"\"]\n# >>> reverse_delete(\"abcdef\", \"b\")\n# [\"acdef\", \"\"]\n# >>> reverse_delete(\"abcdedcba\", \"ab\")\n# [\"cdedc\", 1]\nsub reverse_delete {\n    my($s, $c) = @_;\n    my($result) = $s;\n    my($check) = $c;\n    my($result_len) = length($result);\n    my($result_str) = $result;\n    my($result_len_str) = length($result_str);\n    my($result_len_str_len) = length($result_str_len);\n    my($result_len_str_len_str) = length($result_str_len_str);\n    my($result_len_str_len_str_len) = length($result_str_len_str_len_str);\n    my($result_len_str_len_str_len_str) = length($result_str_len_str_len_str_len);\n    my($result_len_str_len_str_len_str_len) = length($result_str_len_str_len_str_len_str);\n    my($result_len_str_len_str_len_str_len_str) = length($result_str_len_str_len_str_len_str_len);\n    my($result_len_str_len_str_len_str_len_str_len_str) = length($result_str_len_str_len_str_len_str_len_str_len);\n    my($result_len_str_len_str_len_str_len_str_len_str_len_str) = length($"], ["# Given an array of strings, where each string consists of only digits, return an array.\n# Each element i of the output should be \"the number of odd elements in the\n# string i of the input.\" where all the i's should be replaced by the number\n# of odd digits in the i'th string of the input.\n# >>> odd_count([\"1234567\"])\n# [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n# >>> odd_count([\"3\", \"11111111\"])\n# [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nsub odd_count {\n    my($lst) = @_;\n    my $count = 0;\n    for my $i (0 .. $#lst) {\n        my $str = $lst[$i];\n        my $odd_count = 0;\n        for my $j (0 .. $#str) {\n            my $num = $str[$j];\n            if ($num == 1) {\n                $odd_count++;\n            }\n        }\n        $count += $odd_count;\n    }\n    return $count;\n}"], ["# Given an array of integers nums, find the minimum sum of any non-empty sub-array\n# of nums.\n# Example\n# >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n# 1\n# >>> minSubArraySum([-1, -2, -3])\n# -6\nsub minSubArraySum {\n    my($nums) = @_;\n    my $min = 0;\n    my $max = 0;\n    my $i = 0;\n    my $sum = 0;\n    my $count = 0;\n    my $sub_sum = 0;\n    my $sub_count = 0;\n    while ($i < $nums) {\n        $sum += $nums[$i];\n        $count++;\n        $sub_sum += $nums[$i];\n        $sub_count++;\n        $i++;\n    }\n    $min = min($sum, $sub_sum);\n    $max = max($sum, $sub_sum);\n    return $min;\n}"], ["# You are given a rectangular grid of wells. Each row represents a single well,\n# and each 1 in a row represents a single unit of water.\n# Each well has a corresponding bucket that can be used to extract water from it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets to empty the wells.\n# Output the number of times you need to lower the buckets.\n# Example 1:\n# >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n# 6\n# Example 2:\n# >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n# 5\n# Example 3:\n# >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n# 0\n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\nsub max_fill {\n    my($grid, $capacity) = @_;\n    my $max_fill = 0;\n    my $bucket_length = 1;\n    my $bucket_capacity = 10;\n    my $bucket_length_max = 10;\n    my $bucket_capacity_max = 10;\n    my $bucket_length_min = 1;\n    my $bucket_capacity_min = 1;\n    my $bucket_length_min = 1;\n    my $bucket_capacity_min = 1;\n    my $bucket_length_max_min = 1;\n    my $bucket_capacity_max_min = 1;\n    my $bucket_length_min_"], ["# In this Kata, you have to sort an array of non-negative integers according to\n# number of ones in their binary representation in ascending order.\n# For similar number of ones, sort based on decimal value.\n# It must be implemented like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my $result = [];\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my"], ["# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns an array of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty array.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n    my($s, $n) = @_;\n    my $words = [];\n    my $i = 0;\n    while(my($c, $s) = each($s)) {\n        if($s =~ /$c/i) {\n            $i++;\n            push(@{$words}, $s);\n        }\n    }\n    return @{$words};\n}"], ["# You are given a word. Your task is to find the closest vowel that stands between \n# two consonants from the right side of the word (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n# find any vowel met the above condition. \n# You may assume that the given string contains English letter only.\n# Example:\n# >>> get_closest_vowel(\"yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel {\n    my($word) = @_;\n    my $closest_vowel = '';\n    my $closest_vowel_index = 0;\n    my $closest_vowel_length = 0;\n    my $closest_vowel_length_index = 0;\n    my $closest_vowel_length_index_end = 0;\n    my $closest_vowel_length_index_begin = 0;\n    my $closest_vowel_length_index_begin_end = 0;\n    my $closest_vowel_length_index_begin_end_end = 0;\n    my $closest_vowel_length_index_begin_end_end_end = 0;\n    my $closest_vowel_length_index_begin_end_end_end_end = 0;\n    my $closest_vowel_length_index_begin_end_end_end_end_end = 0;\n    my $closest_vowel_length_index_begin_end_end_end_end_end_end = 0;\n    my $closest_vowel_length_index_begin_end_end_end_end_end_end_end = 0;\n    my $closest_vowel_length_index_begin_end_end_end_end_end_end_end_end = 0;\n    my $closest_vowel_length"], ["# You are given an array of two strings, both strings consist of open\n# parentheses '(' or close parentheses ')' only.\n# Your job is to check if it is possible to concatenate the two strings in\n# some order, that the resulting string will be good.\n# A string S is considered to be good if and only if all parentheses in S\n# are balanced. For example: the string '(())()' is good, while the string\n# '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n# Examples:\n# >>> match_parens([\"()(\", \")\"])\n# \"Yes\"\n# >>> match_parens([\")\", \")\"])\n# \"No\"\nsub match_parens {\n    my($lst) = @_;\n    my $result = 0;\n    my $len = length($lst);\n    for(my $i = 0; $i < $len; $i++) {\n        my $paren = $lst[$i];\n        my $paren_len = length($paren);\n        if($paren_len == 0) {\n            $result = 1;\n            last;\n        }\n        if($paren_len == 1) {\n            $result = 1;\n            last;\n        }\n        if($paren_len == 2) {\n            $result = 1;\n            last;\n        }\n        if($paren_len == 3) {\n            $result = 1;\n            last;\n        }\n        if($paren_len == 4) {\n            $result = 1;\n            last;\n        }\n        if($paren_len == 5) {\n            $result = 1;\n            last;\n        }\n        if($paren_len == 6) {\n            $result = 1;\n            last;\n        }\n        if($paren_len == 7) {\n            $result = 1;\n            last;\n        }\n        if($paren_len == 8) {\n            $result = 1;\n            last;\n        }\n        if($"], ["# Given an array arr of integers and a positive integer k, return a sorted array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>> maximum([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum([4, -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr, $k) = @_;\n    my($max) = $arr->[0];\n    my($min) = $arr->[1];\n    my($max_i) = $arr->[2];\n    my($min_i) = $arr->[3];\n    my($max_j) = $arr->[4];\n    my($min_j) = $arr->[5];\n    my($max_k) = $arr->[6];\n    my($min_k) = $arr->[7];\n    my($max_i_j) = $arr->[8];\n    my($min_i_j) = $arr->[9];\n    my($max_j_k) = $arr->[10];\n    my($min_j_k) = $arr->[11];\n    my($max_k_i) = $arr->[12];\n    my($min_k_i) = $arr->[13];\n    my($max_i_j_k) = $arr->[14];\n    my($min_i_j_k) = $arr->[15];\n    my($max_j_k_i) = $arr->[16];\n    my($min_j"], ["# Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n# Examples\n# >>> solution([5, 8, 7, 1])\n# 12\n# >>> solution([3, 3, 3, 3, 3])\n# 9\n# >>> solution([30, 13, 24, 321])\n# 0\nsub solution {\n    my($lst) = @_;\n    my $sum = 0;\n    foreach my $elem (@$lst) {\n        $sum += $elem;\n    }\n    return $sum;\n}"], ["# Given a non-empty array of integers arr and an integer k, return\n# the sum of the elements with at most two digits from the first k elements of arr.\n# Example:\n# >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n# 24\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\nsub add_elements {\n    my($arr, $k) = @_;\n    my $sum = 0;\n    for my $i (1 .. $k) {\n        my $element = $arr->[$i];\n        if ($element =~ /^[0-9]{2}$/i) {\n            $sum += $element;\n        }\n    }\n    return $sum;\n}"], ["# Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n# The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n# as follows: start with any positive integer n. Then each term is obtained from the \n# previous term as follows: if the previous term is even, the next term is one half of \n# the previous term. If the previous term is odd, the next term is 3 times the previous\n# term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n# Note: \n# 1. Collatz(1) is [1].\n# 2. returned array sorted in increasing order.\n# For example:\n# get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n# >>> get_odd_collatz(5)\n# [1, 5]\nsub get_odd_collatz {\n    my($n) = @_;\n    my($odd_collatz) = Collatz::get_odd_collatz($n);\n    return $odd_collatz;\n}"], ["# You have to write a function which validates a given date string and\n# returns 1 if the date is valid otherwise ''.\n# The date is valid if all of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n# 3. The months should not be less than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n# >>> valid_date(\"03-11-2000\")\n# 1\n# >>> valid_date(\"15-01-2012\")\n# \"\"\n# >>> valid_date(\"04-0-2040\")\n# \"\"\n# >>> valid_date(\"06-04-2020\")\n# 1\n# >>> valid_date(\"06/04/2020\")\n# \"\"\nsub valid_date {\n    my($date) = @_;\n    my($valid_date) = $date =~ /^(\\d{2})-(\\d{2})-(\\d{4})$/;\n    return $valid_date if $valid_date;\n    return $date;\n}"], ["# Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n# should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> split_words(\"Hello world!\")\n# [\"Hello\", \"world!\"]\n# >>> split_words(\"Hello,world!\")\n# [\"Hello\", \"world!\"]\n# >>> split_words(\"abcdef\")\n# 3\nsub split_words {\n    my($txt) = @_;\n    my @words = split(/\\s+/, $txt);\n    my @lower_case_letters = map {ord($_) % 25} @words;\n    return @lower_case_letters;\n}"], ["# Given an array of numbers, return whether or not they are sorted\n# in ascending order. If array has more than 1 duplicate of the same\n# number, return ''. Assume no negative numbers and only integers.\n# Examples\n# >>> is_sorted([5])\n# 1\n# >>> is_sorted([1, 2, 3, 4, 5])\n# 1\n# >>> is_sorted([1, 3, 2, 4, 5])\n# \"\"\n# >>> is_sorted([1, 2, 3, 4, 5, 6])\n# 1\n# >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n# 1\n# >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n# \"\"\n# >>> is_sorted([1, 2, 2, 3, 3, 4])\n# 1\n# >>> is_sorted([1, 2, 2, 2, 3, 4])\n# \"\"\nsub is_sorted {\n    my($lst) = @_;\n    my $len = length($lst);\n    my $i = 0;\n    my $result = 0;\n    my $result_len = 0;\n    my $result_len_i = 0;\n    my $result_len_i_i = 0;\n    my $result_len_i_i_i = 0;\n    my $result_len_i_i_i_i = 0;\n    my $result_len_i_i_i_i_i = 0;\n    my $result_len_i_i_i_i_i_i = 0;\n    my $result_len_i_i_i_i_i_i_i = 0;\n    my $result_len_i_i_i_i_i_i_i_i = 0;\n    my $result_len_i_i_i_i_i_i_i_i_i = 0;\n    my $result_len_i_i"], ["# You are given two intervals,\n# where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n# The given intervals are closed which means that the interval (start, end)\n# includes both start and end.\n# For each given interval, it is assumed that its start is less or equal its end.\n# Your task is to determine whether the length of intersection of these two \n# intervals is a prime number.\n# Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If the length of the intersection is a prime number, return \"YES\",\n# otherwise, return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output] samples:\n# >>> intersection([1, 2], [2, 3])\n# \"NO\"\n# >>> intersection([-1, 1], [0, 4])\n# \"NO\"\n# >>> intersection([-3, -1], [-5, 5])\n# \"YES\"\nsub intersection {\n    my($interval1, $interval2) = @_;\n    my($length1, $length2) = @_;\n    my($prime1, $prime2) = @_;\n    my($prime_length1, $prime_length2) = @_;\n    my($prime_is_prime, $prime_is_not_prime) = @_;"], ["# You are given an array arr of integers and you need to return\n# sum of magnitudes of integers multiplied by product of all signs\n# of each number in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n# 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n    my $result = 0;\n    for my $i (0 .. $#arr) {\n        my $sign = $arr[$i];\n        $result += $sign * $arr[$i];\n    }\n    return $result;\n}"], ["# Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n# each cell of the grid contains a value. Every integer in the range [1, N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have to find the minimum path of length k in the grid. You can start\n# from any cell, and in each step you can move to any of the neighbor cells,\n# in other words, you can go to cells which share an edge with you current\n# cell.\n# Please note that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n# You CANNOT go off the grid.\n# A path A (of length k) is considered less than a path B (of length k) if\n# after making the ordered arrays of the values on the cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically less\n# than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j] = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered array of the values on the cells that the minimum path go through.\n# Examples:    \n# >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n# [1, 2, 1]\n# >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n# [1]\nsub minPath {\n    my($grid, $k) = @_;\n    my $path = [];\n    my $path_len = 0;\n    my $path_start = 0;\n    my $path_end = 0;\n    my $path_len_start = 0;\n    my $path_len_end = 0;\n    my $path_len_start_end = "], ["# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n# the last couple centuries. However, what people don't know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are given a non-negative integer number n, you have to a return an array of the \n# first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> tri(3)\n# [1, 3, 2, 8]\nsub tri {\n    my($n) = @_;\n    my($a, $b, $c) = @_;\n    my($i) = 1;\n    my($j) = 2;\n    my($k) = 3;\n    my($l) = 4;\n    my($m) = 5;\n    my($n) = $n;\n    my($a_i) = $a;\n    my($b_i) = $b;\n    my($c_i) = $c;\n    my($a_j) = $a;\n    my($b_j) = $b;\n    my($c_j) = $c;\n    my($a_k) = $a;\n    my($b_k) = $b;\n    my($c_k) = $c;\n    my($a_l) = $a;\n    my($b_l) = $b;\n    my($c_l) = $c;\n    my($a_m) = $a;\n    my($b_m) = $b;\n    my($"], ["# Given a positive integer n, return the product of the odd digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>> digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n    my $result = 0;\n    for (1 .. $n) {\n        $result += $n;\n    }\n    return $result;\n}"], ["# Create a function that takes a string as input which contains only square brackets.\n# The function should return 1 if and only if there is a valid subsequence of brackets \n# where at least one bracket in the subsequence is nested.\n# >>> is_nested(\"[[]]\")\n# 1\n# >>> is_nested(\"[]]]]]]][[[[[]\")\n# \"\"\n# >>> is_nested(\"[][]\")\n# \"\"\n# >>> is_nested(\"[]\")\n# \"\"\n# >>> is_nested(\"[[][]]\")\n# 1\n# >>> is_nested(\"[[]][[\")\n# 1\nsub is_nested {\n    my($string) = @_;\n    my($brackets) = $string =~ /^(\\[|\\])/;\n    my($nested) = $brackets =~ /(\\[|\\])/;\n    return $nested if $nested;\n    return $brackets if $brackets;\n    return 0;\n}"], ["# You are given an array of numbers.\n# You need to return the sum of squared numbers in the given array,\n# round each element in the array to the upper int(Ceiling) first.\n# Examples:\n# >>> lst([1.0, 2.0, 3.0])\n# 14\n# >>> lst([1.0, 4.0, 9.0])\n# 98\n# >>> lst([1.0, 3.0, 5.0, 7.0])\n# 84\n# >>> lst([1.4, 4.2, 0.0])\n# 29\n# >>> lst([-2.4, 1.0, 1.0])\n# 6\nsub sum_squares {\n    my($lst) = @_;\n    my $sum = 0;\n    my $i = 0;\n    my $sum_squared = 0;\n    my $sum_squares = 0;\n    foreach my $elem (@$lst) {\n        $sum += $elem;\n        $sum_squared += $elem * $elem;\n        $sum_squares += $elem * $elem;\n        $i++;\n    }\n    return $sum_squared + $sum_squares;\n}"], ["# Create a function that returns 1 if the last character\n# of a given string is an alphabetical character and is not\n# a part of a word, and '' otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n# >>> check_if_last_char_is_a_letter(\"apple pie\")\n# \"\"\n# >>> check_if_last_char_is_a_letter(\"apple pi e\")\n# 1\n# >>> check_if_last_char_is_a_letter(\"apple pi e \")\n# \"\"\n# >>> check_if_last_char_is_a_letter(\"\")\n# \"\"\nsub check_if_last_char_is_a_letter {\n    my($txt) = @_;\n    my $last_char = $txt =~ m/^[a-zA-Z]+$/;\n    return $last_char eq 'a' || $last_char eq 'e' || $last_char eq 'i' || $last_char eq 'o' || $last_char eq 'u' || $last_char eq 'A' || $last_char eq 'P' || $last_char eq 'I' || $last_char eq 'E' || $last_char eq 'I' || $last_char eq 'O' || $last_char eq 'U' || $last_char eq 'a' || $last_char eq 'e' || $last_char eq 'i' || $last_char eq 'o' || $last_char eq 'u' || $last_char eq 'A' || $last_char eq 'P' || $last_char eq 'I' || $last_char eq 'E' || $last_char eq 'I' || $last_char eq 'O' || $last_char eq 'U' || $last_char eq 'a' || $last_char eq 'e' || $last_char eq 'i' || $last_char eq 'o' || $last_char eq 'u' || $last_char eq 'A' || $last_char eq 'P' || $last_char eq 'I' || $last_char eq 'E' || $last_char eq 'I' || $"], ["# Create a function which returns the largest index of an element which\n# is not greater than or equal to the element immediately preceding it. If\n# no such element exists then return -1. The given array will not contain\n# duplicate values.\n# Examples:\n# >>> can_arrange([1, 2, 4, 3, 5])\n# 3\n# >>> can_arrange([1, 2, 3])\n# -1\nsub can_arrange {\n    my($arr) = @_;\n    my $result = 0;\n    my $i = 0;\n    while ($i < scalar(@$arr)) {\n        my $arr_element = $arr[$i];\n        if ($arr_element ne $arr[$i+1]) {\n            $result = $i + 1;\n        }\n        else {\n            $result = $i;\n        }\n        $i++;\n    }\n    return $result;\n}"], ["# Create a function that returns an array (a, b), where 'a' is\n# the largest of negative integers, and 'b' is the smallest\n# of positive integers in an array.\n# If there is no negative or positive integers, return them as undef.\n# Examples:\n# >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n# [undef, 1]\n# >>> largest_smallest_integers([])\n# [undef, undef]\n# >>> largest_smallest_integers([0])\n# [undef, undef]\nsub largest_smallest_integers {\n    my($lst) = @_;\n    my $max = 0;\n    my $min = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s ="], ["# Create a function that takes integers, floats, or strings representing\n# real numbers, and returns the larger variable in its given variable type.\n# Return undef if the values are equal.\n# Note: If a real number is represented as a string, the floating point might be . or ,\n# >>> compare_one(1, 2.5)\n# 2.5\n# >>> compare_one(1, \"2,3\")\n# \"2,3\"\n# >>> compare_one(\"5,1\", \"6\")\n# \"6\"\n# >>> compare_one(\"1\", 1)\n# undef\nsub compare_one {\n    my($a, $b) = @_;\n    my($a_type, $b_type) = split(/,/, $a);\n    my($a_type_str, $b_type_str) = split(/,/, $b);\n    my($a_type_str_lower, $b_type_str_lower) = split(/,/, $a_type_str);\n    my($a_type_str_upper, $b_type_str_upper) = split(/,/, $a_type_str_upper);\n    my($a_type_str_lower, $b_type_str_lower) = split(/,/, $a_type_str_lower);\n    my($a_type_str_upper, $b_type_str_upper) = split(/,/, $a_type_str_upper);\n    my($a_type_str_lower, $b_type_str_lower) = split(/,/, $a_type_str_lower);\n    my($a_type_str_upper, $b_type_str_upper) = split(/,/, $a_type_str_upper);\n    my($a_type_str_lower, $b_type_str_lower) = split(/,/, $a_type_str_lower);\n    my($a_type_str_upper, $b_type_str_upper) = split(/,/, $a_type_str_upper);\n    my($a_type_str_lower, $b_type_str_lower) = split(/,/, $a_type"], ["# Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n# Example\n# >>> is_equal_to_sum_even(4)\n# \"\"\n# >>> is_equal_to_sum_even(6)\n# \"\"\n# >>> is_equal_to_sum_even(8)\n# 1\nsub is_equal_to_sum_even {\n    my($n) = @_;\n    my($sum) = @{$n};\n    my($sum_even) = @{$sum};\n    my($sum_odd) = @{$sum};\n    my($sum_odd_even) = @{$sum_odd};\n    my($sum_odd_even_even) = @{$sum_odd_even};\n    my($sum_odd_even_even_even) = @{$sum_odd_even_even};\n    my($sum_odd_even_even_even_even) = @{$sum_odd_even_even_even};\n    my($sum_odd_even_even_even_even_even) = @{$sum_odd_even_even_even_even};\n    my($sum_odd_even_even_even_even_even_even) = @{$sum_odd_even_even_even_even_even};\n    my($sum_odd_even_even_even_even_even_even_even) = @{$sum_odd_even_even_even_even_even_even};\n    my($sum_odd_even_even_even_even_even_even_even_even) = @{$sum_odd_even_even_even_even_even_even_even};\n    my($sum_odd_even_even_even_even_even_even_even_even_even) = @{$sum_odd_even_even_even_even_even_even_even_even};\n    my($sum_odd_even_even_even_even_even_even_even_even_even) = @{$sum_odd_even_even_even_even_even_even_even_even_even};\n    my($sum_odd_even_even_even_even_even_even_even_even_even"], ["# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n# 288\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\nsub special_factorial {\n    my($n) = @_;\n    my($n_prime) = @_;\n    my($n_prime_prime) = @_;\n    my($n_prime_prime_prime) = @_;\n    my($n_prime_prime_prime_prime) = @_;\n    my($n_prime_prime_prime_prime_prime) = @_;\n    my($n_prime_prime_prime_prime_prime_prime) = @_;\n    my($n_prime_prime_prime_prime_prime_prime_prime) = @_;\n    my($n_prime_prime_prime_prime_prime_prime_prime_prime) = @_;\n    my($n_prime_prime_prime_prime_prime_prime_prime_prime_prime) = @_;\n    my($n_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime) = @_;\n    my($n_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime) = @_;\n    my($n_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime) = @_;\n    my($n_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_"], ["# Given a string text, replace all spaces in it with underscores, \n# and if a string has more than 2 consecutive spaces, \n# then replace all consecutive spaces with - \n# >>> fix_spaces(\" Example\")\n# \"Example\"\n# >>> fix_spaces(\" Example 1\")\n# \"Example_1\"\n# >>> fix_spaces(\" Example 2\")\n# \"_Example_2\"\n# >>> fix_spaces(\" Example 3\")\n# \"_Example-3\"\nsub fix_spaces {\n    my($text) = @_;\n    my($len) = length($text);\n    my($space) = 0;\n    my($space_count) = 0;\n    my($space_count_prev) = 0;\n    my($space_count_next) = 0;\n    my($space_count_prev_prev) = 0;\n    my($space_count_prev_next) = 0;\n    my($space_count_next_next) = 0;\n    my($space_count_next_prev) = 0;\n    my($space_count_prev_prev_prev) = 0;\n    my($space_count_prev_prev_prev_prev) = 0;\n    my($space_count_next_next_next) = 0;\n    my($space_count_next_next_next_next) = 0;\n    my($space_count_next_next_next_next_next) = 0;\n    my($space_count_prev_prev_prev_prev_prev) = 0;\n    my($space_count_prev_prev_prev_prev_prev_prev) = 0;\n    my($space_count_prev_prev_prev_prev_prev_prev_prev) = 0;\n    my($space_count_prev_prev_prev_prev_prev_prev_prev_prev_prev) = 0;\n    my($space_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev) = 0;\n    my($space_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev"], ["# Create a function which takes a string representing a file's name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n# A file's name is considered to be valid if and only if all the following conditions \n# are met:\n# - There should not be more than three digits ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring before the dot should not be empty, and it starts with a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> file_name_check(\"example.txt\")\n# \"Yes\"\n# >>> file_name_check(\"1example.dll\")\n# \"No\"\nsub file_name_check {\n    my($file_name) = @_;\n    my($valid_file_name) = $file_name =~ /^[a-zA-Z0-9\\.\\-_]+$/;\n    return $valid_file_name if $valid_file_name;\n    my($valid_file_name_list) = $file_name =~ /^[a-zA-Z0-9\\.\\-_]+$/;\n    return $valid_file_name_list if $valid_file_name_list;\n    return \"No\";\n}"], ["# \"\n# This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n# multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n# change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n# Examples:\n# >>> lst\n# [1, 2, 3]\n# >>> lst\n# []\n# >>> lst\n# [-1, -5, 2, -1, -5]\nsub sum_squares {\n    my($lst) = @_;\n    my $sum = 0;\n    for my $i (0 .. $#lst) {\n        if ($lst[$i] % 3 == 0 && $lst[$i] % 4 == 0) {\n            $sum += $lst[$i];\n        }\n    }\n    return $sum;\n}"], ["# You are given a string representing a sentence,\n# the sentence contains some words separated by a space,\n# and you have to return a string that contains the words from the original sentence,\n# whose lengths are prime numbers,\n# the order of the words in the new string should be the same as the original one.\n# Example 1:\n# >>> words_in_sentence(\"This is a test\")\n# \"is\"\n# Example 2:\n# >>> words_in_sentence(\"lets go for swimming\")\n# \"go for\"\n# Constraints:\n# * 1 <= len(sentence) <= 100\n# * sentence contains only letters\nsub words_in_sentence {\n    my($sentence) = @_;\n    my($lengths) = @_;\n    my($lengths_prime) = @_;\n    my($lengths_odd) = @_;\n    my($lengths_even) = @_;\n    my($lengths_odd_prime) = @_;\n    my($lengths_even_prime) = @_;\n    my($lengths_odd_odd) = @_;\n    my($lengths_even_odd) = @_;\n    my($lengths_odd_odd_prime) = @_;\n    my($lengths_even_odd_prime) = @_;\n    my($lengths_odd_odd_odd) = @_;\n    my($lengths_even_odd_odd) = @_;\n    my($lengths_odd_odd_odd_prime) = @_;\n    my($lengths_even_odd_odd_odd) = @_;\n    my($lengths_odd_odd_odd_odd_prime) = @_;\n    my($lengths_odd_odd_odd_odd_odd) = @_;\n    my($lengths_odd_odd_odd_odd_odd_prime) = @_;\n    my($lengths_odd_odd_odd_odd_odd_odd_prime) = @_;\n    my($lengths_odd_odd_odd_odd_odd_odd_prime) = @_;\n    my($lengths_odd_odd_odd_odd_odd_odd_prime) = @_;\n    my($length"], ["# Your task is to implement a function that will simplify the expression\n# x * n. The function returns 1 if x * n evaluates to a whole number and ''\n# otherwise. Both x and n, are string representation of a fraction, and have the following format,\n# <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n# You can assume that x, and n are valid fractions, and do not have zero as denominator.\n# >>> simplify(\"1/5\", \"5/1\")\n# 1\n# >>> simplify(\"1/6\", \"2/1\")\n# \"\"\n# >>> simplify(\"7/10\", \"10/2\")\n# \"\"\nsub simplify {\n    my($x, $n) = @_;\n    my($x_str, $n_str) = split /[0-9]/, $x;\n    my($x_str_rev, $n_str_rev) = split /[0-9]/, $n;\n    my($x_str_rev_rev, $n_str_rev_rev) = split /[0-9]/, $n_str;\n    my($x_str_rev_rev_rev, $n_str_rev_rev_rev) = split /[0-9]/, $n_str_rev;\n    my($x_str_rev_rev_rev_rev, $n_str_rev_rev_rev_rev) = split /[0-9]/, $n_str_rev_rev;\n    my($x_str_rev_rev_rev_rev_rev, $n_str_rev_rev_rev_rev_rev) = split /[0-9]/, $n_str_rev_rev_rev;\n    my($x_str_rev_rev_rev_rev_rev_rev, $n_str_rev_rev_rev_rev_rev_rev) = split /[0-9]/, $n_str_rev_rev_rev;\n    my($x_str_rev_rev_rev_rev_rev_rev_rev, $n_str_rev_rev_rev_rev_rev_rev_rev) = split /[0-9]/"], ["# Write a function which sorts the given array of integers\n# in ascending order according to the sum of their digits.\n# Note: if there are several items with similar sum of their digits,\n# order them based on their index in original array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1, -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n    my($nums) = @_;\n    my $result = [];\n    for my $num (sort { $a <=> $b } @$nums) {\n        $result[$num] = $num;\n    }\n    return $result;\n}"], ["# Write a function that takes an array of numbers as input and returns \n# the number of elements in the array that are greater than 10 and both \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# >>> specialFilter([15, -73, 14, -15])\n# 1\n# >>> specialFilter([33, -2, -3, 45, 21, 109])\n# 2\nsub specialFilter {\n    my($nums) = @_;\n    my $filtered = [];\n    for my $num (sort { $num <=> $num->[0] } @$nums) {\n        if ($num->[0] % 2 == 0) {\n            push @$filtered, $num;\n        }\n    }\n    return @$filtered;\n}"], ["# You are given a positive integer n. You have to create an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# >>> get_max_triples(5)\n# 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\nsub get_max_triples {\n    my($n) = @_;\n    my $max_triples = 0;\n    my $i = 1;\n    my $j = 1;\n    my $k = 1;\n    while ($i <= $n) {\n        while ($j <= $n) {\n            while ($k <= $n) {\n                if ($i + $j + $k % 3 == 0) {\n                    $max_triples++;\n                }\n            }\n        }\n        $i++;\n        $j++;\n        $k++;\n    }\n    return $max_triples;\n}"], ["# There are eight planets in our solar system: the closerst to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names as strings planet1 and planet2. \n# The function should return an array containing all planets whose orbits are \n# located between the orbit of planet1 and the orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should return an empty array if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>> bf(\"Jupiter\", \"Neptune\")\n# [\"Saturn\", \"Uranus\"]\n# >>> bf(\"Earth\", \"Mercury\")\n# \"Venus\"\n# >>> bf(\"Mercury\", \"Uranus\")\n# [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nsub bf {\n    my($planet1, $planet2) = @_;\n    my @array = sort { $a <=> $b } (split /[a-z]/, $planet1)\n                    . sort { $a <=> $b } (split /[a-z]/, $planet2);\n    return @array;\n}"], ["# Write a function that accepts an array of strings as a parameter,\n# deletes the strings that have odd lengths from it,\n# and returns the resulted array with a sorted order,\n# The array is always an array of strings and never an array of numbers,\n# and it may contain duplicates.\n# The order of the array should be ascending by length of each word, and you\n# should return the array sorted by that rule.\n# If two words have the same length, sort the array alphabetically.\n# The function should return an array of strings in sorted order.\n# You may assume that all words will have the same length.\n# For example:\n# >>> list_sort([\"aa\", \"a\", \"aaa\"])\n# [\"aa\"]\n# >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n# [\"ab\", \"cd\"]\nsub sorted_list_sum {\n    my($lst) = @_;\n    my $sum = 0;\n    for my $word (@$lst) {\n        $sum += $word;\n    }\n    return $sum;\n}"], ["# A simple program which should return the value of x if n is \n# a prime number and should return the value of y otherwise.\n# Examples:\n# >>> x_or_y(7, 34, 12)\n# 34\n# >>> x_or_y(15, 8, 5)\n# 5\nsub x_or_y {\n    my($n, $x, $y) = @_;\n    my($x_prime, $y_prime) = (0, 0);\n    my($x_prime_or_y, $y_prime_or_y) = (0, 0);\n    my($x_prime_or_y_prime, $y_prime_or_y_prime) = (0, 0);\n    my($x_prime_or_y_prime_or_y, $y_prime_or_y_prime_or_y) = (0, 0);\n    my($x_prime_or_y_prime_or_y_prime, $y_prime_or_y_prime_or_y_prime) = (0, 0);\n    my($x_prime_or_y_prime_or_y_prime_or_y, $y_prime_or_y_prime_or_y_prime_or_y) = (0, 0);\n    my($x_prime_or_y_prime_or_y_prime_or_y_prime, $y_prime_or_y_prime_or_y_prime_or_y_prime) = (0, 0);\n    my($x_prime_or_y_prime_or_y_prime_or_y_prime_or_y_prime) = (0, 0);\n    my($x_prime_or_y_prime_or_y_prime_or_y_prime_or_y_prime_or_y_prime) = (0, 0);\n    my($x_prime_or_y_prime_or_y_prime_or_y_prime_or_y_prime_or_y_prime_or_y_prime) = (0, 0);\n"], ["# Given an array of numbers, return the sum of squares of the numbers\n# in the array that are odd. Ignore numbers that are negative or not integers.\n# >>> double_the_difference([1, 3, 2, 0])\n# 10\n# >>> double_the_difference([-1, -2, 0])\n# 0\n# >>> double_the_difference([9, -2])\n# 81\n# >>> double_the_difference([0])\n# 0\n# If the input array is empty, return 0.\nsub double_the_difference {\n    my($lst) = @_;\n    my $result = 0;\n    for my $num (0 .. $#lst) {\n        if ($lst[$num] != 0) {\n            $result = $result + $lst[$num];\n        }\n    }\n    return $result;\n}"], ["# I think we all remember that feeling when the result of some long-awaited\n# event is finally known. The feelings and thoughts you have at that moment are\n# definitely worth noting down and comparing.\n# Your task is to determine if a person correctly guessed the results of a number of matches.\n# You are given two arrays of scores and guesses of equal length, where each index shows a match. \n# Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n# the value is 0, and if not, the value is the absolute difference between the guess and the score.\n# example:\n# >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n# [0, 0, 0, 0, 3, 3]\n# >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n# [4, 4, 1, 0, 0, 6]\nsub compare {\n    my($game, $guess) = @_;\n    my $score = $game->score;\n    my $guess = $game->guess;\n    my $diff = $guess - $score;\n    my $diff_abs = abs($diff);\n    my $diff_abs_diff = $diff_abs - $diff_abs;\n    my $diff_abs_diff_abs = $diff_abs_diff - $diff_abs;\n    my $diff_abs_diff_diff = $diff_abs_diff_abs - $diff_abs_diff;\n    my $diff_abs_diff_diff_diff = $diff_abs_diff_diff_abs - $diff_abs_diff_diff;\n    my $diff_abs_diff_diff_diff_diff = $diff_abs_diff_diff_diff_abs - $diff_abs_diff_diff_diff;\n    my $diff_abs_diff_diff_diff_diff_diff = $diff_abs_diff_diff_diff_diff_abs - $diff_"], ["# You will be given the name of a class (a string) and an array of extensions.\n# The extensions are to be used to load additional classes to the class. The\n# strength of the extension is as follows: Let CAP be the number of the uppercase\n# letters in the extension's name, and let SM be the number of lowercase letters \n# in the extension's name, the strength is given by the fraction CAP - SM. \n# You should find the strongest extension and return a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more extensions with the same strength, you should\n# choose the one that comes first in the array.\n# For example, if you are given \"Slices\" as the class and an array of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n    my($class_name, $extensions) = @_;\n    my $strength = 0;\n    my $strength_array = $extensions->{$_} for keys %extensions;\n    my $strength_array_str = join('-', @$strength_array);\n    my $strength_array_str_lower = join('-', @$strength_array_str);\n    my $strength_array_str_upper = join('-', @$strength_array_str_upper);\n    my $strength_array_str_upper_lower = join('-', @$strength_array_str_upper_lower);\n    my $strength_array_str_upper_lower_lower = join('-', @$strength_array_str_upper_lower_lower);\n    my $strength_array_str_upper_lower_upper = join('-', @$strength_array_str_upper_"], ["# You are given 2 words. You need to return 1 if the second word or any of its rotations is a substring in the first word\n# >>> cycpattern_check(\"abcd\", \"abd\")\n# \"\"\n# >>> cycpattern_check(\"hello\", \"ell\")\n# 1\n# >>> cycpattern_check(\"whassup\", \"psus\")\n# \"\"\n# >>> cycpattern_check(\"abab\", \"baa\")\n# 1\n# >>> cycpattern_check(\"efef\", \"eeff\")\n# \"\"\n# >>> cycpattern_check(\"himenss\", \"simen\")\n# 1\nsub cycpattern_check {\n    my($a, $b) = @_;\n    my($a_len, $b_len) = length($a), length($b);\n    my($a_start, $b_start) = 0, 0;\n    my($a_end, $b_end) = length($a), length($b);\n    my($a_pos, $b_pos) = 0, 0;\n    my($a_rot, $b_rot) = 0, 0;\n    my($a_rot_start, $b_rot_start) = 0, 0;\n    my($a_rot_end, $b_rot_end) = 0, 0;\n    my($a_rot_len, $b_rot_len) = length($a), length($b);\n    my($a_len, $b_len) = length($a), length($b);\n    my($a_start, $b_start) = 0, 0;\n    my($a_end, $b_end) = length($a), length($b);\n    my($a_pos, $b_pos) = 0, 0;\n    my($a_rot, $b_rot) = 0, 0;\n    my($a_rot_start, $b_rot_start) = 0, 0;\n    my($a_rot_end, $b_rot_end) = 0, 0;\n    my($a_rot_len, $b_"], ["# Given an integer. return an array that has the number of even and odd digits respectively.\n# Example:\n# >>> even_odd_count(-12)\n# [1, 1]\n# >>> even_odd_count(123)\n# [1, 2]\nsub even_odd_count {\n    my($num) = @_;\n    my @even = ();\n    my @odd = ();\n    for (1 .. $num) {\n        if ($num % 2 == 0) {\n            push @even, $num;\n        }\n        else {\n            push @odd, $num;\n        }\n    }\n    return @even;\n}"], ["# Given a positive integer, obtain its roman numeral equivalent as a string,\n# and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n# >>> int_to_mini_roman(19)\n# \"xix\"\n# >>> int_to_mini_roman(152)\n# \"clii\"\n# >>> int_to_mini_roman(426)\n# \"cdxxvi\"\nsub int_to_mini_roman {\n    my($number) = @_;\n    my($mini_roman) = int_to_mini_roman_from_number($number);\n    return $mini_roman;\n}"], ["# Given the lengths of the three sides of a triangle. Return 1 if the three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my($x, $y, $z) = @_;\n    my($a1, $b1, $c1) = @_;\n    my($a2, $b2, $c2) = @_;\n    my($a3, $b3, $c3) = @_;\n    my($a4, $b4, $c4) = @_;\n    my($a5, $b5, $c5) = @_;\n    my($a6, $b6, $c6) = @_;\n    my($a7, $b7, $c7) = @_;\n    my($a8, $b8, $c8) = @_;\n    my($a9, $b9, $c9) = @_;\n    my($a10, $b10, $c10) = @_;\n    my($a11, $b11, $c11) = @_;\n    my($a12, $b12, $c12) = @_;\n    my($a13, $b13, $c13) = @_;\n    my($a14, $b14, $c14) = @_;\n    my($a15, $b15, $c15) = @_;\n    my($a16, $b16, $c16) = @_;\n    my($a17, $b17, $c17) = @_;\n    my($a18, $b18, $c18) = @_;\n    my($a19, $b19, $c19)"], ["# Write a function that accepts an array of strings.\n# The array contains different words. Return the word with maximum number\n# of unique characters. If multiple strings have maximum number of unique\n# characters, return the one which comes first in lexicographical order.\n# >>> find_max([\"name\", \"of\", \"string\"])\n# \"string\"\n# >>> find_max([\"name\", \"enam\", \"game\"])\n# \"enam\"\n# >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n# \"aaaaaaa\"\nsub find_max {\n    my($words) = @_;\n    my $max_char = 0;\n    my $max_len = 0;\n    my $max_idx = 0;\n    my $max_len_idx = 0;\n    my $max_idx_len = 0;\n    my $max_idx_len_idx = 0;\n    my $max_idx_len_idx_len = 0;\n    my $max_idx_len_idx_len_idx = 0;\n    my $max_idx_len_idx_len_idx_len = 0;\n    my $max_idx_len_idx_len_idx_len_idx = 0;\n    my $max_idx_len_idx_len_idx_len_idx_idx = 0;\n    my $max_idx_len_idx_len_idx_len_idx_idx_idx = 0;\n    my $max_idx_len_idx_len_idx_len_idx_idx_idx_idx = 0;\n    my $max_idx_len_idx_len_idx_len_idx_idx_idx_idx = 0;\n    my $max_idx_len_idx_len_idx_len_idx_idx_idx_idx = 0;\n    my $max_idx_len_idx_len_idx_len_idx_idx_idx_idx = 0;\n    my $max_idx_len_idx_len_idx_len_idx_idx_idx_idx = 0;\n    my $max_idx_len_idx_len_idx_len_idx_idx"], ["# You're a hungry rabbit, and you already have eaten a certain number of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n# you should return an array of [ total number of eaten carrots after your meals,\n# the number of carrots left after your meals ]\n# if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n# >>> eat(5, 6, 10)\n# [11, 4]\n# >>> eat(4, 8, 9)\n# [12, 1]\n# >>> eat(1, 10, 10)\n# [11, 0]\n# >>> eat(2, 11, 5)\n# [7, 0]\n# Variables:\n# @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n# the number of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\nsub eat {\n    my($number, $need, $remaining) = @_;\n    my $number_remaining = $remaining - $number;\n    my $number_eaten = $number - $number_remaining;\n    my $number_left = $number_remaining;\n    my $number_eaten_left = $number_eaten - $number_left;\n    my $number_remaining_left = $number_remaining - $number_left;\n    my $number_remaining_left_to_eat = $number_remaining_left - $number_eaten_left;\n    my $number_remaining_left_to_eat_to_eat = $number_remaining_left - $number_eaten_left - $number_left;\n    my $number"], ["# Given two arrays operator, and operand. The first array has basic algebra operations, and \n# the second array is an array of integers. Use the two given arrays to build the algebric \n# expression and return the evaluation of this expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator array is equal to the length of operand array minus one.\n# Operand is an array of of non-negative integers.\n# Operator array has at least one operator, and operand array has at least two operands.\nsub do_algebra {\n    my($operator, $operand) = @_;\n    my($result) = $operator->operator($operand);\n    return $result if $result;\n    my($result) = $operator->operator($operand);\n    return $result if $result;\n    my($result) = $operator->operator($operand);\n    return $result if $result;\n    my($result) = $operator->operator($operand);\n    return $result if $result;\n    my($result) = $operator->operator($operand);\n    return $result if $result;\n    my($result) = $operator->operator($operand);\n    return $result if $result;\n    my($result) = $operator->operator($operand);\n    return $result if $result;\n    my($result) = $operator->operator($operand);\n    return $result if $result;\n    my($result) = $operator->operator($operand);\n    return $result if $result;\n    my($result) = $operator->operator($operand);\n    return $result if $result;\n    my($result) = $operator->operator($operand);\n    return $result if $result;\n    my($result) = $operator->"], ["# You are given a string s.\n# if s[i] is a letter, reverse its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string contains no letters, reverse the string.\n# The function should return the resulted string.\n# Examples\n# >>> solve(\"1234\")\n# \"4321\"\n# >>> solve(\"ab\")\n# \"AB\"\n# >>> solve(\"#a@C\")\n# \"#A@c\"\nsub solve {\n    my($s) = @_;\n    my $result = \"\";\n    my $i = 0;\n    while (defined($s[$i])) {\n        $result .= $s[$i];\n        $i++;\n    }\n    return $result;\n}"], ["# Given a string 'text', return its md5 hash equivalent string.\n# If 'text' is an empty string, return undef.\n# >>> string_to_md5(\"Hello world\")\n# \"3e25960a79dbc69b674cd4ec67a72c62\"\nsub string_to_md5 {\n    my($text) = @_;\n    my $md5 = md5_hex($text);\n    return $md5 if $text;\n    return undef;\n}"], ["# Given two positive integers a and b, return the even digits between a\n# and b, in ascending order.\n# For example:\n# >>> generate_integers(2, 8)\n# [2, 4, 6, 8]\n# >>> generate_integers(8, 2)\n# [2, 4, 6, 8]\n# >>> generate_integers(10, 14)\n# []\nsub generate_integers {\n    my($a, $b) = @_;\n    my $result = [];\n    for (1..$b) {\n        my $i = $a + $b;\n        $result[$i] = $i;\n    }\n    return $result;\n}"]]