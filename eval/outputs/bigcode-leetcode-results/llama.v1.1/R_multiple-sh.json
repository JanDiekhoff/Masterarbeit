[["# <func> # Shell\n#!/bin/bash\n# Check if in given list of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> $(has_close_elements \"1.0 2.0 3.0\" \"0.5\")\n# \"false\"\n# >>> $(has_close_elements \"1.0 2.8 3.0 4.0 5.0 2.0\" \"0.3\")\n# \"true\"\n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n  local list=\"$1\"\n  local threshold=\"$2\"\n  local elements=\"$3\"\n  local result=\"$4\"\n  local elements_list=\"$1\"\n  local elements_list_length=\"$2\"\n  local elements_list_index=\"$3\"\n  local elements_list_index_length=\"$4\"\n  local elements_list_index_index=\"$5\"\n  local elements_list_index_index_length=\"$6\"\n  local elements_list_index_length_index=\"$7\"\n  local elements_list_index_length_index_length=\"$8\"\n  local elements_list_index_length_index_length_index=\"$9\"\n  local elements_list_index_length_index_length_index_length=\"$10\"\n  local elements_list_index_length_index_length_index_length_index=\"$11\"\n  local elements_list_index_length_index_length_index_length_index_length=\"$12\"\n  local elements_list_index_length_index_length_index_length_index_length_index=\"$13\"\n  local elements_list_index_length_index_length_index_length_index_length_index_length=\"$14\"\n  local elements_list_index_length_index_length_index_length_index_length_index_length_length=\"$15\"\n  local elements_list_index_length_index_length_index_length_index_length_length_length=\"$16\"\n  local elements_list_index_length_index_length_index_length_index_length_length_length"], ["# <func> # Shell\n#!/bin/bash\n# Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n# separate those group into separate strings and return the list of those.\n# Separate groups are balanced (each open brace is properly closed) and not nested within each other\n# Ignore any spaces in the input string.\n# >>> $(separate_paren_groups \"( ) (( )) (( )( ))\")\n# ['\"()\"', '\"(())\"', '\"(()())\"']\n#\n# $1 is a string\nseparate_paren_groups() {\n    local group_list\n    local group_list_len\n    local group_list_str\n    local group_list_str_len\n    local group_list_str_str\n    local group_list_str_str_len\n    local group_list_str_str_len\n    local group_list_str_str_str\n    local group_list_str_str_str_len\n    local group_list_str_str_str_str_len\n    local group_list_str_str_str_str_str_len\n    local group_list_str_str_str_str_str_str_len\n    local group_list_str_str_str_str_str_str_str_len\n    local group_list_str_str_str_str_str_str_str_str_len\n    local group_list_str_str_str_str_str_str_str_str_str_len\n    local group_list_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_str_"], ["# <func> # Shell\n#!/bin/bash\n# Given a positive floating point number, it can be decomposed into\n# and integer part (largest integer smaller than given number) and decimals\n# (leftover part always smaller than 1).\n# Return the decimal part of the number.\n# >>> $(truncate_number \"3.5\")\n# \"0.5\"\n#\n# $1 is a floating point\ntruncate_number() {\n  # If the number is already a decimal number, return it\n  if [[ \"$1\" == *.0 ]]; then\n    return $1\n  fi\n\n  # If the number is already a integer, return it\n  if [[ \"$1\" == *[0-9] ]]; then\n    return $1\n  fi\n\n  # If the number is already a decimal number, return it\n  if [[ \"$1\" == *.0 ]]; then\n    return $1\n  fi\n\n  # If the number is already an integer, return it\n  if [[ \"$1\" == *[0-9] ]]; then\n    return $1\n  fi\n\n  # If the number is already a decimal number, return it\n  if [[ \"$1\" == *.0 ]]; then\n    return $1\n  fi\n\n  # If the number is already an integer, return it\n  if [[ \"$1\" == *[0-9] ]]; then\n    return $1\n  fi\n\n  # If the number is already a decimal number, return it\n  if [[ \"$1\" == *.0 ]]; then\n    return $1\n  fi\n\n  # If the number is already an integer, return it\n  if [[ \"$1\" == *[0-9] ]]; then\n    return $1\n  fi\n\n  # If the number is already a decimal number, return it\n  if [[ \"$1\" == *.0 ]]; then\n    return $1\n  fi\n\n  echo \"Error: $1 is not a decimal number\"\n  return 1"], ["# <func> # Shell\n#!/bin/bash\n# You're given a list of deposit and withdrawal operations on a bank account that starts with\n# zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n# at that point function should return true. Otherwise it should return false.\n# >>> $(below_zero \"1 2 3\")\n# \"false\"\n# >>> $(below_zero \"1 2 -4 5\")\n# \"true\"\n#\n# $1 is a space-separated list\nbelow_zero() {\n  local -a below_zero_list\n  below_zero_list=\"$1\"\n  local -a below_zero_list_elements\n  below_zero_list_elements=\"$2\"\n  local -a below_zero_list_elements_elements\n  below_zero_list_elements_elements=\"$3\"\n  local -a below_zero_list_elements_elements_elements\n  below_zero_list_elements_elements=\"$4\"\n  local -a below_zero_list_elements_elements_elements_elements\n  below_zero_list_elements_elements_elements=\"$5\"\n  local -a below_zero_list_elements_elements_elements_elements\n  below_zero_list_elements_elements=\"$6\"\n  local -a below_zero_list_elements_elements_elements_elements\n  below_zero_list_elements_elements=\"$7\"\n  local -a below_zero_list_elements_elements_elements_elements\n  below_zero_list_elements_elements=\"$8\"\n  local -a below_zero_list_elements_elements_elements_elements\n  below_zero_list_elements_elements=\"$9\"\n  local -a below_zero_list_elements_elements_elements_elements\n  below_zero_list_elements_elements=\"$10\"\n  local -a below_zero_list_elements_elements_elements_elements\n  below_zero_list_elements_elements=\"$11\"\n  local -a below_zero_list_elements_elements_elements_elements\n  below_zero_list_elements_elements=\"$12\"\n  local -a below_zero_list_elements_elements"], ["# <func> # Shell\n#!/bin/bash\n# For a given list of input numbers, calculate Mean Absolute Deviation\n# around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute difference between each\n# element and a centerpoint (mean in this case):\n# MAD = average | x - x_mean |\n# >>> $(mean_absolute_deviation \"1.0 2.0 3.0 4.0\")\n# \"1.0\"\n#\n# $1 is a space-separated list\nmean_absolute_deviation() {\n  local input=\"$1\"\n  local mean=\"$2\"\n  local center=\"$3\"\n  local deviation=\"$4\"\n  local count=\"$5\"\n  local count_center=\"$6\"\n  local count_mean=\"$7\"\n  local count_std=\"$8\"\n  local count_std_mean=\"$9\"\n  local count_std_dev=\"$10\"\n  local count_std_dev_mean=\"$11\"\n  local count_std_dev_std=\"$12\"\n  local count_std_dev_std_mean=\"$13\"\n  local count_std_dev_std_dev=\"$14\"\n  local count_std_dev_std_dev_mean=\"$15\"\n  local count_std_dev_std_dev_std=\"$16\"\n  local count_std_dev_std_dev_std_mean=\"$17\"\n  local count_std_dev_std_dev_std_dev=\"$18\"\n  local count_std_dev_std_dev_std_dev_mean=\"$19\"\n  local count_std_dev_std_dev_std_dev_dev=\"$20\"\n  local count_std_dev_std_dev_std_dev_dev_mean=\"$21\"\n  local count_std_dev_std_dev_std_dev_dev_dev=\"$22\"\n  local count_std_dev_std_dev_std_dev_dev_mean=\"$23\"\n  local count_std_dev_std_dev_std_dev_dev_dev_dev=\"$24\"\n  local count_std_dev_std_dev_std"], ["# <func> # Shell\n#!/bin/bash\n# Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n# >>> $(intersperse \"\" \"4\")\n# []\n# >>> $(intersperse \"1 2 3\" \"4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"4\"', '\"3\"']\n#\n# $1 is a space-separated list\n# $2 is an integer\nintersperse() {\n  local i\n  local j\n  local delimeter\n  local list\n  local result\n  local list_len\n  local list_num\n  local list_num_len\n  local list_num_num\n  local list_num_num_len\n  local list_num_num_num\n  local list_num_num_num_len\n  local list_num_num_num_num\n  local list_num_num_num_num_len\n  local list_num_num_num_num_num_len\n  local list_num_num_num_num_num_num_len\n  local list_num_num_num_num_num_num_len\n  local list_num_num_num_num_num_num_len\n  local list_num_num_num_num_num_num_len\n  local list_num_num_num_num_num_num_len\n  local list_num_num_num_num_num_num_len\n  local list_num_num_num_num_num_num_len\n  local list_num_num_num_num_num_num_len\n  local list_num_num_num_num_num_num_len\n  local list_num_num_num_num_num_num_len\n  local list_num_num_num_num_num_num_len\n  local list_num_num_num_num_num_num_len\n  local list_num_num_num_num_num_num_len\n  local list_num_num_num_num_num_num_len\n  local list_num_num_num_num_num_num_len\n "], ["# <func> # Shell\n#!/bin/bash\n# Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n# For each of the group, output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"(()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1 is a string\nparse_nested_parens() {\n  local $1\n  local $2\n  local $3\n  local $4\n  local $5\n  local $6\n  local $7\n  local $8\n  local $9\n  local $10\n  local $11\n  local $12\n  local $13\n  local $14\n  local $15\n  local $16\n  local $17\n  local $18\n  local $19\n  local $20\n  local $21\n  local $22\n  local $23\n  local $24\n  local $25\n  local $26\n  local $27\n  local $28\n  local $29\n  local $30\n  local $31\n  local $32\n  local $33\n  local $34\n  local $35\n  local $36\n  local $37\n  local $38\n  local $39\n  local $40\n  local $41\n  local $42\n  local $43\n  local $44\n  local $45\n  local $46\n  local $47\n  local $48\n  local $49\n  local $50\n  local $51\n  local $52\n  local $53\n  local $54\n  local $55\n  local $56\n  local $57\n  local $58\n  local $59\n  local $60\n  local $61\n  local $62\n  local $63\n  local $64\n  local $6"], ["# <func> # Shell\n#!/bin/bash\n# For a given list of integers, return a list consisting of a sum and a product of all the integers in a list.\n# Empty sum should be equal to 0 and empty product should be equal to 1.\n# >>> $(sum_product \"\")\n# ['\"0\"', '\"1\"']\n# >>> $(sum_product \"1 2 3 4\")\n# ['\"10\"', '\"24\"']\n#\n# $1 is a space-separated list\nsum_product() {\n  local list=\"$1\"\n  local sum=\"$2\"\n  local product=\"$3\"\n  local sum_product=\"$4\"\n  local sum_product_list=\"$5\"\n  local product_list=\"$6\"\n  local product_list_length=\"$7\"\n  local product_list_sum=\"$8\"\n  local product_list_product=\"$9\"\n  local product_list_product_length=\"$10\"\n  local product_list_product_sum=\"$11\"\n  local product_list_product_product=\"$12\"\n  local product_list_product_product_length=\"$13\"\n  local product_list_product_product_sum=\"$14\"\n  local product_list_product_product_product=\"$15\"\n  local product_list_product_product_product_length=\"$16\"\n  local product_list_product_product_product_sum=\"$17\"\n  local product_list_product_product_product_product=\"$18\"\n  local product_list_product_product_product_product_length=\"$19\"\n  local product_list_product_product_product_product_sum=\"$20\"\n  local product_list_product_product_product_product_product=\"$21\"\n  local product_list_product_product_product_product_product_length=\"$22\"\n  local product_list_product_product_product_product_product_sum=\"$23\"\n  local product_list_product_product_product_product_product_product=\"$24\"\n  local product_list_product_product_product_product_product_product_length=\"$25\"\n  local product_list"], ["# <func> # Shell\n#!/bin/bash\n# From a given list of integers, generate a list of rolling maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"', '\"4\"']\n#\n# $1 is a space-separated list\nrolling_max() {\n  local i\n  local max_element\n  local max_element_list\n  local max_element_index\n  local max_element_index_list\n  local max_element_index_list_size\n  local max_element_index_list_index\n  local max_element_index_list_index_size\n  local max_element_index_list_size_index\n  local max_element_index_list_size_index_size\n  local max_element_index_list_size_index_size_index\n  local max_element_index_list_size_index_size_index_index\n  local max_element_index_list_size_index_size_index_index_index\n  local max_element_index_list_size_index_size_index_index_index_index\n  local max_element_index_list_size_index_size_index_index_index_index_index\n  local max_element_index_list_size_index_size_index_index_index_index_index_index\n  local max_element_index_list_size_index_size_index_index_index_index_index_index_index\n  local max_element_index_list_size_index_size_index_index_index_index_index_index_index_index\n  local max_element_index_list_size_index_size_index_index_index_index_index_index_index_index_index\n  local max_element_index_list_size_index_size_index_index_index_index_index_index_index_index_index_index\n  local max_element_index_list_size_index_size_index_index_index_index_index"], ["# <func> # Shell\n#!/bin/bash\n# Find the shortest palindrome that begins with a supplied string.\n# Algorithm idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n# - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n# >>> $(make_palindrome \"\")\n# \"\"\n# >>> $(make_palindrome \"cat\")\n# \"catac\"\n# >>> $(make_palindrome \"cata\")\n# \"catac\"\n#\n# $1 is a string\nmake_palindrome() {\n  local string=\"$1\"\n  local prefix=\"$2\"\n  local suffix=\"$3\"\n  local palindromic_prefix=\"$4\"\n  local palindromic_suffix=\"$5\"\n  local reverse_string=\"$6\"\n  local reverse_string_prefix=\"$7\"\n  local reverse_string_suffix=\"$8\"\n  local palindromic_suffix_reverse=\"$9\"\n  local palindromic_prefix_reverse=\"$10\"\n  local palindromic_suffix_reverse=\"$11\"\n  local palindromic_prefix_reverse=\"$12\"\n  local palindromic_suffix_reverse=\"$13\"\n  local palindromic_prefix_reverse=\"$14\"\n  local palindromic_suffix_reverse=\"$15\"\n  local palindromic_prefix_reverse=\"$16\"\n  local palindromic_suffix_reverse=\"$17\"\n  local palindromic_prefix_reverse=\"$18\"\n  local palindromic_suffix_reverse=\"$19\"\n  local palindromic_prefix_reverse=\"$20\"\n  local palindromic_suffix_reverse=\"$21\"\n  local palindromic_prefix_reverse=\"$22\"\n  local palindromic_suffix_reverse=\"$23\"\n  local palindromic_prefix_reverse=\"$24\"\n  local palindromic_suffix_reverse=\"$25\"\n  local palindromic_prefix_reverse"], ["# <func> # Shell\n#!/bin/bash\n# Input are two strings a and b consisting only of 1s and 0s.\n# Perform binary XOR on these inputs and return result also as a string.\n# >>> $(string_xor \"010\" \"110\")\n# \"100\"\n#\n# $1 is a string\n# $2 is a string\nstring_xor() {\n  local a b\n  a=$(echo $1 | tr '01' '00')\n  b=$(echo $2 | tr '01' '00')\n  echo \"XORing $a and $b\"\n  echo \"Result is $b XORed with $a\"\n  echo \"Result is $b XORed with $a\"\n  echo \"Result is $b XORed with $a\"\n  echo \"Result is $b XORed with $a\"\n  echo \"Result is $b XORed with $a\"\n  echo \"Result is $b XORed with $a\"\n  echo \"Result is $b XORed with $a\"\n  echo \"Result is $b XORed with $a\"\n  echo \"Result is $b XORed with $a\"\n  echo \"Result is $b XORed with $a\"\n  echo \"Result is $b XORed with $a\"\n  echo \"Result is $b XORed with $a\"\n  echo \"Result is $b XORed with $a\"\n  echo \"Result is $b XORed with $a\"\n  echo \"Result is $b XORed with $a\"\n  echo \"Result is $b XORed with $a\"\n  echo \"Result is $b XORed with $a\"\n  echo \"Result is $b XORed with $a\"\n  echo \"Result is $b XORed with $a\"\n  echo \"Result is $b XORed with $a\"\n  echo \"Result is $b XORed with $a\"\n  echo \"Result is $b XORed with $a\"\n  echo \"Result is $b XORed with $a\"\n  echo \"Result is $b XORed with $a\"\n"], ["# <func> # Shell\n#!/bin/bash\n# Out of list of strings, return the longest one. Return the first one in case of multiple\n# strings of the same length. Return None in case the input list is empty.\n# >>> $(longest \"\")\n# \"None\"\n# >>> $(longest \"a b c\")\n# \"a\"\n# >>> $(longest \"a bb ccc\")\n# \"ccc\"\n#\n# $1 is a space-separated list\nlongest() {\n  local list=\"$1\"\n  local longest=\"\"\n  local i=0\n  while [[ $list =~ $1 ]]\n  do\n    longest=\"$list\"\n    i=$((i+1))\n    ((i<$#list))\n    ((i>0))\n    ((i<$#list))\n    ((i>0))\n    ((i<$#list))\n    ((i>0))\n    ((i<$#list))\n    ((i>0))\n    ((i<$#list))\n    ((i>0))\n    ((i<$#list))\n    ((i>0))\n    ((i<$#list))\n    ((i>0))\n    ((i<$#list))\n    ((i>0))\n    ((i<$#list))\n    ((i>0))\n    ((i<$#list))\n    ((i>0))\n    ((i<$#list))\n    ((i>0))\n    ((i<$#list))\n    ((i>0))\n    ((i<$#list))\n    ((i>0))\n    ((i<$#list))\n    ((i>0))\n    ((i<$#list))\n    ((i>0))\n    ((i<$#list))\n    ((i>0))\n    ((i<$#list))\n    ((i>0))\n    ((i<$#list))\n    ((i>0))\n    ((i<$#list))\n    ((i>0))\n    ((i<$#list))\n    ((i>0))\n    ((i<$#list))\n    ((i>0))\n    ((i<$#list))\n    ((i"], ["# <func> # Shell\n#!/bin/bash\n# Return a greatest common divisor of two integers a and b\n# >>> $(greatest_common_divisor \"3\" \"5\")\n# \"1\"\n# >>> $(greatest_common_divisor \"25\" \"15\")\n# \"5\"\n#\n# $1 is an integer\n# $2 is an integer\ngreatest_common_divisor() {\n  local a b\n  a=$1\n  b=$2\n  if [ $a -eq $b ]; then\n    return 0\n  else\n    return $(($a % $b))\n  fi"], ["# <func> # Shell\n#!/bin/bash\n# Return list of all prefixes from shortest to longest of the input string\n# >>> $(all_prefixes \"abc\")\n# ['\"a\"', '\"ab\"', '\"abc\"']\n#\n# $1 is a string\nall_prefixes() {\n    local prefixes\n    prefixes=()\n    while IFS= read -r prefix; do\n        prefixes+=(\"$prefix\")\n    done < <(echo $1 | tr -d ' ' | sort -u)\n    return $prefixes"], ["# <func> # Shell\n#!/bin/bash\n# Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n# >>> $(string_sequence \"0\")\n# \"0\"\n# >>> $(string_sequence \"5\")\n# \"0 1 2 3 4 5\"\n#\n# $1 is an integer\nstring_sequence() {\n  local i\n  local n\n  local p\n  local s\n  local m\n  local c\n  local r\n  local r1\n  local r2\n  local r3\n  local r4\n  local r5\n  local r6\n  local r7\n  local r8\n  local r9\n  local r10\n  local r11\n  local r12\n  local r13\n  local r14\n  local r15\n  local r16\n  local r17\n  local r18\n  local r19\n  local r20\n  local r21\n  local r22\n  local r23\n  local r24\n  local r25\n  local r26\n  local r27\n  local r28\n  local r29\n  local r30\n  local r31\n  local r32\n  local r33\n  local r34\n  local r35\n  local r36\n  local r37\n  local r38\n  local r39\n  local r40\n  local r41\n  local r42\n  local r43\n  local r44\n  local r45\n  local r46\n  local r47\n  local r48\n  local r49\n  local r50\n  local r51\n  local r52\n  local r53\n  local r54\n  local r55\n  local r56\n  local r57\n  local r58\n  local r59\n  local r60\n  local r61\n  local r62\n  local r63\n  local r64\n  local r65\n  local r66\n  local r67"], ["# <func> # Shell\n#!/bin/bash\n# Given a string, find out how many distinct characters (regardless of case) does it consist of\n# >>> $(count_distinct_characters \"xyzXYZ\")\n# \"3\"\n# >>> $(count_distinct_characters \"Jerry\")\n# \"4\"\n#\n# $1 is a string\ncount_distinct_characters() {\n  local str=\"$1\"\n  local count=0\n  for i in $(echo $str | tr -d '[:upper:]')\n  do\n    count=$((count + 1))\n  done\n  echo $count"], ["# <func> # Shell\n#!/bin/bash\n# Input to this function is a string representing musical notes in a special ASCII format.\n# Your task is to parse this string and return list of integers corresponding to how many beats does each\n# not last.\n# Here is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o| .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"', '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\nparse_music() {\n  local music=\"$1\"\n  local music_length=\"$(( $music | wc -l ))\"\n  local music_length_ascii=\"$(( $music_length | bc ))\"\n  local music_length_ascii_ascii=\"$(( $music_length_ascii | bc ))\"\n  local music_length_ascii_ascii_ascii=\"$(( $music_length_ascii_ascii | bc ))\"\n  local music_length_ascii_ascii_ascii_ascii=\"$(( $music_length_ascii_ascii_ascii | bc ))\"\n  local music_length_ascii_ascii_ascii_ascii_ascii=\"$(( $music_length_ascii_ascii_ascii_ascii | bc ))\"\n  local music_length_ascii_ascii_ascii_ascii_ascii=\"$(( $music_length_ascii_ascii_ascii_ascii | bc ))\"\n  local music_length_ascii_ascii_ascii_ascii_ascii_ascii=\"$(( $music_length_ascii_ascii_ascii_ascii_ascii | bc ))\"\n  local music_length_ascii_ascii_ascii_ascii_ascii_ascii=\"$(( $music"], ["# <func> # Shell\n#!/bin/bash\n# Find how many times a given substring can be found in the original string. Count overlaping cases.\n# >>> $(how_many_times \"\" \"a\")\n# \"0\"\n# >>> $(how_many_times \"aaa\" \"a\")\n# \"3\"\n# >>> $(how_many_times \"aaaa\" \"aa\")\n# \"3\"\n#\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    local str1 str2\n    local count\n    local str1_len str2_len\n    local str1_start str2_start\n    local str1_end str2_end\n    local str1_len_start str2_len_start\n    local str1_len_end str2_len_end\n    local str1_len_start_end str2_len_start_end\n    local str1_len_start_end_start str2_len_start_end_start\n    local str1_len_start_end_end str2_len_start_end_end\n    local str1_len_start_end_end_start str2_len_start_end_end_start\n    local str1_len_start_end_end_start_end str2_len_start_end_end_start_end\n    local str1_len_start_end_end_start_end_end str2_len_start_end_end_start_end_end\n    local str1_len_start_end_end_start_end_end_end str2_len_start_end_end_start_end_end_end\n    local str1_len_start_end_end_start_end_end_end_end str2_len_start_end_end_start_end_end_end_end\n    local str1_len_start_end_end_start_end_end_end_end_end str2_len_start_end_end_start_end_end_end_end_end\n    local str1_len_start_end_end_start_end_end_end_end_end_end str2_len_"], ["# <func> # Shell\n#!/bin/bash\n# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n# Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to largest\n# >>> $(sort_numbers \"three one five\")\n# \"one three five\"\n#\n# $1 is a string\nsort_numbers() {\n  local nums\n  nums=()\n  while IFS= read -r num; do\n    nums+=(\"$num\")\n  done\n  sort -n -k 1,1 -k 2,2 -k 3,3 -k 4,4 -k 5,5 -k 6,6 -k 7,7 -k 8,8 -k 9,9\n  return \"$nums\""], ["# <func> # Shell\n#!/bin/bash\n# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\n# >>> $(find_closest_elements \"1.0 2.0 3.0 4.0 5.0 2.2\")\n# ['\"2.0\"', '\"2.2\"']\n# >>> $(find_closest_elements \"1.0 2.0 3.0 4.0 5.0 2.0\")\n# ['\"2.0\"', '\"2.0\"']\n#\n# $1 is a space-separated list\nfind_closest_elements() {\n  local list=\"$1\"\n  local i\n  local j\n  local n\n  local k\n  local l\n  local m\n  local n_l\n  local n_r\n  local n_l_r\n  local n_r_l\n  local n_r_l_r\n  local n_r_l_r_l\n  local n_r_l_r_l_l\n  local n_r_l_r_l_l_l\n  local n_r_l_r_l_l_l_l\n  local n_r_l_r_l_l_l_l_l\n  local n_r_l_r_l_l_l_l_l_l\n  local n_r_l_r_l_l_l_l_l_l_l\n  local n_r_l_r_l_l_l_l_l_l_l_l\n  local n_r_l_r_l_l_l_l_l_l_l_l_l\n  local n_r_l_r_l_l_l_l_l_l_l_l_l_l\n  local n_r_l_r_l_l_l_l_l_l_l_l_l_l_l\n  local n_r_l_r_l_l_l_l_l_l_l"], ["# <func> # Shell\n#!/bin/bash\n# Given list of numbers (of at least two elements), apply a linear transform to that list,\n# such that the smallest number will become 0 and the largest will become 1\n# >>> $(rescale_to_unit \"1.0 2.0 3.0 4.0 5.0\")\n# ['\"0.0\"', '\"0.25\"', '\"0.5\"', '\"0.75\"', '\"1.0\"']\n#\n# $1 is a space-separated list\nrescale_to_unit() {\n  local list=\"$1\"\n  local unit=\"$2\"\n  local scale=\"$3\"\n  local unit_scale=\"$4\"\n  local unit_scale_factor=\"$5\"\n  local unit_scale_factor_to_scale=\"$6\"\n  local unit_scale_factor_to_scale_to_scale=\"$7\"\n  local unit_scale_factor_to_scale_to_scale_to_scale_to_scale=\"$8\"\n  local unit_scale_factor_to_scale_to_scale_to_scale_to_scale_to_scale_to_scale=\"$9\"\n  local unit_scale_factor_to_scale_to_scale_to_scale_to_scale_to_scale_to_scale_to_scale_to_scale=\"$10\"\n  local unit_scale_factor_to_scale_to_scale_to_scale_to_scale_to_scale_to_scale_to_scale_to_scale_to_scale=\"$11\"\n  local unit_scale_factor_to_scale_to_scale_to_scale_to_scale_to_scale_to_scale_to_scale_to_scale_to_scale=\"$12\"\n  local unit_scale_factor_to_scale_to_scale_to_scale_to_scale_to_scale_to_scale_to_scale_to_scale_to_scale=\"$13\"\n  local unit_scale_factor_to_scale_to_scale_to_scale_to_scale_to_scale_to_scale_to_scale_to_scale_to_scale"], ["# <func> # Shell\n#!/bin/bash\n# Filter given list of any shthon values only for integers\n# >>> $(filter_integers \"a 3.14 5\")\n# ['\"5\"']\n# >>> $(filter_integers \"1 2 3 abc  \")\n# ['\"1\"', '\"2\"', '\"3\"']\n#\n# $1 is a space-separated list\nfilter_integers() {\n  local list=\"$1\"\n  local result=\"\"\n  for value in $list; do\n    [[ $value =~ ^[0-9]+$ ]] && result=\"$result $value\"\n  done\n  return $result"], ["# <func> # Shell\n#!/bin/bash\n# Return length of given string\n# >>> $(strlen \"\")\n# \"0\"\n# >>> $(strlen \"abc\")\n# \"3\"\n#\n# $1 is a string\nstrlen() {\n  local str\n  local len\n  local i\n  local c\n  local c_len\n  local c_str\n  local c_len_str\n  local c_str_len\n  local c_str_len_str\n  local c_str_len_str_len\n  local c_str_len_str_len_str\n  local c_str_len_str_len_str_len\n  local c_str_len_str_len_str_len_str\n  local c_str_len_str_len_str_len_str_len\n  local c_str_len_str_len_str_len_str_len_str\n  local c_str_len_str_len_str_len_str_len_str_len\n  local c_str_len_str_len_str_len_str_len_str_len_str\n  local c_str_len_str_len_str_len_str_len_str_len_str_len_str\n  local c_str_len_str_len_str_len_str_len_str_len_str_len_str_len\n  local c_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len\n  local c_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len\n  local c_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len\n  local c_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str_len\n  local c_str_len_str_len_str_len_str_len_str_"], ["# <func> # Shell\n#!/bin/bash\n# For a given number n, find the largest number that divides n evenly, smaller than n\n# >>> $(largest_divisor \"15\")\n# \"5\"\n#\n# $1 is an integer\nlargest_divisor() {\n  local n\n  n=$1\n  local divisor\n  divisor=$((n/2))\n  while [ $n -lt $divisor ]\n  do\n    n=$((n/2))\n    divisor=$((n/2))\n  done\n  return $n"], ["# <func> # Shell\n#!/bin/bash\n# Return list of prime factors of given integer in the order from smallest to largest.\n# Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n# Input number should be equal to the product of all factors\n# >>> $(factorize \"8\")\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\nfactorize() {\n  local num\n  num=$1\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/}\n  num=${num//,/"], ["# <func> # Shell\n#!/bin/bash\n# From a list of integers, remove all elements that occur more than once.\n# Keep order of elements left the same as in the input.\n# >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n# $1 is a space-separated list\nremove_duplicates() {\n  local list=\"$1\"\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n "], ["# <func> # Shell\n#!/bin/bash\n# For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n# >>> $(flip_case \"Hello\")\n# \"hELLO\"\n#\n# $1 is a string\nflip_case() {\n  case $1 in\n    'a'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'A'|'"], ["# <func> # Shell\n#!/bin/bash\n# Concatenate list of strings into a single string\n# >>> $(concatenate \"\")\n# \"\"\n# >>> $(concatenate \"a b c\")\n# \"abc\"\n#\n# $1 is a space-separated list\nconcatenate() {\n  local -i i\n  for i in \"$@\"; do\n    echo \"$i\"\n  done"], ["# <func> # Shell\n#!/bin/bash\n# Return only positive numbers in the list.\n# >>> $(get_positive \"-1 2 -4 5 6\")\n# ['\"2\"', '\"5\"', '\"6\"']\n# >>> $(get_positive \"5 3 -5 2 -3 3 9 0 123 1 -10\")\n# ['\"5\"', '\"3\"', '\"2\"', '\"3\"', '\"9\"', '\"123\"', '\"1\"']\n#\n# $1 is a space-separated list\nget_positive() {\n    local list=\"$1\"\n    local result=\"\"\n    for item in $list; do\n        if [[ $item =~ ^[0-9]+$ ]]; then\n            result=\"$result $item\"\n        else\n            result=\"$result $item\"\n        fi\n    done\n    return $result"], ["# <func> # Shell\n#!/bin/bash\n# Return true if a given number is prime, and false otherwise.\n# >>> $(is_prime \"6\")\n# \"false\"\n# >>> $(is_prime \"101\")\n# \"true\"\n# >>> $(is_prime \"11\")\n# \"true\"\n# >>> $(is_prime \"13441\")\n# \"true\"\n# >>> $(is_prime \"61\")\n# \"true\"\n# >>> $(is_prime \"4\")\n# \"false\"\n# >>> $(is_prime \"1\")\n# \"false\"\n#\n# $1 is an integer\nis_prime() {\n  local num\n  num=$1\n  if [ $num -eq 1 ]\n  then\n    return 1\n  else\n    if [ $num -eq 2 ]\n    then\n      return 1\n    else\n      if [ $num -eq 3 ]\n      then\n        return 1\n      else\n        if [ $num -eq 5 ]\n        then\n          return 1\n        else\n          if [ $num -eq 7 ]\n          then\n            return 1\n          else\n            if [ $num -eq 11 ]\n            then\n              return 1\n            else\n              if [ $num -eq 13 ]\n              then\n                return 1\n              else\n                if [ $num -eq 17 ]\n                then\n                  return 1\n                else\n                  if [ $num -eq 19 ]\n                  then\n                    return 1\n                  else\n                    if [ $num -eq 23 ]\n                    then\n                      return 1\n                    else\n                      if [ $num -eq 29 ]\n                      then\n                        return 1\n                      else\n                        if [ $num -eq 31 ]\n                        then\n                          return 1\n                        else\n                          if [ $num -eq 37 ]\n                          then\n                            return 1\n                          else\n                            if [ $num -eq 41 ]\n                            then\n                              return 1\n                            else\n                              if"], ["# <func> # Shell\n#!/bin/bash\n# This function takes a list l and returns a list l' such that\n# l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n# to the values of the corresponding indicies of l, but sorted.\n# >>> $(sort_third \"1 2 3\")\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> $(sort_third \"5 6 3 4 8 9 2\")\n# ['\"2\"', '\"6\"', '\"3\"', '\"4\"', '\"8\"', '\"9\"', '\"5\"']\n#\n# $1 is a space-separated list\nsort_third() {\n  local l=\"$1\"\n  local l'=\"$2\"\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local"], ["# <func> # Shell\n#!/bin/bash\n# Return sorted unique elements in a list\n# >>> $(unique \"5 3 5 2 3 3 9 0 123\")\n# ['\"0\"', '\"2\"', '\"3\"', '\"5\"', '\"9\"', '\"123\"']\n#\n# $1 is a space-separated list\nunique() {\n  local -r list=\"$1\"\n  local -r sorted=\"$list\"\n  local -r unique_list=\"$list\"\n  local -r unique_list_sorted=\"$list\"\n  local -r unique_list_sorted_reverse=\"$list\"\n  local -r unique_list_sorted_reverse_reverse=\"$list\"\n  local -r unique_list_sorted_reverse_reverse_reverse_reverse=\"$list\"\n  local -r unique_list_sorted_reverse_reverse_reverse_reverse_reverse_reverse=\"$list\"\n  local -r unique_list_sorted_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse=\"$list\"\n  local -r unique_list_sorted_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse=\"$list\"\n  local -r unique_list_sorted_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse=\"$list\"\n  local -r unique_list_sorted_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse"], ["# <func> # Shell\n#!/bin/bash\n# Return maximum element in the list.\n# >>> $(max_element \"1 2 3\")\n# \"3\"\n# >>> $(max_element \"5 3 -5 2 -3 3 9 0 123 1 -10\")\n# \"123\"\n#\n# $1 is a space-separated list\nmax_element() {\n  local -a list\n  list=( \"$1\" )\n  local -a max_list\n  local -a i\n  for i in \"${list[@]}\"; do\n    if [[ \"${i}\" == \"${list[0]}\" ]]; then\n      max_list=( \"${list[@]}\" )\n    else\n      max_list=( \"${list[@]}\" \"${list[1]}\" )\n    fi\n  done\n  return ${#max_list[@]}"], ["# <func> # Shell\n#!/bin/bash\n# Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n# >>> $(fizz_buzz \"50\")\n# \"0\"\n# >>> $(fizz_buzz \"78\")\n# \"2\"\n# >>> $(fizz_buzz \"79\")\n# \"3\"\n#\n# $1 is an integer\nfizz_buzz() {\n  local num\n  num=$1\n  local count\n  count=$((num/11))\n  local digit\n  digit=$((num%11))\n  if ((count == 0))\n    then\n      echo \"0\"\n    else\n      echo \"1\"\n    fi\n  else\n    echo \"2\"\n  fi"], ["# <func> # Shell\n#!/bin/bash\n# This function takes a list l and returns a list l' such that\n# l' is identical to l in the odd indicies, while its values at the even indicies are equal\n# to the values of the even indicies of l, but sorted.\n# >>> $(sort_even \"1 2 3\")\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> $(sort_even \"5 6 3 4\")\n# ['\"3\"', '\"6\"', '\"5\"', '\"4\"']\n#\n# $1 is a space-separated list\nsort_even() {\n  local l=\"$1\"\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l'='\n  local l"], ["# <func> # Shell\n#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n# \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib() {\n  local n\n  local fib\n  local prime\n  local fib_prime\n  local fib_prime_fib\n  local fib_prime_prime\n  local fib_prime_prime_fib\n  local fib_prime_prime_prime\n  local fib_prime_prime_prime_fib\n  local fib_prime_prime_prime_prime\n  local fib_prime_prime_prime_prime_fib\n  local fib_prime_prime_prime_prime_prime\n  local fib_prime_prime_prime_prime_prime_fib\n  local fib_prime_prime_prime_prime_prime_prime\n  local fib_prime_prime_prime_prime_prime_prime_fib\n  local fib_prime_prime_prime_prime_prime_prime_prime\n  local fib_prime_prime_prime_prime_prime_prime_prime_fib\n  local fib_prime_prime_prime_prime_prime_prime_prime_prime_fib\n  local fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_fib\n  local fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_fib\n  local fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_fib\n  local fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_fib\n  local fib_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime"], ["# <func> # Shell\n#!/bin/bash\n# triples_sum_to_zero takes a list of integers as an input.\n# it returns true if there are three distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> $(triples_sum_to_zero \"1 3 5 0\")\n# \"false\"\n# >>> $(triples_sum_to_zero \"1 3 -2 1\")\n# \"true\"\n# >>> $(triples_sum_to_zero \"1 2 3 7\")\n# \"false\"\n# >>> $(triples_sum_to_zero \"2 4 -5 3 9 7\")\n# \"true\"\n# >>> $(triples_sum_to_zero \"1\")\n# \"false\"\n#\n# $1 is a space-separated list\ntriples_sum_to_zero() {\n  local list=\"$1\"\n  local sum\n  local i\n  local j\n  local k\n  local n\n  local sum_list\n  local sum_list_len\n  local sum_list_sum\n  local sum_list_sum_to_zero\n  local sum_list_sum_to_zero_to_zero\n  local sum_list_sum_to_zero_to_zero_to_sum\n  local sum_list_sum_to_zero_to_sum_to_zero\n  local sum_list_sum_to_zero_to_sum_to_sum\n  local sum_list_sum_to_zero_to_sum_to_sum_to_zero\n  local sum_list_sum_to_zero_to_sum_to_sum_to_zero_to_zero\n  local sum_list_sum_to_zero_to_sum_to_sum_to_zero_to_zero\n  local sum_list_sum_to_zero_to_sum_to_sum_to_zero_to_zero_to_zero\n  local sum_list_sum_to_zero_to_sum_to_sum_to_zero_to_zero_to_zero\n  local sum_list_sum_to_zero_to_sum_to_sum_"], ["# <func> # Shell\n#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long line.\n# n cars are driving left to right;  simultaneously, a different set of n cars\n# are driving right to left.   The two sets of cars start out being very far from\n# each other.  All cars move in the same speed.  Two cars are said to collide\n# when a car that's moving left to right hits a car that's moving right to left.\n# However, the cars are infinitely sturdy and strong; as a result, they continue moving\n# in their trajectory as if they did not collide.\n# This function outputs the number of such collisions.\n#\n# $1 is an integer\ncar_race_collision() {\n    # The number of collisions\n    #\n    # $2 is an integer\n    #\n    # $3 is an integer\n    #\n    # $4 is an integer\n    #\n    # $5 is an integer\n    #\n    # $6 is an integer\n    #\n    # $7 is an integer\n    #\n    # $8 is an integer\n    #\n    # $9 is an integer\n    #\n    # $10 is an integer\n    #\n    # $11 is an integer\n    #\n    # $12 is an integer\n    #\n    # $13 is an integer\n    #\n    # $14 is an integer\n    #\n    # $15 is an integer\n    #\n    # $16 is an integer\n    #\n    # $17 is an integer\n    #\n    # $18 is an integer\n    #\n    # $19 is an integer\n    #\n    # $20 is an integer\n    #\n    # $21 is an integer\n    #\n    # $22 is an integer\n    #\n    # $23 is an integer\n    #\n    # $24 is an integer\n    #\n    # $25 is an integer\n    #\n    # $26 is an integer\n    #\n    # $27 is an integer\n    #\n    # $28 is an integer\n    #\n    # $29"], ["# <func> # Shell\n#!/bin/bash\n# Return list with elements incremented by 1.\n# >>> $(incr_list \"1 2 3\")\n# ['\"2\"', '\"3\"', '\"4\"']\n# >>> $(incr_list \"5 3 5 2 3 3 9 0 123\")\n# ['\"6\"', '\"4\"', '\"6\"', '\"3\"', '\"4\"', '\"4\"', '\"10\"', '\"1\"', '\"124\"']\n#\n# $1 is a space-separated list\nincr_list() {\n  local list=\"$1\"\n  local new_list=\"$2\"\n  local old_list=\"$1\"\n  local new_list_len=\"$2\"\n  local new_list_count=\"$2\"\n  local new_list_i=\"$2\"\n  local new_list_j=\"$2\"\n  local new_list_k=\"$2\"\n  local new_list_l=\"$2\"\n  local new_list_m=\"$2\"\n  local new_list_n=\"$2\"\n  local new_list_o=\"$2\"\n  local new_list_p=\"$2\"\n  local new_list_q=\"$2\"\n  local new_list_r=\"$2\"\n  local new_list_s=\"$2\"\n  local new_list_t=\"$2\"\n  local new_list_u=\"$2\"\n  local new_list_v=\"$2\"\n  local new_list_w=\"$2\"\n  local new_list_x=\"$2\"\n  local new_list_y=\"$2\"\n  local new_list_z=\"$2\"\n  local new_list_a=\"$2\"\n  local new_list_b=\"$2\"\n  local new_list_c=\"$2\"\n  local new_list_d=\"$2\"\n  local new_list_e=\"$2\"\n  local new_list_f=\"$2\"\n  local new_list_g=\"$2\"\n  local new_list_h=\"$2\"\n  local new_list_i=\"$2\"\n  local new_list_j=\"$2\"\n  local new_list_k=\"$2"], ["# <func> # Shell\n#!/bin/bash\n# pairs_sum_to_zero takes a list of integers as an input.\n# it returns true if there are two distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> $(pairs_sum_to_zero \"1 3 5 0\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"1 3 -2 1\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"1 2 3 7\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"2 4 -5 3 5 7\")\n# \"true\"\n# >>> $(pairs_sum_to_zero \"1\")\n# \"false\"\n#\n# $1 is a space-separated list\npairs_sum_to_zero() {\n  local list=\"$1\"\n  local sum\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f"], ["# <func> # Shell\n#!/bin/bash\n# Change numerical base of input number x to base.\n# return string representation after the conversion.\n# base numbers are less than 10.\n# >>> $(change_base \"8\" \"3\")\n# \"22\"\n# >>> $(change_base \"8\" \"2\")\n# \"1000\"\n# >>> $(change_base \"7\" \"2\")\n# \"111\"\n#\n# $1 is an integer\n# $2 is an integer\nchange_base() {\n  local base\n  local num\n  local str\n  local i\n  local base_num\n  local base_str\n  local num_str\n  local num_str_len\n  local num_str_base\n  local num_str_len_base\n  local num_str_base_len\n  local num_str_base_len_base\n  local num_str_base_len_base_len\n  local num_str_base_len_base_len_base\n  local num_str_base_len_base_len_base_len\n  local num_str_base_len_base_len_base_len_base\n  local num_str_base_len_base_len_base_len_base_len_base\n  local num_str_base_len_base_len_base_len_base_len_base_len\n  local num_str_base_len_base_len_base_len_base_len_base_len_base_len\n  local num_str_base_len_base_len_base_len_base_len_base_len_base_len_base\n  local num_str_base_len_base_len_base_len_base_len_base_len_base_len_base_len\n  local num_str_base_len_base_len_base_len_base_len_base_len_base_len_base_len_base\n  local num_str_base_len_base_len_base_len_base_len_base_len_base_len_base_len_base_len\n  local num_str_base_len_base_len"], ["# <func> # Shell\n#!/bin/bash\n# Given length of a side and high return area for a triangle.\n# >>> $(triangle_area \"5\" \"3\")\n# \"7.5\"\n#\n# $1 is an integer\n# $2 is an integer\ntriangle_area() {\n  local a=$1\n  local b=$2\n  local c=$3\n  local d=$4\n  local e=$5\n  local f=$6\n  local g=$7\n  local h=$8\n  local i=$9\n  local j=$10\n  local k=$11\n  local l=$12\n  local m=$13\n  local n=$14\n  local o=$15\n  local p=$16\n  local q=$17\n  local r=$18\n  local s=$19\n  local t=$20\n  local u=$21\n  local v=$22\n  local w=$23\n  local x=$24\n  local y=$25\n  local z=$26\n  local a1=$27\n  local b1=$28\n  local c1=$29\n  local d1=$30\n  local e1=$31\n  local f1=$32\n  local g1=$33\n  local h1=$34\n  local i1=$35\n  local j1=$36\n  local k1=$37\n  local l1=$38\n  local m1=$39\n  local n1=$40\n  local o1=$41\n  local p1=$42\n  local q1=$43\n  local r1=$44\n  local s1=$45\n  local t1=$46\n  local u1=$47\n  local v1=$48\n  local w1=$49\n  local x1=$50\n  local y1=$51\n  local z1=$52\n  local a2=$53\n  local b2=$54\n  local c2=$55\n  local d2=$56\n  local e2=$57\n  local f2=$58\n  local g2=$59\n  local h"], ["# <func> # Shell\n#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>> $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\nfib4() {\n  local n\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local"], ["# <func> # Shell\n#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n#\n# $1 is a space-separated list\nmedian() {\n  local list=\"$1\"\n  local median\n  median=\"${list%% *}\";\n  median=\"${list#*}\"\n  median=\"${list##*}\"\n  median=\"${list%*}\"\n  return $median"], ["# <func> # Shell\n#!/bin/bash\n# Checks if given string is a palindrome\n# >>> $(is_palindrome \"\")\n# \"true\"\n# >>> $(is_palindrome \"aba\")\n# \"true\"\n# >>> $(is_palindrome \"aaaaa\")\n# \"true\"\n# >>> $(is_palindrome \"zbcd\")\n# \"false\"\n#\n# $1 is a string\nis_palindrome() {\n  local str\n  local result\n  local strlen\n  local str2len\n  local str2strlen\n  local str2str\n  local str2str2\n  local str2str22\n  local str2str222\n  local str2str2222\n  local str2str22222\n  local str2str222222\n  local str2str2222222\n  local str2str22222222\n  local str2str222222222\n  local str2str2222222222\n  local str2str22222222222\n  local str2str222222222222\n  local str2str2222222222222\n  local str2str22222222222222\n  local str2str222222222222222\n  local str2str2222222222222222\n  local str2str22222222222222222\n  local str2str222222222222222222\n  local str2str2222222222222222222\n  local str2str22222222222222222222\n  local str2str222222222222222222222\n  local str2str22222"], ["# <func> # Shell\n#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n  local i\n  local p\n  local n\n  local m\n  local r\n  local r1\n  local r2\n  local r3\n  local r4\n  local r5\n  local r6\n  local r7\n  local r8\n  local r9\n  local r10\n  local r11\n  local r12\n  local r13\n  local r14\n  local r15\n  local r16\n  local r17\n  local r18\n  local r19\n  local r20\n  local r21\n  local r22\n  local r23\n  local r24\n  local r25\n  local r26\n  local r27\n  local r28\n  local r29\n  local r30\n  local r31\n  local r32\n  local r33\n  local r34\n  local r35\n  local r36\n  local r37\n  local r38\n  local r39\n  local r40\n  local r41\n  local r42\n  local r43\n  local r44\n  local r45\n  local r46\n  local r47\n  local r48\n  local r49\n  local r50\n  local r51\n  local r52\n  local r53\n  local r54\n  local r55\n  local r56\n  local r57\n  local r58\n  local r"], ["# <func> # Shell\n#!/bin/bash\n# remove_vowels is a function that takes string and returns string without vowels.\n# >>> $(remove_vowels \"\")\n# \"\"\n# >>> $(remove_vowels \"abcdef\")\n# \"bcdf\"\n# >>> $(remove_vowels \"aaaaa\")\n# \"\"\n# >>> $(remove_vowels \"aaBAA\")\n# \"B\"\n# >>> $(remove_vowels \"zbcd\")\n# \"zbcd\"\n#\n# $1 is a string\nremove_vowels() {\n  local string\n  string=\"$(echo $1 | tr '[:upper:]' '[:lower:]')\"\n  local result\n  result=$(echo $string | tr '[:upper:]' '[:lower:]')\n  echo $result"], ["# <func> # Shell\n#!/bin/bash\n# Return true if all numbers in the list l are below threshold t.\n# >>> $(below_threshold \"1 2 4 10\" \"100\")\n# \"true\"\n# >>> $(below_threshold \"1 20 4 10\" \"5\")\n# \"false\"\n#\n# $1 is a space-separated list\n# $2 is an integer\nbelow_threshold() {\n    local l=$1\n    local t=$2\n    local n\n    local i\n    local j\n    local k\n    local m\n    local n_max\n    local n_min\n    local n_max_min\n    local n_max_max\n    local n_min_max\n    local n_min_min\n    local n_min_min_max\n    local n_min_max_min\n    local n_min_max_max\n    local n_min_max_max_min\n    local n_min_max_max_min_max\n    local n_min_max_max_min_max_max\n    local n_min_max_max_min_max_max_max\n    local n_min_max_max_min_max_max_max_max\n    local n_min_max_max_min_max_max_max_max_max\n    local n_min_max_max_min_max_max_max_max_max_max\n    local n_min_max_max_min_max_max_max_max_max_max_max\n    local n_min_max_max_min_max_max_max_max_max_max_max_max\n    local n_min_max_max_min_max_max_max_max_max_max_max_max_max\n    local n_min_max_max_min_max_max_max_max_max_max_max_max_max_max\n    local n_min_max_max_min_max_max_max_max_max_max_max_max_max_max_max\n    local n_min_max_max_min_max_max_max"], ["# <func> # Shell\n#!/bin/bash\n# Add two numbers x and y\n# >>> $(add \"2\" \"3\")\n# \"5\"\n# >>> $(add \"5\" \"7\")\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\nadd() {\n  local a b\n  a=$1\n  b=$2\n  echo \"add $a $b\"\n  if [ $a -eq $b ]; then\n    echo \"both are equal\"\n  else\n    echo \"a is greater than b\"\n  fi"], ["# <func> # Shell\n#!/bin/bash\n# Check if two words have the same characters.\n# >>> $(same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n# \"true\"\n# >>> $(same_chars \"abcd\" \"dddddddabc\")\n# \"true\"\n# >>> $(same_chars \"dddddddabc\" \"abcd\")\n# \"true\"\n# >>> $(same_chars \"eabcd\" \"dddddddabc\")\n# \"false\"\n# >>> $(same_chars \"abcd\" \"dddddddabce\")\n# \"false\"\n# >>> $(same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n# \"false\"\n#\n# $1 is a string\n# $2 is a string\nsame_chars() {\n  local str1 str2\n  local result\n  local i\n  local j\n  local len1 len2\n  local char1 char2\n  local char1_len char2_len\n  local char1_i char2_i\n  local char2_i char1_i\n  local char2_len\n  local char1_len\n  local char2_len\n  local char1_i\n  local char2_i\n  local char1_len\n  local char2_len\n  local char1_i\n  local char2_i\n  local char1_len\n  local char2_len\n  local char1_i\n  local char2_i\n  local char1_len\n  local char2_len\n  local char1_i\n  local char2_i\n  local char1_len\n  local char2_len\n  local char1_i\n  local char2_i\n  local char1_len\n  local char2_len\n  local char1_i\n  local char2_i\n  local char1_len\n  local char2_len\n  local char1_i\n  local char2_i\n  local char1_len\n  local char2_len\n  local char1_i\n  local char2_i\n  local char1_len\n"], ["# <func> # Shell\n#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an integer\nfib() {\n  local n\n  local i\n  local j\n  local k\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local z1\n  local z2\n  local z3\n  local z4\n  local z5\n  local z6\n  local z7\n  local z8\n  local z9\n  local z10\n  local z11\n  local z12\n  local z13\n  local z14\n  local z15\n  local z16\n  local z17\n  local z18\n  local z19\n  local z20\n  local z21\n  local z22\n  local z23\n  local z24\n  local z25\n  local z26\n  local z27\n  local z28\n  local z29\n  local z30\n  local z31\n  local z32\n  local z33\n  local z34\n  local z35\n  local z36\n  local z37\n  local z38\n  local z39\n  local z40\n  local z41\n  local z42\n  local z43\n  local z44\n  local z45\n  local z46\n  local z47\n  local z48\n  local z49\n  local z50\n  local z51\n  local z52\n  local z"], ["# <func> # Shell\n#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n#\n# $1 is a string\ncorrect_bracketing() {\n    local bracketing=$1\n    local brackets=$2\n    local brackets_len=$((bracketing.length))\n    local brackets_count=$((bracketing.length-brackets.length))\n    local brackets_opening=$((bracketing[0].length))\n    local brackets_closing=$((bracketing[bracketing.length-1].length))\n    local brackets_closing_len=$((bracketing_closing.length))\n    local brackets_closing_count=$((bracketing_closing.length-brackets_closing.length))\n    local brackets_closing_opening=$((bracketing_closing[bracketing_closing.length-1].length))\n    local brackets_closing_opening_len=$((bracketing_closing_opening.length))\n    local brackets_closing_opening_count=$((bracketing_closing_opening.length-brackets_closing_opening.length))\n    local brackets_closing_opening_closing=$((bracketing_closing_opening[bracketing_closing_opening.length-1].length))\n    local brackets_closing_opening_closing_len=$((bracketing_closing_opening_closing.length))\n    local brackets_closing_opening_closing_count=$((bracketing_closing_opening_closing.length))\n    local brackets_closing_opening_closing_closing_len=$((bracketing_closing_opening_closing_closing.length))\n    local brackets_closing_open"], ["# <func> # Shell\n#!/bin/bash\n# Return true is list elements are monotonically increasing or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n#\n# $1 is a space-separated list\nmonotonic() {\n  local list=\"$1\"\n  local i=0\n  local j=0\n  local k=0\n  local l=0\n  local m=0\n  local n=0\n  local o=0\n  local p=0\n  local q=0\n  local r=0\n  local s=0\n  local t=0\n  local u=0\n  local v=0\n  local w=0\n  local x=0\n  local y=0\n  local z=0\n  local z1=0\n  local z2=0\n  local z3=0\n  local z4=0\n  local z5=0\n  local z6=0\n  local z7=0\n  local z8=0\n  local z9=0\n  local z10=0\n  local z11=0\n  local z12=0\n  local z13=0\n  local z14=0\n  local z15=0\n  local z16=0\n  local z17=0\n  local z18=0\n  local z19=0\n  local z20=0\n  local z21=0\n  local z22=0\n  local z23=0\n  local z24=0\n  local z25=0\n  local z26=0\n  local z27=0\n  local z28=0\n  local z29=0\n  local z30=0\n  local z31=0\n  local z32=0\n  local z33=0\n  local z34=0\n  local z35=0\n  local z36=0\n "], ["# <func> # Shell\n#!/bin/bash\n# Return sorted unique common elements for two lists.\n# >>> $(common \"1 4 3 34 653 2 5\" \"5 7 1 5 9 653 121\")\n# ['\"1\"', '\"5\"', '\"653\"']\n# >>> $(common \"5 3 2 8\" \"3 2\")\n# ['\"2\"', '\"3\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncommon() {\n  local a b c d e f g h i j k l m n o p q r s t u v w x y z\n  local a b c d e f g h i j k l m n o p q r s t u v w x y z\n  local a b c d e f g h i j k l m n o p q r s t u v w x y z\n  local a b c d e f g h i j k l m n o p q r s t u v w x y z\n  local a b c d e f g h i j k l m n o p q r s t u v w x y z\n  local a b c d e f g h i j k l m n o p q r s t u v w x y z\n  local a b c d e f g h i j k l m n o p q r s t u v w x y z\n  local a b c d e f g h i j k l m n o p q r s t u v w x y z\n  local a b c d e f g h i j k l m n o p q r s t u v w x y z\n  local a b c d e f g h i j k l m n o p q r s t u v w x y z\n  local a b c d e f g h i j k l m n o p q r s t u v w x y z\n  local a b c d e f g h i j k l m n o p q r s t u v w x y z\n  local a b c d e f g h i j k l m n o p q r s"], ["# <func> # Shell\n#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local n\n  local i\n  local p\n  local max\n  local max_prime\n  local max_prime_factor\n  local max_prime_factor_factor\n  local max_prime_factor_factor_factor\n  local max_prime_factor_factor_factor_factor\n  local max_prime_factor_factor_factor_factor_factor\n  local max_prime_factor_factor_factor_factor_factor_factor\n  local max_prime_factor_factor_factor_factor_factor_factor_factor\n  local max_prime_factor_factor_factor_factor_factor_factor_factor_factor\n  local max_prime_factor_factor_factor_factor_factor_factor_factor_factor_factor\n  local max_prime_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor\n  local max_prime_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor\n  local max_prime_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor\n  local max_prime_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor\n  local max_prime_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor\n  local max_prime_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_factor_"], ["# <func> # Shell\n#!/bin/bash\n# sum_to_n is a function that sums numbers from 1 to n.\n# >>> $(sum_to_n \"30\")\n# \"465\"\n# >>> $(sum_to_n \"100\")\n# \"5050\"\n# >>> $(sum_to_n \"5\")\n# \"15\"\n# >>> $(sum_to_n \"10\")\n# \"55\"\n# >>> $(sum_to_n \"1\")\n# \"1\"\n#\n# $1 is an integer\nsum_to_n() {\n  local n\n  n=$1\n  local sum\n  sum=0\n  while [ $n -lt 10 ]; do\n    sum=$((sum + 1))\n    n=$((n + 1))\n  done\n  return $sum"], ["# <func> # Shell\n#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n#\n# $1 is a string\ncorrect_bracketing() {\n  local bracketing\n  bracketing=$(echo $1 | sed 'sfunc> # Shell\n#!/bin/bash\n# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2] * x^2 + ....\n# Return derivative of this polynomial in the same form.\n# >>> $(derivative \"3 1 2 4 5\")\n# ['\"1\"', '\"4\"', '\"12\"', '\"20\"']\n# >>> $(derivative \"1 2 3\")\n# ['\"2\"', '\"6\"']\n#\n# $1 is a space-separated list\nderivative() {\n  local xs\n  local x\n  local y\n  local f\n  local f_out\n  local f_in\n  local f_out_in\n  local f_out_out\n  local f_in_in\n  local f_in_out\n  local f_out_out_out\n  local f_in_out_in\n  local f_out_out_in\n  local f_in_out_in\n  local f_out_in\n  local f_in_out_in\n  local f_out_in_out\n  local f_in_out_in_out\n  local f_out_in_out_in\n  local f_in_out_in_out\n  local f_out_in_out_in_out\n  local f_in_out_in_out_in\n  local f_out_in_out_in_out_in\n  local f_in_out_in_out_in\n  local f_out_in_out_in_out_in\n  local f_in_out_in_out_in_out\n  local f_out_in_out_in_out_in_out\n  local f_in_out_in_out_in_out_in_out\n  local f_out_in_out_in_out_in_out_in_out\n  local f_in_out_in_out_in_out_in_out_in_out\n  local f_out_in_out_in_out_in_out_in_out_in_out\n  local f_in"], ["# <func> # Shell\n#!/bin/bash\n# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n# >>> $(fibfib \"1\")\n# \"0\"\n# >>> $(fibfib \"5\")\n# \"4\"\n# >>> $(fibfib \"8\")\n# \"24\"\n#\n# $1 is an integer\nfibfib() {\n    local n\n    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local p\n    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local p\n    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local p\n    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n   "], ["# <func> # Shell\n#!/bin/bash\n# Write a function vowels_count which takes a string representing\n# a word as input and returns the number of vowels in the string.\n# Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is at the end of the given word.\n# Example:\n# >>> $(vowels_count \"abcde\")\n# \"2\"\n# >>> $(vowels_count \"ACEDY\")\n# \"3\"\n#\n# $1 is a string\nvowels_count() {\n  local word=\"$1\"\n  local vowels=\"$2\"\n  local count=\"$3\"\n  local i=\"$4\"\n  local j=\"$5\"\n  local k=\"$6\"\n  local l=\"$7\"\n  local m=\"$8\"\n  local n=\"$9\"\n  local o=\"$10\"\n  local p=\"$11\"\n  local q=\"$12\"\n  local r=\"$13\"\n  local s=\"$14\"\n  local t=\"$15\"\n  local u=\"$16\"\n  local v=\"$17\"\n  local w=\"$18\"\n  local x=\"$19\"\n  local y=\"$20\"\n  local z=\"$21\"\n  local a=\"$22\"\n  local b=\"$23\"\n  local c=\"$24\"\n  local d=\"$25\"\n  local e=\"$26\"\n  local f=\"$27\"\n  local g=\"$28\"\n  local h=\"$29\"\n  local i=\"$30\"\n  local j=\"$31\"\n  local k=\"$32\"\n  local l=\"$33\"\n  local m=\"$34\"\n  local n=\"$35\"\n  local o=\"$36\"\n  local p=\"$37\"\n  local q=\"$38\"\n  local r=\"$39\"\n  local s=\"$40\"\n  local t=\"$41\"\n  local u=\"$42\"\n  local v=\"$43\"\n  local w=\"$44\"\n  local x=\"$45\"\n  local y"], ["# <func> # Shell\n#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits right by shift\n# and return the result as a string.\n# If shift > number of digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\ncircular_shift() {\n  shift_digits=$1\n  shift_digits=$2\n  shift_digits=$3\n  shift_digits=$4\n  shift_digits=$5\n  shift_digits=$6\n  shift_digits=$7\n  shift_digits=$8\n  shift_digits=$9\n  shift_digits=$10\n  shift_digits=$11\n  shift_digits=$12\n  shift_digits=$13\n  shift_digits=$14\n  shift_digits=$15\n  shift_digits=$16\n  shift_digits=$17\n  shift_digits=$18\n  shift_digits=$19\n  shift_digits=$20\n  shift_digits=$21\n  shift_digits=$22\n  shift_digits=$23\n  shift_digits=$24\n  shift_digits=$25\n  shift_digits=$26\n  shift_digits=$27\n  shift_digits=$28\n  shift_digits=$29\n  shift_digits=$30\n  shift_digits=$31\n  shift_digits=$32\n  shift_digits=$33\n  shift_digits=$34\n  shift_digits=$35\n  shift_digits=$36\n  shift_digits=$37\n  shift_digits=$38\n  shift_digits=$39\n  shift_digits=$40\n  shift_digits=$41\n  shift_digits=$42\n  shift_digits=$43\n  shift_digits=$44\n  shift_"], ["# <func> # Shell\n#!/bin/bash\n# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> $(digitSum \"\")\n# \"0\"\n# >>> $(digitSum \"abAB\")\n# \"131\"\n# >>> $(digitSum \"abcCd\")\n# \"67\"\n# >>> $(digitSum \"helloE\")\n# \"69\"\n# >>> $(digitSum \"woArBld\")\n# \"131\"\n# >>> $(digitSum \"aAaaaXa\")\n# \"153\"\n#\n# $1 is a string\ndigitSum() {\n  local str\n  str=$1\n  local sum\n  sum=$((str[0] + str[1] + str[2] + str[3] + str[4] + str[5] + str[6] + str[7] + str[8] + str[9] + str[10] + str[11] + str[12] + str[13] + str[14] + str[15] + str[16] + str[17] + str[18] + str[19] + str[20] + str[21] + str[22] + str[23] + str[24] + str[25] + str[26] + str[27] + str[28] + str[29] + str[30] + str[31] + str[32] + str[33] + str[34] + str[35] + str[36] + str[37] + str[38] + str[39] + str[40] + str[41] + str[42] + str[43] + str[44] + str[45] + str[46] + str[47] + str[48] + str[49] + str[50] + str[51] + str[52] + str[53] + str[54] + str[55] + str[56"], ["# <func> # Shell\n#!/bin/bash\n# In this task, you will be given a string that represents a number of apples and oranges \n# that are distributed in a basket of fruit this basket contains \n# apples, oranges, and mango fruits. Given the string that represents the total number of \n# the oranges and apples and an integer that represent the total number of the fruits \n# in the basket return the number of the mango fruits in the basket.\n# for examble:\n# >>> $(fruit_distribution \"5 apples and 6 oranges\" \"19\")\n# \"8\"\n# >>> $(fruit_distribution \"0 apples and 1 oranges\" \"3\")\n# \"2\"\n# >>> $(fruit_distribution \"2 apples and 3 oranges\" \"100\")\n# \"95\"\n# >>> $(fruit_distribution \"100 apples and 1 oranges\" \"120\")\n# \"19\"\n#\n# $1 is a string\n# $2 is an integer\nfruit_distribution() {\n    local fruit_count=$1\n    local fruit_count_int=$2\n    local fruit_count_string=$3\n    local fruit_count_string_int=$4\n    local fruit_count_string_string=$5\n    local fruit_count_string_string_int=$6\n    local fruit_count_string_string_int_string=$7\n    local fruit_count_string_string_string_int_string=$8\n    local fruit_count_string_string_string_int_string_int=$9\n    local fruit_count_string_string_string_int_string_int_string=$10\n    local fruit_count_string_string_string_int_string_int_string_int=$11\n    local fruit_count_string_string_string_int_string_int_string_int_string=$12\n    local fruit_count_string_string_string_int_string_int_string_int_string_int=$13\n    local fruit_count_string_string_string_int_string_int_string_int_string_int_string=$14\n"], ["# <func> # Shell\n#!/bin/bash\n# \"Given an array representing a branch of a tree that has non-negative integer nodes\n# your task is to pluck one of the nodes and return it.\n# The plucked node should be the node with the smallest even value.\n# If multiple nodes with the same smallest even value are found return the node that has smallest index.\n# The plucked node should be returned in a list, [ smalest_value, its index ],\n# If there are no even values or the given array is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 3:\n# >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n# so we will choose the first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n  local nodes\n  local index\n  local value\n  local smalest_value\n  local index_list\n  local smalest_value_list\n  local index_list_list\n  local smalest_value_list_list\n  local smalest_value_list\n  local smalest_value_list_list\n  local smalest_value_list\n  local smalest_value_list_list\n  local smalest_value_list\n  local smalest_value_list_list\n  local smalest_value_list\n  local smalest_value_"], ["# <func> # Shell\n#!/bin/bash\n# You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n# zero, and has a frequency greater than or equal to the value of the integer itself. \n# The frequency of an integer is the number of times it appears in the list.\n# If no such a value exist, return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n# $1 is a space-separated list\nsearch() {\n    local list=\"$1\"\n    local max\n    local freq\n    local i\n    local max_freq\n    local max_freq_list\n    local max_freq_list_len\n    local max_freq_list_i\n    local max_freq_list_j\n    local max_freq_list_len_j\n    local max_freq_list_j_i\n    local max_freq_list_j_len\n    local max_freq_list_j_i_j\n    local max_freq_list_j_i_len\n    local max_freq_list_j_i_j_len\n    local max_freq_list_j_i_j_len_j\n    local max_freq_list_j_i_j_len_j_len\n    local max_freq_list_j_i_j_len_j_len_j\n    local max_freq_list_j_i_j_len_j_len_j_len\n    local max_freq_list_j_i_j_len_j_len_j_len_j\n    local max_freq_list_j_i_j_len_j_len_j_len_j_len\n    local max_freq_list_j_i_j_len_j_len_j_len_j_len"], ["# <func> # Shell\n#!/bin/bash\n# Given list of integers, return list in strange order.\n# Strange sorting, is when you start with the minimum value,\n# then maximum of the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local list=\"$1\"\n  local new_list=\"$2\"\n  local new_list_length=\"$3\"\n  local new_list_min=\"$4\"\n  local new_list_max=\"$5\"\n  local new_list_min_max=\"$6\"\n  local new_list_min_max_length=\"$7\"\n  local new_list_min_max_length_min=\"$8\"\n  local new_list_min_max_length_max=\"$9\"\n  local new_list_min_max_length_max_length=\"$10\"\n  local new_list_min_max_length_max_length_min=\"$11\"\n  local new_list_min_max_length_max_length_max=\"$12\"\n  local new_list_min_max_length_max_length_min_max=\"$13\"\n  local new_list_min_max_length_max_length_min_max_length=\"$14\"\n  local new_list_min_max_length_max_length_min_max_length_min=\"$15\"\n  local new_list_min_max_length_max_length_min_max_length_min_max=\"$16\"\n  local new_list_min_max_length_max_length_min_max_length_min_max_length=\"$17\"\n  local new_list_min_max_length_max_length_min_max_length_"], ["# <func> # Shell\n#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return the area of\n# the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any two sides is greater \n# than the third side.\n# Example:\n# >>> $(triangle_area \"3\" \"4\" \"5\")\n# \"6.0\"\n# >>> $(triangle_area \"1\" \"2\" \"10\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\ntriangle_area() {\n  local $1 $2 $3\n  if [[ $1 -eq 0 && $2 -eq 0 && $3 -eq 0 ]]; then\n    return -1\n  elif [[ $1 -eq 0 && $2 -eq 1 && $3 -eq 0 ]]; then\n    return 0\n  elif [[ $1 -eq 0 && $2 -eq 1 && $3 -eq 1 ]]; then\n    return 1\n  elif [[ $1 -eq 1 && $2 -eq 0 && $3 -eq 0 ]]; then\n    return 0\n  elif [[ $1 -eq 1 && $2 -eq 0 && $3 -eq 1 ]]; then\n    return 1\n  elif [[ $1 -eq 1 && $2 -eq 1 && $3 -eq 0 ]]; then\n    return 1\n  elif [[ $1 -eq 1 && $2 -eq 1 && $3 -eq 1 ]]; then\n    return 1\n  elif [[ $1 -eq 1 && $2 -eq 1 && $3 -eq 1 ]]; then\n    return 1\n  elif [[ $1 -eq 1 && $2 -eq 1 && $3 -eq 2 ]]; then\n    return 1\n  elif [[ $1 -eq 1 && $2 -eq 1 && $3 -eq 3 ]]; then\n    return 1\n  elif [[ $1 -eq 1 && $2 -eq 1 && $3 -eq "], ["# <func> # Shell\n#!/bin/bash\n# Write a function that returns true if the object q will fly, and false otherwise.\n# The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>> $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\")\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible weight, and it's balanced.\n#\n# $1 is a space-separated list\n# $2 is an integer\nwill_it_fly() {\n    local q\n    q=$1\n    local w\n    w=$2\n    if [[ $w -eq 0 ]]; then\n        return 1\n    elif [[ $w -eq $w+1 ]]; then\n        return 0\n    else\n        return 0\n    fi"], ["# <func> # Shell\n#!/bin/bash\n# Given an array arr of integers, find the minimum number of elements that\n# need to be changed to make the array palindromic. A palindromic array is an array that\n# is read the same backwards and forwards. In one change, you can change one element to any other element.\n# For example:\n# >>> $(smallest_change \"1 2 3 5 4 7 9 6\")\n# \"4\"\n# >>> $(smallest_change \"1 2 3 4 3 2 2\")\n# \"1\"\n# >>> $(smallest_change \"1 2 3 2 1\")\n# \"0\"\n#\n# $1 is a space-separated list\nsmallest_change() {\n  local arr=\"$1\"\n  local min=\"$2\"\n  local max=\"$3\"\n  local change=\"$4\"\n  local new_arr=\"$5\"\n  local new_min=\"$6\"\n  local new_max=\"$7\"\n  local new_change=\"$8\"\n  local new_new_arr=\"$9\"\n  local new_new_min=\"$10\"\n  local new_new_max=\"$11\"\n  local new_new_change=\"$12\"\n  local new_old_arr=\"$13\"\n  local new_old_min=\"$14\"\n  local new_old_max=\"$15\"\n  local new_old_change=\"$16\"\n  local new_old_new_arr=\"$17\"\n  local new_old_new_min=\"$18\"\n  local new_old_new_max=\"$19\"\n  local new_old_new_change=\"$20\"\n  local new_old_new_new_arr=\"$21\"\n  local new_old_new_new_min=\"$22\"\n  local new_old_new_new_max=\"$23\"\n  local new_old_new_new_change=\"$24\"\n  local new_old_new_old_arr=\"$25\"\n  local new_old_new_old_min=\"$26\"\n  local new_old_new_old_max=\"$2"], ["# <func> # Shell\n#!/bin/bash\n# Write a function that accepts two lists of strings and returns the list that has \n# total number of chars in the all strings of the list less than the other list.\n# if the two lists have the same number of chars, return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n# >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntotal_match() {\n  local $1 $2\n  local $len\n  local $i\n  local $len_1\n  local $len_2\n  local $len_1_2\n  local $len_1_2_3\n  local $len_1_2_3_4\n  local $len_1_2_3_4_5\n  local $len_1_2_3_4_5_6\n  local $len_1_2_3_4_5_6_7\n  local $len_1_2_3_4_5_6_7_8\n  local $len_1_2_3_4_5_6_7_8_9\n  local $len_1_2_3_4_5_6_7_8_9_10\n  local $len_1_2_3_4_5_6_7_8_9_10_11\n  local $len_1_2_3_4_5_6_7_8_9_10_11_12\n  local $len_1_2_3_4_5_6_7_8_9_10_11_12_1"], ["# <func> # Shell\n#!/bin/bash\n# Write a function that returns true if the given number is the multiplication of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100. \n# Example:\n# >>> $(is_multiply_prime \"30\")\n# \"true\"\n# 30 = 2 * 3 * 5\n#\n# $1 is an integer\nis_multiply_prime() {\n    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local a_prime\n    local b_prime\n    local c_prime\n    local d_prime\n    local e_prime\n    local f_prime\n    local g_prime\n    local h_prime\n    local i_prime\n    local j_prime\n    local k_prime\n    local l_prime\n    local m_prime\n    local n_prime\n    local o_prime\n    local p_prime\n    local q_prime\n    local r_prime\n    local s_prime\n    local t_prime\n    local u_prime\n    local v_prime\n    local w_prime\n    local x_prime\n    local y_prime\n    local z_prime\n    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local a_prime\n    local b_prime\n    local c_prime\n    local d_prime\n    local e_prime\n    local f_prime"], ["# <func> # Shell\n#!/bin/bash\n# Your task is to write a function that returns true if a number x is a simple\n# power of n and false in other cases.\n# x is a simple power of n if n**int=x\n# For example:\n# >>> $(is_simple_power \"1\" \"4\")\n# \"true\"\n# >>> $(is_simple_power \"2\" \"2\")\n# \"true\"\n# >>> $(is_simple_power \"8\" \"2\")\n# \"true\"\n# >>> $(is_simple_power \"3\" \"2\")\n# \"false\"\n# >>> $(is_simple_power \"3\" \"1\")\n# \"false\"\n# >>> $(is_simple_power \"5\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n# $2 is an integer\nis_simple_power() {\n    local n=$1\n    local m=$2\n    local i\n    local x\n    local y\n    local z\n    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local i1\n    local i2\n    local i3\n    local i4\n    local i5\n    local i6\n    local i7\n    local i8\n    local i9\n    local i10\n    local i11\n    local i12\n    local i13\n    local i14\n    local i15\n    local i16\n    local i17\n    local i18\n    local i19\n    local i20\n    local i21\n    local i22\n    local i23\n    local i24\n    local i25\n    local i26\n    local i27\n    local i28\n    local i29\n    local i30\n    local i31\n    local i32\n    local i33\n    local i34\n    local i35\n    local i36\n    local i37\n    local i38\n    local i39\n    local i40\n    local i41\n    local i42\n"], ["# <func> # Shell\n#!/bin/bash\n# Write a function that takes an integer a and returns true \n# if this ingeger is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n# >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>> $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [[ $1 -eq 0 ]]; then\n        echo \"false\"\n    elif [[ $1 -eq $2 ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi"], ["# <func> # Shell\n#!/bin/bash\n# You have been tasked to write a function that receives \n# a hexadecimal number as a string and counts the number of hexadecimal \n# digits that are primes (prime number, or a prime, is a natural number \n# greater than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\n#\n# $1 is a string\nhex_key() {\n  local hex_string=\"$1\"\n  local hex_digits=\"$2\"\n  local hex_digits_count=\"$3\"\n  local hex_digits_count_prime=\"$4\"\n  local hex_digits_count_prime_prime=\"$5\"\n  local hex_digits_count_prime_prime_prime=\"$6\"\n  local hex_digits_count_prime_prime_prime_prime_prime=\"$7\"\n  local hex_digits_count_prime_prime_prime_prime_prime_prime_prime=\"$8\"\n  local hex_digits_count_prime_prime_prime_prime_"], ["# <func> # Shell\n#!/bin/bash\n# You will be given a number in decimal form and your task is to convert it to\n# binary format. The function should return a string, with each character representing a binary\n# number. Each character in the string will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n# The extra characters are there to help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an integer\ndecimal_to_binary() {\n    local num\n    num=$1\n    num=${num:0:1}\n    num=${num:1:2}\n    num=${num:2:3}\n    num=${num:3:4}\n    num=${num:4:5}\n    num=${num:5:6}\n    num=${num:6:7}\n    num=${num:7:8}\n    num=${num:8:9}\n    num=${num:9:10}\n    num=${num:10:11}\n    num=${num:11:12}\n    num=${num:12:13}\n    num=${num:13:14}\n    num=${num:14:15}\n    num=${num:15:16}\n    num=${num:16:17}\n    num=${num:17:18}\n    num=${num:18:19}\n    num=${num:19:20}\n    num=${num:20:21}\n    num=${num:21:22}\n    num=${num:22:23}\n    num=${num:23:24}\n    num=${num:24:25}\n    num=${num:25:26}\n    num=${num:26:27}\n    num=${num:27:28}\n    num=${num:2"], ["# <func> # Shell\n#!/bin/bash\n# You are given a string s.\n# Your task is to check if the string is hapsh or not.\n# A string is hapsh if its length is at least 3 and every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy \"a\")\n# \"false\"\n# >>> $(is_happy \"aa\")\n# \"false\"\n# >>> $(is_happy \"abcd\")\n# \"true\"\n# >>> $(is_happy \"aabb\")\n# \"false\"\n# >>> $(is_happy \"adb\")\n# \"true\"\n# >>> $(is_happy \"xyy\")\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n    local length=3\n    local letters=()\n    local i=0\n    local j=length-1\n    while [ $i -lt $length ]\n    do\n        if [ $s[i] = $s[j] ]\n        then\n            letters[i]=1\n        else\n            letters[i]=0\n        fi\n        i=$((i+1))\n        j=$((j+1))\n    done\n    for i in \"${letters[@]}\"; do\n        if [ $s[i] -ne $s[i+1] ]\n        then\n            return 1\n        fi\n    done\n    return 0"], ["# <func> # Shell\n#!/bin/bash\n# It is the last week of the semester and the teacher has to give the grades\n# to students. The teacher has been making her own algorithm for grading.\n# The only problem is, she has lost the code she used for grading.\n# She has given you a list of GPAs for some students and you have to write \n# a function that can output a list of letter grades using the following table:\n# GPA       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7                B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7                C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n# >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n    local -a list\n    list=( $(grade_equation $1) )\n    for i in \"${list[@]}\"; do\n        if [[ $i =~ [0-9] ]]; then\n            echo \"$i\"\n        else\n            echo \"Invalid grade\"\n        fi\n    done"], ["# <func> # Shell\n#!/bin/bash\n# Write a function that takes a string and returns true if the string\n# length is a prime number or false otherwise\n# Examples\n# >>> $(prime_length \"Hello\")\n# \"true\"\n# >>> $(prime_length \"abcdcba\")\n# \"true\"\n# >>> $(prime_length \"kittens\")\n# \"true\"\n# >>> $(prime_length \"orange\")\n# \"false\"\n#\n# $1 is a string\nprime_length() {\n  local string\n  string=$(echo $1 | tr -d '[:blank:]')\n  if [[ $string =~ ^[0-9]*$ ]]\n  then\n    return 1\n  else\n    return 0\n  fi"], ["# <func> # Shell\n#!/bin/bash\n# Given a positive integer n, return the count of the numbers of n-digit\n# positive integers that start or end with 1.\n#\n# $1 is an integer\nstarts_one_ends() {\n  local n\n  local count\n  n=1\n  count=0\n  while [ $n -lt $1 ]; do\n    if [ $n -eq 1 ]; then\n      count+=1\n    else\n      count+=1\n      n=$((n+1))\n    fi\n  done\n  return $count"], ["# <func> # Shell\n#!/bin/bash\n# Given a positive integer N, return the total sum of its digits in binary.\n# Example\n# >>> $(solve \"1000\")\n# \"1\"\n# >>> $(solve \"150\")\n# \"110\"\n# >>> $(solve \"147\")\n# \"1100\"\n# Variables:\n# @N integer\n# Constraints: 0 \u2264 N \u2264 10000.\n# Output:\n# a string of binary number\n#\n# $1 is an integer\nsolve() {\n  local N\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a_0\n  local a_1\n  local b_0\n  local b_1\n  local c_0\n  local c_1\n  local d_0\n  local d_1\n  local e_0\n  local e_1\n  local f_0\n  local f_1\n  local g_0\n  local g_1\n  local h_0\n  local h_1\n  local i_0\n  local i_1\n  local j_0\n  local j_1\n  local k_0\n  local k_1\n  local l_0\n  local l_1\n  local m_0\n  local m_1\n  local n_0\n  local n_1\n  local o_0\n  local o_1\n  local p_0\n  local p_1\n  local q_0\n  local q_1\n  local r_0\n  local r_1\n  local s_0\n  local s_1\n  local t_0\n  local t_1\n  local u_0\n  local u_1\n  local v_0\n "], ["# <func> # Shell\n#!/bin/bash\n# Given a non-empty list of integers lst. add the even elements that are at odd indices..\n# Examples:\n# >>> $(add \"4 2 6 7\")\n# \"2\"\n#\n# $1 is a space-separated list\nadd() {\n    local lst=$1\n    local even_indices=0\n    local odd_indices=0\n    local even_elements=0\n    local odd_elements=0\n    for element in $lst; do\n        if ((even_indices == 0)) && ((odd_indices == 0)); then\n            even_elements+=($element)\n            odd_indices=1\n        else\n            even_elements+=($element)\n            odd_indices=0\n        fi\n    done\n    echo \"Even elements: $even_elements\"\n    echo \"Odd elements: $odd_elements\"\n    echo \"Even elements: $even_elements\"\n    echo \"Odd elements: $odd_elements\""], ["# <func> # Shell\n#!/bin/bash\n# Write a function that takes a string and returns an ordered version of it.\n# Ordered version of string, is a string where all words (separated by space)\n# are replaced by a new word where all the characters arranged in\n# ascending order based on ascii value.\n# Note: You should keep the order of words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\nanti_shuffle() {\n  local word\n  local new_word\n  local ascii_value\n  local new_sentence\n  local new_sentence_length\n  local new_sentence_length_after_shuffle\n  local new_sentence_length_after_shuffle_after_shuffle\n  local new_sentence_length_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle_after_shuffle"], ["# <func> # Shell\n#!/bin/bash\n# You are given a 2 dimensional data, as a nested lists,\n# which is similar to matrix, however, unlike matrices,\n# each row may contain a different number of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return list of lists, [(x1, y1), (x2, y2) ...] such that\n# each list is a coordinate - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending order.\n# Also, sort coordinates of the row by columns in descending order.\n# Examples:\n# >>> $(get_row \"1 2 3 4 5 6\\n1 2 3 4 1 6\\n1 2 3 4 5 1\" \"1\")\n# [['\"0\"', '\"0\"'], ['\"1\"', '\"4\"'], ['\"1\"', '\"0\"'], ['\"2\"', '\"5\"'], ['\"2\"', '\"0\"']]\n# >>> $(get_row \"\" \"1\")\n# []\n# >>> $(get_row \"\\n1\\n1 2 3\" \"3\")\n# [['\"2\"', '\"2\"']]\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nget_row() {\n  local lst=$1\n  local x=$2\n  local y=$3\n  local lst_len=$#$1\n  local y_len=$#$2\n  local x_len=$#$3\n  local y_len_len=$#$3\n  local x_len_len=$#$2\n  local y_len_len_len=$#$2\n  local x_len_len_len_len=$#$3\n  local x_len_len_len_len_len=$#$2\n  local x_len_len_len_len_len_len=$#$3\n  local x_len_len_len_len_len_len_len=$#$2\n  local x_len_len_len_len_len_len_len_len=$#$3\n"], ["# <func> # Shell\n#!/bin/bash\n# Given an array of non-negative integers, return a cosh of the given array after sorting,\n# you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n# or sort it in descending order if the sum( first index value, last index value) is even.\n# Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"', '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local -a array\n    array=( \"$1\" )\n    local -a sorted_array\n    sorted_array=( \"${array[@]}\" )\n    local -a sorted_array_sorted\n    sorted_array_sorted=( \"${array[@]}\" )\n    local -a sorted_array_sorted_sorted\n    sorted_array_sorted_sorted=( \"${array[@]}\" )\n    local -a sorted_array_sorted_sorted_sorted\n    sorted_array_sorted_sorted_sorted=( \"${array[@]}\" )\n    local -a sorted_array_sorted_sorted_sorted_sorted\n    sorted_array_sorted_sorted_sorted_sorted=( \"${array[@]}\" )\n    local -a sorted_array_sorted_sorted_sorted_sorted_sorted\n    sorted_array_sorted_sorted_sorted_sorted_sorted=( \"${array[@]}\" )\n    local -a sorted_array_sorted_sorted_sorted_sorted_sorted_sorted\n    sorted_array_sorted_sorted_sorted_sorted_sorted_sorted=( \"${array[@]}\" )\n    local -a sorted_array_sorted_sorted_sorted_sorted_sorted_sorted"], ["# <func> # Shell\n#!/bin/bash\n# Create a function encrypt that takes a string as an argument and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet should be rotated in a manner such that the letters \n# shift down by two multiplied to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Rotate the alphabet\n    alphabet=$(echo $1 | tr 'a-z' 'A-Z')\n    # Rotate the string\n    string=$(echo $1 | tr 'a-z' 'A-Z')\n    # Rotate the string\n    string2=$(echo $string | tr 'a-z' 'A-Z')\n    # Rotate the string\n    string3=$(echo $string2 | tr 'a-z' 'A-Z')\n    # Rotate the string\n    string4=$(echo $string3 | tr 'a-z' 'A-Z')\n    # Rotate the string\n    string5=$(echo $string4 | tr 'a-z' 'A-Z')\n    # Rotate the string\n    string6=$(echo $string5 | tr 'a-z' 'A-Z')\n    # Rotate the string\n    string7=$(echo $string6 | tr 'a-z' 'A-Z')\n    # Rotate the string\n    string8=$(echo $string7 | tr 'a-z' 'A-Z')\n    # Rotate the string\n    string9=$(echo $string8 | tr 'a-z' 'A-Z')\n    # Rotate the string\n    string10=$(echo $string9 | tr 'a-z' 'A-Z')\n    # Rotate the string\n    string11=$(echo $string10 | tr 'a-z' 'A-Z')\n    # Rotate the string\n    string12=$(echo $string11 | tr 'a-"], ["# <func> # Shell\n#!/bin/bash\n# You are given a list of integers.\n# Write a function next_smallest() that returns the 2nd smallest element of the list.\n# Return None if there is no such element.\n# >>> $(next_smallest \"1 2 3 4 5\")\n# \"2\"\n# >>> $(next_smallest \"5 1 4 3 2\")\n# \"2\"\n# >>> $(next_smallest \"\")\n# \"None\"\n# >>> $(next_smallest \"1 1\")\n# \"None\"\n#\n# $1 is a space-separated list\nnext_smallest() {\n  local list=\"$1\"\n  local smallest\n  smallest=($list)\n  while [[ $list =~ ^[0-9]+$ ]]; do\n    smallest=$2\n    shift\n  done\n  return $smallest"], ["# <func> # Shell\n#!/bin/bash\n# You'll be given a string of words, and your task is to count the number\n# of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences are delimited by '.', '?' or '!'.\n# For example:\n# >>> $(is_bored \"Hello world\")\n# \"0\"\n# >>> $(is_bored \"The sky is blue. The sun is shining. I love this weather\")\n# \"1\"\n#\n# $1 is a string\nis_bored() {\n  local -r word\n  local -r count\n  local -r sentence\n  local -r boredom\n  local -r boredom_count\n  local -r boredom_word\n  local -r boredom_sentence\n  local -r boredom_count_word\n  local -r boredom_count_sentence\n  local -r boredom_count_word_sentence\n  local -r boredom_count_sentence_word\n  local -r boredom_count_sentence_word_sentence\n  local -r boredom_count_sentence_word_sentence_sentence\n  local -r boredom_count_sentence_word_sentence_sentence_sentence\n  local -r boredom_count_sentence_word_sentence_sentence_sentence_sentence\n  local -r boredom_count_sentence_word_sentence_sentence_sentence_sentence_sentence\n  local -r boredom_count_sentence_word_sentence_sentence_sentence_sentence_sentence_sentence\n  local -r boredom_count_sentence_word_sentence_sentence_sentence_sentence_sentence_sentence_sentence\n  local -r boredom_count_sentence_word_sentence_sentence_sentence_sentence_sentence_sentence_sentence_sentence\n  local -r boredom_count_sentence_word_sentence_sentence_sentence_sentence_sentence_"], ["# <func> # Shell\n#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"-2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n# $3 is a floating point\nany_int() {\n    local num1 num2 num3\n    num1=$(echo \"$1\" | bc)\n    num2=$(echo \"$2\" | bc)\n    num3=$(echo \"$3\" | bc)\n    if [[ \"$num1\" == \"$num2\" && \"$num1\" == \"$num3\" ]]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi"], ["# <func> # Shell\n#!/bin/bash\n# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> $(encode \"test\")\n# \"TGST\"\n# >>> $(encode \"This is a message\")\n# \"tHKS KS C MGSSCGG\"\n#\n# $1 is a string\nencode() {\n  local message=\"$1\"\n  local vowels=\"$2\"\n  local case=\"$3\"\n  local letter=\"$4\"\n  local vowels_case=\"$5\"\n  local vowels_letter=\"$6\"\n  local vowels_case_letter=\"$7\"\n  local vowels_letter_case=\"$8\"\n  local vowels_letter_case_letter=\"$9\"\n  local vowels_letter_case_letter_case=\"$10\"\n  local vowels_letter_case_letter_case_case=\"$11\"\n  local vowels_letter_case_letter_case_case_case=\"$12\"\n  local vowels_letter_case_letter_case_case_case_case=\"$13\"\n  local vowels_letter_case_letter_case_case_case_case_case_case=\"$14\"\n  local vowels_letter_case_letter_case_case_case_case_case_case_case_case_case=\"$15\"\n  local vowels_letter_case_letter_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_case_"], ["# <func> # Shell\n#!/bin/bash\n# You are given a list of integers.\n# You need to find the largest prime value and return the sum of its digits.\n# Examples:\n# >>> $(skjkasdkd \"0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3\")\n# \"10\"\n# >>> $(skjkasdkd \"1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1\")\n# \"25\"\n# >>> $(skjkasdkd \"1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3\")\n# \"13\"\n# >>> $(skjkasdkd \"0 724 32 71 99 32 6 0 5 91 83 0 5 6\")\n# \"11\"\n# >>> $(skjkasdkd \"0 81 12 3 1 21\")\n# \"3\"\n# >>> $(skjkasdkd \"0 8 1 2 1 7\")\n# \"7\"\n#\n# $1 is a space-separated list\nskjkasdkd() {\n  local -r list=\"$1\"\n  local -r sum=\"$list\"\n  local -r i\n  local -r sum_digits\n  local -r sum_digits_sum\n  local -r sum_digits_sum_digits\n  local -r sum_digits_sum_digits_sum\n  local -r sum_digits_sum_digits_sum_digits\n  local -r sum_digits_sum_digits_sum_digits_sum\n  local -r sum_digits_sum_digits_sum_digits_sum_digits\n  local -r sum_"], ["# <func> # Shell\n#!/bin/bash\n# Given a CSV, return true if all keys are strings in lower \n# case or all keys are strings in upper case, else return false.\n# The function should return false is the given CSV is empty.\n# Examples:\n# >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\")\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local key=\"$1\"\n  local value=\"$2\"\n  local case_lower=\"$3\"\n  local case_upper=\"$4\"\n  local case_lower_upper=\"$5\"\n  local case_lower_upper_case=\"$6\"\n  local case_lower_upper_case_lower=\"$7\"\n  local case_lower_upper_case_upper=\"$8\"\n  local case_lower_upper_case_upper_case=\"$9\"\n  local case_lower_upper_case_upper_case_lower=\"$10\"\n  local case_lower_upper_case_upper_case_lower_case=\"$11\"\n  local case_lower_upper_case_upper_case_lower_case_lower=\"$12\"\n  local case_lower_upper_case_upper_case_lower_case_lower_case=\"$13\"\n  local case_lower_upper_case_upper_case_lower_case_lower_case_lower_case_lower=\"$14\"\n  local case_lower_upper_case_upper_case_lower_case_lower_case_lower_case_lower_case_lower_case=\"$15\"\n  local case_lower_upper_case_upper_case_lower_"], ["# <func> # Shell\n#!/bin/bash\n# Implement a function that takes an non-negative integer and returns an array of the first n\n# integers that are prime numbers and less than n.\n# for example:\n# >>> $(count_up_to \"5\")\n# ['\"2\"', '\"3\"']\n# >>> $(count_up_to \"11\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"']\n# >>> $(count_up_to \"0\")\n# []\n# >>> $(count_up_to \"20\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"', '\"11\"', '\"13\"', '\"17\"', '\"19\"']\n# >>> $(count_up_to \"1\")\n# []\n# >>> $(count_up_to \"18\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"', '\"11\"', '\"13\"', '\"17\"']\n#\n# $1 is an integer\ncount_up_to() {\n  local i\n  local n\n  local p\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local z1\n  local z2\n  local z3\n  local z4\n  local z5\n  local z6\n  local z7\n  local z8\n  local z9\n  local z10\n  local z11\n  local z12\n  local z13\n  local z14\n  local z15\n  local z16\n  local z17\n  local z18\n  local z19\n  local z20\n  local z21\n  local z22\n  local z23\n  local z24\n  local z25\n  local z26\n  local z27\n  local z28\n  local z29\n  local z30\n  local z31\n  local z32\n  local z33\n  local z34\n  local z35\n  local z36\n  local z"], ["# <func> # Shell\n#!/bin/bash\n# Complete the function that takes two integers and returns \n# the product of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# >>> $(multiply \"148\" \"412\")\n# \"16\"\n# >>> $(multiply \"19\" \"28\")\n# \"72\"\n# >>> $(multiply \"2020\" \"1851\")\n# \"0\"\n# >>> $(multiply \"14\" \"-15\")\n# \"20\"\n#\n# $1 is an integer\n# $2 is an integer\nmultiply() {\n  local $1 $2\n  local $1_unit $2_unit\n  local $1_unit_digits $2_unit_digits\n  local $1_unit_digits_mod $2_unit_digits_mod\n  local $1_unit_digits_mod_mod $2_unit_digits_mod_mod\n  local $1_unit_digits_mod_mod_mod $2_unit_digits_mod_mod_mod\n  local $1_unit_digits_mod_mod_mod_mod $2_unit_digits_mod_mod_mod_mod\n  local $1_unit_digits_mod_mod_mod_mod_mod $2_unit_digits_mod_mod_mod_mod_mod\n  local $1_unit_digits_mod_mod_mod_mod_mod $2_unit_digits_mod_mod_mod_mod_mod_mod\n  local $1_unit_digits_mod_mod_mod_mod_mod_mod $2_unit_digits_mod_mod_mod_mod_mod_mod\n  local $1_unit_digits_mod_mod_mod_mod_mod_mod $2_unit_digits_mod_mod_mod_mod_mod_mod\n  local $1_unit_digits_mod_mod_mod_mod_mod_mod $2_unit_digits_mod_mod_mod_mod_mod_mod\n  local $1_unit_digits_mod_mod_"], ["# <func> # Shell\n#!/bin/bash\n# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\n# >>> $(count_upper \"aBCdEf\")\n# \"1\"\n# >>> $(count_upper \"abcdefg\")\n# \"0\"\n# >>> $(count_upper \"dBBE\")\n# \"0\"\n#\n# $1 is a string\ncount_upper() {\n  local s\n  s=\"$(basename \"$1\")\"\n  local vowels\n  vowels=\"$(echo $s | tr -cd '[A-Z]')\"\n  local count\n  count=\"$(echo $s | tr -cd '[A-Z]')\"\n  if [[ $count -eq 0 ]]; then\n    echo \"No vowels found\"\n  else\n    echo \"Count of uppercase vowels: $count\"\n    echo \"Vowels: $vowels\"\n  fi"], ["# <func> # Shell\n#!/bin/bash\n# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local num=\"$1\"\n  local min=\"$2\"\n  local max=\"$3\"\n  local diff=\"$4\"\n  local round=\"$5\"\n  local round_to=\"$6\"\n  local round_up=\"$7\"\n  local round_down=\"$8\"\n  local round_up_to=\"$9\"\n  local round_down_to=\"$10\"\n  local round_up_to_min=\"$11\"\n  local round_down_to_min=\"$12\"\n  local round_up_to_max=\"$13\"\n  local round_down_to_max=\"$14\"\n  local round_up_to_min_max=\"$15\"\n  local round_down_to_min_max=\"$16\"\n  local round_up_to=\"$17\"\n  local round_down=\"$18\"\n  local round_up_to_min_max_to=\"$19\"\n  local round_down_to_min_max_to=\"$20\"\n  local round_up_to_min_max_to=\"$21\"\n  local round_down_to_min_max_to=\"$22\"\n  local round_up_to_min_max_to=\"$23\"\n  local round_down_to_min_max_to=\"$24\"\n  local round_up_to_min_max"], ["# <func> # Shell\n#!/bin/bash\n# Given a positive integer n, you have to make a pile of n levels of stones.\n# The first level has n stones.\n# The number of stones in the next level is:\n# - the next odd number if n is odd.\n# - the next even number if n is even.\n# Return the number of stones in each level in a list, where element at index\n# i represents the number of stones in the level (i+1).\n# Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\nmake_a_pile() {\n  local n\n  local level_count\n  local level_count_odd\n  local level_count_even\n  local level_count_odd_even\n  local level_count_odd_even_even\n  local level_count_odd_even_odd\n  local level_count_even_even\n  local level_count_even_even_odd\n  local level_count_even_even_odd_even\n  local level_count_even_even_odd_even_even\n  local level_count_even_even_odd_even_even_even\n  local level_count_even_even_odd_even_even_even_even\n  local level_count_even_even_odd_even_even_even_even_even\n  local level_count_even_even_odd_even_even_even_even_even_even\n  local level_count_even_even_odd_even_even_even_even_even_even_even\n  local level_count_even_even_odd_even_even_even_even_even_even_even\n  local level_count_even_even_odd_even_even_even_even_even_even_even_even\n  local level_count_even_even_odd_even_even_even_even_even_even_even_even\n  local level_count_even_even_odd_even_even_even_even_even_even_even_even\n  local level_count_even_even_odd_even_"], ["# <func> # Shell\n#!/bin/bash\n# You will be given a string of words separated by commas or spaces. Your task is\n# to split the string into words and return an array of the words.\n# For example:\n# >>> $(words_string \"Hi, my name is John\")\n# ['\"Hi\"', '\"my\"', '\"name\"', '\"is\"', '\"John\"']\n# >>> $(words_string \"One, two, three, four, five, six\")\n# ['\"One\"', '\"two\"', '\"three\"', '\"four\"', '\"five\"', '\"six\"']\n#\n# $1 is a string\nwords_string() {\n  local word_list\n  word_list=$(echo $1 | tr -d ' ' | tr -d ',' | tr -d ' ' | tr -d ',' | tr -d ',' | tr -d ' ' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ',' | tr -d ','"], ["# <func> # Shell\n#!/bin/bash\n# This function takes two positive numbers x and y and returns the\n# biggest even integer number that is in the range [x, y] inclusive. If \n# there's no such number, then the function should return -1.\n# For example:\n# >>> $(choose_num \"12\" \"15\")\n# \"14\"\n# >>> $(choose_num \"13\" \"12\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n  local x=\"$1\"\n  local y=\"$2\"\n  local num\n  num=$(($x + $y))\n  if (( $num > $x && $num > $y )) ; then\n    return $num\n  else\n    return -1\n  fi"], ["# <func> # Shell\n#!/bin/bash\n# You are given two positive integers n and m, and your task is to compute the\n# average of the integers from n through m (including n and m). \n# Round the answer to the nearest integer and convert that to binary.\n# If n is greater than m, return -1.\n# Example:\n# >>> $(rounded_avg \"1\" \"5\")\n# \"0b11\"\n# >>> $(rounded_avg \"7\" \"5\")\n# \"-1\"\n# >>> $(rounded_avg \"10\" \"20\")\n# \"0b1111\"\n# >>> $(rounded_avg \"20\" \"33\")\n# \"0b11010\"\n#\n# $1 is an integer\n# $2 is an integer\nrounded_avg() {\n  local n m\n  n=$1\n  m=$2\n  local avg\n  avg=$((n+m)/2))\n  if [ $n -eq $m ]; then\n    return 0\n  else\n    return $(($n - $m))\n  fi"], ["# <func> # Shell\n#!/bin/bash\n# Given a list of positive integers x. return a sorted list of all \n# elements that hasn't any even digit.\n# Note: Returned list should be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local list=\"$1\"\n  local sorted_list=\"\"\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n "], ["# <func> # Shell\n#!/bin/bash\n# Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n# reverse the resulting array, and then replace each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"']\n#\n# $1 is a space-separated list\nby_length() {\n  local -a list\n  local -a result\n  local -a i\n  local -a j\n  local -a k\n  local -a l\n  local -a m\n  local -a n\n  local -a o\n  local -a p\n  local -a q\n  local -a r\n  local -a s\n  local -a t\n  local -a u\n  local -a v\n  local -a w\n  local -a x\n  local -a y\n  local -a z\n  local -a a\n  local -a b\n  local -a c\n  local -a d\n  local -a e\n  local -a f\n  local -a g\n  local -a h\n  local -a i\n  local -a j\n  local -a k\n  local -a l\n  local -a m\n  local -a n\n  local -a o\n  local -a p\n  local -a q\n  local -a r\n  local -a s\n  local -a t\n  local -a u\n  local -a v\n  local -a w\n  local -a x\n  local -a y\n  local -a z\n  local -"], ["# <func> # Shell\n#!/bin/bash\n# Implement the function f that takes n as a parameter,\n# and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n# i starts from 1.\n# the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n# Example:\n# >>> $(f \"5\")\n# ['\"1\"', '\"2\"', '\"6\"', '\"24\"', '\"15\"']\n#\n# $1 is an integer\nf() {\n  local i\n  local n\n  local factorial\n  local sum\n  local result\n  local i\n  local sum_list\n  local sum_list_size\n  local sum_list_index\n  local sum_list_value\n  local sum_list_size_index\n  local sum_list_value_index\n  local sum_list_value_index_index\n  local sum_list_value_index_sum\n  local sum_list_value_sum\n  local sum_list_value_sum_index\n  local sum_list_value_sum_index_index\n  local sum_list_value_sum_index_sum\n  local sum_list_value_sum_index_sum_index\n  local sum_list_value_sum_index_sum_index_index\n  local sum_list_value_sum_index_sum_index_sum\n  local sum_list_value_sum_index_sum_index_sum_index\n  local sum_list_value_sum_index_sum_index_sum_index_index\n  local sum_list_value_sum_index_sum_index_sum_index_sum\n  local sum_list_value_sum_index_sum_index_sum_index_sum_index\n  local sum_list_value_sum_index_sum_index_sum_index_sum_index_sum\n  local sum_list_value_sum_index_sum_index_sum_index_sum_index_sum_index\n  local sum_list_value_sum_"], ["# <func> # Shell\n#!/bin/bash\n# Given a positive integer n, return a list that has the number of even and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n# Example 1:\n# >>> $(even_odd_palindrome \"3\")\n# ['\"1\"', '\"2\"']\n# Explanation:\n# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# >>> $(even_odd_palindrome \"12\")\n# ['\"4\"', '\"6\"']\n# Explanation:\n# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n# 1. 1 <= n <= 10^3\n# 2. returned list has the number of even and odd integer palindromes respectively.\n#\n# $1 is an integer\neven_odd_palindrome() {\n  local n=\"$1\"\n  local i=\"$2\"\n  local j=\"$3\"\n  local k=\"$4\"\n  local l=\"$5\"\n  local m=\"$6\"\n  local n=\"$7\"\n  local n_even=\"$8\"\n  local n_odd=\"$9\"\n  local n_palindrome=\"$10\"\n  local n_palindrome_even=\"$11\"\n  local n_palindrome_odd=\"$12\"\n  local n_palindrome_palindrome=\"$13\"\n  local n_palindrome_odd_even=\"$14\"\n  local n_palindrome_odd_palindrome=\"$15\"\n  local n_palindrome_odd_palindrome_even=\"$16\"\n  local n_palindrome_odd_palindrome_odd=\"$17\"\n  local n_palindrome_odd_palindrome_odd_even=\"$18\"\n  local n_palindrome_odd_palindrome_odd_palindrome=\"$19\"\n"], ["# <func> # Shell\n#!/bin/bash\n# Write a function count_nums which takes an array of integers and returns\n# the number of elements which has a sum of digits > 0.\n# If a number is negative, then its first signed digit will be negative:\n# e.g. -123 has signed digits -1, 2, and 3.\n# >>> $(count_nums \"\")\n# \"0\"\n# >>> $(count_nums \"-1 11 -11\")\n# \"1\"\n# >>> $(count_nums \"1 1 2\")\n# \"3\"\n#\n# $1 is a space-separated list\ncount_nums() {\n  local -a nums\n  nums=( $(echo \"$1\" | cut -d ' ' -f 1-3) )\n  for num in \"${nums[@]}\"; do\n    if [[ \"$num\" =~ ^[0-9]*$ ]]; then\n      echo \"$num\"\n    fi\n  done"], ["# <func> # Shell\n#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n# numbers in the array will be randomly ordered. Your task is to determine if\n# it is possible to get an array sorted in non-decreasing order by performing \n# the following operation on the given array:\n# You are allowed to perform right shift operation any number of times.\n# One right shift operation means shifting all elements of the array by one\n# position in the right direction. The last element of the array will be moved to\n# the starting position in the array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing the above operation\n# then return true else return false.\n# If the given array is empty then return true.\n# Note: The given list is guaranteed to have unique elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n# be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"false\"\n# Explanation:It is not possible to get non-decreasing order for the given\n# array by performing any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball() {\n    local arr\n    arr=( $(echo $1 | tr ' ' '\\n' | sort -n | head -1) )\n    if [[ $arr[0] == *[0-9]* ]] ; then\n        arr[0]=$(( arr[0] - 1 ))\n        arr[1]=$(( arr[1] - 1 ))\n        arr[2]=$(( arr[2] - 1 ))\n        arr[3]=$(( arr[3] - 1 ))\n        arr[4]=$(( arr[4] - 1 ))\n        arr[5]=$(( arr[5] - 1 ))\n        arr[6]=$(( arr[6] - 1 "], ["# <func> # Shell\n#!/bin/bash\n# In this problem, you will implement a function that takes two lists of numbers,\n# and determines whether it is possible to perform an exchange of elements\n# between them to make lst1 a list of only even numbers.\n# There is no limit on the number of exchanged elements between lst1 and lst2.\n# If it is possible to exchange elements between the lst1 and lst2 to make\n# all the elements of lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n# >>> $(exchange \"1 2 3 4\" \"1 2 3 4\")\n# \"YES\"\n# >>> $(exchange \"1 2 3 4\" \"1 5 3 4\")\n# \"NO\"\n# It is assumed that the input lists will be non-empty.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nexchange() {\n  local lst1 lst2\n  local even\n  local num1 num2\n  local num1_even num2_even\n  local num1_odd num2_odd\n  local num1_odd_even num2_odd_even\n  local num1_odd_odd num2_odd_odd\n  local num1_odd_odd_even num2_odd_even_even\n  local num1_odd_even num2_odd_even_even\n  local num1_odd_even_even num2_odd_even_even_even\n  local num1_odd_even_odd num2_odd_even_odd_even\n  local num1_odd_odd_even num2_odd_odd_even_even\n  local num1_odd_odd_even_even num2_odd_odd_even_even_even\n  local num1_odd_odd_even_even_even num2_odd_odd_even_even_even\n  local num1_odd_odd_even_even_even num2_odd_odd_even_even_even_even\n  local num1_odd_odd_even_even_even num2_odd_odd_even_even_even_even\n  local num1"], ["# <func> # Shell\n#!/bin/bash\n# Given a string representing a space separated lowercase letters, return a CSV\n# of the letter with the most repetition and containing the corresponding count.\n# If several letters have the same occurrence, return all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"', '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local -r count=0\n  local -r letter=0\n  local -r count_letter=0\n  local -r count_letter_count=0\n  local -r count_letter_count_string=0\n  local -r count_letter_count_string_len=0\n  local -r count_letter_count_string_len_string=0\n  local -r count_letter_count_string_len_string_len=0\n  local -r count_letter_count_string_len_string_len_string=0\n  local -r count_letter_count_string_len_string_len_string_len=0\n  local -r count_letter_count_string_len_string_len_string_len_string=0\n  local -r count_letter_count_string_len_string_len_string_len_string_len=0\n  local -r count_letter_count_string_len_string_len_string_len_string_len_string=0\n  local -r count_letter_count_string_len_string_len_string_len_string_len_string_len=0\n  local -r count_letter_count_string_len_string_len_string_len_string"], ["# <func> # Shell\n#!/bin/bash\n# Task\n# We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n# then check if the result string is palindrome.\n# A string is called palindrome if it reads the same backward as forward.\n# You should return a list containing the result string and true/false for the check.\n# Example\n# >>> $(reverse_delete \"abcde\" \"ae\")\n# ['\"bcd\"', '\"false\"']\n# >>> $(reverse_delete \"abcdef\" \"b\")\n# ['\"acdef\"', '\"false\"']\n# >>> $(reverse_delete \"abcdedcba\" \"ab\")\n# ['\"cdedc\"', '\"true\"']\n#\n# $1 is a string\n# $2 is a string\nreverse_delete() {\n    local s=$1\n    local c=$2\n    local result\n    local check\n    local result_list\n    local result_string\n    local result_true\n    local result_false\n    local result_list_len\n    local result_list\n    local result_len\n    local result_len_len\n    local result_len_list\n    local result_len_list_len\n    local result_len_list_len_len\n    local result_len_list_len_list\n    local result_len_list_len_list_len\n    local result_len_list_len_list_len_len\n    local result_len_list_len_list_len_len_len\n    local result_len_list_len_list_len_len_len_len\n    local result_len_list_len_list_len_len_len_len_len\n    local result_len_list_len_list_len_len_len_len_len_len\n    local result_len_list_len_list_len_len_len_len_len_len_len\n    local result_len_list_len_list_len_len_len_len_len_len_len_len\n    local result_len_list_len_list_len_len_len_len_len_len_len_"], ["# <func> # Shell\n#!/bin/bash\n# Given an array of integers nums, find the minimum sum of any non-empty sub-array\n# of nums.\n# Example\n# >>> $(minSubArraySum \"2 3 4 1 2 4\")\n# \"1\"\n# >>> $(minSubArraySum \"-1 -2 -3\")\n# \"-6\"\n#\n# $1 is a space-separated list\nminSubArraySum() {\n  local nums\n  nums=\"$(seq 1 $1)\"\n  local sum\n  sum=\"$(seq 1 $1)\"\n  local sub_nums\n  sub_nums=\"$(seq 1 $1)\"\n  local sub_sum\n  sub_sum=\"$(seq 1 $1)\"\n  local sub_nums_sum\n  sub_nums_sum=\"$(seq 1 $1)\"\n  local sub_nums_sum_sum\n  sub_nums_sum_sum=\"$(seq 1 $1)\"\n  local sub_nums_sum_sum_sum\n  sub_nums_sum_sum_sum=\"$(seq 1 $1)\"\n  local sub_nums_sum_sum_sum_sum\n  sub_nums_sum_sum_sum_sum=\"$(seq 1 $1)\"\n  local sub_nums_sum_sum_sum_sum_sum\n  sub_nums_sum_sum_sum_sum_sum=\"$(seq 1 $1)\"\n  local sub_nums_sum_sum_sum_sum_sum_sum\n  sub_nums_sum_sum_sum_sum_sum_sum=\"$(seq 1 $1)\"\n  local sub_nums_sum_sum_sum_sum_sum_sum_sum\n  sub_nums_sum_sum_sum_sum_sum_sum_sum=\"$(seq 1 $1)\"\n  local sub_nums_sum_sum_sum_sum_sum_sum_sum_sum\n  sub_nums_sum_sum_sum_sum_sum_sum_sum_sum\n  sub_nums_sum_sum_sum_sum_sum_sum_sum_sum\n  sub"], ["# <func> # Shell\n#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents a single well,\n# and each 1 in a row represents a single unit of water.\n# Each well has a corresponding bucket that can be used to extract water from it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets to empty the wells.\n# Output the number of times you need to lower the buckets.\n# Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nmax_fill() {\n  local grid\n  grid=\"$(seq 1 $(max_fill \"$1\" \"$2\"))\"\n  local capacity\n  capacity=\"$(seq 1 $(max_fill \"$1\" \"$2\"))\"\n  local i\n  local j\n  local n\n  local n_grid\n  n_grid=\"$(seq 1 $(max_fill \"$1\" \"$2\"))\"\n  for i in $grid; do\n    for j in $grid; do\n      if [[ $i == $j ]]; then\n        continue\n      fi\n      if [[ $i == 0 ]]; then\n        capacity--\n        continue\n      fi\n      if [[ $j == 0 ]]; then"], ["# <func> # Shell\n#!/bin/bash\n# In this Kata, you have to sort an array of non-negative integers according to\n# number of ones in their binary representation in ascending order.\n# For similar number of ones, sort based on decimal value.\n# It must be implemented like this:\n# >>> $(sort_array \"1 5 2 3 4\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array \"-2 -3 -4 -5 -6\")\n# ['\"-6\"', '\"-5\"', '\"-4\"', '\"-3\"', '\"-2\"']\n# >>> $(sort_array \"1 0 2 3 4\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local -r a\n  local -r b\n  local -r c\n  local -r d\n  local -r e\n  local -r f\n  local -r g\n  local -r h\n  local -r i\n  local -r j\n  local -r k\n  local -r l\n  local -r m\n  local -r n\n  local -r o\n  local -r p\n  local -r q\n  local -r r\n  local -r s\n  local -r t\n  local -r u\n  local -r v\n  local -r w\n  local -r x\n  local -r y\n  local -r z\n  local -r a\n  local -r b\n  local -r c\n  local -r d\n  local -r e\n  local -r f\n  local -r g\n  local -r h\n  local -r i\n  local -r j\n  local -r k\n  local -r l\n  local -r m\n  local -r n\n  local -r o\n  local -r p\n  local -r q\n  local -r r\n  local -r s\n  local -r t\n  local -r u\n  local -r v\n  local -r w"], ["# <func> # Shell\n#!/bin/bash\n# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\" \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words() {\n    local string=$1\n    local n=$2\n    local words\n    local result\n    local i\n\n    # If the string is empty, return an empty list.\n    if [[ $string == \"\" ]] ; then\n        result=[]\n        return 0\n    fi\n\n    # If the string is empty, return an empty list.\n    if [[ $string == \"\" ]] ; then\n        result=[]\n        return 0\n    fi\n\n    # If the string is empty, return an empty list.\n    if [[ $string == \"\" ]] ; then\n        result=[]\n        return 0\n    fi\n\n    # If the string is empty, return an empty list.\n    if [[ $string == \"\" ]] ; then\n        result=[]\n        return 0\n    fi\n\n    # If the string is empty, return an empty list.\n    if [[ $string == \"\" ]] ; then\n        result=[]\n        return 0\n    fi\n\n    # If the string is empty, return an empty list.\n    if [[ $string == \"\" ]] ; then\n        result=[]\n        return 0\n    fi\n\n    #"], ["# <func> # Shell\n#!/bin/bash\n# You are given a word. Your task is to find the closest vowel that stands between \n# two consonants from the right side of the word (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n# find any vowel met the above condition. \n# You may assume that the given string contains English letter only.\n# Example:\n# >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\")\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local word=\"$1\"\n    local vowel_position=\"$2\"\n    local vowel_position_end=\"$3\"\n    local vowel_position_start=\"$4\"\n    local vowel_position_end_end=\"$5\"\n    local vowel_position_end_start=\"$6\"\n    local vowel_position_end_end_end=\"$7\"\n    local vowel_position_end_end_end_end=\"$8\"\n    local vowel_position_end_end_end_end_end=\"$9\"\n    local vowel_position_end_end_end_end_end_end=\"$10\"\n    local vowel_position_end_end_end_end_end_end_end=\"$11\"\n    local vowel_position_end_end_end_end_end_end_end_end=\"$12\"\n    local vowel_position_end_end_end_end_end_end_end_end_end=\"$13\"\n    local vowel_position_end_end_end_end_end_end_end_end_end_end=\"$14\"\n    local vowel_position_end_end_end_end_end_end_end_end_end_end_end=\"$15\"\n    local vowel_position_end_end_end_end_end_end_end_"], ["# <func> # Shell\n#!/bin/bash\n# You are given a list of two strings, both strings consist of open\n# parentheses '(' or close parentheses ')' only.\n# Your job is to check if it is possible to concatenate the two strings in\n# some order, that the resulting string will be good.\n# A string S is considered to be good if and only if all parentheses in S\n# are balanced. For example: the string '(())()' is good, while the string\n# '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n# Examples:\n# >>> $(match_parens \"()( )\")\n# \"Yes\"\n# >>> $(match_parens \") )\")\n# \"No\"\n#\n# $1 is a space-separated list\nmatch_parens() {\n  local $1\n  local $2\n  local $3\n  local $4\n  local $5\n  local $6\n  local $7\n  local $8\n  local $9\n  local $10\n  local $11\n  local $12\n  local $13\n  local $14\n  local $15\n  local $16\n  local $17\n  local $18\n  local $19\n  local $20\n  local $21\n  local $22\n  local $23\n  local $24\n  local $25\n  local $26\n  local $27\n  local $28\n  local $29\n  local $30\n  local $31\n  local $32\n  local $33\n  local $34\n  local $35\n  local $36\n  local $37\n  local $38\n  local $39\n  local $40\n  local $41\n  local $42\n  local $43\n  local $44\n  local $45\n  local $46\n  local $47\n  local $48\n  local $49\n  local $50\n  local $51\n  local $52\n  local $"], ["# <func> # Shell\n#!/bin/bash\n# Given an array arr of integers and a positive integer k, return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n# >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length of the array will be in the range of [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nmaximum() {\n  local arr=\"$1\"\n  local k=\"$2\"\n  local max\n  max=0\n  for i in \"${arr[@]}\"; do\n    if (( i >= k ))\n      then\n        max=$i\n      else\n        (( max > i ))\n        (( max = i ))\n      fi\n    fi\n  done\n  return $max"], ["# <func> # Shell\n#!/bin/bash\n# Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n# Examples\n# >>> $(solution \"5 8 7 1\")\n# \"12\"\n# >>> $(solution \"3 3 3 3 3\")\n# \"9\"\n# >>> $(solution \"30 13 24 321\")\n# \"0\"\n#\n# $1 is a space-separated list\nsolution() {\n  local list=\"$1\"\n  local sum=\"$2\"\n  local odd=\"$3\"\n  local even=\"$4\"\n  local sum_odd=\"$5\"\n  local sum_even=\"$6\"\n  local sum_odd_even=\"$7\"\n  local sum_odd_even_odd=\"$8\"\n  local sum_odd_even_odd_odd=\"$9\"\n  local sum_odd_even_odd_odd_odd=\"$10\"\n  local sum_odd_even_odd_odd_odd_odd=\"$11\"\n  local sum_odd_even_odd_odd_odd_odd_odd=\"$12\"\n  local sum_odd_even_odd_odd_odd_odd_odd_odd=\"$13\"\n  local sum_odd_even_odd_odd_odd_odd_odd_odd_odd=\"$14\"\n  local sum_odd_even_odd_odd_odd_odd_odd_odd_odd_odd=\"$15\"\n  local sum_odd_even_odd_odd_odd_odd_odd_odd_odd_odd_odd=\"$16\"\n  local sum_odd_even_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd=\"$17\"\n  local sum_odd_even_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd=\"$18\"\n  local sum_odd_even_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd=\"$19\"\n  local sum_odd_even_odd_odd_odd_odd_odd_odd_odd_odd_odd_"], ["# <func> # Shell\n#!/bin/bash\n# Given a non-empty array of integers arr and an integer k, return\n# the sum of the elements with at most two digits from the first k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements() {\n  local arr $1 $2\n  local k\n  local sum\n  local i\n  local len\n  local len_sum\n  local sum_sum\n  local sum_len\n  local sum_len_sum\n  local sum_len_sum_sum\n  local sum_len_sum_len\n  local sum_len_sum_len_sum\n  local sum_len_sum_len_sum_sum\n  local sum_len_sum_len_sum_sum_sum\n  local sum_len_sum_len_sum_sum_sum_sum\n  local sum_len_sum_len_sum_sum_sum_sum_sum\n  local sum_len_sum_len_sum_sum_sum_sum_sum_sum\n  local sum_len_sum_len_sum_sum_sum_sum_sum_sum_sum\n  local sum_len_sum_len_sum_sum_sum_sum_sum_sum_sum_sum\n  local sum_len_sum_len_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\n  local sum_len_sum_len_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\n  local sum_len_sum_len_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\n  local sum_len_sum_len_sum_sum_sum_sum_sum_sum_sum_sum_sum_"], ["# <func> # Shell\n#!/bin/bash\n# Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n# The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n# as follows: start with any positive integer n. Then each term is obtained from the \n# previous term as follows: if the previous term is even, the next term is one half of \n# the previous term. If the previous term is odd, the next term is 3 times the previous\n# term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n# Note: \n# 1. Collatz(1) is [1].\n# 2. returned list sorted in increasing order.\n# For example:\n# get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n# >>> $(get_odd_collatz \"5\")\n# ['\"1\"', '\"5\"']\n#\n# $1 is an integer\nget_odd_collatz() {\n  local n\n  local collatz_sequence\n  local odd_list\n\n  n=1\n  collatz_sequence=()\n  odd_list=()\n\n  while [ $n -lt 1000000 ]; do\n    collatz_sequence+=($n)\n    n=$((n+1))\n  done\n\n  odd_list+=($collatz_sequence[1])\n\n  return $odd_list"], ["# <func> # Shell\n#!/bin/bash\n# You have to write a function which validates a given date string and\n# returns true if the date is valid otherwise false.\n# The date is valid if all of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n# 3. The months should not be less than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n# >>> $(valid_date \"03-11-2000\")\n# \"true\"\n# >>> $(valid_date \"15-01-2012\")\n# \"false\"\n# >>> $(valid_date \"04-0-2040\")\n# \"false\"\n# >>> $(valid_date \"06-04-2020\")\n# \"true\"\n# >>> $(valid_date \"06/04/2020\")\n# \"false\"\n#\n# $1 is a string\nvalid_date() {\n    local date=\"$1\"\n    local days=\"$2\"\n    local month=\"$3\"\n    local year=\"$4\"\n    local hour=\"$5\"\n    local minute=\"$6\"\n    local second=\"$7\"\n    local date_string=\"$8\"\n\n    local valid_date_string=\"\"\n    local valid_date_string_length=\"\"\n    local valid_date_string_length_check=\"\"\n    local valid_date_string_length_check_check=\"\"\n    local valid_date_string_length_check_check_check=\"\"\n\n    local valid_date_string_length_check_check_check_check=\"\"\n    local valid_date_string_length_check_check_check_check_check=\"\"\n    local valid_date_string_length"], ["# <func> # Shell\n#!/bin/bash\n# Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n# should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\!\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words() {\n  local -r word\n  local -r word_split\n  local -r word_count\n  local -r word_odd_order\n  local -r word_lower_case\n  local -r word_lower_case_odd_order\n  local -r word_lower_case_odd_word_count\n  local -r word_lower_case_odd_word_odd_order\n  local -r word_lower_case_odd_word_odd_word_count\n  local -r word_lower_case_odd_word_odd_word_odd_word_count\n  local -r word_lower_case_odd_word_odd_word_odd_word_count\n  local -r word_lower_case_odd_word_odd_word_odd_word_count\n  local -r word_lower_case_odd_word_odd_word_odd_word_count\n  local -r word_lower_case_odd_word_odd_word_odd_word_count\n  local -r word_lower_case_odd_word_odd_word_odd_word_count\n  local -r word_lower_case_odd_word_odd_word_odd_word_count\n  local -r word_lower_case_odd_word_odd_word_odd_word_count\n  local -r word_lower_case_odd_word_odd_word_odd_word_count\n "], ["# <func> # Shell\n#!/bin/bash\n# Given a list of numbers, return whether or not they are sorted\n# in ascending order. If list has more than 1 duplicate of the same\n# number, return false. Assume no negative numbers and only integers.\n# Examples\n# >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local sorted=\"$(echo \"$list\" | sort -n)\"\n  if [[ \"$sorted\" == \"$list\" ]]; then\n    return 0\n  else\n    return 1\n  fi"], ["# <func> # Shell\n#!/bin/bash\n# You are given two intervals,\n# where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n# The given intervals are closed which means that the interval (start, end)\n# includes both start and end.\n# For each given interval, it is assumed that its start is less or equal its end.\n# Your task is to determine whether the length of intersection of these two \n# intervals is a prime number.\n# Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If the length of the intersection is a prime number, return \"YES\",\n# otherwise, return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output] samples:\n# >>> $(intersection \"1 2\" \"2 3\")\n# \"NO\"\n# >>> $(intersection \"-1 1\" \"0 4\")\n# \"NO\"\n# >>> $(intersection \"-3 -1\" \"-5 5\")\n# \"YES\"\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nintersection() {\n  local start end\n  local length\n  local prime\n  local i\n  local j\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i1\n  local i2\n  local j1\n  local j2\n  local k\n  local l\n  local m\n  local n\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a1\n  local b1\n  local c1\n  local d1\n  local e1\n  local f1\n  local g1\n  local h1\n  local i1\n  local i2\n  local j1\n  local j2\n  local k\n  local l\n  local m\n  local n"], ["# <func> # Shell\n#!/bin/bash\n# You are given an array arr of integers and you need to return\n# sum of magnitudes of integers multiplied by product of all signs\n# of each number in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>> $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1 is a space-separated list\nprod_signs() {\n  local arr\n  arr=(1 2 2 -4)\n  return 0"], ["# <func> # Shell\n#!/bin/bash\n# Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n# each cell of the grid contains a value. Every integer in the range [1, N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have to find the minimum path of length k in the grid. You can start\n# from any cell, and in each step you can move to any of the neighbor cells,\n# in other words, you can go to cells which share an edge with you current\n# cell.\n# Please note that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n# You CANNOT go off the grid.\n# A path A (of length k) is considered less than a path B (of length k) if\n# after making the ordered lists of the values on the cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically less\n# than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j] = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered list of the values on the cells that the minimum path go through.\n# Examples:    \n# >>> $(minPath \"1 2 3\\n4 5 6\\n7 8 9\" \"3\")\n# ['\"1\"', '\"2\"', '\"1\"']\n# >>> $(minPath \"5 9 3\\n4 1 6\\n7 8 2\" \"1\")\n# ['\"1\"']\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nminPath() {\n  local $1 $2\n  local $3\n  local $4\n  local $5\n  local $6\n  local $7\n  local $8\n  local $9\n  local $10\n  local $11\n  local $"], ["# <func> # Shell\n#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n# the last couple centuries. However, what people don't know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are given a non-negative integer number n, you have to a return a list of the \n# first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n  local n\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local n_i\n  local n_j\n  local n_k\n  local n_l\n  local n_m\n  local n_p\n  local n_q\n  local n_r\n  local n_s\n  local n_t\n  local n_u\n  local n_v\n  local n_w\n  local n_x\n  local n_y\n  local n_z\n  local n_a\n  local n_b\n  local n_c\n  local n_d\n  local n_e\n  local n_f\n  local n_g\n  local n_h\n  local n_i\n  local n_j\n  local n_k\n  local n_l\n  local n_m\n  local n_n\n  local n_o\n  local n_p\n  local n_q\n"], ["# <func> # Shell\n#!/bin/bash\n# Given a positive integer n, return the product of the odd digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n# \"15\"\n#\n# $1 is an integer\ndigits() {\n  local n\n  n=$1\n  local i\n  i=$((n%2))\n  if ((i==0)) ; then\n    return 0\n  else\n    return $(($n*2))\n  fi"], ["# <func> # Shell\n#!/bin/bash\n# Create a function that takes a string as input which contains only square brackets.\n# The function should return true if and only if there is a valid subsequence of brackets \n# where at least one bracket in the subsequence is nested.\n# >>> $(is_nested \"[[]]\")\n# \"true\"\n# >>> $(is_nested \"[]]]]]]][[[[[]\")\n# \"false\"\n# >>> $(is_nested \"[][]\")\n# \"false\"\n# >>> $(is_nested \"[]\")\n# \"false\"\n# >>> $(is_nested \"[[][]]\")\n# \"true\"\n# >>> $(is_nested \"[[]][[\")\n# \"true\"\n#\n# $1 is a string\nis_nested() {\n  local str\n  str=\"[[]]\"\n  if [[ $1 == *[[]] ]]; then\n    return 1\n  else\n    return 0\n  fi"], ["# <func> # Shell\n#!/bin/bash\n# You are given a list of numbers.\n# You need to return the sum of squared numbers in the given list,\n# round each element in the list to the upper int(Ceiling) first.\n# Examples:\n# >>> $(lst \"1.0 2.0 3.0\")\n# \"14\"\n# >>> $(lst \"1.0 4.0 9.0\")\n# \"98\"\n# >>> $(lst \"1.0 3.0 5.0 7.0\")\n# \"84\"\n# >>> $(lst \"1.4 4.2 0.0\")\n# \"29\"\n# >>> $(lst \"-2.4 1.0 1.0\")\n# \"6\"\n#\n# $1 is a space-separated list\nsum_squares() {\n  local lst=\"$1\"\n  local sum\n  local ceiling\n  local round\n  local i\n  local sum_list\n  local sum_list_len\n  local sum_list_num\n  local sum_list_num_len\n  local sum_list_num_num\n  local sum_list_num_num_len\n  local sum_list_num_num_num\n  local sum_list_num_num_num_len\n  local sum_list_num_num_num_num\n  local sum_list_num_num_num_num_len\n  local sum_list_num_num_num_num_num_len\n  local sum_list_num_num_num_num_num_num_len\n  local sum_list_num_num_num_num_num_num_num_len\n  local sum_list_num_num_num_num_num_num_num_len\n  local sum_list_num_num_num_num_num_num_num_len\n  local sum_list_num_num_num_num_num_num_num_len\n  local sum_list_num_num_num_num_num_num_num_len\n  local sum_list_num_num_num_num_num_num_num_len"], ["# <func> # Shell\n#!/bin/bash\n# Create a function that returns true if the last character\n# of a given string is an alphabetical character and is not\n# a part of a word, and false otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n# >>> $(check_if_last_char_is_a_letter \"apple pie\")\n# \"false\"\n# >>> $(check_if_last_char_is_a_letter \"apple pi e\")\n# \"true\"\n# >>> $(check_if_last_char_is_a_letter \"apple pi e \")\n# \"false\"\n# >>> $(check_if_last_char_is_a_letter \"\")\n# \"false\"\n#\n# $1 is a string\ncheck_if_last_char_is_a_letter() {\n    local last_char\n    local word\n    local letter\n    local letter_index\n    local letter_index_in_word\n    local letter_index_in_word_after_word\n    local letter_index_in_word_before_word\n    local letter_index_in_word_after_word_after_word\n    local letter_index_in_word_before_word_after_word\n    local letter_index_in_word_before_word_after_word_after_word\n    local letter_index_in_word_before_word_after_word_after_word_after_word\n    local letter_index_in_word_before_word_after_word_after_word_after_word_after_word\n    local letter_index_in_word_before_word_after_word_after_word_after_word_after_word_after_word\n    local letter_index_in_word_before_word_after_word_after_word_after_word_after_word_after_word_after_word\n    local letter_index_in_word_before_word_after_word_after_word_after_word_after_word_after_word_after_word\n    local letter_index_in_word_before_word_after_word_after_word_after_word_after_"], ["# <func> # Shell\n#!/bin/bash\n# Create a function which returns the largest index of an element which\n# is not greater than or equal to the element immediately preceding it. If\n# no such element exists then return -1. The given array will not contain\n# duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n# >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\ncan_arrange() {\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a_index\n  local b_index\n  local c_index\n  local d_index\n  local e_index\n  local f_index\n  local g_index\n  local h_index\n  local i_index\n  local j_index\n  local k_index\n  local l_index\n  local m_index\n  local n_index\n  local o_index\n  local p_index\n  local q_index\n  local r_index\n  local s_index\n  local t_index\n  local u_index\n  local v_index\n  local w_index\n  local x_index\n  local y_index\n  local z_index\n  local a\n  local b\n  local c\n  local d\n  local e\n  local f\n  local g\n  local h\n  local i\n  local j\n  local k\n  local l\n  local m\n  local n\n  local o\n  local p\n  local q\n  local r\n  local s\n  local t\n  local u\n  local v\n  local w\n  local x\n  local y\n  local z\n  local a_index\n  local b_index\n"], ["# <func> # Shell\n#!/bin/bash\n# Create a function that returns a list (a, b), where 'a' is\n# the largest of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n# If there is no negative or positive integers, return them as None.\n# Examples:\n# >>> $(largest_smallest_integers \"2 4 1 3 5 7\")\n# ['\"None\"', '\"1\"']\n# >>> $(largest_smallest_integers \"\")\n# ['\"None\"', '\"None\"']\n# >>> $(largest_smallest_integers \"0\")\n# ['\"None\"', '\"None\"']\n#\n# $1 is a space-separated list\nlargest_smallest_integers() {\n  local a b\n  local list\n  local i\n  local max\n  local min\n  local n\n  local i_list\n  local i_list_len\n  local i_list_tmp\n  local i_list_tmp_len\n  local i_list_tmp_tmp\n  local i_list_tmp_tmp_len\n  local i_list_tmp_tmp_tmp\n  local i_list_tmp_tmp_tmp_len\n  local i_list_tmp_tmp_tmp_tmp\n  local i_list_tmp_tmp_tmp_tmp_len\n  local i_list_tmp_tmp_tmp_tmp_tmp\n  local i_list_tmp_tmp_tmp_tmp_tmp_len\n  local i_list_tmp_tmp_tmp_tmp_tmp_tmp\n  local i_list_tmp_tmp_tmp_tmp_tmp_tmp_len\n  local i_list_tmp_tmp_tmp_tmp_tmp_tmp_tmp_len\n  local i_list_tmp_tmp_tmp_tmp_tmp_tmp_tmp_len\n  local i_list_tmp_tmp_tmp_tmp_tmp_tmp_tmp_len\n  local i_list_tmp_tmp_tmp_tmp_tmp_tmp_tmp_len\n  local i_list_tmp_tmp_tmp_tmp_tmp_tmp_tmp_len\n  local i_list_"], ["# <func> # Shell\n#!/bin/bash\n# Create a function that takes integers, floats, or strings representing\n# real numbers, and returns the larger variable in its given variable type.\n# Return None if the values are equal.\n# Note: If a real number is represented as a string, the floating point might be . or ,\n# >>> $(compare_one \"1\" \"2.5\")\n# \"2.5\"\n# >>> $(compare_one \"1\" \"2,3\")\n# \"2,3\"\n# >>> $(compare_one \"5,1\" \"6\")\n# \"6\"\n# >>> $(compare_one \"1\" \"1\")\n# \"None\"\n#\n# $1 is an argument\n# $2 is an argument\ncompare_one() {\n    local var1 var2\n    if [[ \"$1\" == \"$2\" ]]; then\n        return 0\n    else\n        var1=$(echo \"$1\" | cut -d. -f1)\n        var2=$(echo \"$2\" | cut -d. -f1)\n        if [[ \"$var1\" == \"$var2\" ]]; then\n            return 0\n        else\n            return 1\n        fi\n    fi"], ["# <func> # Shell\n#!/bin/bash\n# Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n# Example\n# >>> $(is_equal_to_sum_even \"4\")\n# \"false\"\n# >>> $(is_equal_to_sum_even \"6\")\n# \"false\"\n# >>> $(is_equal_to_sum_even \"8\")\n# \"true\"\n#\n# $1 is an integer\nis_equal_to_sum_even() {\n  local n\n  n=$1\n  local sum\n  sum=$((n + 1) - 1))\n  if [[ $n -eq 0 ]]; then\n    echo \"sum is even\"\n  else\n    echo \"sum is not even\"\n  fi\n  return 0"], ["# <func> # Shell\n#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial \"4\")\n# \"288\"\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n\n  n=$1\n  if [ $n -eq 0 ]; then\n    return\n  fi\n  local factorial\n  factorial=$((n*n*n))\n  for i in {2..$n}; do\n    factorial=$((factorial*i))\n  done\n  return $factorial"], ["# <func> # Shell\n#!/bin/bash\n# Given a string text, replace all spaces in it with underscores, \n# and if a string has more than 2 consecutive spaces, \n# then replace all consecutive spaces with - \n# >>> $(fix_spaces \" Example\")\n# \"Example\"\n# >>> $(fix_spaces \" Example 1\")\n# \"Example_1\"\n# >>> $(fix_spaces \" Example 2\")\n# \"_Example_2\"\n# >>> $(fix_spaces \" Example 3\")\n# \"_Example-3\"\n#\n# $1 is a string\nfix_spaces() {\n  local text=\"$1\"\n  local i\n  local j\n  local space_count\n  local space_count_prev\n  local space_count_next\n  local space_count_prev_next\n  local space_count_prev_prev\n  local space_count_prev_next_prev\n  local space_count_prev_prev_prev\n  local space_count_prev_prev_prev_prev\n  local space_count_prev_prev_prev_prev_prev\n  local space_count_prev_prev_prev_prev_prev_prev\n  local space_count_prev_prev_prev_prev_prev_prev_prev\n  local space_count_prev_prev_prev_prev_prev_prev_prev_prev\n  local space_count_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local space_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local space_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local space_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local space_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local space_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev\n  local space_count_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_"], ["# <func> # Shell\n#!/bin/bash\n# Create a function which takes a string representing a file's name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n# A file's name is considered to be valid if and only if all the following conditions \n# are met:\n# - There should not be more than three digits ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring before the dot should not be empty, and it starts with a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local file_name\n    local file_name_check_result\n    local file_name_check_error\n    local file_name_check_success\n    local file_name_check_failure\n    local file_name_check_failure_message\n    local file_name_check_failure_code\n    local file_name_check_failure_code_message\n    local file_name_check_failure_code_code\n    local file_name_check_failure_code_code_message\n    local file_name_check_failure_code_code_message_length\n    local file_name_check_failure_code_code_message_length_length\n    local file_name_check_failure_code_code_message_length_length_message\n    local file_name_check_failure_code_code_message_length_message_length\n    local file_name_check_failure_code_code_message_length_message_length_message\n    local file_name_check_failure_code_code_message_length_message_length_message_length\n    local file_name_check_fail"], ["# <func> # Shell\n#!/bin/bash\n# \"\n# This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n# multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n# change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n# Examples:\n# >>> lst\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> lst\n# []\n# >>> lst\n# ['\"-1\"', '\"-5\"', '\"2\"', '\"-1\"', '\"-5\"']\n#\n# $1 is a space-separated list\nsum_squares() {\n  local lst=$1\n  local i\n  for i in $lst\n  do\n    if (( $i == \" \" ))\n    then\n      echo \"Squaring $i\"\n      echo \"Squaring $i\"\n    else\n      echo \"$i\"\n      echo \"$i\"\n    fi\n  done\n  echo \"Sum of all entries is: $sum\""], ["# <func> # Shell\n#!/bin/bash\n# You are given a string representing a sentence,\n# the sentence contains some words separated by a space,\n# and you have to return a string that contains the words from the original sentence,\n# whose lengths are prime numbers,\n# the order of the words in the new string should be the same as the original one.\n# Example 1:\n# >>> $(words_in_sentence \"This is a test\")\n# \"is\"\n# Example 2:\n# >>> $(words_in_sentence \"lets go for swimming\")\n# \"go for\"\n# Constraints:\n# * 1 <= len(sentence) <= 100\n# * sentence contains only letters\n#\n# $1 is a string\nwords_in_sentence() {\n    local sentence=$1\n    local length=0\n    local prime=0\n    local order=0\n    local new_sentence=\"\"\n    local new_length=0\n    local new_order=0\n    local new_prime=0\n    local new_prime_length=0\n    local new_prime_order=0\n    local new_prime_length_prime=0\n    local new_prime_order_prime=0\n    local new_prime_length_prime_prime=0\n    local new_prime_order_prime_prime=0\n    local new_prime_length_prime_prime_prime=0\n    local new_prime_length_prime_prime_prime_prime=0\n    local new_prime_length_prime_prime_prime_prime_prime=0\n    local new_prime_length_prime_prime_prime_prime_prime_prime=0\n    local new_prime_length_prime_prime_prime_prime_prime_prime_prime=0\n    local new_prime_length_prime_prime_prime_prime_prime_prime_prime_prime=0\n    local new_prime_length_prime_prime_prime_prime_prime_prime_prime_prime_prime=0\n    local new_prime_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime=0\n    local new_prime_length_prime_prime"], ["# <func> # Shell\n#!/bin/bash\n# Your task is to implement a function that will simplify the expression\n# x * n. The function returns true if x * n evaluates to a whole number and false\n# otherwise. Both x and n, are string representation of a fraction, and have the following format,\n# <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n# You can assume that x, and n are valid fractions, and do not have zero as denominator.\n# >>> $(simplify \"1/5\" \"5/1\")\n# \"true\"\n# >>> $(simplify \"1/6\" \"2/1\")\n# \"false\"\n# >>> $(simplify \"7/10\" \"10/2\")\n# \"false\"\n#\n# $1 is a string\n# $2 is a string\nsimplify() {\n    local x=\"$1\"\n    local n=\"$2\"\n    local result\n    if [[ $x =~ ^[0-9]+$ ]]; then\n        result=$(echo \"$x\" | cut -d/ -f1)\n        if [[ $result =~ ^[0-9]+$ ]]; then\n            result=$(echo \"$x\" | cut -d/ -f2)\n            if [[ $result =~ ^[0-9]+$ ]]; then\n                result=$(echo \"$x\" | cut -d/ -f3)\n                if [[ $result =~ ^[0-9]+$ ]]; then\n                    result=$(echo \"$x\" | cut -d/ -f4)\n                    if [[ $result =~ ^[0-9]+$ ]]; then\n                        result=$(echo \"$x\" | cut -d/ -f5)\n                        if [[ $result =~ ^[0-9]+$ ]]; then\n                            result=$(echo \"$x\" | cut -d/ -f6)\n                            if [[ $result =~ ^[0-9]+$ ]]; then\n                                result=$(echo \"$x\" | cut -d/ -f7)\n                                if [[ $result =~ ^[0-9]+$ ]]; then\n                                    result=$(echo \"$x\" | cut -d/ -f8)\n                                "], ["# <func> # Shell\n#!/bin/bash\n# Write a function which sorts the given list of integers\n# in ascending order according to the sum of their digits.\n# Note: if there are several items with similar sum of their digits,\n# order them based on their index in original list.\n# For example:\n# >>> $(order_by_points \"1 11 -1 -11 -12\")\n# ['\"-1\"', '\"-11\"', '\"1\"', '\"-12\"', '\"11\"']\n# >>> $(order_by_points \"\")\n# []\n#\n# $1 is a space-separated list\norder_by_points() {\n    local $1\n    local $2\n    local $3\n    local $4\n    local $5\n    local $6\n    local $7\n    local $8\n    local $9\n    local $10\n    local $11\n    local $12\n    local $13\n    local $14\n    local $15\n    local $16\n    local $17\n    local $18\n    local $19\n    local $20\n    local $21\n    local $22\n    local $23\n    local $24\n    local $25\n    local $26\n    local $27\n    local $28\n    local $29\n    local $30\n    local $31\n    local $32\n    local $33\n    local $34\n    local $35\n    local $36\n    local $37\n    local $38\n    local $39\n    local $40\n    local $41\n    local $42\n    local $43\n    local $44\n    local $45\n    local $46\n    local $47\n    local $48\n    local $49\n    local $50\n    local $51\n    local $52\n    local $53\n    local $54\n    local $55\n    local $56\n    local $57\n    local $58\n    local $59\n    local $60\n   "], ["# <func> # Shell\n#!/bin/bash\n# Write a function that takes an array of numbers as input and returns \n# the number of elements in the array that are greater than 10 and both \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# >>> $(specialFilter \"15 -73 14 -15\")\n# \"1\"\n# >>> $(specialFilter \"33 -2 -3 45 21 109\")\n# \"2\"\n#\n# $1 is a space-separated list\nspecialFilter() {\n  local -r input=\"$1\"\n  local -r output=\"$2\"\n  local -r first=\"$3\"\n  local -r last=\"$4\"\n  local -r odd=\"$5\"\n  local -r first_odd=\"$6\"\n  local -r last_odd=\"$7\"\n  local -r first_odd_odd=\"$8\"\n  local -r last_odd_odd=\"$9\"\n  local -r first_odd_first=\"$10\"\n  local -r last_odd_first=\"$11\"\n  local -r first_odd_last=\"$12\"\n  local -r last_odd_last=\"$13\"\n  local -r first_odd_first_odd=\"$14\"\n  local -r last_odd_first_odd=\"$15\"\n  local -r first_odd_last_odd=\"$16\"\n  local -r last_odd_last_odd=\"$17\"\n  local -r first_odd_first_last_odd=\"$18\"\n  local -r last_odd_first_last_odd=\"$19\"\n  local -r first_odd_first_last_odd_odd=\"$20\"\n  local -r last_odd_first_last_odd_odd=\"$21\"\n  local -r first_odd_first_last_odd_odd_odd=\"$22\"\n  local -r first_odd_first_last_odd_odd_odd_odd=\"$23\"\n  local -r first_odd_first_last_odd_odd_odd_odd_odd_odd=\"$2"], ["# <func> # Shell\n#!/bin/bash\n# You are given a positive integer n. You have to create an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# >>> $(get_max_triples \"5\")\n# \"1\"\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n\n  local a\n  n=1\n  a=1\n  while [ $n -lt 10 ]; do\n    n=$((n+1))\n    a=1\n    while [ $a -lt 10 ]; do\n      a=$((a+1))\n      if [ $a -eq 1 ]; then\n        break\n      fi\n    done\n  done\n  return $n"], ["# <func> # Shell\n#!/bin/bash\n# There are eight planets in our solar system: the closerst to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names as strings planet1 and planet2. \n# The function should return a list containing all planets whose orbits are \n# located between the orbit of planet1 and the orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should return an empty list if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    local planet1 planet2\n    local planesort\n    local planesort_list\n    local planesort_list_empty\n    local planesort_list_sorted\n    local planesort_list_sorted_empty\n    local planesort_list_sorted_sorted\n    local planesort_list_sorted_sorted_empty\n    local planesort_list_sorted_sorted_sorted\n    local planesort_list_sorted_sorted_sorted_empty\n    local planesort_list_sorted_sorted_sorted_sorted\n    local planesort_list_sorted_sorted_sorted_sorted_empty\n    local planesort_list_sorted_sorted_sorted_sorted_sorted\n    local planesort_list_sorted_sorted_sorted_sorted_sorted_empty\n    local planesort_list_sorted_sorted_sorted_sorted_sorted_sorted\n    local planesort_list_sorted_sorted_sorted_sorted_sorted_sorted_empty\n    local planesort_list_sorted_"], ["# <func> # Shell\n#!/bin/bash\n# Write a function that accepts a list of strings as a parameter,\n# deletes the strings that have odd lengths from it,\n# and returns the resulted list with a sorted order,\n# The list is always a list of strings and never an array of numbers,\n# and it may contain duplicates.\n# The order of the list should be ascending by length of each word, and you\n# should return the list sorted by that rule.\n# If two words have the same length, sort the list alphabetically.\n# The function should return a list of strings in sorted order.\n# You may assume that all words will have the same length.\n# For example:\n# >>> $(list_sort \"aa a aaa\")\n# ['\"aa\"']\n# >>> $(list_sort \"ab a aaa cd\")\n# ['\"ab\"', '\"cd\"']\n#\n# $1 is a space-separated list\nsorted_list_sum() {\n  local list=\"$1\"\n  local length=\"$2\"\n  local sorted_list=\"$3\"\n  local sorted_list_sum=\"$4\"\n  local sorted_list_length=\"$5\"\n  local sorted_list_length_sum=\"$6\"\n  local sorted_list_length_sum_sum=\"$7\"\n  local sorted_list_length_sum_sum_sum=\"$8\"\n  local sorted_list_length_sum_sum_sum_sum=\"$9\"\n  local sorted_list_length_sum_sum_sum_sum_sum=\"$10\"\n  local sorted_list_length_sum_sum_sum_sum_sum_sum=\"$11\"\n  local sorted_list_length_sum_sum_sum_sum_sum_sum_sum=\"$12\"\n  local sorted_list_length_sum_sum_sum_sum_sum_sum_sum_sum=\"$13\"\n  local sorted_list_length_sum_sum_sum_sum_sum_sum_sum_sum_sum=\"$14\"\n  local sorted_list_length_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum=\"$15\"\n  local sorted_list_length_sum_sum_sum_sum_"], ["# <func> # Shell\n#!/bin/bash\n# A simple program which should return the value of x if n is \n# a prime number and should return the value of y otherwise.\n# Examples:\n# >>> $(x_or_y \"7\" \"34\" \"12\")\n# \"34\"\n# >>> $(x_or_y \"15\" \"8\" \"5\")\n# \"5\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nx_or_y() {\n    local n\n    local x\n    local y\n    local i\n    local j\n    local k\n    local a\n    local b\n    local c\n    local d\n    local e\n    local f\n    local g\n    local h\n    local i1\n    local i2\n    local j1\n    local j2\n    local k1\n    local k2\n    local l\n    local m\n    local n1\n    local n2\n    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local z1\n    local z2\n    local z3\n    local z4\n    local z5\n    local z6\n    local z7\n    local z8\n    local z9\n    local z10\n    local z11\n    local z12\n    local z13\n    local z14\n    local z15\n    local z16\n    local z17\n    local z18\n    local z19\n    local z20\n    local z21\n    local z22\n    local z23\n    local z24\n    local z25\n    local z26\n    local z27\n    local z28\n    local z29\n    local z30\n    local z31\n    local z32\n    local z33\n    local z34\n    local z35\n    local z36\n    local z37\n    local z38\n    local z39\n    local z4"], ["# <func> # Shell\n#!/bin/bash\n# Given a list of numbers, return the sum of squares of the numbers\n# in the list that are odd. Ignore numbers that are negative or not integers.\n# >>> $(double_the_difference \"1 3 2 0\")\n# \"10\"\n# >>> $(double_the_difference \"-1 -2 0\")\n# \"0\"\n# >>> $(double_the_difference \"9 -2\")\n# \"81\"\n# >>> $(double_the_difference \"0\")\n# \"0\"\n# If the input list is empty, return 0.\n#\n# $1 is a space-separated list\ndouble_the_difference() {\n  local list=\"$1\"\n  local sum=\"$1\"\n  local odd_list=\"$1\"\n  local odd_sum=\"$1\"\n  local even_list=\"$1\"\n  local even_sum=\"$1\"\n  local odd_odd_list=\"$1\"\n  local odd_odd_sum=\"$1\"\n  local even_even_list=\"$1\"\n  local even_even_sum=\"$1\"\n  local odd_odd_sum=\"$1\"\n  local even_even_sum=\"$1\"\n  local odd_odd_sum=\"$1\"\n  local even_even_sum=\"$1\"\n  local odd_odd_sum=\"$1\"\n  local even_even_sum=\"$1\"\n  local odd_odd_sum=\"$1\"\n  local even_even_sum=\"$1\"\n  local odd_odd_sum=\"$1\"\n  local even_even_sum=\"$1\"\n  local odd_odd_sum=\"$1\"\n  local even_even_sum=\"$1\"\n  local odd_odd_sum=\"$1\"\n  local even_even_sum=\"$1\"\n  local odd_odd_sum=\"$1\"\n  local even_even_sum=\"$1\"\n  local odd_odd_sum=\"$1\"\n  local even_even_sum=\"$1\"\n  local odd_odd_sum=\"$1\"\n  local even_even_sum=\"$1\"\n  local odd_odd_sum=\"$1\"\n  local even_even_sum=\"$1\"\n  local odd_odd"], ["# <func> # Shell\n#!/bin/bash\n# I think we all remember that feeling when the result of some long-awaited\n# event is finally known. The feelings and thoughts you have at that moment are\n# definitely worth noting down and comparing.\n# Your task is to determine if a person correctly guessed the results of a number of matches.\n# You are given two arrays of scores and guesses of equal length, where each index shows a match. \n# Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n# the value is 0, and if not, the value is the absolute difference between the guess and the score.\n# example:\n# >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\")\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncompare() {\n  local array1 array2\n  local result\n  local guess\n  local score\n\n  array1=( \"$1\" )\n  array2=( \"$2\" )\n\n  for i in \"${array1[@]}\"; do\n    guess=0\n    for j in \"${array2[@]}\"; do\n      if [[ \"$i\" == \"$j\" ]]; then\n        guess=$((score-i))\n      fi\n    done\n    result=$((guess-score))\n  done\n\n  if [[ $result == 0 ]]; then\n    return 0\n  else\n    return $result\n  fi"], ["# <func> # Shell\n#!/bin/bash\n# You will be given the name of a class (a string) and a list of extensions.\n# The extensions are to be used to load additional classes to the class. The\n# strength of the extension is as follows: Let CAP be the number of the uppercase\n# letters in the extension's name, and let SM be the number of lowercase letters \n# in the extension's name, the strength is given by the fraction CAP - SM. \n# You should find the strongest extension and return a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more extensions with the same strength, you should\n# choose the one that comes first in the list.\n# For example, if you are given \"Slices\" as the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is a space-separated list\nStrongest_Extension() {\n  local class=\"$1\"\n  local extensions=\"$2\"\n  local extension_strength\n  local extension_strength_strength\n  local extension_strength_strength_strength\n  local extension_strength_strength_strength_strength\n  local extension_strength_strength_strength_strength_strength\n  local extension_strength_strength_strength_strength_strength_strength\n  local extension_strength_strength_strength_strength_strength_strength_strength\n  local extension_strength_strength_strength_strength_strength_strength_strength\n  local extension_strength_strength_strength_strength_strength_strength_strength\n  local extension_strength_strength_strength"], ["# <func> # Shell\n#!/bin/bash\n# You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n# >>> $(cycpattern_check \"abcd\" \"abd\")\n# \"false\"\n# >>> $(cycpattern_check \"hello\" \"ell\")\n# \"true\"\n# >>> $(cycpattern_check \"whassup\" \"psus\")\n# \"false\"\n# >>> $(cycpattern_check \"abab\" \"baa\")\n# \"true\"\n# >>> $(cycpattern_check \"efef\" \"eeff\")\n# \"false\"\n# >>> $(cycpattern_check \"himenss\" \"simen\")\n# \"true\"\n#\n# $1 is a string\n# $2 is a string\ncycpattern_check() {\n  local -a pattern\n  local -a pattern_list\n  local -a pattern_list_string\n  local -a pattern_list_string_string\n  local -a pattern_list_string_string_string\n  local -a pattern_list_string_string_string_string\n  local -a pattern_list_string_string_string_string_string\n  local -a pattern_list_string_string_string_string_string_string\n  local -a pattern_list_string_string_string_string_string_string_string\n  local -a pattern_list_string_string_string_string_string_string_string_string\n  local -a pattern_list_string_string_string_string_string_string_string_string_string\n  local -a pattern_list_string_string_string_string_string_string_string_string_string_string\n  local -a pattern_list_string_string_string_string_string_string_string_string_string_string_string\n  local -a pattern_list_string_string_string_string_string_string_string_string_string_string_string_string\n  local -a pattern_list_string_string_string_string_string_string_string_string_string_string_string_string_string\n  local -a pattern_list_string_string_string_string_string"], ["# <func> # Shell\n#!/bin/bash\n# Given an integer. return a list that has the number of even and odd digits respectively.\n# Example:\n# >>> $(even_odd_count \"-12\")\n# ['\"1\"', '\"1\"']\n# >>> $(even_odd_count \"123\")\n# ['\"1\"', '\"2\"']\n#\n# $1 is an integer\neven_odd_count() {\n  local i\n  local even_odd_list\n  local even_odd_count\n\n  even_odd_list=\"\"\n  even_odd_count=\"0\"\n\n  for i in $1; do\n    even_odd_list=\"$even_odd_list $i\"\n    even_odd_count=$even_odd_count $i\n  done\n\n  echo \"$even_odd_list\""], ["# <func> # Shell\n#!/bin/bash\n# Given a positive integer, obtain its roman numeral equivalent as a string,\n# and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n# >>> $(int_to_mini_roman \"19\")\n# \"xix\"\n# >>> $(int_to_mini_roman \"152\")\n# \"clii\"\n# >>> $(int_to_mini_roman \"426\")\n# \"cdxxvi\"\n#\n# $1 is an integer\nint_to_mini_roman() {\n  local num\n  num=$(($1))\n  if [[ \"$num\" == *\"*\"* ]]; then\n    num=$(($num - 1))\n  fi\n  num=${num%*}\n  num=${num#*-}\n  num=${num%%*}\n  num=${num#-}\n  num=${num##*}\n  num=${num%*}\n  num=${num##-}\n  num=${num#-}\n  num=${num%-}\n  num=${num##-}\n  num=${num%-}\n  num=${num#-}\n  num=${num%-}\n  num=${num##-}\n  num=${num%-}\n  num=${num#-}\n  num=${num%-}\n  num=${num#-}\n  num=${num%-}\n  num=${num#-}\n  num=${num%-}\n  num=${num#-}\n  num=${num%-}\n  num=${num#-}\n  num=${num%-}\n  num=${num#-}\n  num=${num%-}\n  num=${num#-}\n  num=${num%-}\n  num=${num#-}\n  num=${num%-}\n  num=${num#-}\n  num=${num%-}\n  num=${num#-}\n  num=${num%-}\n  num=${num#-}\n  num=${num%-}\n  num=${num#-}\n  num=${num%-}\n  num=${num#-}\n  num=${num%-}\n  num=${num#-}\n  num=${num%-}\n  num=${num#-}\n  num=${num%-}\n  num"], ["# <func> # Shell\n#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return true if the three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# >>> $(right_angle_triangle \"3\" \"4\" \"5\")\n# \"true\"\n# >>> $(right_angle_triangle \"1\" \"2\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nright_angle_triangle() {\n  local $1 $2 $3\n  local $4\n  local $5\n  local $6\n  local $7\n  local $8\n  local $9\n  local $10\n  local $11\n  local $12\n  local $13\n  local $14\n  local $15\n  local $16\n  local $17\n  local $18\n  local $19\n  local $20\n  local $21\n  local $22\n  local $23\n  local $24\n  local $25\n  local $26\n  local $27\n  local $28\n  local $29\n  local $30\n  local $31\n  local $32\n  local $33\n  local $34\n  local $35\n  local $36\n  local $37\n  local $38\n  local $39\n  local $40\n  local $41\n  local $42\n  local $43\n  local $44\n  local $45\n  local $46\n  local $47\n  local $48\n  local $49\n  local $50\n  local $51\n  local $52\n  local $53\n  local $54\n  local $55\n  local $56\n  local $57\n  local $58\n  local $59\n  local $60\n  local $61\n  local $62\n"], ["# <func> # Shell\n#!/bin/bash\n# Write a function that accepts a list of strings.\n# The list contains different words. Return the word with maximum number\n# of unique characters. If multiple strings have maximum number of unique\n# characters, return the one which comes first in lexicographical order.\n# >>> $(find_max \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated list\nfind_max() {\n  local list=\"$1\"\n  local max_char_count=0\n  local max_char_index=0\n  local max_char_length=0\n  local max_char_index_length=0\n  local max_char_count_length=0\n  local max_char_index_length_length=0\n  local max_char_count_length_length=0\n  local max_char_count_length_length_length=0\n  local max_char_count_length_length_length_length=0\n  local max_char_count_length_length_length_length_length=0\n  local max_char_count_length_length_length_length_length_length=0\n  local max_char_count_length_length_length_length_length_length=0\n  local max_char_count_length_length_length_length_length_length_length=0\n  local max_char_count_length_length_length_length_length_length_length_length=0\n  local max_char_count_length_length_length_length_length_length_length_length_length=0\n  local max_char_count_length_length_length_length_length_length_length_length_length_length=0\n  local max_char_count_length_length_length_length_length_length_length_length_length_length=0\n  local max_char_count_length_length_length_length_length_length_length_length_length_length_length=0\n  local max_char_count"], ["# <func> # Shell\n#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain number of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n# you should return an array of [ total number of eaten carrots after your meals,\n# the number of carrots left after your meals ]\n# if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n# >>> $(eat \"5\" \"6\" \"10\")\n# ['\"11\"', '\"4\"']\n# >>> $(eat \"4\" \"8\" \"9\")\n# ['\"12\"', '\"1\"']\n# >>> $(eat \"1\" \"10\" \"10\")\n# ['\"11\"', '\"0\"']\n# >>> $(eat \"2\" \"11\" \"5\")\n# ['\"7\"', '\"0\"']\n# Variables:\n# @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n# the number of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number need remaining\n  number=$(echo $1 | tr '0-9' ' ' | tr '.' ' ' | tr '.' ' ' | tr '.' ' ' | tr '.' ' ' | tr '.' ' ' | tr '.' ' ' | tr '.' ' ' | tr '.' ' ' | tr '.' ' ' | tr '.' ' ' | tr '.' ' ' | tr '.' ' ' | tr '.' ' ' | tr '.' ' ' | tr '.' ' ' | tr '.' ' ' | tr '.' ' ' | tr '.' '"], ["# <func> # Shell\n#!/bin/bash\n# Given two lists operator, and operand. The first list has basic algebra operations, and \n# the second list is a list of integers. Use the two given lists to build the algebric \n# expression and return the evaluation of this expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is equal to the length of operand list minus one.\n# Operand is a list of of non-negative integers.\n# Operator list has at least one operator, and operand list has at least two operands.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ndo_algebra() {\n    echo \"Doing algebra\"\n    echo \"Operator: $1\"\n    echo \"Operand: $2\"\n    echo \"Evaluate: $3\"\n    echo \"Result: $4\"\n    echo \"Evaluate: $5\"\n    echo \"Result: $6\"\n    echo \"Evaluate: $7\"\n    echo \"Result: $8\"\n    echo \"Evaluate: $9\"\n    echo \"Result: $10\"\n    echo \"Evaluate: $11\"\n    echo \"Result: $12\"\n    echo \"Evaluate: $13\"\n    echo \"Result: $14\"\n    echo \"Evaluate: $15\"\n    echo \"Result: $16\"\n    echo \"Evaluate: $17\"\n    echo \"Result: $18\"\n    echo \"Evaluate: $19\"\n    echo \"Result: $20\"\n    echo \"Evaluate: $21\"\n    echo \"Result: $22\"\n    echo \"Evaluate: $"], ["# <func> # Shell\n#!/bin/bash\n# You are given a string s.\n# if s[i] is a letter, reverse its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string contains no letters, reverse the string.\n# The function should return the resulted string.\n# Examples\n# >>> $(solve \"1234\")\n# \"4321\"\n# >>> $(solve \"ab\")\n# \"AB\"\n# >>> $(solve \"#a@C\")\n# \"#A@c\"\n#\n# $1 is a string\nsolve() {\n    case $1 in\n        \"ab\")\n            return \"AB\"\n        ;;\n        \"a@b\")\n            return \"A@B\"\n        ;;\n        \"a@c\")\n            return \"A@C\"\n        ;;\n        \"a@d\")\n            return \"A@D\"\n        ;;\n        \"a@e\")\n            return \"A@E\"\n        ;;\n        \"a@f\")\n            return \"A@F\"\n        ;;\n        \"a@g\")\n            return \"A@G\"\n        ;;\n        \"a@h\")\n            return \"A@H\"\n        ;;\n        \"a@i\")\n            return \"A@I\"\n        ;;\n        \"a@j\")\n            return \"A@J\"\n        ;;\n        \"a@k\")\n            return \"A@K\"\n        ;;\n        \"a@l\")\n            return \"A@L\"\n        ;;\n        \"a@m\")\n            return \"A@M\"\n        ;;\n        \"a@n\")\n            return \"A@N\"\n        ;;\n        \"a@o\")\n            return \"A@O\"\n        ;;\n        \"a@p\")\n            return \"A@P\"\n        ;;\n        \"a@q\")\n            return \"A@Q\"\n        ;;\n        \"a@r\")\n            return \"A@R\"\n        ;;\n        \"a@s\")\n            return \"A@S\"\n        ;;\n        \"a@t\")\n            return \"A@T\"\n        ;;"], ["# <func> # Shell\n#!/bin/bash\n# Given a string 'text', return its md5 hash equivalent string.\n# If 'text' is an empty string, return None.\n# >>> $(string_to_md5 \"Hello world\")\n# \"3e25960a79dbc69b674cd4ec67a72c62\"\n#\n# $1 is a string\nstring_to_md5() {\n    local string\n    string=$(string_to_md5_string \"$1\")\n    if [[ \"$string\" == \"\" ]]; then\n        return\n    fi\n    echo \"$string\""], ["# <func> # Shell\n#!/bin/bash\n# Given two positive integers a and b, return the even digits between a\n# and b, in ascending order.\n# For example:\n# >>> $(generate_integers \"2\" \"8\")\n# ['\"2\"', '\"4\"', '\"6\"', '\"8\"']\n# >>> $(generate_integers \"8\" \"2\")\n# ['\"2\"', '\"4\"', '\"6\"', '\"8\"']\n# >>> $(generate_integers \"10\" \"14\")\n# []\n#\n# $1 is an integer\n# $2 is an integer\ngenerate_integers() {\n  local a b\n  local even_digits\n  local even_digits_len\n  local even_digits_start\n  local even_digits_end\n  local even_digits_len_end\n  local even_digits_start_end\n  local even_digits_start_end_len\n  local even_digits_start_end_len_end\n  local even_digits_start_end_len_end_end\n  local even_digits_start_end_len_end_end_end\n  local even_digits_start_end_len_end_end_end_end_end\n  local even_digits_start_end_len_end_end_end_end_end_end_end\n  local even_digits_start_end_len_end_end_end_end_end_end_end_end\n  local even_digits_start_end_len_end_end_end_end_end_end_end_end_end\n  local even_digits_start_end_len_end_end_end_end_end_end_end_end_end_end\n  local even_digits_start_end_len_end_end_end_end_end_end_end_end_end_end_end\n  local even_digits_start_end_len_end_end_end_end_end_end_end_end_end_end_end_end\n  local even_digits_start_end_len_end_end_end"]]