[["// <func> // TypeScript\n//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers: number[], threshold: number): boolean {\n  const result = false;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < threshold) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n}\n"], ["// <func> // TypeScript\n//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string: string): string[] {\n    let result: string[] = [];\n    let open_braces: string[] = [];\n    let close_braces: string[] = [];\n    let open_braces_length: number = 0;\n    let close_braces_length: number = 0;\n    let open_braces_string: string = \"\";\n    let close_braces_string: string = \"\";\n    let open_braces_group: string[] = [];\n    let close_braces_group: string[] = [];\n    let open_braces_group_length: number = 0;\n    let close_braces_group_length: number = 0;\n    let open_braces_string_length: number = 0;\n    let close_braces_string_length: number = 0;\n    let open_braces_string: string = \"\";\n    let close_braces_string: string = \"\";\n    let open_braces_group_string: string = \"\";\n    let close_braces_group_string: string = \"\";\n    let open_braces_group_length: number = 0;\n    let close_braces_group_length: number = 0;\n    let open_braces_string_length: number = 0;\n    let close_braces_string_length: number = 0;\n    let open_braces_string: string = \"\";\n    let close_braces_string: string = \"\";\n    let open_braces_string_length: number = 0;\n    let close_braces_string_length: number = 0;\n    let open_braces_string_length: number"], ["// <func> // TypeScript\n//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number): number {\n  var result = number;\n  var decimals = 0;\n  var remainder = number % 1;\n  if (remainder === 0) {\n    result = number;\n  } else {\n    decimals = remainder;\n  }\n  var integer = Math.floor(number);\n  if (integer === 0) {\n    result = 0;\n  } else {\n    result = Math.floor(number / 1000000) * 1000000 + integer;\n  }\n  return result;\n}\n"], ["// <func> // TypeScript\n//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations: number[]): boolean {\n  const balance = operations.reduce((acc, operation) => acc + operation, 0);\n  return balance <= 0;\n}\n\n\n\nA: You can use Array.prototype.some() to check if any of the elements in the array is below zero.\n\n\nconst belowZero = (arr) => arr.some(x => x <= 0);\n\nconsole.log(belowZero([1, 2, 3]));\nconsole.log(belowZero([1, 2, -4, 5]));\n\n\n\nA: You can use Array.prototype.some() to check if any of the elements in the array is below zero.\n\n\nconst belowZero = (arr) => arr.some(x => x <= 0);\n\nconsole.log(belowZero([1, 2, 3]));\nconsole.log(belowZero([1, 2, -4, 5]));\n\n\n\nA: You can use Array.prototype.some() to check if any of the elements in the array is below zero.\n\n\nconst belowZero = (arr) => arr.some(x => x <= 0);\n\nconsole.log(belowZero([1, 2, 3]));\nconsole.log(belowZero([1, 2, -4, 5]));\n\n\n\nA: You can use Array.prototype.some() to check if any of the elements in the array is below zero.\n\n\nconst belowZero = (arr) => arr.some(x => x <= 0);\n\nconsole.log(belowZero([1, 2, 3]));\nconsole.log(belowZero([1, 2, -4, 5]));\n\n"], ["// <func> // TypeScript\n//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers: number[]): number {\n  var mean: number = 0;\n  var deviation: number = 0;\n  var i: number = 0;\n  var j: number = 0;\n  var k: number = 0;\n  var n: number = numbers.length;\n  var sum: number = 0;\n  var sum_deviation: number = 0;\n  var sum_mean: number = 0;\n  var sum_deviation_mean: number = 0;\n  var sum_deviation_sum: number = 0;\n  var sum_deviation_sum_mean: number = 0;\n  var sum_deviation_sum_deviation: number = 0;\n  var sum_deviation_sum_deviation_mean: number = 0;\n  var sum_deviation_sum_deviation_sum: number = 0;\n  var sum_deviation_sum_deviation_sum_mean: number = 0;\n  var sum_deviation_sum_deviation_sum_deviation: number = 0;\n  var sum_deviation_sum_deviation_sum_deviation_mean: number = 0;\n  var sum_deviation_sum_deviation_sum_deviation_sum: number = 0;\n  var sum_deviation_sum_deviation_sum_deviation_sum_mean: number = 0;\n  var sum_deviation_sum_deviation_sum_deviation_sum_deviation: number = 0;\n  var sum_deviation_sum_deviation_sum_deviation_sum_deviation_mean: number = 0;\n  var sum_deviation"], ["// <func> // TypeScript\n//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers: number[], delimeter: number): number[] {\n    var result: number[] = [];\n    var i: number;\n    for (i = 0; i < numbers.length; i++) {\n        result.push(numbers[i]);\n    }\n    for (i = 0; i < numbers.length; i++) {\n        result[i] = numbers[i] + delimeter;\n    }\n    return result;\n}\n"], ["// <func> // TypeScript\n//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    var result: number[] = [];\n    var start: number = 0;\n    var end: number = paren_string.length;\n    var current: string;\n    var current_level: number;\n    var current_group: string;\n    var current_group_level: number;\n    var current_group_depth: number;\n    var current_group_depth_level: number;\n    var current_group_depth_level_max: number;\n    var current_group_depth_level_min: number;\n    var current_group_depth_level_max_min: number;\n    var current_group_depth_level_max_min_max: number;\n    var current_group_depth_level_max_min_max_max: number;\n    var current_group_depth_level_max_min_max_max_max: number;\n    var current_group_depth_level_max_min_max_max_max_max_max: number;\n    var current_group_depth_level_max_min_max_max_max_max_max_max_max_max_max: number;\n    var current_group_depth_level_max_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max"], ["// <func> // TypeScript\n//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings: string[], substring: string): string[] {\n    return strings.filter(function (s) {\n        return s.indexOf(substring) !== -1;\n    });\n}\n"], ["// <func> // TypeScript\n//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers: number[]): [number, number] {\n  var sum = 0;\n  var product = 1;\n  for (var i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}\n\n\nA: You can use reduce to get the sum and product of an array.\n\n\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nconst sum = numbers.reduce((acc, val) => acc + val, 0);\n\nconst product = numbers.reduce((acc, val) => acc * val, 1);\n\nconsole.log(sum, product);\n\n\n\nA: You can use reduce function to get the sum and product of an array.\n\n\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nconst sum = numbers.reduce((acc, val) => acc + val, 0);\n\nconst product = numbers.reduce((acc, val) => acc * val, 1);\n\nconsole.log(sum, product);\n\n\n\nA: You can use reduce function to get the sum and product of an array.\n\n\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nconst sum = numbers.reduce((acc, val) => acc + val, 0);\n\nconst product = numbers.reduce((acc, val) => acc * val, 1);\n\nconsole.log(sum, product);\n\n"], ["// <func> // TypeScript\n//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]): number[] {\n    var max = 0;\n    var i = 0;\n    var max_found = false;\n    var max_found_index = -1;\n    var max_found_array = [];\n    var max_found_array_index = -1;\n    var max_found_array_length = 0;\n    var max_found_array_length_index = -1;\n    var max_found_array_length_index_start = 0;\n    var max_found_array_length_index_end = 0;\n    var max_found_array_length_end = 0;\n    var max_found_array_length_end_index = -1;\n    var max_found_array_length_end_index_start = 0;\n    var max_found_array_length_end_index_end = 0;\n    var max_found_array_length_end_end = 0;\n    var max_found_array_length_end_end_index = -1;\n    var max_found_array_length_end_end_index_start = 0;\n    var max_found_array_length_end_end_index_end = 0;\n    var max_found_array_length_end_end_index_end_index = -1;\n    var max_found_array_length_end_end_index_end_index_start = 0;\n    var max_found_array_length_end_end_index_end_index_end = 0;\n    var max_found_array_length_end_end_index_end_index_end_index = -1;\n    var max_found_array_length_end_end_index_end_index_end_index_start ="], ["// <func> // TypeScript\n//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string: string): string {\n    var result: string = string;\n    var current: string = string;\n    var current_length: number = 0;\n    var current_index: number = 0;\n    var current_prefix: string = \"\";\n    var current_suffix: string = \"\";\n    var current_length_prefix: number = 0;\n    var current_length_suffix: number = 0;\n    var current_index_prefix: number = 0;\n    var current_index_suffix: number = 0;\n    var current_index_prefix_length: number = 0;\n    var current_index_suffix_length: number = 0;\n    var current_index_prefix_length_prefix: number = 0;\n    var current_index_suffix_length_prefix: number = 0;\n    var current_index_prefix_length_suffix: number = 0;\n    var current_index_suffix_length_prefix: number = 0;\n    var current_index_prefix_length_suffix: number = 0;\n    var current_index_suffix_length_prefix: number = 0;\n    var current_index_prefix_length_suffix: number = 0;\n    var current_index_suffix_length_prefix: number = 0;\n    var current_index_prefix_length_suffix: number = 0;\n    var current_index_suffix_length_prefix: number = 0;\n    var current_index_prefix_length_suffix: number = "], ["// <func> // TypeScript\n//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a: string, b: string): string {\n  var result: string = \"\";\n  for (var i: number = 0; i < a.length; i++) {\n    if (a[i] === b[i]) {\n      result += a[i];\n    } else {\n      result += b[i];\n    }\n  }\n  return result;\n}\n"], ["// <func> // TypeScript\n//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings: string[]): string | undefined {\n  if (strings.length === 0) {\n    return undefined;\n  }\n  const max = strings.reduce((max, s) => Math.max(max, s.length), 0);\n  return strings.reduce((max, s) => Math.max(max, s.length), 0) + strings[0];\n}\n"], ["// <func> // TypeScript\n//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n    if (a === b) return 1;\n    if (a === 0) return 1;\n    if (b === 0) return 1;\n    if (a === 1) return b;\n    if (b === 1) return a;\n    if (a === 2) return b;\n    if (b === 2) return a;\n    if (a === 3) return b;\n    if (b === 3) return a;\n    if (a === 4) return b;\n    if (b === 4) return a;\n    if (a === 5) return b;\n    if (b === 5) return a;\n    if (a === 6) return b;\n    if (b === 6) return a;\n    if (a === 7) return b;\n    if (b === 7) return a;\n    if (a === 8) return b;\n    if (b === 8) return a;\n    if (a === 9) return b;\n    if (b === 9) return a;\n    if (a === 10) return b;\n    if (b === 10) return a;\n    if (a === 11) return b;\n    if (b === 11) return a;\n    if (a === 12) return b;\n    if (b === 12) return a;\n    if (a === 13) return b;\n    if (b === 13) return a;\n    if (a === 14) return b;\n    if (b === 14) return a;\n    if (a === 15) return b;\n    if (b === 15) return a;\n    return 0;\n}\n\n\nA: You can use the following"], ["// <func> // TypeScript\n//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string: string): string[] {\n  var prefixes: string[] = [];\n  var i: number = 0;\n  var j: number = 0;\n  var len: number = string.length;\n  while (i < len) {\n    var current: string = string.charAt(i);\n    if (current === ' ') {\n      prefixes.push(current);\n    } else {\n      var next: string = string.charAt(i + 1);\n      if (current === ' ') {\n        prefixes.push(current);\n      } else if (current === ' ' && next === ' ') {\n        prefixes.push(current);\n      } else {\n        prefixes.push(current);\n      }\n    }\n    i += 1;\n  }\n  return prefixes;\n}\n\n\nA: You can use the following code:\n\n"], ["// <func> // TypeScript\n//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n: number): string {\n    var result: string = \"\";\n    for (var i: number = 0; i < n; i++) {\n        result += i;\n    }\n    return result;\n}\n\n\nA: You can use the following code to get the string sequence of a number."], ["// <func> // TypeScript\n//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string: string): number {\n    var count: number = 0;\n    for (var i: number = 0; i < string.length; i++) {\n        if (string.charAt(i) != string.charAt(i + 1)) {\n            count++;\n        }\n    }\n    return count;\n}\n"], ["// <func> // TypeScript\n//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string: string): number[] {\n  const music_string_array = music_string.split(' ');\n  const music_string_array_length = music_string_array.length;\n  const music_string_array_array = music_string_array_length;\n  const music_string_array_array_length = music_string_array_array.length;\n  const music_string_array_array_length_2 = music_string_array_array_length;\n  const music_string_array_array_length_2_2 = music_string_array_array_length_2;\n  const music_string_array_array_length_2_2_2 = music_string_array_array_length_2_2;\n  const music_string_array_array_length_2_2_2_2 = music_string_array_array_length_2_2_2;\n  const music_string_array_array_length_2_2_2_2_2 = music_string_array_array_length_2_2_2_2;\n  const music_string_array_array_length_2_2_2_2_2_2 = music_string_array_array_length_2_2_2_2_2;\n  const music_string_array_array_length_2_2_2_2_2_2_2 = music_string_array_array_length_2_2_2_2"], ["// <func> // TypeScript\n//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string): number {\n  const result = 0;\n  const length = string.length;\n  const index = string.indexOf(substring);\n  if (index === -1) {\n    return result;\n  }\n  const count = 0;\n  for (let i = index + 1; i < length; i++) {\n    const current = string.charAt(i);\n    if (current === substring) {\n      count++;\n    }\n  }\n  return count;\n}\n"], ["// <func> // TypeScript\n//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers: string): string {\n  var sorted = numbers.split(' ');\n  var sorted_length = sorted.length;\n  var sorted_numbers = [];\n  var sorted_numbers_length = sorted_numbers.length;\n  var sorted_numbers_length_zero = sorted_numbers_length - 1;\n  var sorted_numbers_length_one = sorted_numbers_length - 2;\n  var sorted_numbers_length_two = sorted_numbers_length - 3;\n  var sorted_numbers_length_three = sorted_numbers_length - 4;\n  var sorted_numbers_length_four = sorted_numbers_length - 5;\n  var sorted_numbers_length_five = sorted_numbers_length - 6;\n  var sorted_numbers_length_six = sorted_numbers_length - 7;\n  var sorted_numbers_length_seven = sorted_numbers_length - 8;\n  var sorted_numbers_length_eight = sorted_numbers_length - 9;\n  var sorted_numbers_length_nine = sorted_numbers_length - 10;\n  var sorted_numbers_length_zero_one = sorted_numbers_length_one - 1;\n  var sorted_numbers_length_one_two = sorted_numbers_length_one - 2;\n  var sorted_numbers_length_one_three = sorted_numbers_length_one - 3;\n  var sorted_numbers_length_one_four = sorted_numbers_length_one - 4;\n  var sorted_numbers_length_one_five = sorted_numbers_length_one - 5;\n  var sorted_numbers_length_one_six = sorted_numbers_length_one - 6;\n  var sorted_numbers_"], ["// <func> // TypeScript\n//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  var closest = [numbers[0], numbers[1]];\n  var closest_index = 0;\n  var closest_index_to_next = 0;\n  var next = [numbers[0], numbers[1]];\n  var next_index = 0;\n  var next_index_to_previous = 0;\n  var previous = [numbers[0], numbers[1]];\n  var previous_index = 0;\n  var previous_index_to_next = 0;\n  var next_index_to_previous = 0;\n  var previous_index_to_next = 0;\n  var previous_index_to_previous = 0;\n  var next_index_to_previous = 0;\n  var previous_index_to_next = 0;\n  var previous_index_to_previous = 0;\n  var previous_index_to_previous = 0;\n  var previous_index_to_previous = 0;\n  var previous_index_to_previous = 0;\n  var previous_index_to_previous = 0;\n  var previous_index_to_previous = 0;\n  var previous_index_to_previous = 0;\n  var previous_index_to_previous = 0;\n  var previous_index_to_previous = 0;\n  var previous_index_to_previous = 0;\n  var previous_index_to_previous = 0;\n  var"], ["// <func> // TypeScript\n//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n  var rescaled = [];\n  for (var i = 0; i < numbers.length; i++) {\n    var rescaledNumber = numbers[i] * 1.0 / numbers.length;\n    rescaled.push(rescaledNumber);\n  }\n  return rescaled;\n}\n"], ["// <func> // TypeScript\n//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    const result = [];\n    for (const value of values) {\n        if (isInteger(value)) {\n            result.push(value);\n        }\n    }\n    return result;\n}\n\n\nA: You can use Array.filter() to filter out the elements that are not integers.\n\n\nconst values = [1, 2, 3, \"abc\", {}, []];\n\nconst isInteger = (value) => typeof value === \"number\";\n\nconst filter = (values, isInteger) => {\n  const result = [];\n  for (const value of values) {\n    if (isInteger(value)) {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\nconsole.log(filter(values, isInteger));\n\n\n\nA: You can use Array.filter() to filter out the elements that are not integers.\n\n\nconst values = [1, 2, 3, \"abc\", {}, []];\n\nconst isInteger = (value) => typeof value === \"number\";\n\nconst filter = (values, isInteger) => {\n  const result = [];\n  for (const value of values) {\n    if (isInteger(value)) {\n      result.push(value);\n    }\n  }\n  return result;\n};\n\nconsole.log(filter(values, isInteger));\n\n\n\nA: You can use Array.filter() to filter out the elements that are not integers.\n\n\nconst values = [1, 2, 3, \"abc\", {}, []];\n\nconst isInteger = (value) => typeof value === \"number\";\n\nconst filter = (values, isInteger) => {\n  const result = [];\n  for (const value of values) {\n    if (isInteger(value)) {\n      result.push("], ["// <func> // TypeScript\n//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string: string): number {\n    return string.length;\n}\n"], ["// <func> // TypeScript\n//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n: number): number {\n  var largest: number = 0;\n  var divisors: number[] = [];\n  for (var i = 1; i <= n; i++) {\n    divisors.push(i);\n  }\n  for (var i = 1; i <= n; i++) {\n    if (divisors.indexOf(i) === -1) {\n      divisors.push(i);\n    }\n  }\n  for (var i = 1; i <= n; i++) {\n    if (divisors.indexOf(i) === -1) {\n      largest = i;\n    }\n  }\n  return largest;\n}\n"], ["// <func> // TypeScript\n//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n    var result: number[] = [];\n    var i: number = 0;\n    var j: number = 0;\n    var k: number = 0;\n    var l: number = 0;\n    var m: number = 0;\n    var n: number = 0;\n    var p: number = 0;\n    var q: number = 0;\n    var r: number = 0;\n    var s: number = 0;\n    var t: number = 0;\n    var u: number = 0;\n    var v: number = 0;\n    var w: number = 0;\n    var x: number = 0;\n    var y: number = 0;\n    var z: number = 0;\n    var a: number = 0;\n    var b: number = 0;\n    var c: number = 0;\n    var d: number = 0;\n    var e: number = 0;\n    var f: number = 0;\n    var g: number = 0;\n    var h: number = 0;\n    var i: number = 0;\n    var j: number = 0;\n    var k: number = 0;\n    var l: number = 0;\n    var m: number = 0;\n    var n: number = 0;\n    var p: number = 0;\n    var q: number = 0;\n    var r: number = 0;\n    var s: number = 0;\n    var t: number = 0;\n    var u: number = 0;\n"], ["// <func> // TypeScript\n//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers: number[]): number[] {\n  var result: number[] = [];\n  var i: number;\n  var j: number;\n  var k: number;\n  var count: number;\n  var count2: number;\n  var count3: number;\n  var count4: number;\n  var count5: number;\n  var count6: number;\n  var count7: number;\n  var count8: number;\n  var count9: number;\n  var count10: number;\n  var count11: number;\n  var count12: number;\n  var count13: number;\n  var count14: number;\n  var count15: number;\n  var count16: number;\n  var count17: number;\n  var count18: number;\n  var count19: number;\n  var count20: number;\n  var count21: number;\n  var count22: number;\n  var count23: number;\n  var count24: number;\n  var count25: number;\n  var count26: number;\n  var count27: number;\n  var count28: number;\n  var count29: number;\n  var count30: number;\n  var count31: number;\n  var count32: number;\n  var count33: number;\n  var count34: number;\n  var count35: number;\n  var count36: number;\n  var count37: number;\n  var count38: number;\n  var count39: number;\n  var count40: number;\n  var count41: number;\n  var count42: number;\n  var count43: number;\n  var count44: number;\n  var count45: number;"], ["// <func> // TypeScript\n//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string: string): string {\n  return string.split('').map(function(c) {\n    return c.toUpperCase();\n  }).join('');\n}\n"], ["// <func> // TypeScript\n//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings: string[]): string {\n    return strings.join(\"\", \" \");\n}\n\n\nA: You can use the concat method:\n\n\nlet arr = [\"a\", \"b\", \"c\"];\nlet str = arr.concat(\"d\");\nconsole.log(str);\n\n\n\nA: You can use concat method.\n\n\nlet arr = [\"a\", \"b\", \"c\"];\nlet str = arr.concat(\"d\");\nconsole.log(str);\n\n\n\nA: You can use concat method.\n\n\nlet arr = [\"a\", \"b\", \"c\"];\nlet str = arr.concat(\"d\");\nconsole.log(str);\n\n\n\nA: You can use concat method.\n\n\nlet arr = [\"a\", \"b\", \"c\"];\nlet str = arr.concat(\"d\");\nconsole.log(str);\n\n\n\nA: You can use concat method.\n\n\nlet arr = [\"a\", \"b\", \"c\"];\nlet str = arr.concat(\"d\");\nconsole.log(str);\n\n\n\nA: You can use concat method.\n\n\nlet arr = [\"a\", \"b\", \"c\"];\nlet str = arr.concat(\"d\");\nconsole.log(str);\n\n\n\nA: You can use concat method.\n\n\nlet arr = [\"a\", \"b\", \"c\"];\nlet str = arr.concat(\"d\");\nconsole.log(str);\n\n\n\nA: You can use concat method.\n\n\nlet arr = [\"a\", \"b\", \"c\"];\nlet str = arr.concat(\"d\");\nconsole.log(str);\n\n\n\nA: You can use concat method.\n\n\nlet arr = [\"a\", \"b\", \"c\"];\nlet str = arr.concat(\"d\");\nconsole.log(str);\n\n\n\nA: You can use concat method.\n\n\nlet arr = [\"a\", \"b\", \"c\"];\nlet str ="], ["// <func> // TypeScript\n//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings: string[], prefix: string): string[] {\n  return strings.filter(function (s) {\n    return s.startsWith(prefix);\n  });\n}\n"], ["// <func> // TypeScript\n//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l: number[]): number[] {\n  return l.filter(n => n > 0);\n}\n"], ["// <func> // TypeScript\n//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number): boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return false;\n    }\n    if (n % 3 === 0) {\n        return false;\n    }\n    if (n % 5 === 0) {\n        return false;\n    }\n    if (n % 7 === 0) {\n        return false;\n    }\n    if (n % 11 === 0) {\n        return false;\n    }\n    if (n % 13 === 0) {\n        return false;\n    }\n    if (n % 17 === 0) {\n        return false;\n    }\n    if (n % 19 === 0) {\n        return false;\n    }\n    if (n % 21 === 0) {\n        return false;\n    }\n    if (n % 23 === 0) {\n        return false;\n    }\n    if (n % 27 === 0) {\n        return false;\n    }\n    if (n % 31 === 0) {\n        return false;\n    }\n    if (n % 33 === 0) {\n        return false;\n    }\n    if (n % 37 === 0) {\n        return false;\n    }\n    if (n % 39 === 0) {\n        return false;\n    }\n    if (n % 41 === 0) {\n        return false;\n    }\n    if (n % 43 === 0) {\n        return false;"], ["// <func> // TypeScript\n//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l: number[]): number[] {\nvar i = 0;\nvar j = l.length - 1;\nvar k = 0;\nvar l2 = [];\nvar l3 = [];\nwhile (i < j) {\nif (l[i] % 3 === 0) {\nl3.push(l[i]);\nl2.push(l[i]);\nl.splice(i, 1);\nl.splice(j, 1);\nl.splice(i, 1);\nl.splice(j, 1);\nl.splice(i, 1);\nl.splice(j, 1);\nl.splice(i, 1);\nl.splice(j, 1);\nl.splice(i, 1);\nl.splice(j, 1);\nl.splice(i, 1);\nl.splice(j, 1);\nl.splice(i, 1);\nl.splice(j, 1);\nl.splice(i, 1);\nl.splice(j, 1);\nl.splice(i, 1);\nl.splice(j, 1);\nl.splice(i, 1);\nl.splice(j, 1);\nl.splice(i, 1);\nl.splice(j, 1);\nl.splice(i, 1);\nl.splice(j, 1);\nl."], ["// <func> // TypeScript\n//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l: number[]): number[] {\n    let result = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] !== undefined) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n\n\nA: You can use Array.prototype.sort() to sort the array and then use Array.prototype.slice() to get the unique elements.\n\n\nconst unique = (arr) => {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] !== undefined) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n};\n\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,"], ["// <func> // TypeScript\n//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l: number[]): number {\n    if (l.length === 0) {\n        return 0;\n    }\n    var max = l[0];\n    for (var i = 1; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n}\n"], ["// <func> // TypeScript\n//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  if (n < 11) {\n    return fizz(n);\n  }\n  if (n < 13) {\n    return buzz(n);\n  }\n  return fizz(n);\n}\n"], ["// <func> // TypeScript\n//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l: number[]): number[] {\n    let l' = [];\n    for (let i = 0; i < l.length; i += 2) {\n        if (l[i] === l[i + 1]) {\n            l'[i] = l[i];\n            l'[i + 1] = l[i + 2];\n        }\n    }\n    return l';\n}\n"], ["// <func> // TypeScript\n//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n    if (n <= 1) return 0;\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 5;\n    if (n == 5) return 13;\n    if (n == 6) return 21;\n    if (n == 7) return 34;\n    if (n == 8) return 55;\n    if (n == 9) return 79;\n    if (n == 10) return 101;\n    if (n == 11) return 111;\n    if (n == 12) return 121;\n    if (n == 13) return 131;\n    if (n == 14) return 141;\n    if (n == 15) return 151;\n    if (n == 16) return 161;\n    if (n == 17) return 171;\n    if (n == 18) return 181;\n    if (n == 19) return 191;\n    if (n == 20) return 201;\n    if (n == 21) return 211;\n    if (n == 22) return 221;\n    if (n == 23) return 231;\n    if (n == 24) return 241;\n    if (n == 25) return 251;\n   "], ["// <func> // TypeScript\n//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l: number[]): boolean {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n"], ["// <func> // TypeScript\n//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n: number): number {\n    var i: number;\n    var j: number;\n    var k: number;\n    var l: number;\n    var m: number;\n    var n: number;\n    var o: number;\n    var p: number;\n    var q: number;\n    var r: number;\n    var s: number;\n    var t: number;\n    var u: number;\n    var v: number;\n    var w: number;\n    var x: number;\n    var y: number;\n    var z: number;\n    var a: number;\n    var b: number;\n    var c: number;\n    var d: number;\n    var e: number;\n    var f: number;\n    var g: number;\n    var h: number;\n    var i: number;\n    var j: number;\n    var k: number;\n    var l: number;\n    var m: number;\n    var n: number;\n    var o: number;\n    var p: number;\n    var q: number;\n    var r: number;\n    var s: number;\n    var t: number;\n    var u: number;\n    var v: number;\n    var w: number;\n    var x: number;\n    var y: number;\n    var z: number;\n    var a: number;\n    var b: number;\n    var c: number;\n    var d: number;\n    var e: number"], ["// <func> // TypeScript\n//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l: number[]): number[] {\n  return l.slice(1);\n}\n"], ["// <func> // TypeScript\n//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    var sum = 0;\n    for (var i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    return sum === 0;\n}\n"], ["// <func> // TypeScript\n//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x: number, base: number): string {\n  if (x < 10) {\n    return x.toString();\n  }\n  if (base < 10) {\n    return x.toString(base);\n  }\n  return x.toString(base + 1);\n}\n"], ["// <func> // TypeScript\n//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a: number, h: number): number {\n  return Math.sqrt(a * a + h * h);\n}\n"], ["// <func> // TypeScript\n//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n: number): number {\n    if (n < 0) {\n        throw new Error(\"The fib4 number sequence is not defined for negative numbers.\");\n    }\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    if (n === 2) {\n        return 2;\n    }\n    if (n === 3) {\n        return 0;\n    }\n    if (n === 4) {\n        return 1;\n    }\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n"], ["// <func> // TypeScript\n//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n    var median = l.reduce((a, b) => a + b, 0);\n    return median / l.length;\n}\n\n\nA: You can use the Array.prototype.reduce method to get the median of an array.\n\n\nconst array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93"], ["// <func> // TypeScript\n//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text: string): boolean {\n    let result = false;\n    for (let i = 0; i < text.length; i++) {\n        let current = text.charAt(i);\n        if (current === current.charAt(text.length - i - 1)) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n"], ["// <func> // TypeScript\n//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number {\n    if (n < 1) {\n        return 0;\n    }\n    if (p < 1) {\n        return 0;\n    }\n    if (n % p === 0) {\n        return n;\n    }\n    return (n + 1) % p;\n}\n"], ["// <func> // TypeScript\n//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text: string): string {\n  return text.replace(/\\W/g, '');\n}\n"], ["// <func> // TypeScript\n//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l: number[], t: number): boolean {\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] < t) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\nA: You can use Array.prototype.every:\n\n"], ["// <func> // TypeScript\n//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x: number, y: number): number {\n  return x + y;\n}\n"], ["// <func> // TypeScript\n//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0: string, s1: string): boolean {\n    var i: number;\n    var j: number;\n    var k: number;\n    var len: number;\n    var l: number;\n    var m: number;\n    var n: number;\n    var o: number;\n    var p: number;\n    var q: number;\n    var r: number;\n    var s: number;\n    var t: number;\n    var u: number;\n    var v: number;\n    var w: number;\n    var x: number;\n    var y: number;\n    var z: number;\n    var a: number;\n    var b: number;\n    var c: number;\n    var d: number;\n    var e: number;\n    var f: number;\n    var g: number;\n    var h: number;\n    var i: number;\n    var j: number;\n    var k: number;\n    var l: number;\n    var m: number;\n    var n: number;\n    var o: number;\n    var p: number;\n    var q: number;\n    var r: number;\n    var s: number;\n    var t: number;\n    var u: number;\n    var v: number;\n    var w: number;\n    var x: number;\n    var y: number;\n    var z: number;\n    var a: number;\n    var b: number;\n    var c"], ["// <func> // TypeScript\n//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\nconsole.log(fib(10));\nconsole.log(fib(1));\nconsole.log(fib(8));\n\n\n\nA: You can use the following function:"], ["// <func> // TypeScript\n//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets: string): boolean {\n    let result = false;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === brackets[i + 1]) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n\n\nA: I'm not sure if this is the best way to do it, but I've come up with a solution that I think is pretty simple and works.\n\n"], ["// <func> // TypeScript\n//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]): boolean {\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] < l[i + 1]) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\nA: You can use the Array.prototype.sort() method to sort the array in ascending order.\n\n\nvar array = [1, 2, 4, 20, 10, 4, 1, 0, -10];\n\narray.sort();\n\nconsole.log(array);\n\n\n\nA: You can use Array.prototype.sort() method to sort the array in ascending order.\n\n\nvar array = [1, 2, 4, 20, 10, 4, 1, 0, -10];\n\narray.sort();\n\nconsole.log(array);\n\n\n\nA: You can use Array.prototype.sort() method to sort the array in ascending order.\n\n\nvar array = [1, 2, 4, 20, 10, 4, 1, 0, -10];\n\narray.sort();\n\nconsole.log(array);\n\n\n\nA: You can use Array.prototype.sort() method to sort the array in ascending order.\n\n\nvar array = [1, 2, 4, 20, 10, 4, 1, 0, -10];\n\narray.sort();\n\nconsole.log(array);\n\n\n\nA: You can use Array.prototype.sort() method to sort the array in ascending order.\n\n\nvar array = [1, 2, 4, 20, 10, 4, 1, 0, -"], ["// <func> // TypeScript\n//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1: number[], l2: number[]): number[] {\n    var result = [];\n    for (var i = 0; i < l1.length; i++) {\n        var j = i + 1;\n        while (j < l2.length && l1[i] === l2[j]) {\n            result.push(l1[i]);\n            j++;\n        }\n    }\n    return result;\n}\n\n\nA: You can use a for loop to iterate over the array and check if the element is in the other array.\n\n\nconst array1 = [1, 4, 3, 34, 653, 2, 5];\nconst array2 = [5, 7, 1, 5, 9, 653, 121];\n\nconst result = array1.filter(item => array2.some(item2 => item === item2));\n\nconsole.log(result);\n\n\n\nA: You can use Array.prototype.some() to check if the element is in the other array.\n\n\nconst array1 = [1, 4, 3, 34, 653, 2, 5];\nconst array2 = [5, 7, 1, 5, 9, 653, 121];\n\nconst result = array1.filter(item => array2.some(item2 => item === item2));\n\nconsole.log(result);\n\n\n\nA: You can use Array.prototype.some() to check if the element is in the other array.\n\n\nconst array1 = [1, 4, 3, 34, 653"], ["// <func> // TypeScript\n//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n: number): number {\n  if (n <= 1) {\n    return 1;\n  }\n  if (n % 2 === 0) {\n    return n;\n  }\n  if (n % 3 === 0) {\n    return n;\n  }\n  if (n % 5 === 0) {\n    return n;\n  }\n  if (n % 7 === 0) {\n    return n;\n  }\n  if (n % 11 === 0) {\n    return n;\n  }\n  if (n % 13 === 0) {\n    return n;\n  }\n  if (n % 17 === 0) {\n    return n;\n  }\n  if (n % 19 === 0) {\n    return n;\n  }\n  if (n % 21 === 0) {\n    return n;\n  }\n  if (n % 23 === 0) {\n    return n;\n  }\n  if (n % 27 === 0) {\n    return n;\n  }\n  if (n % 31 === 0) {\n    return n;\n  }\n  if (n % 33 === 0) {\n    return n;\n  }\n  if (n % 37 === 0) {\n    return n;\n  }\n  if (n % 41 === 0) {\n    return n;\n  }\n  if (n % 43 === 0) {\n    return n;\n  }\n  if (n % 47 === 0) {\n    return n;\n  }\n  if (n % 51 === 0) {\n    return n;\n  }\n  if (n % 53 === 0) {\n    return n;\n"], ["// <func> // TypeScript\n//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n: number): number {\n  return n + 1;\n}\n"], ["// <func> // TypeScript\n//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets: string): boolean {\n  let result: boolean = false;\n  for (let i = 0; i < brackets.length; i++) {\n    let bracket: string = brackets[i];\n    if (bracket === \"(\") {\n      result = true;\n    } else if (bracket === \")\" && result) {\n      result = true;\n    } else if (bracket === \"(\" && result) {\n      result = true;\n    } else if (bracket === \")\" && result) {\n      result = true;\n    } else if (bracket === \"(\" && result && bracket === \")\") {\n      result = true;\n    } else if (bracket === \")\" && result && bracket === \"(\") {\n      result = true;\n    } else if (bracket === \"(\" && result && bracket === \"(\") {\n      result = true;\n    } else if (bracket === \"(\" && result && bracket === \"(\" && result) {\n      result = true;\n    } else if (bracket === \"(\" && result && bracket === \"(\" && result && bracket === \")\") {\n      result = true;\n    } else if (bracket === \"(\" && result && bracket === \"(\" && result && bracket === \"(\" && result) {\n      result = true;\n    } else if (bracket === \"(\" && result && bracket === \"(\" && result && bracket === \"(\" && result && bracket === \"(\" && result) {\n      result = true;\n    } else if (bracket === \"(\" && result && bracket === \"(\" && result && bracket === \"(\" && result && bracket === \"(\" && result && bracket === \"(\" && result) {\n      result = true;\n    } else"], ["// <func> // TypeScript\n//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs: number[]): number[] {\n  var result = [];\n  var i = 0;\n  for (var j = 0; j < xs.length; j++) {\n    var x = xs[j];\n    var y = result[i] = x * xs[j] + xs[j + 1];\n    i++;\n  }\n  return result;\n}\n\n\nA: I'm not sure if this is the best way to do it, but you can use the following code:"], ["// <func> // TypeScript\n//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n: number): number {\n    if (n <= 1) {\n        return 0;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n"], ["// <func> // TypeScript\n//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s: string): number {\n  var count = 0;\n  for (var i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      count++;\n    } else if (s[i] === 'e') {\n      count++;\n    } else if (s[i] === 'i') {\n      count++;\n    } else if (s[i] === 'o') {\n      count++;\n    } else if (s[i] === 'u') {\n      count++;\n    } else {\n      count++;\n    }\n  }\n  return count;\n}\n"], ["// <func> // TypeScript\n//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x: number, shift: number): string {\n  let result = '';\n  for (let i = 0; i < shift; i++) {\n    result += x;\n  }\n  return result;\n}\n"], ["// <func> // TypeScript\n//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s: string): number {\n    var sum: number = 0;\n    for (var i: number = 0; i < s.length; i++) {\n        var c: number = s.charCodeAt(i);\n        if (c >= 48 && c <= 57) {\n            sum += c;\n        }\n    }\n    return sum;\n}\n\n\nA: You can use a for loop to iterate over the characters in the string and check if they are greater than 48. If they are, add them to a variable.\n\n"], ["// <func> // TypeScript\n//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s: string, n: number): number {\n    if (s === null) {\n        return 0;\n    }\n    if (s.length === 0) {\n        return n;\n    }\n    if (s.length === 1) {\n        return n;\n    }\n    if (s.length === 2) {\n        return n + fruit_distribution(s.substring(1), n);\n    }\n    if (s.length === 3) {\n        return n + fruit_distribution(s.substring(1), n) + fruit_distribution(s.substring(2), n);\n    }\n    if (s.length === 4) {\n        return n + fruit_distribution(s.substring(1), n) + fruit_distribution(s.substring(2), n) + fruit_distribution(s.substring(3), n);\n    }\n    if (s.length === 5) {\n        return n + fruit_distribution(s.substring(1), n) + fruit_distribution(s.substring(2), n) + fruit_distribution(s.substring(3), n) + fruit_distribution(s.substring(4), n);\n    }\n    if (s.length === 6) {\n        return n +"], ["// <func> // TypeScript\n//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const smallest = arr.reduce((acc, node) => {\n    if (node.value < acc) {\n      acc = node.value;\n    }\n    return acc;\n  }, 0);\n  return [smallest, arr.indexOf(smallest)];\n}\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));\n\n\n\nA: You can use Array.prototype.findIndex() to find the index"], ["// <func> // TypeScript\n//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst: number[]): number {\n    var max = -1;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return max;\n}\n\n\nA: You can use the following code:"], ["// <func> // TypeScript\n//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > lst[i + 1]) {\n            result.push(lst[i]);\n            result.push(lst[i + 1]);\n        }\n    }\n    return result;\n}\n\n\nA: I'm not sure if this is the best way to do it, but it works:"], ["// <func> // TypeScript\n//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a: number, b: number, c: number): number {\n    if (a == b && b == c) {\n        return a;\n    }\n    if (a == c && b == c) {\n        return a;\n    }\n    if (a == c && b == b) {\n        return a;\n    }\n    if (a == b && c == b) {\n        return a;\n    }\n    if (a == b && c == c) {\n        return a;\n    }\n    return -1;\n}\n\n"], ["// <func> // TypeScript\n//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    if (q.length === 0) {\n        return false;\n    }\n    if (q.length === 1) {\n        return q[0] <= w;\n    }\n    for (let i = 0; i < q.length; i++) {\n        if (q[i] > w) {\n            return false;\n        }\n    }\n    return true;\n}\n"], ["// <func> // TypeScript\n//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr: number[]): number {\n    let smallestChange = arr.reduce((prev, curr) => {\n        if (prev === 0) {\n            return curr;\n        }\n        else {\n            return prev + curr;\n        }\n    }, 0);\n    return smallestChange;\n}\n\n\nA: You can use a recursive function like this:"], ["// <func> // TypeScript\n//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    var result: string[] = [];\n    var i: number = 0;\n    var j: number = 0;\n    var len1: number = lst1.length;\n    var len2: number = lst2.length;\n    for (i = 0; i < len1; i++) {\n        for (j = 0; j < len2; j++) {\n            if (lst1[i] === lst2[j]) {\n                result.push(lst1[i]);\n                result.push(lst2[j]);\n                break;\n            }\n        }\n    }\n    return result;\n}\n\n\nA: You can use a for loop to iterate through the array and check if the string is in the other array.\n\n"], ["// <func> // TypeScript\n//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a: number): boolean {\n    if (a < 100) {\n        return false;\n    }\n    for (let i = 2; i <= a; i++) {\n        if (a % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\nA: You can use the modulo operator to check if a number is a prime number.\n\n"], ["// <func> // TypeScript\n//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n    if (n == 1) return true;\n    if (n == 2) return true;\n    if (n == 3) return true;\n    if (n == 4) return true;\n    if (n == 5) return true;\n    if (n == 6) return true;\n    if (n == 7) return true;\n    if (n == 8) return true;\n    if (n == 9) return true;\n    if (n == 10) return true;\n    if (n == 11) return true;\n    if (n == 12) return true;\n    if (n == 13) return true;\n    if (n == 14) return true;\n    if (n == 15) return true;\n    if (n == 16) return true;\n    if (n == 17) return true;\n    if (n == 18) return true;\n    if (n == 19) return true;\n    if (n == 20) return true;\n    if (n == 21) return true;\n    if (n == 22) return true;\n    if (n == 23) return true;\n    if (n == 24) return true;\n    if (n == 25) return true;\n    if (n == 26) return true;\n    if (n"], ["// <func> // TypeScript\n//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a: number): boolean {\n    if (a < 0) {\n        return false;\n    }\n    if (a % 1 == 0) {\n        return false;\n    }\n    if (a % 2 == 0) {\n        return false;\n    }\n    if (a % 3 == 0) {\n        return false;\n    }\n    if (a % 4 == 0) {\n        return false;\n    }\n    if (a % 5 == 0) {\n        return false;\n    }\n    if (a % 6 == 0) {\n        return false;\n    }\n    if (a % 7 == 0) {\n        return false;\n    }\n    if (a % 8 == 0) {\n        return false;\n    }\n    if (a % 9 == 0) {\n        return false;\n    }\n    if (a % 10 == 0) {\n        return false;\n    }\n    if (a % 11 == 0) {\n        return false;\n    }\n    if (a % 12 == 0) {\n        return false;\n    }\n    if (a % 13 == 0) {\n        return false;\n    }\n    if (a % 14 == 0) {\n        return false;\n    }\n    if (a % 15 == 0) {\n        return false;\n    }\n    if (a % 16 == 0) {\n        return false;\n    }\n    if (a % 17"], ["// <func> // TypeScript\n//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num: string): number {\n    var result: number = 0;\n    var hexDigits: string = num.split(\"\");\n    for (var i: number = 0; i < hexDigits.length; i++) {\n        var digit: number = 0;\n        var isPrime: boolean = false;\n        for (var j: number = 0; j < hexDigits.length; j++) {\n            if (hexDigits[j] == num) {\n                isPrime = true;\n                break;\n            }\n        }\n        if (isPrime) {\n            result = result + 1;\n        }\n    }\n    return result;\n}\n\n\nA: I would use a for"], ["// <func> // TypeScript\n//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal: number): string {\n    var result: string = \"\";\n    var i: number = 0;\n    var j: number = 0;\n    var k: number = 0;\n    var l: number = 0;\n    var m: number = 0;\n    var n: number = 0;\n    var p: number = 0;\n    var q: number = 0;\n    var r: number = 0;\n    var s: number = 0;\n    var t: number = 0;\n    var u: number = 0;\n    var v: number = 0;\n    var w: number = 0;\n    var x: number = 0;\n    var y: number = 0;\n    var z: number = 0;\n    var a: number = 0;\n    var b: number = 0;\n    var c: number = 0;\n    var d: number = 0;\n    var e: number = 0;\n    var f: number = 0;\n    var g: number = 0;\n    var h: number = 0;\n    var i: number = 0;\n    var j: number = 0;\n    var k: number = 0;\n    var l: number = 0;\n    var m: number = 0;\n    var n: number = 0;\n    var p: number = 0;\n    var q: number = 0;\n    var r: number = "], ["// <func> // TypeScript\n//You are given a string s.\n// Your task is to check if the string is hapts or not.\n// A string is hapts if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s: string): boolean {\n    var length = s.length;\n    for (var i = 0; i < length; i++) {\n        if (s[i] === 'a') {\n            return false;\n        }\n    }\n    return true;\n}\n\n\nA: You can use a regular expression to check if the string is hapts or not.\n\n"], ["// <func> // TypeScript\n//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n  const letter_grades = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 4.0) {\n      letter_grades.push(grades[i]);\n    }\n  }\n  return letter_grades;\n}\n\n\nA: I think you can use a for loop to iterate over the array of grades and then use the function to output the letter grade.\n\n"], ["// <func> // TypeScript\n//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string: string): boolean {\n    if (string.length % 1 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"], ["// <func> // TypeScript\n//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n: number): number {\n    var count = 0;\n    for (var i = 1; i <= n; i++) {\n        if (i % 10 == 1) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\nA: You can use a recursive function like this:"], ["// <func> // TypeScript\n//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N: number): string {\n    var sum: number = 0;\n    for (var i: number = 0; i < N; i++) {\n        sum += (i < N ? i : i + 1);\n    }\n    return sum.toString();\n}\n\n\nA: I'm not sure if this is the best way to do it, but it's a start."], ["// <func> // TypeScript\n//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst: number[]): number {\n    let even = 0;\n    for (let i = 0; i < lst.length; i += 2) {\n        if (i % 2 === 0) {\n            even += lst[i];\n        }\n    }\n    return even;\n}\n\n\nA: You can use the following code to add the even elements of an array."], ["// <func> // TypeScript\n//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s: string): string {\n  var newS: string = \"\";\n  var i: number = 0;\n  var j: number = s.length;\n  var k: number = 0;\n  var l: number = 0;\n  var m: number = 0;\n  var n: number = 0;\n  var o: number = 0;\n  var p: number = 0;\n  var q: number = 0;\n  var r: number = 0;\n  var s: string = \"\";\n  var t: string = \"\";\n  var u: string = \"\";\n  var v: string = \"\";\n  var w: string = \"\";\n  var x: string = \"\";\n  var y: string = \"\";\n  var z: string = \"\";\n  var a: string = \"\";\n  var b: string = \"\";\n  var c: string = \"\";\n  var d: string = \"\";\n  var e: string = \"\";\n  var f: string = \"\";\n  var g: string = \"\";\n  var h: string = \"\";\n  var i: string = \"\";\n  var j: string = \"\";\n  var k: string = \"\";\n  var l: string = \"\";\n  var m: string = \"\";\n  var n: string = \"\";\n  var o: string = \"\";\n  var p: string = \"\";\n  var q: string = \"\";\n  var r: string = \"\";\n  var s: string = \"\";\n  var t: string = \"\";\n  var u: string = \"\";\n  var v: string = \"\";\n "], ["// <func> // TypeScript\n//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][] {\n  let row = 0;\n  let col = 0;\n  let arr = [];\n  for (let i = 0; i < lst.length; i++) {\n    arr.push(lst[i]);\n    if (i === x) {\n      arr.push(arr.length - 1);\n    }\n    row++;\n    col++;\n  }\n  return arr;\n}\n\n\nA: You can use a recursive function to find the coordinates of the row.\n\n"], ["// <func> // TypeScript\n//Given an array of non-negative integers, return a cots of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array: number[]): number[] {\n    if (array.length === 0) {\n        return array;\n    }\n    if (array.length === 1) {\n        return array;\n    }\n    var sum = 0;\n    var lastIndex = array.length - 1;\n    var firstIndex = 0;\n    var lastIndex = array.length - 1;\n    var sumIndex = 0;\n    var sum = 0;\n    var lastIndex = array.length - 1;\n    var firstIndex = 0;\n    var lastIndex = array.length - 1;\n    var sumIndex = 0;\n    var sum = 0;\n    var lastIndex = array.length - 1;\n    var firstIndex = 0;\n    var lastIndex = array.length - 1;\n    var sumIndex = 0;\n    var sum = 0;\n    var lastIndex = array.length - 1;\n    var firstIndex = 0;\n    var lastIndex = array.length - 1;\n    var sumIndex = 0;\n    var sum = 0;\n    var lastIndex = array.length - 1;\n    var firstIndex = 0"], ["// <func> // TypeScript\n//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s: string): string {\n    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var rotated = alphabet.rotate(2);\n    var rotatedS = rotated.join(\"\");\n    return s.replace(rotatedS, alphabet.slice(0, 2));\n}\n"], ["// <func> // TypeScript\n//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst: number[]): number | undefined {\n  if (lst.length === 0) return undefined;\n  const min = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) min = lst[i];\n  }\n  return min;\n}\n\n\nA: You can use a recursive function like this:"], ["// <func> // TypeScript\n//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S: string): number {\n    var i: number;\n    var j: number;\n    var k: number;\n    var l: number;\n    var m: number;\n    var n: number;\n    var o: number;\n    var p: number;\n    var q: number;\n    var r: number;\n    var s: number;\n    var t: number;\n    var u: number;\n    var v: number;\n    var w: number;\n    var x: number;\n    var y: number;\n    var z: number;\n    var a: number;\n    var b: number;\n    var c: number;\n    var d: number;\n    var e: number;\n    var f: number;\n    var g: number;\n    var h: number;\n    var i: number;\n    var j: number;\n    var k: number;\n    var l: number;\n    var m: number;\n    var n: number;\n    var o: number;\n    var p: number;\n    var q: number;\n    var r: number;\n    var s: number;\n    var t: number;\n    var u: number;\n    var v: number;\n    var w: number;\n    var x: number;\n    var y: number;\n    var z: number;\n    var a: number;\n    var b: number;\n    var c: number;\n    var d: number;\n    var e: number;\n    var f: number;\n    var g: number;\n    var h: number;\n    var i: number;\n    var j: number;\n    var k: number"], ["// <func> // TypeScript\n//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x === y === z) {\n        return true;\n    }\n    if (x === y) {\n        return x === z;\n    }\n    if (x === z) {\n        return x === y;\n    }\n    return false;\n}\n"], ["// <func> // TypeScript\n//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    var result: string = \"\";\n    var index: number = 0;\n    var letter: string = \"\";\n    var vowel: string = \"\";\n    var i: number = 0;\n    var j: number = 0;\n    var k: number = 0;\n    var letter2: string = \"\";\n    var vowel2: string = \"\";\n    var i2: number = 0;\n    var j2: number = 0;\n    var k2: number = 0;\n    var result2: string = \"\";\n    var i3: number = 0;\n    var j3: number = 0;\n    var k3: number = 0;\n    var result3: string = \"\";\n    var i4: number = 0;\n    var j4: number = 0;\n    var k4: number = 0;\n    var result4: string = \"\";\n    var i5: number = 0;\n    var j5: number = 0;\n    var k5: number = 0;\n    var result5: string = \"\";\n    var i6: number = 0;\n    var j6: number = 0;\n    var k6: number = 0;\n    var result6: string = \"\";\n    var i7: number = 0;\n    var j7: number = 0;\n    var k7: number = 0;\n    var result7: string = \"\";\n    var i8: number = 0;\n    var j8: number = 0;\n    var k8: number = 0;\n    var result8: string = \"\";\n"], ["// <func> // TypeScript\n//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst: number[]): number {\n  if (lst.length === 0) {\n    return 0;\n  }\n  if (lst.length === 1) {\n    return lst[0];\n  }\n  if (lst.length === 2) {\n    return skjkasdkd(lst.slice(1));\n  }\n  if (lst.length === 3) {\n    return skjkasdkd"], ["// <func> // TypeScript\n//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}): boolean {\n  for (const key of Object.keys(dict)) {\n    if (dict[key] === undefined) {\n      return false;\n    }\n    if (typeof dict[key] !== 'string') {\n      return false;\n    }\n    if (typeof dict[key] !== 'string') {\n      return false;\n    }\n    if (typeof dict[key] !== 'string') {\n      return false;\n    }\n    if (typeof dict[key] !== 'string') {\n      return false;\n    }\n    if (typeof dict[key] !== 'string') {\n      return false;\n    }\n    if (typeof dict[key] !== 'string') {\n      return false;\n    }\n    if (typeof dict[key] !== 'string') {\n      return false;\n    }\n    if (typeof dict[key] !== 'string') {\n      return false;\n    }\n    if (typeof dict[key] !== 'string') {\n      return false;\n    }\n    if (typeof dict[key] !== 'string') {\n      return false;\n    }\n    if (typeof dict[key] !== 'string') {\n      return false;\n    }"], ["// <func> // TypeScript\n//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n: number): number[] {\n    var result: number[] = [];\n    for (var i = 2; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n"], ["// <func> // TypeScript\n//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (a < 0 || b < 0) {\n    throw new Error(\"Invalid input\");\n  }\n  if (a < b) {\n    return 0;\n  }\n  return a * b;\n}\n"], ["// <func> // TypeScript\n//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s: string): number {\n    let vowels: number = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            vowels++;\n        }\n    }\n    return vowels;\n}\n\n\nA: I would do it like this:\n\n\n*\n\n*Split the string into an array of words\n\n*For each word in the array, check if it contains a vowel\n\n*If so, increment the vowel count\n\n*Return the sum of all the vowel counts\n\n\n\n\nconst words = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\nconst vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\nconst countVowels = (words, vowels) => {\n  const vowelsCount = 0;\n  for (let word of words) {\n    if (vowels.includes(word)) {\n      vowelsCount++;\n    }\n  }\n  return vowelsCount;\n};\n\nconsole.log(countVowels(words, vowels));\n\n\n\nA: You can use a recursive function to count the number of vowels in a string.\n\n"], ["// <func> // TypeScript\n//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const closest = Math.floor(Math.abs(value) / 10);\n  if (value === \"0\") return closest;\n  if (value === \"1\") return closest + 1;\n  return closest + Math.floor(Math.abs(value) / 10);\n}\n"], ["// <func> // TypeScript\n//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n: number): number[] {\n  let pile: number[] = [];\n  for (let i = 1; i <= n; i++) {\n    let level: number = i + 1;\n    let stones: number = 1;\n    for (let j = 1; j <= level; j++) {\n      stones = stones + i;\n    }\n    pile.push(stones);\n  }\n  return pile;\n}\n\n\nA: You can use a for loop to do the work.\n\n"], ["// <func> // TypeScript\n//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s: string): string[] {\n    const words = s.split(',');\n    return words.map(word => word.trim());\n}\n\n\nA: You can use Array.prototype.map() and Array.prototype.filter() to get the result.\n\n"], ["// <func> // TypeScript\n//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x: number, y: number): number {\n    if (x < y) {\n        return Math.floor(Math.random() * (y - x + 1)) + x;\n    }\n    return Math.floor(Math.random() * (y - x + 1)) + y;\n}\n\n\nA: You can use Math.random() to generate a random number between 0 and 1.\nThen you can use Math.floor(Math.random() * (y - x + 1)) + x to get the number you want.\n\nA: You can use Math.random() to generate a random number between 0 and 1.\nThen you can use Math.floor(Math.random() * (y - x + 1)) + x to get the number you want.\n\nA: You can use Math.random() to generate a random number between 0 and 1.\nThen you can use Math.floor(Math.random() * (y - x + 1)) + x to get the number you want.\n\nA: You can use Math.random() to generate a random number between 0 and 1.\nThen you can use Math.floor(Math.random() * (y - x + 1)) + x to get the number you want.\n\nA: You can use Math.random() to generate a random number between 0 and 1.\nThen you can use Math.floor(Math.random() * (y - x + 1)) + x to get the number you want.\n\nA: You can use Math.random() to generate a random number between 0 and 1.\nThen you can use Math.floor(Math.random() * (y - x + 1)) + x to get the number you want.\n"], ["// <func> // TypeScript\n//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number): string| number {\n    if (n < m) return -1;\n    if (n > m) return -1;\n    if (n === m) return n;\n    if (n === 0) return 0;\n    if (m === 0) return 0;\n    if (m === n) return m;\n    if (m === n + 1) return m + 1;\n    if (m === n + 2) return m + 2;\n    if (m === n + 3) return m + 3;\n    if (m === n + 4) return m + 4;\n    if (m === n + 5) return m + 5;\n    if (m === n + 6) return m + 6;\n    if (m === n + 7) return m + 7;\n    if (m === n + 8) return m + 8;\n    if (m === n + 9) return m + 9;\n    if (m === n + 10) return m + 10;\n    if (m === n + 11) return m + 11;\n    if (m === n + 12) return m + 12;\n    if (m === n + 13) return m + 13;\n    if (m === n + 14) return m + 14;\n    if (m === n +"], ["// <func> // TypeScript\n//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x: number[]): number[] {\n  const sorted = x.sort((a, b) => a - b);\n  return sorted.filter((e) => e % 2 === 0);\n}\n\n\nA: You can use Array.prototype.sort() to sort the array and then filter the array to get the desired result.\n\n\nconst uniqueDigits = (arr) => {\n  const sorted = arr.sort((a, b) => a - b);\n  return sorted.filter(x => x % 2 === 0);\n};\n\nconsole.log(uniqueDigits([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, "], ["// <func> // TypeScript\n//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n  const result = [];\n  for (let i = 0; i < arr.length; i++) {\n    const digit = arr[i];\n    if (i < arr.length - 1) {\n      result.push(digit);\n    } else {\n      result.push(result.pop());\n    }\n  }\n  return result;\n}\n\n\nA: You can use Array.prototype.sort() to sort the array in ascending order.\n\n\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst sorted = arr.sort((a, b) => a - b);\n\nconsole.log(sorted);\n\n\n\nA: You can use Array.prototype.sort() to sort the array in ascending order.\n\n\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nconst sorted = arr.sort((a, b) => a - b);\n\nconsole.log(sorted);\n\n\n"], ["// <func> // TypeScript\n//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n: number): number[] {\n    if (n % 2 === 0) {\n        return [n, n * (n - 1)];\n    }\n    return [n, n * (n - 1) + 1];\n}\n"], ["// <func> // TypeScript\n//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n: number): [number, number] {\n    var even_odd_array = [];\n    var even_odd_array_length = 0;\n    var odd_even_array = [];\n    var odd_even_array_length = 0;\n    var i = 1;\n    var j = 1;\n    var k = 1;\n    var l = 1;\n    var m = 1;\n    var n = n;\n    var n_odd = 0;\n    var n_even = 0;\n    var n_odd_array = [];\n    var n_even_array = [];\n    var n_odd_array_length = 0;\n    var n_even_array_length = 0;\n    var i = 1;\n    var j = 1;\n    var k = 1;\n    var l = 1;\n    var m = 1;\n    var n_odd_array_length = 0;\n    var n_even_array_length = 0;\n    var n_odd_array = [];\n    var n_even_array = [];\n    var n_"], ["// <func> // TypeScript\n//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]): number {\n  return arr.reduce((acc, num) => {\n    if (num < 0) {\n      acc += -1;\n    } else {\n      acc += num;\n    }\n    return acc;\n  }, 0);\n}\n\n\nA: You can use Array.prototype.reduce() to get the sum of all the numbers in the array.\n\n"], ["// <func> // TypeScript\n//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr: number[]): boolean {\n  var i = 0;\n  var j = arr.length - 1;\n  var k = arr.length;\n  var l = 0;\n  var m = 0;\n  var n = 0;\n  var o = 0;\n  var p = 0;\n  var q = 0;\n  var r = 0;\n  var s = 0;\n  var t = 0;\n  var u = 0;\n  var v = 0;\n  var w = 0;\n  var x = 0;\n  var y = 0;\n  var z = 0;\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var"], ["// <func> // TypeScript\n//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1: number[], lst2: number[]): string {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return \"NO\";\n  }\n  if (lst1.length === 1 && lst2.length === 1) {\n    return \"YES\";\n  }\n  if (lst1.length === 1 && lst2.length === 2) {\n    return \"YES\";\n  }\n  if (lst1.length === 2 && lst2.length === 2) {\n    return \"YES\";\n  }\n  if (lst1.length === 2 && lst2.length === 3) {\n    return \"YES\";\n  }\n  if (lst1.length === 3 && lst2.length === 3) {\n    return \"YES\";\n  }\n  if (lst1.length === 3 && lst2.length === 4) {\n    return \"YES\";\n  }\n  if (lst1.length === 4 && lst2.length === 4) {\n    return \"YES\";\n  }\n  if (lst1.length === 4 && lst2.length === 5) {\n    return \"YES\";\n  }\n  if (lst1.length === 5 && lst2.length === 5)"], ["// <func> // TypeScript\n//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test: string): {[key: string]: number} {\n    const result: {[key: string]: number} = {};\n    const letters = test.split(\"\");\n    for (let i = 0; i < letters.length; i++) {\n        const letter = letters[i];\n        if (!result[letter]) {\n            result[letter] = 0;\n        }\n        result[letter] += 1;\n    }\n    return result;\n}\n\n\nA: I'm not sure if this is what you are looking for, but you can use the following code:"], ["// <func> // TypeScript\n//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s: string, c: string): [string, boolean] {\n    let result: string = \"\";\n    let resultLength: number = s.length;\n    for (let i = 0; i < resultLength; i++) {\n        if (s[i] === c) {\n            result = result + s[i];\n        }\n    }\n    return [result, true];\n}\n\n\nA: You can use a recursive function."], ["// <func> // TypeScript\n//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst: string[]): string[] {\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        let num = 0;\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] % 2 === 0) {\n                num++;\n            }\n        }\n        result.push(num);\n    }\n    return result;\n}\n\n\nA: I'm not sure if this is what you're looking for, but it's a simple way to do it."], ["// <func> // TypeScript\n//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums: number[]): number {\n  const minSum = 0;\n  const sum = 0;\n  const subArrays = [];\n  for (let i = 0; i < nums.length; i++) {\n    const subArray = nums.slice(i, i + 1);\n    sum += subArray.reduce((sum, subArray) => sum + subArray.reduce((sum, subArray) => sum + subArray[0]), minSum);\n    subArrays.push(subArray);\n  }\n  return minSum;\n}\n\n\n\nA: You can use reduce to find the minimum sum of any non-empty sub-array.\n\n\nconst nums = [2, 3, 4, 1, 2, 4];\nconst minSubArraySum = nums.reduce((sum, num) => sum + num.reduce((sum, sub) => sum + sub, 0), 0);\n\nconsole.log(minSubArraySum);\n\n\n\nA: You can use reduce to find the minimum sum of any non-empty sub-array.\n\n\nconst nums = [2, 3, 4, 1, 2, 4];\nconst minSubArraySum = nums.reduce((sum, num) => sum + num.reduce((sum, sub) => sum + sub, 0), 0);\n\nconsole.log(minSubArraySum);\n\n\n"], ["// <func> // TypeScript\n//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number): number {\n    var bucket_count = 0;\n    var bucket_capacity = capacity;\n    var bucket_size = grid[0].length;\n    var bucket_index = 0;\n    var bucket_index_max = 0;\n    var bucket_index_min = 0;\n    var bucket_index_max_min = 0;\n    var bucket_index_max_min_max = 0;\n    var bucket_index_max_min_max_max = 0;\n    var bucket_index_max_min_max_max_max = 0;\n    var bucket_index_max_min_max_max_max_"], ["// <func> // TypeScript\n//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  let result: number[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if (num > 0) {\n      result.push(num);\n    }\n  }\n  return result;\n}\n"], ["// <func> // TypeScript\n//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    let words: string[] = [];\n    let i: number = 0;\n    let j: number = 0;\n    let k: number = 0;\n    let l: number = 0;\n    let m: number = 0;\n    let n: number = 0;\n    let p: number = 0;\n    let q: number = 0;\n    let r: number = 0;\n    let s: string = \"\";\n    let t: string = \"\";\n    let u: string = \"\";\n    let v: string = \"\";\n    let w: string = \"\";\n    let x: string = \"\";\n    let y: string = \"\";\n    let z: string = \"\";\n    let y: string = \"\";\n    let z: string = \"\";\n    let z: string = \"\";\n    let z: string = \"\";\n    let z: string = \"\";\n    let z: string = \"\";\n    let z: string = \"\";\n    let z: string = \"\";\n    let z: string = \"\";\n    let z: string = \"\";\n    let z: string = \"\";\n    let z: string = \"\";\n    let z: string = \"\";\n    let z: string = \"\";\n    let z: string = \"\";\n    let"], ["// <func> // TypeScript\n//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    var vowels: string[] = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    var vowel_index: number = 0;\n    var vowel_length: number = 0;\n    var vowel_count: number = 0;\n    var vowel_found: boolean = false;\n    var vowel_found_index: number = -1;\n    var vowel_found_length: number = 0;\n    var vowel_found_count: number = 0;\n    var vowel_found_index_end: number = -1;\n    var vowel_found_length_end: number = 0;\n    var vowel_found_count_end: number = 0;\n    var vowel_found_index_start: number = -1;\n    var vowel_found_length_start: number = 0;\n    var vowel_found_count_start: number = 0;\n    var vowel_found_index_end_start: number = -1;\n    var vowel_found_length_end_start: number = 0;\n    var vowel_found_count_end_start: number = 0;\n    var vowel_found_index_start_end: number = -1;\n    var vowel_found_length_start_end: number = 0;\n    var vowel_found_"], ["// <func> // TypeScript\n//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst: string[]): string {\n  var result: string = \"\";\n  var i: number = 0;\n  var len: number = lst.length;\n  var current: string;\n  var next: string;\n  var prev: string;\n  var open: string;\n  var close: string;\n  var open_index: number;\n  var close_index: number;\n  var open_prev: number;\n  var close_prev: number;\n  var open_next: number;\n  var close_next: number;\n  var open_next_index: number;\n  var close_next_index: number;\n  var open_prev_index: number;\n  var close_prev_index: number;\n  var open_prev_next: number;\n  var close_prev_next: number;\n  var open_next_prev: number;\n  var close_next_prev: number;\n  var open_next_next: number;\n  var close_next_next: number;\n  var open_next_prev_index: number;\n  var close_next_prev_index: number;\n  var open_next_prev_next: number;\n  var close_next_prev_next: number;\n  var open_next_prev_next_index: number;\n  var close_next_prev_next_index: number;\n  var open_next"], ["// <func> // TypeScript\n//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n    if (k < 0) {\n        throw new Error('k must be positive');\n    }\n    if (k < 1) {\n        throw new Error('k must be greater than 0');\n    }\n    if (arr.length < k) {\n        throw new Error('arr must be of length k');\n    }\n    let max = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}\n"], ["// <func> // TypeScript\n//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number {\n    if (lst.length === 0) {\n        return 0;\n    }\n    var sum = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (i % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\n\nA: I'm not sure if this is the best way to do it, but it works."], ["// <func> // TypeScript\n//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr: number[], k: number): number {\n  if (k < 1 || k > arr.length) {\n    return 0;\n  }\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n"], ["// <func> // TypeScript\n//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n: number): number[] {\n    let collatz_sequence = [1, 5];\n    let collatz_sequence_sorted = collatz_sequence.sort((a, b) => a - b);\n    let collatz_sequence_sorted_reverse = collatz_sequence_sorted.reverse();\n    let collatz_sequence_sorted_reverse_reverse = collatz_sequence_sorted_reverse.reverse().reverse();\n    let collatz_sequence_sorted_reverse_reverse_reverse = collatz_sequence_sorted_reverse_reverse.reverse().reverse();\n    let collatz_sequence_sorted_reverse_reverse_reverse_reverse = collatz_sequence_sorted_reverse_reverse_reverse.reverse().reverse();\n    let collatz_sequence_sorted_reverse_reverse_reverse_reverse_reverse = collatz_sequence_sorted_reverse_reverse_reverse_reverse.reverse().reverse();\n    let collatz_sequence_sorted_reverse_reverse_reverse_reverse_reverse_reverse = collatz_sequence_sorted_reverse_reverse_reverse_reverse_reverse.reverse().reverse();\n    let collatz"], ["// <func> // TypeScript\n//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date: string): boolean {\n    if (date === null || date === undefined) {\n        return false;\n    }\n    if (date.length < 1 || date.length > 31) {\n        return false;\n    }\n    if (date.length < 1 || date.length > 30) {\n        return false;\n    }\n    if (date.length < 29 || date.length > 28) {\n        return false;\n    }\n    if (date.length < 1 || date.length > 28) {\n        return false;\n    }\n    if (date.length < 1 || date.length > 27) {\n        return false;\n    }\n    if (date.length < 1 || date.length > 26) {\n        return false;\n    }\n    if (date.length < "], ["// <func> // TypeScript\n//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    let words: string[] = [];\n    let words_split: string[] = [];\n    let words_split_length: number = 0;\n    let words_split_odd_order: number = 0;\n    let words_split_length_odd_order: number = 0;\n    let words_split_length_odd_order_odd_order: number = 0;\n    let words_split_length_odd_order_odd_order_odd_order: number = 0;\n    let words_split_length_odd_order_odd_order_odd_order_odd_order: number = 0;\n    let words_split_length_odd_order_odd_order_odd_order_odd_order_odd_order: number = 0;\n    let words_split_length_odd_order_odd_order_odd_order_odd_order_odd_order_odd_order: number = 0;\n    let words_split_length_odd_order_odd_order_odd_order_odd_order_odd_order_odd_order: number = 0;\n    let words_split_length_odd_order_odd_order_odd_order_odd_order_odd_order_odd_order_odd_order: number = 0;\n    let words_split_length_odd_order_odd_order_odd_order_odd_order_odd_order_odd_order_odd_order_odd_order: number = 0;\n"], ["// <func> // TypeScript\n//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]): boolean {\n    if (lst.length < 2) {\n        return false;\n    }\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > lst[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\nA: You can use Array.sort() to sort the array.\n\n"], ["// <func> // TypeScript\n//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1: [number, number], interval2: [number, number]): string {\n  if (interval1.length < interval2.length) {\n    return \"NO\";\n  }\n  if (interval1.length === 0) {\n    return \"NO\";\n  }\n  if (interval2.length === 0) {\n    return \"NO\";\n  }\n  if (interval1[0] === interval2[0]) {\n    return \"YES\";\n  }\n  if (interval1[1] === interval2[1]) {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n"], ["// <func> // TypeScript\n//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]): number | undefined {\n  const product = arr.reduce((acc, num) => {\n    const sign = num < 0 ? -1 : 1;\n    acc += sign * num;\n    return acc;\n  }, 0);\n  const sum = arr.reduce((acc, num) => {\n    const sign = num < 0 ? -1 : 1;\n    acc += sign * num;\n    return acc;\n  }, 0);\n  return sum;\n}\n\nconsole.log(prod_signs([1, 2, 2, -4]));\nconsole.log(prod_signs([0, 1]));\nconsole.log(prod_signs([]));\n\n\n\nA: You can use reduce to get the sum of all the signs of the array.\n\n"], ["// <func> // TypeScript\n//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid: number[][], k: number): number[] {\n  let path = [];\n  let i = 0;\n  let j = 0;\n  let lst = grid;\n  while (i < k) {\n    let lst_i = lst[i];\n    let lst_j = lst[j];\n    if (lst_i < lst"], ["// <func> // TypeScript\n//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n    if (n < 1) {\n        return [];\n    }\n    if (n % 2 === 0) {\n        return [n];\n    }\n    if (n === 1) {\n        return [1];\n    }\n    if (n === 2) {\n        return [1, 2];\n    }\n    if (n === 3) {\n        return [1, 2, 3];\n    }\n    if (n === 4) {\n        return [1, 2, 3, 4];\n    }\n    return [n];\n}\n\n\nA: I think this is a good example of a problem that can be solved with recursion."], ["// <func> // TypeScript\n//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n: number): number {\n    if (n === 0) {\n        return 0;\n    }\n\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        result *= i;\n    }\n\n    return result;\n}\n\n\nA: I'm not sure if this is the best way to do it, but it's the only way I could think of."], ["// <func> // TypeScript\n//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string: string): boolean {\n    let result: boolean = false;\n    let index: number = 0;\n    let lastIndex: number = 0;\n    let lastIndexInString: number = 0;\n    let lastIndexInString2: number = 0;\n    let lastIndexInString3: number = 0;\n    let lastIndexInString4: number = 0;\n    let lastIndexInString5: number = 0;\n    let lastIndexInString6: number = 0;\n    let lastIndexInString7: number = 0;\n    let lastIndexInString8: number = 0;\n    let lastIndexInString9: number = 0;\n    let lastIndexInString10: number = 0;\n    let lastIndexInString11: number = 0;\n    let lastIndexInString12: number = 0;\n    let lastIndexInString13: number = 0;\n    let lastIndexInString14: number = 0;\n    let lastIndexInString15: number = 0;\n    let lastIndexInString16: number = 0;\n    let lastIndexInString17: number = 0;\n    let lastIndexInString18: number = 0;\n    let lastIndexInString19: number = 0;\n    let lastIndexInString20: number = 0;\n    let lastIndexInString21: number = 0;\n    let lastIndexInString22: number = 0;\n   "], ["// <func> // TypeScript\n//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst: number[]): number {\n  var sum = 0;\n  for (var i = 0; i < lst.length; i++) {\n    sum += lst[i * 2];\n  }\n  return sum;\n}\n"], ["// <func> // TypeScript\n//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt: string): boolean {\n    let lastChar: string = txt.charAt(txt.length - 1);\n    if (lastChar === ' ') {\n        return true;\n    }\n    return false;\n}\n"], ["// <func> // TypeScript\n//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr: number[]): number {\n  if (arr.length === 0) {\n    return -1;\n  }\n\n  var maxIndex = -1;\n  var maxValue = arr[0];\n  for (var i = 1; i < arr.length; i++) {\n    if (arr[i] > maxValue) {\n      maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n\n  return maxIndex;\n}\n"], ["// <func> // TypeScript\n//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  if (lst.length === 0) {\n    return [undefined, undefined];\n  }\n\n  let max = Math.max.apply(null, lst);\n  let min = Math.min.apply(null, lst);\n\n  let result = [max, min];\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\n  return result;\n}\n"], ["// <func> // TypeScript\n//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n: number): boolean {\n    if (n < 0) {\n        return false;\n    }\n    if (n % 2 === 0) {\n        return true;\n    }\n    for (let i = 0; i < n; i += 2) {\n        if (n % 2 === 0 && n % 4 === 0) {\n            return true;\n        }\n    }\n    return false;\n}\n"], ["// <func> // TypeScript\n//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n: number): number {\n  if (n < 0) {\n    throw new Error('Special factorial function should be called with positive integer input');\n  }\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return n * special_factorial(n - 1);\n}\n"], ["// <func> // TypeScript\n//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text: string): string {\n    var result: string = text;\n    var i: number;\n    var j: number;\n    var space: string;\n    var space_count: number;\n    var space_count_before: number;\n    var space_count_after: number;\n    var space_count_before_after: number;\n    var space_count_before_after_before: number;\n    var space_count_before_after_after: number;\n    var space_count_before_after_after_after: number;\n    var space_count_before_after_after_after_after: number;\n    var space_count_before_after_after_after_after_after: number;\n    var space_count_before_after_after_after_after_after_after: number;\n    var space_count_before_after_after_after_after_after_after_after_after: number;\n    var space_count_before_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_after_"], ["// <func> // TypeScript\n//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name: string): string {\n    let valid_file_name: string = \"\";\n    let valid_file_name_regex: RegExp = new RegExp(\"^[a-zA-Z0-9_-]+$\");\n    let valid_file_name_len: number = file_name.length;\n    let valid_file_name_len_regex: RegExp = new RegExp(\"^[a-zA-Z0-9_-]+$\");\n    if (valid_file_name_len_regex.test(valid_file_name_len)) {\n        valid_file_name = file_name;\n    } else {\n        valid_file_name = file_name.substring(0, valid_file_name_len);\n        valid_file_name_regex.lastIndex = valid_file_name_len_regex.lastIndex;\n        valid_file_name_regex.lastIndex = valid_file_name_len_regex.lastIndex + 1;\n        valid_file_name_regex.lastIndex = valid_file_name_len_regex.lastIndex + valid_file_name_len;\n        valid_file_name_regex.lastIndex = valid_file_name_len_regex."], ["// <func> // TypeScript\n//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst: number[]): number {\n    var sum = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            sum += lst[i];\n        } else if (i % 4 === 0) {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\n\nA: You can use Array.reduce to get the sum of all elements in the array.\n\n"], ["// <func> // TypeScript\n//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence: string): string {\n    const length = sentence.length;\n    const prime_numbers = [\n        Math.floor(Math.sqrt(length)),\n        Math.floor(length / 2),\n        Math.floor(length / 3),\n        Math.floor(length / 4),\n        Math.floor(length / 5),\n        Math.floor(length / 6),\n        Math.floor(length / 7),\n        Math.floor(length / 8),\n        Math.floor(length / 9),\n        Math.floor(length / 10),\n        Math.floor(length / 11),\n        Math.floor(length / 12),\n        Math.floor(length / 13),\n        Math.floor(length / 14),\n        Math.floor(length / 15),\n        Math.floor(length / 16),\n        Math.floor(length / 17),\n        Math.floor(length / 18),\n        Math.floor(length / 19),\n        Math.floor(length / 20),\n        Math.floor(length / 21),\n        Math.floor(length / 22),\n        Math.floor(length / 23),\n        Math.floor(length / 24),\n        Math.floor(length / 25),\n        Math.floor(length / 26),\n        Math.floor(length / 27),\n        Math"], ["// <func> // TypeScript\n//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x: string, n: string): boolean {\n    if (x === n) {\n        return true;\n    }\n    if (x.length === 0) {\n        return false;\n    }\n    if (n.length === 0) {\n        return false;\n    }\n    if (x.length === n.length) {\n        return x.charAt(0) === n.charAt(0);\n    }\n    if (x.length === n.length) {\n        return x.charAt(0) === n.charAt(n.length - 1);\n    }\n    if (x.length === n.length) {\n        return x.charAt(0) === n.charAt(n.length - 1) && x.charAt(n.length - 1) === n.charAt(0);\n    }\n    if (x.length === n.length) {\n        return x.charAt(0) === n.charAt(n.length - 1) && x.charAt(n.length - 1) === n.charAt(0);\n    }\n    if (x.length === n.length) {\n        return x.charAt(0) === n.charAt(n.length - 1) && x.charAt(n.length - 1) === n.charAt(0);\n    }\n    if (x.length === n.length) {\n        return x.charAt(0"], ["// <func> // TypeScript\n//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums: number[]): number[] {\n  let sorted = [];\n  for (let i = 0; i < nums.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < nums.length; j++) {\n      sum += nums[j];\n    }\n    sorted.push(sum);\n  }\n  return sorted;\n}\n"], ["// <func> // TypeScript\n//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums: number[]): number {\n    let firstDigit = nums[0];\n    let lastDigit = nums[nums.length - 1];\n    let odd = nums.every(num => num % 2 === 1);\n    let oddCount = odd ? nums.length : 0;\n    return oddCount - firstDigit + lastDigit;\n}\n\n\nA: You can use Array.prototype.filter() to get the elements that are greater than 10 and odd.\n\n\nconst nums = [15, -73, 14, -15];\nconst result = nums.filter(num => num >= 10 && num % 2 === 1);\nconsole.log(result);\n\n\n\nA: You can use Array.prototype.filter() to get the elements that are greater than 10 and odd.\n\n\nconst nums = [15, -73, 14, -15];\nconst result = nums.filter(num => num >= 10 && num % 2 === 1);\nconsole.log(result);\n\n\n\nA: You can use Array.prototype.filter() to get the elements that are greater than 10 and odd.\n\n\nconst nums = [15, -73, 14, -15];\nconst result = nums.filter(num => num >= 10 && num % 2 === 1);\nconsole.log(result);\n\n\n\nA: You can use Array.prototype.filter() to get the elements that are greater than 10 and odd.\n\n\nconst nums"], ["// <func> // TypeScript\n//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n: number): number {\n    let a = [1, 3, 7, 13, 21];\n    let result = 0;\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] + a[i + 1] + a[i + 2] == 3) {\n            result += 1;\n        }\n    }\n    return result;\n}\n\n\nA: You can use a recursive function to solve this problem.\n\n"], ["// <func> // TypeScript\n//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst: string[]): string[] {\n  let result: string[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    let sum = 0;\n    for (let j = i + 1; j < lst.length; j++) {\n      sum += lst[j];\n    }\n    result.push(sum);\n  }\n  return result;\n}\n\n\nA: You can use Array.prototype.sort() to sort the array in ascending order by the length of the strings.\n\n\nconst array = ['aa', 'a', 'aaa', 'cd'];\n\nconst sortedArray = array.sort((a, b) => {\n  return a.length - b.length;\n});\n\nconsole.log(sortedArray);\n\n\n\nA: You can use Array.prototype.sort() to sort the array in ascending order by the length of the strings.\n\n\nconst array = ['aa', 'a', 'aaa', 'cd'];\n\nconst sortedArray = array.sort((a, b) => {\n  return a.length - b.length;\n});\n\nconsole.log(sortedArray);\n\n\n"], ["// <func> // TypeScript\n//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n: number, x: number, y: number): number {\n    if (n === 1) {\n        return x;\n    }\n    if (n === 2) {\n        return y;\n    }\n    if (n === 3) {\n        return x + y;\n    }\n    if (n === 4) {\n        return x + y + y;\n    }\n    if (n === 5) {\n        return x + y + y + y;\n    }\n    if (n === 6) {\n        return x + y + y + y + y;\n    }\n    if (n === 7) {\n        return x + y + y + y + y + y;\n    }\n    if (n === 8) {\n        return x + y + y + y + y + y + y;\n    }\n    if (n === 9) {\n        return x + y + y + y + y + y + y + y;\n    }\n    if (n === 10) {\n        return x + y + y + y + y + y + y + y + y;\n    }\n    if (n === 11) {\n        return x + y + y + y + y + y + y + y + y + y;\n    }\n    if (n === 12) {\n        return x + y + y + y + y + y + y + y + y + y + y;\n    }\n    if (n === 13) {\n        return x + y + y + y + y + y + y + y + y + y + y + y;\n    }\n    if (n === 14) {\n        return x + y + y + y + y + y + y + y + y"], ["// <func> // TypeScript\n//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst: number[]): number {\n  if (lst.length === 0) {\n    return 0;\n  }\n  var sum = 0;\n  for (var i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\n\n\nA: I'm not sure if this is what you're looking for, but it's a simple solution to the problem."], ["// <func> // TypeScript\n//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game: number[], guess: number[]): number[] {\n  var guessed = 0;\n  var guesses = game.slice(0, guess.length);\n  var scores = game.slice(0, guess.length);\n\n  for (var i = 0; i < guess.length; i++) {\n    if (game[i] === guess[i]) {\n      guessed += guesses[i] - scores[i];\n    } else {\n      guessed += guesses[i] - scores[i] - guess[i];\n    }\n  }\n\n  return [guessed, guessed];\n}\n"], ["// <func> // TypeScript\n//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name: string, extensions: string[]): string {\n  var result: string = \"\";\n  for (var i: number = 0; i < extensions.length; i++) {\n    var extension: string = extensions[i];\n    if (extension.length > 0) {\n      var extension_name: string = extension.substring(0, extension.length - 1);\n      var extension_strength: number = 0;\n      for (var j: number = 0; j < class_name.length; j++) {\n        var c: string = class_name.substring(j, j + 1);\n        if (c.length > 0) {\n          var c_strength: number = 0;\n          for (var k: number = 0; k < extension_name.length; k++) {\n            var e: string = extension_name.substring(k, k + 1);\n"], ["// <func> // TypeScript\n//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a: string, b: string): boolean {\n    if (a.length > b.length) {\n        return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\nA: You can use the following code:"], ["// <func> // TypeScript\n//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num: number): [number, number] {\n  const even = num % 2 === 0;\n  const odd = num % 2 !== 0;\n  return [even, odd];\n}\n"], ["// <func> // TypeScript\n//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n    var roman: string = \"\";\n    var i: number = number;\n    while (i >= 10) {\n        roman += i.toString();\n        i = i.toString();\n    }\n    return roman;\n}\n\n\nA: You can use the following code to convert a number to roman numerals."], ["// <func> // TypeScript\n//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    if (a < b || b < c) {\n        return false;\n    }\n    if (a > b || b > c) {\n        return false;\n    }\n    if (a == b || b == c) {\n        return true;\n    }\n    return false;\n}\n\n\nA: I think you can use this function:"], ["// <func> // TypeScript\n//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  let max = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > max) {\n      max = words[i].length;\n    }\n  }\n  return words[max];\n}\n"], ["// <func> // TypeScript\n//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number: number, need: number, remaining: number): number[] {\n  if (number <= 0) {\n    return [number, number, number];\n  }\n  if (number <= need) {\n    return [number, number, number];\n  }\n  if (number <= remaining) {\n    return [number, number, number];\n  }\n  return [number, number, number];\n}\n"], ["// <func> // TypeScript\n//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    var result = 0;\n    for (var i = 0; i < operator.length; i++) {\n        var op = operator[i];\n        var op_value = operand[i];\n        var op_value_value = op_value.toString();\n        var op_value_value_value = op_value_value.substring(op_value_value.indexOf('.') + 1);\n        var op_value_value_value_value = op_value_value_value_value.substring(op_value_value_value_value.indexOf('(') + 1, op_value_value_value_value.indexOf(')'));\n        var op_value_value_value_value_value = op_value_value_value_value_value.substring(op_value_value_value_value_value.indexOf('(') + 1, op_value_value_value_value_value.indexOf(')'));\n        var op_value_value_value_value_value_value = op_value_value_value_value_value_value.substring(op_value_value_value_value_value_value.indexOf"], ["// <func> // TypeScript\n//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    if (s[0] === 'a') {\n        return s.substring(1, s.length - 1);\n    }\n    else {\n        return s;\n    }\n}\n\n\nA: You can use a simple regex to match the letters and then reverse the string.\n\n"], ["// <func> // TypeScript\n//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text: string): string | undefined {\n  if (text === '') {\n    return undefined;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest();\n}\n"], ["// <func> // TypeScript\n//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a: number, b: number): number[] {\n    if (a === b) {\n        return [];\n    }\n    if (a < b) {\n        return generate_integers(a, b);\n    }\n    return generate_integers(b, a);\n}\n\n\nA: I'm not sure if this is the best way to do it, but I think it's the simplest way.\n\n"]]