[["/*\nCheck if in given vector of numbers, are any two numbers closer to each other than\ngiven threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n    float min_distance = numeric_limits<float>::max();\n    for(int I=0; I<numbers.size(); i++){\n        float distance = sqrt(pow(numbers[i]-threshold, 2));\n        if(distance < min_distance){\n            min_distance = distance;\n        }\n    }\n    return min_distance < numeric_limits<float>::max();\n}"], ["/*\nInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\nseparate those group into separate strings and return the vector of those.\nSeparate groups are balanced (each open brace is properly closed) and not nested within each other\nIgnore any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> groups;\n    string temp;\n    int open_braces = 0;\n    int close_braces = 0;\n    for(int I=0; I<paren_string.length(); i++){\n        if(paren_string[i] == '('){\n            open_braces++;\n        }\n        else if(paren_string[i] == ')'){\n            if(open_braces == 0){\n                close_braces++;\n            }\n            else{\n                close_braces--;\n            }\n            if(close_braces == 0){\n                groups.push_back(temp);\n                temp.clear();\n            }\n            open_braces = 0;\n        }\n        temp += paren_string[i];\n    }\n    if(open_braces > 0){\n        groups.push_back(temp);\n    }\n    return groups;\n}"], ["/*\nGiven a positive floating point number, it can be decomposed into\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nReturn the decimal part of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n    int integer = 0;\n    int decimals = 0;\n    while(number > 0){\n        decimals++;\n        number /= 10;\n    }\n    float remainder = number;\n    while(remainder > 0){\n        integer++;\n        remainder /= 10;\n    }\n    return (float)integer + (float)decimals / 10.0;\n}"], ["/*\nYou\"re given a vector of deposit and withdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balance of account falls below zero, and\nat that point function should return true. Otherwise it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int sum = 0;\n    for(int I=0; I<operations.size(); i++){\n        if(operations[i]>0){\n            sum += operations[i];\n        }\n    }\n    return sum<0;\n}"], ["/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation\naround the mean of this dataset.\nMean Absolute Deviation is the average absolute difference between each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n    float sum = 0;\n    float mean = 0;\n    for(int I = 0; I < numbers.size(); i++){\n        sum += numbers[i];\n    }\n    mean = sum / numbers.size();\n    float max = numbers[0];\n    float min = numbers[0];\n    for(int I = 1; I < numbers.size(); i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n        if(numbers[i] < min){\n            min = numbers[i];\n        }\n    }\n    float avg = mean;\n    float abs_diff = 0;\n    for(int I = 0; I < numbers.size(); i++){\n        abs_diff += abs(numbers[i] - avg);\n    }\n    float m_abs_diff = abs_diff / numbers.size();\n    float m_mean = mean;\n    float m_max = max;\n    float m_min = min;\n    return sqrt(m_abs_diff);\n}"], ["/*\nInsert a number \"delimeter\" between every two consecutive elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){\n    int n = numbers.size();\n    vector<int> result(n+1, 0);\n    for(int I = 0; I < n; i++){\n        result[i+1] = numbers[i];\n    }\n    for(int I = 1; I <= n; i++){\n        result[i] = result[i-1] + delimeter;\n    }\n    return result;\n}"], ["/*\nInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\nFor each of the group, output the deepest level of nesting of parentheses.\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> nesting_levels;\n    int depth = 0;\n    int max_depth = 0;\n    for(int I = 0; I < paren_string.length(); i++){\n        if(paren_string[i] == '('){\n            depth++;\n            nesting_levels.push_back(depth);\n        }\n        else if(paren_string[i] == ')'){\n            depth--;\n            if(depth == 0){\n                max_depth = max(max_depth, nesting_levels[nesting_levels.size()-1]);\n                nesting_levels.pop_back();\n            }\n        }\n        else if(paren_string[i] == '('){\n            depth--;\n            nesting_levels.push_back(depth);\n        }\n        else if(paren_string[i] == ')'){\n            depth++;\n            if(depth == 0){\n                max_depth = max(max_depth, nesting_levels[nesting_levels.size()-1]);\n                nesting_levels.pop_back();\n            }\n        }\n    }\n    return nesting_levels;\n}"], ["/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n    vector<string> filtered_strings;\n    for(auto s:strings){\n        if(s.find(substring) != string::npos){\n            filtered_strings.push_back(s);\n        }\n    }\n    return filtered_strings;\n}"], ["/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the integers in a vector.\nEmpty sum should be equal to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    vector<int> sum, prod;\n    for(int I=0; I<numbers.size(); i++){\n        sum.push_back(numbers[i]);\n        prod.push_back(numbers[i]*numbers[i]);\n    }\n    return prod;\n}"], ["/*\nFrom a given vector of integers, generate a vector of rolling maximum element found until given moment\nin the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    int max_so_far = numbers[0];\n    vector<int> max_so_far_vector;\n    for(int I=1; I<numbers.size(); i++){\n        if(numbers[i] > max_so_far){\n            max_so_far = numbers[i];\n            max_so_far_vector.push_back(max_so_far);\n        }\n        else if(numbers[i] == max_so_far){\n            max_so_far_vector.push_back(max_so_far);\n        }\n    }\n    return max_so_far_vector;\n}"], ["#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins with a supplied string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n    string s = str;\n    int len = s.length();\n    int start = 0;\n    int end = 0;\n    while(start < len){\n        if(s[start] == s[end]){\n            end++;\n        }\n        start++;\n        end++;\n    }\n    string palindrome = s.substr(start, end-start+1);\n    return palindrome;\n}"], ["/*\nInput are two strings a and b consisting only of 1s and 0s.\nPerform binary XOR on these inputs and return result also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    string result=\"\";\n    for(int I=0;i<a.length();i++){\n        if(a[i]=='1') result+='0';\n        else result+='1';\n    }\n    for(int I=0;i<b.length();i++){\n        if(b[i]=='1') result+='0';\n        else result+='1';\n    }\n    return result;\n}"], ["/*\nOut of vector of strings, return the longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the input vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    if(strings.empty()){\n        return \"\";\n    }\n    string max = strings[0];\n    for(string s:strings){\n        if(max.length() < s.length()){\n            max = s;\n        }\n    }\n    return max;\n}"], ["/*\nReturn a greatest common divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    int gcd = 1;\n    while(b != 0){\n        gcd = a % b;\n        a = b;\n        b = gcd;\n    }\n    return a;\n}"], ["/*\nReturn vector of all prefixes from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> prefixes;\n    int n = str.length();\n    for(int I = 0; I < n; i++){\n        string prefix = str.substr(0, i+1);\n        if(prefixes.count(prefix) == 0){\n            prefixes.push_back(prefix);\n        }\n    }\n    return prefixes;\n}"], ["/*\nReturn a string containing space-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    string s;\n    for(int I=0; I<n; i++){\n        s += to_string(i);\n    }\n    return s;\n}"], ["/*\nGiven a string, find out how many distinct characters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){\n    int count = 0;\n    for(int I=0; I<str.length(); i++){\n        char c = str[i];\n        if(c >= 'a' && c <= 'z'){\n            if(count == 0){\n                count++;\n            }\n            else if(count == 1){\n                count++;\n            }\n            else{\n                count++;\n            }\n        }\n        else if(c >= 'A' && c <= 'Z'){\n            if(count == 0){\n                count++;\n            }\n            else if(count == 1){\n                count++;\n            }\n            else{\n                count++;\n            }\n        }\n        else{\n            count++;\n        }\n    }\n    return count;\n}"], ["/*\nInput to this function is a string representing musical notes in a special ASCII format.\nYour task is to parse this string and return vector of integers corresponding to how many beats does each\nnot last.\n\nHere is a legend:\n\"o\" - whole note, lasts four beats\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){\n    vector<int> beats;\n    int beat_count = 0;\n    for(int I = 0; I < music_string.length(); i++){\n        if(music_string[i] == 'o' || music_string[i] == '|'){\n            if(beat_count == 0){\n                beat_count = 1;\n            }\n            else{\n                beat_count++;\n            }\n        }\n        else if(music_string[i] == 'o' || music_string[i] == '|'){\n            if(beat_count == 1){\n                beat_count = 2;\n            }\n            else{\n                beat_count++;\n            }\n        }\n        else if(music_string[i] == '.' || music_string[i] == '|'){\n            if(beat_count == 2){\n                beat_count = 3;\n            }\n            else{\n                beat_count++;\n            }\n        }\n        else{\n            beat_count = 0;\n        }\n    }\n    return beats;\n}"], ["/*\nFind how many times a given substring can be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n    int count=0;\n    for(int I=0;I<str.length();i++){\n        if(str[i]==substring[0]){\n            count++;\n            for(int j=i+1;j<str.length();j++){\n                if(str[j]==substring[1]){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}"], ["/*\nInput is a space-delimited string of numberals from \"zero\" to \"nine\".\nValid choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\", 'six\", 'seven\", \"eight\" and \"nine\".\nReturn the string with numbers sorted from smallest to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n    map<char, int> num_map;\n    for(int I=0; I<numbers.length(); i++){\n        char c=numbers[i];\n        num_map[c]++;\n    }\n    string sorted_numbers;\n    for(map<char, int>::iterator it=num_map.begin(); it!=num_map.end(); it++){\n        sorted_numbers+=it->second+\" \";\n    }\n    sorted_numbers.pop_back();\n    return sorted_numbers;\n}"], ["/*\nFrom a supplied vector of numbers (of length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n    float min_val = numbers[0];\n    float max_val = numbers[0];\n    for(int I = 1; I < numbers.size(); i++){\n        if(numbers[i] < min_val){\n            min_val = numbers[i];\n        }\n        if(numbers[i] > max_val){\n            max_val = numbers[i];\n        }\n    }"], ["/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){\n    float min = numbers[0];\n    float max = numbers[0];\n    for(int I=1; I<numbers.size(); i++){\n        if(numbers[i]<min){\n            min = numbers[i];\n        }\n        if(numbers[i]>max){\n            max = numbers[i];\n        }\n    }\n    float factor = 1.0/max-min;\n    vector<float> rescaled;\n    for(int I=0; I<numbers.size(); i++){\n        rescaled.push_back(numbers[i]*factor);\n    }\n    return rescaled;\n}"], ["/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n    list_any filtered_values;\n    for(auto value:values){\n        if(value.type() == typeid(int)){\n            filtered_values.push_back(value);\n        }\n    }\n    return filtered_values;\n}"], ["/*\nReturn length of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n    int len=0;\n    while(str[len]!='\\0'){\n        len++;\n    }\n    return len;\n}"], ["/*\nFor a given number n, find the largest number that divides n evenly, smaller than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int largest = n;\n    int divisors[100000];\n    for(int I = 1; I <= n; i++){\n        if(n % I == 0){\n            divisors[i] = i;\n        }\n    }\n    for(int I = 1; I <= n; i++){\n        if(n % I == 0 && divisors[i] > divisors[n]){\n            largest = i;\n        }\n    }\n    return largest;\n}"], ["/*\nReturn vector of prime factors of given integer in the order from smallest to largest.\nEach of the factors should be vectored number of times corresponding to how many times it appeares in factorization.\nInput number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> factors;\n    int i, j, k, l;\n    for(i=2; i*i<=n; i++){\n        if(n%i==0){\n            for(j=2; j*j<=i; j++){\n                if(i%j==0){\n                    k=i/j;\n                    l=j*i/k;\n                    factors.push_back(k);\n                    factors.push_back(l);\n                }\n            }\n        }\n    }\n    return factors;\n}"], ["/*\nFrom a vector of integers, remove all elements that occur more than once.\nKeep order of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n    sort(numbers.begin(), numbers.end());\n    int n = numbers.size();\n    int I = 0;\n    int j = 1;\n    while(i < n){\n        if(numbers[i] == numbers[j]){\n            j++;\n        }else{\n            numbers.erase(numbers.begin()+i, numbers.begin()+j);\n            i++;\n            j = 1;\n        }\n    }\n    return numbers;\n}"], ["/*\nFor a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring flip_case(string str){\n    string rev_str;\n    for(int I=str.length()-1;i>=0;i--){\n        char ch=str[i];\n        if(islower(ch)){\n            rev_str+=uppercase[ch-'a'];\n        }\n        else{\n            rev_str+=lowercase[ch-'a'];\n        }\n    }\n    return rev_str;\n}"], ["/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for(int I = 0; I < strings.size(); i++){\n        result += strings[i];\n        if(i != strings.size() - 1){\n            result += \" \";\n        }\n    }\n    return result;\n}"], ["/*\nFilter an input vector of strings only for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> filtered;\n    for(auto s:strings){\n        if(s.substr(0, prefix.length()) == prefix){\n            filtered.push_back(s);\n        }\n    }\n    return filtered;\n}"], ["/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> ret;\n    for(int I=0; I<l.size(); i++){\n        if(l[i]>0){\n            ret.push_back(l[i]);\n        }\n    }\n    return ret;\n}"], ["/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if(n<=1)\n        return false;\n    for(int I=2;I*i<=n;i++){\n        if(n%i==0)\n            return false;\n    }\n    return true;\n}"], ["#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficients of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if there are many. \n    Moreover, find_zero only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n    int n=xs.size();\n    double x=0;\n    for (int I=0;I<n;i++)\n    {\n        if (xs[i]>0)\n        {\n            x=xs[i];\n            break;\n        }\n    }\n    if (x==0)\n    {\n        return -0.5;\n    }\n    double sum=0;\n    for (int I=0;i<n;i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}"], ["/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\nto the values of the corresponding indicies of l, but sorted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n    vector<int> l' = l;\n    sort(l.begin(), l.end());\n    for(int I = 0; I < l.size()/3; i++){\n        l[i] = l[i*3+1];\n        l[i*3+1] = l[i*3+2];\n        l[i*3+2] = l[i];\n    }\n    return l';\n}"], ["/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    sort(l.begin(), l.end());\n    vector<int> res;\n    for(int I=0; I<l.size(); i++){\n        if(res.size()==0 || l[i]<res.back()){\n            res.push_back(l[i]);\n        }\n    }\n    return res;\n}"], ["/*\nReturn maximum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n    float max = l[0];\n    for(int I=1; I<l.size(); i++){\n        if(l[i]>max){\n            max = l[i];\n        }\n    }\n    return max;\n}"], ["/*\nReturn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int count=0;\n    if(n%11==0 || n%13==0){\n        count=1;\n    }\n    if(n%7==0){\n        count=2;\n    }\n    if(n%3==0){\n        count=3;\n    }\n    if(count==0){\n        return n;\n    }\n    return n*count;\n}"], ["/*\nThis function takes a vector l and returns a vector l' such that\nl' is identical to l in the odd indicies, while its values at the even indicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n    vector<float> l_copy;\n    for(int I=0; I<l.size(); i++){\n        if(i%2==0){\n            l_copy.push_back(l[i]);\n        }\n    }\n    sort(l_copy.begin(), l_copy.end());\n    vector<float> l_sorted;\n    for(int I=0; I<l_copy.size(); i++){\n        l_sorted.push_back(l_copy[i]);\n    }\n    return l_sorted;\n}"], ["#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string encoded with encode_cyclic function. Returns decoded string. \n    */\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}"], ["/*\nprime_fib returns n-th number that is a Fibonacci number and it's also prime.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    int I,j,temp,temp1,temp2,temp3;\n    if(n<=1)\n        return n;\n    if(n==2)\n        return 2;\n    if(n==3)\n        return 3;\n    if(n==4)\n        return 5;\n    if(n==5)\n        return 89;\n    for(i=2;i<=sqrt(n);i++){\n        if(n%i==0){\n            temp=n;\n            n=i;\n            i=temp/i;\n            continue;\n        }\n        if(n%i==0 && n!=i*i){\n            temp1=n;\n            n=i*i;\n            i=temp1/i;\n            continue;\n        }\n        temp2=n;\n        n=i*i;\n        i=temp2/i;\n        if(n<=1)\n            return n;\n    }\n    temp3=n;\n    n=temp3/i;\n    return n;\n}"], ["/*\ntriples_sum_to_zero takes a vector of integers as an input.\nit returns true if there are three distinct elements in the vector that\nsum to zero, and false otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    int sum = 0;\n    for(int I = 0; I < l.size(); i++){\n        sum += l[i];\n        if(sum == 0){\n            return true;\n        }\n    }\n    return false;\n}"], ["/*\nImagine a road that's a perfectly straight infinitely long line.\nn cars are driving left to right;  simultaneously, a different set of n cars\nare driving right to left.   The two sets of cars start out being very far from\neach other.  All cars move in the same speed.  Two cars are said to collide\nwhen a car that's moving left to right hits a car that's moving right to left.\nHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\nin their trajectory as if they did not collide.\n\nThis function outputs the number of such collisions.\n*/\n#include<stdio.h>\nusing namespace std;\nint car_race_collision(int n){\n    int count=0;\n    for(int I=0; I<n; i++){\n        for(int j=i+1; j<n; j++){\n            if(i==j){\n                continue;\n            }\n            if(i==1){\n                if(j==n-1){\n                    count++;\n                }\n            }\n            else if(i==n-1){\n                if(j==0){\n                    count++;\n                }\n            }\n            else{\n                if(i>j){\n                    int temp=i;\n                    i=j;\n                    j=temp;\n                }\n                if(i<j){\n                    int temp=i;\n                    i=j;\n                    j=temp;\n                }\n                if(i==j){\n                    continue;\n                }\n                if(i==1){\n                    if(j==n-1){\n                        count++;\n                    }\n                }\n                else if(i==n-1){\n                    if(j==0){\n                        count++;\n                    }\n                }\n                else{\n                    if(i>j){\n                        int temp=i;\n                        i=j;\n                        j=temp;\n                    }\n                    if(i<j){\n                        int temp=i;\n                        i=j;\n                        j=temp;\n                    }"], ["/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    vector<int> r;\n    for(int I=0; I<l.size(); i++){\n        r.push_back(l[i]+1);\n    }\n    return r;\n}"], ["/*\npairs_sum_to_zero takes a vector of integers as an input.\nit returns true if there are two distinct elements in the vector that\nsum to zero, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    int n=l.size();\n    for(int I=0;I<n-1;i++){\n        int sum=l[i]+l[i+1];\n        if(sum==0){\n            return true;\n        }\n    }\n    return false;\n}"], ["/*\nChange numerical base of input number x to base.\nreturn string representation after the conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n    string s;\n    if(x<=0){\n        return \"0\";\n    }\n    if(base==1){\n        s=to_string(x);\n        return s;\n    }\n    int rem=x%base;\n    if(rem==0){\n        s=to_string(x/base);\n        return s;\n    }\n    s=to_string(x/base)+\".\"+change_base(rem,base);\n    return s;\n}"], ["/*\nGiven length of a side and high return area for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n    float s = a*h/2;\n    return s*s;\n}"], ["/*\nThe Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if(n<=1){\n        return n;\n    }\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}"], ["/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    int n = l.size();\n    if(n%2==0){\n        return (l[n/2-1]+l[n/2])/2;\n    }\n    else{\n        return l[n/2];\n    }\n}"], ["/*\nChecks if given string is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n    int len = text.length();\n    for(int I = 0; I < len/2; i++){\n        if(text[i] != text[len-i-1]){\n            return false;\n        }\n    }\n    return true;\n}"], ["/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n    int rem=n%p;\n    return rem?modp(rem,p):p;\n}"], ["#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    // takes as input string encoded with encode_shift function. Returns decoded string.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26-(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}"], ["/*\nremove_vowels is a function that takes string and returns string without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string result;\n    for(int I=0; I<text.length(); i++){\n        if(isalpha(text[i])){\n            result += text[i];\n        }\n    }\n    return result;\n}"], ["/*\nReturn true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n    int n=l.size();\n    for(int I=0; I<n; i++){\n        if(l[i]>t){\n            return false;\n        }\n    }\n    return true;\n}"], ["/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    int sum=x+y;\n    return sum;\n}"], ["/*\nCheck if two words have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n    if(s0.length()!=s1.length()){\n        return false;\n    }\n    for(int I=0;I<s0.length();i++){\n        if(s0[i]!=s1[i]){\n            return false;\n        }\n    }\n    return true;\n}"], ["/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if(n<=1){\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}"], ["/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int i=0,j=0;\n    while(i<brackets.length()){\n        if(brackets[i]=='<' && brackets[j]=='>'){\n            if(i+1<brackets.length() && brackets[i+1]=='<' && brackets[j+1]=='>'){\n                i++;\n                j++;\n            }else{\n                return false;\n            }\n        }else if(brackets[i]=='<' && brackets[j]=='>'){\n            if(i+1<brackets.length() && brackets[i+1]=='<' && brackets[j+1]=='>'){\n                i++;\n                j++;\n            }else{\n                return false;\n            }\n        }else if(brackets[i]=='>' && brackets[j]=='>'){\n            if(i+1<brackets.length() && brackets[i+1]=='<' && brackets[j+1]=='>'){\n                i++;\n                j++;\n            }else{\n                return false;\n            }\n        }else if(brackets[i]=='>' && brackets[j]=='>'){\n            if(i+1<brackets.length() && brackets[i+1]=='<' && brackets[j+1]=='>'){\n                i++;\n                j++;\n            }else{\n                return false;\n            }\n        }else{\n            i++;\n        }\n    }\n    return true;\n}"], ["/*\nReturn true is vector elements are monotonically increasing or decreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n    if(l.size()==1){\n        return true;\n    }\n    float min=l[0];\n    for(int I=1; I<l.size(); i++){\n        if(l[i]<min){\n            return false;\n        }\n        if(l[i]>min){\n            min=l[i];\n        }\n    }\n    return true;\n}"], ["/*\nReturn sorted unique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    sort(l1.begin(),l1.end());\n    sort(l2.begin(),l2.end());\n    int n1=l1.size();\n    int n2=l2.size();\n    vector<int> res;\n    for(int I=0;I<n1;i++){\n        if(l1[i]==l2[i]){\n            res.push_back(l1[i]);\n        }\n    }\n    return res;\n}"], ["/*\nReturn the largest prime factor of n. Assume n > 1 and is not a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int i, j, k;\n    int max_prime = 1;\n    for(i=2; i*i<=n; i++){\n        if(n%i==0){\n            j=i;\n            while(j*j<=n){\n                if(n%j==0){\n                    k=j;\n                    break;\n                }\n                j=j*j;\n            }\n            if(k>max_prime){\n                max_prime = k;\n            }\n        }\n    }\n    return max_prime;\n}"], ["/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum=0;\n    for(int I=1;i<=n;i++){\n        sum+=i;\n    }\n    return sum;\n}"], ["/*\nbrackets is a string of '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int i=0,j=0;\n    while(i<brackets.length()){\n        if(brackets[i]=='('){\n            if(j==0){\n                return true;\n            }\n            if(brackets[j]==')'){\n                j++;\n            }\n        }\n        else if(brackets[i]==')'){\n            if(j==0){\n                return true;\n            }\n            if(brackets[j-1]=='('){\n                j--;\n            }\n        }\n        i++;\n    }\n    return false;\n}"], ["/*\nxs represent coefficients of a polynomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> result;\n    for(int I=0; I<xs.size(); i++){\n        result.push_back(xs[i] + xs[i+1]*x + xs[i+2]*x*x + ...);\n    }\n    return result;\n}"], ["/*\nThe FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfibfib(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    if(n<=1)\n        return n;\n    return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n}"], ["/*\nWrite a function vowels_count which takes a string representing a word as input and returns the number of vowels in the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'. \nHere, 'y' is also a vowel, but only when it is at the end of the given word.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    int count=0;\n    for(int I=0; I<s.length(); i++){\n        if(s[i]=='a' || s[i]=='e' || s[i]=='i' || s[i]=='o' || s[i]=='u'){\n            count++;\n        }\n    }\n    return count;\n}"], ["/*\nCircular shift the digits of the integer x, shift the digits right by shift\nand return the result as a string.\nIf shift > number of digits, return digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n    string digits;\n    if(shift>x){\n        digits = digits.substr(0,x);\n        digits = digits.substr(shift,x-shift);\n        digits = digits.substr(0,shift);\n    }\n    else{\n        digits = digits.substr(0,x);\n        digits = digits.substr(shift,x-shift);\n        digits = digits.substr(shift,x);\n    }\n    return digits;\n}"], ["/*\nTask\nWrite a function that takes a string as input and returns the sum of the upper characters only's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum=0;\n    for(int I=0;I<s.length();i++){\n        if(isupper(s[i])){\n            sum+=s[i]-'A';\n        }\n    }\n    return sum;\n}"], ["/*\nIn this task, you will be given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this basket contains \napples, oranges, and mango fruits. Given the string that represents the total number of \nthe oranges and apples and an integer that represent the total number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n    int count=0;\n    for(int I=0;I<n;i++){\n        if(s[i]=='o'){\n            count++;\n        }\n        else if(s[i]=='a'){\n            count--;\n        }\n    }\n    return count;\n}"], ["/*\nGiven a vector representing a branch of a tree that has non-negative integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked node should be the node with the smallest even value.\nIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\nThe plucked node should be returned in a vector, { smalest_value, its index },\nIf there are no even values or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    int n = arr.size();\n    int min_val = arr[0];\n    int min_index = 0;\n    for(int I = 1; I < n; i++){\n        if(arr[i] < min_val){\n            min_val = arr[i];\n            min_index = i;\n        }\n    }\n    return {min_val, min_index};\n}"], ["/*\nYou are given a non-empty vector of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or equal to the value of the integer itself. \nThe frequency of an integer is the number of times it appears in the vector.\nIf no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    int n = lst.size();\n    int max = 0;\n    for(int I = 0; I < n; i++){\n        if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n    for(int I = 0; I < n; i++){\n        if(lst[i] == max){\n            return max;\n        }\n    }\n    return -1;\n}"], ["/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start with the minimum value,\nthen maximum of the remaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n    int n = lst.size();\n    if(n==1){\n        return lst;\n    }\n    int min_idx = 0;\n    int max_idx = n-1;\n    while(min_idx<max_idx){\n        int mid = (min_idx+max_idx)/2;\n        if(lst[mid]>lst[mid+1]){\n            swap(lst[mid],lst[mid+1]);\n            min_idx = mid+1;\n        }\n        else{\n            max_idx = mid-1;\n        }\n    }\n    swap(lst[min_idx],lst[max_idx]);\n    return strange_sort_list(lst);\n}"], ["/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if the three sides form a valid triangle. \nOtherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n    float sum=a+b+c;\n    float d=sqrt(pow(sum-a,2)+pow(sum-b,2)+pow(sum-c,2));\n    return d;\n}"], ["/*\nWrite a function that returns true if the object q will fly, and false otherwise.\nThe object q will fly if it's balanced (it is a palindromic vector) and the sum of its elements is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) \u279e false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) \u279e false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) \u279e true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) \u279e true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n    int sum=0;\n    for(int I=0;I<q.size();i++){\n        sum+=q[i];\n    }\n    if(sum<=w){\n        return true;\n    }\n    return false;\n}"], ["/*\nGiven a vector arr of integers, find the minimum number of elements that\nneed to be changed to make the vector palindromic. A palindromic vector is a vector that\nis read the same backwards and forwards. In one change, you can change one element to any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n    int n = arr.size();\n    int min_change = INT_MAX;\n    for(int I = 0; I < n; i++){\n        int change = 1;\n        for(int j = I+1; j < n; j++){\n            if(arr[i] != arr[j]){\n                change++;\n            }\n        }\n        if(change < min_change){\n            min_change = change;\n        }\n    }\n    return min_change;\n}"], ["/*\nWrite a function that accepts two vectors of strings and returns the vector that has \ntotal number of chars in the all strings of the vector less than the other vector.\n\nif the two vectors have the same number of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) \u279e {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) \u279e {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) \u279e {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) \u279e {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) \u279e {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int n1=lst1.size();\n    int n2=lst2.size();\n    int sum=0;\n    for(int I=0;I<n1;i++){\n        sum+=lst1[i].length();\n    }\n    for(int I=0;i<n2;i++){\n        sum+=lst2[i].length();\n    }\n    vector<string> res;\n    if(sum==n1*n2){\n        res=lst1;\n    }\n    else{\n        res=lst2;\n    }\n    return res;\n}"], ["/*\nWrite a function that returns true if the given number is the multiplication of 3 prime numbers\nand false otherwise.\nKnowing that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n    int b, c, d;\n    b = a/2;\n    for(int I=2; I<=b; i++){\n        if(a%i==0){\n            return false;\n        }\n    }\n    c = a%b;\n    if(c==0){\n        return true;\n    }\n    for(int I=b+1; I<=a; i++){\n        if(a%i==0){\n            return false;\n        }\n    }\n    d = a%b;\n    if(d==0){\n        return true;\n    }\n    return false;\n}"], ["/*\nYour task is to write a function that returns true if a number x is a simple\npower of n and false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n    int i=0;\n    while(n>1){\n        if(n%2==0){\n            if(x%n==0){\n                return true;\n            }\n            n/=2;\n        }\n        else{\n            n=n*2;\n        }\n        i++;\n    }\n    return false;\n}"], ["/*\nWrite a function that takes an integer a and returns true \nif this ingeger is a cube of some integer number.\nNote: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscube(int a){\n    if(a<0) return false;\n    int b=abs(a);\n    if(b==1) return true;\n    if(b==2) return iscube(b);\n    if(b==3) return iscube(b*b);\n    if(b==4) return iscube(b*b*b);\n    if(b==5) return iscube(b*b*b*b);\n    if(b==6) return iscube(b*b*b*b*b);\n    if(b==7) return iscube(b*b*b*b*b*b);\n    if(b==8) return iscube(b*b*b*b*b*b*b);\n    if(b==9) return iscube(b*b*b*b*b*b*b*b);\n    if(b==10) return iscube(b*b*b*b*b*b*b*b*b);\n    return false;\n}"], ["/*\nYou have been tasked to write a function that receives \na hexadecimal number as a string and counts the number of hexadecimal \ndigits that are primes (prime number, or a prime, is a natural number \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote: you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n    int count=0;\n    for(int I=0; I<num.length(); i++){\n        if(num[i]=='0'){\n            count++;\n        }\n        else if(num[i]=='1'){\n            count++;\n        }\n        else if(num[i]=='2'){\n            count++;\n        }\n        else if(num[i]=='3'){\n            count++;\n        }\n        else if(num[i]=='4'){\n            count++;\n        }\n        else if(num[i]=='5'){\n            count++;\n        }"], ["/*\nYou will be given a number in decimal form and your task is to convert it to\nbinary format. The function should return a string, with each character representing a binary\nnumber. Each character in the string will be '0' or '1'.\n\nThere will be an extra couple of characters \"db\" at the beginning and at the end of the string.\nThe extra characters are there to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n    string binary;\n    int binary_length = 0;\n    while(decimal>0){\n        int remainder = decimal%2;\n        binary[binary_length] = remainder+'0';\n        decimal/=2;\n        binary_length++;\n    }\n    binary.insert(binary_length, '1');\n    binary.insert(binary_length, '0');\n    return binary;\n}"], ["/*\nYou are given a string s.\nYour task is to check if the string is happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    int n = s.length();\n    if(n<3){\n        return false;\n    }\n    int count[3] = {0,0,0};\n    for(int I=0;I<n;i++){\n        if(s[i]==s[i+1]){\n            count[s[i]-'a']++;\n        }else{\n            count[s[i]-'a']=0;\n        }\n    }\n    for(int I=0;i<3;i++){\n        if(count[i]==2){\n            return true;\n        }\n    }\n    return false;\n}"], ["/*\nIt is the last week of the semester and the teacher has to give the grades\nto students. The teacher has been making her own algorithm for grading.\nThe only problem is, she has lost the code she used for grading.\nShe has given you a vector of GPAs for some students and you have to write \na function that can output a vector of letter grades using the following table:\n         GPA       |    Letter grade\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> letter_grades;\n    for(int I=0; I<grades.size(); i++){\n        if(grades[i]>=4.0){\n            letter_grades.push_back(\"A+\");\n        }else if(grades[i]>=3.7){\n            letter_grades.push_back(\"A\");\n        }else if(grades[i]>=3.3){\n            letter_grades.push_back(\"A-\");\n        }else if(grades[i]>=3.0){\n            letter_grades.push_back(\"B+\");\n        }else if(grades[i]>=2.7){\n            letter_grades.push_back(\"B\");\n        }"], ["/*\nWrite a function that takes a string and returns true if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n    int len = str.length();\n    for(int I = 2; I*i <= len; i++){\n        if(str[i] == '0' || str[i] == '1'){\n            continue;\n        }\n        for(int j = i*i; j < len; j += i){\n            if(str[j] != str[i] && str[j] != '0' && str[j] != '1'){\n                return false;\n            }\n        }\n    }\n    return true;\n}"], ["/*\nGiven a positive integer n, return the count of the numbers of n-digit\npositive integers that start or end with 1.\n*/\n#include<stdio.h>\nusing namespace std;\nint starts_one_ends(int n){\n    int count=0;\n    while(n>0){\n        n/=10;\n        count++;\n    }\n    return count;\n}"], ["/*\nGiven a positive integer N, return the total sum of its digits in binary.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 \u2264 N \u2264 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    string s;\n    int sum=0;\n    while(N>0){\n        int rem=N%10;\n        s+=rem;\n        N/=10;\n    }\n    while(s.length()>0){\n        sum+=stoi(s);\n        s=\"\";\n    }\n    return sum==0? \"0\" : s;\n}"], ["/*\nGiven a non-empty vector of integers lst. add the even elements that are at odd indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum=0;\n    for(int I=0; I<lst.size(); i+=2){\n        sum+=lst[i];\n    }\n    return sum;\n}"], ["/*\nWrite a function that takes a string and returns an ordered version of it.\nOrdered version of string, is a string where all words (separated by space)\nare replaced by a new word where all the characters arranged in\nascending order based on ascii value.\nNote: You should keep the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    string res;\n    sort(s.begin(),s.end());\n    for(int I=0;i<s.length();i++){\n        res+=s[i];\n    }\n    return res;\n}"], ["/*\nYou are given a 2 dimensional data, as a nested vectors,\nwhich is similar to matrix, however, unlike matrices,\neach row may contain a different number of columns.\nGiven lst, and integer x, find integers x in the vector,\nand return vector of vectors, {{x1, y1}, {x2, y2} ...} such that\neach vector is a coordinate - {row, columns}, starting with 0.\nSort coordinates initially by rows in ascending order.\nAlso, sort coordinates of the row by columns in descending order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> res;\n    int n = lst.size();\n    vector<int> row(n, 0);\n    vector<int> col(n, 0);\n    for(int I = 0; I < n; i++){\n        for(int j = 0; j < n; j++){\n            if(lst[i][j] == x){\n                row[i] = col[j] = 1;\n                break;\n            }\n        }\n    }\n    sort(row.begin(), row.end());\n    sort(col.begin(), col.end());\n    res.push_back(row);\n    res.push_back(col);\n    return res;\n}"], ["/*\nGiven a vector of non-negative integers, return a copy of the given vector after sorting,\nyou will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n    int n = array.size();\n    if(n%2==1){\n        reverse(array.begin(),array.end());\n    }\n    sort(array.begin(),array.end());\n    return array;\n}"], ["/*\nCreate a function encrypt that takes a string as an argument and\nreturns a string encrypted with the alphabet being rotated. \nThe alphabet should be rotated in a manner such that the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n    string result;\n    int n=s.length();\n    int i=0;\n    while(i<n){\n        result+=s[i];\n        i++;\n    }\n    int j=0;\n    while(j<n){\n        result+=s[n-j-1];\n        j++;\n    }\n    return result;\n}"], ["/*\nYou are given a vector of integers.\nWrite a function next_smallest() that returns the 2nd smallest element of the vector.\nReturn None if there is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnext_smallest({}) == None\nnext_smallest({1, 1}) == None\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint next_smallest(vector<int> lst){\n    int min = lst[0];\n    for(int I=1; I<lst.size(); i++){\n        if(lst[i]<min){\n            min = lst[i];\n        }\n    }\n    return min;\n}"], ["/*\nYou'll be given a string of words, and your task is to count the number\nof boredoms. A boredom is a sentence that starts with the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int count=0;\n    for(int I=0;I<S.length();i++){\n        if(S[i]=='I'){\n            count++;\n        }\n    }\n    return count;\n}"], ["/*\nCreate a function that takes 3 numbers.\nReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\nReturns false in any other cases.\n\nExamples\nany_int(5, 2, 7) \u279e true\n\nany_int(3, 2, 2) \u279e false\n\nany_int(3, -2, 1) \u279e true\n\nany_int(3.6, -2.2, 2) \u279e false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n    if(a+b+c!=c){\n        return false;\n    }\n    if(a<0 || b<0 || c<0){\n        return false;\n    }\n    return true;\n}"], ["/*\nWrite a function that takes a message, and encodes in such a \nway that it swaps case of all letters, replaces all vowels in \nthe message with the letter that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume only letters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n    string result;\n    for(int I=0; I<message.length(); i++){\n        if(isalpha(message[i])){\n            char temp = message[i];\n            message[i] = tolower(temp);\n            message[i+1] = tolower(message[i+1]);\n            message[i+2] = toupper(message[i+1]);\n            message[i+1] = temp;\n        }\n        result += message[i];\n    }\n    return result;\n}"], ["/*\nYou are given a vector of integers.\nYou need to find the largest prime value and return the sum of its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n    int max_num=lst[0];\n    int sum=0;\n    for(int I=1;I<lst.size();i++){\n        if(lst[i]>max_num){\n            max_num=lst[i];\n        }\n        sum+=lst[i];\n    }\n    return sum;\n}"], ["/*\nGiven a map, return true if all keys are strings in lower \ncase or all keys are strings in upper case, else return false.\nThe function should return false is the given map is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n    if(dict.empty()){\n        return true;\n    }\n    string key,value;\n    for(auto it=dict.begin();it!=dict.end();it++){\n        key=it->first;\n        value=it->second;\n        if(key.tolower()!=key){\n            return false;\n        }\n        if(value.tolower()!=value){\n            return false;\n        }\n    }\n    return true;\n}"], ["/*\nImplement a function that takes an non-negative integer and returns a vector of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n    vector<int> res;\n    for(int I=2;I<=n;i++){\n        if(n%i==0){\n            res.push_back(i);\n        }\n    }\n    return res;\n}"], ["/*\nComplete the function that takes two integers and returns \nthe product of their unit digits.\nAssume the input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n    int product=1;\n    while(b>0){\n        product*=10;\n        b--;\n    }\n    while(a>0){\n        product*=10;\n        a--;\n    }\n    return product;\n}"], ["/*\nGiven a string s, count the number of uppercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n    int count=0;\n    for(int I=0;I<s.length();i++){\n        if(isupper(s[i])){\n            count++;\n        }\n    }\n    return count;\n}"], ["/*\nCreate a function that takes a value (string) representing a number\nand returns the closest integer to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n    int num, min_num, max_num, min_dist, max_dist, min_dist_num, max_dist_num;\n    num = stoi(value);\n    min_num = num;\n    max_num = num;\n    min_dist = 0;\n    max_dist = 0;\n    for(int I = 1; I < num; i++){\n        if(i == 1 || i == num){\n            min_num = min(min_num, i);\n            max_num = max(max_num, i);\n            min_dist = min(min_dist, abs(i - num));\n            max_dist = max(max_dist, abs(i - num));\n        }\n        else{\n            min_num = min(min_num, i);\n            max_num = max(max_num, i);\n            min_dist = min(min_dist, abs(i - num));\n            max_dist = max(max_dist, abs(i - num));\n        }\n    }"], ["/*\nGiven a positive integer n, you have to make a pile of n levels of stones.\nThe first level has n stones.\nThe number of stones in the next level is:\n    - the next odd number if n is odd.\n    - the next even number if n is even.\nReturn the number of stones in each level in a vector, where element at index\ni represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    vector<int> piles;\n    if(n%2==0){\n        piles.push_back(n/2);\n    }\n    else{\n        piles.push_back(n/2+1);\n    }\n    for(int I=1; I<n; i+=2){\n        piles.push_back(i);\n    }\n    return piles;\n}"], ["/*\nYou will be given a string of words separated by commas or spaces. Your task is\nto split the string into words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n    vector<string> words;\n    string word;\n    for(int I=0; I<s.length(); i++){\n        if(s[i]==','){\n            word.clear();\n            for(int j=i+1; j<s.length(); j++){\n                word+=s[j];\n            }\n            words.push_back(word);\n            word.clear();\n            i++;\n        }\n        else if(s[i]==' '){\n            if(word.length()==0){\n                word.push_back(s[i]);\n            }\n            else{\n                words.push_back(word);\n                word.clear();\n            }\n        }\n        else{\n            word+=s[i];\n        }\n    }\n    return words;\n}"], ["/*\nThis function takes two positive numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's no such number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n    int max_num=0;\n    while(x<=y){\n        if(x%2==0){\n            max_num=max(max_num,x);\n        }\n        x++;\n    }\n    return max_num;\n}"], ["/*\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer(smaller one) and convert that to binary.\nIf n is greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n    string s;\n    if(n>m){\n        s=s+\"-\";\n        n=m;\n        m=n;\n        n=m;\n    }\n    int sum=0;\n    for(int I=n;I<=m;i++){\n        sum+=i;\n    }\n    int avg=(double)sum/m;\n    s+=(int)round(avg*10000);\n    s+=\".\";\n    s+=round(avg*100);\n    return s;\n}"], ["/*\nGiven a vector of positive integers x. return a sorted vector of all \nelements that hasn't any even digit.\n\nNote: Returned vector should be sorted in increasing order.\n\nFor example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n    sort(x.begin(), x.end());\n    int count = 0;\n    vector<int> res;\n    for(int I=0; I<x.size(); i++){\n        if(x[i]%2==0){\n            res.push_back(x[i]);\n            count++;\n        }\n    }\n    res.push_back(count);\n    return res;\n}"], ["/*\nGiven a vector of integers, sort the integers that are between 1 and 9 inclusive,\nreverse the resulting vector, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n    sort(arr.begin(), arr.end());\n    reverse(arr.begin(), arr.end());\n    vector<string> result;\n    for(int I = 0; I < arr.size(); i++){\n        result.push_back(to_string(arr[i]));\n    }\n    return result;\n}"], ["/*\nImplement the function f that takes n as a parameter,\nand returns a vector of size n, such that the value of the element at index i is the factorial of i if i is even\nor the sum of numbers from 1 to i otherwise.\ni starts from 1.\nthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n    vector<int> result;\n    if(n<=1){\n        result.push_back(1);\n        return result;\n    }\n    int fact=1;\n    for(int I=2;i<=n;i++){\n        fact*=i;\n    }\n    result.push_back(fact);\n    for(int I=1;i<=n/2;i++){\n        result.push_back(result[i]+result[n-i]);\n    }\n    return result;\n}"], ["/*\nGiven a positive integer n, return a vector that has the number of even and odd\ninteger palindromes that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> even_palindrome(n+1, 0);\n    vector<int> odd_palindrome(n+1, 0);\n    for(int I=1; I<=n; i++){\n        if(i%2==0){\n            even_palindrome[i]++;\n        }\n        else{\n            odd_palindrome[i]++;\n        }\n    }\n    int count_even=0;\n    int count_odd=0;\n    for(int I=1; I<=n; i++){\n        if(even_palindrome[i]==2){\n            count_even++;\n        }\n        else if(odd_palindrome[i]==2){\n            count_odd++;\n        }\n    }\n    return {count_even, count_odd};\n}"], ["/*\nWrite a function count_nums which takes a vector of integers and returns\nthe number of elements which has a sum of digits > 0.\nIf a number is negative, then its first signed digit will be negative:\ne.g. -123 has signed digits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int count = 0;\n    for(int I = 0; I < n.size(); i++){\n        int sum = 0;\n        for(int j = I+1; j < n.size(); j++){\n            sum += abs(n[i] - n[j]);\n        }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return count;\n}"], ["/*\nWe have a vector \"arr\" of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the vector will be randomly ordered. Your task is to determine if\nit is possible to get a vector sorted in non-decreasing order by performing \nthe following operation on the given vector:\n    You are allowed to perform right shift operation any number of times.\n\nOne right shift operation means shifting all elements of the vector by one\nposition in the right direction. The last element of the vector will be moved to\nthe starting position in the vector i.e. 0th index. \n\nIf it is possible to obtain the sorted vector by performing the above operation\nthen return true else return false.\nIf the given vector is empty then return true.\n\nNote: The given vector is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    int n=arr.size();\n    for(int I=0;i<n;i++){\n        if(arr[i]>arr[i+1]){\n            swap(arr[i],arr[i+1]);\n            return true;\n        }\n    }\n    return false;\n}"], ["/*\nIn this problem, you will implement a function that takes two vectors of numbers,\nand determines whether it is possible to perform an exchange of elements\nbetween them to make lst1 a vector of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange elements between the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwise, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int n1=lst1.size(),n2=lst2.size();\n    if(n1==0||n2==0){\n        return \"NO\";\n    }\n    int even=0;\n    for(int I=0;I<n1;i++){\n        if(lst1[i]%2==0){\n            even++;\n        }\n    }\n    for(int I=0;i<n2;i++){\n        if(lst2[i]%2==0){\n            even++;\n        }\n    }\n    if(even==n1){\n        return \"YES\";\n    }\n    return \"NO\";\n}"], ["/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the most repetition and containing the corresponding count.\nIf several letters have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char,int> hist;\n    for(int I=0;I<test.length();i++){\n        if(test[i]==' '){\n            if(hist.find(test[i])==hist.end()){\n                hist[test[i]]++;\n            }else{\n                hist[test[i]]++;\n                hist[test[i]]++;\n            }\n        }\n    }\n    return hist;\n}"], ["/*\nTask\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\nthen check if the result string is palindrome.\nA string is called palindrome if it reads the same backward as forward.\nYou should return a vector containing the result string and \"True\"/\"False\" for the check.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n    vector<string> result;\n    int n = s.length();\n    for(int I=0;I<n;i++){\n        if(s[i]==c[i]){\n            result.push_back(s.substr(i,1));\n            i++;\n        }\n        else{\n            result.push_back(s.substr(i,1));\n        }\n    }\n    reverse(result.begin(),result.end());\n    return result;\n}"], ["/*\nGiven a vector of strings, where each string consists of only digits, return a vector.\nEach element i of the output should be 'the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the number\nof odd digits in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n    map<string,int> count;\n    for(string s:lst){\n        int count = 0;\n        for(char c:s){\n            if(c>='0' && c<='9'){\n                count++;\n            }\n        }"], ["/*\nGiven a vector of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    int n = nums.size();\n    long long sum = 0;\n    for(int I = 0; I < n; i++){\n        sum += nums[i];\n    }\n    for(int I = 1; I < n; i++){\n        sum -= nums[i-1];\n        if(sum < 0){\n            return -1;\n        }\n    }\n    return sum;\n}"], ["/*\nYou are given a rectangular grid of wells. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponding bucket that can be used to extract water from it, \nand all buckets have the same capacity.\nYour task is to use the buckets to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n    int n=grid.size();\n    int m=grid[0].size();\n    vector<vector<int>> dp(n+1,vector<int>(m+1,0));\n    dp[0][0]=1;\n    for(int I=1;I<=n;i++){\n        for(int j=1;j<=m;j++){\n            if(grid[i-1][j-1]==1){\n                dp[i][j]=max(dp[i-1][j],dp[i][j-1]+1);\n            }"], ["/*\nIn this Kata, you have to sort a vector of non-negative integers according to\nnumber of ones in their binary representation in ascending order.\nFor similar number of ones, sort based on decimal value.\n\nIt must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    sort(arr.begin(), arr.end());\n    int n = arr.size();\n    int sum = 0;\n    for(int I = 0; I < n; i++){\n        sum += arr[i];\n    }\n    int max_sum = sum;\n    for(int I = 0; I < n; i++){\n        if(arr[i] > max_sum){\n            max_sum = arr[i];\n        }\n    }\n    int min_sum = sum;\n    for(int I = n - 1; I >= 0; i--){\n        if(arr[i] < min_sum){\n            min_sum = arr[i];\n        }\n    }\n    int count = 0;\n    for(int I = 0; I < n; i++){\n        if(arr[i] == max_sum){\n            count++;\n        }\n    }\n    vector<int> res;\n    res.push_back(max_sum);\n    res.push_back(min_sum);\n    res.push_back(count);\n    return res;\n}"], ["/*\nGiven a string s and a natural number n, you have been tasked to implement \na function that returns a vector of all words from string s that contain exactly \nn consonants, in order these words appear in the string s.\nIf the string s is empty then the function should return an empty vector.\nNote: you may assume the input string contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n    vector<string> words;\n    for(int I=0;i<s.length();i++){\n        if(s[i]==' '){\n            if(i==0){\n                words.push_back(\"\");\n            }\n            else{\n                words.push_back(s.substr(i-1,1));\n            }\n        }\n        else if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'){\n            if(i+1<s.length()){\n                if(s[i]==s[i+1]){\n                    words.push_back(s.substr(i,2));\n                }\n                else{\n                    words.push_back(s.substr(i,1));\n                }\n            }\n        }\n    }\n    sort(words.begin(),words.end());\n    return words;\n}"], ["/*\nYou are given a word. Your task is to find the closest vowel that stands between \ntwo consonants from the right side of the word (case sensitive).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the above condition. \n\nYou may assume that the given string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n    string closest_vowel;\n    int left = 0, right = word.length()-1;\n    while(left < right){\n        int mid = (left+right)/2;\n        if(isalpha(word[mid]) && word[mid] != ' '){\n            if(word[mid] == 'a' || word[mid] == 'e' || word[mid] == 'i' || word[mid] == 'o' || word[mid] == 'u'){\n                closest_vowel = word.substr(mid, 1);\n                break;\n            }\n        }\n        if(word[mid] == ' '){\n            left = mid+1;\n        }\n        else{\n            right = mid-1;\n        }\n    }\n    return closest_vowel;\n}"], ["/*\nYou are given a vector of two strings, both strings consist of open\nparentheses '(' or close parentheses ')' only.\nYour job is to check if it is possible to concatenate the two strings in\nsome order, that the resulting string will be good.\nA string S is considered to be good if and only if all parentheses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n    string s;\n    for(int I=0; I<lst.size(); i++){\n        if(lst[i][0]=='(' && lst[i][lst[i].length()-1]==')'){\n            s+=lst[i];\n        }\n    }\n    if(s.length()==0){\n        return \"No\";\n    }\n    return s;\n}"], ["/*\nGiven a vector arr of integers and a positive integer k, return a sorted vector \nof length k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.begin(),arr.end());\n    int n=arr.size();\n    int max_index=0;\n    for(int I=0;i<n;i++){\n        if(arr[i]>arr[max_index]){\n            max_index=i;\n        }\n    }\n    int max_value=arr[max_index];\n    vector<int> result;\n    for(int I=0;i<k;i++){\n        if(max_value==arr[i]){\n            result.push_back(arr[i]);\n        }\n    }\n    return result;\n}"], ["/*\nGiven a non-empty vector of integers, return the sum of all of the odd elements that are in even positions.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n    int sum=0;\n    for(int I=0; I<lst.size(); i++){\n        if(lst[i]%2==0){\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}"], ["/*\nGiven a non-empty vector of integers arr and an integer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n    int sum=0;\n    for(int I=0;i<k;i++){\n        sum+=arr[i];\n    }\n    for(int I=k;i<arr.size();i++){\n        sum+=arr[i];\n    }\n    return sum;\n}"], ["/*\nGiven a positive integer n, return a sorted vector that has the odd numbers in collatz sequence.\n\nThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\nas follows: start with any positive integer n. Then each term is obtained from the \nprevious term as follows: if the previous term is even, the next term is one half of \nthe previous term. If the previous term is odd, the next term is 3 times the previous\nterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. returned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n    vector<int> collatz;\n    int prev = 0;\n    int curr = 1;\n    while(curr <= n){\n        int next = 3 * curr + 1;\n        if(next % 2 == 0){\n            collatz.push_back(prev);\n            prev = next;\n        }\n        curr = next;\n    }\n    collatz.push_back(prev);\n    sort(collatz.begin(), collatz.end());\n    return collatz;\n}"], ["/*\nYou have to write a function which validates a given date string and\nreturns true if the date is valid otherwise false.\nThe date is valid if all of the following rules are satisfied:\n1. The date string is not empty.\n2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n3. The months should not be less than 1 or higher than 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n    int days=0,months=0,year=0;\n    string month_str=\"\",day_str=\"\";\n    char c;\n    for(int I=0;I<date.length();i++){\n        c=date[i];\n        if(c=='-'){\n            if(month_str!=\"\"){\n                if(month_str!=\"12\"){\n                    if(month_str!=\"01\"){\n                        return false;\n                    }\n                }\n                months++;\n                month_str=\"\";\n            }\n            if(c=='/'){\n                if(month_str!=\"\"){\n                    if(month_str!=\"12\"){\n                        return false;\n                    }\n                }\n                month_str=\"\";\n                year++;\n            }"], ["/*\nGiven a string of words, return a vector of words split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return a vector with one element, the number of lower-case letters with odd order in the\nalphabet, ord(\"a\") = 0, ord(\"b\") = 1, ... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") \u279e {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") \u279e {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n    vector<string> words;\n    string word;\n    for(int I = 0; I < txt.length(); i++){\n        if(txt[i] == ' '){\n            if(word.length() > 0){\n                words.push_back(word);\n                word.clear();\n            }\n        }else{\n            word += txt[i];\n        }\n    }\n    if(word.length() > 0){\n        words.push_back(word);\n    }\n    return words;\n}"], ["/*\nGiven a vector of numbers, return whether or not they are sorted\nin ascending order. If vector has more than 1 duplicate of the same\nnumber, return false. Assume no negative numbers and only integers.\n\nExamples\nis_sorted({5}) \u279e true\nis_sorted({1, 2, 3, 4, 5}) \u279e true\nis_sorted({1, 3, 2, 4, 5}) \u279e false\nis_sorted({1, 2, 3, 4, 5, 6}) \u279e true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) \u279e true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) \u279e false\nis_sorted({1, 2, 2, 3, 3, 4}) \u279e true\nis_sorted({1, 2, 2, 2, 3, 4}) \u279e false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n    sort(lst.begin(), lst.end());\n    return lst[0] == lst[lst.size()-1];\n}"], ["/*\nYou are given two intervals,\nwhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n    int len1=interval1.size();\n    int len2=interval2.size();\n    int start1=interval1[0];\n    int end1=interval1[1];\n    int start2=interval2[0];\n    int end2=interval2[1];\n    int start=start1;\n    int end=end1;\n    while(start<=end){\n        if(start<end){\n            if(start<start2){\n                start=start2;\n            }\n            if(end<end2){\n                end=end2;\n            }\n        }\n        else if(start>end){\n            end=start;\n        }\n        else{\n            if(start<start2){\n                start=start2;\n            }\n            if(end<end2){\n                end=end2;\n            }\n        }\n    }"], ["/*\nYou are given a vector arr of integers and you need to return\nsum of magnitudes of integers multiplied by product of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    int sum = 0, prod = 1;\n    for(int I = 0; I < arr.size(); i++){\n        int val = arr[i];\n        if(val == 0){\n            prod = 0;\n            continue;\n        }\n        if(val < 0){\n            prod = -prod;\n        }\n        sum += val * prod;\n    }\n    return sum;\n}"], ["/*\nGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \neach cell of the grid contains a value. Every integer in the range {1, N * N}\ninclusive appears exactly once on the cells of the grid.\n\nYou have to find the minimum path of length k in the grid. You can start\nfrom any cell, and in each step you can move to any of the neighbor cells,\nin other words, you can go to cells which share an edge with you current\ncell.\nPlease note that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\nYou CANNOT go off the grid.\nA path A (of length k) is considered less than a path B (of length k) if\nafter making the ordered vectors of the values on the cells that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\nsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\nIt is guaranteed that the answer is unique.\nReturn an ordered vector of the values on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int n = grid.size();\n    vector<vector<int>> dp(n, vector<int>(n, 0));\n    for(int I = 0; I < n; i++){\n        for(int j = 0; j < n; j++){\n            if(i == j){"], ["/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't know is Tribonacci sequence.\nTribonacci sequence is defined by the recurrence:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n    vector<int> res;\n    int sum = 0;\n    for(int I=1; I<=n; i++){\n        sum += i;\n        res.push_back(sum);\n    }\n    return res;\n}"], ["/*\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    int sum=0;\n    while(n>0){\n        sum+=n%10;\n        n/=10;\n    }\n    return sum;\n}"], ["/*\nCreate a function that takes a string as input which contains only square brackets.\nThe function should return true if and only if there is a valid subsequence of brackets\nwhere at least one bracket in the subsequence is nested.\n\nis_nested(\"[[]]\") \u279e true\nis_nested(\"[]]]]]]][[[[[]\") \u279e false\nis_nested(\"[][]\") \u279e false\nis_nested(\"[]\") \u279e false\nis_nested(\"[[][]]\") \u279e true\nis_nested(\"[[]][[\") \u279e true\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_nested(string str){\n    int n = str.length();\n    for(int I = 0; I < n-1; i++){\n        if(str[i] != '[' && str[i] != ']' && str[i] != '{' && str[i] != '}' && str[i] != '[' && str[i] != ']' && str[i] != '{' && str[i] != '}' && str[i] != '[' && str[i] != ']' && str[i] != '{' && str[i] != '}' && str[i] != '[' && str[i] != ']' && str[i] != '{' && str[i] != '}' && str[i] != '[' && str[i] != ']' && str[i] != '{' && str[i] != '}' && str[i] != '[' && str[i] != ']' && str[i] != '{' && str[i] != '}' && str[i] != '[' && str[i] != ']' && str[i] != '{' && str[i] != '}' && str[i] != '[' && str[i] != ']' && str[i] != '{' && str[i] != '}' && str[i] != '[' && str[i] != ']' && str[i] != '{' && str[i] != '}"], ["/*\nYou are given a vector of numbers.\nYou need to return the sum of squared numbers in the given vector,\nround each element in the vector to the upper int(Ceiling) first.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    int sum=0;\n    for(int I=0;I<lst.size();i++){\n        float num=lst[i];\n        if(num>0){\n            float sq=sqrt(num*num);\n            sum+=sq;\n        }\n    }\n    return sum;\n}"], ["/*\nCreate a function that returns true if the last character\nof a given string is an alphabetical character and is not\na part of a word, and false otherwise.\nNote: \"word\" is a group of characters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") \u279e false\ncheck_if_last_char_is_a_letter(\"apple pi e\") \u279e true\ncheck_if_last_char_is_a_letter(\"apple pi e \") \u279e false\ncheck_if_last_char_is_a_letter(\"\") \u279e false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    int len = txt.length();\n    for(int I = len-1; I >= 0; i--){\n        if(txt[i] >= 'a' && txt[i] <= 'z'){\n            return false;\n        }\n        if(txt[i] >= 'A' && txt[i] <= 'Z'){\n            return false;\n        }\n    }\n    return true;\n}"], ["/*\nCreate a function which returns the largest index of an element which\nis not greater than or equal to the element immediately preceding it. If\nno such element exists then return -1. The given vector will not contain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int n = arr.size();\n    int max_idx = -1;\n    for(int I = 0; I < n; i++){\n        if(arr[i] > arr[i+1]){\n            max_idx = i;\n            break;\n        }\n    }\n    return max_idx;\n}"], ["/*\nCreate a function that returns a vector (a, b), where \"a\" is\nthe largest of negative integers, and \"b\" is the smallest\nof positive integers in a vector.\nIf there is no negative or positive integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n    int max = INT_MIN;\n    int min = INT_MAX;\n    for(int I = 0; I < lst.size(); i++){\n        if(lst[i] < 0){\n            max = max < lst[i] ? lst[i] : max;\n        }\n        else{\n            min = min > lst[i] ? lst[i] : min;\n        }\n    }\n    return {max, min};\n}"], ["/*\nCreate a function that takes integers, floats, or strings representing\nreal numbers, and returns the larger variable in its given variable type.\nReturn \"None\" if the values are equal.\nNote: If a real number is represented as a string, the floating point might be . or ,\n\ncompare_one(1, 2.5) \u279e 2.5\ncompare_one(1, \"2,3\") \u279e \"2,3\"\ncompare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e \"None\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any compare_one(boost::any a,boost::any b){\n    if(a.type()==typeid(int)){\n        int x=boost::any_cast<int>(a);\n        int y=boost::any_cast<int>(b);\n        if(x>y){\n            return boost::any_cast<boost::any>(boost::make_shared<int>(x));\n        }\n        else{\n            return boost::any_cast<boost::any>(boost::make_shared<int>(y));\n        }\n    }\n    else if(a.type()==typeid(float)){\n        float x=boost::any_cast<float>(a);\n        float y=boost::any_cast<float>(b);\n        if(x>y){\n            return boost::any_cast<boost::any>(boost::make_shared<float>(x));\n        }\n        else{\n            return boost::any_cast<boost::any>(boost::make_shared<float>(y));\n        }\n    }\n    else if(a.type()==typeid(string)){\n        string x=boost::any_cast<string>(a);\n        string y=boost::any_cast<string>(b);\n        if(x>y){\n            return boost::any_cast<boost::any>(boost::make_shared<string>(x));\n        }"], ["/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    int sum = 0;\n    for(int I=1; I<=n; i++){\n        if(i%2==0){\n            sum += i;\n        }\n    }\n    return sum%2==0;\n}"], ["/*\nThe Brazilian factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    if(n==0) return 1;\n    else return n*special_factorial(n-1);\n}"], ["/*\nGiven a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthen replace all consecutive spaces with - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n    int i=0;\n    while(text[i]!=' '){\n        if(i==0){\n            text[i]='_';\n        }\n        else if(text[i]==' '){\n            text[i]='-';\n        }\n        i++;\n    }\n    return text;\n}"], ["/*\nCreate a function which takes a string representing a file's name, and returns\n\"Yes\" if the the file's name is valid, and returns \"No\" otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There should not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains exactly one dot \".\"\n- The substring before the dot should not be empty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one of these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n    if(file_name.length() > 3){\n        return \"No\";\n    }\n    string::iterator it;\n    for(it = file_name.begin(); it != file_name.end(); it++){\n        if(*it != '.'){\n            return \"No\";\n        }\n    }\n    string::iterator it2;\n    for(it2 = file_name.begin(); it2 != file_name.end(); it2++){\n        if(*it2 == '.'){\n            return \"No\";\n        }\n    }\n    string::iterator it3;\n    for(it3 = file_name.begin(); it3 != file_name.end(); it3++){\n        if(*it3 == '.'){\n            return \"No\";\n        }\n        if(*it3 == '.' && it3 != file_name.end()){\n            return \"No\";\n        }\n    }"], ["/*\n\"\nThis function will take a vector of integers. For all entries in the vector, the function shall square the integer entry if its index is a \nmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \nchange the entries in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for(int I=0; I<lst.size(); i=i+3){\n        if(i%3==0 && I%4!=0){\n            sum += lst[i]*lst[i];\n        }\n        else if(i%3!=0 && I%4==0){\n            sum += lst[i]*lst[i];\n        }\n    }\n    return sum;\n}"], ["/*\nYou are given a string representing a sentence,\nthe sentence contains some words separated by a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime numbers,\nthe order of the words in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n    int n = sentence.length();\n    string words = \"\";\n    for(int I = 0; I < n; i++){\n        if(isalpha(sentence[i])){\n            if(isPrime(sentence[i])){\n                words += sentence[i];\n            }\n        }\n    }\n    sort(words.begin(), words.end());\n    return words;\n}"], ["/*\nYour task is to implement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the following format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = true\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x,string n){\n    int n1,n2,i,j,k;\n    n1=atoi(n.c_str());\n    n2=atoi(x.c_str());\n    if(n1==0 && n2==0){\n        return true;\n    }\n    if(n1==0){\n        return false;\n    }\n    if(n2==0){\n        return false;\n    }\n    if(n1<0){\n        n1=-n1;\n    }\n    if(n2<0){\n        n2=-n2;\n    }\n    for(i=0;i<n1;i++){\n        n1-=1;\n    }\n    for(j=0;j<n2;j++){\n        n2-=1;\n    }\n    k=0;\n    while(n1>0){\n        n1-=n2;\n        k++;\n    }\n    while(n2>0){\n        n2-=n1;\n        k--;\n    }\n    if(k==0){\n        return true;\n    }\n    if(k==1){\n        return false;\n    }\n    n1=n1/k;\n    n2=n2/k;\n    string res=n1+\"/\"+n2;\n    return simplify(res,n);\n}"], ["/*\nWrite a function which sorts the given vector of integers\nin ascending order according to the sum of their digits.\nNote: if there are several items with similar sum of their digits,\norder them based on their index in original vector.\n\nFor example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n    int sum = 0;\n    for(int I=0; I<nums.size(); i++){\n        sum += nums[i];\n    }\n    sort(nums.begin(), nums.end());\n    int index = 0;\n    for(int I=0; I<nums.size(); i++){\n        if(sum == nums[i]){\n            index = i;\n            break;\n        }\n    }\n    return nums.erase(nums.begin()+index, nums.end());\n}"], ["/*\nWrite a function that takes a vector of numbers as input and returns \nthe number of elements in the vector that are greater than 10 and both \nfirst and last digits of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n    int count = 0;\n    for(int I=0; I<nums.size(); i++){\n        if(nums[i]>10 && nums[i]%2==1){\n            count++;\n        }\n    }\n    int first = nums[0];\n    int last = nums[nums.size()-1];\n    for(int I=0; I<nums.size(); i++){\n        if(nums[i]>first && nums[i]<last){\n            count++;\n        }\n    }\n    return count;\n}"], ["/*\nYou are given a positive integer n. You have to create an integer vector a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a{i} = i * i - i + 1.\n    Return the number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n    vector<int> a(n);\n    for(int I=1; I<=n; i++){\n        a[i] = i*i-i+1;\n    }\n    int count = 0;\n    for(int I=1; I<=n; i++){\n        for(int j=i; j<=n; j++){\n            for(int k=j; k<=n; k++){\n                if(a[i] + a[j] + a[k] == 3*a[i] + 2*a[j] + a[k]){\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}"], ["/*\nThere are eight planets in our solar system: the closerst to the Sun \nis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \nUranus, Neptune.\nWrite a function that takes two planet names as strings planet1 and planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the orbit of planet1 and the orbit of planet2, sorted by \nthe proximity to the sun. \nThe function should return an empty vector if planet1 or planet2\nare not correct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n    vector<string> result;\n    string temp;\n    if(planet1.length()==0 || planet2.length()==0){\n        return result;\n    }\n    if(planet1.compare(planet2)<0){\n        temp=planet1;\n        planet1=planet2;\n        planet2=temp;\n    }\n    if(planet1.compare(planet2)==0){\n        result.push_back(planet1);\n    }\n    if(planet1.compare(planet2)<0){\n        temp=planet2;\n        planet2=planet1;\n        planet1=temp;\n    }\n    if(planet1.compare(planet2)==0){\n        result.push_back(planet1);\n    }\n    return result;\n}"], ["/*\nWrite a function that accepts a vector of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resulted vector with a sorted order,\nThe vector is always a vector of strings and never a vector of numbers,\nand it may contain duplicates.\nThe order of the vector should be ascending by length of each word, and you\nshould return the vector sorted by that rule.\nIf two words have the same length, sort the vector alphabetically.\nThe function should return a vector of strings in sorted order.\nYou may assume that all words will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    sort(lst.begin(), lst.end());\n    vector<string> sorted_lst;\n    for(string s:lst){\n        if(s.length()%2==1){\n            sorted_lst.push_back(s);\n        }\n    }\n    return sorted_lst;\n}"], ["/*\nA simple program which should return the value of x if n is \na prime number and should return the value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n    if(n==1){\n        return 1;\n    }\n    if(n==2){\n        return 0;\n    }\n    if(n%2==0){\n        return x_or_y(n/2,x,y);\n    }\n    return x_or_y(n/2,y,x);\n}"], ["/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector that are odd. Ignore numbers that are negative or not integers.\n\ndouble_the_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_difference({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nlong long double_the_difference(vector<float> lst){\n    int n = lst.size();\n    long long sum = 0;\n    for(int I = 0; I < n; i++){\n        if(lst[i] % 2 == 1){\n            sum += pow(lst[i], 2);\n        }\n    }\n    return sum;\n}"], ["/*\nI think we all remember that feeling when the result of some long-awaited\nevent is finally known. The feelings and thoughts you have at that moment are\ndefinitely worth noting down and comparing.\nYour task is to determine if a person correctly guessed the results of a number of matches.\nYou are given two vectors of scores and guesses of equal length, where each index shows a match. \nReturn a vector of the same length denoting how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n    int n=game.size();\n    vector<int> result(n);\n    for(int I=0;i<n;i++){\n        result[i]=abs(game[i]-guess[i]);\n    }\n    return result;\n}"], ["/*\nYou will be given the name of a class (a string) and a vector of extensions.\nThe extensions are to be used to load additional classes to the class. The\nstrength of the extension is as follows: Let CAP be the number of the uppercase\nletters in the extension's name, and let SM be the number of lowercase letters \nin the extension's name, the strength is given by the fraction CAP - SM. \nYou should find the strongest extension and return a string in this \nformat: ClassName.StrongestExtensionName.\nIf there are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n    int max_cap = 0, max_sm = 0;\n    string strongest_extension = \"\";\n    for(int I = 0; I < extensions.size(); i++){\n        int cap = 0, sm = 0;\n        for(int j = 0; j < extensions[i].length(); j++){\n            if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z'){\n                cap++;\n            }\n            else if(extensions[i][j] >= 'a' && extensions[i][j] <= 'z'){\n                sm++;\n            }\n        }\n        if(cap > max_cap){\n            max_cap = cap;\n            strongest_extension = extensions[i];\n        }"], ["/*\nYou are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\ncycpattern_check(\"abcd\",\"abd\") => false\ncycpattern_check(\"hello\",\"ell\") => true\ncycpattern_check(\"whassup\",\"psus\") => false\ncycpattern_check(\"abab\",\"baa\") => true\ncycpattern_check(\"efef\",\"eeff\") => false\ncycpattern_check(\"himenss\",'simen\") => true\n\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool cycpattern_check(string a,string b){\n    int n=a.length();\n    int m=b.length();\n    for(int I=0;i<n;i++){\n        for(int j=0;j<m;j++){\n            if(a[i]==b[j]){\n                if(i==n-1 || j==m-1)\n                    return true;\n            }\n        }\n    }\n    return false;\n}"], ["/*\nGiven an integer. return a vector that has the number of even and odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    vector<int> count(2, 0);\n    for(int I=1; I<=sqrt(num); i++){\n        if(num%i==0){\n            count[0]++;\n            count[1]++;\n        }\n    }\n    return count;\n}"], ["/*\nGiven a positive integer, obtain its roman numeral equivalent as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n    string output;\n    int count = 0;\n    while(number>0){\n        if(number%10==0){\n            output += 'l';\n            count++;\n        }\n        else if(number%10==1){\n            output += 'x';\n            count++;\n        }\n        else if(number%10==2){\n            output += 'i';\n            count++;\n        }\n        number/=10;\n    }\n    if(count>0){\n        output += ' ';\n    }\n    return output;\n}"], ["/*\nGiven the lengths of the three sides of a triangle. Return true if the three\nsides form a right-angled triangle, false otherwise.\nA right-angled triangle is a triangle in which one angle is right angle or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n    float s1=sqrt((a*a)+(b*b)-(c*c));\n    float s2=sqrt((b*b)+(c*c)-(a*a));\n    float s3=sqrt((c*c)+(a*a)-(b*b));\n    if(s1==s2 && s2==s3){\n        return true;\n    }\n    return false;\n}"], ["/*\nWrite a function that accepts a vector of strings.\nThe vector contains different words. Return the word with maximum number\nof unique characters. If multiple strings have maximum number of unique\ncharacters, return the one which comes first in lexicographical order.\n\nfind_max({\"name\", \"of\", 'string\"}) == 'string\"\nfind_max({\"name\", \"enam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n    sort(words.begin(), words.end(), [](string a, string b){\n        return (int)a.length() > (int)b.length());\n    });\n    return words[0];\n}"], ["/*\nYou\"re a hungry rabbit, and you already have eaten a certain number of carrots,\nbut now you need to eat more carrots to complete the day's meals.\nyou should return a vector of { total number of eaten carrots after your meals,\n                                the number of carrots left after your meals }\nif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n    vector<int> result;\n    if(need<=remaining){\n        result.push_back(number);\n        result.push_back(need);\n        return result;\n    }\n    else{\n        int left=need-remaining;\n        int total=left*number;\n        result.push_back(total);\n        result.push_back(left);\n        return result;\n    }\n}"], ["/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \nthe second vector is a vector of integers. Use the two given vectors to build the algebric \nexpression and return the evaluation of this expression.\n\nThe basic algebra operations:\nAddition ( + ) \nSubtraction ( - ) \nMultiplication ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    int result = 0;\n    for(int I=0; I<operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i-1];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i-1];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i-1];\n        }\n        else if(operato[i] == \"/\"){\n            result /= operand[i-1];\n        }\n        else if(operato[i] == \"^\"){\n            result = pow(operand[i-1], operato[i]);\n        }\n        else{\n            printf(\"Invalid operator\\n\");\n            return 0;\n        }\n    }\n    return result;\n}"], ["/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise versa, \notherwise keep it as it is.\nIf the string contains no letters, reverse the string.\nThe function should return the resulted string.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n    if(s.empty()){\n        return s;\n    }\n    string temp = s;\n    for(int I=0; I<temp.length(); i++){\n        if(islower(temp[i])){\n            temp[i] = toupper(temp[i]);\n        }else{\n            temp[i] = lowercase(temp[i]);\n        }\n    }\n    return temp;\n}"], ["/*\nGiven a string 'text\", return its md5 hash equivalent string.\nIf 'text\" is an empty string, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    MD5_CTX ctx;\n    MD5_Init(&ctx);\n    MD5_Update(&ctx, (unsigned char*)text.c_str(), text.length());\n    MD5_Final((unsigned char*)hash, &ctx);\n    MD5_CTX ctx2;\n    MD5_Init(&ctx2);\n    MD5_Update(&ctx2, (unsigned char*)hash, 16);\n    MD5_Final((unsigned char*)hash2, &ctx2);\n    MD5_CTX ctx3;\n    MD5_Init(&ctx3);\n    MD5_Update(&ctx3, (unsigned char*)hash2, 16);\n    MD5_Final((unsigned char*)hash3, &ctx3);\n    MD5_CTX ctx4;\n    MD5_Init(&ctx4);\n    MD5_Update(&ctx4, (unsigned char*)hash3, 16);\n    MD5_Final((unsigned char*)hash4, &ctx4);\n    MD5_CTX ctx5;\n    MD5_Init(&ctx5);\n    MD5_Update(&ctx5, (unsigned char*)hash4, 16);\n    MD5_Final((unsigned char*)hash5, &ctx5);\n    MD5_CTX ctx6;\n    MD5_Init(&ctx6);\n    MD5_Update(&ctx6, (unsigned char*)hash5, 16);\n    MD5_Final((unsigned char*)hash6, &ctx6);\n    MD5_CTX ctx7;\n    MD5_Init(&ctx7);\n    MD5_Update(&ctx7, (unsigned char*)hash6, 16);\n    MD5_"], ["/*\nGiven two positive integers a and b, return the even digits between a\nand b, in ascending order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n    vector<int> res;\n    int temp=a,i=b;\n    while(temp<=i){\n        res.push_back(temp%10);\n        temp/=10;\n    }\n    while(temp>i){\n        res.push_back(temp%10);\n        temp/=10;\n    }\n    return res;\n}"]]