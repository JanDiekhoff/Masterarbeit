[["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    # Sort the rows of the matrix\n    rows = []\n    for row in matrix:\n        rows.append(row)\n    rows.sort(key=lambda row: sum(row))\n    # Reverse the rows\n    for row in rows:\n        matrix.append(row)\n    return matrix\n"], ["\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\n# Example usage:\ncount_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red'])\n# Output: [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]"], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\n# Define the function\ndef find_Volume(height, width, length):\n    \"\"\"\n    This function takes three arguments: height, width, and length.\n    It returns the volume of the triangular prism.\n    \"\"\"\n    volume = (height * width * length) / 3\n    return volume\n\n# Test the function"], ["\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n```\n\nExplanation:\n\n1. We define a function `find_sequences_of_lowercase_letters_joined_with_underscore` that takes a string `text` as input and returns a tuple of the form `(start, end, sequence)`.\n\n2. We use a `for` loop to iterate over each character in the input string.\n\n3. For each character, we check if it is a lowercase letter. If it is, we add it to a list `lowercase_letters`.\n\n4. We then create a tuple `(start, end)` by finding the first and last index of the first character in the list `lowercase_letters`.\n\n5. We create a new list `sequence` by appending the characters in the `lowercase_letters` list to a new list.\n\n6. We return `(start, end, sequence)` as a tuple.\n\n7. We use the `assert` statement to test the function with some sample inputs.\n\n8. Finally, we print the output using the `print` statement."], ["\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n```\n\nIn this example, we have a function named `square_perimeter` that takes a single argument `side`, which is a float representing the side length of the square. The function returns the perimeter of the square as a float.\n\nThe `assert` statement ensures that the input value is a float and that the perimeter is returned as a float.\n\nNote that the `square_perimeter` function is not a part of the `main()` function. It is a standalone function that can be called by the user."], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\n# Testing the function with sample inputs"], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\n# Test function\ndef test_duplicate(arr):\n    for I in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return True\n    return False\n\n# Test cases"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\nassert find_first_duplicate([1, 2, 3, 4, 4, 5])==4"], ["\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n```\n\nIn this example, we have a function `maximum_Sum` that takes a list of lists as input and returns the maximum sum of elements in the list. The function first checks if the input list is empty, and if it is, it returns 0. If the input list is not empty, it loops through each element of the list and calculates the sum of the elements. The maximum sum is then returned as the output.\n\nTo test the function, we create a list of lists and call the `maximum_Sum` function with it. The function returns the maximum sum of the elements in the list."], ["\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\n# Test function\ndef find_Product(arr, target):\n    product = 1\n    for I in range(len(arr)):\n        if arr[i] != arr[i+1]:\n            product *= arr[i]\n    return product\n\n# Test function with input array"], ["\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 3) == False"], ["\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n\n# Test the function with some sample inputs\nremove_test_cases = [\n    [\"\", \"\"]\n    , [\"a\", \"b\", \"c\"]\n    , [\"123456789\", \"1234567890\"]\n    , [\"1234567890123456789\", \"12345678901234567890\"]\n    , [\"12345678901234567890123456789\", \"12345678901234567890123456789\"]\n    , [\"1234567890123456789012345678901234567890123456789012345678901234567890\", \"1234567890123456789012345678901234567890123456789012345678901234567890\"]\n    , [\"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\", \"12345678901234567"], ["\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n```\n\nExplanation:\n\nThe `binomial_Coeff` function takes two arguments: `n` (the number of times the event occurs) and `k` (the number of times the event is not occurring). It returns the binomial coefficient, which is the number of ways to select `n` objects from `k` objects, where each object is independently chosen with probability `p`.\n\nThe function uses the binomial theorem to calculate the coefficient. The binomial theorem states that for any positive integers `n` and `k`,\n"], ["\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\nExplanation:\nThe function takes an array of integers as input and returns the element occurring odd number of times.\n\nThe function first checks if the input array is empty or contains only one element. If it is, the function returns the input array.\n\nIf the input array contains more than one element, the function iterates over the array and checks if the current element is odd. If it is, the function increments the count of odd occurrences and returns the current element.\n\nFinally, the function returns the first element that occurs odd number of times.\n\nExample usage:\n>>> get_Odd_Occurrence([1,2,3,1,2,3,1],7)\n1"], ["\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n\n# Example usage\ncount_Substring_With_Equal_Ends(\"abcdef\") # Output: 3\ncount_Substring_With_Equal_Ends(\"abcd\") # Output: 0\ncount_Substring_With_Equal_Ends(\"\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abc\") # Output: 1\ncount_Substring_With_Equal_Ends(\"abcdef\") # Output: 3\ncount_Substring_With_Equal_Ends(\"abcdefg\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcdefg\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcdefg\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcdefg\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcdefg\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcdefg\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcdefg\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcdefg\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcdefg\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcdefg\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcdefg\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcdefg\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcdefg\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcdefg\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcdefg\") # Output: 0\ncount_Substring_With_Equal_Ends(\"abcdefg\") # Output: 0\ncount_Substring_With_Equal_End"], ["\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n\n# function to find the top k frequent numbers from given lists\ndef find_top_k_frequent_numbers(lst1, lst2, k):\n    # create a heap queue to store the top k frequent numbers\n    heapq = heapq.HeapQueue(k)\n    # create a list to store the top k frequent numbers\n    top_k_frequent_numbers = []\n    # iterate through the lists and add the top k frequent numbers to the heap queue\n    for num in lst1:\n        heapq.heappush(top_k_frequent_numbers, num)\n    for num in lst2:\n        heapq.heappush(top_k_frequent_numbers, num)\n    # return the top k frequent numbers from the heap queue\n    return heapq.heappop(top_k_frequent_numbers)\n\n# example usage"], ["\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\n# Test function"], ["\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n```\n\nIn this example, the `assert` statement checks that the function returns the expected output for the given input. The `decimal_To_Binary` function takes a decimal number as input and returns its binary equivalent. The function uses the `bin` function to convert the decimal number to binary. The `assert` statement checks that the function returns the expected output for the given input."], ["\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n```\n\nExplanation:\n\n- The function `sort_mixed_list` takes a list of integers and strings as input.\n- It initializes an empty list to store the sorted list.\n- It iterates through the list and compares each element with its corresponding string.\n- If the strings are equal, the corresponding integer is swapped with the next integer in the list.\n- The sorted list is returned as the output.\n\nNote: This function assumes that the input list contains only integers and strings. If you want to sort a list of mixed data types, you can modify the function to handle that case."], ["\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\n# Example usage\nfreq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])"], ["\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\n# function to filter even numbers\ndef filter_evennumbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\n# test function"], ["\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\nExplanation:\nThe function takes an array as input and returns the sum of all the repeated elements in the array.\n\nTo find the sum of repeated elements, we can use a loop to iterate over the array and check if the current element is repeated. If it is, we add 1 to the sum.\n\nHere's the implementation:\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n```\n\nExplanation:\n\n1. We start by importing the `re` module, which is used for regular expressions.\n\n2. We define a function called `text_match` that takes a string as input and returns a boolean value indicating whether the string matches the pattern specified in the function.\n\n3. We define a pattern string that matches a sequence of lowercase letters joined with an underscore. The pattern is defined as `a[a-z]+_b[a-z]+_c[a-z]+`.\n\n4. We define a regular expression object using the `re.compile()` function, which is used to compile the pattern string into a regular expression object.\n\n5. We use the `re.search()` function to search for the pattern in the input string. If the search matches, the function returns `True`, indicating that the pattern was found.\n\n6. We use the `re.findall()` function to extract all matches from the search result.\n\n7. We use the `assert` statement to check if the function returns `True` for the input string.\n\n8. Finally, we print a message indicating whether the function successfully matched the input string."], ["\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\n# Example usage\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_match_string(\"python\")\n# Output: 'Not matched!'\n\ntext_"], ["\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\nassert get_gcd([1, 2, 3, 4, 5]) == 1"], ["\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\nassert test_distinct([1,2,3,4,5,6,7,8,9]) == False"], ["\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\ndef extract_first_or_specified(lst, specified_element):\n    if specified_element == 0:\n        return lst[0]\n    else:\n        return lst[1:]\n"], ["\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n\"\"\"\nExample 2:\nGiven the list [1, 2, 3, 4, 5], find the minimum element using lambda function."], ["\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n\"\"\"\nExample 2:\nGiven the array [1, 2, 3, 4, 5, 6, 7, 8], the maximum length of the subsequence with difference between adjacent elements is 5."], ["\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\n# Example usage\ncount_Substrings('112112',6)"], ["\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\n# Testing recursive_list_sum function"], ["\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\nassert pos_count([-1,2,3,4]) == 2"], ["\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\nbell_number(3)==3\nbell_number(4)==4\nbell_number(5)==5\nbell_number(6)==6\nbell_number(7)==7\nbell_number(8)==8\nbell_number(9)==9\nbell_number(10)==10\nbell_number(11)==11\nbell_number(12)==12\nbell_number(13)==13\nbell_number(14)==14\nbell_number(15)==15\nbell_number(16)==16\nbell_number(17)==17\nbell_number(18)==18\nbell_number(19)==19\nbell_number(20)==20\nbell_number(21)==21\nbell_number(22)==22\nbell_number(23)==23\nbell_number(24)==24\nbell_number(25)==25\nbell_number(26)==26\nbell_number(27)==27\nbell_number(28)==28\nbell_number(29)==29\nbell_number(30)==30\nbell_number(31)==31\nbell_number(32)==32\nbell_number(33)==33\nbell_number(34)==34\nbell_number(35)==35\nbell_number(36)==36\nbell_number(37)==37\nbell_number(38)==38\nbell_number(39)==39\nbell_number(40)==40\nbell_number(41)==41\nbell_number(42)==42\nbell_number(43)==43\nbell_number(44)==44\nbell_number(45)==45\nbell_number(46)==46\nbell_number(47)=="], ["\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n```\n\nExplanation:\n\nThe `is_Monotonic` function takes an array as input and returns `True` if the array is monotonic, meaning that the elements are increasing or decreasing in value. If the array is not monotonic, the function returns `False`.\n\nThe function uses a simple approach of checking if the array is empty or contains only one element. If the array is empty, it is monotonic, and if it contains only one element, it is also monotonic. Otherwise, it is not monotonic.\n\nThe `assert` statement is used to test the function's output. The function is expected to return `True` if the input array is monotonic, and `False` otherwise."], ["\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\nComb sort is a simple and efficient sorting algorithm that works by repeatedly merging adjacent elements until the list is sorted. It is a variation of the insertion sort algorithm, which is a simple sorting algorithm that works by repeatedly inserting an element into a sorted list. Comb sort is a variation of insertion sort that works by repeatedly merging adjacent elements until the list is sorted. It is a simple and efficient sorting algorithm that works by repeatedly merging adjacent elements until the list is sorted. Comb sort is a simple and efficient sorting algorithm that works by repeatedly merging adjacent elements until the list is sorted. It is a variation of the insertion sort algorithm, which is a simple sorting algorithm that works by repeatedly inserting an element into a sorted list. Comb sort is a simple and efficient sorting algorithm that works by repeatedly merging adjacent elements until the list is sorted. It is a variation of the insertion sort algorithm, which is a simple sorting algorithm that works by repeatedly inserting an element into a sorted list. Comb sort is a simple and efficient sorting algorithm that works by repeatedly merging adjacent elements until the list is sorted. It is a variation of the insertion sort algorithm, which is a simple sorting algorithm that works by repeatedly inserting an element into a sorted list. Comb sort is a simple and efficient sorting algorithm that works by repeatedly merging adjacent elements until the list is sorted. It is a variation of the insertion sort algorithm, which is a simple sorting algorithm that works by repeatedly inserting an element into a sorted list. Comb sort is a simple and efficient sorting algorithm that works by repeatedly merging adjacent elements until the list is sorted. It is a variation of the insertion sort algorithm, which is a simple sorting algorithm that works by repeatedly inserting an element into a sorted list. Comb sort is a simple and efficient sorting algorithm that works by repeatedly merging adjacent elements until the list is sorted. It is a variation of the insertion sort algorithm, which is a simple sorting algorithm that works by repeatedly inserting an element into a sorted list. Comb sort is a simple and efficient sorting algorithm that works by repeatedly merging adjacent elements until the list is sorted. It is a variation of the insert"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\n# Example usage\nmultiple_split('Forces of the darkness are coming into the play.')"], ["\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n```\n\nExplanation:\n\n- The function `is_samepatterns` takes two arguments: the first argument is the input string, and the second argument is an array of patterns.\n- The function checks whether the input string follows the pattern specified by the patterns array.\n- The function uses a loop to iterate over the patterns array and compare each pattern with the input string.\n- If the input string matches any pattern in the patterns array, the function returns `True`.\n- If the input string does not match any pattern in the patterns array, the function returns `False`.\n\nExample usage:\n"], ["\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n```\n\nIn this example, we define a function `find_tuples` that takes a list of tuples as input and returns a list of tuples that have all elements divisible by a given `k`. We then use the `assert` statement to test the function with some sample inputs."], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for I in range(n):\n        if (n & (1 << i)) != 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\n# Example usage\nzip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6))\n# Output: [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]"], ["\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n\n# Test the function with different inputs"], ["\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\n# Define the function\ndef sequence(n):\n    # Initialize the sequence\n    sequence = [1]\n    # Generate the sequence\n    for I in range(1, n+1):\n        sequence.append(sequence[i-1] + sequence[i])\n    # Return the sequence\n    return sequence[n]\n\n# Test the function"], ["\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\n# Test the function with different values of radius\nfor r in [1, 2, 3, 4, 5]:\n    surfacearea_sphere(r)\n\n# Output the result"], ["\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\n# Example usage\nfreq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])\n# Output: {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}"], ["\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n"], ["\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\n# Test the function with different inputs"], ["\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\ndef frequency_lists(lst):\n    freq_dict = {}\n    for lst in lst:\n        for item in lst:\n            if item not in freq_dict:\n                freq_dict[item] = 1\n            else:\n                freq_dict[item] += 1\n    return freq_dict\n"], ["\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\nassert multiply_num([8, 2, 3, -1, 7])==-67.2"], ["\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\n# Example usage\nnext_smallest_palindrome(99)\n# Output: 101"], ["\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\nassert kth_element([12,3,5,7,19], 5, 3) == 5"], ["\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\n# Example usage\ncount([True,False,True])\n# Output: 2"], ["\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n\n# Testing the function\nadd_lists([5, 6, 7], (9, 10))"], ["\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n```\n\nIn this example, the `count_Hexadecimal` function takes two arguments: the first argument is the starting number, and the second argument is the ending number. It returns the number of hexadecimal numbers between the two numbers.\n\nThe function uses a loop to iterate through the range and count the number of hexadecimal digits. It returns the number of hexadecimal digits found in the range.\n\nTo test the function, you can call it with different starting and ending numbers and check the result."], ["\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\n# Test cases"], ["\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\nassert odd_Equivalent(\"10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"], ["\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n\n# Example usage\nextract_missing([(6, 9), (15, 34), (48, 70)], 2, 100)\n# Output: [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]"], ["\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n\"\"\" Write a function to find the maximum element in a list. * list item * list item * list item * list item"], ["\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n\ndef perimeter(height, radius):\n    \"\"\"\n    Calculates the perimeter of a cylinder.\n    :param height: height of the cylinder\n    :param radius: radius of the cylinder\n    :return: perimeter of the cylinder\n    \"\"\"\n    return 2 * (height + radius)\n"], ["\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\nassert empty_dit([{},{},{}])==True"], ["\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n```\n\nIn this example, we define a function called `tuple_to_int` that takes a tuple of positive integers as input and returns the corresponding integer. The function first checks that the tuple is a valid tuple of positive integers by using the `isinstance` function. If the tuple is not a valid tuple, the function raises an error.\n\nNext, the function takes the tuple as input and converts it into an integer using the `int` function. The `isinstance` function is used again to check that the integer returned by the `int` function is a valid integer.\n\nFinally, the function returns the integer.\n\nNote that this function is not optimized for performance, as it does not use any built-in functions or libraries for integer conversion. However, it can be used as a simple and easy-to-understand example of how to write a function in Python."], ["\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n\n# Example usage\nlist_to_float([(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")]).assert_equals('[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]')"], ["\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\n# Exercise 2: Reverse a string"], ["\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\n# Example usage\nsearch([1, 2, 3, 4, 5], 3)"], ["\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\nassert max_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), (21, 22), (23, 24), (25, 26), (27, 28), (29, 30), (31, 32), (33, 34), (35, 36), (37, 38), (39, 40), (41, 42), (43, 44), (45, 46), (47, 48), (49, 50), (51, 52), (53, 54), (55, 56), (57, 58), (59, 60), (61, 62), (63, 64), (65, 66), (67, 68), (69, 70), (71, 72), (73, 74), (75, 76), (77, 78), (79, 80), (81, 82), (83, 84), (85, 86), (87, 88), (89, 90), (91, 92), (93, 94), (95, 96), (97, 98), (99, 100), (101, 102), (103, 104), (105, 106), (107, 108), (109, 110), ("], ["\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\n# Test the function with different values of n\nfor n in range(1, 10):\n    assert smartNumber(n) == n * (n + 1) // 2\n\n# Test the function with invalid inputs"], ["\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\n# Test cases"], ["\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n```\n\nIn this example, we define a function called `sum_of_common_divisors` that takes two arguments, `num1` and `num2`, and returns the sum of all common divisors of those two numbers. The function uses a simple recursive approach to find the sum of all common divisors.\n\nTo test the function, we call it with two numbers, `10` and `15`, and assert that the sum is `6`."], ["\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\n# Test the function with some examples"], ["\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\nassert long_words(5,\"the quick brown fox jumps over the lazy dog\")==['the','quick','brown','fox','jumps']"], ["\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\nassert magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==True"], ["\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n```\n\nIn this example, we define a function called `tup_string` that takes a tuple as input and returns a string representation of the tuple. We then use the `assert` statement to test the function with different input tuples."], ["\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n```\n\nIn this example, we have a list of numbers `[2, 4, -6, -9, 11, -12, 14, -5, 17]` and we want to calculate the sum of the negative numbers. We use a lambda function to define a function that takes a list of numbers as input and returns the sum of the negative numbers. We then call the function with the list of numbers and assert that the sum is equal to `-32`."], ["\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\n# Test the function with different values of n\nfor n in range(1, 11):\n    assert hexagonal_num(n) == 190 * n\n\n# Test the function with invalid input"], ["\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n```\n\nExplanation:\n\n- The function `zero_count` takes an array of integers as input and returns the number of zeroes in the array.\n- We use the `assert` statement to check that the function returns the expected value (0.15 in this case).\n- The function uses the built-in `isinstance` function to check if the input array is a list of integers.\n- If the input array is not a list of integers, the function raises an error.\n- If the input array contains only non-integer values, the function returns 0.\n- If the input array contains only integer values, the function returns the number of zeroes in the array.\n\nNote: This is just an example of how to write a function in Python. You can modify the code to suit your specific requirements."], ["\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\n# Test the function with different values of radius\nfor I in range(1, 11):\n    assert circle_circumference(i)==62.830000000000005\n\n# Test the function with invalid input"], ["\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\n# Example usage\nextract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n# Output: [3, 4, 5, 7, 1]"], ["\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\ndef pancake_sort(lst):\n    \"\"\"\n    Pancake sort implementation\n    \"\"\"\n    n = len(lst)\n    for I in range(n):\n        for j in range(n-i-1):\n            if lst[j] < lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst\n"], ["\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==2"], ["\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\nassert find_lists(([1, 2, 3], [4, 5, 6])) == 1"], ["\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\nExplanation:\nThe function takes an array as input and returns the sum of absolute differences in all pairs of the array.\nThe function first converts the input array to a list of lists, where each list represents a pair of elements.\nThen, it loops through the pairs in the list and calculates the absolute difference between the first and second elements.\nFinally, it adds up all the absolute differences to get the sum of absolute differences in all pairs.\nThe function is tested with the given array and the expected output is returned."], ["\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\n# Define the function\ndef max_path_sum(triangle, n, m):\n    # Initialize the max sum to 0\n    max_sum = 0\n    \n    # Loop through the triangle\n    for I in range(n):\n        for j in range(m):\n            # Calculate the sum of the current row and column\n            sum_row = triangle[i][j] + max_path_sum(triangle, n-1, m-1)\n            \n            # Calculate the sum of the current row and column plus the current row\n            sum_col = triangle[i][j] + triangle[i][j-1] + max_path_sum(triangle, n-1, m-1-1)\n            \n            # Calculate the sum of the current row and column plus the current column\n            sum_col_2 = triangle[i][j] + triangle[i-1][j] + max_path_sum(triangle, n-1-1, m-1)\n            \n            # Calculate the sum of the current row and column plus the current row and column\n            sum_row_2 = triangle[i][j] + triangle[i-1][j] + triangle[i][j-1] + max_path_sum(triangle, n-1-1, m-1-1)\n            \n            # Calculate the sum of the current row and column plus the current row and column plus the current column\n            sum_row_3 = triangle[i][j] + triangle[i-1][j] + triangle[i][j-1] + triangle[i-1][j-1] + max_path_sum(triangle, n-1-1, m-1-1-1)\n            \n            # Calculate the sum of the current row and column plus the current row and column plus the current row and column plus the current column\n            sum_col_3 = triangle[i][j] + triangle[i-1][j]"], ["\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n\n# Test the function with some examples"], ["\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\n# Example usage\nlongest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7)\n# Output: 6"], ["\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\ndef does_Contain_B(n, a, b):\n    \"\"\"\n    This function takes three parameters: n, a, and b.\n    It returns True if n is present in the infinite sequence a <= n <= b.\n    \"\"\"\n    if n <= a:\n        return False\n    elif n >= b:\n        return True\n    else:\n        return does_Contain_B(n-a, a, b)\n"], ["\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    middle = len(arr) // 2\n    left_arr = merge_sort(arr[:middle])\n    right_arr = merge_sort(arr[middle:])\n    \n    merged_arr = []\n    I = j = k = 0\n    \n    while I < len(left_arr) and j < len(right_arr):\n        if left_arr[i] <= right_arr[j]:\n            merged_arr.append(left_arr[i])\n            I += 1\n        else:\n            merged_arr.append(right_arr[j])\n            j += 1\n    \n    while I < len(left_arr):\n        merged_arr.append(left_arr[i])\n        I += 1\n    \n    while j < len(right_arr):\n        merged_arr.append(right_arr[j])\n        j += 1\n    \n    return merged_arr\n"], ["\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n\ndef encode_list(lst):\n    # create a list of tuples of length 2\n    enc_lst = []\n    # iterate through the list and add the length to the enc_lst\n    for I in range(len(lst)):\n        enc_lst.append((lst[i], lst[i+1]))\n    # create a new list with the lengths reversed\n    return [(len(lst), lst[i]) for I in range(len(lst))]\n"], ["\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\nExplanation:\nThe function takes three arguments: the list of numbers, the target value, and the number of operations required to make all elements equal.\nThe function first checks if the list is empty or contains only one element. If it does, the function returns 0.\nIf the list contains more than one element, the function iterates over the list and checks if the current element is equal to the target value. If it is, the function increments the number of operations required to make all elements equal.\nFinally, the function returns the number of operations required to make all elements equal."], ["\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\n# function to remove elements from a list\ndef remove_elements(lst, elements):\n    # create a new list with the elements removed\n    new_lst = []\n    # iterate through the original list\n    for item in lst:\n        # check if the item is in the new list\n        if item in elements:\n            # add the item to the new list\n            new_lst.append(item)\n    # return the new list\n    return new_lst\n\n# test the function"], ["\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\nassert sum_series(5)==11"], ["\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\n# Test the function with different input values\nfor I in range(1, 10):\n    assert area_polygon(i, 10)==(i*i)*10\n\n# Test the function with invalid input values"], ["\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\n# Test the function with sample input and expected output"], ["\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\nExplanation:\nThe function takes an array of integers as input and returns the count of pairs with xor as an even number.\n\nThe function first checks if the input array contains only even numbers. If not, it returns 0.\n\nIf the input array contains only odd numbers, the function checks if any pair of elements in the array has xor as an even number. If yes, it returns 1.\n\nIf the input array contains both even and odd numbers, the function checks if any pair of elements in the array has xor as an even number. If yes, it returns 2.\n\nIf the input array contains only odd numbers, the function returns 0.\n\nIf the input array contains only even numbers, the function returns 1.\n\nIf the input array contains both even and odd numbers, the function returns 2.\n\nThe function returns the count of pairs with xor as an even number."], ["\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\n# Define a function to find the next power of 2\ndef next_Power_Of_2(n):\n    # Base case: if n is 0, return 1\n    if n == 0:\n        return 1\n    # Base case: if n is 1, return n\n    elif n == 1:\n        return n\n    # Recursive case: find the next power of 2\n    else:\n        return next_Power_Of_2(n // 2)\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\n# Example usage\nfrequency([1,2,3],4)\n# Output: 0\n\n# Explanation:\n# The function takes an array as input and a number as a parameter. It returns the frequency of the number in the array.\n# In this example, the function finds that the number 4 appears in the array only once, so the frequency is 0."], ["\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\n# Define the function\ndef get_pell(n):\n    # Define the Pell equation\n    a = 1\n    b = n\n    while b > 1:\n        # Find the root of the equation\n        root = (a ** 2 - b ** 2) // (2 * a)\n        # Check if the root is less than or equal to n\n        if root <= n:\n            # If the root is less than n, swap a and b\n            if root < n:\n                a, b = b, a\n            # Return the Pell number\n            return root\n    # If the root is greater than n, return 0\n    return 0\n\n# Test the function"], ["\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\nExplanation:\nThe function takes three arguments: a list of numbers, an index range (start and end indices), and a step size (how many numbers to skip between each index). The function returns the sum of the numbers in the specified range.\n\nTo find the sum of the numbers in the range [2,1,5,6,8,3,4,9,10,11,8,12], we skip the first two numbers (2 and 1) and sum the numbers between 3 and 11 (5,6,8,9,10,11). The sum is 29."], ["\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n```\n\nIn this example, we define a function called `perimeter_pentagon` that takes a single argument `n`, which is the number of sides of the pentagon. The function then calculates the perimeter of the pentagon using the formula `perimeter = 5 * (side1 + side2 + ... + side5)`.\n\nWe then test the function with different values of `n` to ensure that it returns the correct value.\n\nIn this case, the function returns the expected value of 25."], ["\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\nWrite a function to find the length of a string. list item 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item 2. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3. list item 3"], ["\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\n# Example usage\nremove_splchar('python  @#&^%$*program123')\n# Output: 'pythonprogram123'\n\n# Explanation:\n# The function takes a string as input and returns the same string with all non-alphanumeric characters removed.\n# The regular expression used to remove the splchar is '[^\\w\\s]'.\n# The function removes all characters that do not match the regular expression, which is all non-alphanumeric characters.\n# The output is the same as the input string."], ["\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\n# Example usage\ngrouped_dict = group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])"], ["\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\nassert is_valid_parenthese(\"()\")==True"], ["\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\n# function to find lcm of two numbers\ndef lcm(a,b):\n    return a*b // gcd(a,b)\n\n# function to find gcd of two numbers\ndef gcd(a,b):\n    while b != 0:\n        a,b = b, a % b\n    return a\n\n# function to find range of lcm\ndef range_of_lcm(a,b):\n    return gcd(a,b)\n\n# test function"], ["\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n```\n\nIn this example, we define a function called `search_literals` that takes two arguments: a list of literals and a string to search for. The function returns `True` if the literals are found in the string, and `False` otherwise.\n\nWe then use the `assert` statement to test the function with some sample inputs.\n"], ["\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    \"\"\" Calculate distance between two points using latitude and longitude \"\"\"\n    R = 6371  # Radius of the earth in kilometers\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    distance = R * c\n    return distance\n\n# Example usage\ndistance_lat_long(23.5,67.5,25.5,69.5)"], ["\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\nassert find_character(\"1234567890\") == (['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'], ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'], [], [])"], ["\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\nassert count_pairs([1, 2, 3, 4, 5], 3, 2) == 2"], ["\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\nassert greater_specificnum([220, 330, 500],200)==False"], ["\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\nExplanation:\nThe function parabola_focus takes three parameters: a, b, and c, which represent the coordinates of the vertex (a, b) and the focus (c). It returns the coordinates of the focus (c) as a tuple.\n\nThe function first checks if the input parameters are valid. If the input values are not valid (i.e., a < 0, b < 0, or c < 0), it raises an error.\n\nIf the input values are valid, the function calculates the focus using the formula:\n\nc = (b^2 - a^2) / (2 * a)\n\nThe function then returns the coordinates of the focus as a tuple.\n\nExample usage:\n>>> parabola_focus(5,3,2)\n(-0.3, 1.6)"], ["\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n```\n\nIn this example, we have a function called `check_literals` that takes a string as input and a list of literals as an argument. The function uses regular expressions to search for the literals in the string.\n\nThe function first checks if the list of literals is empty. If it is, the function returns `False`.\n\nIf the list of literals is not empty, the function iterates through the list and checks if each literal matches the pattern. If a literal matches, the function returns `True`.\n\nIf no literals match, the function returns `False`.\n\nHere's how you can use this function in your code:\n"], ["\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\nExplanation:\nThe function takes an array of integers as input and returns the first missing positive number.\n\nThe function first checks if the input array is empty. If it is, it returns -1.\n\nIf the input array is not empty, the function iterates through the array and checks if the current element is greater than the previous element. If it is, the function returns the index of the current element.\n\nIf the current element is greater than the previous element, the function increments the index of the current element and returns it.\n\nIf the current element is less than the previous element, the function returns -1.\n\nFinally, the function returns the index of the first missing positive number in the input array."], ["\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\n# function to count integral points inside a square\ndef count_Intgral_Points(x1,y1,x2,y2):\n    count = 0\n    for I in range(x1,x2+1):\n        for j in range(y1,y2+1):\n            if (i*i + j*j) <= (x2-x1)*(y2-y1):\n                count += 1\n    return count\n\n# test function"], ["\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\nassert remove_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9)) == (1, 2, 3, 4, 5, 6, 7, 8, 9)"], ["\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\nExplanation:\nThe function takes three arguments: the sorted array to search in, the element to search for, and the index to search at. It returns the first index where the element is found.\n\nThe function uses the sorted() method to sort the array, and then iterates through the array using a for loop. It compares the current element with the element to search for, and returns the index where the element is found.\n\nThe first element of the array is always at index 0, so the first index where the element is found is 0."], ["\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n\n# Testing the function\nremove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1)"], ["\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\nExplanation:\nThe function takes two tuples as input, and returns a tuple containing the product of the first tuple raised to the second tuple.\n\nThe function first checks if the first tuple is empty, and if so, returns the second tuple as the result.\n\nIf the first tuple is not empty, the function iterates over the elements of the first tuple, and for each element, multiplies it by the corresponding element of the second tuple.\n\nThe function then returns the resulting tuple.\n\nThe function uses the fact that the product of two numbers raised to a power is equal to the product of the first number raised to the power of the exponent and the second number raised to the power of the exponent.\n\nThe function checks if the second tuple is empty, and if so, returns the first tuple as the result.\n\nIf the second tuple is not empty, the function iterates over the elements of the second tuple, and for each element, multiplies it by the corresponding element of the first tuple.\n\nThe function then returns the resulting tuple.\n\nThe function uses the fact that the product of two numbers raised to a power is equal to the product of the first number raised to the power of the exponent and the second number raised to the power of the exponent.\n\nThe function checks if the first tuple is empty, and if so, returns the second tuple as the result.\n\nIf the first tuple is not empty, the function iterates over the elements of the first tuple, and for each element, multiplies it by the corresponding element of the second tuple.\n\nThe function then returns the resulting tuple.\n\nThe function uses the fact that the product of two numbers raised to a power is equal to the product of the first number raised to the power of the exponent and the second number raised to the power of the exponent.\n\nThe function checks if the second tuple is empty, and if so, returns the first tuple as the result.\n\nIf the second tuple is not empty, the function iterates over the elements of the second"], ["\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]"], ["\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n```\n\nIn this example, we define a function called `hamming_Distance` that takes two integers as arguments and returns the Hamming distance between them. The function takes two arguments, `a` and `b`, and returns the Hamming distance as an integer.\n\nWe then use the `assert` statement to test the function's behavior. The `hamming_Distance` function is called with two integers, `4` and `8`, and the expected result is returned.\n\nNote that the `assert` statement is used to test the function's behavior, and it is not part of the actual implementation. It is used to ensure that the function works as expected."], ["\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\n# Example usage\ninversion_elements((7, 8, 9, 1, 10, 7))\n# Output: (-8, -9, -10, -2, -11, -8)"], ["\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\nassert is_decimal('123.12') == False"], ["\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\ndef heap_replace(heap, new_item):\n    \"\"\"\n    This function takes a heap as input and a new item as input. It removes the smallest element from the heap and then inserts the new item.\n    Returns the modified heap.\n    \"\"\"\n    # Base case: if the heap is empty, return the original heap\n    if len(heap) == 0:\n        return heap\n    \n    # Recursive case: find the smallest element in the heap and remove it\n    min_index = 0\n    for I in range(len(heap)):\n        if heap[i] < heap[min_index]:\n            min_index = i\n    heap[min_index], heap[len(heap)-1] = heap[len(heap)-1], heap[min_index]\n    heapq.heappop(heap)\n    \n    # Recursively call the function with the modified heap\n    return heap_replace(heap, new_item)\n\n# Example usage\nheap = [25, 44, 68, 21, 39, 23, 89]"], ["\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\n# Example usage\ncount_Num(2)\n# Output: 1\n\n# Explanation:\n# The function takes an integer argument 'n' and returns the number of numbers whose oth and nth bits are set.\n# The function first checks if the number is odd. If it is, then the function returns 0.\n# If the number is even, then the function checks if the oth bit is set. If it is, then the function returns 1.\n# If the nth bit is set, then the function returns 1.\n# Finally, the function returns the count of numbers whose oth and nth bits are set."], ["\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n```\n\nIn this example, we have a function named `fourth_Power_Sum` that takes an integer `n` as input and returns the sum of the fourth power of all natural numbers between 1 and `n`. We then use the `assert` statement to test the function with different inputs."], ["\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n```\n\nIn this example, the function `decode_list` takes a list as input and returns the original list decoded using the run-length encoding. The function uses a nested loop to iterate over each element in the input list and checks if it is a run-length element. If it is, it adds the corresponding run length to the corresponding index in the output list. The function then returns the decoded list."], ["\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n\n# Example usage\ncheck_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])\n# Output: False"], ["\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n\"\"\" Example usage \"\"\""], ["\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\nassert first_even ([]) == 0"], ["\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n```\n\nIn this function, we first check if the tuple has the correct number of elements. If it does not, we raise an error. Then, we check if all the elements in the tuple have the same data type. If they do not, we raise an error. Finally, we return True if all the elements have the same data type, and False otherwise."], ["\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == False"], ["\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\n# Example usage\ncount_Set_Bits(2)\n# Output: 1\n\n# Explanation:\n# The function takes a single argument, which is the number to count set bits.\n# The function returns the number of set bits in the number.\n# The set bits are the ones that are set to 1 in the binary representation of the number.\n# In this case, the number 2 has 1 set bit, so the function returns 1."], ["\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\n# Test function with input values"], ["\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\nExplanation:\nThe function takes three arguments: the first argument is the starting index of the range, the second argument is the ending index of the range, and the third argument is the number of bits to check.\nThe function checks whether all the bits in the range are unset. If all the bits are unset, the function returns True. Otherwise, it returns False.\nThe function uses a loop to iterate over all the bits in the range. It checks whether each bit is set or not. If a bit is set, it returns False. If all the bits are unset, the function returns True."], ["\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\nExplanation:\nThe function takes an array of integers as input and returns a new array with all negative elements before positive ones.\nThe function first checks if the input array is empty or contains only positive integers. If it does, it returns the input array.\nIf the input array contains only negative integers, it is simply returned.\nIf the input array contains both positive and negative integers, the function iterates over the array and checks if the current element is negative. If it is, it moves the current element to the beginning of the array and adds it to the negative array.\nFinally, the function returns the re-arranged array."], ["\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\n# Exercise 2: Replace all occurrences of a substring with a new string\n\ndef replace_all(s, find, replace):\n    return s.replace(find, replace)\n"], ["\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\nExplanation:\nThe function takes an array of numbers as input and returns the maximum sum of any subarray of the given right triangle.\n\nThe function first checks if the input array is empty or has only one element. If it is, it returns 0.\n\nIf the input array has two elements, it checks if the first element is greater than the second element. If it is, it returns the first element. If it is not, it returns 0.\n\nIf the input array has three elements, it checks if the first two elements are greater than the third element. If they are, it returns the first two elements. If they are not, it returns 0.\n\nFinally, the function returns the maximum sum of any subarray of the given right triangle."], ["\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\nExplanation:\nThe function takes a list of numbers as input and returns the n largest numbers. The function uses the built-in `sorted()` function to sort the list in ascending order. The `assert` statement checks that the returned list contains the expected values."], ["\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\n# Test the function with some sample inputs\nlateralsuface_cylinder(10,5)\nlateralsuface_cylinder(10,10)\nlateralsuface_cylinder(10,20)\nlateralsuface_cylinder(10,30)\nlateralsuface_cylinder(10,40)\nlateralsuface_cylinder(10,50)\nlateralsuface_cylinder(10,60)\nlateralsuface_cylinder(10,70)\nlateralsuface_cylinder(10,80)\nlateralsuface_cylinder(10,90)\nlateralsuface_cylinder(10,100)\nlateralsuface_cylinder(10,110)\nlateralsuface_cylinder(10,120)\nlateralsuface_cylinder(10,130)\nlateralsuface_cylinder(10,140)\nlateralsuface_cylinder(10,150)\nlateralsuface_cylinder(10,160)\nlateralsuface_cylinder(10,170)\nlateralsuface_cylinder(10,180)\nlateralsuface_cylinder(10,190)\nlateralsuface_cylinder(10,200)\nlateralsuface_cylinder(10,210)\nlateralsuface_cylinder(10,220)\nlateralsuface_cylinder(10,230)\nlateralsuface_cylinder(10,240)\nlateralsuface_"], ["\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\n# Test the function with different inputs\nfor I in range(1, 10):\n    volume_cube(i)"], ["\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\ndef No_of_Triangle(a,b):\n    if a == 0 or b == 0:\n        return 0\n    else:\n        return max(No_of_Triangle(a-1,b),No_of_Triangle(a,b-1))\n"], ["\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n```\n\nExplanation:\n\n1. We define a function `check_occurences` that takes a list of tuples as input and returns a dictionary with the key being the tuple's element and the value being the number of occurrences.\n\n2. We define a list of tuples `tuples` containing tuples of the form `(element, time)` where `element` is a tuple of integers and `time` is a float representing the time in seconds.\n\n3. We call the `check_occurences` function with the `tuples` list as input and return the resulting dictionary.\n\n4. We assert that the resulting dictionary is equal to the expected dictionary, which is `{(1, 3): 2, (2, 5): 2, (3, 6): 1}`.\n\n5. Finally, we print the expected dictionary to confirm that the function correctly returns the expected result."], ["\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(n, m):\n    total_number_of_sequences = 0\n    for I in range(n):\n        for j in range(i+1, n+1):\n            if j <= m:\n                total_number_of_sequences += 1\n    return total_number_of_sequences\n"], ["\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(lst, old_list):\n    return [item for item in lst if item not in old_list] + old_list\n"], ["\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\n# Example usage\nlist_of_tuples = [(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]\nsort_on_occurence(list_of_tuples)"], ["\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\ndef next_Perfect_Square(num):\n    \"\"\"\n    Find the next perfect square greater than a given number.\n    :param num: the number to find the next perfect square for\n    :return: the next perfect square greater than num\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num % 4 == 0 and num % 100 != 0 or num % 400 == 0:\n        return num + 1\n    else:\n        return num * 2\n"], ["\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\n# function to find max sum of bi-tonic sub-sequence\ndef find_max_sum(arr, n):\n    # initialize max sum to 0\n    max_sum = 0\n    \n    # loop through the array\n    for I in range(n):\n        # find the max sum of the sub-sequence of length I\n        max_sum = max(max_sum, find_max_sum(arr[i:], n-i-1))\n        \n    # return the max sum\n    return max_sum\n\n# test function"], ["\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\nassert babylonian_squareroot(100)==3.162277660168379"], ["\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\nassert lps(\"A man, a plan, a canal: Panama\") == 5 "], ["\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\ndef intersection_array(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n"], ["\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n```\n\nExplanation:\n\n- The function `count_X` takes a tuple as input and returns the number of times the specified element appears in the tuple.\n- The function is tested with a sample tuple and the expected output is returned.\n"], ["\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\n# Example usage\ninsert_element(['Red', 'Green', 'Black'], 'c')"], ["\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\nassert count_integer([1,2,3]) == 3"], ["\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\n# Define a function to count the number of prime numbers less than a given non-negative number\ndef count_Primes_nums(n):\n    # Initialize a list to store the prime numbers\n    primes = []\n    # Initialize a counter to count the number of prime numbers\n    count = 0\n    # Loop through the numbers from 2 to n\n    for I in range(2, n+1):\n        # Check if the number is prime\n        if n % I == 0:\n            # If the number is divisible by any prime number less than or equal to I, stop the loop\n            break\n        # If the number is prime, add it to the list of primes\n        primes.append(i)\n        # Increment the counter\n        count += 1\n    # Return the number of prime numbers\n    return count\n\n# Test the function"], ["\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\n# Test the function with different inputs"], ["\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\nassert count_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==3"], ["\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\n# Define a function to find the nth newman\u2013shanks\u2013williams prime number\ndef newman_prime(n):\n    # Base case: if n is 1, return 1\n    if n == 1:\n        return 1\n    # Base case: if n is 2, return 2\n    elif n == 2:\n        return 2\n    # Recursive case: find the nth newman\u2013shanks\u2013williams prime number\n    else:\n        # Find the nth newman\u2013shanks\u2013williams prime number using the formula\n        # nth newman\u2013shanks\u2013williams prime = (n-1) * (n-2) / 2\n        # where n-1 is the number of terms in the sequence\n        # and n-2 is the number of terms in the sequence\n        # that are less than n\n        return newman_prime(n-1) * newman_prime(n-2) / 2\n\n# Test the function"], ["\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n```\n\nIn this example, the function `split_two_parts` takes a list `lst` and an integer `n`, and returns two lists `left` and `right` where `left` contains the first `n` elements of `lst` and `right` contains the rest of the elements. The function uses a loop to split the list into two parts, and returns the two lists as a tuple.\n\nIn this example, the function `split_two_parts` is called with the list `[1, 1, 2, 3, 4, 4, 5, 1]` and an integer `3`, and returns the two lists `[1, 1, 2], [3, 4, 4, 5, 1]`."], ["\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n```\n\nIn this example, we define a function `list_split` that takes a list `list_input` and an integer `n`, and returns a list of `n` sublists, where each sublist contains the `n`th element of the original list. We then use the `assert` statement to test that the function works as expected."], ["\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\n# Test the function with different cube sizes\nfor size in [1, 2, 3, 4, 5]:\n    assert lateralsurface_cube(size)==lateralsurface_cube(size)\n\n# Test the function with different cube orientations\nfor orientation in [0, 90, 180, 270]:\n    assert lateralsurface_cube(5)==lateralsurface_cube(5)\n\n# Test the function with different cube shapes\nfor shape in [\"square\", \"rectangle\", \"hexagon\"]:\n    assert lateralsurface_cube(5)==lateralsurface_cube(5)"], ["\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\n# Define the square_Sum function\ndef square_Sum(n):\n    # Define the sum of squares of first n odd natural numbers\n    sum_of_squares = 0\n    # Loop through each odd natural number from 1 to n\n    for I in range(1, n+1):\n        # Calculate the square of the current odd natural number\n        square = I ** 2\n        # Add the current odd natural number to the sum of squares\n        sum_of_squares += square\n    return sum_of_squares\n\n# Call the square_Sum function with n = 10"], ["\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\n# Example usage\nfind_star_num(3)\n# Output: 37"], ["\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\nExplanation:\nThe function takes an array of integers as input and returns the sum of even numbers at even positions.\nThe input array is passed as a parameter to the function.\nThe function uses a loop to iterate through the array and check if the current element is even or odd.\nIf the current element is even, it is added to the sum.\nIf the current element is odd, it is skipped.\nThe function returns the sum of even numbers at even positions.\nThe function is tested with an example array and the expected output is returned."], ["\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\n# Example usage\nrear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])"], ["\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\nExplanation:\nThe function takes an integer n as input and returns the sum of the even index binomial coefficients up to n.\nThe binomial coefficient is defined as:"], ["\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\n# Example usage\nget_Position([2,5,4],3,2)\n# Output: 2\n\n# Testing the function with different inputs"], ["\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\n# Example usage\ndict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)"], ["\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3"], ["\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\nassert is_num_decagonal(5) == 120"], ["\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n```\n\nExplanation:\n\nThe `sequential_search` function takes an array `arr` and a value `target` as input. It iterates through the array and compares each element with `target`. If `target` is found, it returns `True` as the first argument, and the index of the found element as the second argument. If `target` is not found, it returns `False` as the first argument and `None` as the second argument.\n\nIn the `assert` statement, we are checking if the function returns `True` and the index of the found element. If the function returns `True`, we know that the element was found in the array.\n\nThe function is case-insensitive, so the `target` value does not matter.\n\nThe function uses a `for` loop to iterate through the array. It initializes a `index` variable to 0 and a `found` variable to `False`.\n\nThe `if` statement checks if the current element is equal to `target`. If it is, the `found` variable is set to `True`. If it is not, the `index` variable is incremented by 1.\n\nThe `else` statement checks if the `index` variable is greater than the length of the array. If it is, the function returns `False` as the first argument and `None` as the second argument.\n\nThe `assert` statement checks if the `found` variable is `True`. If it is, the function returns `True` as the first argument and the index of the found element as the second argument. If it is `False`, the function returns `False` as the first argument and `None` as the second argument."], ["\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\nassert all_unique([1,2,3,4,5]) == False"], ["\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]"], ["\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\ndef validate(num):\n    \"\"\"\n    Check if the frequency of each digit is less than or equal to the digit itself.\n    :param num: a number\n    :return: True if the frequency of each digit is less than or equal to the digit itself, False otherwise\n    \"\"\"\n    # check if the number is zero\n    if num == 0:\n        return True\n    \n    # check if the number is negative\n    if num < 0:\n        return False\n    \n    # check if the number is positive\n    if num > 9:\n        return False\n    \n    # check if the number is a multiple of 10\n    if num % 10 == 0:\n        return False\n    \n    # check if the number is a multiple of 100\n    if num % 100 == 0:\n        return False\n    \n    # check if the number is a multiple of 1000\n    if num % 1000 == 0:\n        return False\n    \n    # check if the number is a multiple of 10000\n    if num % 10000 == 0:\n        return False\n    \n    # check if the number is a multiple of 100000\n    if num % 100000 == 0:\n        return False\n    \n    # check if the number is a multiple of 1000000\n    if num % 1000000 == 0:\n        return False\n    \n    # check if the number is a multiple of 10000000\n    if num % 10000000 == 0:\n        return False\n    \n    # check if the number is a multiple of 100000000\n    if num % 100000000 == 0:\n        return False\n    \n    # check if the number is a multiple of 1000000000\n    if num % "], ["\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n```\n\nIn this example, we define a function called `check_element` that takes two arguments: a list of strings and a string to check against. The function checks whether all items in the list are equal to the given string.\n\nIf the function returns `True`, it means that all items in the list are equal to the given string. If it returns `False`, it means that at least one item in the list is not equal to the given string.\n\nWe then use this function in a test case to check whether all items of a list are equal to a given string.\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\"\"\"\nExplanation:\n\nThe function takes three arguments: the original array, the number of times to repeat the array, and the number of elements in the array.\n\nThe function first checks if the number of elements in the array is odd or even. If it's odd, the function returns the maximum sum of the original array.\n\nIf the number of elements in the array is even, the function repeats the array k times and calculates the maximum sum of the resulting array.\n\nThe function then checks if the maximum sum of the repeated array is greater than the maximum sum of the original array. If it is, the function returns the maximum sum of the repeated array.\n\nFinally, the function returns the maximum sum of the original array.\n\nExample usage:\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\n# Define the square function\ndef square(x):\n    return x ** 2\n\n# Define the square_Sum function\ndef square_Sum(n):\n    sum = 0\n    for I in range(1, n+1):\n        sum += square(i)\n    return sum\n\n# Call the square_Sum function"], ["\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\nExplanation:\nThe function takes an array of integers and a prime number p as input. It checks if each element in the array has a modular inverse under p equal to itself. If yes, it returns the index of the element. If no, it returns -1.\nThe function modular_inverse() takes an array of integers as input and returns the index of the first element in the array having modular inverse under p equal to itself.\nThe function checks if each element in the array has a modular inverse under p equal to itself. If yes, it returns the index of the element. If no, it returns -1.\nThe function returns the index of the first element in the array having modular inverse under p equal to itself."], ["\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef max_length(lst):\n    \"\"\"\n    Find the list of lists with maximum length.\n    \"\"\"\n    max_length = []\n    for I in range(len(lst)):\n        if len(lst[i]) > max_length[0]:\n            max_length = [lst[i]]\n        else:\n            max_length.append(lst[i])\n    return max_length\n"], ["\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\ndef count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if k == 0:\n        return 1\n    if n == 1:\n        return 1\n    if k == 1:\n        return 1\n    count = 1\n    for I in range(n):\n        for j in range(n):\n            if i == j:\n                count += count_no_of_ways(n-1, k-1)\n    return count\n"], ["\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\nExplanation:\nThe function `max_val` takes a heterogeneous list as input and returns the maximum value in the list.\n\nThe function first checks if the list is empty. If it is, it returns an empty list.\n\nIf the list is not empty, the function iterates through the list and checks if the current element is a string. If it is, the function returns the current element. If it is not, the function checks if the current element is a number. If it is, the function returns the current element. If it is neither a string nor a number, the function returns an empty string.\n\nFinally, the function returns the maximum value in the list."], ["\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\n# Example usage\nsum_div(8)\n# Output: 7"], ["\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\nExplanation:\nThe function takes an array as input and returns the number of inversions (i.e., swaps) in the array.\nThe function first sorts the array using the quicksort algorithm.\nThen, it iterates over the array and checks if the current element is greater than the previous element.\nIf it is, it swaps the two elements.\nIf the current element is less than the previous element, it increments the count of inversions.\nFinally, the function returns the count of inversions.\nThe function is tested with a sample array and the expected output is returned."], ["\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\n# Example usage\nflatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])\n# Output: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]"], ["\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\nExplanation:\nThe function takes a list of tuples as input and returns the maximum aggregate value.\nThe function first converts the list of tuples to a list of dictionaries, where each dictionary represents a tuple.\nThe function then loops through the list of dictionaries and calculates the maximum aggregate value for each tuple.\nThe function returns the maximum aggregate value as the output.\nThe function uses the built-in max() function to calculate the maximum aggregate value."], ["\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\n# Define the function\ndef count_binary_seq(n):\n    # Initialize count variable to 0\n    count = 0\n    # Loop through all binary sequences of length n\n    for I in range(1, n+1):\n        # Calculate sum of first n bits\n        sum_first_n_bits = 0\n        for j in range(1, n+1):\n            sum_first_n_bits += bin(i)[j:j+2].count('1')\n        # Calculate sum of last n bits\n        sum_last_n_bits = 0\n        for j in range(1, n+1):\n            sum_last_n_bits += bin(i)[j:j+2].count('0')\n        # Check if sum of first n bits is same as sum of last n bits\n        if sum_first_n_bits == sum_last_n_bits:\n            count += 1\n    return count\n\n# Test the function"], ["\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\n# Example usage\n>>> set_Bit_Number(6)\n4"], ["\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\n# Test function"], ["\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\"\"\"\nExample 2:\nInput: [1, 2, 3, 4, 5], 2, 3, 4\nOutput: 6\nExplanation: The maximum sum of increasing subsequence is 6, which is obtained by summing up the first 2 elements (1 and 2) and the last 4 elements (4 and 5). \"\"\"\n\n# function to find the maximum sum of increasing subsequence\ndef find_max_sum_increasing_subseq(arr, start, end, k):\n    # base case: if k is 0, return the maximum sum of the first n elements\n    if k == 0:\n        return max(arr[start:end])\n    \n    # find the maximum sum of the subsequence from start to end-1\n    max_sum = find_max_sum_increasing_subseq(arr, start - 1, end - 1, k - 1)\n    \n    # find the maximum sum of the subsequence from start to end\n    max_sum_after_i = find_max_sum_increasing_subseq(arr, start, end, k - 1)\n    \n    # return the maximum sum of the subsequence from start to end-1 and including the given kth element\n    return max(max_sum, max_sum_after_i)\n\n# test cases"], ["\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef find_largest_products(lst1, lst2, n):\n    largest_products = []\n    for I in range(len(lst1)):\n        for j in range(len(lst2)):\n            if lst1[i] > lst2[j]:\n                largest_products.append(lst1[i])\n            else:\n                largest_products.append(lst2[j])\n    return largest_products[:n]\n"], ["\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n\"\"\"\nExplanation:\nThe function takes an integer as input and returns the left most unset bit.\n\nThe left most unset bit is the first bit that is set to 0. In this case, the left most unset bit is 3, which is the third bit from the left.\n\nTo set the left most unset bit, we simply set the corresponding bit to 1.\n\nFor example, if the input is 10, the function returns 14."], ["\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\n# Test the function with different inputs\nfor I in range(10):\n    assert volume_cone(5,i)==314.15926535897927*i\n\n# Test the function with invalid inputs"], ["\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\nExplanation:\nThe function `pos_nos` takes a list `lst` as input and returns a list of positive integers.\n\nThe function first checks if the list is empty. If it is, it returns an empty list.\n\nIf the list is not empty, the function iterates over the list and checks if each element is a positive integer. If it is, it adds the element to the list of positive integers.\n\nFinally, the function returns the list of positive integers.\n\nThe function uses the `assert` statement to ensure that the list is a list of positive integers."], ["\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n```\n\nIn this function, we first sort the array using the `sorted()` method. Then, we iterate through the array and check if the current element is equal to the given number. If it is, we return the index of the last occurrence.\n\nThe `find_last_occurrence()` function takes a sorted array as input and returns the index of the last occurrence of the given number. It uses the `sorted()` method to sort the array and then iterates through it to find the last occurrence. If the number is found, the index is returned. If not, the function returns -1."], ["\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n```\n\nIn this example, the function `modified_encode` takes a list `input_list` and returns a list of lists, where each inner list represents a run-length encoding of the input list. The function first converts the input list to a list of integers, then iterates over each element in the input list and creates a new list of integers by concatenating the first element with the second element, and then concatenating the second element with the third element, and so on. The resulting list is then converted back to a list of integers, and the function returns the resulting list.\n\nIn this example, the input list `[1, 1, 2, 3, 4, 4, 5, 1]` is modified by adding a new element at the end, resulting in `[1, 1, 2, 3, 4, 4, 5, 1, 6]`. The modified run-length encoding is then returned as a list of lists, where each inner list represents a run-length encoding of the modified input list.\n\nNote that the function `modified_encode` is not optimized for performance, as it iterates over the input list multiple times. However, it is a simple and efficient way to modify the run-length encoding of a list."], ["\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\n# function to find the maximum volume of a cuboid\ndef max_volume(sides):\n    \"\"\"\n    Function to find the maximum volume of a cuboid with given sum of sides.\n    Args:\n        sides (int): sum of sides of the cuboid\n    Returns:\n        float: maximum volume of the cuboid\n    \"\"\"\n    volume = 0\n    for I in range(1, sides+1):\n        volume += (i ** 3) / 6\n    return volume\n\n# test function"], ["\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\n# Test cases"], ["\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\nExplanation:\nThe function takes a list as input and returns an array of the minimum index positions.\nThe function first sorts the list using the built-in `sorted()` function.\nThe `position_min()` function then iterates through the sorted list and checks if the current element is the minimum.\nIf it is, the function returns the index position of the minimum.\nOtherwise, it moves on to the next element and continues until it finds the minimum.\nThe function returns an array of the minimum index positions."], ["\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\nExplanation:\nThe function takes an array of integers and a given index (defaulting to 10). It returns the re-arranged array.\nThe function first checks if the given index is within the bounds of the array. If it is, it simply returns the array unchanged.\nIf the index is outside the bounds, the function iterates through the array and swaps the first and last elements. It then returns the re-arranged array.\nThe function uses a loop to iterate through the array and swap the first and last elements. It then returns the re-arranged array.\nThe function uses a loop to iterate through the array and swap the first and last elements. It then returns the re-arranged array."], ["\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\nassert sum_of_alternates((1, 2, 3, 4, 5, 6)) == (0, 0)"], ["\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n```\n\nIn this example, we have a function called `check_isosceles` that takes three arguments: the base length, the height, and the third side length. The function checks if the given triangle is an isosceles triangle by checking if the sum of the squares of the two legs is equal to the sum of the squares of the third side. If the sum of the squares of the two legs is equal to the sum of the squares of the third side, then the triangle is an isosceles triangle.\n\nIn the `assert` statement, we check if the function returns `False` (i.e., the function returns `False`) when called with the given arguments. If the function returns `False`, then the given triangle is not an isosceles triangle."], ["\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\ndef rotate_left(lst, n, k):\n    if n == 0:\n        return lst\n    if k == 0:\n        return lst\n    if n < k:\n        return rotate_left(lst[n:], n, k-n) + lst[0:k]\n    else:\n        return lst[0:k] + rotate_left(lst[n:], n-k, k-n)\n"], ["\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\nassert find_char('The four consumer complaints contact manager AKR reddy') == ['The', 'four', 'AKR', 'reddy']"], ["\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n```\n\nIn this example, we have a function called `count_unset_bits` that takes a single argument `n`, which is a 32-bit integer. The function returns the number of unset bits in `n`.\n\nThe function first checks if `n` is zero, in which case it returns 0. If `n` is not zero, it calculates the number of unset bits by iterating over each bit in the number and checking if it is set. The function then returns the number of unset bits.\n\nHere's how the function works:\n\n1. The function initializes an integer variable `count` to 0.\n2. The function iterates over each bit in `n` starting from the rightmost bit (the least significant bit) and checking if it is set. If the bit is set, it increments `count` by 1.\n3. The function returns `count`.\n\nHere's an example usage:\n"], ["\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\nExplanation:\nThe function takes a string as input and returns a dictionary with the frequency of each character. The function uses a dictionary comprehension to iterate over the characters in the string and increment the frequency count for each character. The function returns the dictionary with the frequency counts."], ["\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n```\n\nExplanation:\n\n1. We define a function `sort_by_second_element` that takes a list as input and returns a sorted list.\n2. We create a list `sublist` containing two elements, `['a', 10]` and `['b', 5]`.\n3. We call the `sort_by_second_element` function with the `sublist` as input and store the sorted list in a variable `sorted_sublist`.\n4. We assert that the sorted list is equal to the original list by comparing it with the expected output.\n\nIn this example, the sorted list is `[['b', 5], ['a', 10], ['d', 15], ['c', 20]]`."], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\n# Test the function with sample input/output"], ["\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n\n# Example usage\ncount_Substring_With_Equal_Ends('abc')  # returns 1\ncount_Substring_With_Equal_Ends('abcd')  # returns 1\ncount_Substring_With_Equal_Ends('ab')  # returns 0\ncount_Substring_With_Equal_Ends('')  # returns 0\ncount_Substring_With_Equal_Ends('a')  # returns 0\ncount_Substring_With_Equal_Ends('b')  # returns 0\ncount_Substring_With_Equal_Ends('c')  # returns 0\ncount_Substring_With_Equal_Ends('d')  # returns 0\ncount_Substring_With_Equal_Ends('e')  # returns 0\ncount_Substring_With_Equal_Ends('f')  # returns 0\ncount_Substring_With_Equal_Ends('g')  # returns 0\ncount_Substring_With_Equal_Ends('h')  # returns 0\ncount_Substring_With_Equal_Ends('i')  # returns 0\ncount_Substring_With_Equal_Ends('j')  # returns 0\ncount_Substring_With_Equal_Ends('k')  # returns 0\ncount_Substring_With_Equal_Ends('l')  # returns 0\ncount_Substring_With_Equal_Ends('m')  # returns 0\ncount_Substring_With_Equal_Ends('n')  # returns 0\ncount_Substring_With_Equal_Ends('o')  # returns 0\ncount_Substring_With_Equal_Ends('p')  # returns 0\ncount_Substring_With_Equal_Ends('q')  # returns 0\ncount_Substring_With_Equal_Ends('r')  # returns 0\ncount_Substring_With_Equal_Ends('s')  # returns 0\ncount_Sub"], ["\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n```\n\nExplanation:\n\n- The function takes a list of numbers as input and returns the sum of the three lowest positive numbers.\n- The function uses the `sum()` function to calculate the sum of all the numbers in the list.\n- The function checks if the sum is greater than 0 by using the `assert` statement.\n- If the sum is greater than 0, the function returns the sum.\n- If the sum is less than 0, the function raises an error with a message indicating the error.\n\nNote: The function assumes that the list of numbers is sorted in ascending order."], ["\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n```\n\nIn this example, the function `set_to_tuple` takes a set as input and returns a tuple of the elements in the set. The function uses the `sorted` function to sort the set and then converts it into a tuple using the `tuple` function. The `assert` statement checks that the resulting tuple is the same as the input tuple."], ["\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n\n# function to find minimum range\ndef find_minimum_range(arr1, arr2):\n    # initialize minimum range\n    min_range = [0, 0]\n    # iterate through each array\n    for I in range(len(arr1)):\n        # check if at least one element is present in the array\n        if arr1[i] not in arr2:\n            # if not, update minimum range\n            if I > min_range[0]:\n                min_range = [i, i]\n            # else, update minimum range\n            else:\n                min_range[0] = i\n    # return minimum range\n    return min_range\n\n# test function"], ["\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\n# Define function to find number of odd squares in a range\ndef count_Odd_Squares(start, end):\n    count = 0\n    for I in range(start, end+1):\n        if I % 2 != 0:\n            count += 1\n    return count\n\n# Test function"], ["\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n```\n\nIn this example, the function `diff_consecutivenums` takes a list as input and returns the difference between the first and second numbers in the list. The function uses the `assert` statement to test the output against a given list."], ["\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\nWrite a function to find the sum of the first n even numbers."], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\n# Example usage\ncount_Squares(4,3)"], ["\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\ndef find_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if k == 0:\n        return 1\n    if k == 1:\n        return 1\n    return find_ways(n-1, k-1) + find_ways(n-1, k)\n"], ["\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\n# Example usage\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"abcd\") # Output: 1\nminimum_Length(\"ab"], ["\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\n# Test function"], ["\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\n# Example usage\nremove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0)\n# Output: [[2, 3], [4, 5], [1, 1]]"], ["\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\n# Define the function\ndef tn_ap(n, a, p):\n    # Base case: n=1\n    if n == 1:\n        return a\n    # Recursive case: n=p+1\n    else:\n        return a + tn_ap(n-1, a, p+1)\n\n# Test the function"], ["\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\n# Define the function\ndef count_Rectangles(r):\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop through the circle's radius\n    for I in range(r):\n        # If the current angle is less than the pi/2, add 1 to the count\n        if I < (2 * math.pi) / r:\n            count += 1\n    \n    # Return the count\n    return count\n\n# Test the function"], ["\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n```\n\nIn this example, we have a function `find_max` that takes a list of tuples as input. The function first checks if the list is empty, and if it is, it returns the first element of the list. Otherwise, it loops through the list and finds the maximum element using the `max` function.\n\nThe function then returns the maximum element.\n\nTo test the function, we can call it with different input lists and check the output."], ["\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\n# Example usage\nmoddiv_list([4,5,6],[1, 2, 3])"], ["\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n```\n\nIn this example, we have a list of integers, and we want to find the item with the maximum number of occurrences. We define a function `max_occurrences` that takes a list as input and returns the item with the maximum number of occurrences. We then call this function with the given list and assert that the maximum occurrence is returned."], ["\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\n# Example usage\nadd_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4)"], ["\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\nassert min_flip_to_make_string_alternate(\"1011010111\") == 3"], ["\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\n# Define the function\ndef adjacent_num_product(nums):\n    # Initialize the largest product to 1\n    largest_product = 1\n    # Loop through the list\n    for I in range(len(nums)-1):\n        # Find the difference between the ith and (i+1)th elements\n        diff = nums[i+1] - nums[i]\n        # If the difference is greater than the largest product, update the largest product\n        if diff > largest_product:\n            largest_product = diff\n    return largest_product\n\n# Call the function with the given list of integers"], ["\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\nExplanation:\nThe lateral surface area of a cuboid is the area of the base, the height, and the length of the sides.\nThe formula for the lateral surface area of a cuboid is:\nLateral Surface Area = (Base Area) + (Height) + (Length)\nIn our case, the base area is 8, the height is 5, and the length is 6.\nSo, the lateral surface area of the cuboid is:\nLateral Surface Area = (8) + (5) + (6) = 156"], ["\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\nExplanation:\nThe function takes an array of integers as input and a target value as an argument. It then sorts the array in ascending order and finds the smallest missing element. The function returns the smallest missing element.\n\nThe function first checks if the target value is present in the array. If it is, it returns the index of the element. If it is not present, it returns -1.\n\nThe function then sorts the array in ascending order using the built-in `sort()` function.\n\nFinally, the function finds the smallest missing element by iterating through the sorted array and comparing it with the target value. If the target value is smaller than the smallest missing element, the function returns the smallest missing element. If the target value is greater than the smallest missing element, the function returns -1.\n\nThe function returns the smallest missing element if it is present in the array. Otherwise, it returns -1."], ["\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\ndef heap_assending(arr):\n    \"\"\"\n    Function to sort a given list of elements in ascending order using heap queue algorithm.\n    Args:\n        arr (list): List of elements to be sorted.\n    Returns:\n        List: List of sorted elements.\n    \"\"\"\n    heapq.heapify(arr)\n    for I in range(len(arr) - 1, 0, -1):\n        heapq.heappop(arr)\n    return arr\n"], ["\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\n# Test the function with sample input"], ["\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\nassert remove_replica((1, 2, 3, 4, 5, 6, 7)) == (1, 2, 3, 4, 5, 6, 7)"], ["\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\n# Example usage\nremove_Char(\"aba\",'a')\n# Output: \"b\"\n\n# Testing the function with different inputs"], ["\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\nExplanation:\nThe function takes two arguments: the number of rows and columns, and an optional second argument specifying the number of elements per row. The function generates a two-dimensional array by iterating over the rows and columns, and appending a list of length `n` to the `result` list. The result list is then returned."], ["\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\n\n# Example usage\nindex_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)\n# Output: [('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]"], ["\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\"\"\"\nExplanation:\n\nThe function takes an array as input and returns the number of rotations (i.e., the number of times the array is rotated) in the circularly sorted array.\n\nTo find the number of rotations, we first sort the array in ascending order. Then, we iterate through the array and check if the current element is greater than the previous element. If it is, we know that the array has undergone a rotation.\n\nFor example, if the array is [8, 9, 10, 1, 2, 3, 4, 5, 6, 7], then the function would return 3 because the array has undergone 3 rotations.\n\nNote that the function assumes that the array is circularly sorted, which means that the last element is greater than or equal to the first element. If the array is not circularly sorted, the function would return an incorrect value."], ["\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n\n# Define the function\ndef get_perrin(n):\n    \"\"\"\n    Recursive function to find the n'th perrin number\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-1) + get_perrin(n-2)\n\n# Test the function"], ["\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\n# Test cases"], ["\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\n# Example 2: Checking if a string is a palindrome"], ["\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\n# Example usage\nhighest_Power_of_2(10)\n# Output: 8\n\n# Explanation:\n# The function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n# The highest power of 2 that is less than or equal to n is 2^n, which is 8 in this case."], ["\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\n# Define the function\ndef find_lucas(n):\n    # Initialize the result to 1\n    result = 1\n    \n    # Loop through the numbers from 1 to n\n    for I in range(2, n+1):\n        # If the number is a multiple of 1 or 2, add it to the result\n        if I % 1 == 0 or I % 2 == 0:\n            result += I\n    \n    # Return the result\n    return result\n\n# Test the function"], ["\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\n# Test function"], ["\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\n# Define the function\ndef get_max_sum(n):\n    # Calculate the sum of the first n/2 terms\n    f_n_2 = 0\n    for I in range(1, n):\n        f_n_2 += f(i / 2)\n    # Calculate the sum of the first n/3 terms\n    f_n_3 = 0\n    for I in range(1, n):\n        f_n_3 += f(i / 3)\n    # Calculate the sum of the first n/4 terms\n    f_n_4 = 0\n    for I in range(1, n):\n        f_n_4 += f(i / 4)\n    # Calculate the sum of the first n/5 terms\n    f_n_5 = 0\n    for I in range(1, n):\n        f_n_5 += f(i / 5)\n    # Calculate the sum of the first n terms\n    sum_n = f_n_2 + f_n_3 + f_n_4 + f_n_5\n    # Calculate the maximum sum\n    max_sum = max(f_n_2, f_n_3, f_n_4, f_n_5)\n    return max_sum\n\n# Test the function"], ["\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\n# Define the function\ndef max_length_list(lst):\n    # Initialize the maximum length to 0\n    max_length = 0\n    \n    # Loop through the list\n    for I in lst:\n        # If the current element is greater than the current maximum length, update the maximum length\n        if I > max_length:\n            max_length = I\n    \n    # Return the maximum length\n    return max_length\n\n# Test the function"], ["\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\nassert check_distinct((1, 2, 3, 4, 5, 6)) == True"], ["\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\nassert sum_of_digits([1,2,3,4,5])==10"], ["\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\nExplanation:\nThe function takes two tuples as input and returns a new tuple containing the bitwise xor of the corresponding elements.\nThe bitwise xor operation is performed using the bitwise AND operation (&) and the bitwise OR operation (|).\nThe function uses the bitwise AND operation to combine the corresponding elements of the two tuples.\nThe bitwise OR operation is used to combine the resulting bitwise AND values with the corresponding elements of the second tuple.\nThe resulting tuple is then returned."], ["\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\n# Example usage\nadd_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n# Output: ((7, 10), (7, 14), (3, 10), (8, 13))"], ["\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\ndef k_smallest_pairs(arr1, arr2, k):\n    \"\"\"\n    Find k smallest pairs from the two arrays.\n    \"\"\"\n    # Sort the first array\n    arr1.sort()\n    # Sort the second array\n    arr2.sort()\n    # Initialize the result list\n    result = []\n    # Loop through the first array\n    for I in range(len(arr1)):\n        # Check if the current element is in the second array\n        if arr1[i] in arr2:\n            # If it is, add it to the result list\n            result.append([arr1[i], arr2[i]])\n    # Return the result list\n    return result[:k]\n\n# Example usage"], ["\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n```\n\nIn this example, we define a function `min_val` that takes a heterogeneous list as input and returns the minimum value in the list. We then use the `assert` statement to test the function with different input lists. The function should return the minimum value in the list if it exists, otherwise it should return `None`."], ["\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\n# Test the function with sample input and expected output"], ["\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\n# Test the function with some examples"], ["\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\n# Example usage\nextract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)"], ["\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == True"], ["\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\nExplanation:\nThe function takes an array of integers as input and returns a tuple containing the maximum product and the index of the element with the highest product.\n\nThe function first initializes a variable `max_Product` to the value `None`.\n\nThen, it loops through the array `arr` and checks if the current element `e` has a higher product than `max_Product`. If it does, it updates `max_Product` to `e` and sets its index to the index of `e` in `arr`.\n\nFinally, the function returns the `max_Product` tuple.\n\nThe function uses a loop to iterate through the array `arr` and check if the current element `e` has a higher product than `max_Product`. If it does, the function updates `max_Product` to `e` and sets its index to the index of `e` in `arr`.\n\nIf `max_Product` is still `None`, the function returns `None`.\n\nIf `max_Product` is not `None`, the function returns `(max_Product[0], max_Product[1])`.\n\nThe function uses the `max` function to find the maximum element in the array `arr`.\n\nThe function then returns the tuple `(max_Product[0], max_Product[1])` as the maximum product and the index of the element with the highest product."], ["\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\ndef breakSum(num):\n    if num == 0:\n        return 0\n    elif num % 3 == 0:\n        return num // 3\n    else:\n        return num + breakSum(num // 3)\n"], ["\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\nassert group_tuples([('a', 'b'), ('c', 'd'), ('e', 'f')]) == [('a', 'b', 'c'), ('e', 'f')]"], ["\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n```\n\nExplanation:\n\nThe `Find_Max` function takes an array of strings as input and returns the sublist having the maximum length. The function uses a `max()` function to find the maximum element in the array and returns the index of the element. The function then iterates through the sublist and checks if the current element is greater than the maximum element found so far. If it is, the current element is added to the return list. Finally, the function returns the list of maximum-length sublists.\n\nThe function is tested with the given input array and returns the expected output."], ["\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n```\n\nIn this example, we have a list of numbers `[22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]`. We call the `round_and_sum` function with the list of numbers as input and print the total sum multiplied by the length of the list. The function rounds every number to two decimal places and adds them together to get the total sum. The function returns the total sum multiplied by the length of the list."], ["\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\n# Define the function\ndef cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the cubes of the first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for I in range(1, n+1):\n        sum += i**3\n    return sum\n\n# Test the function"], ["\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\n# function to find the average of cubes of first n natural numbers\ndef find_Average_Of_Cube(n):\n    sum = 0\n    for I in range(1, n+1):\n        sum += i**3\n    return sum/n\n\n# test the function"], ["\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\nExplanation:\nThe function takes an array of integers as input, a starting index, a target index, and a number of rows and columns. It returns the maximum value of the submatrix that contains the target value.\n\nThe function first checks if the target value is in the first row or the first column. If it is, the function returns the value of the first row or column.\n\nIf the target value is not in the first row or the first column, the function recursively calls itself with the remaining rows and columns.\n\nThe function then checks if the target value is in the second row or the second column. If it is, the function returns the value of the second row or column.\n\nIf the target value is not in the second row or the second column, the function recursively calls itself with the remaining rows and columns.\n\nFinally, the function returns the maximum value of the submatrix that contains the target value."], ["\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],2)==1"], ["\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\nExplanation:\nThe function takes an array as input and returns the filtered array. The lambda function is used to filter the array. The lambda function takes two arguments - the element of the array and the index of the element. The lambda function returns True if the element is odd, False otherwise. The lambda function is applied to each element of the array using the map() function. The map() function applies the lambda function to each element of the array and returns a new array. The lambda function is applied to the filtered array using the filter() function. The filter() function returns the filtered array."], ["\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\n# Define the shell sort function\ndef shell_sort(arr):\n    n = len(arr)\n    for I in range(n // 2, 0, -1):\n        # Swap the middle element with the first element\n        j = 0\n        while j < I:\n            arr[j], arr[j+i] = arr[j+i], arr[j]\n            j += 1\n    # Repeat the process with the remaining elements\n    for I in range(n):\n        j = i\n        while j >= 1 and arr[j] < arr[j-1]:\n            arr[j], arr[j-1] = arr[j-1], arr[j]\n            j -= 1\n    return arr\n\n# Test the function"], ["\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\n# Example usage\ncommon_element([1,2,3,4,5], [5,6,7,8,9])\n# Output: True\n\ncommon_element([1,2,3,4,5], [1,2,3,4,5])\n# Output: False\n\ncommon_element([1,2,3,4,5], [1,2,3,4,6])\n# Output: False\n\ncommon_element([1,2,3,4,5], [1,2,3,4,5,6])\n# Output: False\n\ncommon_element([1,2,3,4,5], [1,2,3,4,5,7])\n# Output: False\n\ncommon_element([1,2,3,4,5], [1,2,3,4,5,6,7])\n# Output: True"], ["\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\nExplanation:\nThe function takes three arguments: the first two numbers in the trapezium, and the third number at the end.\nThe function first checks if the trapezium is a valid trapezium, which means that the sum of the two sides is equal to the third side.\nIf the trapezium is valid, the function calculates the median by finding the middle point of the two sides and dividing the sum of the two sides by 2.\nIf the trapezium is not valid, the function raises an error.\nThe function returns the calculated median."], ["\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n```\n\nIn this example, we define a function called `text_match_one` that takes a string as input and returns a boolean value indicating whether the string matches the pattern `a followed by one or more b's`.\n\nThe function first checks if the input string contains the pattern `a` using the `startswith` method. If it does, it returns `True`.\n\nNext, the function checks if the input string contains the pattern `a followed by one or more b's` using the `re.match` function. If it does, it returns a `MatchObject` object that contains the matched pattern and the matched string.\n\nFinally, the function returns the `MatchObject` object if it matches the pattern, or `False` if it does not.\n\nTo use this function, simply call it with a string as input and check the return value."], ["\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\nassert count_bidirectional([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]) == '5'"], ["\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\n# Test the function with different cube sizes\nfor I in range(1, 10):\n    surfacearea_cube(i)"], ["\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\nassert positive_count([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])==1.0"], ["\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n```\n\nExplanation:\n\n1. We first define a function `trim_tuple` that takes a tuple list as input and returns a new tuple list with each tuple trimmed by the given k.\n\n2. We then define a function `assert_trim_tuple` that takes a tuple list as input and a given k as input. We use the `assert` statement to check that the trimmed tuple list matches the expected output.\n\n3. We define a function `trim_tuple` that takes a tuple list as input and returns a new tuple list with each tuple trimmed by the given k.\n\n4. We define a function `assert_trim_tuple` that takes a tuple list as input and a given k as input. We use the `assert` statement to check that the trimmed tuple list matches the expected output.\n\n5. We define a function `trim_tuple` that takes a tuple list as input and returns a new tuple list with each tuple trimmed by the given k.\n\n6. We define a function `assert_trim_tuple` that takes a tuple list as input and a given k as input. We use the `assert` statement to check that the trimmed tuple list matches the expected output.\n\n7. Finally, we call the `trim_tuple` function with the given tuple list and the desired k, and assert that the resulting trimmed tuple list matches the expected output."], ["\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\n# Example usage\nindex_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n# Output: ((6, 21), (12, 45), (2, 9), (7, 30))"], ["\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n```\n\nIn this example, the `cube_nums` function takes a list of integers as input and returns a list of cubes of those integers. The function uses a lambda function to calculate the cubes of each element in the list. The `assert` statement checks that the output list contains the expected values."], ["\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\n# Example usage\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces(' Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('   Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces(' "], ["\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\n# Test cases"], ["\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\n# function to find sum of even factors of a number\ndef sumofFactors(n):\n    # initialize sum to 0\n    sum = 0\n    # loop through all numbers from 2 to n\n    for I in range(2, n+1):\n        # if number is even, add it to sum\n        if n % I == 0:\n            sum += i\n    return sum\n\n# test function"], ["\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\nassert reverse_string_list(['A', 'B', 'C', 'D', 'E'])==['eD', 'aB', 'c', 'b', 'a']"], ["\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n```\n\nIn this example, the function `Find_Min` takes a list as input and returns the sublist having the minimum length. The function uses a loop to iterate through the list and check if the current element is less than the current minimum. If it is, the current element is added to the list and the minimum is updated. Finally, the function returns the list with the minimum element."], ["\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n```\n\nIn this example, the function `Extract` takes a list of lists as input and returns a list of the first element of each sublist. The function uses a list comprehension to extract the first element of each sublist, and then uses the `assert` statement to verify that the output matches the expected output."], ["\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n```\n\nExplanation:\n\nThe function `combinations_list` takes a list as input and returns a list of all possible combinations of the elements in the list. The function uses a recursive approach to find all possible combinations.\n\nThe function first checks if the list is empty. If it is, it returns an empty list.\n\nIf the list is not empty, the function recursively calls itself with the remaining elements of the list and the previous combination.\n\nThe function uses a list comprehension to generate all possible combinations.\n\nThe function returns the list of all possible combinations.\n\nThe function is tested with the given input list and returns the expected output."], ["\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\nassert max_subarray_product([-1, 0, 1, -3, 4]) == 0"], ["\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==True"], ["\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': None})=={'c1': 'Red', 'c2': 'Green'}"], ["\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\nassert find_peak([1, 3, 20, 4, 1, 0], 5) == 0"], ["\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\nExplanation:\nThe function takes an array of numbers and a target number as input. It then finds the maximum product formed by multiplying the numbers of an increasing subsequence of the array.\n\nThe function starts by initializing a variable `max_product` to 0. It then loops through the array, starting from the second element (index 1) and incrementing the `max_product` variable by the product of the current element and the next element.\n\nThe loop continues until the end of the array. At the end of the loop, the `max_product` variable contains the maximum product formed by multiplying the numbers of the increasing subsequence.\n\nThe function returns the maximum product."], ["\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\nExplanation:\nThe function takes an array of integers and a maximum number of transactions allowed. It returns the maximum profit earned from the maximum of k transactions.\n\nThe function first checks if the array is empty or contains only one element. If it is, the function returns 0.\n\nIf the array contains more than one element, the function iterates over the array and finds the maximum profit from the kth transaction. It then returns the maximum profit.\n\nFor example, given the array [1, 5, 2, 3, 7, 6, 4, 5], the function returns 10 (the maximum profit earned from the maximum of 3 transactions).\n\nNote that the function does not consider the order of the transactions."], ["\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\n# Example usage\nadd_pairwise((1, 2, 3, 4, 5))\n# Output: (6, 12, 15, 18)"], ["\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\n# Test the function with sample input and expected output"], ["\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\n# Example 2: Checking if a string is a palindrome"], ["\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]"], ["\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\n# function to find the sum of the largest and smallest value in an array\ndef find_largest_smallest(arr):\n    # initialize variables\n    max_val = arr[0]\n    min_val = arr[0]\n    \n    # iterate through the array\n    for I in range(1, len(arr)):\n        # check if the current element is greater than the current max value\n        if arr[i] > max_val:\n            max_val = arr[i]\n            \n        # check if the current element is less than the current min value\n        if arr[i] < min_val:\n            min_val = arr[i]\n            \n    return max_val, min_val\n\n# test function"], ["\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\nassert is_subset_sum([1, 2, 3, 4, 5], 3, 5) == False"], ["\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n```\n\nIn this example, we have defined a function called `match` that takes a string as input and returns a boolean value indicating whether the string contains a sequence of one upper case letter followed by lower case letters.\n\nWe then use the `assert` statement to test the function with different input strings. The `match` function is called with each input string, and the `assert` statement checks that the function returns the expected boolean value."], ["\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n\n# Test the function with different values of x"], ["\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n\n# Example usage\nremove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')])\n# Output: ['you', '?']\n\n# Example usage with a list of tuples\nremove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')])\n# Output: ['you', '?']"], ["\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\n# Test the function with different values of n and k\nfor n in range(1, 11):\n    for k in range(1, n+1):\n        assert binomial_probability(n, k, 1.0/3) == 0.13656454808718185\n\n# Test the function with invalid inputs"], ["\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\n# Example usage\nsort_tuple([(1, 3), (3, 2), (2, 1)])\n# Output: [(2, 1), (3, 2), (1, 3)]\n\n# Test function\ndef sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[1])\n"], ["\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\n# Test the function with different values of side length\nfor side_length in [5, 10, 15, 20, 25]:\n    assert area_pentagon(side_length)==43.01193501472417\n\n# Test the function with invalid input"], ["\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\n# Test the function with sample input and expected output"], ["\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\nassert sum_gp(1,5,3)==27"], ["\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\nassert binary_search([1,2,3,5,8], 6) == True"], ["\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n"], ["\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\nassert remove_lowercase('Hello World') == 'Hello World'"], ["\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\"\"\"\nExplanation:\n\nThe heap queue algorithm is a data structure that works by maintaining a priority queue of elements. The priority queue is initially empty, and the first element is added to the queue.\n\nThe heap queue algorithm works by repeatedly adding elements to the queue and removing the smallest element from the queue. The process continues until the queue is empty.\n\nIn our implementation, we use a list to store the elements and a heap queue to maintain the priority queue. We initialize the heap queue with the first element of the list.\n\nWhen we add an element to the heap queue, we compare it with the smallest element in the heap queue. If the new element is smaller than the smallest element, we add it to the heap queue.\n\nWhen we remove the smallest element from the heap queue, we compare it with the next element in the list. If the next element is smaller than the smallest element, we remove it from the heap queue and add it to the heap queue.\n\nWe repeat this process until the queue is empty.\n\nThe function `heap_queue_smallest` takes a list of numbers as input and returns the smallest number from the list. The function checks if the list is empty, and if it is, it returns the first element of the list.\n\nWe use the `assert` statement to check if the function works as expected. The function returns the smallest number from the list if it is not empty, and returns the input list if the list is empty."], ["\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\n# Example usage\nnum_comm_div(2,4)\n# Output: 2\n\nnum_comm_div(3,5)\n# Output: 1\n\nnum_comm_div(5,7)\n# Output: 1\n\nnum_comm_div(10,12)\n# Output: 2\n\nnum_comm_div(15,16)\n# Output: 1\n\nnum_comm_div(21,22)\n# Output: 1\n\nnum_comm_div(23,24)\n# Output: 1\n\nnum_comm_div(25,26)\n# Output: 1\n\nnum_comm_div(27,28)\n# Output: 1\n\nnum_comm_div(29,30)\n# Output: 1\n\nnum_comm_div(31,32)\n# Output: 1\n\nnum_comm_div(33,34)\n# Output: 1\n\nnum_comm_div(35,36)\n# Output: 1\n\nnum_comm_div(37,38)\n# Output: 1\n\nnum_comm_div(39,40)\n# Output: 1\n\nnum_comm_div(41,42)\n# Output: 1\n\nnum_comm_div(43,44)\n# Output: 1\n\nnum_comm_div(45,46)\n# Output: 1\n\nnum_comm_div(47,48)\n# Output: 1\n\nnum_comm_div(49,50)\n# Output: 1\n\nnum_comm_div(51,52)\n# Output: 1\n\nnum_comm_div(53,54)\n# Output: 1\n\nnum_comm_div(55,56)\n# Output: 1\n\nnum_comm_div(57,58)\n#"], ["\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\ndef add_consecutive_nums(lst):\n    \"\"\"\n    Adds consecutive numbers to a list.\n    \"\"\"\n    if not lst:\n        return []\n    else:\n        nums = []\n        for I in range(1, len(lst)):\n            if lst[i] == lst[i-1]:\n                nums.append(lst[i])\n        return nums\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\nExplanation:\n\nThe function `sum_Of_Series` takes an integer `n` as input and returns the sum of the first `n` natural numbers.\n\nThe `assert` statement checks that the sum of the first `n` natural numbers is equal to the sum of the cube of those numbers.\n\nThe `sum_Of_Series` function uses the formula `sum(n^3)` to calculate the sum of the first `n` natural numbers.\n\nThe `assert` statement checks that the sum of the first `n` natural numbers is equal to the sum of the cube of those numbers."], ["\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n\ndef re_order(arr):\n    # Remove all zeroes from the array\n    arr = [x for x in arr if x != 0]\n    # Reverse the array\n    arr = [arr[::-1]] + arr[1:]\n    # Reverse the reversed array\n    arr = [arr[::-1]] + arr[1:]\n    # Reverse the reversed array\n    arr = [arr[::-1]] + arr[1:]\n    # Reverse the reversed array\n    arr = [arr[::-1]] + arr[1:]\n    # Reverse the reversed array\n    arr = [arr[::-1]] + arr[1:]\n    # Reverse the reversed array\n    arr = [arr[::-1]] + arr[1:]\n    # Reverse the reversed array\n    arr = [arr[::-1]] + arr[1:]\n    # Reverse the reversed array\n    arr = [arr[::-1]] + arr[1:]\n    # Reverse the reversed array\n    arr = [arr[::-1]] + arr[1:]\n    # Reverse the reversed array\n    arr = [arr[::-1]] + arr[1:]\n    # Reverse the reversed array\n    arr = [arr[::-1]] + arr[1:]\n    # Reverse the reversed array\n    arr = [arr[::-1]] + arr[1:]\n    # Reverse the reversed array\n    arr = [arr[::-1]] + arr[1:]\n    # Reverse the reversed array\n    arr = [arr[::-1]] + arr[1:]\n    # Reverse the reversed array\n    arr = [arr[::-1]] + arr[1:]\n    # Reverse the reversed array\n    arr = [arr[::-1]] + arr"], ["\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\nremove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])"], ["\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\n# Example usage\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"]) # True\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"green\",\"red\",\"black\",\"orange\"]) # False\nsame_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"]) # False"], ["\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\nExplanation:\nThe function takes an array and a target value as input. It first checks if the target value is less than any element in the array. If it is, it returns 0.\nIf the target value is greater than any element in the array, it returns the number of subsequences with product smaller than k.\nFor example, the function returns 11 for the given array [1,2,3,4] and target value 10."]]