[["\"\"\"\nWrite a function to find the shared elements from the given two lists.\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to identify non-prime numbers.\nassert is_not_prime(2) == False\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Find the n largest numbers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heapq.heapify(numbers)\n    for I in range(n):\n        heapq.heappop(numbers)\n    return [heapq.heappop(numbers)[-1] for I in range(n)]\n"], ["\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nassert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string.\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\"\"\"\nWrite a function to find all words which are at least 5 characters long in a string."], ["\"\"\"\nWrite a function to find squares of individual elements in a list.\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\nExplanation:\nThe function takes a list as input and returns a new list containing the squares of the individual elements.\nThe square of a number is the product of its digits, so we iterate over the list and calculate the square of each element.\nWe then concatenate the resulting lists and return the new list.\nThe assert statement ensures that the function works as expected by checking the output against the expected output."], ["\"\"\"\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nassert find_Rotations(\"aaaa\") == 1\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\ndef sort_matrix(matrix):\n    # Sort the matrix in ascending order\n    sorted_matrix = []\n    for row in matrix:\n        sorted_row = []\n        for element in row:\n            sorted_row.append(element)\n        sorted_matrix.append(sorted_row)\n    return sorted_matrix\n"], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\n# Define the function\ndef find_Volume(base, height, width):\n    \"\"\"\n    This function takes in the base, height, and width of a triangular prism.\n    It returns the volume of the prism.\n    \"\"\"\n    volume = base * height * width\n    return volume\n\n# Test the function"], ["\"\"\"\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function that returns the perimeter of a square given its side length as input.\nassert square_perimeter(10)==40\n\"\"\"\n```\n\nIn this example, the `square_perimeter` function takes a side length as input and returns the perimeter of the square. The function uses the `assert` statement to ensure that the input side length is a positive number."], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\n# Testing the function with different inputs"], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\nassert test_duplicate(([1,2,3,4,5,1]))==True"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the largest number that can be formed with the given list of digits.\nassert find_Max_Num([1,2,3]) == 321\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n```\n\nIn this example, the function `is_octagonal` takes an integer `n` as input and returns `True` if `n` is an octagonal number, and `False` otherwise. The function uses the formula `n^2 + 3n + 6` to calculate the nth octagonal number.\n\nTo test the function, you can call it with different values of `n` and check if the output is as expected. For example:\n"], ["\"\"\"\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112') == 6\n\"\"\"\nExplanation:\nThe function takes a string as input and returns the number of substrings with the sum of digits equal to their length.\nThe function first checks if the input string is empty or contains only whitespace characters. If so, it returns 0.\nIf the input string contains only digits, it returns 1.\nIf the input string contains both digits and whitespace characters, it returns 2.\nIf the input string contains only whitespace characters, it returns 0.\nIf the input string contains both digits and whitespace characters, it returns 1.\nIf the input string contains only digits, it returns 1.\nThe function then checks if the length of the substring is equal to its length. If so, it returns 1. If not, it returns 0.\nFinally, the function returns the number of substrings with the sum of digits equal to their length."], ["\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\n# Test function"], ["\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n```\n\nIn this example, we define a function called `max_difference` that takes a tuple list as input. The function takes a tuple as input, and returns the maximum difference between any two elements in the tuple.\n\nWe then use the `assert` statement to test the function with different input tuples. The function should return the maximum difference between any two elements in the tuple.\n\nIf the function returns the expected value, the test passes. If the function returns a different value, the test fails."], ["\"\"\"\nWrite a function to sort a list of tuples using the second value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"], ["\"\"\"\nWrite a function to flatten a list and sum all of its elements.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to count the number of positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\nassert pos_count([-1,2,3,4]) == 1"], ["\"\"\"\nWrite a function to find the number of ways to partition a set of Bell numbers.\nassert bell_number(2)==2\n\"\"\"\nbell_number(3)==3\nbell_number(4)==4\nbell_number(5)==5\nbell_number(6)==6\nbell_number(7)==7\nbell_number(8)==8\nbell_number(9)==9\nbell_number(10)==10\nbell_number(11)==11\nbell_number(12)==12\nbell_number(13)==13\nbell_number(14)==14\nbell_number(15)==15\nbell_number(16)==16\nbell_number(17)==17\nbell_number(18)==18\nbell_number(19)==19\nbell_number(20)==20\nbell_number(21)==21\nbell_number(22)==22\nbell_number(23)==23\nbell_number(24)==24\nbell_number(25)==25\nbell_number(26)==26\nbell_number(27)==27\nbell_number(28)==28\nbell_number(29)==29\nbell_number(30)==30\nbell_number(31)==31\nbell_number(32)==32\nbell_number(33)==33\nbell_number(34)==34\nbell_number(35)==35\nbell_number(36)==36\nbell_number(37)==37\nbell_number(38)==38\nbell_number(39)==39\nbell_number(40)==40\nbell_number(41)==41\nbell_number(42)==42\nbell_number(43)==43\nbell_number(44)==44\nbell_number(45)==45\nbell_number(46)==46\nbell_number(47)=="], ["\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\nassert is_Monotonic([5, 4, 3, 2, 1]) == False"], ["\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\nassert is_sublist([1,2,3,4,5],[1,2,3])==True"], ["\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to sort a list of elements.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n\"\"\"\n```\n\nIn this example, we have a function called `is_samepatterns` that takes two arrays as input. The function checks whether the first array follows the same pattern as the second array.\n\nThe function takes two arrays as input, and returns a boolean value indicating whether the two arrays follow the same pattern.\n\nThe function uses a nested loop to iterate through each element of the first array and compare it with each element of the second array. If the two elements match, the function returns `True`. Otherwise, it returns `False`.\n\nThe function also checks for the length of the first and second arrays. If they are not the same length, the function returns `False`.\n\nFinally, the function returns the boolean value.\n\nHere's an example usage of the function:\n"], ["\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\"\"\"\n\n# Example usage\nfind_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)"], ["\"\"\"\nWrite a python function to find whether a number is divisible by 11.\nassert is_Diff (12345) == False\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the volume of a sphere.\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\"\n```\n\nIn this example, we've added a `math.isclose` assertion to ensure that the volume of the sphere is within 1% of the value calculated using the formula. This ensures that the program is robust and can handle errors in the input values."], ["\"\"\"\nWrite a function to find the nth number in the newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\ndef sequence(n):\n    \"\"\" Find the nth number in the newman conway sequence. \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 1\n    elif n == 5:\n        return 2\n    elif n == 6:\n        return 1\n    elif n == 7:\n        return 2\n    elif n == 8:\n        return 1\n    elif n == 9:\n        return 2\n    elif n == 10:\n        return 1\n    else:\n        raise ValueError(\"Invalid number\")\n"], ["\"\"\"\nWrite a function to find the surface area of a sphere.\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\"\"\"\nassert math.isclose(surfacearea_sphere(100), 12566370614359173, rel_tol=0.001)"], ["\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to merge three dictionaries into a single dictionary.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\n# Example usage\nmerge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })\n# Output: {'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}"], ["\"\"\"\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n\"\"\"\n\n# Example usage\nfreq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])\n# Output: {'10': 4, '20': 4, '40': 2, '50': 2, '30': 1}"], ["\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to check if a string is present as a substring in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(1212121) == True\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\n# Test the function with different inputs"], ["\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n```\n\nIn this example, the function `Find_Min_Length` takes a list of lists as input and returns the length of the smallest list in the list of lists. The function uses a recursive approach to find the length of the smallest list. The function first checks if the list is empty, in which case it returns 0. If the list is not empty, it recursively calls itself with the first element of the list as the argument. The function then checks if the first element of the list is smaller than the remaining elements in the list. If it is, it returns the length of the first element. If it is not, it recursively calls itself with the remaining elements of the list. The function then returns the length of the smallest list found."], ["\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4\n\"\"\"\n\n# Define the function\ndef divisor(n):\n    # Base case: if n is 1, there are no divisors\n    if n == 1:\n        return 0\n    # Recursive case: find all divisors up to n\n    divisors = [1]\n    for I in range(2, int(n**0.5) + 1):\n        if n % I == 0:\n            divisors.append(i)\n    return len(divisors)\n\n# Test the function"], ["\"\"\"\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\n# Example usage\nfrequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])"], ["\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\"\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)"], ["\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n\n# Example usage\ndecimal_to_binary(8)\n# Output: '1000'\n\n# Example usage with negative numbers\ndecimal_to_binary(-8)\n# Output: '1111'"], ["\"\"\"\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the kth element in the given array using 1-based indexing.\nassert kth_element([12,3,5,7,19], 2) == 3\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to convert a snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\nassert snake_to_camel('PythonProgram')=='python_program'"], ["\"\"\"\nWrite a function to find the Eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\ndef eulerian_num(n, m):\n    if n == 0:\n        return 0\n    if m == 0:\n        return 1\n    if n < m:\n        return eulerian_num(n, m)\n    return eulerian_num(n-1, m-1) + eulerian_num(n-1, m)\n"], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\n# Example usage\nsort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))\n# Output: ['green', 'orange', 'black', 'white', 'black', 'orange']"], ["\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n```\n\nIn this example, we define a function called `count` that takes a list as input and returns the number of true booleans in the list. The function uses the `assert` statement to ensure that the list contains at least one true boolean. If the list does not contain any true booleans, the function returns 0. If the list contains exactly one true boolean, the function returns 1. If the list contains more than one true boolean, the function returns the number of true booleans in the list."], ["\"\"\"\nWrite a function to append the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\nassert add_lists([1, 2, 3], (4, 5)) == (4, 5, 1, 2, 3)"], ["\"\"\"\nWrite a function to merge three lists into a single sorted list.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\n# Test the function with the given input lists"], ["\"\"\"\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the common elements in given nested lists.\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\nassert tuple_to_int((1,2,3,4))==1234"], ["\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3]) == 3\n\"\"\"\n\"\"\"\nExample usage:\n>>> import random\n>>> random.shuffle([1,1,2,2,3])\n>>> search(random.shuffle([1,1,2,2,3]))\n3"], ["\"\"\"\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (3, 10), (5, 12), (6, 13), (7, 14), (8, 15), (9, 16), (10, 17), (11, 18), (12, 19), (13, 20), (14, 21), (15, 22), (16, 23), (17, 24), (18, 25), (19, 26), (20, 27), (21, 28), (22, 29), (23, 30), (24, 31), (25, 32), (26, 33), (27, 34), (28, 35), (29, 36), (30, 37), (31, 38), (32, 39), (33, 40), (34, 41), (35, 42), (36, 43), (37, 44), (38, 45), (39, 46), (40, 47), (41, 48), (42, 49), (43, 50), (44, 51), (45, 52), (46, 53), (47, 54), (48, 55), (49, 56), (50, 57), (51, 58), (52, 59), (53, 60), (54, 61), (55, 62), (56, 63"], ["\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\n# Test the function with different input values"], ["\"\"\"\nWrite a function to get the angle of a complex number.\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n\"\"\"\n```\n\nIn this example, we first define a function `angle_complex` that takes two complex numbers as arguments and returns their angle in radians. We then use the `math.isclose` function to check if the angle is within 1% of the correct value.\n\nThe `math.isclose` function takes two arguments, the first being the expected value, and the second being the actual value. It returns `True` if the difference between the two values is less than or equal to the specified relative tolerance.\n\nIn this case, we use a relative tolerance of 0.001 to ensure that the angle is within 1% of the correct value. If the angle is within this tolerance, the function returns `True`. Otherwise, it returns `False`."], ["\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\") == 6\n\"\"\"\n\n# Test cases"], ["\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n```\n\nIn this example, the `assert` statement checks that the sum of the common divisors of 10 and 15 is 6. The `sum` function is used to calculate the sum of the common divisors."], ["\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\n# Example usage\nlong_words(3,\"python is a programming language\")\n# Output: ['python','programming','language']"], ["\"\"\"\nWrite a function to calculate whether the matrix is a magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\nassert magic_square_test([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==True"], ["\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n\"\"\"\nassert max_occurrences([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])==16"], ["\"\"\"\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to convert a tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\nassert tup_string(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'))==(\"abcedgh\")"], ["\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\nassert sum_negativenum([-2, 4, -6, -9, 11, -12, 14, -5, 17])==-32"], ["\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n\"\"\"\nExplanation:\n- The function takes an array of integers as input.\n- It initializes a variable zero_count to an empty list.\n- It iterates over each element of the input array and checks if it is zero.\n- If it is zero, it adds 1 to the zero_count variable.\n- If it is not zero, it adds 0 to the zero_count variable.\n- The function returns the ratio of zeroes to non-zeroes in the input array.\n- The assert statement checks that the ratio is close to 0.181818, which is the expected value."], ["\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the circumference of a circle.\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\"\"\"\nassert math.isclose(circle_circumference(100), 628.30000000000005, rel_tol=0.001)"], ["\"\"\"\nWrite a function to flatten the list of lists into a single set of numbers.\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\"\"\"\n\n# Example usage\nextract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n# Output: set([3, 4, 5, 7, 1])"], ["\"\"\"\nWrite a function to sort a list of elements.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to count number items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\nExplanation:\nThe function takes three lists as input and returns the number of items that are identical in the same position in all three lists.\n\nThe function first checks if the lists are the same length. If they are not, it returns 0.\n\nNext, it loops through each element in the first list and compares it to each element in the second list. If they are the same, it increments the count.\n\nIf the first list and second list have the same length, it loops through each element in the second list and compares it to each element in the third list. If they are the same, it increments the count.\n\nFinally, it loops through each element in the third list and compares it to each element in the first list. If they are the same, it increments the count.\n\nIf all three lists have the same length, the function returns 1.\n\nIf any of the lists are shorter than the other two, the function returns 0.\n\nIf any of the lists are longer than the other two, the function returns the length of the longer list."], ["\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3)) == 4\n\"\"\"\n\n# Example usage:"], ["\"\"\"\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nassert find_solution(2, 3, 7) == (2, 1)\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\"\"\"\n\ndef remove_elements(lst1, lst2):\n    return [x for x in lst1 if x not in lst2]\n"], ["\"\"\"\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nassert sum_series(6) == 12\n\"\"\"\n\n# Define the function\ndef sum_series(n):\n    # Initialize the sum to 0\n    sum = 0\n    # Calculate the sum from 0 to n-2*i\n    for I in range(0, n // 2):\n        sum += (n - 2 * I)\n    # Calculate the sum from n-2*i to n-x\n    for I in range(n // 2, n - 1):\n        sum += (n - 2 * I)\n    # Calculate the sum from n-x to 0\n    for I in range(n - 1, -1, -1):\n        sum += (n - 2 * I)\n    return sum\n\n# Test the function"], ["\"\"\"\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n\"\"\"\nassert find_even_pair([1, 2, 3, 4, 5]) == 0"], ["\"\"\"\nWrite a python function to find the smallest power of 2 greater than or equal to n.\nassert next_power_of_2(0) == 1\n\"\"\"\nassert next_power_of_2(1) == 2"], ["\"\"\"\nWrite a function to count the number of occurrences of a number in a given list.\nassert frequency([1,2,3], 4) == 0\n\"\"\"\nassert frequency([1,2,3], 5) == 1"], ["\"\"\"\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\"\"\"\n```\n\nExplanation:\n\n- The `assert` statement is used to test the function's output against a given expected value.\n- The `sum_range_list` function takes three arguments: a list of numbers, the start and end indices of the range, and a starting index for the sum.\n- The function returns the sum of the numbers in the specified range.\n- The `assert` statement checks that the sum of the numbers in the specified range is equal to the expected value.\n\nNote: The `assert` statement is used to test the function's output against a given expected value. It is not necessary to include it in the function's implementation."], ["\"\"\"\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\nassert perimeter_pentagon(5) == 25\n\"\"\"\ndef perimeter_pentagon(side):\n    return 5 * side\n"], ["\"\"\"\nWrite a function to count the number of occurence of the string 'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\n# Example 2: Checking if a string is a palindrome"], ["\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\n# Example usage\ncount_Set_Bits(2)\n# Output: 1\n\n# Explanation:\n# The function takes a single argument, which is the number to count the set bits.\n# The function returns the number of set bits in the number.\n# The function uses the bitwise OR operator (|) to count the set bits.\n# The function returns 1 if the number has a single set bit, and 0 otherwise."], ["\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\"\"\"\n```\n\nIn this example, we have a function `larg_nnum` that takes in a list `lst` and an integer `n`, and returns a new list containing the `n` largest items from the original list. The function uses the `set` module to check if the list contains only unique elements.\n\nThe `assert` statement checks that the output list contains only the expected elements."], ["\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\"\n\n# Test function with input values\nlateralsuface_cylinder(10,5)\n\n# Output: True"], ["\"\"\"\nWrite a function to find the volume of a cube given its side length.\nassert volume_cube(3)==27\n\"\"\"\n\n# Test the function with different side lengths\nfor side_length in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:\n    volume_cube(side_length)"], ["\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\n# Example usage\ncheck_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)])"], ["\"\"\"\nWrite a python function to count the number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\ndef get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return get_total_number_of_sequences(m, n-1) + get_total_number_of_sequences(m-n+1, n)\n"], ["\"\"\"\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\ndef replace_list(lst1, lst2):\n    lst1.append(lst2)\n    lst1.pop()\n    return lst1\n"], ["\"\"\"\nWrite a function to count the total number of characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\n# function definition\ndef next_Perfect_Square(n):\n    \"\"\"\n    Finds the next perfect square greater than a given number.\n    :param n: integer\n    :return: integer\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Negative number not allowed\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return n * (n + 1) // 2\n    else:\n        return n * (n - 1) // 2\n\n# test function"], ["\"\"\"\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\"\"\"\ndef max_sum(arr):\n    \"\"\"\n    Find the maximum sum of a bitonic subsequence for an array.\n    \"\"\"\n    # Initialize the maximum sum to 0\n    max_sum = 0\n    \n    # Initialize the current maximum sum to the maximum sum found so far\n    current_max_sum = 0\n    \n    # Iterate over the array\n    for I in range(len(arr)):\n        # If the current element is greater than the previous element,\n        # update the maximum sum\n        if arr[i] > arr[i-1]:\n            current_max_sum = max(current_max_sum, arr[i] - arr[i-1])\n            \n        # If the current element is less than the previous element,\n        # update the maximum sum\n        elif arr[i] < arr[i-1]:\n            current_max_sum = max(current_max_sum, arr[i] + arr[i-1])\n            \n    # Return the maximum sum\n    return current_max_sum\n\n# Test the function with an example array"], ["\"\"\"\nWrite a function to find the length of the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n```\n\nIn this function, we first define a tuple `t` and an element `x`. We then define a function `count_X` that takes in a tuple `t` and an element `x` and returns the number of occurrences of `x` in `t`.\n\nWe then call the function with the tuple `(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2)` and the element `4`. We assert that the function returns 0, since there are no occurrences of `4` in the tuple.\n\nWe then call the function with the tuple `(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2)` and the element `4`. We assert that the function returns 1, since there is one occurrence of `4` in the tuple.\n\nWe then call the function with the tuple `(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2)` and the element `4`. We assert that the function returns 2, since there are two occurrences of `4` in the tuple.\n\nWe then call the function with the tuple `(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2)` and the element `4`. We assert that the function returns 3, since there are three occurrences of `4` in the tuple.\n\nWe then call the function with the tuple `(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2)` and the element `4"], ["\"\"\"\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\"\"\"\n\n# Test the function with some examples\ninsert_element(['Red', 'Green', 'Black'], 'c')"], ["\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\n# Example usage\nconvert(1)\n# Output: (1.0, 0.0)\n\n# Testing the function"], ["\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n```\n\nIn this example, we have a function called `count_integer` that takes a list as input and returns the number of integer elements in the list. The function uses a `for` loop to iterate over each element in the list and check if it is an integer. If it is, the function increments the counter by 1.\n\nThe `assert` statement is used to test the function's output. The function returns the number of integer elements in the list, and the `assert` statement ensures that the output matches the expected value.\n\nIn this example, the function returns 2, which matches the expected output."], ["\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\n# Define a function to count prime numbers\ndef count_Primes_nums(n):\n    # Initialize a list to store prime numbers\n    primes = []\n    # Loop through all numbers from 2 to n\n    for I in range(2, n+1):\n        # Check if number is prime\n        if n % I == 0:\n            # If it is, add it to the list\n            primes.append(i)\n    # Return the number of prime numbers less than n\n    return len(primes)\n\n# Test the function"], ["\"\"\"\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\n# Example usage\ndivision_elements((10, 4, 6, 9), (5, 2, 3, 3))"], ["\"\"\"\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\n# Example usage\n>>> split_two_parts([1,1,2,3,4,4,5,1],3)\n(1, 1, 2)"], ["\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\"\"\"\n\n# Example usage\nlist_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)"], ["\"\"\"\nWrite a function to find the lateral surface area of a cube given its side length.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\n# Test the function with different side lengths\nfor side in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:\n    assert lateralsurface_cube(side)==side**3"], ["\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\n# Define the square_Sum function\ndef square_Sum(n):\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through each odd natural number from 1 to n\n    for I in range(1, n+1):\n        # Calculate the square of the current odd number\n        square = i**2\n        # Add the square to the sum\n        sum += square\n    # Return the sum\n    return sum\n\n# Test the square_Sum function"], ["\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\n# Test function"], ["\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the sum of even numbers at even positions of a list.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\n# Define the function\ndef even_Power_Sum(n):\n    # Initialize sum to 0\n    sum = 0\n    # Loop through the first n even numbers\n    for I in range(2, n+1):\n        # Calculate the sum of the first I even numbers raised to the fifth power\n        sum += (i**5)\n    return sum\n\n# Test the function"], ["\"\"\"\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n```\n\nExplanation:\n\n- The `rear_extract` function takes in a list of tuples as input.\n- The function first creates a list of tuples with the same length as the input list.\n- For each tuple in the input list, the function extracts the last element (i.e., the value at index 2) and returns it.\n- The function then returns the resulting list of tuples.\n- The `assert` statement ensures that the returned list contains the same elements as the input list.\n"], ["\"\"\"\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\n# Example usage\nsubtract_elements((10, 4, 5), (2, 5, 18))\n# Output: (8, -1, -13)"], ["\"\"\"\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\nassert even_binomial_Coeff_Sum(10) == 256"], ["\"\"\"\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\"\"\"\n\ndef volume_cylinder(radius, height):\n    \"\"\" Calculate the volume of a cylinder \"\"\"\n    return 3.14159 * radius * height * height\n"], ["\"\"\"\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\n# Example usage\ndict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)"], ["\"\"\"\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3"], ["\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\n# Test function"], ["\"\"\"\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\n# Example usage\nsequential_search([1,2,3,4,5,6,7,8,9], 5)"], ["\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\nassert all_unique([1,2,3,4]) == False"], ["\"\"\"\nWrite a function to subtract two lists element-wise.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\n# Define a function to validate if a number is valid\ndef validate(num):\n    # Check if the number is less than or equal to 10\n    if num < 10:\n        # Check if the number is divisible by 10\n        if num % 10 == 0:\n            # Check if the number is divisible by 100\n            if num % 100 == 0:\n                # Check if the number is divisible by 1000\n                if num % 1000 == 0:\n                    # Check if the number is divisible by 10000\n                    if num % 10000 == 0:\n                        # Check if the number is divisible by 100000\n                        if num % 100000 == 0:\n                            # Check if the number is divisible by 1000000\n                            if num % 1000000 == 0:\n                                # Check if the number is divisible by 10000000\n                                if num % 10000000 == 0:\n                                    # Check if the number is divisible by 100000000\n                                    if num % 100000000 == 0:\n                                        # Check if the number is divisible by 1000000000\n                                        if num % 1000000000 == 0:\n                                            # Check if the number is divisible by 10000000000\n                                            if num % 10000000000 == 0:\n                                                # Check if the number is divisible by 100000000000\n                                                if num % 100000000000 == 0:\n                "], ["\"\"\"\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\n# Example usage\ncheck_element([1, 2, 3, 4], 5) # True\ncheck_element([1, 2, 3, 4], 2) # False\ncheck_element([1, 2, 3, 4], 'blue') # False\ncheck_element([1, 2, 3, 4], 'red') # True\ncheck_element([1, 2, 3, 4], 'green') # False\ncheck_element([1, 2, 3, 4], 'black') # False\ncheck_element([1, 2, 3, 4], 'white') # True\ncheck_element([1, 2, 3, 4], 'apple') # False\ncheck_element([1, 2, 3, 4], 'banana') # True\ncheck_element([1, 2, 3, 4], 'orange') # False\ncheck_element([1, 2, 3, 4], 'red') # True\ncheck_element([1, 2, 3, 4], 'green') # False\ncheck_element([1, 2, 3, 4], 'black') # False\ncheck_element([1, 2, 3, 4], 'white') # True\ncheck_element([1, 2, 3, 4], 'apple') # False\ncheck_element([1, 2, 3, 4], 'banana') # True\ncheck_element([1, 2, 3, 4], 'orange') # False\ncheck_element([1, 2, 3, 4], 'red') # True\ncheck_element([1, 2, 3, 4], 'green') # False\ncheck_element([1, 2, 3, 4], 'black') # False\ncheck_element([1, 2, 3, 4], 'white') # True\ncheck_element([1,"], ["\"\"\"\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nassert text_match_two_three(\"ac\")==(False)\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\n# Function to find the largest sum of a contiguous array in the modified array\ndef max_sub_array_sum_repeated(arr, k, start):\n    # Base case: if k is 0, the array is empty and there is no maximum sum\n    if k == 0:\n        return 0\n    # Base case: if start is greater than the length of the array, the array is empty and there is no maximum sum\n    if start > len(arr):\n        return 0\n    # Initialize the maximum sum to 0\n    max_sum = 0\n    # Initialize the current maximum sum to the maximum sum of the previous k-1 elements\n    current_max_sum = arr[start - k]\n    # Initialize the current maximum sum of the current element to 0\n    current_max_sum_of_current_element = 0\n    # Iterate through the remaining elements of the array\n    for I in range(start, len(arr)):\n        # Calculate the current maximum sum of the current element\n        current_max_sum_of_current_element = max(current_max_sum_of_current_element, arr[i])\n        # Update the maximum sum of the current element and the current maximum sum of the previous k-1 elements\n        current_max_sum = max(current_max_sum, current_max_sum_of_current_element)\n    # Return the maximum sum of the current element\n    return current_max_sum\n\n# Example usage"], ["\"\"\"\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\n# Test function\nsquare_Sum = square_Sum_function()"], ["\"\"\"\nWrite a function to find the list of maximum length in a list of lists.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\ndef find_max_length(lst):\n    max_length = 0\n    for sub_lst in lst:\n        length = len(sub_lst)\n        if length > max_length:\n            max_length = length\n    return max_length, lst\n"], ["\"\"\"\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\nassert find(10,3) == 3\n\"\"\"\n```\n\nIn this example, we define a function `find` that takes two arguments `a` and `b`, and returns the quotient of `a` and `b` rounded down to the nearest integer. We then test the function with some sample inputs to ensure that it works correctly."], ["\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\nExplanation:\nThe function `max_val` takes a heterogeneous list as input and returns the maximum value in the list.\nThe function first checks if the list is empty, if it is, it returns the first element of the list.\nIf the list is not empty, the function iterates through the list and checks if the current element is greater than the current maximum value.\nIf the current element is greater than the current maximum value, the function updates the maximum value and the current element.\nIf the current element is not greater than the current maximum value, the function does not update the maximum value and the current element.\nFinally, the function returns the maximum value in the list."], ["\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5]) == 5\n\"\"\"\nExplanation:\nThe function takes an array as input and returns the count of inversions.\n\nThe inversion in an array is defined as the position of the minimum element in the array.\n\nThe function first checks if the array is empty. If it is, it returns 0.\n\nIf the array is not empty, it iterates over the array and checks if the current element is greater than the previous minimum element. If it is, it marks the current element as the minimum element and moves to the next element.\n\nIf the current element is less than the previous minimum element, it marks the current element as the minimum element and moves to the next element.\n\nIf the current element is equal to the previous minimum element, it does not mark it as the minimum element and moves to the next element.\n\nIf the current element is greater than the previous minimum element, it marks the current element as the minimum element and moves to the next element.\n\nFinally, the function returns the count of inversions.\n\nThe function is tested with the example array provided in the code."], ["\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\n# Example usage\nflatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])"], ["\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\n# Define the function\ndef max_aggregate(tuples):\n    max_value = 0\n    max_key = None\n    for key, value in tuples:\n        if value > max_value:\n            max_value = value\n            max_key = key\n    return max_key, max_value\n\n# Test the function"], ["\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\"\"\"\ndef count_binary_seq(n):\n    \"\"\"\n    Find the count of all binary sequences of length n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for I in range(n):\n        for j in range(n):\n            if (i + j) % 2 == 0:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n"], ["\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\ndef max_sum_increasing_subseq(arr, start, end, k):\n    # Base case: if k is 0, return the maximum sum\n    if k == 0:\n        return max(arr[start:end])\n    \n    # Base case: if k is 1, return the maximum sum\n    if k == 1:\n        return arr[start]\n    \n    # Base case: if k is greater than 1, return the maximum sum of the subsequence\n    mid = (start + end) // 2\n    left_sum = max_sum_increasing_subseq(arr, start, mid, k-1)\n    right_sum = max_sum_increasing_subseq(arr, mid+1, end, k-1)\n    return max(left_sum + arr[mid], right_sum + arr[mid])\n\n# Testing"], ["\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\ndef find_largest_products(lst1, lst2, n):\n    \"\"\"\n    Find the n largest products from two given lists.\n    \"\"\"\n    if len(lst1) < len(lst2):\n        lst1, lst2 = lst2, lst1\n    largest_product = [0] * n\n    for I in range(n):\n        largest_product[i] = max(lst1[i], lst2[i])\n    return largest_product\n"], ["\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n```\n\nIn this example, we have a function called `maximum` that takes two arguments, `x` and `y`, and returns the maximum value between them. We have also defined a test case to ensure that the function correctly returns the expected value.\n\nIn the `main` function, we call the `maximum` function with two arguments, `5` and `10`, and print the result.\n"], ["\"\"\"\nWrite a function to convert a given string to a tuple of characters.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n```\n\nIn this example, we first define a function `string_to_tuple` that takes a string as input and returns a tuple of characters. The function uses a `for` loop to iterate over each character in the string and converts it to a character using the `chr` function. The tuple is then returned as the output.\n\nTo test the function, we create a string and call the `string_to_tuple` function with it. The function returns the expected tuple of characters."], ["\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n```\n\nIn this example, the function `set_left_most_unset_bit` takes an integer `n` as input and returns the left most unset bit in the binary representation of `n`. The function checks if the input number is 0 or 1 and sets the left most unset bit if it is not already set. The function returns the left most unset bit in the binary representation of `n`."], ["\"\"\"\nWrite a function to find the volume of a cone.\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\"\"\"\nExplanation:\nThe function takes two arguments: the height of the cone (float) and the radius of the base (float).\nWe use the formula for the volume of a cone:\nV = \u03c0r^2 * h\nwhere V is the volume, r is the radius, and h is the height.\nWe use the math module to calculate the value of V and compare it to the expected value of 314.15926535897927 using the rel_tol argument.\nIf the difference is less than the specified tolerance, we know that the formula is correct."], ["\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\n# Example usage\nhighest_Power_of_2(10)\n# Output: 8"], ["\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n\n# Define the function\ndef find_lucas(n):\n    \"\"\"\n    Find the n'th lucas number.\n    \"\"\"\n    # Base case: n = 1\n    if n == 1:\n        return 1\n    # Base case: n = 2\n    elif n == 2:\n        return 1\n    # Recursive case: n > 2\n    else:\n        # Calculate the sum of the first n terms\n        sum_terms = 0\n        for I in range(1, n+1):\n            # Calculate the sum of the terms from I to n\n            sum_terms += (i * (i+1)) // 2\n        # Calculate the nth term\n        nth_term = sum_terms + 1\n        # Return the nth lucas number\n        return nth_term"], ["\"\"\"\nWrite a function to apply a given format string to all of the elements in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']"], ["\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\n# function to find the maximum sum possible by using the given equation\ndef get_max_sum(n):\n    # calculate the sum of the first n/2 terms\n    sum_of_first_n_half = 0\n    for I in range(1, n // 2 + 1):\n        sum_of_first_n_half += f(i)\n    # calculate the sum of the first n/3 terms\n    sum_of_first_n_third = 0\n    for I in range(1, n // 3 + 1):\n        sum_of_first_n_third += f(i)\n    # calculate the sum of the first n/4 terms\n    sum_of_first_n_fourth = 0\n    for I in range(1, n // 4 + 1):\n        sum_of_first_n_fourth += f(i)\n    # calculate the sum of the first n/5 terms\n    sum_of_first_n_fifth = 0\n    for I in range(1, n // 5 + 1):\n        sum_of_first_n_fifth += f(i)\n    # calculate the maximum sum\n    max_sum = max(sum_of_first_n_half, sum_of_first_n_third, sum_of_first_n_fourth, sum_of_first_n_fifth)\n    return max_sum\n\n# test function"], ["\"\"\"\nWrite a function to check if given tuple contains no duplicates.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\nassert check_distinct((1, 2, 3, 4, 5, 6)) == True"], ["\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n```\n\nExplanation:\n\nThe `check_tuplex` function takes a tuple as input and a string as an argument. It checks whether the specified string is present in the tuple using the `in` operator. If the string is present, the function returns `True`. If the string is not present, the function returns `False`.\n\nThe `assert` statement is used to test the function's output. The `check_tuplex` function returns `True` if the specified string is present in the tuple, and `False` otherwise. The `assert` statement checks that the function returns `True` or `False` as expected."], ["\"\"\"\nWrite a python function to find whether the parity of a given number is odd.\nassert find_Parity(12) == False\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\nassert min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)])==120"], ["\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n```\n\nIn this example, we define a function `min_val` that takes a heterogeneous list as input and returns the minimum value in the list. We first check if the list is empty, and if it is, we return the first element. Otherwise, we iterate over the list and check if the current element is a string. If it is, we compare it with the current minimum value and update the minimum value if necessary. Finally, we return the minimum value.\n\nTo use this function, simply call it with a heterogeneous list as input:\n"], ["\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\nextract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)\n# Output: ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']"], ["\"\"\"\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == True"], ["\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\nExplanation:\nThe function takes an array of integers as input and returns a tuple containing the maximum product and the index of the element with the highest product.\nThe function first checks if the input array is empty. If it is, it returns (None, None).\nNext, it iterates over the array and checks if the current element has a higher product than the current maximum product. If it does, it updates the maximum product and the current maximum index.\nFinally, it returns the maximum product and the current maximum index."], ["\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\n# Define the function\ndef round_and_sum(numbers):\n    # Initialize the total sum to 0\n    total_sum = 0\n    # Loop through the list of numbers\n    for num in numbers:\n        # Round the number to two decimal places\n        rounded_num = round(num, 2)\n        # Add the rounded number to the total sum\n        total_sum += rounded_num\n    # Return the total sum\n    return total_sum\n\n# Call the function with a list of numbers"], ["\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\n# function to find the cube sum of first n even natural numbers\ndef cube_Sum(n):\n    sum = 0\n    for I in range(1, n+1):\n        sum += i**3\n    return sum\n\n# test function"], ["\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\"\"\"\nExplanation:\n\nThe function `find_Average_Of_Cube` takes an integer `n` as input. It then initializes a variable `sum` to 0.\n\nFor each number `i` from 1 to `n`, the function calculates the sum of the cube of `i` using the formula `sum = sum * i`.\n\nThe function then calculates the average of the sum using the formula `average = sum / n`.\n\nFinally, the function returns the average.\n\nThe function is called with `n = 5` and the expected output is `average = 4.5`."], ["\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],2)==1"], ["\"\"\"\nWrite a function to filter odd numbers.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\ndef shell_sort(arr):\n    n = len(arr)\n    for I in range(n):\n        for j in range(n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n"], ["\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)"], ["\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\n# Test the function with some examples"], ["\"\"\"\nWrite a function to find the median length of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n\"\"\"\nassert check_greater([1, 2, 3, 4, 5], 6) == True"], ["\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to return the negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\"\"\"\n\n# Test the function with some examples"], ["\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\n# Example 2: Checking if a string is a palindrome\ndef is_palindrome(s):\n    \"\"\"\n    Check if a string is a palindrome.\n    \"\"\"\n    s = s.lower()\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to join a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\n# Example usage\nmultiple_to_single([11, 33, 50])\n# Output: 113350\n\n# Explanation:\n# The function takes a list of integers as input and returns the sum of all the integers.\n# The function then iterates through the list and adds up all the integers.\n# Finally, the function returns the sum of all the integers.\n# The example usage demonstrates how the function can be used to join multiple integers into a single integer."], ["\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the surface area of a cube of a given size.\nassert surfacearea_cube(5)==150\n\"\"\"\n\n# Test the function with different cube sizes\nfor size in [1, 2, 3, 4, 5]:\n    surfacearea_cube(size)"], ["\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\n# Test function with sample inputs and expected outputs\nindex_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))"], ["\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\nExplanation:\nThe function `count_Occurrence` takes two arguments: a list of elements and a list of desired elements. It returns the number of occurrences of each element in the list.\n\nThe function first creates a tuple containing the desired elements. It then iterates over the list and checks if the current element is in the tuple. If it is, it increments the count for that element.\n\nFinally, the function returns the count for each element in the list.\n\nExample usage:\n>>> count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'])\n3"], ["\"\"\"\nWrite a function to find cubes of individual elements in a list.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\n# Testing the function\ncube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"], ["\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\n# Test the function with some examples\nfor I in range(1, 10):\n    assert cal_sum(i) == cal_sum(i - 1)\n\n# Test the function with a large number"], ["\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\n# Example usage\nextract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 5)"], ["\"\"\"\nWrite a function to remove all whitespaces from the given string.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\n# Example usage\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello World!  ') # Output: 'Hello World!'\nremove_whitespaces('  Hello"], ["\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\n# function to find sum of even factors of a number\ndef sumofFactors(n):\n    # initialize sum to 0\n    sum = 0\n    # loop through the numbers from 2 to n\n    for I in range(2, n+1):\n        # check if the number is even\n        if n % I == 0:\n            # if yes, add the number to the sum\n            sum += i\n    return sum\n\n# test function"], ["\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==True\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to reverse each string in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n```\n\nExplanation:\n\n1. We first define a function `reverse_string_list` that takes a list of strings as input.\n\n2. We then create a list of strings using the `list()` function.\n\n3. We iterate over each string in the list using a `for` loop.\n\n4. For each string, we call the `reverse()` function on it.\n\n5. We then concatenate the reversed strings back into a single string using the `join()` function.\n\n6. Finally, we return the concatenated string.\n\n7. We test the function with a sample list of strings using the `assert` statement.\n\n8. The function returns the expected output."], ["\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n```\n\nExplanation:\n\nIn the first example, we have a list of integers `[1, 1, 2, 3]`. We call the `Find_Min` function with this list as input. The function returns the sublist `[1]` because it has the minimum length.\n\nIn the second example, we have a list of integers `[1, 2, 3]`. We call the `Find_Min` function with this list as input. The function returns the sublist `[1, 2]` because it has the minimum length.\n\nIn the third example, we have a list of integers `[1, 2, 3, 4]`. We call the `Find_Min` function with this list as input. The function returns the sublist `[1, 2]` because it has the minimum length."], ["\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to remove uppercase substrings from a given string.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\n# Testing the function with sample inputs"], ["\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\nassert max_subarray_product([-1, 0, 1, -3, 4]) == 0"], ["\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\n# Example usage\nadd_pairwise((1, 5, 7, 8, 10))"], ["\"\"\"\nWrite a python function to find the product of the array multiplication modulo n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n```\n\nIn this example, the function `check_Consecutive` takes a list as input and returns `True` if the list contains consecutive numbers, and `False` otherwise. The function uses the built-in `list` function to check if the list contains consecutive numbers, and then returns `True` if it does, and `False` otherwise."], ["\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\n# Exercise 2: Reverse a string\n\"\" \"\"\"\nWrite a function to reverse a string."], ["\"\"\"\nWrite a function to sort a dictionary by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\n# Example usage\nsort_counter({'Math':81, 'Physics':83, 'Chemistry':87})\n# Output: [('Chemistry', 87), ('Physics', 83), ('Math', 81)]"], ["\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function which takes a list of integers and only returns the odd ones.\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nassert difference(3) == 30\n\"\"\"\n\n# function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers\ndef difference(n):\n    sum_of_cubes = 0\n    sum_of_first_n_natural_numbers = 0\n    for I in range(1, n+1):\n        sum_of_cubes += (i**3)\n        sum_of_first_n_natural_numbers += i\n    return sum_of_cubes - sum_of_first_n_natural_numbers\n\n# test function"], ["\"\"\"\nWrite a python function to count the number of pairs whose xor value is odd.\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n\"\"\"\nExplanation:\nThe function takes an array of integers as input and returns the number of pairs whose xor value is odd.\n\nThe function first checks if the input array is empty. If it is, it returns 0.\n\nIf the input array is not empty, the function iterates through the array and checks if the xor value of any two elements is odd. If it is, the function returns 1.\n\nFinally, the function returns the count of pairs whose xor value is odd.\n\nExample usage:\n>>> find_Odd_Pair([5,4,7,2,1],5)\n6"], ["\"\"\"\nWrite a function to toggle the case of all characters in a string.\nassert toggle_string(\"Python\")==(\"pYTHON\")\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the sum of the per-digit difference between two integers.\nassert digit_distance_nums(1,2) == 1\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the sum of the largest contiguous sublist in the given list.\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n\"\"\"\n```\n\nExplanation:\n\nThe `max_sub_array_sum` function takes a list `lst` as input and returns the sum of the largest contiguous sublist in the list. The function first checks if the list is empty or contains only one element. If the list is empty, the function returns 0. If the list contains only one element, the function returns the element itself. If the list contains two or more elements, the function recursively calls itself with the remaining elements and the previous sum. The function then checks if the current sum is greater than the previous sum. If the current sum is greater than the previous sum, the function returns the current sum. If the current sum is not greater than the previous sum, the function returns the previous sum. The function then returns the sum of the largest contiguous sublist."], ["\"\"\"\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"\n```\n\nIn this example, we have a function called `Find_Max_Length` that takes an array of integers as input. The function takes the first element of the array as input and returns the length of the longest sublist.\n\nThe function first checks if the input array is empty. If it is, it returns 0.\n\nNext, the function loops through the array and checks if the current element is greater than the current maximum length. If it is, the current maximum length is updated to the current element's length.\n\nFinally, the function returns the length of the longest sublist.\n\nTo test the function, we call it with an array of integers and assert that the output matches the expected value."], ["\"\"\"\nWrite a function to extract values between quotation marks from a string.\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\"\"\"\n\n# Example usage\nextract_values('\"Python\", \"PHP\", \"Java\"')\n# Output: ['Python', 'PHP', 'Java']"], ["\"\"\"\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nassert count_Pairs([1,2,1],3) == 2\n\"\"\"\n```\n\nExplanation:\n\nThe `count_Pairs` function takes a list of integers as input and returns the number of possible unordered pairs where both elements are unequal.\n\nThe function first checks if the input list is empty. If it is, it returns 0.\n\nIf the input list is not empty, the function iterates over the elements of the list and checks if the first element is equal to the second element. If they are equal, the function increments the count by 1.\n\nIf the first element is not equal to the second element, the function checks if the first element is greater than the second element. If it is, the function increments the count by 2.\n\nFinally, the function returns the count of possible unordered pairs.\n\nThe `assert` statement is used to verify that the function works as expected. The function is called with a list of integers and the expected output is returned."], ["\"\"\"\nWrite a python function to split a string into characters.\nassert split('python') == ['p','y','t','h','o','n']\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to get the sum of the digits of a non-negative integer.\nassert sum_digits(345)==12\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to check whether a specified list is sorted or not.\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\"\"\"\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True"], ["\"\"\"\nWrite a function to create a list of N empty dictionaries.\nassert empty_list(5)==[{},{},{},{},{}]\n\"\"\"\n\n# Example usage\nempty_list(5)\n# Output: [{},{},{},{},{}]\n\n# Explanation:\n# The function takes no arguments and returns an empty list of N empty dictionaries.\n# The empty_list() function is called with the value 5 as the argument.\n# The returned list is assigned to the empty_list variable.\n# The assert statement checks that the returned list is equal to the expected output."], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\n# Example usage\nsort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])\n# Output: ['green', 'orange', 'black', 'white', 'black', 'orange']"], ["\"\"\"\nWrite a python function to remove duplicate numbers from a given number of lists.\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a python function to calculate the product of the unique numbers in a given list.\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\"\"\"\n```\n\nIn this example, the `unique_product` function takes a list as input and returns the product of all the unique numbers in the list. The function uses a list comprehension to iterate over the list and extract the unique numbers. It then uses the `reduce` function to reduce the list to a single number. Finally, the function returns the result."], ["\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"\n```\n\nExplanation:\n\nThe `is_Sub_Array` function takes two lists as input and returns a boolean value indicating whether the first list is a sublist of the second list.\n\nThe function first checks if the first list is empty or not. If it is, it returns `False`.\n\nNext, it checks if the second list is empty or not. If it is, it returns `True`.\n\nIf both lists are not empty, it iterates through each element of the first list and checks if it is present in the second list. If it is, it returns `True`. Otherwise, it returns `False`.\n\nFinally, the function returns the final result."], ["\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\nassert last_Digit_Factorial(4) == 4\n\"\"\"\n\n# function to find the last digit in factorial of a given number\ndef last_Digit_Factorial(n):\n    # check if n is less than 1\n    if n < 1:\n        return None\n    # calculate the factorial of n\n    factorial = 1\n    for I in range(1, n+1):\n        factorial *= i\n    # find the last digit\n    last_digit = int(str(factorial)[-1])\n    return last_digit\n\n# test function"], ["\"\"\"\nWrite a function to interleave 3 lists of the same length into a single flat list.\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\"\"\"\nExplanation:\nThe function takes two tuples as input and returns a tuple containing the dissimilar elements.\nThe function first checks if the two tuples have the same length. If they do, it returns the tuple containing the dissimilar elements.\nIf the two tuples have different lengths, the function iterates over the elements of the shorter tuple and checks if the corresponding element in the longer tuple is equal to the corresponding element in the shorter tuple. If it is, the function returns the corresponding element of the shorter tuple.\nIf the elements are not equal, the function returns an empty tuple.\nThe function is called with the two tuples (3, 4, 5, 6) and (5, 7, 4, 10) and returns (3, 6, 7, 10)."], ["\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"\n\"\"\"\nExplanation:\n\nThe function `extract_even` takes a nested mixed tuple as input and returns a new tuple containing only the even elements.\n\nThe function first checks if the tuple contains only even elements. If it does, it returns the tuple unchanged.\n\nIf the tuple contains odd elements, the function iterates over the tuple and removes the odd elements. It then returns the new tuple.\n\nThe function uses a nested loop to iterate over the tuple and extract the even elements. It then iterates over the extracted even elements and removes them from the tuple.\n\nFinally, the function returns the new tuple.\n\nThe function is tested with the example input tuple:\n\n(4, 5, (7, 6, (2, 4)), 6, 8)\n\nThe function extracts the even elements and returns (4, (6, (2, 4)), 6, 8)."], ["\"\"\"\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\nassert surface_Area(3,4) == 33\n\"\"\"\n\n# Define the function\ndef surface_Area(base, height):\n    \"\"\"\n    This function takes in two parameters: base and height.\n    It calculates the surface area of a square pyramid with the given base and height.\n    \"\"\"\n    return 2 * base * height\n\n# Test the function"], ["\"\"\"\nWrite a function which returns nth catalan number.\nassert catalan_number(10)==16796\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the n most expensive items in a given dataset.\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\nExplanation:\nThe function takes a list as input and splits it at the nth element. The first part of the list is added to the end of the list.\nThe function returns the new list."], ["\"\"\"\nWrite a function to convert a list to a tuple.\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\"\"\"\nassert tuple_list([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)"], ["\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given list.\nassert big_diff([1,2,3,4]) == 3\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find perfect squares between two given numbers.\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\"\nExplanation:\nThe function takes two arguments: the latitude and longitude of a point in polar coordinates.\nThe polar coordinates are represented as (theta, phi), where theta is the angle between the radius vector and the x-axis, and phi is the angle between the radius vector and the y-axis.\nThe function converts the polar coordinates to rectangular coordinates using the formula:\nx = r * cos(phi) * cos(theta)\ny = r * cos(phi) * sin(theta)\nz = r * sin(phi)\n\nThe function returns a tuple of the form (x, y, z), where x, y, and z are the corresponding rectangular coordinates."], ["\"\"\"\nWrite a python function to interchange the first and last elements in a list.\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\"\"\"\n```\n\nIn this example, we have a list `lst` with elements `12, 35, 9, 56, 24`. We call the `swap_List` function with this list and assert that the resulting list is `24, 35, 9, 56, 12`."], ["\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"\n\n# Define the function\ndef sum_Of_product(n):\n    # Initialize the sum to 1\n    sum = 1\n    # Loop through the first n terms\n    for I in range(1, n+1):\n        # Calculate the product of the first n terms\n        product = 1\n        for j in range(1, I+1):\n            product *= (n-j+1)\n        # Calculate the sum of the product\n        sum += product\n    return sum\n\n# Test the function"], ["\"\"\"\nWrite a function to remove leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\nassert removezero_ip(\"192.168.0.1\")==('192.168.0.1')"], ["\"\"\"\nWrite a function to find the difference of the first even and first odd number of a given list.\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n\"\"\"\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3"], ["\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to check whether the given number is armstrong or not.\nassert armstrong_number(153)==True\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\nExplanation:\nThe function takes an integer n as input and returns a tuple containing the sum and average of the first n natural numbers.\nThe sum is calculated using a loop and the sum of the first n natural numbers is stored in a variable called sum.\nThe average is calculated using the formula (sum/n) and stored in a variable called average.\nThe function returns a tuple containing the sum and average of the first n natural numbers."], ["\"\"\"\nWrite a python function to check whether the given number is even or not.\nassert is_Even(1) == False\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_repeated_char(\"abcabc\") == \"a\"\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n\"\"\"\n\n# Example usage\nget_ludic(10)\n# Output: [1, 2, 3, 5, 7]"], ["\"\"\"\nWrite a function to reverse words seperated by spaces in a given string.\nassert reverse_words(\"python program\")==(\"program python\")\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to check if the given integer is a prime number.\nassert prime_num(13)==True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to convert degrees to radians.\nassert radian_degree(90)==1.5707963267948966\n\"\"\"\n\n# Example usage\nradian_degree(90)\n# Output: 1.5707963267948966"], ["\"\"\"\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\"\"\"\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'dog') == (None, None, None)"], ["\"\"\"\nWrite a python function to find nth bell number.\nassert bell_Number(2) == 2\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"\n```\n\nExplanation:\n\nThe `remove_kth_element` function takes a list `lst` and an integer `k`. It returns a new list `removed_lst` with the same elements as `lst`, but the `k`th element is removed.\n\nThe function uses a loop to iterate over the list `lst` and compare each element with the `k`th element. If the element is equal to the `k`th element, it is removed from the list and the loop continues. If the element is not equal to the `k`th element, the loop exits without removing the element.\n\nThe function returns the new list `removed_lst`.\n\nThe function is tested with a sample input and output."], ["\"\"\"\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\"\"\"\n```\n\nExplanation:\n\n- The function takes a list of lists as input, which represents the matrix.\n- The function first converts the list of lists to a list of lists of integers, where each element in the list represents a row of the matrix.\n- The function then loops through each row of the matrix, and for each element in the row, it finds the maximum value in the n'th column.\n- The function returns the maximum value found in the n'th column.\n\nExample usage:\n"], ["\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\"\"\"\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30"], ["\"\"\"\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\"\"\"\n```\n\nIn this example, the function `average_tuple` takes a tuple of tuples as input and returns a list of the average values for each tuple. The function first creates a list of tuples from the input tuple, and then iterates over each tuple in the list and calculates the average value using the `sum` function. The resulting list of average values is returned as the output of the function."], ["\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\"\"\"\nExplanation:\nThe function takes two tuples of the same length and performs the element wise modulo operation.\nThe function returns a tuple of the same length as the input tuple.\nThe function first checks if the input tuple is empty. If it is, it returns an empty tuple.\nIf the input tuple is not empty, it loops through the elements of the input tuple and performs the modulo operation on each element.\nThe modulo operation returns the remainder of the division of the first element by the second element.\nThe function then returns the first element of the tuple, followed by the remainder of the modulo operation.\nThe function returns a tuple of the same length as the input tuple."], ["\"\"\"\nWrite a function to divide two lists element wise.\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to move all the numbers to the end of the given string.\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to find the median of two sorted lists of same size.\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n\"\"\"\n\n# function to find the median of two sorted lists\ndef get_median(lst1, lst2, n):\n    # check if lists are of same size\n    if len(lst1) != len(lst2):\n        raise ValueError(\"Lists must have same size\")\n    \n    # find the middle index of the lists\n    mid = len(lst1) // 2\n    \n    # find the median of the two middle elements\n    if n > 1:\n        return (lst1[mid] + lst2[mid]) / 2\n    else:\n        return lst1[mid]\n\n# test function"], ["\"\"\"\nWrite a function to compute the n-th power of each number in a list.\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n\n# function to compute n-th power of a list\ndef nth_nums(lst, n):\n    # check if n is a power of 2\n    if n % 2 == 0:\n        # if n is a power of 2, return the nth power of each number in the list\n        return [pow(num, n // 2) for num in lst]\n    else:\n        # if n is not a power of 2, return the nth power of the first number in the list\n        return [num ** n for num in lst]\n\n# example usage"], ["\"\"\"\nWrite a python function to convert a given string to uppercase.\nassert is_upper(\"person\") ==\"PERSON\"\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nassert triangle_area(-1) == None\n\"\"\"\n\n# Define the function\ndef find_triangle_area(radius):\n    # Calculate the area of the triangle\n    area = 0.5 * radius * radius\n    # Calculate the perimeter of the triangle\n    perimeter = 2 * radius\n    # Calculate the area of the semicircle\n    semicircle_area = perimeter * math.sqrt(3)\n    # Calculate the area of the triangle inscribed in the semicircle\n    triangle_area = area - semicircle_area\n    return triangle_area\n\n# Test the function"], ["\"\"\"\nWrite a function to replace all spaces in the given string with '%20'.\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find even numbers from a list of numbers.\nassert Split([1,2,3,4,5]) == [2,4]\n\"\"\"\nExplanation:\nThe function Split takes a list of numbers as input and returns a list of even numbers. The function uses the built-in function `split()` to split the list into a list of even numbers and a list of odd numbers. The function then checks if the first element of the even numbers list is equal to the second element of the odd numbers list. If they are equal, the function returns the even numbers list. If they are not equal, the function returns an empty list."], ["\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\"\"\"\ndef get_coordinates(coord):\n    \"\"\"\n    Extracts all the adjacent coordinates of the given coordinate tuple.\n    Args:\n        coord (tuple): A coordinate tuple.\n    Returns:\n        list: A list of adjacent coordinates.\n    \"\"\"\n    return [tuple(coord[i:i+2] for I in range(0, len(coord), 2)) for I in range(1, len(coord))]\n"], ["\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"\n\n# Test the function with some examples"], ["\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\nassert pair_xor_Sum([5,9,7,6],4) == 47\n\"\"\"\nExplanation:\nThe function takes a list of numbers as input and returns the sum of the xor of all pairs of numbers in the list.\nThe xor of two numbers is the bitwise exclusive OR of their corresponding bits.\nThe function uses a list comprehension to iterate over the list and calculate the xor of each pair of numbers.\nThe sum of the xor of all pairs is then returned."], ["\"\"\"\nWrite a function to sort the given list.\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\n\ndef heap_sort(arr):\n    \"\"\"\n    Sort a list using heap sort.\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return arr\n    heapify(arr, n, 0)\n    for I in range(n-1, -1, -1):\n        min_index = i\n        for j in range(i, n):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        if min_index != i:\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n            heap_sort(arr)\n    return arr\n\ndef heapify(arr, n, I):\n    \"\"\"\n    Recursively heapify a subtree of the given array.\n    \"\"\"\n    left = 2 * I + 1\n    right = 2 * I + 2\n    if left < n and arr[left] < arr[i]:\n        I = left\n    if right < n and arr[right] < arr[i]:\n        I = right\n    if I != I:\n        arr[i], arr[i] = arr[i], arr[i]\n        heap_sort(arr)\n        heap_sort(arr[i:])\n\narr = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\nheap_sort(arr)"], ["\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\nassert noprofit_noloss(1500,1200)==False\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nassert wind_chill(120,35)==40\n\"\"\"\ndef wind_chill(wind_velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index using the formula:\n    wind_chill = (100 - 5*temperature) * (wind_velocity/10)\n    \"\"\"\n    wind_velocity = wind_velocity/10\n    temperature = temperature*10\n    wind_chill = (100 - 5*temperature) * wind_velocity\n    return round(wind_chill, 1)\n"], ["\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"\ndef remove_lower_case_letters(names):\n    return [n for n in names if n.lower() not in string.punctuation]\n"], ["\"\"\"\nWrite a function to find the nth nonagonal number.\nassert is_nonagonal(10) == 325\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\n\n# Test the function with sample inputs"], ["\"\"\"\nWrite a python function to reverse an array upto a given position.\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n\"\"\"\n\ndef reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverse an array upto a given position.\n    \"\"\"\n    if k < 0:\n        raise ValueError(\"k must be a positive integer\")\n    if k == 0:\n        return arr\n    else:\n        return [arr[i] for I in range(k)] + reverse_Array_Upto_K(arr[k:], k-1)\n"], ["\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"\n\n# Example usage\nadd_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3})\n# Output: (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"], ["\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"\n\n# Test cases"], ["\"\"\"\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n\"\"\"\n\"\"\"\nExplanation:\n\nThe function takes two lists as input and returns the indices where the two lists have the same values.\n\nThe function first checks if the two lists have the same length. If they do, it returns the indices where the lists have the same values.\n\nIf the two lists have different lengths, the function iterates over the first list and checks if the corresponding element in the second list is equal to the first list's corresponding element. If it is, the function increments the corresponding index in the second list.\n\nIf the two lists have the same length, the function iterates over the first list and checks if the corresponding element in the second list is equal to the first list's corresponding element. If it is, the function increments the corresponding index in the second list.\n\nIf the two lists have different lengths, the function returns an empty list.\n\nThe function returns the indices where the lists have the same values.\n"], ["\"\"\"\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nassert power_base_sum(2,100)==115\n\"\"\"\n```\n\nIn this example, we have a function called `power_base_sum` that takes two arguments: `base` and `power`. The function takes `base` as an integer and `power` as a positive integer.\n\nThe function first checks if `power` is a positive integer. If it is not, it raises an error.\n\nNext, the function calculates the sum of all digits of `base` up to the power `power`. This is done using a loop.\n\nThe loop iterates from `base` up to `power` and adds the digit of `base` to the sum.\n\nFinally, the function returns the sum of all digits of `base` up to the specified power.\n\nHere's the implementation:\n"], ["\"\"\"\nWrite a function to extract values between quotation marks \" \" of the given string.\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\"\"\"\n\n# Example usage\nextract_quotation('\"Cortex-A53\" Based \"multi\" tasking \"Processor\"')\n# Output: ['A53', 'multi', 'Processor']"], ["\"\"\"\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n\"\"\"\n\n# Test the function with some examples"], ["\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\"\"\"\n\ndef consecutive_duplicates(lst):\n    \"\"\"\n    Remove consecutive duplicates from a list.\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    for I in range(len(lst)):\n        if lst[i] in seen:\n            lst[i] = None\n            seen_add(lst[i])\n        else:\n            seen_add(lst[i])\n    return lst\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\nassert lateralsurface_cone(5,12)==204.20352248333654\n\"\"\"\n\n# Testing the function with different values for radius and height\nfor I in range(1,10):\n    for j in range(1,10):\n        for k in range(1,10):\n            assert lateralsurface_cone(i,j)==(i*j*k)\n\n# Testing the function with invalid input"], ["\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\"\"\"\n```\n\nExplanation:\n\n- We define a function `find_first_occurrence` that takes an array `arr` and a number `num` as arguments.\n- We use a `for` loop to iterate over the array and check if `arr[i]` is equal to `num`.\n- If `arr[i]` is equal to `num`, we return the index of `arr[i]` (i.e., the position of the first occurrence of `num`).\n- If `arr[i]` is not equal to `num`, we continue to the next element in the array and repeat the loop.\n- If we reach the end of the array without finding a match, we return `-1`.\n\nThis function is used in the `find_first_occurrence` function in the `find_first_occurrence_in_array` function."], ["\"\"\"\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n\"\"\"\n\n# function to find sum of products of all possible sublists of a given list\ndef sum_Of_Subarray_Prod(lst):\n    # initialize sum to 0\n    sum_ = 0\n    \n    # loop through all possible sublists of lst\n    for I in range(len(lst)):\n        # initialize product to 1\n        product = 1\n        \n        # loop through all possible sublists of lst\n        for j in range(i+1, len(lst)):\n            # calculate product of sublists\n            product = product * lst[j]\n            \n            # update sum\n            sum_ += product\n            \n    # return sum of products\n    return sum_\n\n# test function"], ["\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nassert toggle_middle_bits(9) == 15\n\"\"\"\n\n# Example usage:\n>>> toggle_middle_bits(9)\n15"], ["\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nassert left_insertion([1,2,4,5],6)==4\n\"\"\"\n\"\"\"\nExplanation:\n\nThe left insertion point is the index of the first element that is greater than the given value. In our case, we want to find the left insertion point for the value 6.\n\nWe start by creating an empty list to store the indices of the elements.\n\nThen, we iterate over the list and compare each element with the given value. If the element is greater than the given value, we update the indices of the elements that are greater than the given value.\n\nFinally, we return the index of the first element that is greater than the given value.\n\nExample usage:\n\n>>> left_insertion([1,2,4,5],6)\n4"], ["\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nassert find_Index(2) == 4\n\"\"\"\n\ndef find_Index(n):\n    \"\"\"\n    Find the index of the smallest triangular number with n digits.\n    \"\"\"\n    # Base case: if n is 0, return 0\n    if n == 0:\n        return 0\n    # Base case: if n is 1, return 1\n    elif n == 1:\n        return 1\n    # Recursive case: find the smallest triangular number with n-1 digits\n    else:\n        # Find the sum of the digits of the n-1 triangular numbers\n        sum_digits = 0\n        for I in range(n-1):\n            sum_digits += int(str(n-i)[::-1])\n        # Find the index of the smallest triangular number with n-1 digits\n        return find_Index(sum_digits)\n\n# Test the function with different values of n"], ["\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\"\"\"\n\n# Example usage\ntuple_to_dict((1, 5, 7, 10, 13, 5))\n# Output: {1: 5, 7: 10, 13: 5}"], ["\"\"\"\nWrite a python function to check whether all the characters are same or not.\nassert all_Characters_Same(\"python\") == False\n\"\"\"\n\n# Example 2: Checking if a string is a palindrome"], ["\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\nassert area_tetrahedron(3)==15.588457268119894\n\"\"\"\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n\"\"\"\n\n# function to rotate a list by specified number of items to the right direction\ndef rotate_right(lst, n):\n    # check if the list is empty\n    if len(lst) == 0:\n        return lst\n    \n    # check if the list is already rotated\n    if n == 0:\n        return lst\n    \n    # find the index of the first element to be rotated\n    start = 0\n    for I in range(len(lst)):\n        if lst[i] < lst[start]:\n            start = i\n    \n    # find the index of the last element to be rotated\n    end = len(lst) - 1\n    for I in range(start, end):\n        if lst[i] > lst[end]:\n            end = i\n    \n    # swap the first and last elements\n    lst[start], lst[end] = lst[end], lst[start]\n    \n    # rotate the remaining elements\n    lst[start:end+1] = lst[end+1:].rotate(n-1)\n    \n    # return the rotated list\n    return lst\n\n# example usage"], ["\"\"\"\nWrite a function to check if the given tuple has any none value or not.\nassert check_none((10, 4, 5, 6, None)) == True\n\"\"\"\n```\n\nIn this example, we have a function called `check_none` that takes a tuple as an argument. The function checks if the tuple has any none value or not. If the tuple has none value, the function returns `True`. Otherwise, it returns `False`.\n\nIn the `assert` statement, we call the `check_none` function with the given tuple as an argument. The function returns a boolean value, which is then used to check if the assertion is true or false. If the assertion is true, the program continues with the rest of the code. If the assertion is false, the program prints an error message."], ["\"\"\"\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\"\"\"\n\n# Example usage:\n# divisible_by_digits(1, 22)\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\n# Example usage:\n# divisible_by_digits(1, 10)\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# Example usage:\n# divisible_by_digits(1, 20)\n# Output: []\n\n# Example usage:\n# divisible_by_digits(1, 100)\n# Output: []\n\n# Example usage:\n# divisible_by_digits(1, 1000)\n# Output: []\n\n# Example usage:\n# divisible_by_digits(1, 10000)\n# Output: []\n\n# Example usage:\n# divisible_by_digits(1, 100000)\n# Output: []\n\n# Example usage:\n# divisible_by_digits(1, 1000000)\n# Output: []\n\n# Example usage:\n# divisible_by_digits(1, 10000000)\n# Output: []\n\n# Example usage:\n# divisible_by_digits(1, 100000000)\n# Output: []\n\n# Example usage:\n# divisible_by_digits(1, 100"], ["\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string.\nassert capital_words_spaces(\"Python\") == 'Python'\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\"\"\"\n\n# Example usage\nsort_numeric_strings([1, 2, 3, 4, 5, 6, 7, 8, 9])\n# Output: [9, 8, 7, 6, 5, 4, 3, 2, 1]\n\n# Example usage with negative numbers\nsort_numeric_strings([-1, 2, 3, 4, 5, 6, 7, 8, 9])\n# Output: [9, 8, 7, 6, 5, 4, 3, 2, 1]\n\n# Example usage with non-numeric characters\nsort_numeric_strings(['a', 'b', 'c', 'd', 'e'])\n# Output: ['a', 'b', 'c', 'd', 'e']\n\n# Example usage with empty list\nsort_numeric_strings([])\n# Output: []\n\n# Example usage with non-list input\nsort_numeric_strings(1)\n# Output: TypeError: sort_numeric_strings() takes 1 positional argument but 1 was given\n\n# Example usage with non-numeric input\nsort_numeric_strings('hello')\n# Output: TypeError: sort_numeric_strings() takes 1 positional argument but 1 was given\n\n# Example usage with non-string input\nsort_numeric_strings(1.2)\n# Output: TypeError: sort_numeric_strings() takes 1 positional argument but 1 was given\n\n# Example usage with non-list input\nsort_numeric_strings([1, 2, 3, 4, 5, 6, 7, 8, 9])\n# Output: TypeError: sort"], ["\"\"\"\nWrite a function to add the given tuple to the given list.\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\"\"\"\n\n# Example usage\nadd_tuple([5, 6, 7], (9, 10))"], ["\"\"\"\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\"\"\"\n\"\"\"\nExample 2:\nGiven the following array:\n[1, 3, 5, 7, 9, 11]\nCheck if it is a min heap or not."], ["\"\"\"\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nassert jacobsthal_num(5) == 11\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n\"\"\"\n\n# test cases"], ["\"\"\"\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to find the second smallest number in a list.\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"\nassert second_smallest([1, 2, 3, 4, 5])==3"], ["\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\nassert is_decimal('123.11')==True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True\n\"\"\"\n```\n\nExplanation:\n\nThe `unique_Element` function takes a list of numbers as input and returns `True` if the list contains only one distinct element, and `False` otherwise.\n\nThe function first checks if the list is empty, which is the case if it contains only one element. If the list is empty, then it means that there is only one distinct element in the list, and the function returns `True`.\n\nOtherwise, the function iterates over the list and checks if the current element is equal to the previous element. If they are equal, then the current element is the only distinct element in the list, and the function returns `True`.\n\nFinally, the function checks if the list is empty again. If it is empty again, then the function returns `False`.\n\nSo, the function returns `True` if the list contains only one distinct element, and `False` otherwise."], ["\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nassert find_min_diff((1,5,3,19,18,25),6) == 1\n\"\"\"\n\n# Test function\ndef find_min_diff(arr, target):\n    min_diff = arr[0]\n    for I in range(1, len(arr)):\n        if arr[i] < target:\n            min_diff = arr[i]\n    return min_diff\n\n# Test function with input array"], ["\"\"\"\nWrite a python function to count number of digits in a given string.\nassert number_ctr('program2bedone') == 1\n\"\"\"\nWrite a python function to count number of vowels in a given string."], ["\"\"\"\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nassert is_polite(7) == 11\n\"\"\"\n\n# Define a function to check if a number is polite\ndef is_polite(n):\n    # Check if n is divisible by 3\n    if n % 3 == 0:\n        # If n is divisible by 3, check if it is divisible by 5\n        if n % 5 == 0:\n            # If n is divisible by 5, check if it is divisible by 7\n            if n % 7 == 0:\n                # If n is divisible by 7, return True\n                return True\n    return False\n\n# Test the function"], ["\"\"\"\nWrite a function to return a list of all pairs of consecutive items in a given list.\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nassert get_pairs_count([1,1,1,1],2) == 6\n\"\"\"\n```\n\nExplanation:\n\n- The function `get_pairs_count` takes a list of numbers and the sum as input.\n- It uses a loop to iterate over the list and checks if the current pair's sum is equal to the given sum.\n- If the current pair's sum is equal to the given sum, it adds 1 to the count of pairs.\n- The function returns the count of pairs.\n\nExample usage:\n"], ["\"\"\"\nWrite a python function to get the difference between two lists.\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\nassert odd_num_sum(2) == 82\n\"\"\"\n\n# Define the function\ndef odd_num_sum(n):\n    # Define the function body\n    sum_of_fourth_power = 0\n    for I in range(1, n+1):\n        sum_of_fourth_power += i**4\n    return sum_of_fourth_power\n\n# Call the function"], ["\"\"\"\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nassert check_expression(\"{()}[{}]\") == True\n\"\"\"\n\n# Test cases"], ["\"\"\"\nWrite a function to remove all the words with k length in the given string.\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n\"\"\"\nassert remove_length('The person is most value tet', 2) == 'person is most value'"], ["\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n\"\"\"\nassert odd_position([1,2,3,4,5,6,7,8]) == False"], ["\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given list.\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n\"\"\"\nassert find_sum([1,2,3,1,1,4,5,6,7,8,9,10]) == 25"], ["\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\"\"\"\n\n# Example usage\nfind_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])\n# Output: [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"], ["\"\"\"\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\nassert count_divisors(10)\n\"\"\"\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes a number as input and returns the count of divisors.\n    \"\"\"\n    divisors = []\n    for I in range(1, n+1):\n        if n % I == 0:\n            divisors.append(i)\n    return len(divisors)\n"], ["\"\"\"\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nassert odd_length_sum([1,2,4]) == 14\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4"], ["\"\"\"\nWrite a function to convert tuple string to integer tuple.\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\nassert right_insertion([1,2,4,5],6)==4\n\"\"\"\nassert right_insertion([1,2,4,5],6)==4"], ["\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\nassert not text_match_three(\"ac\")\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to create a new tuple from the given string and list.\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n\"\"\"\n\n# Test the function"], ["\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\nassert even_position([3,2,1]) == False\n\"\"\"\n```\n\nExplanation:\n\nThe `assert` statement is used to check whether the function returns a boolean value. In this case, the function returns `False` if the list contains any even index that contains even numbers.\n\nThe `even_position` function takes a list as input and returns a boolean value indicating whether every even index contains even numbers. The function uses a list comprehension to iterate over the list and check whether the index is even. If the index is even, the function returns `True`. Otherwise, it returns `False`.\n\nThe `assert` statement checks whether the function returns a boolean value. If the function returns `False`, the test fails and the program exits with an error message."], ["\"\"\"\nWrite a function to remove tuples from the given tuple.\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\"\"\"\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)"], ["\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\"\"\"\n```\n\nIn this example, we have a function called `count_list` that takes a list of lists as input and returns the number of lists in the input list. The function first checks if the input list is empty, and if it is, it returns 0. If the input list is not empty, it loops through each element of the list and checks if it is a list. If it is, it adds 1 to the count and returns the new count. If it is not a list, it returns 0.\n\nThe `assert` statement is used to test the function's output. The function is called with a list of lists, and the output is compared to the expected output of 4. If the output matches the expected output, the test passes. If the output does not match the expected output, the test fails."], ["\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\nassert last([1,2,3],1) == 0\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n```\n\nExplanation:\n\n1. We start by defining a function `text_starta_endb` that takes a string `text` as input and returns `True` if it matches the pattern `a followed by anything ending in 'b'`.\n\n2. We then define a string `text_starta_endb` that matches the pattern.\n\n3. We then define a function `assert_text_starta_endb` that takes a string `text` as input and calls the `text_starta_endb` function with `text`.\n\n4. We then run the `assert_text_starta_endb` function with a string that has an 'a' followed by anything, ending in 'b'.\n\n5. We expect the function to return `True` as the string matches the pattern.\n\n6. Finally, we run the `assert_text_starta_endb` function with a string that does not match the pattern.\n\n7. We expect the function to return `False` as the string does not match the pattern."], ["\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\n\n# Test the function with some sample input and expected output"], ["\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\nassert sum_in_range(2,5) == 8\n\"\"\"\n\ndef sum_in_range(l, r):\n    \"\"\"\n    Find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum_of_odd = 0\n    for I in range(l, r+1):\n        if I % 2 != 0:\n            sum_of_odd += i\n    return sum_of_odd\n"], ["\"\"\"\nWrite a python function to find the sum of an array.\nassert _sum([1, 2, 3]) == 6\n\"\"\"\n```\n\n3. Implement a function to find the sum of a list of numbers:\n"], ["\"\"\"\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nassert left_rotate(16,2) == 64\n\"\"\"\n\n# Example usage\nleft_rotate(16,2)\n# Output: 64\n\n# Explanation:\n# The function takes two arguments: the number to be rotated and the number of bits to rotate by.\n# We assume that the number is 32 bit.\n# The function first calculates the number of bits to rotate by, which is 2 in this case.\n# Then it calculates the number of bits to shift left by, which is 2 in this case.\n# Finally, it rotates the number left by the given number of bits.\n# The result is 64 in this case."], ["\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\n\n# Testing the function"], ["\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\n\ndef test_three_equal(num1, num2, num3):\n    \"\"\"\n    Test function to check if the given three integers are equal.\n    \"\"\"\n    if num1 == num2 and num1 == num3:\n        return 1\n    elif num2 == num3:\n        return 2\n    else:\n        return 0\n"], ["\"\"\"\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nassert not is_perfect_square(10)\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\nassert is_product_even([1,2,3])\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n\"\"\"\n\ndef max_sum_list(lst):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    # Initialize the highest sum to 0\n    highest_sum = 0\n    \n    # Iterate through the list of lists\n    for sub_list in lst:\n        # Calculate the sum of the sub-list\n        sum_of_sub_list = sum(sub_list)\n        \n        # If the sum of the sub-list is greater than the highest sum, update the highest sum\n        if sum_of_sub_list > highest_sum:\n            highest_sum = sum_of_sub_list\n            \n        # If the sum of the sub-list is equal to the highest sum, update the highest sum\n        if sum_of_sub_list == highest_sum:\n            # Append the sub-list to the highest sum list\n            highest_sum_list.append(sub_list)\n    \n    # Return the highest sum list\n    return highest_sum_list\n\n# Test the function with some sample inputs"], ["\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\"\"\"\n\n# Example usage"], ["\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\nassert first_odd([1,3,5]) == 1\n\"\"\"\n```\n\nIn this example, we have a function called `first_odd` that takes a list of numbers as input. The function checks if the first number in the list is odd, and returns it if it is.\n\nThe `assert` statement is used to test the function's output. The `first_odd` function returns the first odd number in the list, which is 1 in this example.\n\nTo run the test case, you can run the following command:\n"], ["\"\"\"\nWrite a function to check if the given tuples contain the k or not.\nassert check_K((10, 4, 5, 6, 8), 6) == True\n\"\"\"\nassert check_K((10, 4, 5, 6, 8), 7) == False"], ["\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n\"\"\"\nassert check_smaller((1, 2, 3), (1, 2, 3)) == True"]]