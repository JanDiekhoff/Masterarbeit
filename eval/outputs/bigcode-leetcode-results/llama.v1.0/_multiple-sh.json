[["#!/bin/bash\n# Check if in given list of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> $(has_close_elements \"1.0 2.0 3.0\" \"0.5\")\n# \"false\"\n# >>> $(has_close_elements \"1.0 2.8 3.0 4.0 5.0 2.0\" \"0.3\")\n# \"true\"\n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n  local list=\"$1\"\n  local threshold=\"$2\"\n  local result=false\n  local I=0\n  local I1=0\n  local I2=0\n  local I3=0\n  local I4=0\n  local I5=0\n  local I6=0\n  local I7=0\n  local I8=0\n  local I9=0\n  local I10=0\n  local I11=0\n  local I12=0\n  local I13=0\n  local I14=0\n  local I15=0\n  local I16=0\n  local I17=0\n  local I18=0\n  local I19=0\n  local I20=0\n  local I21=0\n  local I22=0\n  local I23=0\n  local I24=0\n  local I25=0\n  local I26=0\n  local I27=0\n  local I28=0\n  local I29=0\n  local I30=0\n  local I31=0\n  local I32=0\n  local I33=0\n  local I34=0\n  local I35=0\n  local I36=0\n  local I37=0\n  local I38=0\n  local I39=0\n  local I40=0\n  local I41=0\n  local I42=0\n  local I43=0\n  local I44=0\n  local I45=0\n"], ["#!/bin/bash\n# Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n# separate those group into separate strings and return the list of those.\n# Separate groups are balanced (each open brace is properly closed) and not nested within each other\n# Ignore any spaces in the input string.\n# >>> $(separate_paren_groups \"( ) (( )) (( )( ))\")\n# ['\"()\"', '\"(())\"', '\"(()())\"']\n#\n# $1 is a string\nseparate_paren_groups() {\n  local input=\"$1\"\n  local open_braces=()\n  local close_braces=()\n  local open_braces_count=0\n  local close_braces_count=0\n  local open_braces_index=0\n  local close_braces_index=0\n  local open_braces_string=\"\"\n  local close_braces_string=\"\"\n  local open_braces_string_index=0\n  local close_braces_string_index=0\n  local open_braces_string_count=0\n  local close_braces_string_count=0\n  local open_braces_string_last=\n  local close_braces_string_last=\n  local open_braces_string_last_index=\n  local close_braces_string_last_index=\n  local open_braces_string_last_count=\n  local close_braces_string_last_count=\n  local open_braces_string_last_last=\n  local close_braces_string_last_last=\n  local open_braces_string_last_last_index=\n  local close_braces_string_last_last_index=\n  local open_braces_string_last_last_count=\n  local close_braces_string_last_last_count=\n  local open_braces_string_last_last_last=\n  local close_braces_string_last_last_last=\n  local open_braces_string_last_last_last_index=\n  local close_braces_string_last_last_last_index"], ["#!/bin/bash\n# Given a positive floating point number, it can be decomposed into\n# and integer part (largest integer smaller than given number) and decimals\n# (leftover part always smaller than 1).\n# Return the decimal part of the number.\n# >>> $(truncate_number \"3.5\")\n# \"0.5\"\n#\n# $1 is a floating point\ntruncate_number() {\n  local num=\"$1\"\n  local int_part=\"\"\n  local dec_part=\"\"\n  local max_int=0\n  local max_dec=0\n  local max_dec_len=0\n  local max_dec_pos=0\n  local max_dec_pos_len=0\n  local max_dec_pos_str=\"\"\n  local max_dec_str=\"\"\n  local max_dec_str_len=0\n  local max_dec_str_pos=0\n  local max_dec_str_pos_len=0\n  local max_dec_str_pos_str=\"\"\n  local max_dec_str_pos_str_len=0\n  local max_dec_str_pos_str_pos=0\n\n  # Check if the number is positive\n  if [[ $num == \"-\"* ]]; then\n    num=\"$(echo \"$num\" | tr -d \"[:space:]\")\"\n    num=$(echo \"$num\" | tr \".\" \" \")\n    num=$(echo \"$num\" | tr \" \" \" \")\n  fi\n\n  # Check if the number is even\n  if [[ $num == *\".\"* ]]; then\n    num=$(echo \"$num\" | tr \" \" \" \")\n    num=$(echo \"$num\" | tr \".\" \" \")\n  fi\n\n  # Check if the number is odd\n  if [[ $num == *\".\"* ]]; then\n    num=$(echo \"$num\" | tr \" \" \" \")\n    num=$(echo \"$num\" | tr \".\" \" \")\n  fi\n\n  # Check if the number is a decimal\n  if [[ $num == *\".\"* ]]; then\n    num=$(echo \"$num\" | tr \" \" \" \")\n    num=$(echo \"$num\" | tr \".\" \" \")\n  fi\n"], ["#!/bin/bash\n# You're given a list of deposit and withdrawal operations on a bank account that starts with\n# zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n# at that point function should return true. Otherwise it should return false.\n# >>> $(below_zero \"1 2 3\")\n# \"false\"\n# >>> $(below_zero \"1 2 -4 5\")\n# \"true\"\n#\n# $1 is a space-separated list\nbelow_zero() {\n  local balance\n  local operation\n  local result\n  local -a list\n\n  # Check if balance is zero\n  if [[ -z \"$1\" ]]; then\n    result=true\n    return\n  fi\n\n  # Split list into individual elements\n  local -a elements\n  local -i I\n  for I in $1; do\n    elements+=(\"$i\")\n  done\n\n  # Check if any element is negative\n  for I in \"${elements[@]}\"; do\n    if [[ $i =~ ^-?\\d+$ ]]; then\n      result=false\n      return\n    fi\n  done\n\n  # Check if balance is negative\n  balance=$(echo \"$1\" | tr -d ' ')\n  if [[ $balance =~ ^-?\\d+$ ]]; then\n    result=true\n    return\n  fi\n\n  # Check if balance is zero\n  balance=$(echo \"$1\" | tr -d ' ')\n  if [[ $balance == 0 ]]; then\n    result=true\n    return\n  fi\n\n  # Check if balance is negative and zero\n  balance=$(echo \"$1\" | tr -d ' ')\n  if [[ $balance == 0 ]]; then\n    result=true\n    return\n  fi\n\n  # Check if balance is zero and negative\n  balance=$(echo \"$1\" | tr -d ' ')\n  if [[ $balance == -0 ]]; then\n    result=true\n    return\n  fi\n\n  # Check if balance is zero and positive\n  balance=$(echo \"$1\" | tr -d ' ')\n  if [[ $balance == 0 ]]; then\n    result=true\n    return\n "], ["#!/bin/bash\n# For a given list of input numbers, calculate Mean Absolute Deviation\n# around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute difference between each\n# element and a centerpoint (mean in this case):\n# MAD = average | x - x_mean |\n# >>> $(mean_absolute_deviation \"1.0 2.0 3.0 4.0\")\n# \"1.0\"\n#\n# $1 is a space-separated list\nmean_absolute_deviation() {\n  local input_list=\"$1\"\n  local mean_value\n  local abs_deviation\n  local mean\n\n  # Check if input list is empty\n  if [[ -z \"$input_list\" ]]; then\n    echo \"Error: Input list is empty.\"\n    return 1\n  fi\n\n  # Calculate mean value\n  mean=$(echo \"$input_list\" | awk '{print $1}')\n\n  # Calculate absolute deviation\n  abs_deviation=$(echo \"$input_list\" | awk '{print abs($1-$mean)}')\n\n  # Calculate mean\n  mean_value=$(echo \"$abs_deviation\" | awk '{print $1}')\n\n  # Return mean value\n  echo \"$mean_value\""], ["#!/bin/bash\n# Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n# >>> $(intersperse \"\" \"4\")\n# []\n# >>> $(intersperse \"1 2 3\" \"4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"4\"', '\"3\"']\n#\n# $1 is a space-separated list\n# $2 is an integer\nintersperse() {\n  local delimeter=\"$1\"\n  shift\n  local nums=\"$@\"\n  local nums_str\n  local nums_str_len\n  local nums_str_delimeter\n  local nums_str_delimeter_len\n  local nums_str_delimeter_pos\n  local nums_str_delimeter_pos_end\n  local nums_str_delimeter_pos_start\n  local nums_str_delimeter_pos_end_newline\n  local nums_str_delimeter_pos_start_newline\n  local nums_str_delimeter_pos_end_newline\n  local nums_str_delimeter_pos_start_newline_end\n  local nums_str_delimeter_pos_start_newline_end_newline\n  local nums_str_delimeter_pos_start_newline_end_newline_newline\n  local nums_str_delimeter_pos_start_newline_end_newline_newline_newline\n  local nums_str_delimeter_pos_start_newline_end_newline_newline_newline_newline\n  local nums_str_delimeter_pos_start_newline_end_newline_newline_newline_newline_newline\n  local nums_str_delimeter_pos_start_newline_end_newline_newline_newline_newline_newline_newline\n  local nums_str_delimeter_pos_start_newline_end_newline_newline_newline_newline_newline_newline_newline\n  local nums_str_delimeter_pos_start_newline_end_new"], ["#!/bin/bash\n# Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n# For each of the group, output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"(()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1 is a string\nparse_nested_parens() {\n  local input=\"$1\"\n  local depth=0\n  local nesting=()\n  local max_depth=0\n\n  # Loop through each group of parentheses\n  for I in $(echo \"$input\" | sed 's/ /\\\\ /g'); do\n    # Extract the depth of the current group\n    depth=$(echo \"$i\" | awk '{print $1}')\n\n    # If the current group is a nested group, add it to the nesting array\n    if [[ $depth -gt $max_depth ]]; then\n      max_depth=$depth\n      nesting=(${nesting[@]})\n    fi\n\n    # If the current group is the deepest, add it to the max_depth array\n    if [[ $depth -eq $max_depth ]]; then\n      max_depth=$depth\n      nesting=(${nesting[@]})\n    fi\n  done\n\n  # Return the deepest nesting level\n  echo \"${nesting[${#nesting[@]}-1]}\""], ["#!/bin/bash\n# For a given list of integers, return a list consisting of a sum and a product of all the integers in a list.\n# Empty sum should be equal to 0 and empty product should be equal to 1.\n# >>> $(sum_product \"\")\n# ['\"0\"', '\"1\"']\n# >>> $(sum_product \"1 2 3 4\")\n# ['\"10\"', '\"24\"']\n#\n# $1 is a space-separated list\nsum_product() {\n  local I=1\n  local sum=0\n  local product=1\n  while I < $1; do\n    sum=$((sum + $1))\n    product=$((product * $1))\n    I=$((I + 1))\n  done\n  echo \"$sum\""], ["#!/bin/bash\n# From a given list of integers, generate a list of rolling maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"', '\"4\"']\n#\n# $1 is a space-separated list\nrolling_max() {\n  local max_list=$1\n  local n=1\n  local max_so_far=\"\"\n  while IFS= read -r line; do\n    if [[ \"$line\" == \"$max_so_far\" ]]; then\n      n=$((n+1))\n    else\n      max_so_far=\"$line\"\n    fi\n  done < <(echo \"$max_list\")\n  echo \"$max_so_far\""], ["#!/bin/bash\n# Find the shortest palindrome that begins with a supplied string.\n# Algorithm idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n# - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n# >>> $(make_palindrome \"\")\n# \"\"\n# >>> $(make_palindrome \"cat\")\n# \"catac\"\n# >>> $(make_palindrome \"cata\")\n# \"catac\"\n#\n# $1 is a string\nmake_palindrome() {\n  local string=$1\n  local longest_prefix=\"\"\n  local longest_postfix=\"\"\n  local postfix=\"\"\n  local prefix=\"\"\n  local postfix_len=\"\"\n  local prefix_len=\"\"\n  local palindrome=\"\"\n\n  # Find longest postfix\n  for I in $(seq 0 $((string.length - 1))); do\n    postfix_len=$(echo \"$string\" | grep -oE \"[^a-zA-Z0-9]\" | wc -c)\n    postfix=$(echo \"$string\" | grep -oE \"[^a-zA-Z0-9]\" | tail -n 1)\n    postfix_len=$(echo \"$postfix\" | wc -c)\n    if [ \"$postfix_len\" -gt \"$postfix_len\" ]; then\n      postfix=$(echo \"$postfix\" | tail -n 1)\n    fi\n    postfix_len=$(echo \"$postfix\" | wc -c)\n    if [ \"$postfix_len\" -gt \"$postfix_len\" ]; then\n      postfix=$(echo \"$postfix\" | tail -n 1)\n    fi\n    postfix_len=$(echo \"$postfix\" | wc -c)\n    if [ \"$postfix_len\" -gt \"$postfix_len\" ]; then\n      postfix=$(echo \"$postfix\" | tail -n 1)\n    fi\n    postfix_len=$(echo \"$postfix\" | wc -c)\n    if [ \"$postfix_len\" -gt \"$postfix_len\" ]; then\n      postfix=$(echo \"$postfix\" | tail -n 1)\n   "], ["#!/bin/bash\n# Input are two strings a and b consisting only of 1s and 0s.\n# Perform binary XOR on these inputs and return result also as a string.\n# >>> $(string_xor \"010\" \"110\")\n# \"100\"\n#\n# $1 is a string\n# $2 is a string\nstring_xor() {\n  local a=\"$1\"\n  local b=\"$2\"\n  local result=\"\"\n  local I=0\n  while [ $I -lt 2 ]\n  do\n    I=$(( I+1 ))\n    if [ $a[$i] -eq 1 -a $b[$i] -eq 1 ]\n    then\n      result=\"$result\"$b[$i]\n    else\n      result=\"$result\"$a[$i]\n    fi\n  done\n  echo \"$result\""], ["#!/bin/bash\n# Out of list of strings, return the longest one. Return the first one in case of multiple\n# strings of the same length. Return None in case the input list is empty.\n# >>> $(longest \"\")\n# \"None\"\n# >>> $(longest \"a b c\")\n# \"a\"\n# >>> $(longest \"a bb ccc\")\n# \"ccc\"\n#\n# $1 is a space-separated list\nlongest() {\n  local I=1\n  local longest_string=\"\"\n  local longest_length=0\n  while I < \"$#\"; do\n    local string=\"${!i}\"\n    local length=\"${#string}\"\n    if [[ \"$length\" -gt \"$longest_length\" ]]; then\n      longest_string=\"${string}\"\n      longest_length=\"$length\"\n    fi\n    ((i++))\n  done\n  echo \"$longest_string\""], ["#!/bin/bash\n# Return a greatest common divisor of two integers a and b\n# >>> $(greatest_common_divisor \"3\" \"5\")\n# \"1\"\n# >>> $(greatest_common_divisor \"25\" \"15\")\n# \"5\"\n#\n# $1 is an integer\n# $2 is an integer\ngreatest_common_divisor() {\n  local a=\"$1\"\n  local b=\"$2\"\n  local gcd\n\n  if [ \"$a\" = \"$b\" ]; then\n    echo \"$a\"\n    return 0\n  fi\n\n  gcd=$(echo \"$a\" | bc)\n  echo \"$gcd\"\n  return 1"], ["#!/bin/bash\n# Return list of all prefixes from shortest to longest of the input string\n# >>> $(all_prefixes \"abc\")\n# ['\"a\"', '\"ab\"', '\"abc\"']\n#\n# $1 is a string\nall_prefixes() {\n  local input=\"$1\"\n  local prefix=\"\"\n  local prefix_length=0\n  local prefixes=()\n\n  # Loop through each character in the input string\n  for I in $(seq 1 $((length($input) - 1))); do\n    # If the current character is a letter, add it to the prefix\n    if [[ $input[$i] =~ ^[a-zA-Z]+$ ]]; then\n      prefix=\"$prefix $input[$i]\"\n      prefix_length=$((prefix_length + 1))\n    fi\n  done\n\n  # If the prefix is empty, return an empty list\n  if [[ $prefix_length -eq 0 ]]; then\n    return\n  fi\n\n  # If the prefix is longer than the longest prefix, return the prefix\n  if [[ $prefix_length -gt $max_prefix_length ]]; then\n    prefixes=($prefix)\n  fi"], ["#!/bin/bash\n# Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n# >>> $(string_sequence \"0\")\n# \"0\"\n# >>> $(string_sequence \"5\")\n# \"0 1 2 3 4 5\"\n#\n# $1 is an integer\nstring_sequence() {\n  local n=\"$1\"\n  local separator=\" \"\n  shift\n  local string=\"\"\n  for I in $(seq 1 \"$n\"); do\n    string=\"$string$1\"\n  done\n  echo \"$string\""], ["#!/bin/bash\n# Given a string, find out how many distinct characters (regardless of case) does it consist of\n# >>> $(count_distinct_characters \"xyzXYZ\")\n# \"3\"\n# >>> $(count_distinct_characters \"Jerry\")\n# \"4\"\n#\n# $1 is a string\ncount_distinct_characters() {\n  local string=\"$1\"\n  local count=0\n  local char\n  for char in $string; do\n    ((count++))\n    if [[ $char =~ [[:upper:]] ]]; then\n      ((count++))\n    fi\n  done\n  echo \"$count\""], ["#!/bin/bash\n# Input to this function is a string representing musical notes in a special ASCII format.\n# Your task is to parse this string and return list of integers corresponding to how many beats does each\n# not last.\n# Here is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o| .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"', '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\nparse_music() {\n  local input=$1\n  local notes=\"\"\n  local beats=0\n  local i=0\n  while IFS= read -r line; do\n    if [[ $line =~ ^[o|o|.|]$ ]]; then\n      if [[ $i -eq 0 ]]; then\n        notes=\"$notes $line\"\n        beats=$((beats + 1))\n      else\n        notes=\"$notes $line\"\n        beats=$((beats + 2))\n      fi\n      IFS= read -r line; done <<< \"$input\"\n    fi\n  done <<< \"$notes\"\n  echo \"$beats\""], ["#!/bin/bash\n# Find how many times a given substring can be found in the original string. Count overlaping cases.\n# >>> $(how_many_times \"\" \"a\")\n# \"0\"\n# >>> $(how_many_times \"aaa\" \"a\")\n# \"3\"\n# >>> $(how_many_times \"aaaa\" \"aa\")\n# \"3\"\n#\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n  local string=$1\n  shift\n  local substring=$1\n  shift\n  local count=0\n  local prev_substring=\"\"\n  for I in $(seq 0 $((length($string) - length($substring)))); do\n    if [[ $string[$i] == $substring ]]; then\n      count=$((count + 1))\n      prev_substring=$substring\n    fi\n  done\n  echo \"$count\""], ["#!/bin/bash\n# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n# Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to largest\n# >>> $(sort_numbers \"three one five\")\n# \"one three five\"\n#\n# $1 is a string\nsort_numbers() {\n  local input=\"$1\"\n  local sorted_numbers=\"\"\n  local I=0\n  while I < $(( $# - 1 ))\n  do\n    local num=\"$1:$i\"\n    if [[ \"$num\" =~ ^[0-9]+$ ]]; then\n      sorted_numbers=\"$sorted_numbers $num\"\n    fi\n    I=$(( I + 1 ))\n  done\n  echo \"$sorted_numbers\""], ["#!/bin/bash\n# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\n# >>> $(find_closest_elements \"1.0 2.0 3.0 4.0 5.0 2.2\")\n# ['\"2.0\"', '\"2.2\"']\n# >>> $(find_closest_elements \"1.0 2.0 3.0 4.0 5.0 2.0\")\n# ['\"2.0\"', '\"2.0\"']\n#\n# $1 is a space-separated list\nfind_closest_elements() {\n  local list=\"$1\"\n  local closest_number\n  local closest_distance\n  local closest_index\n  local closest_element\n  local -a elements\n\n  # Split the list into an array of numbers\n  local -a numbers\n  IFS=',' read -ra numbers <<< \"$list\"\n\n  # Find the closest number in the list\n  closest_number=$(echo \"$numbers\" | sort -n | head -n 1)\n\n  # Find the closest distance between the two numbers\n  closest_distance=$(echo \"$numbers\" | sort -n | tail -n 1)\n\n  # Find the index of the closest number\n  closest_index=$(echo \"$numbers\" | sort -n | tail -n 1 | awk '{print $1}')\n\n  # Find the index of the closest distance\n  closest_index=$(echo \"$numbers\" | sort -n | tail -n 1 | awk '{print $2}')\n\n  # Find the index of the closest element\n  closest_element=$(echo \"$numbers\" | sort -n | tail -n 1 | awk '{print $3}')\n\n  # Return the two closest elements\n  echo \"$closest_number\"\n  echo \"$closest_distance\"\n  echo \"$closest_index\"\n  echo \"$closest_element\""], ["#!/bin/bash\n# Given list of numbers (of at least two elements), apply a linear transform to that list,\n# such that the smallest number will become 0 and the largest will become 1\n# >>> $(rescale_to_unit \"1.0 2.0 3.0 4.0 5.0\")\n# ['\"0.0\"', '\"0.25\"', '\"0.5\"', '\"0.75\"', '\"1.0\"']\n#\n# $1 is a space-separated list\nrescale_to_unit() {\n  local input_list=\"$1\"\n  local min_num=\"$2\"\n  local max_num=\"$3\"\n  local unit=\"$4\"\n  local output_list\n\n  # Check if the input list is empty\n  if [ -z \"$input_list\" ]; then\n    echo \"Error: Input list is empty.\"\n    return 1\n  fi\n\n  # Check if the minimum number is greater than the maximum number\n  if [ \"$min_num\" -gt \"$max_num\" ]; then\n    echo \"Error: Minimum number ($min_num) is greater than maximum number ($max_num).\"\n    return 1\n  fi\n\n  # Check if the input list contains only numbers\n  if ! [[ \"$input_list\" =~ ^[0-9]+$ ]]; then\n    echo \"Error: Input list contains non-numeric characters.\"\n    return 1\n  fi\n\n  # Split the input list into two parts: the smallest number and the largest number\n  local smallest_num=\"\"\n  local largest_num=\"\"\n  for num in $input_list; do\n    if [[ \"$num\" =~ ^[0-9]+$ ]]; then\n      if [ \"$min_num\" -lt \"$num\" ]; then\n        smallest_num=\"$num\"\n      else\n        largest_num=\"$num\"\n      fi\n    fi\n  done\n\n  # Calculate the unit of the output list\n  local unit_num=\"\"\n  for num in $input_list; do\n    if [[ \"$num\" =~ ^[0-9]+$ ]]; then\n      if [ \"$min_num\" -lt \"$num\" ]; then\n        unit_"], ["#!/bin/bash\n# Filter given list of any shthon values only for integers\n# >>> $(filter_integers \"a 3.14 5\")\n# ['\"5\"']\n# >>> $(filter_integers \"1 2 3 abc  \")\n# ['\"1\"', '\"2\"', '\"3\"']\n#\n# $1 is a space-separated list\nfilter_integers() {\n  local list=\"$1\"\n  local -a filtered\n  for I in $list; do\n    if [[ \"$i\" =~ ^[0-9]+$ ]]; then\n      filtered+=(\"$i\")\n    fi\n  done\n  echo \"${filtered[@]}\""], ["#!/bin/bash\n# Return length of given string\n# >>> $(strlen \"\")\n# \"0\"\n# >>> $(strlen \"abc\")\n# \"3\"\n#\n# $1 is a string\nstrlen() {\n  local I=0\n  while I < \"$1\"; do\n    I=$((i++))\n  done\n  echo \"$i\""], ["#!/bin/bash\n# For a given number n, find the largest number that divides n evenly, smaller than n\n# >>> $(largest_divisor \"15\")\n# \"5\"\n#\n# $1 is an integer\nlargest_divisor() {\n  local n=\"$1\"\n  local largest_divisor\n  for I in $(seq 2 $n); do\n    largest_divisor=$(echo \"$n\" | awk '{print $i}')\n    if [ \"$largest_divisor\" -eq \"$n\" ]; then\n      echo \"$largest_divisor\"\n      return 0\n    fi\n  done\n  echo \"Error: No divisor found\"\n  return 1"], ["#!/bin/bash\n# Return list of prime factors of given integer in the order from smallest to largest.\n# Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n# Input number should be equal to the product of all factors\n# >>> $(factorize \"8\")\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\nfactorize() {\n  local num=\"$1\"\n  local factors=()\n  local factor\n  local count=1\n  local largest=1\n  local smallest=1\n  local factor_count=0\n  local factor_list=()\n  local factor_list_count=0\n  local factor_list_size=0\n  local factor_list_max=0\n  local factor_list_min=0\n  local factor_list_sum=0\n  local factor_list_sum_max=0\n  local factor_list_sum_min=0\n  local factor_list_sum_max_min=0\n  local factor_list_sum_max_min_max=0\n  local factor_list_sum_max_min_max_min=0\n  local factor_list_sum_max_min_max_min_max=0\n  local factor_list_sum_max_min_max_min_max_min=0\n  local factor_list_sum_max_min_max_min_max_min_max=0\n  local factor_list_sum_max_min_max_min_max_min_max_min=0\n  local factor_list_sum_max_min_max_min_max_min_max_min_max=0\n  local factor_list_sum_max_min_max_min_max_min_max_min_max_min=0\n  local factor_list_sum_max_min_max_min_max_min_max_min_max_min_max=0\n  local factor_list_sum_max_min_"], ["#!/bin/bash\n# From a list of integers, remove all elements that occur more than once.\n# Keep order of elements left the same as in the input.\n# >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n# $1 is a space-separated list\nremove_duplicates() {\n  local IFS=$'\\n'\n  local input\n  local output\n  local -a elements\n  local -i count\n\n  # Remove leading and trailing whitespace\n  input=$(echo \"$1\" | tr -d '[:space:]')\n\n  # Split input into an array of elements\n  IFS=$'\\n'\n  IFS=' '\n  elements=($input)\n\n  # Count the number of elements\n  count=0\n  for I in \"${elements[@]}\"; do\n    count=$((count + 1))\n  done\n\n  # Remove elements that occur more than once\n  output=()\n  for I in \"${elements[@]}\"; do\n    if ((count > 1)); then\n      output+=(\"$i\")\n    fi\n  done\n\n  # Keep order of elements left the same as in the input\n  output=(\"${output[@]:1}\")\n\n  # Join output back into a single string\n  output=(\"${output[@]:2}\")\n\n  # Return output\n  echo \"$output\""], ["#!/bin/bash\n# For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n# >>> $(flip_case \"Hello\")\n# \"hELLO\"\n#\n# $1 is a string\nflip_case() {\n  local string=\"$1\"\n  local result=\"\"\n  local I=0\n  local j=0\n  while I<length \"$string\"; do\n    if [[ \"$string\"[i] =~ [[:upper:]][[:lower:]] ]]; then\n      result=\"$result$string[i]\"\n      I=$((i+1))\n    else\n      result=\"$result$string[i]\"\n      j=$((j+1))\n    fi\n  done\n  echo \"$result\""], ["#!/bin/bash\n# Concatenate list of strings into a single string\n# >>> $(concatenate \"\")\n# \"\"\n# >>> $(concatenate \"a b c\")\n# \"abc\"\n#\n# $1 is a space-separated list\nconcatenate() {\n  local I=1\n  local list=\"$1\"\n  local result=\"\"\n  while I -lt ${#list}; do\n    result=\"${result}${list[i]}\"\n    I=$((i+1))\n  done\n  echo \"${result}\""], ["#!/bin/bash\n# Return only positive numbers in the list.\n# >>> $(get_positive \"-1 2 -4 5 6\")\n# ['\"2\"', '\"5\"', '\"6\"']\n# >>> $(get_positive \"5 3 -5 2 -3 3 9 0 123 1 -10\")\n# ['\"5\"', '\"3\"', '\"2\"', '\"3\"', '\"9\"', '\"123\"', '\"1\"']\n#\n# $1 is a space-separated list\nget_positive() {\n  local list=\"$1\"\n  local pos_list=()\n  for num in $list; do\n    if [[ $num =~ ^[+-]?[0-9]+$ ]]; then\n      pos_list+=(\"$num\")\n    fi\n  done\n  echo \"${pos_list[@]}\""], ["#!/bin/bash\n# Return true if a given number is prime, and false otherwise.\n# >>> $(is_prime \"6\")\n# \"false\"\n# >>> $(is_prime \"101\")\n# \"true\"\n# >>> $(is_prime \"11\")\n# \"true\"\n# >>> $(is_prime \"13441\")\n# \"true\"\n# >>> $(is_prime \"61\")\n# \"true\"\n# >>> $(is_prime \"4\")\n# \"false\"\n# >>> $(is_prime \"1\")\n# \"false\"\n#\n# $1 is an integer\nis_prime() {\n  local num=\"$1\"\n  local is_prime=false\n  local I=2\n  while [ $I -lt $(($num/2)) ]; do\n    (( I++ ))\n  done\n  (( num > 1 )) && (( I-- ))\n  if [ $num -eq 1 ]; then\n    is_prime=true\n  fi\n  return $is_prime"], ["#!/bin/bash\n# This function takes a list l and returns a list l' such that\n# l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n# to the values of the corresponding indicies of l, but sorted.\n# >>> $(sort_third \"1 2 3\")\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> $(sort_third \"5 6 3 4 8 9 2\")\n# ['\"2\"', '\"6\"', '\"3\"', '\"4\"', '\"8\"', '\"9\"', '\"5\"']\n#\n# $1 is a space-separated list\nsort_third() {\n  local l=\"$1\"\n  local n=0\n  local l'=\"\"\n  local I=0\n  while I < ${#l}; do\n    local I'=${l:$i:1}\n    if [[ $i -eq 0 || $i -eq 1 || $i -eq 3 || $i -eq 6 || $i -eq 9 || $i -eq 12 || $i -eq 15 || $i -eq 18 || $i -eq 21 ]]; then\n      l'=\"$l'\"\n    else\n      l'=\"$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$l:$i:$"], ["#!/bin/bash\n# Return sorted unique elements in a list\n# >>> $(unique \"5 3 5 2 3 3 9 0 123\")\n# ['\"0\"', '\"2\"', '\"3\"', '\"5\"', '\"9\"', '\"123\"']\n#\n# $1 is a space-separated list\nunique() {\n  local IFS=$'\\n'\n  local list=\"$1\"\n  local sorted_list\n  local I\n  for I in $(echo \"$list\" | tr ' ' '\\n' | sort -V | uniq -c | awk '{print $1}'); do\n    sorted_list+=\" $i\"\n  done\n  echo \"$sorted_list\""], ["#!/bin/bash\n# Return maximum element in the list.\n# >>> $(max_element \"1 2 3\")\n# \"3\"\n# >>> $(max_element \"5 3 -5 2 -3 3 9 0 123 1 -10\")\n# \"123\"\n#\n# $1 is a space-separated list\nmax_element() {\n  local list=\"$1\"\n  local max_val=0\n  local max_idx=0\n  for I in \"${!list[@]}\"; do\n    local val=$((list[i] + 1))\n    if [ \"$val\" -gt \"$max_val\" ]; then\n      max_val=$val\n      max_idx=$i\n    fi\n  done\n  echo \"$max_val\""], ["#!/bin/bash\n# Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n# >>> $(fizz_buzz \"50\")\n# \"0\"\n# >>> $(fizz_buzz \"78\")\n# \"2\"\n# >>> $(fizz_buzz \"79\")\n# \"3\"\n#\n# $1 is an integer\nfizz_buzz() {\n  local n=\"$1\"\n  local fizz=\"\"\n  local buzz=\"\"\n  local fizzbuzz=\"\"\n  local I=2\n  while [ $n -gt 0 ]; do\n    if [ $n -eq 11 ]; then\n      fizzbuzz=\"$fizzbuzz$7\"\n      fizz=\"$fizz$fizzbuzz\"\n      buzz=\"$buzz$fizzbuzz\"\n      fizzbuzz=\"\"\n      fizz=\"$fizz$fizz\"\n      buzz=\"\"\n    elif [ $n -eq 13 ]; then\n      fizzbuzz=\"$fizzbuzz$7\"\n      fizz=\"$fizz$fizzbuzz\"\n      buzz=\"$buzz$fizzbuzz\"\n      fizzbuzz=\"\"\n      fizz=\"$fizz$fizz\"\n      buzz=\"\"\n    else\n      fizz=\"$fizz$n\"\n      buzz=\"$buzz$n\"\n    fi\n    n=$[ $n - 1 ]\n    I=$[ $I + 1 ]\n  done\n  echo \"$fizz\"\n  echo \"$buzz\""], ["#!/bin/bash\n# This function takes a list l and returns a list l' such that\n# l' is identical to l in the odd indicies, while its values at the even indicies are equal\n# to the values of the even indicies of l, but sorted.\n# >>> $(sort_even \"1 2 3\")\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> $(sort_even \"5 6 3 4\")\n# ['\"3\"', '\"6\"', '\"5\"', '\"4\"']\n#\n# $1 is a space-separated list\nsort_even() {\n  local l=\"$1\"\n  local l'\n  local I\n  local I2\n  local I3\n  local I4\n  local I5\n  local I6\n  local I7\n  local I8\n  local I9\n  local I10\n  local I11\n  local I12\n  local I13\n  local I14\n  local I15\n  local I16\n  local I17\n  local I18\n  local I19\n  local I20\n  local I21\n  local I22\n  local I23\n  local I24\n  local I25\n  local I26\n  local I27\n  local I28\n  local I29\n  local I30\n  local I31\n  local I32\n  local I33\n  local I34\n  local I35\n  local I36\n  local I37\n  local I38\n  local I39\n  local I40\n  local I41\n  local I42\n  local I43\n  local I44\n  local I45\n  local I46\n  local I47\n  local I48\n  local I49\n  local I50\n  local I51\n  local I52\n  local I53\n  local I54\n  local I55\n  local I56\n  local I57\n  local I58\n  local I59\n  local I60\n  local I61"], ["#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n# \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib() {\n  local n=\"$1\"\n  local fib\n  if [ \"$n\" -eq 0 ]; then\n    fib=0\n  elif [ \"$n\" -eq 1 ]; then\n    fib=1\n  elif [ \"$n\" -eq 2 ]; then\n    fib=2\n  else\n    fib=3\n    while [ \"$n\" -le \"$(($n-1))\" ]; do\n      fib=$(($fib+$(($n-1))))\n    done\n  fi\n  echo \"$fib\""], ["#!/bin/bash\n# triples_sum_to_zero takes a list of integers as an input.\n# it returns true if there are three distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> $(triples_sum_to_zero \"1 3 5 0\")\n# \"false\"\n# >>> $(triples_sum_to_zero \"1 3 -2 1\")\n# \"true\"\n# >>> $(triples_sum_to_zero \"1 2 3 7\")\n# \"false\"\n# >>> $(triples_sum_to_zero \"2 4 -5 3 9 7\")\n# \"true\"\n# >>> $(triples_sum_to_zero \"1\")\n# \"false\"\n#\n# $1 is a space-separated list\ntriples_sum_to_zero() {\n  local IFS=$'\\n'\n  local list\n  local sum\n  local result\n  local -a elements\n\n  # split the input list into an array of strings\n  IFS=$'\\n' read -ra elements <<< \"$1\"\n\n  # convert each string to an integer\n  IFS=$'\\n' read -ra elements <<< \"$1\"\n\n  # convert each integer to a sum\n  IFS=$'\\n' read -ra elements <<< \"$1\"\n\n  # calculate the sum of all integers in the list\n  sum=0\n  for I in \"${elements[@]}\"; do\n    sum+=\"$i\"\n  done\n\n  # check if the sum of all integers in the list is zero\n  result=false\n  for I in \"${elements[@]}\"; do\n    if (( sum+i == 0 )); then\n      result=true\n      break\n    fi\n  done\n\n  # return the result\n  echo \"$result\""], ["#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long line.\n# n cars are driving left to right;  simultaneously, a different set of n cars\n# are driving right to left.   The two sets of cars start out being very far from\n# each other.  All cars move in the same speed.  Two cars are said to collide\n# when a car that's moving left to right hits a car that's moving right to left.\n# However, the cars are infinitely sturdy and strong; as a result, they continue moving\n# in their trajectory as if they did not collide.\n# This function outputs the number of such collisions.\n#\n# $1 is an integer\ncar_race_collision() {\n  local n=$1\n  local cars\n  cars=$(seq 1 $n)\n  for I in \"${cars[@]}\"; do\n    local left_to_right_car\n    local right_to_left_car\n    local collision_count=0\n    local left_to_right_speed\n    local right_to_left_speed\n    left_to_right_car=$(echo \"$cars\" | awk '{print $i}')\n    right_to_left_car=$(echo \"$cars\" | awk '{print $i+n}')\n    left_to_right_speed=$(echo \"$cars\" | awk '{print $i+1}')\n    right_to_left_speed=$(echo \"$cars\" | awk '{print $i}')\n    if ((left_to_right_car < right_to_left_car)); then\n      left_to_right_car=$((left_to_right_car+n))\n      right_to_left_car=$((right_to_left_car+n))\n      collision_count=$((collision_count+1))\n    fi\n    if ((left_to_right_car > right_to_left_car)); then\n      left_to_right_speed=$((left_to_right_speed-n))\n      right_to_left_speed=$((right_to_left_speed+n))\n      collision_count=$((collision_count+1))\n    fi\n    if ((left_"], ["#!/bin/bash\n# Return list with elements incremented by 1.\n# >>> $(incr_list \"1 2 3\")\n# ['\"2\"', '\"3\"', '\"4\"']\n# >>> $(incr_list \"5 3 5 2 3 3 9 0 123\")\n# ['\"6\"', '\"4\"', '\"6\"', '\"3\"', '\"4\"', '\"4\"', '\"10\"', '\"1\"', '\"124\"']\n#\n# $1 is a space-separated list\nincr_list() {\n  local list=\"$1\"\n  local n=1\n  while IFS= read -r line; do\n    list+=\"${line}\"\n    n=$((n+1))\n  done < <(echo \"$list\")\n  echo \"${list#$n}\""], ["#!/bin/bash\n# pairs_sum_to_zero takes a list of integers as an input.\n# it returns true if there are two distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> $(pairs_sum_to_zero \"1 3 5 0\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"1 3 -2 1\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"1 2 3 7\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"2 4 -5 3 5 7\")\n# \"true\"\n# >>> $(pairs_sum_to_zero \"1\")\n# \"false\"\n#\n# $1 is a space-separated list\npairs_sum_to_zero() {\n  local list=\"$1\"\n  local sum=0\n  local I=1\n  while I<${#list}; do\n    local num=\"$list:$i\"\n    local sum_num=$(echo \"$num\" | awk '{print $1+$2}')\n    if [[ \"$sum_num\" -eq 0 ]]; then\n      echo \"true\"\n      return 0\n    fi\n    sum=$((sum+$sum_num))\n    I=$((i+1))\n  done\n  echo \"false\""], ["#!/bin/bash\n# Change numerical base of input number x to base.\n# return string representation after the conversion.\n# base numbers are less than 10.\n# >>> $(change_base \"8\" \"3\")\n# \"22\"\n# >>> $(change_base \"8\" \"2\")\n# \"1000\"\n# >>> $(change_base \"7\" \"2\")\n# \"111\"\n#\n# $1 is an integer\n# $2 is an integer\nchange_base() {\n  local base=$1\n  shift\n  local num=$1\n  shift\n  local result=\"\"\n  local digit\n  for digit in $(seq 1 $base)\n  do\n    result=\"${result}${num}${digit}\"\n  done\n  echo \"${result}\""], ["#!/bin/bash\n# Given length of a side and high return area for a triangle.\n# >>> $(triangle_area \"5\" \"3\")\n# \"7.5\"\n#\n# $1 is an integer\n# $2 is an integer\ntriangle_area() {\n  local side=\"$1\"\n  local height=\"$2\"\n  local area\n\n  if [[ $side -lt 0 ]]; then\n    echo \"Error: Side must be positive.\"\n    return 1\n  fi\n\n  if [[ $height -lt 0 ]]; then\n    echo \"Error: Height must be positive.\"\n    return 1\n  fi\n\n  area=0\n  if [[ $side -eq $height ]]; then\n    area=$((side * height))\n  else\n    area=$((side * height / 2))\n  fi\n\n  echo \"$area\""], ["#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>> $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\nfib4() {\n  local n=$1\n  local prev=$2\n  local sum\n  if [ $n -eq 0 ]; then\n    echo $prev\n  elif [ $n -eq 1 ]; then\n    echo $prev\n  elif [ $n -eq 2 ]; then\n    echo $prev\n  elif [ $n -eq 3 ]; then\n    echo $prev\n  elif [ $n -eq 4 ]; then\n    echo $prev\n  else\n    sum=0\n    for I in $(seq 1 $n); do\n      sum=$((sum + prev))\n      prev=$sum\n    done\n    echo $sum\n  fi"], ["#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n#\n# $1 is a space-separated list\nmedian() {\n  local -r l=\"$1\"\n  local median\n  if [[ -n \"$l\" ]]; then\n    median=$(echo \"$l\" | tr ' ' '\\n' | sort -n | head -n 1)\n    echo \"$median\"\n  else\n    echo \"Error: list is empty\"\n    exit 1\n  fi"], ["#!/bin/bash\n# Checks if given string is a palindrome\n# >>> $(is_palindrome \"\")\n# \"true\"\n# >>> $(is_palindrome \"aba\")\n# \"true\"\n# >>> $(is_palindrome \"aaaaa\")\n# \"true\"\n# >>> $(is_palindrome \"zbcd\")\n# \"false\"\n#\n# $1 is a string\nis_palindrome() {\n  local string=\"$1\"\n  local reverse_string\n  reverse_string=\"$(echo \"$string\" | tr 'a-z' 'A-Z')\"\n  [[ \"$string\" == \"$reverse_string\" ]]"], ["#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n  local n=$1\n  local p=$2\n  local result\n  local I\n  local I_prev\n  local I_next\n  local I_prev_prev\n  local I_next_next\n  local I_prev_next\n  local I_next_prev\n  local I_prev_next_prev\n  local I_prev_next_next\n  local I_next_next_next\n  local I_prev_next_next_next\n  local I_prev_next_next_next_next\n  local I_prev_next_next_next_next_next\n  local I_prev_next_next_next_next_next_next\n  local I_prev_next_next_next_next_next_next_next\n  local I_prev_next_next_next_next_next_next_next_next\n  local I_prev_next_next_next_next_next_next_next_next\n  local I_prev_next_next_next_next_next_next_next_next\n  local I_prev_next_next_next_next_next_next_next_next\n  local I_prev_next_next_next_next_next_next_next_next\n  local I_prev_next_next_next_next_next_next_next_next\n  local I_prev_next_next_next_next_next_next_next_next\n  local I_prev_next_next_next_next_next_next_next_next\n  local I_prev_next_next_next_next_next_next_next_next"], ["#!/bin/bash\n# remove_vowels is a function that takes string and returns string without vowels.\n# >>> $(remove_vowels \"\")\n# \"\"\n# >>> $(remove_vowels \"abcdef\")\n# \"bcdf\"\n# >>> $(remove_vowels \"aaaaa\")\n# \"\"\n# >>> $(remove_vowels \"aaBAA\")\n# \"B\"\n# >>> $(remove_vowels \"zbcd\")\n# \"zbcd\"\n#\n# $1 is a string\nremove_vowels() {\n  local vowel_count=0\n  local vowel_list=()\n  local vowel_string=\"\"\n  for char in $1; do\n    if [[ $char =~ ^[aeiouAEIOU]$ ]]; then\n      vowel_count=$((vowel_count+1))\n      vowel_list+=($char)\n    fi\n  done\n  if [[ $vowel_count -eq 0 ]]; then\n    vowel_string=\"$(echo $1 | tr '[:upper:]' '[:lower:]')\"\n  else\n    vowel_string=\"$(echo $1 | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]')\"\n  fi\n  echo \"$vowel_string\""], ["#!/bin/bash\n# Return true if all numbers in the list l are below threshold t.\n# >>> $(below_threshold \"1 2 4 10\" \"100\")\n# \"true\"\n# >>> $(below_threshold \"1 20 4 10\" \"5\")\n# \"false\"\n#\n# $1 is a space-separated list\n# $2 is an integer\nbelow_threshold() {\n    local l=$1\n    shift\n    local t=$1\n    local n=0\n    for I in $l; do\n        ((n++))\n        if [[ $i -lt $t ]]; then\n            return 1\n        fi\n    done\n    return 0"], ["#!/bin/bash\n# Add two numbers x and y\n# >>> $(add \"2\" \"3\")\n# \"5\"\n# >>> $(add \"5\" \"7\")\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\nadd() {\n  local x=\"$1\"\n  local y=\"$2\"\n  echo \"$x + $y\""], ["#!/bin/bash\n# Check if two words have the same characters.\n# >>> $(same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n# \"true\"\n# >>> $(same_chars \"abcd\" \"dddddddabc\")\n# \"true\"\n# >>> $(same_chars \"dddddddabc\" \"abcd\")\n# \"true\"\n# >>> $(same_chars \"eabcd\" \"dddddddabc\")\n# \"false\"\n# >>> $(same_chars \"abcd\" \"dddddddabce\")\n# \"false\"\n# >>> $(same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n# \"false\"\n#\n# $1 is a string\n# $2 is a string\nsame_chars() {\n  local word1=\"$1\"\n  local word2=\"$2\"\n  local count=0\n  local I=0\n  local I2=0\n  local I3=0\n  local I4=0\n  local I5=0\n  local I6=0\n  local I7=0\n  local I8=0\n  local I9=0\n  local I10=0\n  local I11=0\n  local I12=0\n  local I13=0\n  local I14=0\n  local I15=0\n  local I16=0\n  local I17=0\n  local I18=0\n  local I19=0\n  local I20=0\n  local I21=0\n  local I22=0\n  local I23=0\n  local I24=0\n  local I25=0\n  local I26=0\n  local I27=0\n  local I28=0\n  local I29=0\n  local I30=0\n  local I31=0\n  local I32=0\n  local I33=0\n  local I34=0\n  local I35=0\n  local I36=0\n  local I37=0\n  local I38"], ["#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an integer\nfib() {\n    local n=\"$1\"\n    if [ \"$n\" -lt 2 ]; then\n        echo \"Error: Fibonacci number must be greater than 2.\"\n        return 1\n    fi\n    local result=0\n    for I in $(seq 1 \"$n\"); do\n        result=$((result + $i))\n    done\n    echo \"$result\""], ["#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n#\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local result=\"\"\n  for I in $(echo \"$brackets\" | tr '>' '<'); do\n    result=\"$result\"$i\n  done\n  echo \"$result\""], ["#!/bin/bash\n# Return true is list elements are monotonically increasing or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n#\n# $1 is a space-separated list\nmonotonic() {\n  local list=\"$1\"\n  local prev_num\n  local prev_prev_num\n  local prev_prev_prev_num\n  local prev_prev_prev_prev_num\n  local prev_prev_prev_prev_prev_num\n  local prev_prev_prev_prev_prev_prev_num\n  local prev_prev_prev_prev_prev_prev_prev_num\n  local prev_prev_prev_prev_prev_prev_prev_prev_num\n  local prev_prev_prev_prev_prev_prev_prev_prev_num\n  local prev_prev_prev_prev_prev_prev_prev_prev_prev_num\n  local prev_prev_prev_prev_prev_prev_prev_prev_prev_num\n  local prev_prev_prev_prev_prev_prev_prev_prev_prev_num\n  local prev_prev_prev_prev_prev_prev_prev_prev_prev_num\n  local prev_prev_prev_prev_prev_prev_prev_prev_prev_num\n  local prev_prev_prev_prev_prev_prev_prev_prev_prev_num\n  local prev_prev_prev_prev_prev_prev_prev_prev_prev_num\n  local prev_prev_prev_prev_prev_prev_prev_prev_prev_num\n  local prev_prev_prev_prev_prev_prev_prev_prev_prev_num\n  local prev_prev_prev_prev_prev_prev_prev_prev_prev_num\n  local prev_prev_prev_prev_prev_prev_prev_prev_prev_num\n  local prev_prev_prev_prev_prev_prev_prev_prev_prev_num\n  local prev_prev_prev_prev"], ["#!/bin/bash\n# Return sorted unique common elements for two lists.\n# >>> $(common \"1 4 3 34 653 2 5\" \"5 7 1 5 9 653 121\")\n# ['\"1\"', '\"5\"', '\"653\"']\n# >>> $(common \"5 3 2 8\" \"3 2\")\n# ['\"2\"', '\"3\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncommon() {\n  local list1 list2\n  local common_list\n  local I\n  local I1\n  local I2\n  local I3\n  local I4\n  local I5\n  local I6\n  local I7\n  local I8\n  local I9\n  local I10\n  local I11\n  local I12\n  local I13\n  local I14\n  local I15\n  local I16\n  local I17\n  local I18\n  local I19\n  local I20\n  local I21\n  local I22\n  local I23\n  local I24\n  local I25\n  local I26\n  local I27\n  local I28\n  local I29\n  local I30\n  local I31\n  local I32\n  local I33\n  local I34\n  local I35\n  local I36\n  local I37\n  local I38\n  local I39\n  local I40\n  local I41\n  local I42\n  local I43\n  local I44\n  local I45\n  local I46\n  local I47\n  local I48\n  local I49\n  local I50\n  local I51\n  local I52\n  local I53\n  local I54\n  local I55\n  local I56\n  local I57\n  local I58\n  local I59\n  local I60\n  local I61\n  local I6"], ["#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local n=\"$1\"\n  local factor=1\n  local max_factor=1\n  local max_factor_index=0\n  local max_factor_count=0\n  local max_factor_string=\"\"\n  local max_factor_string_index=0\n  local max_factor_string_count=0\n  local max_factor_string_index_start=0\n  local max_factor_string_index_end=0\n  local max_factor_string_count_start=0\n  local max_factor_string_count_end=0\n  local max_factor_string_count_start_index=0\n  local max_factor_string_count_end_index=0\n  local max_factor_string_count_start_index_start=0\n  local max_factor_string_count_end_index_start=0\n  local max_factor_string_count_start_index_end=0\n  local max_factor_string_count_end_index_end=0\n  local max_factor_string_count_start_index_end_index=0\n  local max_factor_string_count_end_index_end_index=0\n  local max_factor_string_count_start_index_start_index=0\n  local max_factor_string_count_end_index_start_index_start=0\n  local max_factor_string_count_end_index_start_index_end=0\n  local max_factor_string_count_end_index_end_index_start=0\n  local max_factor_string_count_end_index_end_index_end=0\n  local max_factor_string_count_start_index_start_index_start=0\n  local max_factor_string_count_end_index_start_index_start"], ["#!/bin/bash\n# sum_to_n is a function that sums numbers from 1 to n.\n# >>> $(sum_to_n \"30\")\n# \"465\"\n# >>> $(sum_to_n \"100\")\n# \"5050\"\n# >>> $(sum_to_n \"5\")\n# \"15\"\n# >>> $(sum_to_n \"10\")\n# \"55\"\n# >>> $(sum_to_n \"1\")\n# \"1\"\n#\n# $1 is an integer\nsum_to_n() {\n  local n=\"$1\"\n  local sum=0\n  for I in $(seq 1 \"$n\"); do\n    sum=$((sum + $i))\n  done\n  echo \"$sum\""], ["#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n#\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=\"$1\"\n  local closing_bracket=\"\"\n  for I in $(echo \"$brackets\" | tr '()' '()' | tr ')' '()'); do\n    if [[ \"$i\" == \"$(echo \"$brackets\" | tr '()' '()' | tr ')' '()')\" ]]; then\n      closing_bracket=\"$i\"\n      break\n    fi\n  done\n  if [[ -z \"$closing_bracket\" ]]; then\n    return \"false\"\n  fi\n  return \"true\""], ["#!/bin/bash\n# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2] * x^2 + ....\n# Return derivative of this polynomial in the same form.\n# >>> $(derivative \"3 1 2 4 5\")\n# ['\"1\"', '\"4\"', '\"12\"', '\"20\"']\n# >>> $(derivative \"1 2 3\")\n# ['\"2\"', '\"6\"']\n#\n# $1 is a space-separated list\nderivative() {\n  local xs=\"$1\"\n  local n=0\n  local result=()\n  while [[ $# -gt 0 ]]; do\n    local coefficient=\"$(echo \"$xs\" | awk '{print $1}')\"\n    local exponent=\"$(echo \"$xs\" | awk '{print $2}')\"\n    local derivative=\"$(echo \"$coefficient\" | awk '{print $1}')\"\n    local power=\"$(echo \"$exponent\" | awk '{print $1}')\"\n    shift\n    result+=( \"$derivative\" )\n    shift\n    n=$((n+1))\n  done\n  echo \"${result[@]}\""], ["#!/bin/bash\n# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n# >>> $(fibfib \"1\")\n# \"0\"\n# >>> $(fibfib \"5\")\n# \"4\"\n# >>> $(fibfib \"8\")\n# \"24\"\n#\n# $1 is an integer\nfibfib() {\n  local n=$1\n  local prev=$2\n  local curr=$3\n  local res=\"\"\n  if [ $n -eq 0 ]; then\n    res=\"0\"\n  elif [ $n -eq 1 ]; then\n    res=\"0\"\n  elif [ $n -eq 2 ]; then\n    res=\"0\"\n  elif [ $n -eq 3 ]; then\n    res=\"1\"\n  else\n    prev=$((prev+1))\n    curr=$((curr+prev))\n    res=\"$(echo \"$prev\" | sed \"s/^[0-9]*//\")\"\n    res=\"$res$curr\"\n  fi\n  echo \"$res\""], ["#!/bin/bash\n# Write a function vowels_count which takes a string representing\n# a word as input and returns the number of vowels in the string.\n# Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is at the end of the given word.\n# Example:\n# >>> $(vowels_count \"abcde\")\n# \"2\"\n# >>> $(vowels_count \"ACEDY\")\n# \"3\"\n#\n# $1 is a string\nvowels_count() {\n  local word=\"$1\"\n  local vowels=\"aeiouy\"\n  local count=0\n  for vowel in $vowels; do\n    if [[ $word =~ ^$vowel$ ]]; then\n      count=$((count+1))\n    fi\n  done\n  echo \"$count\""], ["#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits right by shift\n# and return the result as a string.\n# If shift > number of digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\ncircular_shift() {\n  local shift=$1\n  shift=$2\n  local digits=\"$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\"\n  local reversed_digits=\"$(echo \"$digits\" | tr '[:lower:]' '[:upper:]')\"\n  local reversed_digits_reversed=\"$(echo \"$reversed_digits\" | tr '[:upper:]' '[:lower:]')\"\n  local reversed_digits_reverse=\"$(echo \"$reversed_digits_reversed\" | tr '[:lower:]' '[:upper:]')\"\n  local reversed_digits_reverse_reversed=\"$(echo \"$reversed_digits_reverse\" | tr '[:upper:]' '[:lower:]')\"\n  local reversed_digits_reverse_reversed_reversed=\"$(echo \"$reversed_digits_reverse_reversed\" | tr '[:lower:]' '[:upper:]')\"\n  local reversed_digits_reverse_reversed_reversed_reversed=\"$(echo \"$reversed_digits_reverse_reversed_reversed\" | tr '[:upper:]' '[:lower:]')\"\n  local reversed_digits_reverse_reversed_reversed_reversed_reversed=\"$(echo \"$reversed_digits_reverse_reversed_reversed_reversed\" | tr '[:lower:]' '[:upper:]')\"\n  local reversed_digits_reverse_reversed_reversed_reversed_reversed_reversed=\"$(echo \"$reversed_digits_reverse_reversed_reversed_reversed_re"], ["#!/bin/bash\n# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> $(digitSum \"\")\n# \"0\"\n# >>> $(digitSum \"abAB\")\n# \"131\"\n# >>> $(digitSum \"abcCd\")\n# \"67\"\n# >>> $(digitSum \"helloE\")\n# \"69\"\n# >>> $(digitSum \"woArBld\")\n# \"131\"\n# >>> $(digitSum \"aAaaaXa\")\n# \"153\"\n#\n# $1 is a string\ndigitSum() {\n  local I=0\n  local I1=0\n  local I2=0\n  local I3=0\n  local I4=0\n  local I5=0\n  local I6=0\n  local I7=0\n  local I8=0\n  local I9=0\n  local I10=0\n  local I11=0\n  local I12=0\n  local I13=0\n  local I14=0\n  local I15=0\n  local I16=0\n  local I17=0\n  local I18=0\n  local I19=0\n  local I20=0\n  local I21=0\n  local I22=0\n  local I23=0\n  local I24=0\n  local I25=0\n  local I26=0\n  local I27=0\n  local I28=0\n  local I29=0\n  local I30=0\n  local I31=0\n  local I32=0\n  local I33=0\n  local I34=0\n  local I35=0\n  local I36=0\n  local I37=0\n  local I38=0\n  local I39=0\n  local I40=0\n  local I41=0\n  local I42=0\n  local I43=0\n  local I44=0\n  local I45=0"], ["#!/bin/bash\n# In this task, you will be given a string that represents a number of apples and oranges \n# that are distributed in a basket of fruit this basket contains \n# apples, oranges, and mango fruits. Given the string that represents the total number of \n# the oranges and apples and an integer that represent the total number of the fruits \n# in the basket return the number of the mango fruits in the basket.\n# for examble:\n# >>> $(fruit_distribution \"5 apples and 6 oranges\" \"19\")\n# \"8\"\n# >>> $(fruit_distribution \"0 apples and 1 oranges\" \"3\")\n# \"2\"\n# >>> $(fruit_distribution \"2 apples and 3 oranges\" \"100\")\n# \"95\"\n# >>> $(fruit_distribution \"100 apples and 1 oranges\" \"120\")\n# \"19\"\n#\n# $1 is a string\n# $2 is an integer\nfruit_distribution() {\n  local fruit_count apples_count oranges_count mango_count\n  local fruit_string\n  local fruit_count_string\n  local apples_count_string\n  local oranges_count_string\n  local mango_count_string\n\n  fruit_string=$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\n  fruit_count=$(echo \"$fruit_string\" | awk '{print $1}')\n  apples_count=$(echo \"$fruit_string\" | awk '{print $2}')\n  oranges_count=$(echo \"$fruit_string\" | awk '{print $3}')\n  mango_count=$(echo \"$fruit_string\" | awk '{print $4}')\n\n  fruit_count_string=$(echo \"$fruit_count\" | tr '[:upper:]' '[:lower:]')\n  apples_count_string=$(echo \"$apples_count\" | tr '[:upper:]' '[:lower:]')\n  oranges_count_string=$(echo \"$oranges_count\" | tr '[:upper:]' '[:lower:]')\n  mango_count_string=$(echo \"$m"], ["#!/bin/bash\n# \"Given an array representing a branch of a tree that has non-negative integer nodes\n# your task is to pluck one of the nodes and return it.\n# The plucked node should be the node with the smallest even value.\n# If multiple nodes with the same smallest even value are found return the node that has smallest index.\n# The plucked node should be returned in a list, [ smalest_value, its index ],\n# If there are no even values or the given array is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 3:\n# >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n# so we will choose the first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n  local nodes\n  local smallest_value\n  local index\n  local -a nodes_list\n  local -i I\n  local -i j\n  local -i k\n  local -i l\n  local -i m\n  local -i n\n  local -i p\n  local -i q\n  local -i r\n  local -i s\n  local -i t\n  local -i u\n  local -i v\n  local -i w\n  local -i x\n  local -i y\n  local -i z\n  local -i sum\n  local -i sum_index\n  local -i sum_index_2\n "], ["#!/bin/bash\n# You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n# zero, and has a frequency greater than or equal to the value of the integer itself. \n# The frequency of an integer is the number of times it appears in the list.\n# If no such a value exist, return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n# $1 is a space-separated list\nsearch() {\n  local list=\"$1\"\n  local max_int=0\n  local max_frequency=0\n  local max_int_found=false\n  local max_frequency_found=false\n  local max_int_found\n  local max_frequency_found\n  local I\n  for I in $(echo \"$list\" | tr ' ' '\\n' | sort -n | head -n 1); do\n    if [ \"$i\" -gt 0 ]; then\n      max_int_found=true\n      max_int=$i\n      max_frequency_found=true\n      max_frequency=$i\n    fi\n  done\n  if [ \"$max_int_found\" = true ]; then\n    if [ \"$max_frequency_found\" = true ]; then\n      max_int_found=true\n      max_int_found=true\n    else\n      max_int_found=true\n      max_frequency_found=true\n    fi\n  fi\n  if [ \"$max_int_found\" = true ]; then\n    if [ \"$max_frequency_found\" = true ]; then\n      max_int_found=true\n      max_frequency_found=true\n    else\n      max_int_found=true\n      max_frequency_found=true\n    fi\n  fi\n  if [ \"$max_int_found\" = true ]; then\n    if [ \"$max_frequency_found\" = true ]; then\n      max"], ["#!/bin/bash\n# Given list of integers, return list in strange order.\n# Strange sorting, is when you start with the minimum value,\n# then maximum of the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local list=\"$1\"\n  local min_val\n  local max_val\n  local min_idx\n  local max_idx\n  local min_str\n  local max_str\n  local min_str_len\n  local max_str_len\n  local min_str_idx\n  local max_str_idx\n  local min_str_val\n  local max_str_val\n  local min_str_str\n  local max_str_str\n  local min_str_str_len\n  local max_str_str_len\n  local min_str_str_idx\n  local max_str_str_idx\n  local min_str_str_val\n  local max_str_str_val\n  local min_str_str_str\n  local max_str_str_str\n  local min_str_str_str_len\n  local max_str_str_str_len\n  local min_str_str_str_idx\n  local max_str_str_str_idx\n\n  # Split the list into min and max values and indices\n  local min_val=\"\"\n  local max_val=\"\"\n  local min_idx=\"\"\n  local max_idx=\"\"\n  for I in $(echo \"$list\" | tr ' ' '\\n'); do\n    if [ \"$i\" = \" \" ]; then\n      continue\n    fi\n    if [ \"$i\" = \"(\" ]; then\n      min_val=\"$i\"\n      min_idx=\"$i\"\n      continue\n    fi"], ["#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return the area of\n# the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any two sides is greater \n# than the third side.\n# Example:\n# >>> $(triangle_area \"3\" \"4\" \"5\")\n# \"6.0\"\n# >>> $(triangle_area \"1\" \"2\" \"10\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\ntriangle_area() {\n    local sum=$(echo \"$1+$2+$3\" | bc)\n    local diff=$(echo \"$1-$2-$3\" | bc)\n    local area=$(echo \"$sum/2\" | bc)\n    if [[ $area -gt 100 ]]; then\n        echo \"$area\"\n    else\n        echo \"-1\"\n    fi"], ["#!/bin/bash\n# Write a function that returns true if the object q will fly, and false otherwise.\n# The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>> $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\")\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible weight, and it's balanced.\n#\n# $1 is a space-separated list\n# $2 is an integer\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local balanced\n  local sum\n  local max_weight\n  local max_sum\n  local max_sum_weight\n  local max_sum_weight_balanced\n  local max_sum_weight_unbalanced\n  local max_sum_weight_unbalanced_balanced\n  local max_sum_weight_unbalanced_unbalanced\n  local max_sum_weight_unbalanced_unbalanced_balanced\n  local max_sum_weight_unbalanced_unbalanced_balanced_sum\n  local max_sum_weight_unbalanced_unbalanced_balanced_sum_weight\n  local max_sum_weight_unbalanced_unbalanced_balanced_sum_weight_balanced\n  local max_sum_weight_unbalanced_unbalanced_balanced_sum_weight_balanced_sum\n  local max_sum_weight_unbalanced_unbalanced_balanced_sum_weight"], ["#!/bin/bash\n# Given an array arr of integers, find the minimum number of elements that\n# need to be changed to make the array palindromic. A palindromic array is an array that\n# is read the same backwards and forwards. In one change, you can change one element to any other element.\n# For example:\n# >>> $(smallest_change \"1 2 3 5 4 7 9 6\")\n# \"4\"\n# >>> $(smallest_change \"1 2 3 4 3 2 2\")\n# \"1\"\n# >>> $(smallest_change \"1 2 3 2 1\")\n# \"0\"\n#\n# $1 is a space-separated list\nsmallest_change() {\n  local arr=$1\n  local n=0\n  local min_change=0\n  local min_index=0\n  local max_index=0\n  local max_change=0\n  local min_change_count=0\n  local min_index_count=0\n  local max_index_count=0\n  local max_change_count=0\n  local min_change_count=0\n  local min_index_count=0\n  local max_index_count=0\n  local max_change_count=0\n  local min_change_count=0\n  local min_index_count=0\n  local max_index_count=0\n  local max_change_count=0\n  local min_change_count=0\n  local min_index_count=0\n  local max_index_count=0\n  local max_change_count=0\n  local min_change_count=0\n  local min_index_count=0\n  local max_index_count=0\n  local max_change_count=0\n  local min_change_count=0\n  local min_index_count=0\n  local max_index_count=0\n  local max_change_count=0\n  local min_change_count=0\n  local min_index_count=0\n  local max_index_count=0\n  local max_change_count=0\n  local min_change_count=0"], ["#!/bin/bash\n# Write a function that accepts two lists of strings and returns the list that has \n# total number of chars in the all strings of the list less than the other list.\n# if the two lists have the same number of chars, return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n# >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntotal_match() {\n  local list1=$1\n  local list2=$2\n  local total_chars=0\n  local list_chars=()\n  for I in $list1; do\n    local char=$(echo $i | tr '[:upper:]' '[:lower:]')\n    local char_count=$(echo $i | wc -c)\n    if [ $char_count -gt $total_chars ]; then\n      total_chars=$char_count\n      list_chars+=($char)\n    fi\n  done\n  local list_chars_sorted\n  local sorted_chars=()\n  for I in \"${!list_chars[@]}\"; do\n    sorted_chars+=(${list_chars[$i]})\n  done\n  local sorted_chars_sorted\n  local sorted_chars_sorted_index=0\n  local sorted_chars_index=0\n  for I in \"${!sorted_chars[@]}\"; do\n    if [ $sorted_chars_sorted_index -eq $sorted_chars_index ]; then\n      sorted_chars_sorted+=(${sorted_chars[$sorted_chars_sorted_index]})\n    else\n      sorted_chars_sorted+=(${sorted_chars"], ["#!/bin/bash\n# Write a function that returns true if the given number is the multiplication of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100. \n# Example:\n# >>> $(is_multiply_prime \"30\")\n# \"true\"\n# 30 = 2 * 3 * 5\n#\n# $1 is an integer\nis_multiply_prime() {\n  local num=\"$1\"\n  local a=\"2\"\n  local b=\"3\"\n  local c=\"5\"\n  local i=0\n  local is_prime=false\n  while [ $i -lt 100 ]; do\n    if [ $num -eq $i ]; then\n      is_prime=true\n      break\n    fi\n    ((i++))\n  done\n  if [ $is_prime == true ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"], ["#!/bin/bash\n# Your task is to write a function that returns true if a number x is a simple\n# power of n and false in other cases.\n# x is a simple power of n if n**int=x\n# For example:\n# >>> $(is_simple_power \"1\" \"4\")\n# \"true\"\n# >>> $(is_simple_power \"2\" \"2\")\n# \"true\"\n# >>> $(is_simple_power \"8\" \"2\")\n# \"true\"\n# >>> $(is_simple_power \"3\" \"2\")\n# \"false\"\n# >>> $(is_simple_power \"3\" \"1\")\n# \"false\"\n# >>> $(is_simple_power \"5\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n# $2 is an integer\nis_simple_power() {\n  local n=$1\n  local x=$2\n  local int=$((n**x))\n  local result\n\n  if [ $n -eq 0 ]; then\n    result=\"false\"\n  else\n    result=\"true\"\n  fi\n\n  if [ $int -eq $n ]; then\n    result=\"true\"\n  else\n    result=\"false\"\n  fi\n\n  echo \"$result\""], ["#!/bin/bash\n# Write a function that takes an integer a and returns true \n# if this ingeger is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n# >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>> $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  local result\n  result=false\n  if [ \"$a\" -eq \"$a\" ]; then\n    result=true\n  elif [ \"$a\" -lt 0 ]; then\n    result=false\n  else\n    result=$(bc <<< \"scale=2; $a^3\")\n    if [ \"$result\" -eq \"$a\" ]; then\n      result=true\n    fi\n  fi\n  echo \"$result\""], ["#!/bin/bash\n# You have been tasked to write a function that receives \n# a hexadecimal number as a string and counts the number of hexadecimal \n# digits that are primes (prime number, or a prime, is a natural number \n# greater than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\n#\n# $1 is a string\nhex_key() {\n  local hex_str=\"$1\"\n  local count=0\n  local I=0\n  local I2=0\n  local I3=0\n  local I4=0\n  local I5=0\n  local I6=0\n  local I7=0\n  local I8=0\n  local I9=0\n  local I10=0\n  local I11=0\n  local I12=0\n  local I13=0\n  local I14=0\n  local I15=0\n  local I16=0\n  local I17=0\n  local I18=0\n  local I1"], ["#!/bin/bash\n# You will be given a number in decimal form and your task is to convert it to\n# binary format. The function should return a string, with each character representing a binary\n# number. Each character in the string will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n# The extra characters are there to help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an integer\ndecimal_to_binary() {\n  local decimal_num=\"$1\"\n  local binary_string=\"\"\n  local decimal_bit=\"\"\n  local decimal_bit_count=0\n  local decimal_bit_index=0\n  local decimal_bit_string=\"\"\n\n  # Loop through the decimal number, converting each digit to binary\n  for I in $(seq 0 $((decimal_num - 1))); do\n    decimal_bit_index=$((decimal_bit_index + 1))\n    decimal_bit_string=\"${decimal_bit_string}${decimal_num:$decimal_bit_index:1}\"\n    decimal_bit_count=$((decimal_bit_count + 1))\n    if ((decimal_bit_count == 8)); then\n      binary_string=\"${binary_string}${decimal_bit_string}\"\n      decimal_bit_string=\"\"\n      decimal_bit_index=0\n      decimal_bit_count=0\n    fi\n  done\n\n  # Add the extra 'db' characters at the beginning and end of the string\n  binary_string=\"${binary_string}${db}\"\n  binary_string=\"${binary_string}${db}\"\n\n  # Return the binary string\n  echo \"$binary_string\""], ["#!/bin/bash\n# You are given a string s.\n# Your task is to check if the string is hapsh or not.\n# A string is hapsh if its length is at least 3 and every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy \"a\")\n# \"false\"\n# >>> $(is_happy \"aa\")\n# \"false\"\n# >>> $(is_happy \"abcd\")\n# \"true\"\n# >>> $(is_happy \"aabb\")\n# \"false\"\n# >>> $(is_happy \"adb\")\n# \"true\"\n# >>> $(is_happy \"xyy\")\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local string=$1\n  local length=$(echo \"$string\" | wc -c)\n  local first=$(echo \"$string\" | head -n 1)\n  local last=$(echo \"$string\" | tail -n 1)\n  local first_length=$(echo \"$first\" | wc -c)\n  local last_length=$(echo \"$last\" | wc -c)\n  local first_distinct=$(echo \"$first\" | grep -c \"$first\")\n  local last_distinct=$(echo \"$last\" | grep -c \"$last\")\n  local first_distinct_length=$(echo \"$first\" | grep -c \"$first\" | awk '{print $1}')\n  local last_distinct_length=$(echo \"$last\" | grep -c \"$last\" | awk '{print $1}')\n  local first_distinct_length_minus_last_distinct_length=$(echo \"$first_distinct_length\" - \"$last_distinct_length\")\n  local first_distinct_length_minus_first_length=$(echo \"$first_distinct_length\" - \"$first_length\")\n  local last_distinct_length_minus_first_length=$(echo \"$last_distinct_length\" - \"$first_length\")\n  local first_distinct_length_minus_last_length=$(echo \"$first_distinct_length\" - \"$last_length\")\n  local first_distinct_length_minus_last_distinct_length=$(echo \"$first_distinct_"], ["#!/bin/bash\n# It is the last week of the semester and the teacher has to give the grades\n# to students. The teacher has been making her own algorithm for grading.\n# The only problem is, she has lost the code she used for grading.\n# She has given you a list of GPAs for some students and you have to write \n# a function that can output a list of letter grades using the following table:\n# GPA       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7                B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7                C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n# >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n    local grade=$1\n    local letter_grade\n    if [[ $grade -lt 3.7 ]]; then\n        letter_grade=\"A+\"\n    elif [[ $grade -lt 3.3 ]]; then\n        letter_grade=\"A\"\n    elif [[ $grade -lt 3.0 ]]; then\n        letter_grade=\"A-\"\n    elif [[ $grade -lt 2.7 ]]; then\n        letter_grade=\"B+\"\n    elif [[ $grade -lt 2.3 ]]; then\n        letter_grade=\"B\"\n    elif [[ $grade -lt 2.0 ]]; then\n        letter_grade=\"B-\"\n    elif [[ $grade -lt 1.7 ]]; then\n        letter_grade=\"C+\"\n    elif [[ $grade -lt 1.3 ]]; then\n        letter_grade=\"C\"\n    elif"], ["#!/bin/bash\n# Write a function that takes a string and returns true if the string\n# length is a prime number or false otherwise\n# Examples\n# >>> $(prime_length \"Hello\")\n# \"true\"\n# >>> $(prime_length \"abcdcba\")\n# \"true\"\n# >>> $(prime_length \"kittens\")\n# \"true\"\n# >>> $(prime_length \"orange\")\n# \"false\"\n#\n# $1 is a string\nprime_length() {\n  local string=$1\n  local count=0\n  local is_prime=false\n\n  # Loop through each character in the string\n  for I in $(seq 1 $#); do\n    # Check if the current character is a digit\n    if [[ $string =~ ^[0-9]$ ]]; then\n      # If the current character is a digit, increment the count\n      ((count++))\n    fi\n    # If the current character is not a digit, check if it is a prime number\n    elif [[ $string =~ ^[1-9][0-9]*$ ]]; then\n      # If the current character is a prime number, set the is_prime variable to true\n      is_prime=true\n    fi\n  done\n\n  # Return the result based on the is_prime variable\n  if [[ $is_prime ]]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"], ["#!/bin/bash\n# Given a positive integer n, return the count of the numbers of n-digit\n# positive integers that start or end with 1.\n#\n# $1 is an integer\nstarts_one_ends() {\n  local n=\"$1\"\n  local start_pos=\"\"\n  local end_pos=\"\"\n  local count=0\n  while [[ $n -gt 0 ]]; do\n    (( n-- ))\n    (( start_pos = $n % 10 ))\n    (( end_pos = (n / 10) % 10 ))\n    (( count++ ))\n    echo \"$start_pos $end_pos $count\"\n  done"], ["#!/bin/bash\n# Given a positive integer N, return the total sum of its digits in binary.\n# Example\n# >>> $(solve \"1000\")\n# \"1\"\n# >>> $(solve \"150\")\n# \"110\"\n# >>> $(solve \"147\")\n# \"1100\"\n# Variables:\n# @N integer\n# Constraints: 0 \u2264 N \u2264 10000.\n# Output:\n# a string of binary number\n#\n# $1 is an integer\nsolve() {\n  local N=$1\n  local sum=0\n  for I in $(seq 0 $((N-1))); do\n    sum+=$(printf \"%b\" $((2**$i)))\n  done\n  echo \"$sum\""], ["#!/bin/bash\n# Given a non-empty list of integers lst. add the even elements that are at odd indices..\n# Examples:\n# >>> $(add \"4 2 6 7\")\n# \"2\"\n#\n# $1 is a space-separated list\nadd() {\n  local lst=$1\n  local even=0\n  for I in $(seq 1 $#); do\n    local num=${lst:$i:1}\n    if (( $i % 2 == 1 )); then\n      even=$(( even + num ))\n    fi\n  done\n  echo $even"], ["#!/bin/bash\n# Write a function that takes a string and returns an ordered version of it.\n# Ordered version of string, is a string where all words (separated by space)\n# are replaced by a new word where all the characters arranged in\n# ascending order based on ascii value.\n# Note: You should keep the order of words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\nanti_shuffle() {\n  local string=$1\n  local sorted_string=\"\"\n  local I=0\n  local j=0\n  local word=\"\"\n  local new_word=\"\"\n  local ascii_value=\"\"\n\n  # Loop through each character in the string\n  for I in $(seq 1 $((strlen($1) - 1))); do\n    # Check if the character is a letter\n    if [[ $string[$i] =~ ^[a-zA-Z]+$ ]]; then\n      # If it is, check if it is a word\n      if [[ $string[$i] =~ ^[a-zA-Z]+$ ]]; then\n        # If it is, add it to the sorted string\n        sorted_string+=\"$string[$i]\"\n      else\n        # If it is not a word, add it to the new_word\n        new_word+=\"$string[$i]\"\n      fi\n    else\n      # If it is not a letter, add it to the ascii_value\n      ascii_value+=\"$string[$i]\"\n    fi\n  done\n\n  # Loop through each character in the sorted string\n  for I in $(seq 0 $((strlen($sorted_string) - 1))); do\n    # Check if the character is a letter\n    if [[ $sorted_string[$i] =~ ^[a-zA-Z]+$ ]]; then\n      # If it is, check if it is a word\n      if [[ $sorted_string[$i] =~ ^[a-zA-Z]+$"], ["#!/bin/bash\n# You are given a 2 dimensional data, as a nested lists,\n# which is similar to matrix, however, unlike matrices,\n# each row may contain a different number of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return list of lists, [(x1, y1), (x2, y2) ...] such that\n# each list is a coordinate - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending order.\n# Also, sort coordinates of the row by columns in descending order.\n# Examples:\n# >>> $(get_row \"1 2 3 4 5 6\\n1 2 3 4 1 6\\n1 2 3 4 5 1\" \"1\")\n# [['\"0\"', '\"0\"'], ['\"1\"', '\"4\"'], ['\"1\"', '\"0\"'], ['\"2\"', '\"5\"'], ['\"2\"', '\"0\"']]\n# >>> $(get_row \"\" \"1\")\n# []\n# >>> $(get_row \"\\n1\\n1 2 3\" \"3\")\n# [['\"2\"', '\"2\"']]\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nget_row() {\n  local lst=\"$1\"\n  local x=\"$2\"\n  local row_idx=0\n  local col_idx=0\n  local sorted_lst\n  local sorted_lst_idx\n  local sorted_lst_row\n  local sorted_lst_col\n  local sorted_lst_row_idx\n  local sorted_lst_col_idx\n  local sorted_lst_row_col\n  local sorted_lst_row_col_idx\n  local sorted_lst_row_col_idx_2\n  local sorted_lst_row_col_idx_3\n  local sorted_lst_row_col_idx_4\n  local sorted_lst_row_col_idx_5\n  local sorted_lst_row_col_idx_6\n  local sorted_lst_row_col_idx_7\n  local sorted_lst_row_col"], ["#!/bin/bash\n# Given an array of non-negative integers, return a cosh of the given array after sorting,\n# you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n# or sort it in descending order if the sum( first index value, last index value) is even.\n# Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"', '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local arr=\"$1\"\n  local sorted_arr\n  local sum\n  local even_sum\n  local odd_sum\n  local sorted_arr_len\n  local sorted_arr_index\n  local sorted_arr_index_end\n  local sorted_arr_index_start\n  local sorted_arr_index_end_index\n  local sorted_arr_index_start_index\n  local sorted_arr_index_end_index\n  local sorted_arr_index_start_index_end\n  local sorted_arr_index_start_index_end_index\n  local sorted_arr_index_start_index_end_index_end\n  local sorted_arr_index_start_index_end_index_end_index\n  local sorted_arr_index_start_index_end_index_end_index_end\n  local sorted_arr_index_start_index_end_index_end_index_end_index\n  local sorted_arr_index_start_index_end_index_end_index_end_index_end\n  local sorted_arr_index_start_index_end_index_end_index_end_index_end"], ["#!/bin/bash\n# Create a function encrypt that takes a string as an argument and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet should be rotated in a manner such that the letters \n# shift down by two multiplied to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  local alphabet=\"$1\"\n  local shift=\"$(echo \"$alphabet\" | tr '[:upper:]' '[:lower:]' | tr '[:digit:]' '[:digit:]' | tr '[:alpha:]' '[:alpha:]' | tr '[:punct:]' '[:punct:]' | tr '[:space:]' '[:space:]')\"\n  local shift_2=\"$(echo \"$shift\" | tr '[:upper:]' '[:lower:]' | tr '[:digit:]' '[:digit:]' | tr '[:alpha:]' '[:alpha:]' | tr '[:punct:]' '[:punct:]' | tr '[:space:]' '[:space:]')\"\n  local shift_3=\"$(echo \"$shift_2\" | tr '[:upper:]' '[:lower:]' | tr '[:digit:]' '[:digit:]' | tr '[:alpha:]' '[:alpha:]' | tr '[:punct:]' '[:punct:]' | tr '[:space:]' '[:space:]')\"\n  local shift_4=\"$(echo \"$shift_3\" | tr '[:upper:]' '[:lower:]' | tr '[:digit:]' '[:digit:]' | tr '[:alpha:]' '[:alpha:]' | tr '[:punct:]' '[:punct:]' | tr '[:space:]' '[:space:]')\"\n  local shift_5=\"$(echo \"$shift_4\" | tr '[:upper:]' '[:lower:]' | tr '[:digit:]' '[:digit:]' | tr '[:alpha:]' '[:alpha:]' | tr '[:punct"], ["#!/bin/bash\n# You are given a list of integers.\n# Write a function next_smallest() that returns the 2nd smallest element of the list.\n# Return None if there is no such element.\n# >>> $(next_smallest \"1 2 3 4 5\")\n# \"2\"\n# >>> $(next_smallest \"5 1 4 3 2\")\n# \"2\"\n# >>> $(next_smallest \"\")\n# \"None\"\n# >>> $(next_smallest \"1 1\")\n# \"None\"\n#\n# $1 is a space-separated list\nnext_smallest() {\n  local list=$1\n  local min_idx=0\n  local min_val=0\n  local max_idx=0\n  local max_val=0\n  for I in $(seq 1 $((len=$#list))); do\n    local val=$list[$i]\n    if [ $i -eq $min_idx ]; then\n      min_val=$val\n      min_idx=$i\n    elif [ $i -eq $max_idx ]; then\n      max_val=$val\n      max_idx=$i\n    fi\n  done\n  if [ $min_idx -eq $max_idx ]; then\n    echo \"None\"\n  else\n    echo \"$(($max_val+1))\"\n  fi"], ["#!/bin/bash\n# You'll be given a string of words, and your task is to count the number\n# of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences are delimited by '.', '?' or '!'.\n# For example:\n# >>> $(is_bored \"Hello world\")\n# \"0\"\n# >>> $(is_bored \"The sky is blue. The sun is shining. I love this weather\")\n# \"1\"\n#\n# $1 is a string\nis_bored() {\n  local word=\"$1\"\n  local boredoms=0\n  for word in \"$@\"; do\n    if [[ \"$word\" == \"I\" ]]; then\n      boredoms=$((boredoms+1))\n    fi\n  done\n  echo \"$boredoms\""], ["#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"-2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n# $3 is a floating point\nany_int() {\n  local num1=$1\n  local num2=$2\n  local num3=$3\n  local num4=$4\n  local num5=$5\n  local num6=$6\n  local num7=$7\n\n  if [[ $num1 -le 0 || $num1 -gt 1000000000 ]]; then\n    return \"false\"\n  fi\n\n  if [[ $num2 -le 0 || $num2 -gt 1000000000 ]]; then\n    return \"false\"\n  fi\n\n  if [[ $num3 -le 0 || $num3 -gt 1000000000 ]]; then\n    return \"false\"\n  fi\n\n  if [[ $num4 -le 0 || $num4 -gt 1000000000 ]]; then\n    return \"false\"\n  fi\n\n  if [[ $num5 -le 0 || $num5 -gt 1000000000 ]]; then\n    return \"false\"\n  fi\n\n  if [[ $num6 -le 0 || $num6 -gt 1000000000 ]]; then\n    return \"false\"\n  fi\n\n  if [[ $num7 -le 0 || $num7 -gt 1000000000 ]]; then\n    return \"false\"\n  fi\n\n"], ["#!/bin/bash\n# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> $(encode \"test\")\n# \"TGST\"\n# >>> $(encode \"This is a message\")\n# \"tHKS KS C MGSSCGG\"\n#\n# $1 is a string\nencode() {\n  local message=$1\n  local vowel_replacement=\"\"\n  local vowel_index=\"\"\n  local vowel_count=0\n  local vowel_replacement_index=\"\"\n  local vowel_replacement_count=0\n  local vowel_replacement_index_2=\"\"\n  local vowel_replacement_count_2=0\n  local vowel_replacement_index_3=\"\"\n  local vowel_replacement_count_3=0\n  local vowel_replacement_index_4=\"\"\n  local vowel_replacement_count_4=0\n  local vowel_replacement_index_5=\"\"\n  local vowel_replacement_count_5=0\n  local vowel_replacement_index_6=\"\"\n  local vowel_replacement_count_6=0\n  local vowel_replacement_index_7=\"\"\n  local vowel_replacement_count_7=0\n  local vowel_replacement_index_8=\"\"\n  local vowel_replacement_count_8=0\n  local vowel_replacement_index_9=\"\"\n  local vowel_replacement_count_9=0\n  local vowel_replacement_index_10=\"\"\n  local vowel_replacement_count_10=0\n  local vowel_replacement_index_11=\"\"\n  local vowel_replacement_count_11=0\n  local vowel_replacement_index_12=\"\"\n  local vowel_replacement_count_12=0\n  local vowel_replacement_index_13=\"\"\n  local vowel"], ["#!/bin/bash\n# You are given a list of integers.\n# You need to find the largest prime value and return the sum of its digits.\n# Examples:\n# >>> $(skjkasdkd \"0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3\")\n# \"10\"\n# >>> $(skjkasdkd \"1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1\")\n# \"25\"\n# >>> $(skjkasdkd \"1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3\")\n# \"13\"\n# >>> $(skjkasdkd \"0 724 32 71 99 32 6 0 5 91 83 0 5 6\")\n# \"11\"\n# >>> $(skjkasdkd \"0 81 12 3 1 21\")\n# \"3\"\n# >>> $(skjkasdkd \"0 8 1 2 1 7\")\n# \"7\"\n#\n# $1 is a space-separated list\nskjkasdkd() {\n  local list=\"$1\"\n  local sum=0\n  local max=0\n  local I=0\n  while I < $(echo \"$list\" | wc -l); do\n    local num=$(echo \"$list\" | sed -n \"$I\"p)\n    local is_prime=false\n    for I in $(seq 2 \"$(echo \"$num\" | wc -l)\"); do\n      local I_num=$(echo \"$num\" | sed -n \"$I\"p)\n      if [ \"$num\" -eq \"$i_num\" ]; then\n        is_prime=true\n        break\n      fi\n    done\n    if [ \"$is_prime\" = true ]; then"], ["#!/bin/bash\n# Given a CSV, return true if all keys are strings in lower \n# case or all keys are strings in upper case, else return false.\n# The function should return false is the given CSV is empty.\n# Examples:\n# >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\")\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local csv=\"$1\"\n  local expected_case\n  local actual_case\n  local key\n  local value\n  local line\n  local line_count=0\n  local error=false\n\n  # Check if CSV is empty\n  if [[ -z \"$csv\" ]]; then\n    echo \"Error: CSV is empty\"\n    return 1\n  fi\n\n  # Split CSV into key,value pairs\n  IFS=',' read -r -a keys <<< \"$csv\"\n  IFS=',' read -r -a values <<< \"$csv\"\n\n  # Loop through each line\n  for line in \"${values[@]}\"; do\n    # Split line into key,value pairs\n    IFS=':' read -r -a key_value <<< \"$line\"\n\n    # Check if key is a string in lower case or upper case\n    if [[ \"${key_value[0]}\" =~ ^[a-z]+$ ]]; then\n      expected_case=\"${key_value[0]}\"\n    else\n      expected_case=\"$(echo \"${key_value[0]}\" | tr '[:upper:]' '[:lower:]')\"\n    fi\n\n    # Check if value is a string in lower case or upper case\n    if [[ \"${key_value[1]"], ["#!/bin/bash\n# Implement a function that takes an non-negative integer and returns an array of the first n\n# integers that are prime numbers and less than n.\n# for example:\n# >>> $(count_up_to \"5\")\n# ['\"2\"', '\"3\"']\n# >>> $(count_up_to \"11\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"']\n# >>> $(count_up_to \"0\")\n# []\n# >>> $(count_up_to \"20\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"', '\"11\"', '\"13\"', '\"17\"', '\"19\"']\n# >>> $(count_up_to \"1\")\n# []\n# >>> $(count_up_to \"18\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"', '\"11\"', '\"13\"', '\"17\"']\n#\n# $1 is an integer\ncount_up_to() {\n  local n=\"$1\"\n  local arr=()\n  local I=2\n  while [ $I -lt $n ]; do\n    if [ $I -eq 2 ]; then\n      arr+=(\"$I\")\n    elif [ $i -lt $n -a $i -lt $n/2 ]; then\n      arr+=( \"$i\" )\n    fi\n    I=$((i+1))\n  done\n  echo \"${arr[*]}\""], ["#!/bin/bash\n# Complete the function that takes two integers and returns \n# the product of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# >>> $(multiply \"148\" \"412\")\n# \"16\"\n# >>> $(multiply \"19\" \"28\")\n# \"72\"\n# >>> $(multiply \"2020\" \"1851\")\n# \"0\"\n# >>> $(multiply \"14\" \"-15\")\n# \"20\"\n#\n# $1 is an integer\n# $2 is an integer\nmultiply() {\n  local num1=$1\n  local num2=$2\n  local result=0\n  local digit1\n  local digit2\n  local digit1_index\n  local digit2_index\n  local digit1_count\n  local digit2_count\n  local digit1_product\n  local digit2_product\n  local digit1_sum\n  local digit2_sum\n  local digit1_sum_index\n  local digit2_sum_index\n  local digit1_sum_count\n  local digit2_sum_count\n  local digit1_product_index\n  local digit2_product_index\n  local digit1_product_sum\n  local digit2_product_sum\n  local digit1_product_count\n  local digit2_product_count\n  local digit1_product_sum_index\n  local digit2_product_sum_index\n  local digit1_product_sum_count\n  local digit2_product_sum_count\n  local digit1_product_product\n  local digit2_product_product\n  local digit1_product_product_index\n  local digit2_product_product_index\n  local digit1_product_product_sum\n  local digit2_product_product_sum\n  local digit1_product_product_count\n  local digit2_product_product_count\n  local digit1_product_product_sum_index\n  local digit2_product_product_sum_index\n  local digit1_product_product_sum_count\n  local digit2_product_product_sum_count\n\n  # Check if the input is valid"], ["#!/bin/bash\n# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\n# >>> $(count_upper \"aBCdEf\")\n# \"1\"\n# >>> $(count_upper \"abcdefg\")\n# \"0\"\n# >>> $(count_upper \"dBBE\")\n# \"0\"\n#\n# $1 is a string\ncount_upper() {\n    local I=0\n    local I2=0\n    local I3=0\n    local I4=0\n    local I5=0\n    local I6=0\n    local I7=0\n    local I8=0\n    local I9=0\n    local I10=0\n    local I11=0\n    local I12=0\n    local I13=0\n    local I14=0\n    local I15=0\n    local I16=0\n    local I17=0\n    local I18=0\n    local I19=0\n    local I20=0\n    local I21=0\n    local I22=0\n    local I23=0\n    local I24=0\n    local I25=0\n    local I26=0\n    local I27=0\n    local I28=0\n    local I29=0\n    local I30=0\n    local I31=0\n    local I32=0\n    local I33=0\n    local I34=0\n    local I35=0\n    local I36=0\n    local I37=0\n    local I38=0\n    local I39=0\n    local I40=0\n    local I41=0\n    local I42=0\n    local I43=0\n    local I44=0\n    local I45=0\n    local I46=0\n    local I47=0\n    local I48=0\n    local I49=0\n    local I50=0\n    local I51=0\n    local I52=0\n    local I53=0"], ["#!/bin/bash\n# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local num=\"$1\"\n  local closest_num\n  local closest_distance\n  local closest_distance_str\n  local closest_distance_num\n  local closest_distance_str_num\n  local closest_distance_str_num_str\n  local closest_distance_str_num_str_num\n  local closest_distance_str_num_str_num_str\n\n  # Check if the input is a valid integer\n  if [[ $num =~ ^[-+]?[0-9]*$ ]]; then\n    # Split the input string into three parts: num, num_str, num_str_num\n    num_str=$(echo \"$num\" | tr '[:upper:]' '[:lower:]')\n    num_str_num=$(echo \"$num_str\" | tr '[:upper:]' '[:lower:]')\n    num_str_num_str=$(echo \"$num_str_num\" | tr '[:upper:]' '[:lower:]')\n    # Calculate the closest integer to the input string\n    closest_num=$(echo \"$num_str_num_str\" | awk '{print $1}')\n    # Calculate the distance between the closest integer and the two integers\n    closest_distance=$(echo \"$num_str_num_str\" | awk '{print $2}')\n    # Check if the distance is less than or equal to zero\n    if [[ $closest_distance -lt 0 ]];"], ["#!/bin/bash\n# Given a positive integer n, you have to make a pile of n levels of stones.\n# The first level has n stones.\n# The number of stones in the next level is:\n# - the next odd number if n is odd.\n# - the next even number if n is even.\n# Return the number of stones in each level in a list, where element at index\n# i represents the number of stones in the level (i+1).\n# Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local result=()\n  local level=0\n  local stone\n  for ((i=1; I<=${n}; i++)); do\n    if ((i%2==1)); then\n      stone=$((i+1))\n    else\n      stone=$((i+1))\n      stone=$((stone+1))\n    fi\n    result+=( \"$stone\" )\n  done\n  echo \"${result[@]}\""], ["#!/bin/bash\n# You will be given a string of words separated by commas or spaces. Your task is\n# to split the string into words and return an array of the words.\n# For example:\n# >>> $(words_string \"Hi, my name is John\")\n# ['\"Hi\"', '\"my\"', '\"name\"', '\"is\"', '\"John\"']\n# >>> $(words_string \"One, two, three, four, five, six\")\n# ['\"One\"', '\"two\"', '\"three\"', '\"four\"', '\"five\"', '\"six\"']\n#\n# $1 is a string\nwords_string() {\n  local IFS=$'\\n'\n  local -a words\n  IFS=$'\\n'\n  while IFS= read -r line; do\n    words+=(\"$line\")\n  done < <(echo \"$1\")\n  IFS=$'\\n'\n  echo \"${words[*]}\""], ["#!/bin/bash\n# This function takes two positive numbers x and y and returns the\n# biggest even integer number that is in the range [x, y] inclusive. If \n# there's no such number, then the function should return -1.\n# For example:\n# >>> $(choose_num \"12\" \"15\")\n# \"14\"\n# >>> $(choose_num \"13\" \"12\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n    local x=$1\n    local y=$2\n    local max_num\n    local max_num_str\n    local max_num_str_len\n    local max_num_str_pos\n    local max_num_str_end\n    local max_num_str_pos_end\n    local max_num_str_pos_start\n    local max_num_str_pos_end_str\n    local max_num_str_pos_end_num\n    local max_num_str_pos_start_num\n    local max_num_str_pos_start_num_str\n    local max_num_str_pos_start_num_str_end\n    local max_num_str_pos_start_num_str_end_str\n    local max_num_str_pos_start_num_str_end_num\n    local max_num_str_pos_start_num_str_end_num_str\n    local max_num_str_pos_start_num_str_end_num_str_end\n    local max_num_str_pos_start_num_str_end_num_str_end_str\n    local max_num_str_pos_start_num_str_end_num_str_end_num\n    local max_num_str_pos_start_num_str_end_num_str_end_num_str\n    local max_num_str_pos_start_num_str_end_num_str_end_num_str_end\n\n    # Check if the input values are valid\n    if [[ $x -lt 1 || $y -lt 1 ]]; then\n        return -"], ["#!/bin/bash\n# You are given two positive integers n and m, and your task is to compute the\n# average of the integers from n through m (including n and m). \n# Round the answer to the nearest integer and convert that to binary.\n# If n is greater than m, return -1.\n# Example:\n# >>> $(rounded_avg \"1\" \"5\")\n# \"0b11\"\n# >>> $(rounded_avg \"7\" \"5\")\n# \"-1\"\n# >>> $(rounded_avg \"10\" \"20\")\n# \"0b1111\"\n# >>> $(rounded_avg \"20\" \"33\")\n# \"0b11010\"\n#\n# $1 is an integer\n# $2 is an integer\nrounded_avg() {\n  local n=$1\n  local m=$2\n  local avg\n  local decimal_avg\n  local decimal_avg_str\n  local decimal_avg_bin\n  local decimal_avg_bin_str\n  local decimal_avg_bin_str_reverse\n  local decimal_avg_bin_str_reverse_str\n  local decimal_avg_bin_str_reverse_reverse\n  local decimal_avg_bin_str_reverse_reverse_str\n  local decimal_avg_bin_str_reverse_reverse_reverse\n  local decimal_avg_bin_str_reverse_reverse_reverse_str\n  local decimal_avg_bin_str_reverse_reverse_reverse_reverse_str\n  local decimal_avg_bin_str_reverse_reverse_reverse_reverse_reverse_str\n  local decimal_avg_bin_str_reverse_reverse_reverse_reverse_reverse_reverse_str\n  local decimal_avg_bin_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_str\n  local decimal_avg_bin_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_str\n  local decimal_avg_bin_str_reverse_reverse_reverse_reverse_reverse_reverse_reverse_str\n  local decimal_avg_bin_str_reverse_reverse_reverse_"], ["#!/bin/bash\n# Given a list of positive integers x. return a sorted list of all \n# elements that hasn't any even digit.\n# Note: Returned list should be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local list=\"$1\"\n  local digits=\"\"\n  local I=2\n  while I <= $(( $# - 1 ))\n  do\n    digits=\"${digits}${list:i:1}\"\n    I=$(( I + 1 ))\n  done\n  echo \"${digits// /}\""], ["#!/bin/bash\n# Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n# reverse the resulting array, and then replace each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"']\n#\n# $1 is a space-separated list\nby_length() {\n  local arr=\"$1\"\n  local len=${#arr}\n  local name\n  local I=0\n  local j=0\n  local k=0\n  local l=0\n  local r=0\n  local r2=0\n  local r3=0\n  local r4=0\n  local r5=0\n  local r6=0\n  local r7=0\n  local r8=0\n  local r9=0\n  local r10=0\n  local r11=0\n  local r12=0\n  local r13=0\n  local r14=0\n  local r15=0\n  local r16=0\n  local r17=0\n  local r18=0\n  local r19=0\n  local r20=0\n  local r21=0\n  local r22=0\n  local r23=0\n  local r24=0\n  local r25=0\n  local r26=0\n  local r27=0\n  local r28=0\n  local r29=0\n  local r30=0\n  local r31=0\n  local r32=0"], ["#!/bin/bash\n# Implement the function f that takes n as a parameter,\n# and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n# i starts from 1.\n# the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n# Example:\n# >>> $(f \"5\")\n# ['\"1\"', '\"2\"', '\"6\"', '\"24\"', '\"15\"']\n#\n# $1 is an integer\nf() {\n  local n=\"$1\"\n  local arr=()\n  local I=1\n  while [ $I -le $n ]; do\n    arr+=( \"$(printf '%d' \"$(($i * $i))\")\" )\n    I=$((i+1))\n  done\n  echo \"${arr[*]}\""], ["#!/bin/bash\n# Given a positive integer n, return a list that has the number of even and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n# Example 1:\n# >>> $(even_odd_palindrome \"3\")\n# ['\"1\"', '\"2\"']\n# Explanation:\n# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# >>> $(even_odd_palindrome \"12\")\n# ['\"4\"', '\"6\"']\n# Explanation:\n# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n# 1. 1 <= n <= 10^3\n# 2. returned list has the number of even and odd integer palindromes respectively.\n#\n# $1 is an integer\neven_odd_palindrome() {\n  local n=\"$1\"\n  local even_palindromes=\"\"\n  local odd_palindromes=\"\"\n  local even_palindromes_count=0\n  local odd_palindromes_count=0\n  for I in $(seq 1 $n); do\n    local even_palindrome=$(echo \"$i\" | tr '[a-z]' '[A-Z]')\n    local odd_palindrome=$(echo \"$i\" | tr '[a-z]' '[A-Z]')\n    if [[ \"$even_palindrome\" =~ ^[0-9]+$ ]]; then\n      if [[ \"$even_palindrome\" =~ ^[0-9]+$ ]]; then\n        even_palindromes_count++\n      else\n        odd_palindromes_count++\n      fi\n    fi\n    if [[ \"$odd_palindrome\" =~ ^[0-9]+$ ]]; then\n      if [[ \"$odd_palindrome\" =~ ^[0-9]+$ ]]; then\n        odd_palindromes_count"], ["#!/bin/bash\n# Write a function count_nums which takes an array of integers and returns\n# the number of elements which has a sum of digits > 0.\n# If a number is negative, then its first signed digit will be negative:\n# e.g. -123 has signed digits -1, 2, and 3.\n# >>> $(count_nums \"\")\n# \"0\"\n# >>> $(count_nums \"-1 11 -11\")\n# \"1\"\n# >>> $(count_nums \"1 1 2\")\n# \"3\"\n#\n# $1 is a space-separated list\ncount_nums() {\n  local arr=\"$1\"\n  local sum=0\n  local num\n  for num in \"${arr[@]}\"; do\n    if [ \"$num\" -gt 0 ]; then\n      sum+=\"$num\"\n    fi\n  done\n  echo \"$sum\""], ["#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n# numbers in the array will be randomly ordered. Your task is to determine if\n# it is possible to get an array sorted in non-decreasing order by performing \n# the following operation on the given array:\n# You are allowed to perform right shift operation any number of times.\n# One right shift operation means shifting all elements of the array by one\n# position in the right direction. The last element of the array will be moved to\n# the starting position in the array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing the above operation\n# then return true else return false.\n# If the given array is empty then return true.\n# Note: The given list is guaranteed to have unique elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n# be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"false\"\n# Explanation:It is not possible to get non-decreasing order for the given\n# array by performing any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball() {\n  local arr=$1\n  local n=$2\n  local shift=$3\n  shift=$3\n  local sorted_arr\n  local sorted_arr_len\n  local sorted_arr_index\n  local sorted_arr_shifted\n  local sorted_arr_index_shifted\n  local sorted_arr_shifted_len\n  local sorted_arr_shifted_index\n  local sorted_arr_shifted_index_shifted\n  local sorted_arr_shifted_index_shifted_len\n  local sorted_arr_shifted_index_shifted_len_shifted\n  local sorted_arr_shifted_index_shifted_len_shifted_len\n  local sorted_arr_shifted_index_shifted_len_shift"], ["#!/bin/bash\n# In this problem, you will implement a function that takes two lists of numbers,\n# and determines whether it is possible to perform an exchange of elements\n# between them to make lst1 a list of only even numbers.\n# There is no limit on the number of exchanged elements between lst1 and lst2.\n# If it is possible to exchange elements between the lst1 and lst2 to make\n# all the elements of lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n# >>> $(exchange \"1 2 3 4\" \"1 2 3 4\")\n# \"YES\"\n# >>> $(exchange \"1 2 3 4\" \"1 5 3 4\")\n# \"NO\"\n# It is assumed that the input lists will be non-empty.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nexchange() {\n  local lst1 lst2\n  local even_lst\n  local even_lst_size\n  local even_lst_index\n  local even_lst_index_end\n  local even_lst_index_start\n  local even_lst_index_end_2\n  local even_lst_index_start_2\n  local even_lst_index_end_3\n  local even_lst_index_start_3\n  local even_lst_index_end_4\n  local even_lst_index_start_4\n  local even_lst_index_end_5\n  local even_lst_index_start_5\n  local even_lst_index_end_6\n  local even_lst_index_start_6\n  local even_lst_index_end_7\n  local even_lst_index_start_7\n  local even_lst_index_end_8\n  local even_lst_index_start_8\n  local even_lst_index_end_9\n  local even_lst_index_start_9\n  local even_lst_index_end_10\n  local even_lst_index_start_10\n  local even_lst_index_end_11\n  local even_lst_index_start_11"], ["#!/bin/bash\n# Given a string representing a space separated lowercase letters, return a CSV\n# of the letter with the most repetition and containing the corresponding count.\n# If several letters have the same occurrence, return all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"', '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local string=\"$1\"\n  local count=0\n  local letter\n  local -A counts\n\n  # Initialize the counts hash\n  for letter in $(echo \"$string\" | tr 'a-z' 'A-Z'); do\n    counts[$letter]=$((counts[$letter] + 1))\n  done\n\n  # Iterate over each letter in the string\n  for letter in $(echo \"$string\" | tr 'a-z' 'A-Z'); do\n    # If the letter has already been counted, increment the count\n    if [ \"$counts[$letter]\" -gt 0 ]; then\n      count=$((counts[$letter] + 1))\n    else\n      # If the letter has not been counted, add it to the hash\n      counts[$letter]=$((counts[$letter] + 1))\n    fi\n  done\n\n  # Return the counts hash\n  return $counts"], ["#!/bin/bash\n# Task\n# We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n# then check if the result string is palindrome.\n# A string is called palindrome if it reads the same backward as forward.\n# You should return a list containing the result string and true/false for the check.\n# Example\n# >>> $(reverse_delete \"abcde\" \"ae\")\n# ['\"bcd\"', '\"false\"']\n# >>> $(reverse_delete \"abcdef\" \"b\")\n# ['\"acdef\"', '\"false\"']\n# >>> $(reverse_delete \"abcdedcba\" \"ab\")\n# ['\"cdedc\"', '\"true\"']\n#\n# $1 is a string\n# $2 is a string\nreverse_delete() {\n  local s c\n  s=\"$1\"\n  c=\"$2\"\n  local result=\"\"\n  local is_palindrome=false\n  local I=0\n  while I<${#s}; do\n    local char=\"${s:$i:1}\"\n    if [[ \"$char\" == \"$c\" ]]; then\n      I=$((i+1))\n    else\n      result=\"$result$char\"\n    fi\n    I=$((i+1))\n  done\n  if [[ \"$result\" == \"$c\" ]]; then\n    is_palindrome=true\n  fi\n  echo \"$result\"\n  echo \"$is_palindrome\""], ["#!/bin/bash\n# Given an array of integers nums, find the minimum sum of any non-empty sub-array\n# of nums.\n# Example\n# >>> $(minSubArraySum \"2 3 4 1 2 4\")\n# \"1\"\n# >>> $(minSubArraySum \"-1 -2 -3\")\n# \"-6\"\n#\n# $1 is a space-separated list\nminSubArraySum() {\n  local nums=\"$1\"\n  local min_sum=0\n  local I=2\n  local j=2\n  while I <= $((nums.length - 1))\n  do\n    local sum=0\n    while I <= $((j - 1))\n    do\n      sum+=$((nums[i] - nums[j]))\n      I=$((i + 1))\n    done\n    local max_sum=0\n    while j <= $((nums.length - 1))\n    do\n      max_sum+=$((nums[j] - nums[i]))\n      j=$((j + 1))\n    done\n    if [ $max_sum -gt $min_sum ]\n    then\n      min_sum=$max_sum\n    fi\n    I=$((i + 1))\n  done\n  echo \"$min_sum\""], ["#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents a single well,\n# and each 1 in a row represents a single unit of water.\n# Each well has a corresponding bucket that can be used to extract water from it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets to empty the wells.\n# Output the number of times you need to lower the buckets.\n# Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nmax_fill() {\n  local max_capacity=$1\n  local num_times=$2\n  local grid=$3\n  local buckets=()\n  local bucket\n  for ((i=0; i<$num_times; i++)); do\n    bucket=()\n    for ((j=0; j<$max_capacity; j++)); do\n      if [[ $grid[i][j] == 1 ]]; then\n        bucket+=(\"$j\")\n      fi\n    done\n    buckets+=(\"$bucket\")\n  done\n  echo \"$num_times\"\n  for ((i=0; I<$num_times; i++)); do\n    for ((j=0; j<$max_capacity;"], ["#!/bin/bash\n# In this Kata, you have to sort an array of non-negative integers according to\n# number of ones in their binary representation in ascending order.\n# For similar number of ones, sort based on decimal value.\n# It must be implemented like this:\n# >>> $(sort_array \"1 5 2 3 4\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array \"-2 -3 -4 -5 -6\")\n# ['\"-6\"', '\"-5\"', '\"-4\"', '\"-3\"', '\"-2\"']\n# >>> $(sort_array \"1 0 2 3 4\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local arr=\"$1\"\n  local sorted_arr\n  local decimal_value\n  local i\n  local -a binary_arr\n  local -a decimal_arr\n  local -a sorted_decimal_arr\n  local -a sorted_binary_arr\n\n  # Convert array to binary representation\n  binary_arr=($(echo \"$arr\" | tr 'a' 'b' | tr -d '01'))\n\n  # Convert binary representation to decimal\n  decimal_arr=($(echo \"$binary_arr\" | tr 'b' 'a' | tr -d '01'))\n\n  # Convert decimal representation to binary\n  sorted_decimal_arr=($(echo \"$decimal_arr\" | tr 'a' 'b' | tr -d '01'))\n\n  # Convert binary representation to decimal\n  sorted_binary_arr=($(echo \"$sorted_decimal_arr\" | tr 'b' 'a' | tr -d '01'))\n\n  # Sort binary array in ascending order\n  sorted_binary_arr=($(echo \"$sorted_binary_arr\" | sort -n))\n\n  # Sort decimal array in ascending order\n  sorted_decimal_arr=($(echo \"$sorted_decimal_arr\" | sort -n))\n\n  # Sort binary array in ascending order\n  sorted_binary"], ["#!/bin/bash\n# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\" \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words() {\n  local word_list=\"\"\n  local word=\"\"\n  local n=0\n  local I=0\n  local I_end=0\n  local I_start=0\n  local I_end_start=0\n  local I_end_end=0\n  local I_end_end_start=0\n  local I_end_end_end=0\n  local I_end_end_end_start=0\n  local I_end_end_end_end=0\n  local I_end_end_end_end_start=0\n  local I_end_end_end_end_end=0\n  local I_end_end_end_end_end_start=0\n  local I_end_end_end_end_end_end=0\n  local I_end_end_end_end_end_end_start=0\n  local I_end_end_end_end_end_end_end=0\n  local I_end_end_end_end_end_end_end_start=0\n  while I <= length \"$1\"\n  do\n    I_start=$I\n    I_end=$((I+n"], ["#!/bin/bash\n# You are given a word. Your task is to find the closest vowel that stands between \n# two consonants from the right side of the word (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n# find any vowel met the above condition. \n# You may assume that the given string contains English letter only.\n# Example:\n# >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\")\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local word=$1\n  local right_side_consonants=()\n  local vowel_index=()\n  local vowel_consonants=()\n  local vowel_distance=()\n  local vowel_distance_index=()\n  local vowel_distance_consonants=()\n  local vowel_distance_consonants_index=()\n  local vowel_distance_consonants_index_max=()\n  local vowel_distance_consonants_index_min=()\n  local vowel_distance_consonants_index_max_index=()\n  local vowel_distance_consonants_index_min_index=()\n  local vowel_distance_consonants_index_max_index_max=()\n  local vowel_distance_consonants_index_max_index_min=()\n  local vowel_distance_consonants_index_max_index_min_max=()\n  local vowel_distance_consonants_index_max_index_min_max_index=()\n  local vowel_distance_consonants_index_max_index_min_max_index_max=()\n  local vowel_distance_consonants_index_max_index_min_max_index_max_index=()\n  local vowel_distance_consonants_index_max_index_"], ["#!/bin/bash\n# You are given a list of two strings, both strings consist of open\n# parentheses '(' or close parentheses ')' only.\n# Your job is to check if it is possible to concatenate the two strings in\n# some order, that the resulting string will be good.\n# A string S is considered to be good if and only if all parentheses in S\n# are balanced. For example: the string '(())()' is good, while the string\n# '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n# Examples:\n# >>> $(match_parens \"()( )\")\n# \"Yes\"\n# >>> $(match_parens \") )\")\n# \"No\"\n#\n# $1 is a space-separated list\nmatch_parens() {\n  local list=\"$1\"\n  local open_parens=\"()\"\n  local close_parens=\"\"\n  local result=\"\"\n  for I in $(seq 1 \"$#\"); do\n    local char=\"$list[${i-1}]\"\n    if [[ \"$char\" == \"$open_parens\" ]]; then\n      result=\"$result$close_parens\"\n      close_parens=\"$open_parens\"\n      open_parens=\"$char\"\n    else\n      if [[ \"$char\" == \"$close_parens\" ]]; then\n        result=\"$result$open_parens\"\n        close_parens=\"$open_parens\"\n      else\n        result=\"$result$char\"\n      fi\n    fi\n  done\n  echo \"$result\""], ["#!/bin/bash\n# Given an array arr of integers and a positive integer k, return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n# >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length of the array will be in the range of [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=\"$1\"\n    local k=\"$2\"\n    local max_arr\n    local max_idx\n    local max_num\n    local max_arr_len\n    local max_num_len\n    local max_num_arr\n    local max_num_arr_len\n    local max_arr_idx\n    local max_arr_idx_len\n    local max_arr_idx_num\n    local max_arr_idx_num_len\n    local max_arr_idx_num_arr\n    local max_arr_idx_num_arr_len\n    local max_arr_idx_num_arr_num\n    local max_arr_idx_num_arr_num_len\n    local max_arr_idx_num_arr_num_arr\n    local max_arr_idx_num_arr_num_arr_len\n    local max_arr_idx_num_arr_num_arr_num\n    local max_arr_idx_num_arr_num_arr_num_len\n    local max_arr_idx_num_arr_num_arr_num_arr\n    local max_arr_idx_num_arr_num_arr"], ["#!/bin/bash\n# Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n# Examples\n# >>> $(solution \"5 8 7 1\")\n# \"12\"\n# >>> $(solution \"3 3 3 3 3\")\n# \"9\"\n# >>> $(solution \"30 13 24 321\")\n# \"0\"\n#\n# $1 is a space-separated list\nsolution() {\n  local list=\"$1\"\n  local sum=0\n  for I in $(echo \"$list\" | tr ' ' '\\n'); do\n    if [[ $i -eq 0 ]]; then\n      sum+=$i\n    else\n      sum+=$i\n      sum%2=1\n    fi\n  done\n  echo \"$sum\""], ["#!/bin/bash\n# Given a non-empty array of integers arr and an integer k, return\n# the sum of the elements with at most two digits from the first k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements() {\n  local arr=\"$1\"\n  local k=\"$2\"\n  local sum=0\n  local I=0\n  local j=0\n  while I < ${#arr[@]}\n  do\n    local digit=$(echo \"${arr[$i]}\" | awk '{print $1}')\n    local count=0\n    while I < ${#arr[@]}\n    do\n      local next_digit=$(echo \"${arr[$i]}\" | awk '{print $1}')\n      if [ \"${digit}\" = \"${next_digit}\" ]; then\n        count=$((count+1))\n      fi\n      I++\n    done\n    if [ \"${count}\" -eq 2 ]; then\n      sum=$((sum + \"${arr[$i]}\"))\n      I++\n    fi\n    I++\n  done\n  echo \"${sum}\""], ["#!/bin/bash\n# Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n# The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n# as follows: start with any positive integer n. Then each term is obtained from the \n# previous term as follows: if the previous term is even, the next term is one half of \n# the previous term. If the previous term is odd, the next term is 3 times the previous\n# term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n# Note: \n# 1. Collatz(1) is [1].\n# 2. returned list sorted in increasing order.\n# For example:\n# get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n# >>> $(get_odd_collatz \"5\")\n# ['\"1\"', '\"5\"']\n#\n# $1 is an integer\nget_odd_collatz() {\n  local n=\"$1\"\n  local collatz_seq\n  local odd_num\n  local collatz_seq_arr\n  local collatz_seq_arr_len\n  local collatz_seq_arr_str\n  local collatz_seq_arr_str_len\n  local collatz_seq_arr_str_rev\n  local collatz_seq_arr_str_rev_len\n  local collatz_seq_arr_str_rev_str\n  local collatz_seq_arr_str_rev_str_len\n  local collatz_seq_arr_str_rev_str_rev\n  local collatz_seq_arr_str_rev_str_rev_len\n  local collatz_seq_arr_str_rev_str_rev_str\n  local collatz_seq_arr_str_rev_str_rev_str_len\n  local collatz_seq_arr_str_rev_str_rev_str_rev\n  local collatz_seq_arr_str_rev_str_rev_"], ["#!/bin/bash\n# You have to write a function which validates a given date string and\n# returns true if the date is valid otherwise false.\n# The date is valid if all of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n# 3. The months should not be less than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n# >>> $(valid_date \"03-11-2000\")\n# \"true\"\n# >>> $(valid_date \"15-01-2012\")\n# \"false\"\n# >>> $(valid_date \"04-0-2040\")\n# \"false\"\n# >>> $(valid_date \"06-04-2020\")\n# \"true\"\n# >>> $(valid_date \"06/04/2020\")\n# \"false\"\n#\n# $1 is a string\nvalid_date() {\n  local date=$1\n  local month=$2\n  local day=$3\n  local year=$4\n\n  if [[ $month == 1 || $month == 3 || $month == 5 || $month == 7 || $month == 8 || $month == 10 || $month == 12 ]]; then\n    if [[ $day -lt 1 || $day -gt 31 ]]; then\n      return \"false\"\n    fi\n  elif [[ $month == 4 || $month == 6 || $month == 9 || $month == 11 ]]; then\n    if [[ $day -lt 1 || $day -gt 29 ]]; then\n      return \"false\"\n    fi\n  elif [[ $month == 2 ]]; then\n    if [[ $day"], ["#!/bin/bash\n# Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n# should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\!\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words() {\n  local text=\"$1\"\n  local delimiter=\" \"\n  local I=0\n  local I2=0\n  local I3=0\n  local I4=0\n  local I5=0\n  local I6=0\n  local I7=0\n  local I8=0\n  local I9=0\n  local I10=0\n  local I11=0\n  local I12=0\n  local I13=0\n  local I14=0\n  local I15=0\n  local I16=0\n  local I17=0\n  local I18=0\n  local I19=0\n  local I20=0\n  local I21=0\n  local I22=0\n  local I23=0\n  local I24=0\n  local I25=0\n  local I26=0\n  local I27=0\n  local I28=0\n  local I29=0\n  local I30=0\n  local I31=0\n  local I32=0\n  local I33=0\n  local I34=0\n  local I35=0\n  local I36=0\n  local I37=0\n  local I38=0\n  local I39=0\n  local I40=0\n  local I41=0\n  local I42"], ["#!/bin/bash\n# Given a list of numbers, return whether or not they are sorted\n# in ascending order. If list has more than 1 duplicate of the same\n# number, return false. Assume no negative numbers and only integers.\n# Examples\n# >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local sorted_list\n  local num\n  local sorted_num\n  local num_duplicates\n  local sorted_duplicates\n  local sorted_dup_count\n  local sorted_dup_count_str\n  local sorted_dup_count_int\n  local sorted_dup_count_float\n  local sorted_dup_count_str_float\n  local sorted_dup_count_str_int\n  local sorted_dup_count_str_float_int\n  local sorted_dup_count_str_float_int_str\n  local sorted_dup_count_str_float_int_str_int\n  local sorted_dup_count_str_float_int_str_int_str\n  local sorted_dup_count_str_float_int_str_int_str_int\n  local sorted_dup_count_str_float_int_str_int_str_int_str\n  local sorted_dup_count_str_float_int_str_int_str_int_str_int\n  local sorted_dup_"], ["#!/bin/bash\n# You are given two intervals,\n# where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n# The given intervals are closed which means that the interval (start, end)\n# includes both start and end.\n# For each given interval, it is assumed that its start is less or equal its end.\n# Your task is to determine whether the length of intersection of these two \n# intervals is a prime number.\n# Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If the length of the intersection is a prime number, return \"YES\",\n# otherwise, return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output] samples:\n# >>> $(intersection \"1 2\" \"2 3\")\n# \"NO\"\n# >>> $(intersection \"-1 1\" \"0 4\")\n# \"NO\"\n# >>> $(intersection \"-3 -1\" \"-5 5\")\n# \"YES\"\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nintersection() {\n    local start end\n    local result\n    local -a intervals\n\n    # Split input into intervals\n    IFS=',' read -ra intervals <<< \"$1\"\n    for I in \"${intervals[@]}\"; do\n        start=$(echo \"$I\" | awk '{print $1}')\n        end=$(echo \"$I\" | awk '{print $2}')\n        if ((end <= start)); then\n            result=NO\n            break\n        fi\n        intervals+=(\"$start $end\")\n    done\n\n    # Check if intersection is a prime number\n    if ((end - start > 1)); then\n        result=YES\n    fi\n\n    echo \"$result\""], ["#!/bin/bash\n# You are given an array arr of integers and you need to return\n# sum of magnitudes of integers multiplied by product of all signs\n# of each number in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>> $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1 is a space-separated list\nprod_signs() {\n  local arr=\"$1\"\n  local sum=0\n  local sign=1\n  for num in \"${arr[@]}\"\n  do\n    if [[ \"$num\" =~ ^[+-]?[0-9]+$ ]]; then\n      sum+=\"$sign$num\"\n      sign=$((sign * -1))\n    fi\n  done\n  echo \"$sum\""], ["#!/bin/bash\n# Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n# each cell of the grid contains a value. Every integer in the range [1, N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have to find the minimum path of length k in the grid. You can start\n# from any cell, and in each step you can move to any of the neighbor cells,\n# in other words, you can go to cells which share an edge with you current\n# cell.\n# Please note that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n# You CANNOT go off the grid.\n# A path A (of length k) is considered less than a path B (of length k) if\n# after making the ordered lists of the values on the cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically less\n# than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j] = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered list of the values on the cells that the minimum path go through.\n# Examples:    \n# >>> $(minPath \"1 2 3\\n4 5 6\\n7 8 9\" \"3\")\n# ['\"1\"', '\"2\"', '\"1\"']\n# >>> $(minPath \"5 9 3\\n4 1 6\\n7 8 2\" \"1\")\n# ['\"1\"']\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nminPath() {\n  local I=1\n  local j=2\n  local path=()\n  while [[ $# -gt 1 ]]; do\n    local val=$1\n    shift\n    if [[ $# -eq 1 ]]; then\n      path=(\"$path\")\n    else\n      path"], ["#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n# the last couple centuries. However, what people don't know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are given a non-negative integer number n, you have to a return a list of the \n# first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n    local n=$1\n    local rec\n    if [ $n -eq 1 ]; then\n        echo \"$1\"\n        return\n    fi\n    rec=$((n - 1))\n    echo \"$1\"\n    echo \"$2\"\n    echo \"$3\"\n    echo \"$4\"\n    echo \"$5\"\n    echo \"$6\"\n    echo \"$7\"\n    echo \"$8\"\n    echo \"$9\"\n    echo \"$10\"\n    echo \"$11\"\n    echo \"$12\"\n    echo \"$13\"\n    echo \"$14\"\n    echo \"$15\"\n    echo \"$16\"\n    echo \"$17\"\n    echo \"$18\"\n    echo \"$19\"\n    echo \"$20\"\n    echo \"$21\"\n    echo \"$22\"\n    echo \"$23\"\n    echo \"$24\"\n    echo \"$25\"\n    echo \"$26\"\n    echo \"$27\"\n    echo \"$28\"\n    echo \"$2"], ["#!/bin/bash\n# Given a positive integer n, return the product of the odd digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n# \"15\"\n#\n# $1 is an integer\ndigits() {\n    local n=\"$1\"\n    local odd_digits=()\n    local even_digits=()\n    local I=2\n    while [[ $n -gt 0 ]]; do\n        local digit=$(echo \"$n\" | awk '{print $I}')\n        if [[ $digit -eq 0 ]]; then\n            odd_digits+=(\"$digit\")\n        else\n            even_digits+=(\"$digit\")\n        fi\n        n=$((n/10))\n        I=$((I+1))\n    done\n    local odd_sum=0\n    local even_sum=0\n    for I in \"${!odd_digits[@]}\"; do\n        odd_sum+=$(echo \"$odd_digits[$i]\" | awk '{print $1}')\n    done\n    for I in \"${!even_digits[@]}\"; do\n        even_sum+=$(echo \"$even_digits[$i]\" | awk '{print $1}')\n    done\n    echo \"$odd_sum\"\n    echo \"$even_sum\""], ["#!/bin/bash\n# Create a function that takes a string as input which contains only square brackets.\n# The function should return true if and only if there is a valid subsequence of brackets \n# where at least one bracket in the subsequence is nested.\n# >>> $(is_nested \"[[]]\")\n# \"true\"\n# >>> $(is_nested \"[]]]]]]][[[[[]\")\n# \"false\"\n# >>> $(is_nested \"[][]\")\n# \"false\"\n# >>> $(is_nested \"[]\")\n# \"false\"\n# >>> $(is_nested \"[[][]]\")\n# \"true\"\n# >>> $(is_nested \"[[]][[\")\n# \"true\"\n#\n# $1 is a string\nis_nested() {\n  local input=\"$1\"\n  local bracket_count=0\n  local bracket_nesting=0\n  local bracket_nesting_count=0\n  local bracket_nesting_str=\"\"\n  local bracket_nesting_str_count=0\n  local bracket_nesting_str_count_str=\"\"\n  local bracket_nesting_str_count_str_count=0\n\n  # Loop through each character in the input string\n  for I in $(seq 0 $((input.length-1))); do\n    # Check if the current character is a bracket\n    if [[ $input[i] =~ ^[[:alpha:]]+$ ]]; then\n      # If the current character is a bracket, increment the bracket count\n      bracket_count=$((bracket_count+1))\n    fi\n\n    # Check if the current character is a bracket nesting level\n    if [[ $input[i] =~ ^[[:alnum:]]+$ ]]; then\n      # If the current character is a bracket nesting level, increment the bracket nesting count\n      bracket_nesting=$((bracket_nesting+1))\n    fi\n\n    # Check if the current character is a bracket nesting level and the bracket nesting count is greater than 0\n    if [[ $bracket_nesting -gt 0 ]]; then\n      # If the bracket nesting count is greater than 0, check if the current"], ["#!/bin/bash\n# You are given a list of numbers.\n# You need to return the sum of squared numbers in the given list,\n# round each element in the list to the upper int(Ceiling) first.\n# Examples:\n# >>> $(lst \"1.0 2.0 3.0\")\n# \"14\"\n# >>> $(lst \"1.0 4.0 9.0\")\n# \"98\"\n# >>> $(lst \"1.0 3.0 5.0 7.0\")\n# \"84\"\n# >>> $(lst \"1.4 4.2 0.0\")\n# \"29\"\n# >>> $(lst \"-2.4 1.0 1.0\")\n# \"6\"\n#\n# $1 is a space-separated list\nsum_squares() {\n  local lst=\"$1\"\n  local sum=0\n  local max_int\n  local max_int_str\n  local max_int_int\n  local max_int_str_int\n  local max_int_str_int_str\n  local max_int_str_int_str_str\n  local max_int_str_int_str_int\n  local max_int_str_int_str_int_str\n  local max_int_str_int_str_int_str_str\n  local max_int_str_int_str_int_str_int\n  local max_int_str_int_str_int_str_int_str\n  local max_int_str_int_str_int_str_int_str_str\n  local max_int_str_int_str_int_str_int_str_str\n  local max_int_str_int_str_int_str_int_str_str\n  local max_int_str_int_str_int_str_int_str_str\n  local max_int_str_int_str_int_str_int_str_str\n  local max_int_str_int_str_int_str_int_str_str\n  local max_int_str_int_str_int_str_int_str_str\n "], ["#!/bin/bash\n# Create a function that returns true if the last character\n# of a given string is an alphabetical character and is not\n# a part of a word, and false otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n# >>> $(check_if_last_char_is_a_letter \"apple pie\")\n# \"false\"\n# >>> $(check_if_last_char_is_a_letter \"apple pi e\")\n# \"true\"\n# >>> $(check_if_last_char_is_a_letter \"apple pi e \")\n# \"false\"\n# >>> $(check_if_last_char_is_a_letter \"\")\n# \"false\"\n#\n# $1 is a string\ncheck_if_last_char_is_a_letter() {\n  local last_char=\"$1\"\n  local word=\"$2\"\n  local word_len=${#word}\n  local last_char_len=${#last_char}\n\n  if [ \"$last_char\" = \"$word[${word_len}-1]\" ]; then\n    return 1\n  else\n    return 0\n  fi"], ["#!/bin/bash\n# Create a function which returns the largest index of an element which\n# is not greater than or equal to the element immediately preceding it. If\n# no such element exists then return -1. The given array will not contain\n# duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n# >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\ncan_arrange() {\n  local arr=\"$1\"\n  local I=0\n  local max_idx=0\n  local max_idx_prev=0\n  for I in \"${arr[@]}\"\n  do\n    if [[ $i -gt $max_idx_prev ]]; then\n      max_idx=$i\n      max_idx_prev=$i\n    fi\n  done\n  if [[ $max_idx -eq -1 ]]; then\n    echo \"-1\"\n  else\n    echo $max_idx\n  fi"], ["#!/bin/bash\n# Create a function that returns a list (a, b), where 'a' is\n# the largest of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n# If there is no negative or positive integers, return them as None.\n# Examples:\n# >>> $(largest_smallest_integers \"2 4 1 3 5 7\")\n# ['\"None\"', '\"1\"']\n# >>> $(largest_smallest_integers \"\")\n# ['\"None\"', '\"None\"']\n# >>> $(largest_smallest_integers \"0\")\n# ['\"None\"', '\"None\"']\n#\n# $1 is a space-separated list\nlargest_smallest_integers() {\n  local largest smallest\n  read -r largest smallest <<< \"$1\"\n  if [[ -z \"$largest\" ]]; then\n    echo \"None\"\n  elif [[ -z \"$smallest\" ]]; then\n    echo \"None\"\n  else\n    echo \"$largest\"\n    echo \"$smallest\"\n  fi"], ["#!/bin/bash\n# Create a function that takes integers, floats, or strings representing\n# real numbers, and returns the larger variable in its given variable type.\n# Return None if the values are equal.\n# Note: If a real number is represented as a string, the floating point might be . or ,\n# >>> $(compare_one \"1\" \"2.5\")\n# \"2.5\"\n# >>> $(compare_one \"1\" \"2,3\")\n# \"2,3\"\n# >>> $(compare_one \"5,1\" \"6\")\n# \"6\"\n# >>> $(compare_one \"1\" \"1\")\n# \"None\"\n#\n# $1 is an argument\n# $2 is an argument\ncompare_one() {\n  local a=$1\n  local b=$2\n  local type=$3\n  local result\n\n  if [[ $type == \"int\" ]]; then\n    result=$((a > b ? 1 : (a < b ? -1 : 0)))\n  elif [[ $type == \"float\" ]]; then\n    result=$((a > b ? 1 : (a < b ? -1 : 0)))\n  elif [[ $type == \"str\" ]]; then\n    result=$(echo \"$a\" | tr ',' ',' | tr ',' '.' | tr ',' ',' | tr ',' '.' | tr ',' ',' | tr ',' '.' | tr ',' ',' | tr ',' '.' | tr ',' ',' | tr ',' '.' | tr ',' ',' | tr ',' '.' | tr ',' ',' | tr ',' '.' | tr ',' ',' | tr ',' '.' | tr ',' ',' | tr ',' '.' | tr ',' ',' | tr ',' '.' | tr ',' ',' | tr ',' '.' | tr ',' ',' | tr ',' '.' | tr ',' ',' | tr ',' '.' | tr ',' ',' | tr ',' '.' | tr ',' ',' | tr ',' '.' | tr ',' ',' | tr ',' '.' | tr ',' ',' | tr ',' '.' | tr ',' ',' | tr ',' '.' | tr ',' ',' | tr"], ["#!/bin/bash\n# Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n# Example\n# >>> $(is_equal_to_sum_even \"4\")\n# \"false\"\n# >>> $(is_equal_to_sum_even \"6\")\n# \"false\"\n# >>> $(is_equal_to_sum_even \"8\")\n# \"true\"\n#\n# $1 is an integer\nis_equal_to_sum_even() {\n  local n=\"$1\"\n  local even_sum\n  local even_sum_count=0\n  local even_sum_list=()\n  local even_sum_list_count=0\n  local even_sum_list_count_max=0\n  local even_sum_list_max=0\n  local even_sum_list_min=0\n  local even_sum_list_min_max=()\n  local even_sum_list_min_max_count=0\n  local even_sum_list_min_max_count_max=()\n  local even_sum_list_min_max_count_min=0\n  local even_sum_list_min_max_count_max=0\n  local even_sum_list_min_max_count_min_max=()\n  local even_sum_list_min_max_count_min_max_count=0\n  local even_sum_list_min_max_count_min_max_count_max=()\n  local even_sum_list_min_max_count_min_max_count_max_count=0\n  local even_sum_list_min_max_count_min_max_count_max_count_max=()\n  local even_sum_list_min_max_count_min_max_count_max_count_max_count=0\n  local even_sum_list_min_max_count_min_max_count_max_count_max_count_max=()\n  local even_sum_list_min_max_count_min_max_count_max_count_max_count_max_count=0\n  local even_sum_list_min_max_count"], ["#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial \"4\")\n# \"288\"\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n  local n=$1\n  local result=1\n  for ((i=2; I<=${n}; i++)); do\n    result=$(($result * $i))\n  done\n  echo $result"], ["#!/bin/bash\n# Given a string text, replace all spaces in it with underscores, \n# and if a string has more than 2 consecutive spaces, \n# then replace all consecutive spaces with - \n# >>> $(fix_spaces \" Example\")\n# \"Example\"\n# >>> $(fix_spaces \" Example 1\")\n# \"Example_1\"\n# >>> $(fix_spaces \" Example 2\")\n# \"_Example_2\"\n# >>> $(fix_spaces \" Example 3\")\n# \"_Example-3\"\n#\n# $1 is a string\nfix_spaces() {\n  local text=\"$1\"\n  local spaces_count=0\n  local underscores_count=0\n  local spaces_in_consecutive_chars=0\n  local underscores_in_consecutive_chars=0\n  local spaces_in_consecutive_spaces=0\n  local underscores_in_consecutive_spaces=0\n  local spaces_in_consecutive_spaces_with_dashes=0\n  local underscores_in_consecutive_spaces_with_dashes=0\n  local spaces_in_consecutive_spaces_with_dashes_and_hyphens=0\n  local underscores_in_consecutive_spaces_with_dashes_and_hyphens=0\n  local spaces_in_consecutive_spaces_with_dashes_and_hyphens_with_dashes=0\n  local underscores_in_consecutive_spaces_with_dashes_and_hyphens_with_dashes=0\n  local spaces_in_consecutive_spaces_with_dashes_and_hyphens_with_dashes_and_hyphens=0\n  local spaces_in_consecutive_spaces_with_dashes_and_hyphens_with_dashes_and_hyphens_with_dashes=0\n  local spaces_in_consecutive_spaces_with_dashes_and_hyphens_with_dashes_and_hyphens_with_dashes_and_hyphens=0\n  local spaces_in_consecutive_spaces"], ["#!/bin/bash\n# Create a function which takes a string representing a file's name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n# A file's name is considered to be valid if and only if all the following conditions \n# are met:\n# - There should not be more than three digits ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring before the dot should not be empty, and it starts with a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file_name=\"$1\"\n  local valid_file_name_regex=\"^[a-zA-Z0-9\\.]+$\"\n  local valid_file_name_regex_with_dot=\"^[a-zA-Z0-9\\.]+$\"\n  local valid_file_name_regex_with_dot_and_letter=\"^[a-zA-Z0-9\\.]+$\"\n  local valid_file_name_regex_with_dot_and_letter_and_one_letter=\"^[a-zA-Z0-9\\.]+$\"\n  local valid_file_name_regex_with_dot_and_letter_and_one_letter_and_two_letters=\"^[a-zA-Z0-9\\.]+$\"\n  local valid_file_name_regex_with_dot_and_letter_and_two_letters=\"^[a-zA-Z0-9\\.]+$\"\n  local valid_file_name_regex_with_dot_and_letter_and_two_letters_and_one_digit=\"^[a-zA-Z0-9\\.]+$\"\n  local valid_file_name_regex"], ["#!/bin/bash\n# \"\n# This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n# multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n# change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n# Examples:\n# >>> lst\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> lst\n# []\n# >>> lst\n# ['\"-1\"', '\"-5\"', '\"2\"', '\"-1\"', '\"-5\"']\n#\n# $1 is a space-separated list\nsum_squares() {\n  local lst=\"$1\"\n  local sum=0\n  for I in \"${lst[@]}\"\n  do\n    if [[ $i -eq 0 ]]; then\n      sum=$((sum * 1))\n    elif [[ $i -eq 1 ]]; then\n      sum=$((sum * 2))\n    elif [[ $i -eq 2 ]]; then\n      sum=$((sum * 3))\n    elif [[ $i -eq 3 ]]; then\n      sum=$((sum * 4))\n    elif [[ $i -eq 4 ]]; then\n      sum=$((sum * 5))\n    elif [[ $i -eq 5 ]]; then\n      sum=$((sum * 6))\n    elif [[ $i -eq 6 ]]; then\n      sum=$((sum * 7))\n    elif [[ $i -eq 7 ]]; then\n      sum=$((sum * 8))\n    elif [[ $i -eq 8 ]]; then\n      sum=$((sum * 9))\n    elif [[ $i -eq 9 ]]; then\n      sum=$((sum * 10))\n    elif [[ $i -eq 10 ]]; then\n      sum=$((sum * 11))\n    elif [[ $i -eq 11 ]]; then\n      sum=$((sum * 12))\n    elif [[ $i -eq 12 ]]; then\n      sum"], ["#!/bin/bash\n# You are given a string representing a sentence,\n# the sentence contains some words separated by a space,\n# and you have to return a string that contains the words from the original sentence,\n# whose lengths are prime numbers,\n# the order of the words in the new string should be the same as the original one.\n# Example 1:\n# >>> $(words_in_sentence \"This is a test\")\n# \"is\"\n# Example 2:\n# >>> $(words_in_sentence \"lets go for swimming\")\n# \"go for\"\n# Constraints:\n# * 1 <= len(sentence) <= 100\n# * sentence contains only letters\n#\n# $1 is a string\nwords_in_sentence() {\n  local sentence=\"$1\"\n  local words=()\n  local I=2\n  while I <= length_of_sentence \"$sentence\"; do\n    local word=\"$sentence:$i\"\n    if [[ \"$word\" =~ ^[a-zA-Z]+$ ]]; then\n      words+=(\"$word\")\n    fi\n    I=$((i+1))\n  done\n  local I=1\n  while I <= length_of_sentence \"$sentence\"; do\n    local word=\"$sentence:$i\"\n    if [[ \"$word\" =~ ^[a-zA-Z]+$ ]]; then\n      words+=(\"$word\")\n    fi\n    I=$((i+1))\n  done\n  local I=1\n  while I <= length_of_sentence \"$sentence\"; do\n    local word=\"$sentence:$i\"\n    if [[ \"$word\" =~ ^[0-9]+$ ]]; then\n      words+=(\"$word\")\n    fi\n    I=$((i+1))\n  done\n  local I=1\n  while I <= length_of_sentence \"$sentence\"; do\n    local word=\"$sentence:$i\"\n    if [[ \"$word\" =~ ^[a-zA-Z]+$ ]]; then\n      words+=(\"$word\")\n    fi\n    I=$((i+1))\n  done\n  local I=1\n  while I <= length_of_sentence \"$sentence\"; do\n   "], ["#!/bin/bash\n# Your task is to implement a function that will simplify the expression\n# x * n. The function returns true if x * n evaluates to a whole number and false\n# otherwise. Both x and n, are string representation of a fraction, and have the following format,\n# <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n# You can assume that x, and n are valid fractions, and do not have zero as denominator.\n# >>> $(simplify \"1/5\" \"5/1\")\n# \"true\"\n# >>> $(simplify \"1/6\" \"2/1\")\n# \"false\"\n# >>> $(simplify \"7/10\" \"10/2\")\n# \"false\"\n#\n# $1 is a string\n# $2 is a string\nsimplify() {\n  local numerator denominator\n  numerator=\"${1}\"\n  denominator=\"${2}\"\n  if [[ \"$numerator\" =~ ^[0-9]+$ ]]; then\n    if [[ \"$denominator\" =~ ^[0-9]+$ ]]; then\n      if [[ \"$numerator\" -eq \"$denominator\" ]]; then\n        echo \"true\"\n      else\n        echo \"false\"\n      fi\n    else\n      echo \"false\"\n    fi\n  else\n    echo \"false\"\n  fi"], ["#!/bin/bash\n# Write a function which sorts the given list of integers\n# in ascending order according to the sum of their digits.\n# Note: if there are several items with similar sum of their digits,\n# order them based on their index in original list.\n# For example:\n# >>> $(order_by_points \"1 11 -1 -11 -12\")\n# ['\"-1\"', '\"-11\"', '\"1\"', '\"-12\"', '\"11\"']\n# >>> $(order_by_points \"\")\n# []\n#\n# $1 is a space-separated list\norder_by_points() {\n  local list=\"$1\"\n  local sorted_list\n  local sum_of_digits\n  local sorted_index\n  local sorted_list_index\n  local sorted_list_size\n  local sorted_list_size_str\n  local sorted_list_size_int\n  local sorted_list_size_float\n  local sorted_list_size_str_float\n  local sorted_list_size_str_int\n  local sorted_list_size_str_float_int\n  local sorted_list_size_str_float_int_str\n  local sorted_list_size_str_float_int_str_int\n  local sorted_list_size_str_float_int_str_int_str\n  local sorted_list_size_str_float_int_str_int_str_int\n  local sorted_list_size_str_float_int_str_int_str_int_str\n  local sorted_list_size_str_float_int_str_int_str_int_str_int\n  local sorted_list_size_str_float_int_str_int_str_int_str_int_str\n\n  # Split the list into an array of strings\n  local list_str_arr=()\n  for I in \"${!list[@]}\"; do\n    local list_str=\"${list[$i]}\"\n    local list_str_len=${#list_str}\n    if [[ $list_str_len -eq 1 ]]; then\n      list_str_arr+=(\"$list_str\")\n    else\n     "], ["#!/bin/bash\n# Write a function that takes an array of numbers as input and returns \n# the number of elements in the array that are greater than 10 and both \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# >>> $(specialFilter \"15 -73 14 -15\")\n# \"1\"\n# >>> $(specialFilter \"33 -2 -3 45 21 109\")\n# \"2\"\n#\n# $1 is a space-separated list\nspecialFilter() {\n  local arr=\"$1\"\n  local firstDigit=\"$2\"\n  local lastDigit=\"$3\"\n  local num\n  local numCount=0\n  local firstNum\n  local lastNum\n  local firstNumDigit\n  local lastNumDigit\n  local firstNumDigitFirstDigit\n  local lastNumDigitFirstDigit\n  local firstNumDigitLastDigit\n  local lastNumDigitLastDigit\n  local firstNumDigitFirstDigitLastDigit\n  local lastNumDigitFirstDigitLastDigit\n  local firstNumDigitLastDigitFirstDigit\n  local lastNumDigitLastDigitFirstDigit\n  local firstNumDigitLastDigitFirstDigitLastDigit\n  local firstNumDigitLastDigitFirstDigitLastDigit\n  local firstNumDigitLastDigitFirstDigitLastDigitCount\n  local lastNumDigitLastDigitFirstDigitLastDigitCount\n  local firstNumDigitLastDigitFirstDigitLastDigitCount\n  local lastNumDigitLastDigitFirstDigitLastDigitCount\n  local firstNumDigitLastDigitFirstDigitLastDigitCount\n  local lastNumDigitLastDigitFirstDigitLastDigitCount\n  local firstNumDigitLastDigitFirstDigitLastDigitCount\n  local lastNumDigitLastDigitFirstDigitLastDigitCount\n  local firstNumDigitLastDigitFirstDigitLastDigitCount\n  local lastNumDigitLastDigitFirstDigitLastDigitCount\n  local firstNumDigitLastDigitFirstDigitLastDigit"], ["#!/bin/bash\n# You are given a positive integer n. You have to create an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# >>> $(get_max_triples \"5\")\n# \"1\"\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local n=$1\n  local max_triples=0\n  local max_i=0\n  local max_j=0\n  local max_k=0\n  local max_sum=0\n  local max_i_sum=0\n  local max_j_sum=0\n  local max_k_sum=0\n  local max_i_max_j_sum=0\n  local max_i_max_k_sum=0\n  local max_j_max_k_sum=0\n  local max_i_max_sum=0\n  local max_j_max_sum=0\n  local max_k_max_sum=0\n  local max_i_sum=0\n  local max_j_sum=0\n  local max_k_sum=0\n  local max_i_max_sum=0\n  local max_i_max_sum=0\n  local max_j_max_sum=0\n  local max_i_max_sum=0\n  local max_j_max_sum=0\n  local max_i_max_sum=0\n  local max_j_max_sum=0\n  local max_i_max_sum=0\n  local max_j_max_sum=0\n  local max_i_max_sum=0\n  local max_j_max_"], ["#!/bin/bash\n# There are eight planets in our solar system: the closerst to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names as strings planet1 and planet2. \n# The function should return a list containing all planets whose orbits are \n# located between the orbit of planet1 and the orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should return an empty list if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  local planet1=$1\n  local planet2=$2\n  local planetList=()\n  local planetIndex=0\n  local planetName\n  for planetName in \"$planet1\" \"$planet2\"\n  do\n    if [[ \"$planetName\" == \"$planet1\" || \"$planetName\" == \"$planet2\" ]]; then\n      continue\n    fi\n    if [[ \"$planetName\" == \"*\" ]]; then\n      planetList+=( \"$planetName\" )\n    else\n      planetList+=( \"$planetName\" )\n      planetIndex=$(( planetIndex + 1 ))\n    fi\n  done\n  echo \"${planetList[*]}\""], ["#!/bin/bash\n# Write a function that accepts a list of strings as a parameter,\n# deletes the strings that have odd lengths from it,\n# and returns the resulted list with a sorted order,\n# The list is always a list of strings and never an array of numbers,\n# and it may contain duplicates.\n# The order of the list should be ascending by length of each word, and you\n# should return the list sorted by that rule.\n# If two words have the same length, sort the list alphabetically.\n# The function should return a list of strings in sorted order.\n# You may assume that all words will have the same length.\n# For example:\n# >>> $(list_sort \"aa a aaa\")\n# ['\"aa\"']\n# >>> $(list_sort \"ab a aaa cd\")\n# ['\"ab\"', '\"cd\"']\n#\n# $1 is a space-separated list\nsorted_list_sum() {\n  local list=\"$1\"\n  local sorted_list=\"\"\n  local I=0\n  local word\n  while I < ${#list[@]}\n  do\n    word=\"$list[i]\"\n    I=$((i+1))\n    if [[ \"$word\" =~ ^[a-zA-Z]+$ ]]; then\n      sorted_list=\"$sorted_list $word\"\n    fi\n  done\n  echo \"${sorted_list}\""], ["#!/bin/bash\n# A simple program which should return the value of x if n is \n# a prime number and should return the value of y otherwise.\n# Examples:\n# >>> $(x_or_y \"7\" \"34\" \"12\")\n# \"34\"\n# >>> $(x_or_y \"15\" \"8\" \"5\")\n# \"5\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nx_or_y() {\n  local x=\"$1\"\n  local y=\"$2\"\n  local n=\"$3\"\n  if [ \"$n\" -eq 2 ]; then\n    echo \"$x\"\n  elif [ \"$n\" -eq 3 ]; then\n    echo \"$y\"\n  else\n    echo \"Error: $n is not a prime number\"\n  fi"], ["#!/bin/bash\n# Given a list of numbers, return the sum of squares of the numbers\n# in the list that are odd. Ignore numbers that are negative or not integers.\n# >>> $(double_the_difference \"1 3 2 0\")\n# \"10\"\n# >>> $(double_the_difference \"-1 -2 0\")\n# \"0\"\n# >>> $(double_the_difference \"9 -2\")\n# \"81\"\n# >>> $(double_the_difference \"0\")\n# \"0\"\n# If the input list is empty, return 0.\n#\n# $1 is a space-separated list\ndouble_the_difference() {\n  local list=\"$1\"\n  local sum=0\n  local odd=0\n  local i=0\n  while I<${#list}; do\n    local num=${list:$i:1}\n    ((num<0)) && num=0\n    ((num<1)) && num=1\n    ((num<2)) && num=2\n    ((num<9)) && num=9\n    ((num>9)) && num=0\n    ((num<10)) && num=10\n    ((num>10)) && num=100\n    ((num<100)) && num=100\n    ((num>100)) && num=0\n    ((num<1000)) && num=1000\n    ((num>1000)) && num=0\n    ((num<10000)) && num=10000\n    ((num>10000)) && num=0\n    ((num<100000)) && num=100000\n    ((num>100000)) && num=0\n    ((num<1000000)) && num=1000000\n    ((num>1000000)) && num=0\n    ((num<10000000)) && num=10000000\n    ((num>10000000)) && num=0\n    ((num<10000"], ["#!/bin/bash\n# I think we all remember that feeling when the result of some long-awaited\n# event is finally known. The feelings and thoughts you have at that moment are\n# definitely worth noting down and comparing.\n# Your task is to determine if a person correctly guessed the results of a number of matches.\n# You are given two arrays of scores and guesses of equal length, where each index shows a match. \n# Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n# the value is 0, and if not, the value is the absolute difference between the guess and the score.\n# example:\n# >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\")\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncompare() {\n  local scores guesses\n  scores=($1)\n  guesses=($2)\n  local result\n  local diff\n  local count\n  local max\n  local min\n  local sum\n  local sum_diff\n  local sum_max\n  local sum_min\n  local sum_sum\n  local sum_sum_diff\n  local sum_sum_max\n  local sum_sum_min\n  local sum_sum_sum\n  local sum_sum_sum_diff\n  local sum_sum_sum_max\n  local sum_sum_sum_min\n  local sum_sum_sum_sum\n  local sum_sum_sum_sum_diff\n  local sum_sum_sum_sum_max\n  local sum_sum_sum_sum_min\n  local sum_sum_sum_sum_sum\n  local sum_sum_sum_sum_sum_diff\n  local sum_sum_sum_sum_sum_max\n "], ["#!/bin/bash\n# You will be given the name of a class (a string) and a list of extensions.\n# The extensions are to be used to load additional classes to the class. The\n# strength of the extension is as follows: Let CAP be the number of the uppercase\n# letters in the extension's name, and let SM be the number of lowercase letters \n# in the extension's name, the strength is given by the fraction CAP - SM. \n# You should find the strongest extension and return a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more extensions with the same strength, you should\n# choose the one that comes first in the list.\n# For example, if you are given \"Slices\" as the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is a space-separated list\nStrongest_Extension() {\n  local class=\"$1\"\n  local extensions=\"$2\"\n  local strength\n  local strongest_extension=\"\"\n  local extension_index=0\n  local extension_strength=0\n  for extension in $extensions; do\n    extension_index=$((extension_index+1))\n    extension_strength=$(echo \"$extension\" | tr '[:upper:]' '[:lower:]')\n    if [[ \"$extension_strength\" -lt \"$extension_strength\" ]]; then\n      strongest_extension=\"$extension\"\n      extension_strength=$extension_strength\n    fi\n  done\n  if [[ \"$strongest_extension\" ]]; then\n    echo \"$class.$strongest_extension\"\n  else\n    echo \"\"\n  fi"], ["#!/bin/bash\n# You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n# >>> $(cycpattern_check \"abcd\" \"abd\")\n# \"false\"\n# >>> $(cycpattern_check \"hello\" \"ell\")\n# \"true\"\n# >>> $(cycpattern_check \"whassup\" \"psus\")\n# \"false\"\n# >>> $(cycpattern_check \"abab\" \"baa\")\n# \"true\"\n# >>> $(cycpattern_check \"efef\" \"eeff\")\n# \"false\"\n# >>> $(cycpattern_check \"himenss\" \"simen\")\n# \"true\"\n#\n# $1 is a string\n# $2 is a string\ncycpattern_check() {\n  local first=$1\n  local second=$2\n  local rotations=()\n  local rotated_first\n  local rotated_second\n  local rotated_first_length\n  local rotated_second_length\n  local rotated_first_rotation\n  local rotated_second_rotation\n  local rotated_first_rotated_first\n  local rotated_second_rotated_second\n  local rotated_first_rotated_first_length\n  local rotated_second_rotated_second_length\n  local rotated_first_rotated_first_rotation\n  local rotated_second_rotated_second_rotation\n  local rotated_first_rotated_first_rotated_first\n  local rotated_second_rotated_second_rotated_second\n  local rotated_first_rotated_first_rotated_first_length\n  local rotated_second_rotated_second_rotated_second_length\n  local rotated_first_rotated_first_rotated_first_rotation\n  local rotated_second_rotated_second_rotated_second_rotation\n  local rotated_first_rotated_first_rotated_first_rotated_first\n  local rotated_second_rotated_second_rotated_second_rotated_second\n  local rotated_first_rotated_first_rotated_first_"], ["#!/bin/bash\n# Given an integer. return a list that has the number of even and odd digits respectively.\n# Example:\n# >>> $(even_odd_count \"-12\")\n# ['\"1\"', '\"1\"']\n# >>> $(even_odd_count \"123\")\n# ['\"1\"', '\"2\"']\n#\n# $1 is an integer\neven_odd_count() {\n  local num=\"$1\"\n  local even_count=0\n  local odd_count=0\n  local even_digits=\"\"\n  local odd_digits=\"\"\n  local I=2\n  while [[ $num -gt 0 ]]; do\n    local digit=$(echo \"$num\" | awk '{print $I}')\n    if [[ $digit -eq 2 ]]; then\n      even_count=$((even_count+1))\n      even_digits=\"$even_digits$digit\"\n    elif [[ $digit -eq 4 ]]; then\n      odd_count=$((odd_count+1))\n      odd_digits=\"$odd_digits$digit\"\n    fi\n    num=$((num/10))\n    I=$((I+1))\n  done\n  echo \"$even_count\"\n  echo \"$odd_count\""], ["#!/bin/bash\n# Given a positive integer, obtain its roman numeral equivalent as a string,\n# and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n# >>> $(int_to_mini_roman \"19\")\n# \"xix\"\n# >>> $(int_to_mini_roman \"152\")\n# \"clii\"\n# >>> $(int_to_mini_roman \"426\")\n# \"cdxxvi\"\n#\n# $1 is an integer\nint_to_mini_roman() {\n  local num=\"$1\"\n  local min_roman=\"I\"\n  local max_roman=\"XL\"\n  local roman=\"\"\n  local I=\"\"\n  local X=\"\"\n  local L=\"\"\n  local I_num=\"\"\n  local X_num=\"\"\n  local L_num=\"\"\n\n  # Check if the input is a positive integer\n  if [ \"$num\" -lt 0 ]; then\n    echo \"Error: Input must be a positive integer.\"\n    return 1\n  fi\n\n  # Calculate the minimum and maximum roman numerals\n  min_roman=\"$max_roman\"\n  max_roman=\"$min_roman\"\n  for I in $(seq 1 \"$num\"); do\n    I_num=\"$I\"\n    I_num=\"${I_num:0:1}\"\n    I=\"${I_num}${I_num:1:1}\"\n    if [ \"$i\" -eq 1 ]; then\n      I_num=\"$I_num$min_roman\"\n      min_roman=\"$i\"\n    elif [ \"$i\" -eq 2 ]; then\n      I_num=\"$I_num$max_roman\"\n      max_roman=\"$i\"\n    else\n      I_num=\"$I_num$i\"\n    fi\n  done\n\n  # Calculate the L and X roman numerals\n  L_num=\"$max_roman\"\n  X_num=\"$min_roman\"\n  for I in $(seq 1 \"$num\"); do\n    I_num=\"$I\"\n    I_num=\"${I_num:0:"], ["#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return true if the three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# >>> $(right_angle_triangle \"3\" \"4\" \"5\")\n# \"true\"\n# >>> $(right_angle_triangle \"1\" \"2\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nright_angle_triangle() {\n  local side1=\"$1\"\n  local side2=\"$2\"\n  local side3=\"$3\"\n  local side1_length=\"$((side1 * 0.5))\"\n  local side2_length=\"$((side2 * 0.5))\"\n  local side3_length=\"$((side3 * 0.5))\"\n  local angle1=\"$(echo \"$side1_length\" | bc)\"\n  local angle2=\"$(echo \"$side2_length\" | bc)\"\n  local angle3=\"$(echo \"$side3_length\" | bc)\"\n  local angle_diff=\"$(echo \"$angle1\" - \"$angle2\" | bc)\"\n  local angle_diff_sign=\"$(echo \"$angle_diff\" | bc)\"\n  local angle_sign=\"$(echo \"$angle_diff_sign\" | bc)\"\n  local angle_sign_str=\"$(echo \"$angle_sign\" | bc)\"\n  local angle_sign_str_reverse=\"$(echo \"$angle_sign_str\" | bc)\"\n  local angle_sign_str_reverse_str=\"$(echo \"$angle_sign_str_reverse\" | bc)\"\n  local angle_sign_str_reverse_str_reverse=\"$(echo \"$angle_sign_str_reverse_str\" | bc)\"\n  local angle_sign_str_reverse_str_reverse_str=\"$(echo \"$angle_sign_str_reverse_str_reverse\" | bc)\"\n  local angle_sign_str_reverse_str_reverse_str_reverse=\"$(echo \"$angle_sign_str_reverse_str_reverse"], ["#!/bin/bash\n# Write a function that accepts a list of strings.\n# The list contains different words. Return the word with maximum number\n# of unique characters. If multiple strings have maximum number of unique\n# characters, return the one which comes first in lexicographical order.\n# >>> $(find_max \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated list\nfind_max() {\n  local list=\"$1\"\n  local max_count=0\n  local max_word=\"\"\n  local word=\"\"\n  for word in \"${list[@]}\"; do\n    local count=$(echo \"$word\" | wc -c)\n    if [ \"$count\" -gt \"$max_count\" ]; then\n      max_count=$count\n      max_word=\"$word\"\n    fi\n  done\n  echo \"$max_word\""], ["#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain number of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n# you should return an array of [ total number of eaten carrots after your meals,\n# the number of carrots left after your meals ]\n# if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n# >>> $(eat \"5\" \"6\" \"10\")\n# ['\"11\"', '\"4\"']\n# >>> $(eat \"4\" \"8\" \"9\")\n# ['\"12\"', '\"1\"']\n# >>> $(eat \"1\" \"10\" \"10\")\n# ['\"11\"', '\"0\"']\n# >>> $(eat \"2\" \"11\" \"5\")\n# ['\"7\"', '\"0\"']\n# Variables:\n# @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n# the number of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n  local need=$2\n  local remaining=$3\n  local total_eaten=0\n  local remaining_carrots=0\n  local remaining_left=0\n  while [ $number -gt 0 ]; do\n    if [ $number -eq 0 ]; then\n      echo \"You're a hungry rabbit, and you already have eaten a certain number of carrots, but now you need to eat more carrots to complete the day's meals. You should return an array of [ total number of eaten carrots after your meals, the number of"], ["#!/bin/bash\n# Given two lists operator, and operand. The first list has basic algebra operations, and \n# the second list is a list of integers. Use the two given lists to build the algebric \n# expression and return the evaluation of this expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is equal to the length of operand list minus one.\n# Operand is a list of of non-negative integers.\n# Operator list has at least one operator, and operand list has at least two operands.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ndo_algebra() {\n  local operator=$1\n  local operand=$2\n  local result=0\n\n  if [[ $# -ne 2 ]]; then\n    echo \"Error: Invalid number of arguments\"\n    return 1\n  fi\n\n  if [[ $operator == '+' ]]; then\n    result=$((operand + result))\n  elif [[ $operator == '-' ]]; then\n    result=$((operand - result))\n  elif [[ $operator == '*' ]]; then\n    result=$((operand * result))\n  elif [[ $operator == '/' ]]; then\n    result=$((operand / result))\n  elif [[ $operator == '**' ]]; then\n    result=$((operand ** result))\n  else\n    echo \"Error: Invalid operator\"\n    return 1\n  fi\n\n  echo $result"], ["#!/bin/bash\n# You are given a string s.\n# if s[i] is a letter, reverse its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string contains no letters, reverse the string.\n# The function should return the resulted string.\n# Examples\n# >>> $(solve \"1234\")\n# \"4321\"\n# >>> $(solve \"ab\")\n# \"AB\"\n# >>> $(solve \"#a@C\")\n# \"#A@c\"\n#\n# $1 is a string\nsolve() {\n    local s=\"$1\"\n    local case_lowercase_uppercase\n    case_lowercase_uppercase=$(echo \"$s\" | tr '[:lower:]' '[:upper:]')\n    if [[ \"$case_lowercase_uppercase\" == \"$s\" ]]; then\n        echo \"$s\"\n    else\n        echo \"$case_lowercase_uppercase\"\n    fi"], ["#!/bin/bash\n# Given a string 'text', return its md5 hash equivalent string.\n# If 'text' is an empty string, return None.\n# >>> $(string_to_md5 \"Hello world\")\n# \"3e25960a79dbc69b674cd4ec67a72c62\"\n#\n# $1 is a string\nstring_to_md5() {\n  local input=\"$1\"\n  if [[ -z \"$input\" ]]; then\n    return 0\n  fi\n  echo md5sum \"$input\""], ["#!/bin/bash\n# Given two positive integers a and b, return the even digits between a\n# and b, in ascending order.\n# For example:\n# >>> $(generate_integers \"2\" \"8\")\n# ['\"2\"', '\"4\"', '\"6\"', '\"8\"']\n# >>> $(generate_integers \"8\" \"2\")\n# ['\"2\"', '\"4\"', '\"6\"', '\"8\"']\n# >>> $(generate_integers \"10\" \"14\")\n# []\n#\n# $1 is an integer\n# $2 is an integer\ngenerate_integers() {\n  local a=$1\n  local b=$2\n  local even_digits=()\n  local even_digit\n  for ((i=a; i<=b; i++)); do\n    even_digit=$(echo \"$i\" | awk '{print $1}')\n    if [ \"$even_digit\" -eq 0 ]; then\n      even_digits+=(\"$even_digit\")\n    fi\n  done\n  echo \"${even_digits[@]}\""]]