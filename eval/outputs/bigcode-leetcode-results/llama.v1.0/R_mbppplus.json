[["\n\n# <func> # Python \n# Write a function to find the shared elements from the given two lists.\ndef similar_elements(test_tup1, test_tup2):\n    # Define the function to find the shared elements\n    shared_elements = []\n    for I in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements\n\n# Example usage\ntest_list1 = [1, 2, 3, 4, 5]\ntest_list2 = [2, 3, 4, 5, 6]\nshared_elements = similar_elements(test_list1, test_list2)"], ["\nimport math\n\n# <func> # Python \n# Write a python function to identify non-prime numbers.\ndef is_not_prime(n):\n    # Check if n is divisible by 2\n    if n % 2 == 0:\n        # If n is divisible by 2, return False\n        return False\n    # Check if n is divisible by 3\n    if n % 3 == 0:\n        # If n is divisible by 3, return False\n        return False\n    # Check if n is divisible by 5\n    if n % 5 == 0:\n        # If n is divisible by 5, return False\n        return False\n    # Check if n is divisible by 7\n    if n % 7 == 0:\n        # If n is divisible by 7, return False\n        return False\n    # If n is not divisible by any of the above, return True\n    return True\n\n# Testing the function"], ["\nimport heapq as hq\n\n# <func> # Python \n# Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n\n# Example usage:\nnums = [1, 2, 3, 4, 5]\nlargest_nums = heap_queue_largest(nums, 3)"], ["\n\n# <func> # Python \n# Write a python function to check whether the two numbers differ at one bit position only or not.\ndef is_Power_Of_Two(x: int):\n    \"\"\"\n    This function takes a single argument x and returns True if x is a power of 2, False otherwise.\n    \"\"\"\n    return x & (x - 1) == 0\n\n# Example usage:"], ["\nimport re\n\n# <func> # Python \n# Write a function to find all words which are at least 4 characters long in a string.\ndef find_char_long(text):\n    # Create a regular expression to match all words that are at least 4 characters long\n    word_regex = re.compile(r'\\w{4,}')\n    # Create a list to store the found words\n    words = []\n    # Iterate over the string and match each word using the regular expression\n    for word in text.split():\n        if word_regex.match(word):\n            words.append(word)\n    return words\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a function to find squares of individual elements in a list.\ndef square_nums(nums):\n    # Write your code here.\n    return [num**2 for num in nums]\n\n# Call the function with the list of numbers.\nnums = [1, 2, 3, 4, 5]\nsquares = square_nums(nums)"], ["\n\n# <func> # Python \n# Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\ndef find_Rotations(s):\n    # Initialize a list to store the rotations\n    rotations = []\n    \n    # Loop through each character in the string\n    for I in range(len(s)):\n        # If the current character is not the same as the previous character, add it to the rotations list\n        if s[i] != s[i-1]:\n            rotations.append(i)\n    \n    # Return the minimum number of rotations required\n    return len(rotations)\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch):\n    return s.replace(ch, '')\n\n# Example usage\ns = 'Hello World'"], ["\n\n# <func> # Python \n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n    # Sort the matrix by row sum\n    M = M.transpose()\n    M = M.sum(axis=1)\n    M = M.transpose()\n    return M\n\n# Example usage\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nsorted_M = sort_matrix(M)"], ["\n\n# <func> # Python \n# Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h):\n    # calculate the volume of the prism\n    volume = (l * b) * (h / 2)\n    return volume\n\n# call the function with the required arguments"], ["\nimport re\n\n# <func> # Python \n# Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\ndef text_lowercase_underscore(text):\n    # Replace all uppercase letters with underscores\n    text = text.replace(text.upper(), '_')\n    # Split the string by underscores\n    return re.split('_', text)\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a function that returns the perimeter of a square given its side length as input.\ndef square_perimeter(a):\n    return 4 * a\n\n# Test the function with different side lengths"], ["\n\n# <func> # Python \n# Write a function to remove characters from the first string which are present in the second string.\ndef remove_dirty_chars(string, second_string):\n    # Your code here\n    return string\n\n# Example usage:\nstring = \"Hello World\"\nsecond_string = \"World\""], ["\n\n# <func> # Python \n# Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\n    # Your code here\n    return False\n\n# Test the function with some sample inputs"], ["\n\n# <func> # Python \n# Write a function to check if the given number is woodball or not.\ndef is_woodall(x):\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a python function to check if a given number is one less than twice its reverse.\ndef check(n):\n    if n % 2 == 0:\n        return False\n    else:\n        return n % 2 == 1\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to find the largest number that can be formed with the given list of digits.\ndef find_Max_Num(arr):\n    # initialize max num to 0\n    max_num = 0\n    \n    # loop through the array\n    for num in arr:\n        # if num is greater than max num, update max num\n        if num > max_num:\n            max_num = num\n    \n    # return the max num\n    return max_num\n\n# test function\narr = [1, 2, 3, 4, 5]"], ["\n\n# <func> # Python \n# Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y):\n    if x > y:\n        return True\n    elif x < y:\n        return False\n    else:\n        return True\n\n# Calling the function"], ["\n\n# <func> # Python \n# Write a function to find the nth octagonal number.\ndef is_octagonal(n):\n    # Define the formula for finding the nth octagonal number\n    # n = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    # n = 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20\n    # n = 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30\n    # n = 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40\n    # n = 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50\n    # n = 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60\n    # n = 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70\n    # n = 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80\n    # n = 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90\n    # n = 90, 91, 92, 93, 94, 95, 96, 97, 98, "], ["\nfrom collections import \n# <func> # Python \n# Write a python function to count the number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s):\n    # <func> # Python \n    # Initialize a dictionary to store the count of substrings with the sum of digits equal to their length.\n    count = {}\n    # <func> # Python \n    # Iterate over each character in the string.\n    for char in s:\n        # <func> # Python \n        # Check if the current character has a sum of digits equal to its length.\n        if sum(map(int, char)) == len(char):\n            # <func> # Python \n            # If the character has a sum of digits equal to its length, add it to the count dictionary.\n            if char not in count:\n                count[char] = 1\n            else:\n                count[char] += 1\n    # <func> # Python \n    # Return the count dictionary.\n    return count\n\n# Example usage:\ns = \"racecar\"\ncount = count_Substrings(s)"], ["\n\n# <func> # Python \n# Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n    # initialize smallest number to None\n    smallest = None\n    \n    # iterate through list and update smallest if it is greater than current smallest\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    \n    return smallest\n\n# test function\nsmallest_num([1, 2, 3, 4, 5]) # returns 3\nsmallest_num([1, 2, 3, 4, 6]) # returns 6\nsmallest_num([1, 2, 3, 4, 5, 6]) # returns 6\nsmallest_num([]) # returns None\nsmallest_num([1, 2, 3, 4]) # returns None\n\n# print output"], ["\n\n# <func> # Python \n# Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n    max_diff = 0\n    for pair in test_list:\n        diff = pair[1] - pair[0]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\n# Test cases\ntest_list = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]"], ["\n\n# <func> # Python \n# Write a function to sort a list of tuples using the second value of each tuple.\ndef subject_marks(subjectmarks):\n    # Sort the list using the second value of each tuple\n    sorted_subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    # Return the sorted list\n    return sorted_subjectmarks\n\n# Example usage\nsorted_subjectmarks = subject_marks([('math', 80), ('english', 70), ('physics', 90)])"], ["\n\n# <func> # Python \n# Write a function to flatten a list and sum all of its elements.\ndef recursive_list_sum(data_list):\n    if not data_list:\n        return 0\n    return data_list[0] + recursive_list_sum(data_list[1:])\n\n# Call the function with a list of integers."], ["\n\n# <func> # Python \n# Write a python function to count the number of positive numbers in a list.\ndef pos_count(l):\n    count = 0\n    for num in l:\n        if num > 0:\n            count += 1\n    return count\n\n# Example usage:\npos_count([1, 2, 3, 4, 5]) # Output: 2\n\n# Explanation:\n# The function takes a list as input and counts the number of positive numbers in it.\n# The function first checks if each element in the list is greater than 0. If it is, it increments the count.\n# The function returns the count."], ["\n\n# <func> # Python \n# Write a function to find the number of ways to partition a set of Bell numbers.\ndef bell_number(n):\n    # Define the Bell numbers\n    bell_numbers = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10987, 17976, 28707, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 167772160, 27147497671065]\n    # Define the number of ways to partition a set of n elements\n    n_ways = 1\n    for I in range(1, n+1):\n        n_ways *= bell_numbers[i]\n    return n_ways\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A):\n    # Write your code here\n    if len(A) <= 1:\n        return True\n    else:\n        for I in range(1, len(A)):\n            if A[i] > A[i-1]:\n                return False\n        return True\n\n# Test the function\nA = [1, 2, 3, 4, 5]"], ["\n\n# <func> # Python \n# Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n    # Check if the sublist is a subset of the original list\n    if len(s) == len(l) and all(elem in l for elem in s):\n        return True\n    else:\n        return False\n\n# Example usage:\nl = [1, 2, 3, 4, 5]\ns = [2, 3, 4]"], ["\n\n# <func> # Python \n# Write a function to find whether all the given tuples have equal length or not.\ndef get_equal(Input):\n    length = len(Input)\n    for I in range(length):\n        for j in range(i+1, length):\n            if Input[i] != Input[j]:\n                return False\n    return True\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to sort a list of elements.\ndef comb_sort(nums):\n    # Initialize the pivot element\n    pivot = nums[0]\n    \n    # Create a list to store the sorted sub-arrays\n    sorted_sub_arrays = []\n    \n    # Loop through the list and find the smallest element\n    for I in range(1, len(nums)):\n        if nums[i] < pivot:\n            # If the current element is less than the pivot, swap it with the smallest element\n            sorted_sub_arrays.append(nums[:i])\n            nums[:i] = nums[i:]\n            nums[i:] = sorted_sub_arrays\n            sorted_sub_arrays = []\n            break\n    \n    # If the list is empty, return the original list\n    if len(sorted_sub_arrays) == 0:\n        return nums\n    \n    # Otherwise, sort the sub-arrays and append them to the sorted_sub_arrays list\n    for I in range(len(nums)):\n        sorted_sub_arrays.append(nums[i:])\n    \n    return sorted_sub_arrays\n\n# Example usage\nnums = [5, 3, 7, 1, 9, 2]\nsorted_sub_arrays = comb_sort(nums)"], ["\n\n# <func> # Python \n# Write a python function to check whether the given number can be represented as the difference of two squares or not.\ndef dif_Square(n):\n    if n % 4 == 0:\n        return True\n    else:\n        return False\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):\n    # Initialize a list to store the matches\n    matches = []\n    \n    # Loop through the colors array\n    for color in colors:\n        # Loop through the patterns array\n        for pattern in patterns:\n            # Check if the color matches the pattern\n            if color == pattern:\n                # Add the color to the list of matches\n                matches.append(color)\n    \n    # Return the list of matches\n    return matches\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n    # Initialize a list to store tuples with all elements divisible by K\n    tuples_with_divisible_elements = []\n    \n    # Loop through each tuple in the list\n    for tuple in test_list:\n        # Check if each element in the tuple is divisible by K\n        if all(x % K for x in tuple):\n            # If all elements are divisible by K, add the tuple to the list of tuples with divisible elements\n            tuples_with_divisible_elements.append(tuple)\n    \n    # Return the list of tuples with all elements divisible by K\n    return tuples_with_divisible_elements\n\n# Example usage\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\nk = 3\nresult = find_tuples(test_list, k)"], ["\n\n# <func> # Python \n# Write a python function to find whether a number is divisible by 11.\ndef is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n\n# Call the function with some sample inputs."], ["\n\n# <func> # Python \n# Write a python function to check whether the length of the word is odd or not.\ndef word_len(s):\n    # check if the string is empty\n    if not s:\n        return 0\n    # count the number of characters in the string\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    # check if the count is odd\n    if count % 2 != 0:\n        return 1\n    else:\n        return 0\n\n# test the function"], ["\n\n# <func> # Python \n# Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n):\n    # Define the formula for the nth tetrahedral number\n    formula = (n*(n+1)*(2*n+1)) // 6\n    return formula\n\n# Call the function with n=5"], ["\nimport math\n\n# <func> # Python \n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return 3.14159 * r ** 3\n\n# Call the function with the radius of a sphere."], ["\n\n# <func> # Python \n# Write a function to find the nth number in the newman conway sequence.\ndef sequence(n):\n    # Define the sequence\n    sequence = [1, 1, 2, 1, 3, 1, 1, 4, 3, 3, 3, 4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]\n    \n    # Find the nth number in the sequence\n    return sequence[n]\n\n# Test the function"], ["\nimport math\n\n# <func> # Python \n# Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n    # Calculate the surface area of a sphere with radius r\n    return 4 * math.pi * r ** 2\n\n# Call the function with a radius of 1.0"], ["\n\n# <func> # Python \n# Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\n    # Define the formula for the nth centered hexagonal number\n    formula = (n + 1) * (n + 1) * (n + 1) / 6\n    \n    # Calculate the nth centered hexagonal number\n    return formula\n\n# Call the function to find the nth centered hexagonal number"], ["\nimport collections as ct\n\n# <func> # Python \n# Write a function to merge three dictionaries into a single dictionary.\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict\n\n# Example usage:\ndict1 = {'a': 1, 'b': 2, 'c': 3}\ndict2 = {'d': 4, 'e': 5}\ndict3 = {'f': 6, 'g': 7}\nmerged_dict = merge_dictionaries_three(dict1, dict2, dict3)"], ["\nimport collections\n\n# <func> # Python \n# Write a function to get the frequency of all the elements in a list, returned as a dictionary.\ndef freq_count(list1):\n    freq = collections.defaultdict(int)\n    for item in list1:\n        freq[item] += 1\n    return freq\n\n# Example usage:\nlst = [1, 2, 3, 4, 5]\nfreq_count(lst)\n# Output: {'1': 2, '2': 1, '3': 1, '4': 1, '5': 1}\n\n# Example usage:\nlst = [1, 2, 3, 4, 5, 6]\nfreq_count(lst)\n# Output: {'1': 3, '2': 2, '3': 1, '4': 1, '5': 1, '6': 1}\n\n# Example usage:\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfreq_count(lst)\n# Output: {'1': 5, '2': 4, '3': 3, '4': 2, '5': 2, '6': 2, '7': 1, '8': 1, '9': 1, '10': 1}"], ["\n\n# <func> # Python \n# Write a function to find the closest smaller number than n.\ndef closest_num(N):\n    # initialize the minimum and maximum numbers\n    min_num = max_num = N\n    \n    # iterate through the numbers\n    for num in range(1, N+1):\n        # if the current number is smaller than the current minimum, update the minimum\n        if num < min_num:\n            min_num = num\n    \n    # return the minimum number\n    return min_num\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a python function to find the length of the longest word.\ndef len_log(list1):\n    # initialize the length variable\n    length = 0\n    # iterate through the list\n    for word in list1:\n        # check if the word is longer than the current length\n        if len(word) > length:\n            # update the length variable\n            length = len(word)\n    # return the length variable\n    return length\n\n# test the function"], ["\n\n# <func> # Python \n# Write a function to check if a string is present as a substring in a given list of string values.\ndef find_substring(str1, sub_str):\n    # Check if the sub_str is present in the list of strings\n    for str2 in str1:\n        if str2.lower() == sub_str.lower():\n            return True\n    return False\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a function to check whether the given number is undulating or not.\ndef is_undulating(n):\n    # Write your code here.\n    # Use a loop to iterate through the number and check if it is increasing or decreasing.\n    # If it is increasing, return True. If it is decreasing, return False.\n    # If it is not increasing or decreasing, return None.\n    # Example usage:\n    # is_undulating(10) # returns True\n    # is_undulating(20) # returns False\n    # is_undulating(30) # returns None\n    # is_undulating(40) # returns None\n    # is_undulating(50) # returns True\n    # is_undulating(60) # returns False\n    # is_undulating(70) # returns True\n    # is_undulating(80) # returns False\n    # is_undulating(90) # returns True\n    # is_undulating(100) # returns False\n    return None\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a, b):\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b-1)\n\n# Example usage:"], ["\nfrom operator import itemgetter \n\n# <func> # Python \n# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list):\n    return min(test_list, key=itemgetter(1))\n\n# Example usage:\ntest_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]"], ["\n\n# <func> # Python \n# Write a python function to find the length of the smallest list in a list of lists.\ndef Find_Min_Length(lst):\n    # Define the function to find the length of the smallest list in a list of lists\n    def Find_Min_Length_List(lst):\n        # Define the function to find the length of the smallest list in a list of lists\n        def Find_Min_Length_List_Helper(lst):\n            # Define the function to find the length of the smallest list in a list of lists\n            def Find_Min_Length_List_Helper_Helper(lst):\n                # Define the function to find the length of the smallest list in a list of lists\n                def Find_Min_Length_List_Helper_Helper_Helper(lst):\n                    # Define the function to find the length of the smallest list in a list of lists\n                    def Find_Min_Length_List_Helper_Helper_Helper_Helper(lst):\n                        # Define the function to find the length of the smallest list in a list of lists\n                        def Find_Min_Length_List_Helper_Helper_Helper_Helper_Helper(lst):\n                            # Define the function to find the length of the smallest list in a list of lists\n                            def Find_Min_Length_List_Helper_Helper_Helper_Helper_Helper_Helper(lst):\n                                # Define the function to find the length of the smallest list in a list of lists\n                                def Find_Min_Length_List_Helper_Helper_Helper_Helper_Helper_Helper_Helper(lst):\n                                    # Define the function to find the length of the smallest list in a list of lists\n                                    def Find_Min_Length_List_Helper_Helper_Helper_Helper_Helper_Helper_Helper_Helper(lst):\n                                        # Define the function to find the length of the smallest list in a list of lists\n                                        def Find_Min_Length_List_Helper_Helper_Helper_Helper_Helper_Helper_Helper_Helper_Helper(lst):\n                                            # Define the function to find the length of the smallest list in a list of lists\n                                            def Find_Min_Length_List_Helper_Helper_Helper_Helper_Helper_Helper"], ["\n\n# <func> # Python \n# Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\n    # Write your code here.\n    divisors = []\n    for I in range(1, n+1):\n        if n % I == 0:\n            divisors.append(i)\n    return len(divisors)\n\n# Test the function with some examples."], ["\n\n# <func> # Python \n# Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\ndef frequency_lists(list1):\n    # Convert list to dictionary\n    dict_list = {}\n    for item in list1:\n        if item not in dict_list:\n            dict_list[item] = 1\n        else:\n            dict_list[item] += 1\n    return dict_list\n\n# Example usage\nlist1 = [1, 2, 3, 4, 5]\ndict_list = frequency_lists(list1)"], ["\n\n# <func> # Python \n# Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n\n# Testing the function\nnumbers = [1, 2, 3, 4, 5]\nresult = multiply_num(numbers)"], ["\n\n# <func> # Python \n# Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\ndef decimal_to_binary(n):\n    binary_str = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_str = str(remainder) + binary_str\n        n = int(n / 2)\n    return binary_str\n\n# Test the function with some sample inputs"], ["\n\n# <func> # Python \n# Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\ndef next_smallest_palindrome(num):\n    # Convert the input number to a string\n    num_str = str(num)\n    \n    # Split the string into individual characters\n    num_chars = num_str.split()\n    \n    # Initialize a list to store the palindrome characters\n    palindrome_chars = []\n    \n    # Loop through each character in the input string\n    for char in num_chars:\n        # If the current character is a palindrome, add it to the list\n        if char.isdigit() and char.isalpha():\n            palindrome_chars.append(char)\n    \n    # Return the list of palindrome characters\n    return palindrome_chars\n\n# Test the function with some sample inputs"], ["\n\n# <func> # Python \n# Write a function to find the kth element in the given array using 1-based indexing.\ndef kth_element(arr, k):\n    # Check if k is less than or equal to the length of the array\n    if k < len(arr):\n        # If k is less than the length of the array, return the kth element\n        return arr[k]\n    else:\n        # If k is greater than or equal to the length of the array, return None\n        return None\n\n# Example usage\narr = [1, 2, 3, 4, 5]\nkth_element(arr, 3) # Returns 4\nkth_element(arr, 6) # Returns None\n\n# Output:\n# kth_element([1, 2, 3, 4, 5], 3) returns 4\n# kth_element([1, 2, 3, 4, 5], 6) returns None"], ["\n\n# <func> # Python \n# Write a function to convert a snake case string to camel case string.\ndef snake_to_camel(word):\n    # split the string into words\n    words = word.split()\n    \n    # convert each word to lowercase\n    words = [w.lower() for w in words]\n    \n    # convert each word to camel case\n    return ''.join(word.title() for word in words)\n\n# test the function"], ["\n\n# <func> # Python \n# Write a function to find the Eulerian number a(n, m).\ndef eulerian_num(n, m):\n    # Initialize variables\n    a = 1\n    for I in range(n):\n        for j in range(m):\n            if a[i] + a[j] == a[i+j]:\n                a[i+j] += 1\n    return a\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(input_list):\n    # Create a new list to store the sorted sublists\n    sorted_sublists = []\n    \n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Create a new list to store the sorted sublist\n        sorted_sublist = []\n        \n        # Loop through each element in the sublist\n        for element in sublist:\n            # If the element is not a string, skip it\n            if isinstance(element, str):\n                continue\n            \n            # If the element is not a string and is not a number, skip it\n            if not isinstance(element, str) and not isinstance(element, int):\n                continue\n            \n            # Append the element to the sorted sublist\n            sorted_sublist.append(element)\n            \n        # Add the sorted sublist to the sorted_sublists list\n        sorted_sublists.append(sorted_sublist)\n        \n    # Return the sorted sublists\n    return sorted_sublists\n\n# Example usage\ninput_list = [['apple', 'banana', 'cherry'], ['orange', 'grape', 'kiwi'], ['banana', 'orange', 'pear']]\nsorted_sublists = sort_sublists(input_list)"], ["\n\n# <func> # Python \n# Write a python function to count true booleans in the given list.\ndef count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n\n# Example usage:\nlst = [1, 0, 1, 1, 1, 0, 1, 1, 1, 1]\ncounted_lst = count(lst)"], ["\n\n# <func> # Python \n# Write a function to append the given list to the given tuples.\ndef add_lists(test_list, test_tup):\n    test_tup.append(test_list)\n    return test_tup\n\n# Example usage:\ntest_list = [1, 2, 3]\ntest_tup = [(1, 2), (3, 4), (5, 6)]\nresult = add_lists(test_list, test_tup)"], ["\nimport heapq\n\n# <func> # Python \n# Write a function to merge three lists into a single sorted list.\ndef merge_sorted_list(num1,num2,num3):\n    # Create a new list to hold the merged sorted list\n    merged_list = []\n    \n    # Loop through each element in num1\n    for I in range(len(num1)):\n        # If the current element is less than the current element in num2\n        if num1[i] < num2[i]:\n            # Append the current element to the merged list\n            merged_list.append(num1[i])\n    \n    # Loop through each element in num2\n    for I in range(len(num2)):\n        # If the current element is less than the current element in num3\n        if num2[i] < num3[i]:\n            # Append the current element to the merged list\n            merged_list.append(num2[i])\n    \n    # Loop through each element in num3\n    for I in range(len(num3)):\n        # If the current element is less than the current element in num1\n        if num3[i] < num1[i]:\n            # Append the current element to the merged list\n            merged_list.append(num3[i])\n    \n    # Return the merged sorted list\n    return merged_list\n\n# Example usage\nnum1 = [1, 3, 5, 7, 9]\nnum2 = [2, 4, 6, 8, 10]\nnum3 = [3, 5, 7, 9, 11]\n\nmerged_list = merge_sorted_list(num1, num2, num3)"], ["\n\n# <func> # Python \n# Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\ndef odd_Equivalent(s,n):\n    count = 0\n    for I in range(n):\n        temp = s[i]\n        s[i] = s[n-i-1]\n        s[n-i-1] = temp\n    return count\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to find the common elements in given nested lists.\ndef common_in_nested_lists(nestedlist):\n    common_elements = []\n    for I in range(len(nestedlist[0])):\n        for j in range(len(nestedlist)):\n            if nestedlist[i][j] == nestedlist[j][i]:\n                common_elements.append(nestedlist[i][j])\n    return common_elements\n\n# Example usage:\nnestedlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nnestedlist2 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ncommon_elements = common_in_nested_lists(nestedlist1)"], ["\n\n# <func> # Python \n# Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n# Example usage:\ncheck_integer(\"123\") # True\ncheck_integer(\"123.45\") # False\ncheck_integer(\"123.456\") # False\ncheck_integer(\"123.4567\") # False\ncheck_integer(\"123.45678\") # False\ncheck_integer(\"123.456789\") # False\ncheck_integer(\"123.4567890\") # False\ncheck_integer(\"123.45678901\") # False\ncheck_integer(\"123.456789012\") # False\ncheck_integer(\"123.4567890123\") # False\ncheck_integer(\"123.45678901234\") # False\ncheck_integer(\"123.456789012345\") # False\ncheck_integer(\"123.4567890123456\") # False\ncheck_integer(\"123.45678901234567\") # False\ncheck_integer(\"123.456789012345678\") # False\ncheck_integer(\"123.4567890123456789\") # False\ncheck_integer(\"123.45678901234567890\") # False\ncheck_integer(\"123.456789012345678901\") # False\ncheck_integer(\"123.4567890123456789012\") # False\ncheck_integer(\"123.45678901234567890123\") #"], ["\n\n# <func> # Python \n# Write a function to convert a given tuple of positive integers into a single integer.\ndef tuple_to_int(nums):\n    # Convert each element in nums to an integer\n    int_nums = [int(num) for num in nums]\n    \n    # Return the sum of all the integers in the list\n    return sum(int_nums)\n\n# Example usage:\nnums = (1, 2, 3, 4)\nresult = tuple_to_int(nums)"], ["\n\n# <func> # Python \n# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string):\n    return string.split()\n\n# Example usage:\nstring_to_list(\"hello world\") # Output: ['hello', 'world']\nstring_to_list(\"  hello  world\") # Output: ['hello', 'world']\nstring_to_list(\"hello world \") # Output: ['hello', 'world']\nstring_to_list(\"hello world  \") # Output: ['hello', 'world']\nstring_to_list(\"hello world  \") # Output: ['hello', 'world']\nstring_to_list(\"hello world  \") # Output: ['hello', 'world']\nstring_to_list(\"hello world  \") # Output: ['hello', 'world']\nstring_to_list(\"hello world  \") # Output: ['hello', 'world']\nstring_to_list(\"hello world  \") # Output: ['hello', 'world']\nstring_to_list(\"hello world  \") # Output: ['hello', 'world']\nstring_to_list(\"hello world  \") # Output: ['hello', 'world']\nstring_to_list(\"hello world  \") # Output: ['hello', 'world']\nstring_to_list(\"hello world  \") # Output: ['hello', 'world']\nstring_to_list(\"hello world  \") # Output: ['hello', 'world']\nstring_to_list(\"hello world  \") # Output: ['hello', 'world']\nstring_to_list(\"hello world  \") # Output: ['hello', 'world']\nstring_to_list(\"hello world  \") # Output: ['hello', 'world']\nstring_to_list(\"hello world  \") # Output: ['hello', 'world']\nstring_to_list(\"hello world  \") # Output: ['hello', 'world']\nstring_to_list(\"hello world  \") # Output: ['hello', 'world']\nstring_to_list(\"hello world  \") # Output: ['hello', 'world']\nstring_to_list(\"hello world  \") # Output: ['hello', 'world']\nstring_to_list(\"hello world  \") # Output: ['hello', 'world"], ["\n\n# <func> # Python \n# Write a python function to find the element that appears only once in a sorted array.\ndef search(arr):\n    n = len(arr)\n    for I in range(n):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None\n\n# Example usage:\narr = [1, 2, 3, 4, 5]"], ["\n\n# <func> # Python \n# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1):\n    max_product = 0\n    for I in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5]"], ["\n\n# <func> # Python \n# Write a function to sum all amicable numbers from 1 to a specified number.\ndef div_sum(num):\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through all numbers from 1 to num\n    for I in range(2, num+1):\n        # If num is divisible by I, add it to the sum\n        if num % I == 0:\n            sum += I\n    \n    # Return the sum of all amicable numbers\n    return sum\n\n# Call the function with a specified number"], ["\nimport cmath\n\n# <func> # Python \n# Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\n    # Check if the input is a complex number\n    if not isinstance(a,complex):\n        raise TypeError(\"Input must be a complex number.\")\n    if not isinstance(b,complex):\n        raise TypeError(\"Input must be a complex number.\")\n    \n    # Calculate the real part of the complex number\n    r = a.real\n    i = a.imag\n    \n    # Calculate the imaginary part of the complex number\n    s = b.real\n    t = b.imag\n    \n    # Calculate the angle in radians\n    angle = atan2(t,s)\n    \n    # Return the angle in radians\n    return angle\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string):\n    count_0 = 0\n    count_1 = 0\n    for I in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        elif string[i] == '1':\n            count_1 += 1\n    return count_0 - count_1\n\n# Testing the function"], ["\nimport math\n\n# <func> # Python \n# Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b):\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each number in the range [a,b]\n    for I in range(a,b+1):\n        # Check if the current number is a common divisor of a and b\n        if a % I == 0 and b % I == 0:\n            # If yes, add the current number to the sum\n            sum += I\n    return sum\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a function to multiply two integers.\ndef multiply_int(x, y):\n    return x * y\n\n# Test the function with some examples."], ["\n\n# <func> # Python \n# Write a function to find words that are longer than n characters from a given list of words.\ndef long_words(n, s):\n    return [word for word in s if len(word) > n]\n\n# Testing the function\nlong_words(3, [\"apple\", \"banana\", \"cherry\", \"orange\", \"pear\"])"], ["\n\n# <func> # Python \n# Write a function to calculate whether the matrix is a magic square.\ndef magic_square_test(my_matrix):\n    # Check if the matrix is a magic square\n    if all(my_matrix[i][j] == my_matrix[j][i] for I in range(len(my_matrix)) for j in range(len(my_matrix[i]))) and len(my_matrix) == len(my_matrix[0]):\n        return True\n    else:\n        return False\n\n# Test the function with some sample matrices\nmatrix1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nmatrix2 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3]]\nmatrix3 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3], [4, 5, 6], [7, 8, 9]]\n"], ["\nfrom collections import \n# <func> # Python \n# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums):\n    # <func> # Python \n    # Initialize a dictionary to store the frequency of each number.\n    freq_dict = {}\n    # Initialize a counter to count the number of occurrences.\n    count = 0\n    # Loop through the list and update the frequency dictionary.\n    for num in nums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n        # Update the counter to count the number of occurrences.\n        count += freq_dict[num]\n    # Return the maximum frequency item.\n    return max(freq_dict.items(), key=lambda x: x[1])[0][0]\n\n# Example usage:\nnums = [1, 2, 3, 1, 4, 2, 1]"], ["\n\n# <func> # Python \n# Write a python function to reverse only the vowels of a given string (where y is not a vowel).\ndef reverse_vowels(str1):\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Loop through the string and check if the current character is a vowel\n    for I in range(len(str1)):\n        if str1[i] in 'aeiou':\n            # If the current character is a vowel, swap it with the next character\n            str1[i], str1[i+1] = str1[i+1], str1[i]\n    \n    return str1\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to convert a tuple to a string.\ndef tup_string(tup1):\n    return str(tup1)\n\n# Example usage:\ntup1 = (1, 2, 3)"], ["\n\n# <func> # Python \n# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums):\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n\n# Example usage:\nnums = [-2, -1, 0, 1, 2]"], ["\n\n# <func> # Python \n# Write a function to find the nth hexagonal number.\ndef hexagonal_num(n):\n    # Define the formula for the nth hexagonal number.\n    formula = (n * (n + 1)) // 2\n    # Return the hexagonal number.\n    return formula\n\n# Call the function with the desired value of n."], ["\n\n# <func> # Python \n# Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\ndef zero_count(nums):\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count / len(nums)\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n):\n    # Check if n is a power of 2\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        # Check if n is a power of 2 with odd number of 1s\n        for I in range(1, int(n/2)+1):\n            if n % I == 0:\n                return False\n        return True\n    else:\n        # Check if n is a power of 2 with even number of 1s\n        for I in range(1, int(n/2)+1):\n            if n % I == 0:\n                return False\n        return True\n\n# Example usage"], ["\nimport math\n\n# <func> # Python \n# Write a function to find the circumference of a circle.\ndef circle_circumference(r):\n    # Calculate the radius of the circle\n    radius = r\n    # Calculate the circumference of the circle\n    return 2 * math.pi * radius\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a function to flatten the list of lists into a single set of numbers.\ndef extract_singly(test_list):\n    # Define the function to extract the list of lists\n    def extract_list(lst):\n        # Define the function to extract the list of numbers\n        def extract_num(lst):\n            # Define the function to extract the single number\n            def extract_num_single(lst):\n                # Define the function to extract the single number\n                def extract_num_single_single(lst):\n                    # Define the function to extract the single number\n                    def extract_num_single_single_single(lst):\n                        # Define the function to extract the single number\n                        def extract_num_single_single_single_single(lst):\n                            # Define the function to extract the single number\n                            def extract_num_single_single_single_single_single(lst):\n                                # Define the function to extract the single number\n                                def extract_num_single_single_single_single_single_single(lst):\n                                    # Define the function to extract the single number\n                                    return lst\n                                return lst\n                            return lst\n                        return lst\n                    return lst\n                return lst\n            return lst\n        return lst\n    return extract_list(test_list)\n\n# Example usage\ntest_list = [1, 2, [3, 4], [5, [6, [7, 8]]]]"], ["\n\n# <func> # Python \n# Write a function to sort a list of elements.\ndef pancake_sort(nums):\n    # Sort the list in ascending order\n    nums.sort()\n    \n    # Return the sorted list\n    return nums\n\n# Example usage\nnums = [5, 2, 1, 4, 3]\nsorted_nums = pancake_sort(nums)"], ["\n\n# <func> # Python \n# Write a function to count number items that are identical in the same position of three given lists.\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for I in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr):\n    max_diff = arr[0]\n    for I in range(1, len(arr)):\n        if abs(arr[i] - max_diff) > abs(arr[i] - arr[i-1]):\n            max_diff = arr[i]\n    return max_diff\n\n# Testing the function\narr = [1, 2, 3, 4, 5]"], ["\n\n# <func> # Python \n# Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\ndef find_solution(a, b, n):\n    # Check if n is divisible by both a and b\n    if n % a != 0 or n % b != 0:\n        return None\n    \n    # Calculate x and y\n    x = n // a\n    y = n // b\n    \n    # Check if x and y are both divisible by a\n    if x % a != 0:\n        return None\n    \n    # Check if y is divisible by b\n    if y % b != 0:\n        return None\n    \n    # Return tuple (x, y)\n    return (x, y)\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\n    # Create a new list to store the elements that are present in list2\n    new_list = []\n    # Loop through each element in list1\n    for element in list1:\n        # Check if the element is present in list2\n        if element in list2:\n            # If the element is present, add it to the new list\n            new_list.append(element)\n    # Return the new list\n    return new_list\n\n# Example usage\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 3, 4, 5, 6]"], ["\n\n# <func> # Python \n# Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\ndef sum_series(n):\n    sum = 0\n    for I in range(1, n+1):\n        sum += (n-2*i)\n    return sum\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\ndef count_char_position(str1):\n    count = 0\n    for char in str1:\n        if char.lower() in string.ascii_lowercase:\n            count += 1\n    return count\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function that counts the number of pairs of integers in a list that xor to an even number.\ndef find_even_pair(A):\n    count = 0\n    for I in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a python function to find the smallest power of 2 greater than or equal to n.\ndef next_power_of_2(n):\n    # Base case: if n is 1, return 1\n    if n == 1:\n        return 1\n    # Recursive case: find the next power of 2 greater than or equal to n\n    return 2 ** (next_power_of_2(n - 1))\n\n# Test function"], ["\n\n# <func> # Python \n# Write a function to count the number of occurrences of a number in a given list.\ndef frequency(a,x):\n    count = 0\n    for I in a:\n        if I == x:\n            count += 1\n    return count\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], ["\n\n# <func> # Python \n# Write a function to find the sum of numbers in a list within a range specified by two indices.\ndef sum_range_list(list1, m, n):\n    sum_list = 0\n    for I in range(m, n+1):\n        sum_list += list1[i]\n    return sum_list\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to find the perimeter of a regular pentagon from the length of its sides.\ndef perimeter_pentagon(a):\n    return 5*a\n\n# Call the function with the length of the sides as an argument\nperimeter_pentagon(5) # Output: 20\n\n# Example usage:\nperimeter_pentagon(3) # Output: 20"], ["\n\n# <func> # Python \n# Write a function to count the number of occurence of the string 'std' in a given string.\ndef count_occurance(s):\n    count = 0\n    for char in s:\n        if char == 'std':\n            count += 1\n    return count\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n    for element in test_tuple:\n        if type(element) != type(tuple(element)):\n            return False\n    return True\n\n# Example usage:\ntest_tuple = (1, 2, 3)"], ["\nfrom bisect import bisect_left, bisect_right\n\n# <func> # Python \n# Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\ndef is_majority(arr, n, x):\n    # Initialize a counter to keep track of the number of occurrences of x\n    count = 0\n    # Loop through the array and count the occurrences of x\n    for I in range(n):\n        if arr[i] == x:\n            count += 1\n    # If the majority element occurs more than n/2 times, return True\n    if count > n / 2:\n        return True\n    else:\n        return False\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)\nx = 5"], ["\n\n# <func> # Python \n# Write a python function to count the number of set bits (binary digits with value 1) in a given number.\ndef count_Set_Bits(n):\n    count = 0\n    for I in range(1, 32):\n        if n & (1 << I) != 0:\n            count += 1\n    return count\n\n# Example usage:\nn = 12345678901234567890123456789012\ncount = count_Set_Bits(n)"], ["\n\n# <func> # Python \n# Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str1):\n    # Initialize an empty list to store odd index values\n    odd_index_list = []\n    \n    # Iterate over the string and check if the index is odd\n    for I in range(len(str1)):\n        if I % 2 != 0:\n            odd_index_list.append(i)\n    \n    # Return the odd index list\n    return odd_index_list\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n\n# Call the function with three numbers"], ["\n\n# <func> # Python \n# Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\ndef replace_blank(str1, char):\n    return ''.join(c for c in str1 if c != char)\n\n# Example usage:\nstr1 = \"   Hello   \"\nchar = \" \""], ["\nimport heapq\n\n# <func> # Python \n# Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\ndef larg_nnum(list1, n):\n    # Initialize a list to store the n largest items\n    largest_num_list = []\n    \n    # Loop through the list and find the n largest numbers\n    for I in range(len(list1)):\n        if I == n:\n            break\n        elif list1[i] > largest_num_list[-1]:\n            largest_num_list.append(list1[i])\n    \n    # Return the list of n largest numbers\n    return largest_num_list\n\n# Example usage\nlargest_num_list = larg_nnum([1, 2, 3, 4, 5], 2)"], ["\nimport math\n\n# <func> # Python \n# Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r, h):\n    # Calculate the lateral surface area of a cylinder\n    # using the formula: lateral surface area = 2 * pi * r * h\n    return 2 * math.pi * r * h\n\n# Call the function with the required arguments\nlateralsuface_cylinder(1, 1)"], ["\n\n# <func> # Python \n# Write a function to find the volume of a cube given its side length.\ndef volume_cube(l):\n    return (l ** 3) * 3.14159\n\n# Test the function with different side lengths"], ["\n\n# <func> # Python \n# Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n):\n    # Your code here\n    return n\n\n# Call the function with a number\neven_bit_set_number(123) # Output: 123\n\n# Example usage:\neven_bit_set_number(123) # Output: 123\neven_bit_set_number(0) # Output: 0\neven_bit_set_number(1) # Output: 1\neven_bit_set_number(2) # Output: 2\neven_bit_set_number(3) # Output: 3\neven_bit_set_number(4) # Output: 0\neven_bit_set_number(5) # Output: 1\neven_bit_set_number(6) # Output: 2\neven_bit_set_number(7) # Output: 3\neven_bit_set_number(8) # Output: 0\neven_bit_set_number(9) # Output: 1\neven_bit_set_number(10) # Output: 2\neven_bit_set_number(11) # Output: 3\neven_bit_set_number(12) # Output: 0\neven_bit_set_number(13) # Output: 1\neven_bit_set_number(14) # Output: 2\neven_bit_set_number(15) # Output: 3\neven_bit_set_number(16) # Output: 0\neven_bit_set_number(17) # Output: 1\neven_bit_set_number(18) # Output: 2\neven_bit_set_number(19) # Output: 3\neven_bit_set_number(20) # Output: 0\neven_bit_set_number(21) # Output: 1\neven_bit_set_number(22) # Output: 2\neven_bit_set_number(23) # Output: 3\neven_bit_set_number(2"], ["\nfrom collections import Counter \n\n# <func> # Python \n# Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\ndef check_occurences(test_list):\n    # Initialize a dictionary to store the counts\n    counts = {}\n    \n    # Iterate over each tuple in the list\n    for tuple in test_list:\n        # Check if the tuple already exists in the dictionary\n        if tuple in counts:\n            counts[tuple] += 1\n        else:\n            # If it doesn't exist, add it to the dictionary\n            counts[tuple] = 1\n    \n    # Return the dictionary\n    return counts\n\n# Example usage\ntest_list = [(1, 2), (2, 3), (3, 4), (1, 5), (2, 6), (3, 7), (4, 8), (5, 9), (6, 10)]\ncounts = check_occurences(test_list)"], ["\n\n# <func> # Python \n# Write a python function to count the number of non-empty substrings of a given string.\ndef number_of_substrings(str1):\n    count = 0\n    for I in range(len(str1)):\n        if str1[i:i+2] in str1:\n            count += 1\n    return count\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m, n):\n    total_number_of_sequences = 0\n    for I in range(m+1, n+1):\n        if I > 2 * m:\n            break\n        total_number_of_sequences += 1\n    return total_number_of_sequences\n\n# Example usage:\nm = 5\nn = 3"], ["\n\n# <func> # Python \n# Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\ndef replace_list(list1, list2):\n    return [item for item in list1 if item not in list2] + list2\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 3, 4, 5, 6]"], ["\n\n# <func> # Python \n# Write a function to count the total number of characters in a string.\ndef count_charac(str1):\n    count = 0\n    for char in str1:\n        if char in string.ascii_letters:\n            count += 1\n    return count\n\n# Example usage:"], ["\nimport math  \n\n# <func> # Python \n# Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N):\n    # Define the function body\n    if N == 1:\n        return 1\n    elif N % 2 == 0:\n        return N * (N + 1) // 2\n    else:\n        return N * (N + 1) // 2 + 1\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\ndef max_sum(arr):\n    # Initialize max sum to 0\n    max_sum = 0\n    \n    # Iterate over the array\n    for I in range(len(arr)):\n        # Check if the current element is greater than the previous one\n        if arr[i] > arr[i-1]:\n            # If it is, update max sum\n            max_sum += arr[i]\n            \n    return max_sum\n\n# Test the function\narr = [1, 3, 2, 5, 7, 4]\nmax_sum = max_sum(arr)"], ["\n\n# <func> # Python \n# Write a function to find the length of the longest palindromic subsequence in the given string.\ndef lps(str1):\n    # Initialize variables\n    lps_count = 0\n    longest_palindrome = \"\"\n    \n    # Loop through the string\n    for I in range(len(str1)):\n        # Check if the current character is a palindrome\n        if str1[i] == str1[i+1] and str1[i] != \" \":\n            # If it is, increment the length of the longest palindrome\n            lps_count += 1\n            # If the length of the longest palindrome is greater than the current length, update the longest palindrome\n            if lps_count > lps_count:\n                longest_palindrome = str1[i:i+2]\n                lps_count = 0\n    \n    return longest_palindrome\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\ndef count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count\n\n# Example usage:\ntup = (1, 2, 3, 4, 5)\nx = 3\ncount = count_X(tup, x)"], ["\n\n# <func> # Python \n# Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\ndef insert_element(list1, element):\n    new_list = []\n    for I in range(len(list1)):\n        if I != 0:\n            new_list.append(list1[i-1])\n    new_list.append(element)\n    return new_list\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5]\nelement = 7\nresult = insert_element(list1, element)"], ["\nimport cmath  \n\n# <func> # Python \n# Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):\n    # Convert the complex numbers to real and imaginary parts\n    real = numbers[0]\n    imag = numbers[1]\n    \n    # Calculate the angle in radians\n    angle = math.atan2(imag, real)\n    \n    # Return the polar coordinates\n    return (angle, real, imag)\n\n# Example usage\nnumbers = (1, 4, 7)\npolar_coords = convert(numbers)"], ["\n\n# <func> # Python \n# Write a python function that returns the number of integer elements in a given list.\ndef count_integer(list1):\n    count = 0\n    for num in list1:\n        if type(num) == int:\n            count += 1\n    return count\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], ["\nfrom itertools import combinations_with_replacement \n\n# <func> # Python \n# Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\ndef combinations_colors(l, n):\n    # Create a list of tuples with the first n elements of the list\n    combos = []\n    for I in range(n):\n        combos.append(list(combinations(l, i)))\n    return combos\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ndef count_Primes_nums(n):\n    # Write your code here\n    primes = [2]\n    for I in range(3, int(n**0.5)+1, 2):\n        if n % I == 0:\n            continue\n        primes.append(i)\n    return len(primes)\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\ndef swap_numbers(a,b):\n    return (b,a)\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\n    # Your code here\n    return test_tup1, test_tup2\n\n# Call the function\ntest_tup1, test_tup2 = maximize_elements(test_tup1, test_tup2)"], ["\n\n# <func> # Python \n# Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n):\n    # Define the function to find the nth newman\u2013shanks\u2013williams prime number\n    # by iterating through all possible numbers up to n\n    for I in range(1, n+1):\n        # Check if the number is prime\n        if I == 2:\n            continue\n        elif I > 2 and not is_prime(i):\n            # If the number is not prime, it is not a newman\u2013shanks\u2013williams prime number\n            return False\n        else:\n            # If the number is prime, it is a newman\u2013shanks\u2013williams prime number\n            return True\n\n# Call the function to find the nth newman\u2013shanks\u2013williams prime number\nn = int(input(\"Enter a positive integer: \"))"], ["\n\n# <func> # Python \n# Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n    # Your code here\n    return test_tup1, test_tup2\n\n# Call the function with two tuples\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\nresult = division_elements(test_tup1, test_tup2)"], ["\n\n# <func> # Python \n# Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\ndef split_two_parts(list1, L):\n    # Your code here\n    return (list1[:L], list1[L:])\n\n# Test the function with some examples\nlist1 = [1, 2, 3, 4, 5]\nL = 2\nresult = split_two_parts(list1, L)"], ["\n\n# <func> # Python \n# Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n    # Calculate dog's age in years\n    dog_age = h_age / 365.25\n    # Return dog's age in years\n    return dog_age\n\n# Test the function with different input values\ndog_age(12)  # Output: 12.0\ndog_age(15)  # Output: 14.0\ndog_age(20)  # Output: 18.0\ndog_age(25)  # Output: 21.0\ndog_age(30)  # Output: 24.0\ndog_age(35)  # Output: 27.0\ndog_age(40)  # Output: 30.0\ndog_age(45)  # Output: 33.0\ndog_age(50)  # Output: 36.0\ndog_age(55)  # Output: 39.0\ndog_age(60)  # Output: 42.0\ndog_age(65)  # Output: 45.0\ndog_age(70)  # Output: 48.0\ndog_age(75)  # Output: 51.0\ndog_age(80)  # Output: 54.0\ndog_age(85)  # Output: 57.0\ndog_age(90)  # Output: 60.0\ndog_age(95)  # Output: 63.0\ndog_age(100)  # Output: 66.0\ndog_age(105)  # Output: 69.0\ndog_age(110)  # Output: 72.0\ndog_age(115)  # Output: 75.0\ndog_age(120)  # Output: 78.0\ndog_age(125)  # Output: 81.0\ndog_age("], ["\n\n# <func> # Python \n# Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\ndef list_split(S, step):\n    return [S[i::step] for I in range(0, len(S), step)]\n\n# Example usage:\nlst = [1, 2, 3, 4, 5]\nsplits = list_split(lst, 3)"], ["\n\n# <func> # Python \n# Write a function to find the lateral surface area of a cube given its side length.\ndef lateralsurface_cube(l):\n    return 6 * l * l * l\n\n# Test the function with different cube sizes\nl = 10\nlateralsurface_cube(l) # Output: 60\nl = 20\nlateralsurface_cube(l) # Output: 120\nl = 30\nlateralsurface_cube(l) # Output: 240\nl = 40\nlateralsurface_cube(l) # Output: 360\nl = 50\nlateralsurface_cube(l) # Output: 480\nl = 60\nlateralsurface_cube(l) # Output: 600\nl = 70\nlateralsurface_cube(l) # Output: 720\nl = 80\nlateralsurface_cube(l) # Output: 840\nl = 90\nlateralsurface_cube(l) # Output: 960\nl = 100\nlateralsurface_cube(l) # Output: 1080\nl = 110\nlateralsurface_cube(l) # Output: 1200\nl = 120\nlateralsurface_cube(l) # Output: 1320\nl = 130\nlateralsurface_cube(l) # Output: 1440\nl = 140\nlateralsurface_cube(l) # Output: 1560\nl = 150\nlateralsurface_cube(l) # Output: 1680\nl = 160\nlateralsurface_cube(l) # Output: 1792\nl = 170\nlateralsurface_cube(l) # Output: 1920\nl = 180\n"], ["\n\n# <func> # Python \n# Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\ndef square_Sum(n):\n    sum = 0\n    for I in range(1, n+1):\n        sum += i**2\n    return sum\n\n# Call the function with n = 10"], ["\n\n# <func> # Python \n# Write a function to find the n'th star number.\ndef find_star_num(n):\n    # Write your code here.\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    else:\n        return 0\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to find the ascii value of a character.\ndef ascii_value(k):\n    # Convert the character to a string\n    s = str(k)\n    # Convert the string to an integer\n    return int(s, 16)\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to find the sum of even numbers at even positions of a list.\ndef sum_even_and_even_index(arr):\n    sum = 0\n    for I in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n\n# Call the function with the list of numbers"], ["\n\n# <func> # Python \n# Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\ndef even_Power_Sum(n):\n    sum = 0\n    for I in range(1, n+1):\n        sum += i**5\n    return sum\n\n# Call the function with n = 10"], ["\n\n# <func> # Python \n# Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\ndef rear_extract(test_list):\n    rear_list = []\n    for tuple_element in test_list:\n        if tuple_element[1] == tuple_element[0]:\n            rear_list.append(tuple_element[0])\n    return rear_list\n\n# Example usage:\ntest_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nrear_extract(test_list)\n# Output: [7, 8, 9, 10]\n\n# Testing the function:"], ["\n\n# <func> # Python \n# Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\ndef substract_elements(test_tup1, test_tup2):\n    result = []\n    for I in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result\n\n# Testing the function\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (2, 3, 4, 5)\nresult = substract_elements(test_tup1, test_tup2)"], ["\nimport math  \n\n# <func> # Python \n# Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum( n):\n    # Define the binomial coefficient formula\n    binomial_coeff = (n + 1) // 2\n    # Calculate the sum of the even index binomial coefficients\n    sum_even = 0\n    for I in range(1, n+1):\n        sum_even += binomial_coeff * binomial_coeff * (2 * I - 1)\n    return sum_even\n\n# Test the function with some examples"], ["\nimport math\n\n# <func> # Python \n# Write a function that takes in the radius and height of a cylinder and returns the the volume.\ndef volume_cylinder(r,h):\n    # Calculate the volume using the formula V = \u03c0r\u00b2h\n    volume = math.pi * r**2 * h\n    return volume\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\ndef dict_filter(dict1, n):\n    return {k: v for k, v in dict1.items() if v >= n}\n\n# Example usage:\ndict1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nn = 3\nfiltered_dict = dict_filter(dict1, n)"], ["\n\n# <func> # Python \n# Write a function to find the number of elements that occurs before the tuple element in the given tuple.\ndef count_first_elements(test_tup):\n    count = 0\n    for I in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count\n\n# Example usage:\ntest_tup = (1, 2, 3, 4, 5)"], ["\n\n# <func> # Python \n# Write a function to find the nth decagonal number.\ndef is_num_decagonal(n):\n    # Define the formula for finding the nth decagonal number\n    # nth_decagonal = (n-1) * (n-2) * (n-3) * (n-4) * (n-5)\n    # nth_decagonal = (n-1) * (n-2) * (n-3) * (n-4) * (n-5) * (n-6)\n    # nth_decagonal = (n-1) * (n-2) * (n-3) * (n-4) * (n-5) * (n-6) * (n-7)\n    # nth_decagonal = (n-1) * (n-2) * (n-3) * (n-4) * (n-5) * (n-6) * (n-7) * (n-8)\n    # nth_decagonal = (n-1) * (n-2) * (n-3) * (n-4) * (n-5) * (n-6) * (n-7) * (n-8) * (n-9)\n    # nth_decagonal = (n-1) * (n-2) * (n-3) * (n-4) * (n-5) * (n-6) * (n-7) * (n-8) * (n-9) * (n-10)\n    # nth_decagonal = (n-1) * (n-2) * (n-3) * (n-4) * (n-5) * (n-6) * (n-7) * (n-8) * (n-9) * (n-10) * (n-11)\n    # nth_decagonal = (n-1) * (n-2) * (n-3) * (n-4) * (n-5) * (n-6) * (n-7) * (n-8)"], ["\n\n# <func> # Python \n# Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\ndef sequential_search(dlist, item):\n    for I in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n\n# Example usage:\ndlist = [1, 2, 3, 4, 5]\nitem = 3\nresult = sequential_search(dlist, item)"], ["\n\n# <func> # Python \n# Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n    # initialize a set to store unique elements\n    unique_set = set()\n    \n    # iterate over the list and add each element to the set\n    for element in test_list:\n        if element not in unique_set:\n            unique_set.add(element)\n    \n    # return True if the list is unique, False otherwise\n    return len(unique_set) == len(test_list)\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a function to subtract two lists element-wise.\ndef sub_list(nums1,nums2):\n    # Your code here\n    return nums1 - nums2\n\n# Example usage\nnums1 = [1, 2, 3]\nnums2 = [4, 5, 6]\nsub_list(nums1, nums2) # Output: [5, 6]\n\nnums3 = [1, 2, 3, 4]\nsub_list(nums3, nums3) # Output: [1, 2, 3, 4]"], ["\n\n# <func> # Python \n# Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n):\n    # check if n is positive\n    if n < 0:\n        return False\n    \n    # check if n is divisible by 10\n    if n % 10 != 0:\n        return False\n    \n    # loop through each digit\n    for digit in range(10):\n        # check if n is divisible by 10\n        if n % 10 == digit:\n            # check if n is less than or equal to digit itself\n            if n <= digit:\n                return False\n    \n    return True\n\n# test function"], ["\n\n# <func> # Python \n# Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\ndef check_element(list1, element):\n    if all(list1[i] == element for I in range(len(list1))):\n        return True\n    else:\n        return False\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5]\nelement = 3\nresult = check_element(list1, element)"], ["\nimport re\n\n# <func> # Python \n# Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\ndef text_match_two_three(text):\n    # Split the string into words\n    words = text.split()\n    \n    # Check if the first word contains 'a' followed by two or three 'b' characters\n    if any(word.startswith('a') and len(word) == 2 or len(word) == 3 for word in words):\n        return True\n    else:\n        return False\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k):\n    # initialize max sum to 0\n    max_sum = 0\n    \n    # initialize max_index to -1\n    max_index = -1\n    \n    # iterate through the array\n    for I in range(n):\n        # if the current element is greater than the current max sum, update max sum and max index\n        if a[i] > max_sum:\n            max_sum = a[i]\n            max_index = i\n            \n        # if the current element is equal to the current max sum, update max sum and max index\n        elif a[i] == max_sum:\n            max_sum = a[i]\n            max_index = i\n            \n    # if the current element is greater than the current max sum, update max sum and max index\n    if a[max_index] > max_sum:\n        max_sum = a[max_index]\n        max_index = max_index\n    \n    # return the maximum sum of the contiguous subarray\n    return max_sum\n\n# test cases"], ["\n\n# <func> # Python \n# Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\ndef square_Sum(n):\n    sum = 0\n    for I in range(1, n+1):\n        sum += i**2\n    return sum\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to find the list of maximum length in a list of lists.\ndef max_length(list1):\n    max_length = 0\n    for I in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] > max_length:\n                max_length = list1[i][j]\n    return max_length\n\n# Testing the function\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nmax_length_list1 = max_length(list1)"], ["\n\n# <func> # Python \n# Write a python function to find quotient of two numbers (rounded down to the nearest integer).\ndef find(n,m):\n    quotient = n // m\n    remainder = n % m\n    return quotient, remainder\n\n# Example usage:\nn = 10\nm = 5\nquot, rem = find(n, m)"], ["\nimport math\n\n# <func> # Python \n# Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n    \"\"\"\n    This function takes two sides of a right angled triangle and returns the third side.\n    \"\"\"\n    # Calculate the hypotenuse\n    hypotenuse = math.sqrt(w**2 + h**2)\n    \n    # Calculate the other side\n    other_side = w / hypotenuse\n    \n    # Return the result\n    return other_side\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n\n# Example usage:\nmax_val([1, 2, 3, 4, 5]) # Output: 5\nmax_val([1, 2, 3, 4, 5, 6]) # Output: 6\nmax_val([1, 2, 3, 4, 5, 6, 7]) # Output: 7"], ["\n\n# <func> # Python \n# Write a python function to count inversions in an array.\ndef get_Inv_Count(arr):\n    # initialize variables\n    count = 0\n    # loop through the array\n    for I in range(len(arr)):\n        # check if the current element is greater than the previous one\n        if arr[i] > arr[i-1]:\n            # increment the count if the element is greater\n            count += 1\n    return count\n\n# test the function\narr = [3, 1, 4, 2, 5]\ninv_count = get_Inv_Count(arr)"], ["\n\n# <func> # Python \n# Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n    # Create a new list to hold the flattened list\n    new_list = []\n    \n    # Loop through each element in the original list\n    for item in list1:\n        # If the item is not a list, add it to the new list\n        if type(item) != list:\n            new_list.append(item)\n        # If the item is a list, add all the sub-lists to the new list\n        else:\n            for sub_list in flatten_list(item):\n                new_list.extend(sub_list)\n    \n    return new_list\n\n# Example usage\nlist1 = [1, [2, [3, [4, 5], [6, 7]], [8, 9]], [10, [11, 12, 13, 14]]]\nflattened_list = flatten_list(list1)"], ["\nfrom collections import \n# <func> # Python \n# Write a function to calculate the maximum aggregate from the list of tuples.\ndef max_aggregate(stdata):\n    # <code> # Python \n    # Define the function to calculate the maximum aggregate from the list of tuples.\n    max_agg = stdata[0][1]\n    for item in stdata:\n        if item[1] > max_agg:\n            max_agg = item[1]\n    return max_agg\n\n# Example usage\nmax_agg = max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)])"], ["\n\n# <func> # Python \n# Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n):\n    count = 0\n    for I in range(n):\n        count += bin(ord(i)).count('1')\n    return count\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to find the depth of a dictionary.\ndef dict_depth_aux(d):\n    # Initialize the depth to 0\n    depth = 0\n    \n    # Traverse the dictionary and update the depth\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth += dict_depth_aux(v)\n        else:\n            depth += 1\n    \n    return depth\n\n# Example usage\nd = {'a': 1, 'b': {'c': 2, 'd': 3}, 'e': 4}"], ["\nimport re\n\n# <func> # Python \n# Write a function to return two words from a list of words starting with letter 'p'.\ndef start_withp(words):\n    # Initialize a list to store the words\n    p_words = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the word starts with 'p'\n        if word.startswith('p'):\n            # If the word starts with 'p', add it to the list\n            p_words.append(word)\n    # Return the list of words starting with 'p'\n    return p_words\n\n# Example usage\nwords = ['apple', 'banana', 'cherry', 'grape', 'orange']\np_words = start_withp(words)"], ["\n\n# <func> # Python \n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\n    # Base case: if k is 0, return the maximum sum of the prefix\n    if k == 0:\n        return max(a[index:])\n    \n    # Base case: if k is 1, return the maximum sum of the prefix\n    if k == 1:\n        return a[index]\n    \n    # Base case: if k is greater than 1, find the maximum sum of the prefix and the subsequence up to and including k-1\n    max_sum = max(a[index:], key=lambda x: sum(a[index:i+1] < x for I in range(i, k)))\n    \n    # Update the maximum sum of the prefix and the subsequence up to and including k-1\n    return max(max_sum, a[index:i+1])\n\n# Test cases:\n# Example 1:\na = [1, 3, 5, 7, 9]\nn = 5\nindex = 2\nk = 3"], ["\n\n# <func> # Python \n# Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\ndef large_product(nums1, nums2, N):\n    # Initialize variables\n    largest_product = 1\n    for I in range(len(nums1)):\n        # Calculate the product of the two numbers\n        product = nums1[i] * nums2[i]\n        # If the product is greater than the largest product, update the largest product\n        if product > largest_product:\n            largest_product = product\n    return largest_product\n\n# Test the function with sample inputs"], ["\n\n# <func> # Python \n# Write a python function to find the maximum of two numbers.\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\n\n# Call the function with two numbers"], ["\n\n# <func> # Python \n# Write a function to convert a given string to a tuple of characters.\ndef string_to_tuple(str1):\n    # Convert the string to a list of characters\n    str_list = str1.split()\n    # Convert the list to a tuple\n    return tuple(str_list)\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the left most unset bit.\n    \"\"\"\n    # Initialize the left most unset bit to -1\n    left_most_unset_bit = -1\n    \n    # Loop through the binary representation of n\n    for I in range(len(str(n))):\n        # If the current bit is 1, set the left most unset bit to the current bit\n        if n & (1 << I):\n            left_most_unset_bit = I\n            \n    # Return the left most unset bit\n    return left_most_unset_bit\n\n# Example usage:\nn = 101010101010101010101010101010101010101010101010101010101010101\nleft_most_unset_bit = set_left_most_unset_bit(n)"], ["\nimport math\n\n# <func> # Python \n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    # Calculate the volume of a sphere with radius r and height h\n    vol = 4/3 * math.pi * r**3 * h\n    return vol\n\n# Call the function to calculate the volume of a cone with radius r = 1 and height h = 1\nvol_cone = volume_cone(1,1)"], ["\n\n# <func> # Python \n# Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n):\n    # Base case: if n is 1, return 1\n    if n == 1:\n        return 1\n    \n    # Recursive case: find the highest power of 2 that is less than or equal to n\n    return max(highest_Power_of_2(n // 2), n)\n\n# Test the function with some examples"], ["\n\n# <func> # Python \n# Write a function to find the n'th lucas number.\ndef find_lucas(n):\n    # Define the Lucas sequence\n    a, b, c, d = 1, 1, 1, 1\n    for I in range(2, n+1):\n        a, b, c, d = b, a*b + c, a*c + b, a*d + c*b + b\n    return d\n\n# Call the function with the n argument\nlucas_number = find_lucas(10)"], ["\n\n# <func> # Python \n# Write a function to apply a given format string to all of the elements in a list.\ndef add_string(list_, string):\n    for element in list_:\n        print(f\"{element}{string}\")\n\n# Call the function with a list of strings and a string to be added\nadd_string([1, 2, 3], \"hello\")\n\n# Output:\n# 1hello\n# 2hello\n# 3hello"], ["\n\n# <func> # Python \n# Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\n    # Convert list to dictionary\n    d = {}\n    for item in l1:\n        d[item] = {}\n        for key, value in l2.items():\n            d[item][key] = value\n    # Convert dictionary to list\n    return d.values()\n\n# Example usage\nl1 = [1, 2, 3]\nl2 = {'a': 1, 'b': 2}\nl3 = {'c': 3}\nd = convert_list_dictionary(l1, l2, l3)"], ["\n\n# <func> # Python \n# Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\n    # Define the function to find the maximum sum\n    def f(n):\n        if n < 2:\n            return n\n        else:\n            return max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n    \n    # Call the function to find the maximum sum\n    return f(n)\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to check if given tuple contains no duplicates.\ndef check_distinct(test_tup):\n    # Initialize a set to store unique elements\n    set_of_unique_elements = set()\n    # Loop through the tuple and add each element to the set\n    for element in test_tup:\n        if element not in set_of_unique_elements:\n            set_of_unique_elements.add(element)\n    # Return True if the set contains no duplicates, False otherwise\n    return len(set_of_unique_elements) == len(test_tup)\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n    # Initialize a list to store the first non-repeating character\n    non_repeating_char = []\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is not in the list, add it to the non-repeating list\n        if char not in non_repeating_char:\n            non_repeating_char.append(char)\n    \n    # Return the first non-repeating character in the list\n    return non_repeating_char[0]\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a function to find the median of three numbers.\ndef median_numbers(a,b,c):\n    # Write your code here.\n    if a>b and a>c:\n        return a\n    elif b>a and b>c:\n        return b\n    else:\n        return c\n\n# Test the function with some examples."], ["\n\n# <func> # Python \n# Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n\n# Example usage:\nnums = [123, 456, 789]"], ["\n\n# <func> # Python \n# Write a python function to find the minimum of two numbers.\ndef minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b\n\n# Call the function with two numbers"], ["\n\n# <func> # Python \n# Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex, element):\n    for x in tuplex:\n        if x == element:\n            return True\n    return False\n\n# Example usage:\ntuples = (1, 2, 3, 4, 5)\nelement = 3"], ["\n\n# <func> # Python \n# Write a python function to find whether the parity of a given number is odd.\ndef find_Parity(x):\n    if x % 2 == 1:\n        return True\n    else:\n        return False\n\n# Call the function with some test cases"], ["\n\n# <func> # Python \n# Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\n    # Initialize the minimum product to 1\n    min_product = 1\n    \n    # Loop through the list\n    for I in range(len(list1)):\n        # Find the product of the first and second elements in the tuple\n        product = list1[i][0] * list1[i][1]\n        \n        # If the product is less than the current minimum, update the minimum product\n        if product < min_product:\n            min_product = product\n    \n    return min_product\n\n# Example usage\nlist1 = [('apple', 'banana'), ('banana', 'orange'), ('orange', 'grape')]"], ["\n\n# <func> # Python \n# Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val\n\n# Example usage:\nlistval = [5, 10, 20, 30, 40]\nmin_val_result = min_val(listval)"], ["\n\n# <func> # Python \n# Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n    # Initialize an empty list to store the odd numbers\n    odd_numbers = []\n    \n    # Loop through the list and check if the current number is odd\n    for num in l:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    \n    # Return the list of odd numbers\n    return odd_numbers\n\n# Call the function with a list of integers\nodd_numbers = remove_odd([1, 3, 5, 7, 9])"], ["\n\n# <func> # Python \n# Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n    # check if n is a valid number\n    if n < 1:\n        raise ValueError(\"N must be a positive integer\")\n    \n    # check if list1 is a list of tuples\n    if not isinstance(list1, list):\n        raise TypeError(\"List1 must be a list of tuples\")\n    \n    # check if n is less than the length of list1\n    if n > len(list1):\n        raise ValueError(\"N must be less than or equal to the length of list1\")\n    \n    # initialize the result list\n    result = []\n    \n    # iterate over the list1 and extract the nth element\n    for I in range(n):\n        result.append(list1[i])\n    \n    return result\n\n# test the function with some examples"], ["\n\n# <func> # Python \n# Write a python function to check whether any value in a sequence exists in a sequence or not.\ndef overlapping(list1,list2):\n    for I in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr):\n    # Initialize the maximum product to 1\n    max_product = 1\n    \n    # Loop through the array\n    for I in range(len(arr)):\n        \n        # Calculate the product of the current element and the previous element\n        product = arr[i] * arr[i-1]\n        \n        # If the current product is greater than the current maximum product, update the maximum product\n        if product > max_product:\n            max_product = product\n    \n    return max_product\n\n# Test the function\narr = [1, 2, 3, 4, 5]"], ["\n\n# <func> # Python \n# Write a python function to find the element of a list having maximum length.\ndef Find_Max(lst):\n    max_len = 0\n    max_val = lst[0]\n    for I in range(1, len(lst)):\n        if lst[i] > max_val:\n            max_len = i\n            max_val = lst[i]\n    return max_val, max_len\n\n# Call the function with the list\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nmax_val, max_len = Find_Max(lst)"], ["\n\n# <func> # Python \n# Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        total_sum += num\n    return total_sum * len(list1)\n\n# Call the function with a list of numbers\nlist1 = [1, 2, 3, 4, 5]"], ["\n\n# <func> # Python \n# Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n):\n    sum = 0\n    for I in range(1, n+1):\n        sum += i**3\n    return sum\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n    return tuple(map(str.join, zip(*test_tup)))\n\n# Example usage:\ntest_tup = (1, 2, 3)"], ["\n\n# <func> # Python \n# Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):\n    sum = 0\n    for I in range(1, n+1):\n        sum += i**3\n    return sum/n\n\n# Call the function with n = 5"], ["\n\n# <func> # Python \n# Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\n    # Create an empty list to store the extracted elements\n    rear_elements = []\n    \n    # Loop through each string in the tuple\n    for string in test_tuple:\n        # Extract the rear index element from the string\n        rear_index = string.rfind(\" \")\n        \n        # If the rear index is not found, skip the string\n        if rear_index == -1:\n            continue\n        \n        # Append the rear index element to the rear_elements list\n        rear_elements.append(string[:rear_index])\n    \n    # Return the extracted elements as a tuple\n    return rear_elements\n\n# Test the function\ntest_tuple = (\"hello world\", \"world\", \"hello\", \"world\")\nrear_elements = extract_rear(test_tuple)"], ["\n\n# <func> # Python \n# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x):\n    count = 0\n    for I in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]"], ["\n\n# <func> # Python \n# Write a function to filter odd numbers.\ndef filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]\n\n# Call the function with the list of numbers.\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfiltered_numbers = filter_oddnumbers(numbers)"], ["\nimport re\n\n# <func> # Python \n# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef change_date_format(dt):\n    # Convert the date to a string\n    date_str = dt.strftime(\"%Y-%m-%d\")\n    \n    # Remove the leading and trailing spaces\n    date_str = date_str.strip()\n    \n    # Remove the hyphens\n    date_str = date_str.replace(\"-\", \"\")\n    \n    # Return the modified string\n    return date_str\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\n    n = len(my_list)\n    for I in range(n // 2):\n        for j in range(i+1, n):\n            if my_list[j] < my_list[j-1]:\n                my_list[j], my_list[j-1] = my_list[j-1], my_list[j]\n    return my_list\n\n# Testing the function\nmy_list = [5, 2, 1, 8, 3, 7, 6, 4]\nsorted_list = shell_sort(my_list)"], ["\n\n# <func> # Python \n# Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\n    # Extract the elementwise and tuples from the given tuples\n    elementwise_and_tuples = []\n    for elem, tuple_ in zip(test_tup1, test_tup2):\n        elementwise_and_tuples.append(elem)\n        tuple_ = tuple(tuple_)\n    return elementwise_and_tuples\n\n# Test the function\nelementwise_and_tuples = and_tuples(test_tup1, test_tup2)"], ["\n\n# <func> # Python \n# Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c):\n    # Calculate the inverse of the determinant of the matrix representing the parabola\n    det = (-b**2 + 4*a*c)**0.5\n    if det == 0:\n        return None\n    # Calculate the roots of the quadratic equation\n    roots = (-b + det**0.5*c) / (2*a)\n    # Check if the roots are real and positive\n    if roots.real < 0:\n        return None\n    # Calculate the x-intercept of the parabola\n    x_intercept = (-b + roots.real) / (2*a)\n    # Calculate the y-intercept of the parabola\n    y_intercept = (-b - roots.real) / (2*a)\n    return (x_intercept, y_intercept)\n\n# Test the function with some sample inputs"], ["\n\n# <func> # Python \n# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1,base2,height):\n    # Calculate the area of the base and height\n    area1 = base1 * height\n    area2 = base2 * height\n    \n    # Calculate the length of the base and height\n    base = abs(base1 - base2)\n    height = abs(height)\n    \n    # Calculate the median\n    if base > height:\n        median = (base + height) / 2\n    else:\n        median = base\n    \n    # Calculate the sum of the areas\n    sum_area = area1 + area2\n    \n    # Calculate the difference between the sum of the areas and the median\n    difference = sum_area - median\n    \n    # Calculate the median length\n    return median + difference / 2\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\n    # Check if the number is in the array\n    for I in range(len(arr)):\n        if arr[i] == number:\n            return True\n    return False\n\n# Example usage\narr = [1, 2, 3, 4, 5]\nnumber = 3"], ["\n\n# <func> # Python \n# Write a python function to find the last digit of a given number.\ndef last_Digit(n):\n    # Your code here\n    return n % 10\n\n# Example usage:\nlast_digit(12345) # Output: 5\nlast_digit(123456) # Output: 6\nlast_digit(1234567) # Output: 7\nlast_digit(12345678) # Output: 8\nlast_digit(123456789) # Output: 9\nlast_digit(1234567890) # Output: 0\nlast_digit(12345678901) # Output: 1\nlast_digit(123456789012) # Output: 2\nlast_digit(1234567890123) # Output: 3\nlast_digit(12345678901234) # Output: 4\nlast_digit(123456789012345) # Output: 5\nlast_digit(1234567890123456) # Output: 6\nlast_digit(12345678901234567) # Output: 7\nlast_digit(123456789012345678) # Output: 8\nlast_digit(1234567890123456789) # Output: 9\nlast_digit(12345678901234567890) # Output: 0\nlast_digit(123456789012345678901) # Output: 1\nlast_digit(1234567890123456789012) # Output: 2\nlast_digit(1234567890"], ["\n\n# <func> # Python \n# Write a python function to return the negative numbers in a list.\ndef neg_nos(list1):\n    neg_nos = []\n    for num in list1:\n        if num < 0:\n            neg_nos.append(num)\n    return neg_nos\n\n# Call the function with a list of numbers"], ["\n\n# <func> # Python \n# Write a function to remove odd characters in a string.\ndef remove_odd(str1):\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Remove all characters that are not alphanumeric\n    str1 = ''.join(c for c in str1 if c.isalnum())\n    # Return the modified string\n    return str1\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a function to join a list of multiple integers into a single integer.\ndef multiple_to_single(L):\n    # Your code here\n    return L[0]\n\n# Example usage\nmultiple_to_single([1, 2, 3, 4, 5]) # Output: 15"], ["\nimport re\n\n# <func> # Python \n# Write a function to find the first adverb and their positions in a given sentence.\ndef find_adverb_position(text):\n    # Split the sentence into words\n    words = text.split()\n    \n    # Create a dictionary to store the adverbs and their positions\n    adverbs = {}\n    \n    # Loop through each word in the sentence\n    for word in words:\n        # Check if the word is an adverb\n        if re.search(r'\\badverb\\b', word):\n            # If it is, add the word and its position to the dictionary\n            adverbs[word] = word.split()[1]\n    \n    # Return the dictionary\n    return adverbs\n\n# Example usage\nsentence = \"The quick brown fox jumps over the lazy dog.\"\nadverbs = find_adverb_position(sentence)"], ["\n\n# <func> # Python \n# Write a function to find the surface area of a cube of a given size.\ndef surfacearea_cube(l):\n    return (l * l * l)\n\n# Test the function with different cube sizes"], ["\n\n# <func> # Python \n# Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n    # Initialize the result tuple\n    result_tup = []\n    \n    # Loop through each element in the first tuple\n    for I in range(len(test_tup1)):\n        # Multiply the element by the corresponding element in the second tuple\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    \n    # Return the result tuple\n    return result_tup\n\n# Example usage\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\nresult_tup = index_multiplication(test_tup1, test_tup2)"], ["\nfrom collections import Counter \n\n# <func> # Python \n# Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst):\n    count = Counter(lst)\n    return tuple(count.keys())\n\n# Example usage:\nlst = [1, 2, 3, 4, 5]\ntup = (1, 2, 3, 4, 5)"], ["\n\n# <func> # Python \n# Write a function to find cubes of individual elements in a list.\ndef cube_nums(nums):\n    # Initialize a counter to count the number of cubes\n    count = 0\n    \n    # Loop through each element in the list\n    for num in nums:\n        # Calculate the cube of the current element\n        cube = num ** 3\n        \n        # Increment the counter if the cube is a valid cube\n        if cube == num:\n            count += 1\n            \n    # Return the count of cubes\n    return count\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n):\n    sum = 0\n    for I in range(1, n+1):\n        if I % 2 == 0:\n            sum += I\n    return sum\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to extract specified size of strings from a given list of string values.\ndef extract_string(str1, l):\n    # Define the function body\n    # ...\n    # Return the extracted string\n    return extracted_string\n\n# Call the function with the desired input values\nextracted_string = extract_string(\"hello world\", [\"hello\", \"world\"])"], ["\nimport re\n\n# <func> # Python \n# Write a function to remove all whitespaces from the given string.\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', ' ', text1)\n\n# Example usage"], ["\nimport math \n\n# <func> # Python \n# Write a python function to find the sum of even factors of a number.\ndef sumofFactors(n):\n    # Define a list of even numbers\n    even_nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    \n    # Initialize a sum variable to 0\n    sum = 0\n    \n    # Loop through each even number in the list\n    for num in even_nums:\n        # If the number is even, add it to the sum\n        if num % 2 == 0:\n            sum += num\n    \n    # Return the sum of the even factors\n    return sum\n\n# Call the function with a number"], ["\nimport re\n\n# <func> # Python \n# Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n    return re.search('z', text)\n\n# Example usage\ntext = \"Hello, world! This is a test.\""], ["\n\n# <func> # Python \n# Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n    if monthnum2 % 100 == 0 or monthnum2 % 400 == 0:\n        return True\n    else:\n        return False\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to reverse each string in a given list of string values.\ndef reverse_string_list(stringlist):\n    # Create a new list to store the reversed strings\n    reversed_stringlist = []\n    \n    # Loop through each string in the list\n    for string in stringlist:\n        # Convert the string to a list of characters\n        characters = string.split()\n        \n        # Loop through each character in the list\n        for character in characters:\n            # Append the reversed character to the reversed_stringlist list\n            reversed_string = character[::-1]\n            reversed_stringlist.append(reversed_string)\n            \n    # Return the reversed string list\n    return reversed_stringlist\n\n# Example usage\nstringlist = [\"apple\", \"banana\", \"cherry\"]\nreversed_stringlist = reverse_string_list(stringlist)"], ["\n\n# <func> # Python \n# Write a python function to find the sublist having minimum length.\ndef Find_Min(lst):\n    min_length = 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"], ["\n\n# <func> # Python \n# Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n    return l*b\n\n# Call the function with the length and width of a rectangle.\nl,b = map(int,input(\"Enter the length and width of the rectangle: \").split())\narea = rectangle_area(l,b)"], ["\n\n# <func> # Python \n# Write a function to remove uppercase substrings from a given string.\ndef remove_uppercase(str1):\n    # Your code here\n    return str1.lower()\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a python function to get the first element of each sublist.\ndef Extract(lst):\n    return lst[0]\n\n# Example usage:\nlst = [1, 2, 3, 4, 5]\nExtract(lst) # Output: 1\n\n# Example usage:\nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nExtract(lst) # Output: [1, 2, 3]\n\n# Example usage:\nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nExtract(lst) # Output: [1, 2, 3, 10]"], ["\n\n# <func> # Python \n# Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\n    # Base case: if the list is empty, there are no possible combinations\n    if len(list1) == 0:\n        return []\n    \n    # Recursive case: find all possible combinations of the remaining elements\n    combinations = []\n    for I in range(len(list1)):\n        combinations.append(list1[:i] + list1[i+1:])\n    \n    return combinations\n\n# Example usage:\nlist1 = [1, 2, 3]"], ["\n\n# <func> # Python \n# Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\n    # Initialize max product to 1\n    max_product = 1\n    \n    # Initialize start and end pointers\n    start = 0\n    end = 0\n    \n    # Loop through the array\n    for I in range(1, len(arr)):\n        \n        # If the current element is greater than the previous element, update max product\n        if arr[i] > arr[i-1]:\n            max_product *= arr[i]\n        \n        # Update start and end pointers\n        if arr[i] > max_product:\n            start = i\n            end = i\n            \n    # Return the maximum product subarray\n    return max_product\n\n# Test the function\narr = [1, 3, 5, 4, 2]\nmax_product = max_subarray_product(arr)"], ["\n\n# <func> # Python \n# Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}\n\n# Example usage:\nmy_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}"], ["\n\n# <func> # Python \n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr):\n    # Initialize max product to 1\n    max_product = 1\n    \n    # Loop through the array\n    for I in range(len(arr)):\n        # If the current element is greater than the previous element, update max product\n        if arr[i] > arr[i-1]:\n            max_product *= arr[i]\n    \n    return max_product\n\n# Test the function with some sample inputs"], ["\n\n# <func> # Python \n# Write a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef add_pairwise(test_tup):\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the elements of the tuple\n    for I in range(len(test_tup)):\n        # Calculate the difference between the current element and the previous one\n        diff = test_tup[i] - test_tup[i-1]\n        \n        # Add the difference to the sum variable\n        sum += diff\n        \n    return sum\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a python function to find the product of the array multiplication modulo n.\ndef find_remainder(arr, n):\n    # initialize the remainder variable\n    remainder = 0\n    \n    # loop through the array\n    for I in range(len(arr)):\n        # calculate the product of the array elements\n        product = arr[i] * n\n        \n        # check if the product is divisible by n\n        if product % n == 0:\n            # update the remainder variable\n            remainder += 1\n            \n    # return the remainder variable\n    return remainder\n\n# test the function\narr = [1, 2, 3, 4, 5]\nn = 5"], ["\n\n# <func> # Python \n# Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l):\n    # Initialize a list to store the numbers\n    nums = []\n    # Loop through the list and add the numbers to the list\n    for num in l:\n        if num not in nums:\n            nums.append(num)\n    # Check if the list is empty or not\n    if len(nums) == 0:\n        return True\n    else:\n        return False\n\n# Example usage\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9]"], ["\n\n# <func> # Python \n# Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n    # Create a new list to store the intersection\n    intersection = []\n    \n    # Loop through each element in the first list\n    for I in test_list1:\n        # Check if the current element is present in the second list\n        if I in test_list2:\n            # If the element is present, append it to the intersection list\n            intersection.append(i)\n    \n    # Return the intersection list\n    return intersection\n\n# Example usage\ntest_list1 = (1, 2, 3, 4)\ntest_list2 = (2, 3, 4, 5)\nintersection = tuple_intersection(test_list1, test_list2)"], ["\n\n# <func> # Python \n# Write a function to replace characters in a string.\ndef replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)\n\n# Example usage\nstr1 = \"Hello, world!\"\nstr2 = replace_char(str1, \"o\", \"O\")"], ["\n\n# <func> # Python \n# Write a function to sort a dictionary by value.\ndef sort_counter(dict1):\n    # Sort the dictionary by value\n    return dict1.sort(key=lambda x: x[1], reverse=True)\n\n# Call the function with a dictionary\nmy_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nsorted_dict = sort_counter(my_dict)"], ["\n\n# <func> # Python \n# Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\n    max_num = nums[0]\n    min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num + min_num\n\n# Testing the function\nnums = [5, 10, 20, 30, 40]\nresult = big_sum(nums)"], ["\n\n# <func> # Python \n# Write a python function to convert the given string to lower case.\ndef is_lower(string):\n    return string.lower() == string\n\n# Example usage:\nstring = \"Hello World\""], ["\nimport re\n\n# <func> # Python \n# Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n    # Convert string to lowercase\n    str1 = str1.lower()\n    \n    # Remove all lowercase substrings\n    return ''.join(c for c in str1 if c.islower())\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a python function to find the first digit of a given number.\ndef first_Digit(n):\n    # Your code here\n    return n % 10\n\n# Test the function with some examples"], ["\n\n# <func> # Python \n# Write a python function which takes a list of integers and only returns the odd ones.\ndef Split(l):\n    odd = []\n    for I in l:\n        if I % 2 != 0:\n            odd.append(i)\n    return odd\n\n# Call the function and print the output\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nodd = Split(l)"], ["\n\n# <func> # Python \n# Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef difference(n):\n    sum_cubes = 0\n    sum_natural = 0\n    for I in range(1, n+1):\n        sum_cubes += (i**3)\n        sum_natural += i\n    return sum_cubes - sum_natural\n\n# Test the function with different values of n"], ["\n\n# <func> # Python \n# Write a python function to count the number of pairs whose xor value is odd.\ndef find_Odd_Pair(A,N):\n    count = 0\n    for I in range(N):\n        for j in range(i+1,N):\n            if A[i]^A[j] == 1:\n                count += 1\n    return count\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to toggle the case of all characters in a string.\ndef toggle_string(string):\n    return string.lower() if string.isupper() else string.upper()\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to find the sum of the per-digit difference between two integers.\ndef digit_distance_nums(n1, n2):\n    # calculate the sum of the per-digit difference\n    sum_diff = 0\n    for I in range(1, 10):\n        diff = n1 % 10 - n2 % 10\n        if diff != 0:\n            sum_diff += diff\n    return sum_diff\n\n# call the function with the two input integers"], ["\n\n# <func> # Python \n# Write a function to find the sum of the largest contiguous sublist in the given list.\ndef max_sub_array_sum(a, size):\n    # Initialize the maximum sum so far to 0\n    max_sum = 0\n    \n    # Initialize the current maximum sum to the current maximum sum plus the current element\n    max_sum_curr = max_sum\n    \n    # Initialize the current maximum sum to the current maximum sum plus the current element\n    max_sum_prev = max_sum\n    \n    # Initialize the current maximum sum to the current maximum sum plus the current element\n    max_sum_curr_prev = max_sum\n    \n    # Initialize the current maximum sum to the current maximum sum plus the current element\n    max_sum_curr_prev_prev = max_sum\n    \n    # Initialize the current maximum sum to the current maximum sum plus the current element\n    max_sum_curr_prev_prev_prev = max_sum\n    \n    # Initialize the current maximum sum to the current maximum sum plus the current element\n    max_sum_curr_prev_prev_prev_prev = max_sum\n    \n    # Initialize the current maximum sum to the current maximum sum plus the current element\n    max_sum_curr_prev_prev_prev_prev_prev = max_sum\n    \n    # Initialize the current maximum sum to the current maximum sum plus the current element\n    max_sum_curr_prev_prev_prev_prev_prev_prev = max_sum\n    \n    # Initialize the current maximum sum to the current maximum sum plus the current element\n    max_sum_curr_prev_prev_prev_prev_prev_prev_prev = max_sum\n    \n    # Initialize the current maximum sum to the current maximum sum plus the current element\n    max_sum_curr_prev_prev_prev_prev_prev_prev_prev_prev = max_sum\n    \n    # Initialize the current maximum sum to the current maximum sum plus the current element\n    max_sum_curr_prev_prev_prev_prev_prev_prev_prev_prev_prev = max_sum\n    \n    # Initialize the current maximum sum to the current maximum sum plus the current element\n    max_sum_"], ["\n\n# <func> # Python \n# Write a function to find the union of the elements of two given tuples and output them in sorted order.\ndef union_elements(test_tup1, test_tup2):\n    # Initialize a list to store the union of the two tuples\n    union_list = []\n    \n    # Loop through each element of the first tuple and add it to the union_list\n    for element in test_tup1:\n        if element not in union_list:\n            union_list.append(element)\n    \n    # Loop through each element of the second tuple and add it to the union_list\n    for element in test_tup2:\n        if element not in union_list:\n            union_list.append(element)\n    \n    # Sort the union_list in ascending order\n    union_list.sort()\n    \n    # Return the sorted union_list\n    return union_list\n\n# Example usage\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\nunion_list = union_elements(test_tup1, test_tup2)"], ["\n\n# <func> # Python \n# Write a python function to find the length of the longest sublists.\ndef Find_Max_Length(lst):\n    max_length = 0\n    for I in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n    return max_length\n\n# Example usage:\nlst = [['apple', 'banana', 'orange'], ['banana', 'apple', 'pear'], ['pear', 'banana', 'apple']]"], ["\nimport re\n\n# <func> # Python \n# Write a function to extract values between quotation marks from a string.\ndef extract_values(text):\n    # Replace all quotation marks with a single space\n    text = text.replace('\"', ' ')\n    # Split the string into words\n    words = text.split()\n    # Remove any leading or trailing whitespace\n    words = [w.strip() for w in words]\n    # Remove any punctuation\n    words = [w for w in words if w.isalpha()]\n    # Remove any numbers\n    words = [w for w in words if not w.isdigit()]\n    # Remove any special characters\n    words = [w for w in words if not w.isalnum()]\n    # Convert the words to lowercase\n    words = [w.lower() for w in words]\n    # Return the extracted values\n    return words\n\n# Example usage\ntext = \"This is a test string with some quotes and spaces.\"\nextracted_values = extract_values(text)"], ["\n\n# <func> # Python \n# Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\ndef count_Pairs(arr,n):\n    count = 0\n    for I in range(n):\n        for j in range(i+1,n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n\n# Testing the function\narr = [1,2,3,4,5]\nn = len(arr)"], ["\n\n# <func> # Python \n# Write a python function to split a string into characters.\ndef split(word):\n    # split the string into an array of characters\n    return word.split()\n\n# test the function"], ["\n\n# <func> # Python \n# Write a function to get the sum of the digits of a non-negative integer.\ndef sum_digits(n):\n    # Your code here\n    return n\n\n# Call the function with some example inputs"], ["\n\n# <func> # Python \n# Write a function to check whether a specified list is sorted or not.\ndef issort_list(list1):\n    # Sort the list\n    list1.sort()\n    \n    # Check if the list is sorted\n    if list1 == list1[::-1]:\n        return True\n    else:\n        return False\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a function to create a list of N empty dictionaries.\ndef empty_list(length):\n    return [{} for _ in range(length)]\n\n# Test the function with different lengths"], ["\n\n# <func> # Python \n# Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(list1):\n    # Create a new list to hold the sorted sublists\n    sorted_list = []\n    \n    # Loop through each sublist in the original list\n    for sublist in list1:\n        # Create a new list to hold the sorted sublist\n        sorted_sublist = []\n        \n        # Loop through each element in the sublist\n        for element in sublist:\n            # If the element is not a string, skip it\n            if isinstance(element, str):\n                continue\n            \n            # If the element is not a string, append it to the sorted sublist\n            sorted_sublist.append(element)\n            \n        # Append the sorted sublist to the sorted_list\n        sorted_list.append(sorted_sublist)\n        \n    # Return the sorted list\n    return sorted_list\n\n# Example usage\nlist1 = [['apple', 'banana', 'cherry'], ['orange', 'grape', 'pear'], ['banana', 'apple', 'cherry']]\nsorted_list = sort_sublists(list1)"], ["\n\n# <func> # Python \n# Write a python function to remove duplicate numbers from a given number of lists.\ndef two_unique_nums(nums):\n    # Create a list to store the unique numbers\n    unique_nums = []\n    \n    # Loop through each list in the input list\n    for num in nums:\n        # Check if the current number is already in the unique list\n        if num not in unique_nums:\n            # If it is not, add it to the unique list\n            unique_nums.append(num)\n    \n    # Return the unique list\n    return unique_nums\n\n# Example usage\nnums = [1, 2, 3, 1, 4, 5]\nunique_nums = two_unique_nums(nums)"], ["\n\n# <func> # Python \n# Write a python function to calculate the product of the unique numbers in a given list.\ndef unique_product(list_data):\n    # Initialize a counter variable to keep track of the number of unique numbers\n    unique_count = 0\n    \n    # Loop through the list and check if the current number is unique\n    for num in list_data:\n        if num not in list_data:\n            unique_count += 1\n    \n    # Return the product of the unique numbers\n    return unique_count * product(list_data)\n\n# Example usage\nunique_product([1, 2, 3, 4, 5]) # Output: 120\nunique_product([1, 2, 3, 4, 5, 6]) # Output: 1200\nunique_product([1, 2, 3, 4, 5, 6, 7]) # Output: 12000\nunique_product([1, 2, 3, 4, 5, 6, 7, 8]) # Output: 120000\nunique_product([1, 2, 3, 4, 5, 6, 7, 8, 9]) # Output: 1200000\nunique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) # Output: 12000000\nunique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) # Output: 120000000\nunique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) # Output: 1200000000\nunique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) #"], ["\n\n# <func> # Python \n# Write a python function to check whether a list is sublist of another or not.\ndef is_Sub_Array(A,B):\n    # Checking if A is a sublist of B\n    if len(A) == len(B):\n        for I in range(len(A)):\n            if A[i] not in B:\n                return False\n        return True\n    else:\n        return False\n\n# Calling the function"], ["\n\n# <func> # Python \n# Write a python function to find the last digit in factorial of a given number.\ndef last_Digit_Factorial(n):\n    # Check if n is positive\n    if n <= 0:\n        raise ValueError(\"N must be positive\")\n    \n    # Calculate the factorial of n\n    factorial = 1\n    for I in range(1, n+1):\n        factorial *= i\n    \n    # Return the last digit of the factorial\n    return int(factorial[-1])\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a function to interleave 3 lists of the same length into a single flat list.\ndef interleave_lists(list1, list2, list3):\n    # Create a new list to hold the interleaved list\n    interleaved_list = []\n    \n    # Loop through each list and add it to the interleaved list\n    for I in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                interleaved_list.append(list1[i] + list2[j] + list3[k])\n    \n    # Return the interleaved list\n    return interleaved_list\n\n# Test the function\ninterleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9])\n# Output: [1, 4, 7, 2, 5, 8, 3, 6, 9]"], ["\n\n# <func> # Python \n# Write a function to find the dissimilar elements in the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n    # Define the function to find the dissimilar elements\n    dissimilar_elements = []\n    for I in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i] != test_tup2[j]:\n                dissimilar_elements.append(test_tup1[i] - test_tup2[j])\n    return dissimilar_elements\n\n# Example usage\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (2, 3, 4)\ndissimilar_elements = find_dissimilar(test_tup1, test_tup2)"], ["\n\n# <func> # Python \n# Write a function to remove uneven elements in the nested mixed tuple.\ndef even_ele(test_tuple, ):\n    # Define a function to check if a tuple is even or not\n    def is_even(tup):\n        return all(tup[i] % 2 == 0 for I in range(len(tup)))\n    \n    # Loop through the nested tuple\n    for I in range(len(test_tuple)):\n        # Check if the current element is even\n        if is_even(test_tuple[i]):\n            # If it is, remove it\n            del test_tuple[i]\n    \n    # Return the modified tuple\n    return tuple(test_tuple)\n\n# Test the function\ntest_tuple = (1, 2, 3, 4, 5)\neven_ele(test_tuple)\n\n# Output: (2, 3, 4, 5)"], ["\n\n# <func> # Python \n# Write a python function to find the surface area of a square pyramid with a given base edge and height.\ndef surface_Area(b,s):\n    return b*s\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function which returns nth catalan number.\ndef catalan_number(num):\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n\n# Testing the function"], ["\nimport heapq\n\n# <func> # Python \n# Write a function to find the n most expensive items in a given dataset.\ndef expensive_items(items,n):\n    # Initialize a priority queue with the items\n    q = priority_queue(lambda x,y: cmp(x[1],y[1]), [], heapq.heappush(heapq.priorityqueue(), (0, items[0])))\n    \n    # Traverse the items in the dataset and add them to the priority queue\n    for I in items:\n        q.update(heapq.heappush(heapq.priorityqueue(), (i[1], i)))\n    \n    # Return the n most expensive items\n    return heapq.nlargest(n, q)\n\n# Example usage\nitems = [('apple', 10), ('banana', 5), ('orange', 15), ('kiwi', 10), ('grape', 10)]\nn = 3"], ["\n\n# <func> # Python \n# Write a python function to split a list at the nth eelment and add the first part to the end.\ndef split_Arr(l, n):\n    return [l[i] for I in range(n)] + l[:n]\n\n# Example usage:\narr = [1, 2, 3, 4, 5]"], ["\n\n# <func> # Python \n# Write a function to convert a list to a tuple.\ndef list_tuple(listx):\n    return tuple(listx)\n\n# Example usage:\nlist_tuple([1, 2, 3])\n# Output: (1, 2, 3)\n\n# Example usage with multiple arguments:\nlist_tuple([1, 2, 3, 4, 5])\n# Output: (1, 2, 3, 4, 5)\n\n# Example usage with a list with non-integer elements:\nlist_tuple([1.5, 2.5, 3.5])\n# Output: (1.5, 2.5, 3.5)"], ["\n\n# <func> # Python \n# Write a python function to find the difference between largest and smallest value in a given list.\ndef big_diff(nums):\n    max_num = nums[0]\n    min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    return max_num - min_num\n\n# Example usage:\nnums = [10, 20, 30, 40, 50]"], ["\nimport math\n\n# <func> # Python \n# Write a function to find perfect squares between two given numbers.\ndef perfect_squares(a, b):\n    # Check if the input values are valid\n    if a < 0 or b < 0:\n        return \"Invalid input\"\n    else:\n        # Calculate the sum of the squares of the first and second numbers\n        sum_of_squares = (a**2 + b**2)\n        \n        # Check if the sum of squares is equal to the input values\n        if sum_of_squares == a**2 + b**2:\n            return \"Perfect squares\"\n        else:\n            return \"Invalid input\"\n\n# Example usage"], ["\nimport cmath\n\n# <func> # Python \n# Write a function to convert polar coordinates to rectangular coordinates.\ndef polar_rect(x,y):\n    # Calculate the radius of the circle\n    r = math.sqrt(x**2 + y**2)\n    \n    # Calculate the angle in radians\n    theta = math.atan2(y, x)\n    \n    # Convert the angle to degrees\n    theta = theta * 180 / math.pi\n    \n    # Calculate the x and y coordinates of the center of the circle\n    x_center = r * cos(theta)\n    y_center = r * sin(theta)\n    \n    # Return the coordinates in rectangular coordinates\n    return x_center, y_center\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a python function to interchange the first and last elements in a list.\ndef swap_List(newList):\n    # create a new list with the first and last elements swapped\n    tempList = newList[:]\n    tempList.reverse()\n    newList = tempList\n    return newList\n\n# test the function"], ["\n\n# <func> # Python \n# Write a python function to find the sum of the product of consecutive binomial co-efficients.\ndef binomial_Coeff(n, k):\n    # Base case: k = 0\n    if k == 0:\n        return 1\n    # Base case: k = 1\n    elif k == 1:\n        return n\n    # Recursive case: k > 1\n    else:\n        return (n * (n - 1)) / 2 * binomial_Coeff(n - 1, k - 1)\n\n# Testing the function"], ["\nimport re\n\n# <func> # Python \n# Write a function to remove leading zeroes from an ip address.\ndef removezero_ip(ip):\n    # Remove leading zeroes from ip address\n    ip = ip.strip('0')\n    # Remove trailing zeroes from ip address\n    ip = ip.strip('0')\n    return ip\n\n# Example usage\nip = '192.168.1.1'\nip_removed = removezero_ip(ip)"], ["\n\n# <func> # Python \n# Write a function to find the difference of the first even and first odd number of a given list.\ndef diff_even_odd(list1):\n    # Define the function to be called\n    def diff_even_odd_func(lst):\n        # Define the function to be called\n        def even_odd_func(lst):\n            # Define the function to be called\n            def even_odd_func(lst):\n                # Define the function to be called\n                def even_odd_func(lst):\n                    # Define the function to be called\n                    def even_odd_func(lst):\n                        # Define the function to be called\n                        def even_odd_func(lst):\n                            # Define the function to be called\n                            def even_odd_func(lst):\n                                # Define the function to be called\n                                def even_odd_func(lst):\n                                    # Define the function to be called\n                                    def even_odd_func(lst):\n                                        # Define the function to be called\n                                        def even_odd_func(lst):\n                                            # Define the function to be called\n                                            def even_odd_func(lst):\n                                                # Define the function to be called\n                                                def even_odd_func(lst):\n                                                    # Define the function to be called\n                                                    def even_odd_func(lst):\n                                                        # Define the function to be called\n                                                        def even_odd_func(lst):\n                                                            # Define the function to be called\n                                                            def even_odd_func(lst):\n                                                                # Define the function to be called\n                                                                def even_odd_func(lst):\n                                                                    # Define the function to be called\n                                                                    def even_odd_func(lst):\n                                                                        # Define the function to be called\n                                                                        def even_odd_func(lst):\n                                                                            # Define the function to be called\n                                                                            def even_odd_func(lst):\n                                                                                # Define the function to be called\n"], ["\nimport sys \n\n# <func> # Python \n# Write a function to find the size in bytes of the given tuple.\ndef tuple_size(tuple_list):\n    size = 0\n    for item in tuple_list:\n        size += len(item)\n    return size\n\n# <main> # Python \n# Test the function with some sample tuples."], ["\n\n# <func> # Python \n# Write a function to find kth element from the given two sorted arrays.\ndef find_kth(arr1, arr2, k):\n    # Initialize the index variable\n    i = 0\n    \n    # Loop through the first array\n    while i < len(arr1):\n        # If the current element is greater than the kth element, break the loop\n        if arr1[i] > arr2[k]:\n            break\n        # Increment the index variable\n        i += 1\n    \n    # If the current element is the kth element, return the index\n    return i\n\n# Example usage\narr1 = [1, 2, 3, 4, 5]\narr2 = [2, 3, 4, 5, 6]\nk = 3"], ["\n\n# <func> # Python \n# Write a function to check whether the given number is armstrong or not.\ndef armstrong_number(number):\n    # check if the number is divisible by 1, 2, 3, 4, 5, 6, 7, 8, 9\n    for I in range(1, number+1):\n        if number % I == 0:\n            return False\n    return True\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a function to find sum and average of first n natural numbers.\ndef sum_average(number):\n    sum = 0\n    average = 0\n    for I in range(1, number+1):\n        sum += i\n        average += i / (i-1)\n    return sum, average\n\n# Calling the function\nsum, average = sum_average(10)"], ["\n\n# <func> # Python \n# Write a python function to check whether the given number is even or not.\ndef is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to find the first repeated character in a given string.\ndef first_repeated_char(str1):\n    # initialize a list to store the first repeated character\n    repeated_char = []\n    \n    # iterate through the string and check if the character is repeated\n    for I in range(len(str1)):\n        if str1[i] == str1[i+1]:\n            repeated_char.append(str1[i])\n    \n    # return the first repeated character in the list\n    return repeated_char[0]\n\n# test the function"], ["\n\n# <func> # Python \n# Write a function to get all lucid numbers smaller than or equal to a given integer.\ndef get_ludic(n):\n    # Write your code here.\n    return []\n\n# Example usage:\nludic_numbers = get_ludic(10)"], ["\n\n# <func> # Python \n# Write a function to reverse words seperated by spaces in a given string.\ndef reverse_words(s):\n    # split the string into words\n    words = s.split()\n    \n    # reverse the words\n    reversed_words = [w.split()[::-1] for w in words]\n    \n    # join the reversed words back into a string\n    return ' '.join(reversed_words)\n\n# test the function"], ["\nimport math\n\n# <func> # Python \n# Write a function to check if the given integer is a prime number.\ndef prime_num(num):\n    # Check if the number is divisible by 1 or 2\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    \n    # Check if the number is divisible by 5\n    for I in range(5, int(num ** 0.5) + 1, 5):\n        if num % I == 0:\n            return False\n    \n    # Check if the number is divisible by 7\n    for I in range(7, int(num ** 0.5) + 1, 7):\n        if num % I == 0:\n            return False\n    \n    # Check if the number is divisible by 11\n    for I in range(11, int(num ** 0.5) + 1, 11):\n        if num % I == 0:\n            return False\n    \n    # Check if the number is divisible by 13\n    for I in range(13, int(num ** 0.5) + 1, 13):\n        if num % I == 0:\n            return False\n    \n    # Check if the number is divisible by 17\n    for I in range(17, int(num ** 0.5) + 1, 17):\n        if num % I == 0:\n            return False\n    \n    # Check if the number is divisible by 19\n    for I in range(19, int(num ** 0.5) + 1, 19):\n        if num % I == 0:\n            return False\n    \n    # Check if the number is divisible by 21\n    for I in range(21, int(num ** 0.5) + 1, 21):\n        if num % I == 0:\n            return False\n    \n    # Check if the number is divisible by 23\n    for I in range(23, int(num ** 0.5) + 1, 23"], ["\nimport math\n\n# <func> # Python \n# Write a function to convert degrees to radians.\ndef radian_degree(degree):\n    return degree * math.pi / 180\n\n# Call the function with some input values."], ["\nimport re\n\n# <func> # Python \n# Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\ndef find_literals(text, pattern):\n    # Split the text into words\n    words = text.split()\n\n    # Initialize the start and end index variables\n    start = -1\n    end = -1\n\n    # Loop through each word and check if it matches the pattern\n    for word in words:\n        # If the word matches the pattern, update the start and end indices\n        if re.search(pattern, word):\n            start = end + 1\n            end = re.search(pattern, word).start()\n\n    return start, end\n\n# Example usage\ntext = \"This is a test string with some literals. This is another test string with some literals. This is a third test string with some literals.\"\npattern = r\"(\\w+)\\s*(\\w+)\"\nstart, end = find_literals(text, pattern)"], ["\n\n# <func> # Python \n# Write a python function to find nth bell number.\ndef bell_Number(n):\n    # Define the formula for the nth bell number.\n    formula = (n+1) * (n+2) / 2\n    # Calculate the nth bell number.\n    return formula\n\n# Call the function with n = 10."], ["\n\n# <func> # Python \n# Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\ndef remove_kth_element(list1, k):\n    # Your code here\n    return list1\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5]\nk = 2\nresult = remove_kth_element(list1, k)"], ["\n\n# <func> # Python \n# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, N):\n    max_col = []\n    for I in range(len(test_list)):\n        max_col.append(max(test_list[i]))\n    return max(max_col)\n\n# Testing the function\ntest_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"], ["\n\n# <func> # Python \n# Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\ndef merge(lst):\n    result = []\n    for I in range(len(lst)):\n        first_lst = lst[i]\n        second_lst = []\n        for j in range(len(first_lst)):\n            second_lst.append(first_lst[j])\n        result.append(second_lst)\n    return result\n\n# Testing the function\nlst = [[1, 2], [3, 4], [5, 6]]\nresult = merge(lst)"], ["\n\n# <func> # Python \n# Write a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef cummulative_sum(test_list):\n    cumulative_sum = 0\n    for value in test_list:\n        cumulative_sum += value\n    return cumulative_sum\n\n# Test the function with some sample input and expected output\ntest_list = [1, 2, 3, 4, 5]\ncummulative_sum(test_list) # Output: 15\n\n# Test the function with some sample input and expected output\ntest_list = [1, 2, 3, 4, 5, 6]\ncummulative_sum(test_list) # Output: 21\n\n# Test the function with some sample input and expected output\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8]\ncummulative_sum(test_list) # Output: 32"], ["\n\n# <func> # Python \n# Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\ndef average_tuple(nums):\n    total = sum(nums)\n    avg = total / len(nums)\n    return avg\n\n# Test the function with some sample inputs\nnums = (1, 2, 3, 4)"], ["\n\n# <func> # Python \n# Write a function which takes two tuples of the same length and performs the element wise modulo.\ndef tuple_modulo(test_tup1, test_tup2):\n    return tuple(map(lambda x: x % 10, zip(test_tup1, test_tup2)))\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n    \"\"\"\n    This function takes two lists as input and returns the element-wise division of the two lists.\n    \"\"\"\n    # Check if the input lists are of the same length\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n    \n    # Initialize the result list\n    result = []\n    \n    # Loop through the input lists\n    for I in range(len(nums1)):\n        # Calculate the element-wise division of the two lists\n        result.append(nums1[i] / nums2[i])\n    \n    # Return the result list\n    return result\n\n# Example usage\nnums1 = [1, 2, 3]\nnums2 = [4, 5, 6]\nresult = div_list(nums1, nums2)"], ["\n\n# <func> # Python \n# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str):\n    # Your code here\n    return test_str\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\ndef largest_subset(a):\n    # Initialize the largest subset to an empty list\n    largest_subset = []\n    \n    # Iterate through the list and check if the current element is divisible by any element in the subset\n    for I in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                # If the current element is divisible by the element at index j, add it to the subset\n                largest_subset.append(a[i])\n    \n    # Return the largest subset\n    return largest_subset\n\n# Test the function with some examples"], ["\n\n# <func> # Python \n# Write a function to find the median of two sorted lists of same size.\ndef get_median(arr1, arr2, n):\n    # Check if the lists are of equal size\n    if len(arr1) == len(arr2):\n        # If they are, sort them and find the middle element\n        arr1.sort()\n        arr2.sort()\n        return arr1[len(arr1) // 2]\n    else:\n        # If they are not, return the median of the two sorted lists\n        return (arr1 + arr2) // 2\n\n# Example usage:\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8, 10]"], ["\n\n# <func> # Python \n# Write a function to compute the n-th power of each number in a list.\ndef nth_nums(nums, n):\n    # Define the function to compute the n-th power of each number\n    # in the list\n    result = []\n    for num in nums:\n        result.append(pow(num, n))\n    return result\n\n# Example usage\nnums = [1, 2, 3, 4, 5]\nnth_nums(nums, 3)\n# Output: [1, 8, 25, 64, 160]\n\n# Example usage with negative numbers\nnums = [-1, -2, -3, -4, -5]\nnth_nums(nums, 3)\n# Output: [-1, 9, 36, 105, 310]"], ["\n\n# <func> # Python \n# Write a python function to convert a given string to uppercase.\ndef is_upper(string):\n    return string.upper()\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\ndef triangle_area(r):\n    # calculate the area of a triangle with the given radius\n    return (r * r * 0.5)\n\n# call the function with the radius as a parameter"], ["\n\n# <func> # Python \n# Write a function to replace all spaces in the given string with '%20'.\ndef replace_spaces(string):\n    return string.replace(' ', '%20')\n\n# Example usage:\nstring = \"Hello World\""], ["\n\n# <func> # Python \n# Write a python function to find even numbers from a list of numbers.\ndef Split(l):\n    even_nums = []\n    for num in l:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums\n\n# Call the function and print the even numbers\neven_nums = Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"], ["\n\n# <func> # Python \n# Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef adjac(ele, sub = []):\n    if ele[0] == ele[1]:\n        sub.append(ele)\n        return adjac(ele[0], sub)\n    else:\n        return None\n\n# Example usage:\nele = (1, 2)\nsub = []\nadjac(ele, sub)"], ["\n\n# <func> # Python \n# Write a function to replace whitespaces with an underscore and vice versa in a given string.\ndef replace_spaces(text):\n    return text.replace(\" \", \"_\")\n\n# Example usage:\ntext = \"Hello World\"\nresult = replace_spaces(text)"], ["\n\n# <func> # Python \n# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list):\n    # Your code here\n    return num_list\n\n# Example usage\nnum_list = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], ["\n\n# <func> # Python \n# Write a python function to find the sum of xor of all pairs of numbers in the given list.\ndef pair_xor_Sum(arr,n):\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through each pair of numbers in the list\n    for I in range(n):\n        for j in range(i+1,n):\n            # Calculate the xor of the two numbers\n            xor = (arr[i] ^ arr[j])\n            \n            # Add the xor to the sum\n            sum += xor\n            \n    return sum\n\n# Test the function with some examples"], ["\nimport heapq as hq\n\n# <func> # Python \n# Write a function to sort the given list.\ndef heap_sort(iterable):\n    n = len(iterable)\n    heap = []\n    for I in range(n // 2):\n        hq.heapify(heap, I)\n    for I in range(n - 1, -1, -1):\n        hq.heappush(heap, iterable[i])\n    for I in range(n - 1, -1, -1):\n        iterable[i], heap[0] = heap[0], iterable[i]\n    return iterable\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to check whether the given amount has no profit and no loss\ndef noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount > actual_cost:\n        return False\n    elif sale_amount < actual_cost:\n        return False\n    else:\n        return True\n\n# Example usage\nnoprofit_noloss(100, 200) # True\nnoprofit_noloss(200, 100) # True\nnoprofit_noloss(100, 100) # False\nnoprofit_noloss(100, 200) # False\nnoprofit_noloss(200, 100) # False\nnoprofit_noloss(100, 100) # False"], ["\nimport math\n\n# <func> # Python \n# Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\ndef wind_chill(v,t):\n    # Calculate wind chill index\n    wci = (math.sqrt(v**2 + 2*math.sin(2*math.pi*t/120)**2))/2\n    # Round to nearest integer\n    wci = int(wci)\n    # Return wind chill index rounded to the next integer\n    return wci\n\n# Example usage\nwind_chill(10,20) # Output: 12\nwind_chill(10,21) # Output: 13\nwind_chill(10,22) # Output: 14\nwind_chill(10,23) # Output: 15\nwind_chill(10,24) # Output: 16\nwind_chill(10,25) # Output: 17\nwind_chill(10,26) # Output: 18\nwind_chill(10,27) # Output: 19\nwind_chill(10,28) # Output: 20\nwind_chill(10,29) # Output: 21\nwind_chill(10,30) # Output: 22\nwind_chill(10,31) # Output: 23\nwind_chill(10,32) # Output: 24\nwind_chill(10,33) # Output: 25\nwind_chill(10,34) # Output: 26\nwind_chill(10,35) # Output: 27\nwind_chill(10,36) # Output: 28\nwind_chill(10,37) # Output: 29\nwind_chill(10,38) # Output: 30\nwind_chill(10,39) # Output: 31\nwind_chill(1"], ["\n\n# <func> # Python \n# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names):\n    # Your code here\n    return sum(len(name) for name in sample_names if name.lower() not in string.punctuation)\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to find the nth nonagonal number.\ndef is_nonagonal(n):\n    # Write your code here.\n    return True\n\n# Call the function with n = 10.\nis_nonagonal(10)"], ["\nimport re\n\n# <func> # Python \n# Write a function that checks if a strings contains 'z', except at the start and end of the word.\ndef text_match_wordz_middle(text):\n    # Replace 'z' with 'zz' to match the pattern\n    return re.sub('z', 'zz', text)\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a python function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k):\n    # Define the function to reverse the array\n    # Input: input - the array to be reversed\n    # K - the position to be reversed\n    # Output: the reversed array\n    reversed_array = []\n    for I in range(k, len(input)):\n        reversed_array.append(input[i])\n    return reversed_array\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nk = 2\nreverse_Array_Upto_K(arr, k)"], ["\n\n# <func> # Python \n# Write a function to add a dictionary to the tuple. The output should be a tuple.\ndef add_dict_to_tuple(test_tup, test_dict):\n    new_tup = (test_tup)\n    new_dict = {}\n    for key, value in test_dict.items():\n        new_dict[key] = value\n    new_tup.append(new_dict)\n    return new_tup\n\n# Example usage:\ntest_tup = (('apple', 1), ('banana', 2), ('orange', 3))\ntest_dict = {'apple': 1, 'banana': 2, 'orange': 3}\nresult = add_dict_to_tuple(test_tup, test_dict)"], ["\n\n# <func> # Python \n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\ndef maxAverageOfPath(cost):\n    # Initialize a list to store the maximum average over all existing paths\n    max_avg = 0\n    # Initialize a list to store the path with the maximum average\n    max_path = []\n    # Initialize a list to store the cost of each cell in the path\n    path_cost = []\n    # Initialize a list to store the number of cells visited in each path\n    path_visited = []\n    # Initialize a list to store the number of cells visited in the path\n    visited_cells = []\n    # Initialize a list to store the current cell in the path\n    current_cell = []\n    # Initialize a list to store the previous cell in the path\n    previous_cell = []\n    # Initialize a list to store the cost of the current cell\n    current_cost = []\n    # Initialize a list to store the previous cell cost\n    previous_cost = []\n    # Initialize a list to store the visited cells\n    visited_cells_list = []\n    # Initialize a list to store the visited cells\n    visited_cells_list_copy = []\n    # Initialize a list to store the visited cells\n    visited_cells_list_copy_copy = []\n    # Initialize a list to store the visited cells\n    visited_cells_list_copy_copy_copy = []\n    # Initialize a list to store the visited cells\n    visited_cells_list_copy_copy_copy_copy = []\n    # Initialize a list to store the visited cells\n    visited_cells_list_copy_copy_copy_copy_copy = []\n    # Initialize a list to store the visited cells\n    visited_cells_list_copy_copy_copy_copy_copy_copy = []\n    # Initialize a list to store the visited cells\n   "], ["\n\n# <func> # Python \n# The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\ndef filter_data(students,h,w):\n    filtered_students = {}\n    for student in students:\n        if student['height'] > h and student['weight'] > w:\n            filtered_students[student['name']] = (student['height'], student['weight'])\n    return filtered_students\n\n# Example usage:\nstudents = {'John': (60, 170), 'Mary': (55, 150), 'Bob': (65, 180)}\nfiltered_students = filter_data(students, 60, 170)"], ["\nfrom operator import eq\n\n# <func> # Python \n# The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\ndef count_same_pair(nums1, nums2):\n    # Initialize a list to store the indices where the lists have the same values\n    indices = []\n    \n    # Loop through each element in nums1\n    for I in range(len(nums1)):\n        # Check if the current element in nums1 is the same as the element in nums2\n        if nums1[i] == nums2[i]:\n            # If it is, add the index to the list of indices where the lists have the same values\n            indices.append(i)\n    \n    # Return the list of indices where the lists have the same values\n    return indices\n\n# Example usage\nnums1 = [1, 2, 3, 4, 5]\nnums2 = [1, 2, 3, 4, 5]"], ["\n\n# <func> # Python \n# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power):\n    result = 1\n    for I in range(power):\n        result *= base\n    return result\n\n# Testing the function"], ["\nimport re\n\n# <func> # Python \n# Write a function to extract values between quotation marks \" \" of the given string.\ndef extract_quotation(text1):\n    # Replace all quotation marks with spaces\n    text1 = text1.replace(\"\\\"\", \" \")\n    # Split the string into words\n    words = text1.split()\n    # Remove any non-word characters\n    words = [w for w in words if w.isalpha() or w.isdigit()]\n    # Remove any leading or trailing whitespace\n    words = [w.strip() for w in words]\n    # Remove any duplicate words\n    words = list(set(words))\n    # Return the extracted values\n    return words\n\n# Example usage\ntext1 = \"This is a test string with some quotes.\"\nextracted_values = extract_quotation(text1)"], ["\n\n# <func> # Python \n# Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\ndef multiply_elements(test_tup):\n    return tuple(t * t for t in test_tup)\n\n# Test the function with some examples"], ["\n\n# <func> # Python \n# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1,lst2):\n    return [a+b for a,b in zip(lst1,lst2)]\n\n# Example usage:\nlst1 = [1,2,3,4,5]\nlst2 = [2,3,4,5,6]\nsum_list(lst1,lst2) # Output: [3,4,5,6,7]"], ["\nfrom itertools import groupby\n\n# <func> # Python \n# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums):\n    # Initialize a dictionary to store the unique numbers\n    unique_nums = {}\n    \n    # Loop through the list and add each number to the dictionary\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums[num] = 1\n        else:\n            unique_nums[num] += 1\n    \n    # Return the unique numbers\n    return list(unique_nums.keys())\n\n# Example usage"], ["\nimport math\n\n# <func> # Python \n# Write a function to find the lateral surface area of a cone given radius r and the height h.\ndef lateralsurface_cone(r,h):\n    # Calculate the base area\n    base_area = 2 * math.pi * r**2\n    \n    # Calculate the height-to-base area ratio\n    height_to_base_area_ratio = h/base_area\n    \n    # Calculate the lateral surface area\n    lateral_surface_area = base_area * height_to_base_area_ratio\n    \n    return lateral_surface_area\n\n# Example usage\nlateralsurface_cone(2,3) # Output: 12.5"], ["\nimport re\n\n# <func> # Python \n# Write a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef replace_specialchar(text):\n    # Replace all spaces with a colon\n    text = re.sub(r'\\s+', ': ', text)\n    # Replace commas with a comma\n    text = re.sub(r',', ':', text)\n    # Replace dots with a dot\n    text = re.sub(r'.', ':', text)\n    return text\n\n# Example usage\ntext = \"This is a sentence with spaces, commas, and dots.\""], ["\n\n# <func> # Python \n# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(A, x):\n    # Initialize the index variable\n    I = 0\n    \n    # Loop through the array\n    while I < len(A):\n        # Compare the current element with the target element\n        if A[i] == x:\n            # If the current element is equal to the target element, return the index\n            return I\n        # If the current element is greater than the target element, move to the next element\n        i += 1\n    \n    # If the target element is not found, return -1\n    return -1\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef sum_Of_Subarray_Prod(arr):\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through all subarrays of arr\n    for I in range(len(arr)):\n        # Initialize product to 1\n        product = 1\n        \n        # Loop through all subarrays of arr\n        for j in range(i+1, len(arr)):\n            # Calculate product of subarrays\n            product *= arr[j]\n            \n            # Update sum\n            sum += product\n            \n        # Update product\n        product = 1\n        \n    return sum\n\n# Test function"], ["\n\n# <func> # Python \n# Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\ndef toggle_middle_bits(n):\n    return n ^ (n >> 1) ^ (n << 1)\n\n# Example usage:\nn = 123456789"], ["\nimport bisect\n\n# <func> # Python \n# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef left_insertion(a, x):\n    # Find the index of x in the sorted array\n    I = bisect.bisect_left(a, x)\n    # If the index is not in the sorted array, return -1\n    if I == len(a):\n        return -1\n    # If the index is in the sorted array, return the index\n    else:\n        return I\n\n# Example usage"], ["\nimport re \n\n# <func> # Python \n# Write a function to check whether the given string is starting with a vowel or not using regex.\ndef check_str(string):\n    return re.search(r'[aeiouAEIOU]', string)\n\n# Example usage:"], ["\nimport math \n\n# <func> # Python \n# Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\ndef find_Index(n):\n    # Define the function to find the index of smallest triangular number with n digits\n    # Input: n - the number of digits in the triangular number\n    # Output: index of smallest triangular number with n digits\n    # Check if n is a power of 2\n    if n % 2 == 0:\n        # If n is a power of 2, return the index of the smallest even number\n        return min(find_Index(n // 2), find_Index(n // 2 + 1))\n    else:\n        # If n is not a power of 2, return the index of the smallest odd number\n        return min(find_Index(n // 2 + 1), find_Index(n // 2))\n\n# Example usage:\nn = 10"], ["\n\n# <func> # Python \n# Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\ndef tuple_to_dict(test_tup):\n    test_dict = {}\n    for elem in test_tup:\n        if elem not in test_dict:\n            test_dict[elem] = []\n        test_dict[elem].append(elem)\n    return test_dict\n\n# Example usage:\ntest_tup = (1, 2, 3)\ntest_dict = tuple_to_dict(test_tup)"], ["\n\n# <func> # Python \n# Write a python function to check whether all the characters are same or not.\ndef all_Characters_Same(s):\n    # Your code here\n    return True\n\n# Testing the function"], ["\nimport math\n\n# <func> # Python \n# Write a function to caluclate the area of a tetrahedron.\ndef area_tetrahedron(side):\n    # Calculate the area of the tetrahedron\n    area = 4 * side * side * side\n    return area\n\n# Example usage\narea_tetrahedron(4) # Output: 20.0"], ["\n\n# <func> # Python \n# Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\ndef rotate_right(l, m):\n    # create a new list with the same elements as the original list but in reverse order\n    r = [x for I, x in enumerate(l) if I < m]\n    # reverse the new list\n    r.reverse()\n    # copy the new list to the original list\n    l[:] = r\n    return l\n\n# Example usage:\nl = [1, 2, 3, 4, 5]\nrotate_right(l, 3)"], ["\n\n# <func> # Python \n# Write a function to check if the given tuple has any none value or not.\ndef check_none(test_tup):\n    return all(x is None for x in test_tup)\n\n# Example usage:\ntest_tup = (1, 2, None, 3)"], ["\n\n# <func> # Python \n# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum):\n    return all(num % digit for digit in range(startnum, endnum+1) for num in range(startnum, endnum+1))\n\n# Example usage:"], ["\nimport re\n\n# <func> # Python \n# Write a function to put spaces between words starting with capital letters in a given string.\ndef capital_words_spaces(str1):\n    # Split the string into words\n    words = str1.split()\n    # Remove all non-word characters\n    words = [word for word in words if word.isalpha()]\n    # Remove any consecutive spaces\n    words = [word.strip() for word in words if word.strip()]\n    # Join the words back into a string\n    return ' '.join(words)\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\ndef sort_numeric_strings(nums_str):\n    nums_str = list(map(int, nums_str))\n    nums_str.sort()\n    return nums_str\n\n# Example usage:\nnums_str = [\"123\", \"456\", \"789\"]\nsorted_nums_str = sort_numeric_strings(nums_str)"], ["\n\n# <func> # Python \n# Write a function to add the given tuple to the given list.\ndef add_tuple(test_list, test_tup):\n    new_list = []\n    for item in test_list:\n        new_list.append(item + test_tup)\n    return new_list\n\n# Test the function with some examples\ntest_list = [1, 2, 3]\ntest_tup = (1, 2, 3)"], ["\n\n# <func> # Python \n# Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef check_min_heap_helper(arr, i):\n    if i == len(arr) - 1:\n        return True\n    if arr[i] < arr[i + 1]:\n        return check_min_heap_helper(arr, i + 1)\n    else:\n        return False\n\n# Testing the function\narr = [10, 5, 8, 1, 3, 7]"], ["\n\n# <func> # Python \n# Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\ndef jacobsthal_num(n):\n    # initialize the jacobsthal number to 1\n    jacobsthal_num = 1\n    \n    # loop through the nth number\n    for I in range(n):\n        # increment the jacobsthal number by 1\n        jacobsthal_num += 1\n        \n        # check if the jacobsthal number is a Lucas number\n        if jacobsthal_num % 2 == 0:\n            # if it is, add it to the list of Lucas numbers\n            jacobsthal_lucas_num.append(jacobsthal_num)\n    \n    # return the list of Lucas numbers\n    return jacobsthal_lucas_num\n\n# call the function and print the list of Lucas numbers\njacobsthal_lucas_num = jacobsthal_num(10)"], ["\n\n# <func> # Python \n# Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\ndef min_k(test_list, K):\n    min_val = test_list[0]\n    for I in range(1, len(test_list)):\n        if test_list[i] < min_val:\n            min_val = test_list[i]\n    return min_val\n\n# Test cases\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nk = 3"], ["\n\n# <func> # Python \n# We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\ndef extract_index_list(l1, l2, l3):\n    common_elements = []\n    for I in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements\n\n# Example usage:\nl1 = [1, 2, 3, 4]\nl2 = [2, 3, 4, 5]\nl3 = [1, 2, 3, 4]"], ["\n\n# <func> # Python \n# Write a function to find the second smallest number in a list.\ndef second_smallest(numbers):\n    # Initialize variables\n    min_num = numbers[0]\n    second_min_num = numbers[0]\n    \n    # Loop through the list\n    for num in numbers:\n        # If the current number is smaller than the current min_num, update min_num\n        if num < min_num:\n            min_num = num\n        # If the current number is smaller than the current second_min_num, update second_min_num\n        if num < second_min_num:\n            second_min_num = num\n    \n    return min_num, second_min_num\n\n# Call the function with the list of numbers\nnumbers = [1, 2, 3, 4, 5]\nmin_num, second_min_num = second_smallest(numbers)"], ["\n\n# <func> # Python \n# Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\ndef count_reverse_pairs(test_list):\n    count = 0\n    for I in range(len(test_list) - 1):\n        if test_list[i] == test_list[i+1]:\n            count += 1\n    return count\n\n# Example usage:\ntest_list = [\"abcd\", \"efgh\", \"ijkl\", \"mnop\", \"qrst\"]"], ["\n\n# <func> # Python \n# Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\ndef unique_sublists(list1):\n    sublists = {}\n    for I in range(len(list1)):\n        sublists[list1[i]] = 1\n    return sublists\n\n# Example usage:\nsublists = unique_sublists([[1, 2, 3], [2, 3, 4], [1, 2, 3]])"], ["\n\n# <func> # Python \n# Write a function to check whether a given string is a decimal number with a precision of 2.\ndef is_decimal(num):\n    # Check if the number is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Split the string into digits\n    digits = num.split()\n    \n    # Check if the number has a length of 1\n    if len(digits) != 1:\n        return False\n    \n    # Check if the number has a length of 2\n    if len(digits) != 2:\n        return False\n    \n    # Check if the number is a valid decimal number\n    try:\n        decimal = float(digits[0])\n        if decimal < 0:\n            return False\n        return True\n    except ValueError:\n        return False\n    \n# Example usage"], ["\n\n# <func> # Python \n# Write a python function to check whether a list of numbers contains only one distinct element or not.\ndef unique_Element(arr):\n    # Write your code here.\n    count = 0\n    for num in arr:\n        if num not in count:\n            count += 1\n    return count == 1\n\n# Testing the function\narr = [1, 2, 3, 4, 5]"], ["\n\n# <func> # Python \n# Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\ndef check_monthnumber_number(monthnum3):\n    if monthnum3 == 12:\n        return True\n    elif monthnum3 % 12 == 0:\n        return True\n    else:\n        return False\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef find_min_diff(arr,n):\n    min_diff = arr[0]\n    for I in range(1,n):\n        if arr[i] < min_diff:\n            min_diff = arr[i]\n    return min_diff\n\n# Example usage:\narr = [5, 10, 15, 20, 25]\nmin_diff = find_min_diff(arr,len(arr))"], ["\n\n# <func> # Python \n# Write a python function to count number of digits in a given string.\ndef number_ctr(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count\n\n# Example usage:\nnum_digits = number_ctr(\"12345\")"], ["\nimport math \n\n# <func> # Python \n# Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef is_polite(n):\n    # check if n is a prime number\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for I in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % I == 0:\n                return False\n        return True\n\n# <func> # Python \n# Write a function to find nth prime number. geeksforgeeks.org/n-th-prime-number/\ndef is_prime(n):\n    # check if n is a prime number\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for I in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % I == 0:\n                return False\n        return True\n\n# <func> # Python \n# Write a function to find nth composite number. geeksforgeeks.org/n-th-composite-number/\ndef is_composite(n):\n    # check if n is a composite number\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for I in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % I == 0:\n                return False\n        return True\n\n# <func> # Python \n# Write a function to find nth Fibonacci number. geeksforgeeks.org/n-th-fibonacci-number/\ndef is_fibonacci(n):\n    # check if n is a Fibonacci number\n    if n <= 1:\n        return False\n    elif n == "], ["\n\n# <func> # Python \n# Write a function to return a list of all pairs of consecutive items in a given list.\ndef pair_wise(l1):\n    # Initialize a list to store pairs\n    pairs = []\n    # Loop through the list\n    for I in range(len(l1)-1):\n        # If the current and next items are equal, add them to the list\n        if l1[i] == l1[i+1]:\n            pairs.append((l1[i], l1[i+1]))\n    return pairs\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef get_pairs_count(arr, sum_):\n    count = 0\n    for I in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum_:\n                count += 1\n    return count\n\n# Test the function with some examples:\narr = [1, 2, 3, 4, 5]\nsum = 15"], ["\n\n# <func> # Python \n# Write a python function to get the difference between two lists.\ndef Diff(li1,li2):\n    diff = []\n    for I in range(len(li1)):\n        if li1[i] != li2[i]:\n            diff.append(li1[i])\n    return diff\n\n# Testing the function\nli1 = [1,2,3,4,5]\nli2 = [2,3,4,5,6]"], ["\n\n# <func> # Python \n# Write a python function to find the sum of fourth power of first n odd natural numbers.\ndef odd_num_sum(n):\n    sum = 0\n    for I in range(1, n+1):\n        sum += i**4\n    return sum\n\n# Call the function and print the result."], ["\nfrom collections import deque\n\n# <func> # Python \n# Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ndef check_expression(exp):\n    # Check if the expression is empty\n    if not exp:\n        return True\n    \n    # Check if the expression contains only digits or letters\n    if not all(char.isdigit() or char.isalpha() for char in exp):\n        return False\n    \n    # Create a stack to keep track of the parenthesis\n    stack = deque()\n    \n    # Traverse the expression from the right to the left\n    for I in range(len(exp) - 1):\n        # Check if the current character is a parenthesis\n        if exp[i] == '(' or exp[i] == '[':\n            # If the current character is a parenthesis, push it onto the stack\n            stack.append(exp[i])\n        elif exp[i] == ')' or exp[i] == ']':\n            # If the current character is a parenthesis, pop it off the stack\n            if not stack:\n                return False\n            else:\n                # If the topmost parenthesis is balanced, pop it off the stack\n                exp = exp[:-1] + stack.popleft()\n        elif exp[i] == '+' or exp[i] == '-':\n            # If the current character is a parenthesis, push it onto the stack\n            stack.append(exp[i])\n        elif exp[i] == '*' or exp[i] == '/':\n            # If the current character is a parenthesis, pop it off the stack\n            if not stack:\n                return False\n            else:\n                # If the topmost parenthesis is balanced, pop it off the stack\n                exp = exp[:-1] + stack.popleft()\n        elif exp[i] == '^':\n            # If the current character is a parenthesis, push it onto the stack\n            stack.append(exp[i])\n        elif exp[i] == '^':\n            # If"], ["\n\n# <func> # Python \n# Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n    # Initialize a list to store the words with k length\n    words = []\n    \n    # Loop through the string and remove all the words with k length\n    for I in range(len(test_str)):\n        if len(test_str[i:i+K]) == K:\n            words.append(test_str[i:i+K])\n    \n    # Return the list of words with k length\n    return words\n\n# Example usage\nremove_length(\"hello world\", 3) # Output: ['hello', 'world']\nremove_length(\"Hello World\", 3) # Output: ['Hello', 'World']\nremove_length(\"Hello World\", 5) # Output: ['Hello', 'World']\nremove_length(\"Hello World\", 1) # Output: ['Hello', 'World']\nremove_length(\"Hello World\", 0) # Output: ['Hello', 'World']"], ["\nimport re\n\n# <func> # Python \n# Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\ndef occurance_substring(text,pattern):\n    # Convert the text and pattern to lowercase\n    text = text.lower()\n    pattern = pattern.lower()\n    \n    # Initialize the count and position variables\n    count = 0\n    position = 0\n    \n    # Iterate through the text and pattern\n    for I in range(len(text)):\n        # Check if the current character matches the pattern\n        if text[i] == pattern[position]:\n            # Increment the count and position\n            count += 1\n            position += 1\n            \n            # If the count reaches the length of the pattern, return the substring\n            if count == len(pattern):\n                return text[i:position]\n            \n    # If there is no match, return None\n    return None\n\n# Example usage\ntext = \"This is a test string with a substring.\"\npattern = \"a\""], ["\n\n# <func> # Python \n# Write a python function to check whether every odd index contains odd numbers of a given list.\ndef odd_position(nums):\n    # check if the list is empty\n    if not nums:\n        return True\n    \n    # check if the list is not a list\n    if not isinstance(nums, list):\n        return False\n    \n    # check if the list is not a list of integers\n    if not all(isinstance(num, int) for num in nums):\n        return False\n    \n    # check if the list contains only odd numbers\n    for num in nums:\n        if num % 2 != 0:\n            return False\n    \n    return True\n\n# test the function\nnums = [1, 2, 3, 4, 5]"], ["\n\n# <func> # Python \n# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr):\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through the list\n    for I in range(len(arr)):\n        # Check if the current element is not repeated\n        if arr[i] != arr[i+1]:\n            # Increase the sum by the current element\n            sum += arr[i]\n            \n    return sum\n\n# Example usage\narr = [1, 2, 3, 4, 5]\nsum = find_sum(arr)"], ["\nfrom itertools import groupby\n\n# <func> # Python \n# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1):\n    # Initialize a dictionary to store the sublists\n    sublists = {}\n    \n    # Loop through the list\n    for I in range(len(list1)):\n        # Check if the current element is a duplicate\n        if list1[i] in sublists:\n            # If it is, add the sublist to the dictionary\n            sublists[list1[i]] += 1\n        else:\n            # If it is not, create a new sublist\n            sublists[list1[i]] = 1\n    \n    # Return the dictionary of sublists\n    return sublists\n\n# Example usage\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\npacked_list = pack_consecutive_duplicates(list1)"], ["\nfrom itertools import combinations \n\n# <func> # Python \n# Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\ndef find_combinations(test_list):\n    # Initialize the combinations list\n    combinations = []\n    \n    # Loop through the given tuple list\n    for I in range(len(test_list)):\n        # Loop through the combinations of the given tuple\n        for j in range(len(test_list[i])):\n            # Combine the given tuple with the current combination\n            combinations.append((test_list[i][j],))\n    \n    # Return the list of combinations\n    return combinations\n\n# Example usage\ntest_list = [1, 2, 3, 4, 5]\ncombinations = find_combinations(test_list)"], ["\nimport math \n\n# <func> # Python \n# Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\ndef count_divisors(n):\n    count = 0\n    for I in range(1, int(math.sqrt(n)) + 1):\n        if n % I == 0:\n            count += 1\n    return count\n\n# Example usage:\nn = 10"], ["\n\n# <func> # Python \n# Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\ndef odd_length_sum(arr):\n    sum = 0\n    for I in range(len(arr)):\n        if arr[i] % 2 != 0:\n            sum += arr[i]\n    return sum\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to find the product of first even and odd number of a given list.\ndef mul_even_odd(list1):\n    product = 1\n    for I in range(len(list1)):\n        if I % 2 == 0:\n            product *= list1[i]\n        else:\n            product *= 2\n    return product\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to convert tuple string to integer tuple.\ndef tuple_str_int(test_str):\n    test_tuple = tuple(map(int, test_str.split(',')))\n    return test_tuple\n\n# Testing the function\ntest_str = \"1,2,3,4,5\"\ntest_tuple = tuple_str_int(test_str)"], ["\nimport bisect\n\n# <func> # Python \n# Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x):\n    # Initialize the right pointer to the first unsorted element\n    right = 0\n    while right < len(a) and a[right] > x:\n        right += 1\n    # If the right pointer is equal to the length of the array, the value is already present\n    if right == len(a):\n        return right\n    # If the right pointer is greater than the length of the array, the value is not present\n    else:\n        # Find the index of the first unsorted element greater than the right pointer\n        for I in range(right, len(a)):\n            if a[i] > a[right]:\n                break\n        # Update the right pointer to the index of the first unsorted element greater than the right pointer\n        right = I\n        # If the right pointer is greater than the length of the array, the value is not present\n        return right\n\n# Example usage\na = [5, 3, 1, 9, 7, 2, 4]\nx = 9"], ["\nimport re\n\n# <func> # Python \n# Write a function that matches a string that has an a followed by three 'b'.\ndef text_match_three(text):\n    return re.search(r'(?<=\\b)b(?=\\b)', text)\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a function to create a new tuple from the given string and list.\ndef new_tuple(test_list, test_str):\n    return tuple(test_list) + (test_str,)\n\n# Example usage:\ntest_str = \"hello, world\"\ntest_list = [\"apple\", \"banana\", \"cherry\"]\nnew_tuple(test_list, test_str)\n# Output: ('hello,', 'world')\n\n# Example usage:\ntest_str = \"123\"\ntest_list = [1, 2, 3]\nnew_tuple(test_list, test_str)\n# Output: ('123',)"], ["\n\n# <func> # Python \n# Write a python function to check whether every even index contains even numbers of a given list.\ndef even_position(nums):\n    for I in range(len(nums)):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n\n# Call the function with the list of numbers\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], ["\n\n# <func> # Python \n# Write a function to remove tuples from the given tuple.\ndef remove_nested(test_tup):\n    # Your code here\n    return test_tup\n\n# Example usage:\ntest_tup = (1, (2, (3, (4, 5))), (6, (7, (8, 9))))"], ["\n\n# <func> # Python \n# Write a python function to count the number of lists in a given number of lists.\ndef count_list(input_list):\n    count = 0\n    for list in input_list:\n        if isinstance(list, list):\n            count += 1\n    return count\n\n# Example usage:\ncount_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # Output: 3"], ["\n\n# <func> # Python \n# Write a python function to find the last position of an element in a sorted array.\ndef last(arr,x):\n    # Find the last index of x in the array\n    last_index = len(arr) - 1\n    # Loop through the array from the last index to the first index\n    for I in range(last_index, -1, -1):\n        # If the current element is equal to x, break out of the loop\n        if arr[i] == x:\n            break\n    # If the loop did not find x, return -1\n    return -1\n\n# Test the function with some sample inputs\narr = [1, 2, 3, 4, 5]\nx = 3"], ["\nimport re\n\n# <func> # Python \n# Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef text_starta_endb(text):\n    # Replace 'a' with 'A' and 'b' with 'B'\n    return re.sub('a', 'A', text)\n\n# Example usage"], ["\n\n# <func> # Python \n# Write function to find the sum of all items in the given dictionary.\ndef return_sum(d):\n    sum = 0\n    for key, value in d.items():\n        sum += value\n    return sum\n\n# Example usage:\nd = {'a': 1, 'b': 2, 'c': 3}"], ["\n\n# <func> # Python \n# Write a python function to find the sum of all odd natural numbers within the range l and r.\ndef sum_odd(n):\n    sum = 0\n    for I in range(l, r+1):\n        if I % 2 == 1:\n            sum += I\n    return sum\n\n# Call the function with the desired range and output the result."], ["\n\n# <func> # Python \n# Write a python function to find the sum of an array.\ndef _sum(arr):\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n\n# Example usage:\narr = [1, 2, 3, 4]\nsum = _sum(arr)"], ["\n\n# <func> # Python \n# Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\ndef left_rotate(n,d):\n    return (n << d) | (n >> (64-d))\n\n# Testing the function\nn = 12345678901234567890\nd = 4\nleft_rotate(n,d) # Output: 6789012345678901234567890"], ["\n\n# <func> # Python \n# Write a function to remove all whitespaces from a string.\ndef remove_all_spaces(text):\n    return ''.join(c for c in text if c.isalnum())\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to count the number of equal numbers from three given integers.\ndef test_three_equal(x,y,z):\n    if x == y and x == z:\n        return 1\n    else:\n        return 0\n\n# Test the function with three integers"], ["\n\n# <func> # Python \n# Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\ndef is_perfect_square(n):\n    if n == 0:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        return n ** 2 == n\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to check whether the product of numbers in a list is even or not.\ndef is_product_even(arr):\n    # Check if the length of the list is odd\n    if len(arr) % 2 != 0:\n        return False\n    \n    # Loop through the list and check if the product of any two numbers is odd\n    for I in range(len(arr)):\n        if arr[i] * (arr[i] + 1) % 2 != 0:\n            return False\n    return True\n\n# Example usage\narr = [1, 2, 3, 4, 5]"], ["\n\n# <func> # Python \n# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists):\n    max_sum = 0\n    max_list = []\n    for list in lists:\n        sum_list = []\n        for item in list:\n            sum_list.append(item)\n        max_sum = max(max_sum, sum_list)\n        max_list.append(sum_list)\n    return max_list\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nmax_sum_list(lists)\n# Output: [[7, 8, 9], [4, 5, 6]]\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nmax_sum_list(lists)\n# Output: [[7, 8, 9], [10, 11, 12]]\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]\nmax_sum_list(lists)\n# Output: [[13, 14, 15], [7, 8, 9], [4, 5, 6]]"], ["\n\n# <func> # Python \n# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str):\n    # Initialize variables\n    max_run = 0\n    max_char = \"\"\n    \n    # Loop through the string\n    for char in test_str:\n        # Check if the current character is uppercase\n        if char.isupper():\n            # Increase the maximum run if the current character is the maximum run\n            if max_run < len(max_char):\n                max_run = len(max_char)\n                max_char = char\n            \n    # Return the maximum run\n    return max_run\n\n# Example usage"], ["\n\n# <func> # Python \n# Write a python function to find the first odd number in a given list of numbers.\ndef first_odd(nums):\n    # your code here\n    return nums[0] if nums[0] % 2 != 0 else nums[1]\n\n# Example usage:\nnums = [2, 4, 6, 8, 10]"], ["\n\n# <func> # Python \n# Write a function to check if the given tuples contain the k or not.\ndef check_K(test_tup, K):\n    # Check if the tuple contains the k\n    if len(test_tup) == K:\n        return True\n    else:\n        return False\n\n# Example usage\ncheck_K([(1, 2, 3), (4, 5, 6)], 2) # True\ncheck_K([(1, 2, 3), (4, 5, 6)], 3) # False\ncheck_K([(1, 2, 3), (4, 5, 6)], 4) # False\ncheck_K([(1, 2, 3), (4, 5, 6)], 5) # False\ncheck_K([(1, 2, 3), (4, 5, 6)], 6) # False\ncheck_K([(1, 2, 3), (4, 5, 6)], 7) # False\ncheck_K([(1, 2, 3), (4, 5, 6)], 8) # False\ncheck_K([(1, 2, 3), (4, 5, 6)], 9) # False\ncheck_K([(1, 2, 3), (4, 5, 6)], 10) # False\ncheck_K([(1, 2, 3), (4, 5, 6)], 11) # False\ncheck_K([(1, 2, 3), (4, 5, 6)], 12) # False\ncheck_K([(1, 2, 3), (4, 5, 6)], 13) # False\ncheck_K([(1, 2, 3), (4, 5, 6)], 14) # False\ncheck_K([(1, 2, 3), (4, 5, 6)], 15) # False\ncheck_K([(1, 2, 3), (4, "], ["\n\n# <func> # Python \n# Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\ndef check_smaller(test_tup1, test_tup2):\n    return all(tup1[i] < tup2[i] for I, tup1 in enumerate(test_tup1) for j, tup2 in enumerate(test_tup2) if I != j)\n\n# Example usage:\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (2, 3, 4, 5)"]]