[["package has_close_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Check if in given list of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([]float64{1.0, 2.0, 3.0}, 0.5)\n// false\n// >>> has_close_elements([]float64{1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\n// true\nfunc has_close_elements(numbers []float64, threshold float64) bool {\n    if len(numbers) == 0 {\n        return false\n    }\n    sortedNumbers := sort.Float64Slice(numbers)\n    sortedNumbers = sort.Float64SliceBy(func(a, b float64) bool {\n        return a < b && a > threshold\n    }, sortedNumbers)\n    return len(sortedNumbers) == 1\n}\n"], ["package separate_paren_groups_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the list of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// []string{\"()\", \"(())\", \"(()())\"}\nfunc separate_paren_groups(paren_string string) []string {\n    // Split the string into groups of balanced parentheses\n    groups := strings.Split(paren_string, \" \")\n\n    // Remove any spaces from the input string\n    spaces := strings.TrimSpace(paren_string)\n\n    // Create a map to store the balanced groups\n    balanced_groups := make(map[string]bool)\n\n    // Loop through each group in the input string\n    for _, group := range groups {\n        // Check if the group is balanced\n        if !is_balanced(group) {\n            fmt.Println(\"Error: Group is not balanced\")\n            return nil\n        }\n\n        // Check if the group is already in the map\n        if _, ok := balanced_groups[group]; ok {\n            fmt.Println(\"Error: Group is already in the map\")\n            return nil\n        }\n\n        // Add the group to the map\n        balanced_groups[group] = true\n    }\n\n    // Create a list of balanced groups\n    balanced_groups_list := make([]string, 0, len(balanced_groups))\n    for group := range balanced_groups {\n        balanced_groups_list = append(balanced_groups_list, group)\n    }\n\n    // Return the list of balanced groups\n    return balanced_groups_list\n}\n"], ["package truncate_number_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunc truncate_number(number float64) float64 {\n    // Check if the number is less than 1\n    if number < 1 {\n        return number\n    }\n\n    // Find the largest integer smaller than the number\n    var largest int\n    for I := 0; I < int(math.Ceil(math.Log10(float64(number)))); i++ {\n        if number < 1 {\n            break\n        }\n        largest = i\n    }\n\n    // Find the decimal part\n    var decimal float64\n    for I := largest; I >= 1; i-- {\n        decimal += float64(i) * math.Pow(10, float64(i - 1))\n    }\n\n    // Return the decimal part\n    return decimal\n}\n"], ["package below_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You're given a list of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([]int{1, 2, 3})\n// false\n// >>> below_zero([]int{1, 2, -4, 5})\n// true\nfunc below_zero(operations []int) bool {\n    // Check if the first operation is negative\n    if operations[0] < 0 {\n        return true\n    }\n    // Loop through the rest of the operations\n    for I := 1; I < len(operations); i++ {\n        if operations[i] < 0 {\n            return true\n        }\n    }\n    // If no negative operations are found, the balance is positive\n    return false\n}\n"], ["package mean_absolute_deviation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([]float64{1.0, 2.0, 3.0, 4.0})\n// 1.0\nfunc mean_absolute_deviation(numbers []float64) float64 {\n    // Calculate mean\n    mean := sum(numbers) / len(numbers)\n\n    // Calculate MAD\n    mad := 0.0\n    for _, num := range numbers {\n        diff := abs(num - mean)\n        mad += diff\n    }\n\n    // Return MAD\n    return mad / len(numbers)\n}\n"], ["package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    // Check if input list is empty\n    if len(numbers) == 0 {\n        return []int{}\n    }\n\n    // Create a new slice to store the interspersed elements\n    interspersed := make([]int, 0, len(numbers))\n\n    // Loop through the input list and add each element to the interspersed slice\n    for _, num := range numbers {\n        interspersed = append(interspersed, num)\n    }\n\n    // Remove the delimeter from the end of the interspersed slice\n    interspersed = interspersed[:len(interspersed)-1]\n\n    // Return the interspersed slice\n    return interspersed\n}\n"], ["package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// []int{2, 3, 1, 3}\nfunc parse_nested_parens(paren_string string) []int {\n    // Split the string into groups of parentheses separated by spaces.\n    groups := strings.Split(paren_string, \" \")\n\n    // Initialize the nesting level to 0.\n    nesting := 0\n\n    // Loop through each group of parentheses.\n    for _, group := range groups {\n        // If the group is empty, there is no nesting.\n        if len(group) == 0 {\n            nesting++\n            continue\n        }\n\n        // If the group contains a single opening parenthesis, there is one level of nesting.\n        if len(group) == 1 {\n            nesting++\n            continue\n        }\n\n        // If the group contains two or more opening parenthesis, there is two levels of nesting.\n        if len(group) > 1 {\n            nesting += 2\n            continue\n        }\n\n        // If the group contains no opening parenthesis, there is no nesting.\n        nesting--\n    }\n\n    // Return the nesting level.\n    return []int{nesting}\n}\n"], ["package filter_by_substring_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Filter an input list of strings only for ones that contain given substring\n// >>> filter_by_substring([]string{}, \"a\")\n// []string{}\n// >>> filter_by_substring([]string{\"abc\", \"bacd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"bacd\", \"array\"}\nfunc filter_by_substring(strings []string, substring string) []string {\n    filtered := make([]string, 0)\n    for _, s := range strings {\n        if strings.Contains(s, substring) {\n            filtered = append(filtered, s)\n        }\n    }\n    return filtered\n}\n"], ["package sum_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// For a given list of integers, return a list consisting of a sum and a product of all the integers in a list.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([]int{})\n// []interface{}{0, 1}\n// >>> sum_product([]int{1, 2, 3, 4})\n// []interface{}{10, 24}\nfunc sum_product(numbers []int) []interface{} {\n    if len(numbers) == 0 {\n        return []interface{}{0, 1}\n    }\n    sum := 0\n    product := 1\n    for _, num := range numbers {\n        sum += num\n        product *= num\n    }\n    return []interface{}{sum, product}\n}\n"], ["package rolling_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// From a given list of integers, generate a list of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([]int{1, 2, 3, 2, 3, 4, 2})\n// []int{1, 2, 3, 3, 3, 4, 4}\nfunc rolling_max(numbers []int) []int {\n    // Initialize max value to -1\n    max := -1\n    // Initialize count to 0\n    count := 0\n    // Initialize max index to -1\n    maxIndex := -1\n    // Initialize max value index to -1\n    maxValueIndex := -1\n    // Initialize max value index to -1\n    maxValue := numbers[0]\n    // Initialize max value index to -1\n    maxValueIndex := -1\n    // Initialize max value index to -1\n    maxValueIndex := -1\n    // Initialize max value index to -1\n    maxValueIndex := -1\n    // Initialize max value index to -1\n    maxValueIndex := -1\n    // Initialize max value index to -1\n    maxValueIndex := -1\n    // Initialize max value index to -1\n    maxValueIndex := -1\n    // Initialize max value index to -1\n    maxValueIndex := -1\n    // Initialize max value index to -1\n    maxValueIndex := -1\n    // Initialize max value index to -1\n    maxValueIndex := -1\n    // Initialize max value index to -1\n    maxValueIndex := -1\n    // Initialize max value index to -1\n    maxValueIndex := -1\n    // Initialize max value index to -1\n    maxValueIndex := -1\n    // Initialize max value index to -1\n    maxValueIndex := -1\n    // Initialize max value index to -1\n    maxValueIndex := -1\n    // Initialize max value index to -1\n    maxValueIndex := -1\n    // Initialize max value index to -1\n    maxValueIndex := -1\n    // Initialize max value index to -1\n    maxValueIndex := -1\n    // Initialize max value"], ["package make_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunc make_palindrome(myString string) string {\n    // Initialize variables\n    var palindrome string\n    var postfix string\n    var prefix string\n    var length int\n    var maxLength int\n\n    // Find the longest postfix of the string\n    for I := 0; I < len(myString); i++ {\n        if myString[i] == myString[i+1] {\n            postfix = postfix + myString[i]\n        } else {\n            prefix = prefix + myString[i]\n            length = length + 1\n        }\n    }\n\n    // Find the longest prefix of the string\n    for I := 0; I < len(myString)-length+1; i++ {\n        prefix = prefix + myString[i]\n    }\n\n    // Reverse the prefix and postfix\n    for I := 0; I < len(prefix); i++ {\n        postfix = postfix[len(postfix)-1-i:] + prefix[i]\n    }\n\n    // Find the palindrome suffix\n    for I := 0; I < len(postfix); i++ {\n        if postfix[i] == postfix[i+1] {\n            palindrome = palindrome + postfix[i]\n        } else {\n            palindrome = palindrome + myString[i]\n        }\n    }\n\n    // Return the palindrome\n    return palindrome\n}\n"], ["package string_xor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunc string_xor(a string, b string) string {\n    var result string\n    for I := 0; I < len(a); i++ {\n        if a[i] == b[i] {\n            result += string(a[i])\n        } else {\n            result += string(b[i])\n        }\n    }\n    return result\n}\n"], ["package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    // Check if the input values are positive\n    if a < 0 || b < 0 {\n        return 0\n    }\n    // Calculate the greatest common divisor of a and b\n    gcd := a % b\n    for gcd != 0 {\n        a, b = b, a % b\n        gcd = a % b\n    }\n    return gcd\n}\n"], ["package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString string) []string {\n    // Split string into words\n    words := strings.Split(myString, \" \")\n\n    // Sort words in alphabetical order\n    sortedWords := sort.StringSlice(words)\n\n    // Create map of all prefixes\n    prefixes := make(map[string]bool)\n\n    // Loop through sorted words and check if prefix exists\n    for _, word := range sortedWords {\n        if prefixes[word] {\n            // If prefix exists, add it to list of all prefixes\n            prefixes[word] = true\n        }\n    }\n\n    // Return list of all prefixes\n    return prefixes.Values()\n}\n"], ["package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for I := 0; I < n; i++ {\n        s += fmt.Sprint(i)\n    }\n    return s\n}\n"], ["package count_distinct_characters_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunc count_distinct_characters(myString string) int {\n    var count int\n    for _, char := range myString {\n        if _, ok := charMap[char]; !ok {\n            count++\n        }\n    }\n    return count\n}\n"], ["package parse_music_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return list of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// []int{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\nfunc parse_music(music_string string) []int {\n    // Split string into individual notes\n    notes := strings.Split(music_string, \"|\")\n\n    // Convert notes to integers\n    notes_int := make([]int, len(notes))\n    for I, note := range notes {\n        if note == \"o\" {\n            notes_int[i] = 4\n        } else if note == \"o|\" {\n            notes_int[i] = 2\n        } else if note == \".\" {\n            notes_int[i] = 1\n        } else {\n            notes_int[i] = 1\n        }\n    }\n\n    // Return list of integers corresponding to how many beats each note lasts\n    return notes_int\n}\n"], ["package how_many_times_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunc how_many_times(myString string, substring string) int {\n    // Check if substring is empty\n    if len(substring) == 0 {\n        return 0\n    }\n\n    // Initialize count variable\n    count := 0\n\n    // Loop through the original string\n    for I := 0; I < len(myString); i++ {\n        // Check if substring is present in the current character\n        if myString[i] == substring[0] {\n            // If substring is present, increment count\n            count++\n\n            // Check if substring is present in the next character\n            if I < len(myString) - 1 {\n                // If substring is present in the next character, increment count again\n                count++\n            }\n        }\n    }\n\n    // Return count\n    return count\n}\n"], ["package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunc sort_numbers(numbers string) string {\n    // Split numbers into an array\n    numbersArr := strings.Split(numbers, \" \")\n\n    // Sort numbers in ascending order\n    sortedNumbers := make([]int, 0)\n    for _, num := range numbersArr {\n        numInt, err := strconv.Atoi(num)\n        if err != nil {\n            fmt.Println(\"Error converting number:\", num)\n            return \"\"\n        }\n        sortedNumbers = append(sortedNumbers, numInt)\n    }\n\n    // Sort numbers in descending order\n    sortedNumbers = sort.IntsAscending(sortedNumbers)\n\n    // Join sorted numbers into a string\n    sortedString := fmt.Sprintf(\"%v\", sortedNumbers)\n    return sortedString\n}\n"], ["package find_closest_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n// []interface{}{2.0, 2.2}\n// >>> find_closest_elements([]float64{1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n// []interface{}{2.0, 2.0}\nfunc find_closest_elements(numbers []float64) []interface{} {\n    // Sort the numbers in ascending order\n    numbers = sort.Float64Slice(numbers)\n\n    // Find the two numbers that are closest to each other\n    min_distance := math.MaxFloat64\n    min_index := 0\n    for I, num := range numbers {\n        distance := math.Abs(num - numbers[i])\n        if distance < min_distance {\n            min_distance = distance\n            min_index = i\n        }\n    }\n\n    // Return the two numbers that are closest to each other\n    return []interface{}{numbers[min_index], numbers[min_index]}\n}\n"], ["package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of numbers (of at least two elements), apply a linear transform to that list,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n// []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64) []float64 {\n    // Check if the list has at least two elements\n    if len(numbers) < 2 {\n        panic(\"list must have at least two elements\")\n    }\n\n    // Calculate the smallest number in the list\n    min := numbers[0]\n    for _, num := range numbers {\n        if num < min {\n            min = num\n        }\n    }\n\n    // Calculate the largest number in the list\n    max := numbers[0]\n    for _, num := range numbers {\n        if num > max {\n            max = num\n        }\n    }\n\n    // Calculate the unit vector in the direction of the smallest number\n    dir := max - min\n    if dir == 0 {\n        return numbers\n    }\n    unit := dir / math.Sqrt(dir * dir + 1)\n    return append(numbers, unit)\n}\n"], ["package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Filter given list of any gothon values only for integers\n// >>> filter_integers([]float64{\"a\", 3.14, 5})\n// []int{5}\n// >>> filter_integers([]interface{}{1, 2, 3, \"abc\", map[interface{}]interface{}{}, []interface{}{}})\n// []int{1, 2, 3}\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n    for _, value := range values {\n        if _, ok := value.(int); ok {\n            result = append(result, int(value.(int)))\n        }\n    }\n    return result\n}\n"], ["package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n"], ["package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int) int {\n    // base case: if n is 1, return 1\n    if n == 1 {\n        return 1\n    }\n\n    // base case: if n is 2, return 2\n    if n == 2 {\n        return 2\n    }\n\n    // base case: if n is 3, return 3\n    if n == 3 {\n        return 3\n    }\n\n    // base case: if n is 4, return 4\n    if n == 4 {\n        return 4\n    }\n\n    // base case: if n is 5, return 5\n    if n == 5 {\n        return 5\n    }\n\n    // base case: if n is 6, return 6\n    if n == 6 {\n        return 6\n    }\n\n    // base case: if n is 7, return 7\n    if n == 7 {\n        return 7\n    }\n\n    // base case: if n is 8, return 8\n    if n == 8 {\n        return 8\n    }\n\n    // base case: if n is 9, return 9\n    if n == 9 {\n        return 9\n    }\n\n    // base case: if n is 10, return 10\n    if n == 10 {\n        return 10\n    }\n\n    // base case: if n is 11, return 11\n    if n == 11 {\n        return 11\n    }\n\n    // base case: if n is 12, return 12\n    if n == 12 {\n        return 12\n    }\n\n    // base case: if n is 13, return 13\n    if n == 13 {\n        return 13\n    }\n\n    //"], ["package factorize_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return list of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// []int{2, 2, 2}\n// >>> factorize(25)\n// []int{5, 5}\n// >>> factorize(70)\n// []int{2, 5, 7}\nfunc factorize(n int) []int {\n    // Check if number is divisible by any prime number\n    for I := 2; I <= n; i++ {\n        if n % i == 0 {\n            return []int{i}\n        }\n    }\n    return []int{}\n}\n"], ["package remove_duplicates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([]int{1, 2, 3, 2, 4})\n// []int{1, 3, 4}\nfunc remove_duplicates(numbers []int) []int {\n    var result []int\n    for _, num := range numbers {\n        if _, ok := result[num]; !ok {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n"], ["package flip_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunc flip_case(myString string) string {\n    // Convert to lowercase\n    lowercase := make([]rune, 0)\n    for _, r := range myString {\n        lowercase = append(lowercase, rune(r))\n    }\n    // Convert to uppercase\n    uppercase := make([]rune, 0)\n    for _, r := range lowercase {\n        uppercase = append(uppercase, rune(r))\n    }\n    // Convert back to lowercase\n    lowercase = make([]rune, 0)\n    for _, r := range uppercase {\n        lowercase = append(lowercase, rune(r))\n    }\n    // Convert back to uppercase\n    uppercase = make([]rune, 0)\n    for _, r := range lowercase {\n        uppercase = append(uppercase, rune(r))\n    }\n    // Convert back to lowercase\n    lowercase = make([]rune, 0)\n    for _, r := range uppercase {\n        lowercase = append(lowercase, rune(r))\n    }\n    // Convert back to uppercase\n    uppercase = make([]rune, 0)\n    for _, r := range lowercase {\n        uppercase = append(uppercase, rune(r))\n    }\n    // Return the flipped string\n    return string(uppercase)\n}\n"], ["package concatenate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Concatenate list of strings into a single string\n// >>> concatenate([]string{})\n// \"\"\n// >>> concatenate([]string{\"a\", \"b\", \"c\"})\n// \"abc\"\nfunc concatenate(strings []string) string {\n    var result string\n    for _, s := range strings {\n        result += s\n    }\n    return result\n}\n"], ["package filter_by_prefix_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([]string{}, \"a\")\n// []string{}\n// >>> filter_by_prefix([]string{\"abc\", \"bcd\", \"cde\", \"array\"}, \"a\")\n// []string{\"abc\", \"array\"}\nfunc filter_by_prefix(strings []string, prefix string) []string {\n    // Create a map to store the prefixes and their corresponding strings.\n    prefixes := make(map[string][]string)\n    for _, s := range strings {\n        if strings.HasPrefix(s, prefix) {\n            prefixes[prefix] = append(prefixes[prefix], s)\n        }\n    }\n    // Create a new list of strings with only the prefixes.\n    prefixed := make([]string, 0)\n    for prefix, s := range prefixes {\n        prefixed = append(prefixed, s...)\n    }\n    return prefixed\n}\n"], ["package get_positive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return only positive numbers in the list.\n// >>> get_positive([]int{-1, 2, -4, 5, 6})\n// []int{2, 5, 6}\n// >>> get_positive([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// []int{5, 3, 2, 3, 9, 123, 1}\nfunc get_positive(l []int) []int {\n    var ret []int\n    for _, num := range l {\n        if num > 0 {\n            ret = append(ret, num)\n        }\n    }\n    return ret\n}\n"], ["package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n <= 1 {\n        return false\n    }\n    for I := 2; I <= int(math.Sqrt(float64(n))); i++ {\n        if n % I == 0 {\n            return false\n        }\n    }\n    return true\n}\n"], ["package sort_third_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes a list l and returns a list l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([]int{1, 2, 3})\n// []int{1, 2, 3}\n// >>> sort_third([]int{5, 6, 3, 4, 8, 9, 2})\n// []int{2, 6, 3, 4, 8, 9, 5}\nfunc sort_third(l []int) []int {\n    // Create a new list with the same elements as l but sorted in the third position\n    // (i.e., the position where the values are equal to the corresponding indicies of l)\n    l3 := make([]int, len(l))\n    for I, v := range l {\n        l3[i] = v\n    }\n    // Sort the new list in the third position\n    sort.Sort(sort.IntSlice(l3))\n    // Return the sorted list\n    return l3\n}\n"], ["package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n    var unique []int\n    for _, v := range l {\n        if _, ok := unique[v]; !ok {\n            unique = append(unique, v)\n        }\n    }\n    return unique\n}\n"], ["package max_element_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return maximum element in the list.\n// >>> max_element([]int{1, 2, 3})\n// 3\n// >>> max_element([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n// 123\nfunc max_element(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n    }\n    return max\n}\n"], ["package fizz_buzz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunc fizz_buzz(n int) int {\n    // Check if n is divisible by 11 or 13\n    if n % 11 == 0 || n % 13 == 0 {\n        // If so, return \"FizzBuzz\"\n        return 3\n    }\n    // If not, return \"Buzz\"\n    return 2\n}\n"], ["package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1, 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3, 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var l1 []int\n    for _, v := range l {\n        if v%2 == 0 {\n            l1 = append(l1, v)\n        }\n    }\n    return l1\n}\n"], ["package prime_fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunc prime_fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    if n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 5\n    }\n    if n == 4 {\n        return 13\n    }\n    if n == 5 {\n        return 89\n    }\n    return 0\n}\n"], ["package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n// false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1, 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n// true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l []int) bool {\n    // check if the list has only one element\n    if len(l) != 3 {\n        return false\n    }\n\n    // check if the sum of the first two elements is zero\n    if l[0] + l[1] != l[2] {\n        return false\n    }\n\n    // check if the sum of the first two elements is not zero\n    if l[0] + l[1] == l[2] {\n        return true\n    }\n\n    // check if the sum of the first two elements is not zero\n    // and the second element is not equal to the first element\n    if l[1] + l[2] != l[0] {\n        return false\n    }\n\n    // check if the sum of the first two elements is not zero\n    // and the second element is not equal to the first element\n    // and the third element is not equal to the first two elements\n    if l[1] + l[2] != l[0] || l[1] + l[2] != l[1] || l[1] + l[2] != l[2] {\n        return false\n    }\n\n    // check if the sum of the first two elements is not"], ["package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunc car_race_collision(n int) int {\n    // Initialize the count to 0.\n    count := 0\n\n    // Loop through all possible combinations of n cars.\n    for I := 0; I < n; i++ {\n        for j := 0; j < n; j++ {\n            // If the ith car collides with the jth car, increment the count.\n            if i != j {\n                count++\n            }\n        }\n    }\n\n    // Return the count.\n    return count\n}\n"], ["package incr_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return list with elements incremented by 1.\n// >>> incr_list([]int{1, 2, 3})\n// []int{2, 3, 4}\n// >>> incr_list([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n// []int{6, 4, 6, 3, 4, 4, 10, 1, 124}\nfunc incr_list(l []int) []int {\n    var res []int\n    for _, v := range l {\n        res = append(res, v+1)\n    }\n    return res\n}\n"], ["package pairs_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// pairs_sum_to_zero takes a list of integers as an input.\n// it returns true if there are two distinct elements in the list that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([]int{1, 3, 5, 0})\n// false\n// >>> pairs_sum_to_zero([]int{1, 3, -2, 1})\n// false\n// >>> pairs_sum_to_zero([]int{1, 2, 3, 7})\n// false\n// >>> pairs_sum_to_zero([]int{2, 4, -5, 3, 5, 7})\n// true\n// >>> pairs_sum_to_zero([]int{1})\n// false\nfunc pairs_sum_to_zero(l []int) bool {\n    // check if the list is empty\n    if len(l) == 0 {\n        return true\n    }\n\n    // check if the list has only one element\n    if len(l) == 1 {\n        return l[0] == 0\n    }\n\n    // check if the list has two distinct elements\n    for I := 0; I < len(l); i++ {\n        for j := I + 1; j < len(l); j++ {\n            if l[i] + l[j] == 0 {\n                return true\n            }\n        }\n    }\n\n    // no distinct elements found\n    return false\n}\n"], ["package change_base_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunc change_base(x int, base int) string {\n    if x < 10 {\n        return fmt.Sprintf(\"%d\", x)\n    }\n    return fmt.Sprintf(\"%d\", x/base) + \"1\"\n}\n"], ["package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n    return (a * h) / 2\n}\n"], ["package fib4_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunc fib4(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return fib4(n-1) + fib4(n-2)\n}\n"], ["package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) < 2 {\n        return l[0]\n    }\n    n := len(l) / 2\n    if n % 2 == 0 {\n        return l[n]\n    }\n    return (l[n-1] + l[n]) / 2.0\n}\n"], ["package is_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunc is_palindrome(text string) bool {\n    // Convert string to lowercase\n    text = strings.ToLower(text)\n\n    // Split string into an array of words\n    words := strings.Split(text, \" \")\n\n    // Check if all words are the same length\n    if len(words) != len(text) {\n        return false\n    }\n\n    // Loop through each word and check if it is a palindrome\n    for I, word := range words {\n        if word != strings.Repeat(string(word[0]), len(word)) {\n            return false\n        }\n    }\n\n    return true\n}\n"], ["package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunc modp(n int, p int) int {\n    if n == 0 {\n        return 0\n    }\n    if n < 0 {\n        return modp(n+p, p)\n    }\n    return n % p\n}\n"], ["package remove_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunc remove_vowels(text string) string {\n    // remove vowels from text\n    vowels := []rune(\"aeiouAEIOU\")\n    vowels = append(vowels, '`')\n    vowels = append(vowels, 'a')\n    vowels = append(vowels, 'e')\n    vowels = append(vowels, 'i')\n    vowels = append(vowels, 'o')\n    vowels = append(vowels, 'u')\n    vowels = append(vowels, 'A')\n    vowels = append(vowels, 'E')\n    vowels = append(vowels, 'I')\n    vowels = append(vowels, 'O')\n    vowels = append(vowels, 'U')\n    vowels = append(vowels, 'a')\n    vowels = append(vowels, 'e')\n    vowels = append(vowels, 'i')\n    vowels = append(vowels, 'o')\n    vowels = append(vowels, 'u')\n    // remove vowels from text\n    text = strings.ReplaceAll(text, \" \", \"\")\n    text = strings.ReplaceAll(text, \"a\", \"\")\n    text = strings.ReplaceAll(text, \"e\", \"\")\n    text = strings.ReplaceAll(text, \"i\", \"\")\n    text = strings.ReplaceAll(text, \"o\", \"\")\n    text = strings.ReplaceAll(text, \"u\", \"\")\n    // remove"], ["package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return true if all numbers in the list l are below threshold t.\n// >>> below_threshold([]int{1, 2, 4, 10}, 100)\n// true\n// >>> below_threshold([]int{1, 20, 4, 10}, 5)\n// false\nfunc below_threshold(l []int, t int) bool {\n    // Check if the list is empty.\n    if len(l) == 0 {\n        return true\n    }\n\n    // Check if the list is already sorted.\n    if len(l) == 1 {\n        return l[0] < t\n    }\n\n    // Find the minimum element in the list.\n    min := l[0]\n    for I := 1; I < len(l); i++ {\n        if l[i] < min {\n            min = l[i]\n        }\n    }\n\n    // Check if the minimum element is below the threshold.\n    return min < t\n}\n"], ["package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunc add(x int, y int) int {\n    return x + y\n}\n"], ["package same_chars_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunc same_chars(s0 string, s1 string) bool {\n    if len(s0) != len(s1) {\n        return false\n    }\n    for I := 0; I < len(s0); i++ {\n        if s0[i] != s1[i] {\n            return false\n        }\n    }\n    return true\n}\n"], ["package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunc fib(n int) int {\n    if n < 2 {\n        return n\n    }\n    return fib(n-1) + fib(n-2)\n}\n"], ["package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunc correct_bracketing(brackets string) bool {\n    // split brackets into an array.\n    // remove any leading or trailing whitespace.\n    // sort the array in ascending order.\n    // iterate through the array and check if every opening bracket has a corresponding closing bracket.\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> correct_bracketing(\"(<\")\n    // true\n    // >>> correct_bracketing(\"(<>\")\n    // true\n    // >>> correct_bracketing(\"(<<\")\n    // true\n    // >>> correct_bracketing(\"(><\")\n    // false\n    // >>> correct_bracketing(\"(><<>\")\n    // false\n    // >>> correct_bracketing(\"(><<\")\n    // false\n    // >>> correct_bracketing(\"(><<<\")\n    // false\n    // >>> correct_bracketing(\"(><<<<\")\n    // false\n    // >>> correct_bracketing(\"(><<<<<\")\n    // false\n    // >>> correct_bracketing(\"(><<<<<<\")\n    // false\n    // >>> correct_bracketing(\"(><<<<<<<\")\n    // false\n    // >>> correct_bracketing(\"(><<<<<<<\")\n    // false\n    // >>> correct_bracketing(\"(><<<<<<<\")\n    // false\n    // >>> correct_bracketing(\"(><<<<<<<\")\n    // false\n    // >>> correct_bracketing(\"(><<<<<<<\")\n    // false\n    // >>> correct_bracketing(\"(><<<<<"], ["package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return true is list elements are monotonically increasing or decreasing.\n// >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4, 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l []int) bool {\n    // Initialize a counter to keep track of the current value.\n    c := 0\n    // Loop through the list and increment the counter for each element.\n    for _, v := range l {\n        c++\n        // If the counter is greater than the current value, it is monotonically increasing.\n        if c > v {\n            return false\n        }\n    }\n    // If the counter is less than the current value, it is monotonically decreasing.\n    return true\n}\n"], ["package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return sorted unique common elements for two lists.\n// >>> common([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n// >>> common([]int{5, 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1 []int, l2 []int) []int {\n    if len(l1) != len(l2) {\n        panic(\"lists must have same length\")\n    }\n    var common []int\n    for _, v := range l1 {\n        if !contains(l2, v) {\n            common = append(common, v)\n        }\n    }\n    return common\n}\n"], ["package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunc largest_prime_factor(n int) int {\n    // Check if n is prime\n    if n <= 1 {\n        return 0\n    }\n    // Loop through all factors of n\n    for I := 2; I <= int(math.Sqrt(float64(n))); i++ {\n        if n % I == 0 {\n            // If n is divisible by I, then n is not a prime\n            return i\n        }\n    }\n    // If n is not divisible by any factor, then n is a prime\n    return 2\n}\n"], ["package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n    for I := 1; I <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n"], ["package correct_bracketing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunc correct_bracketing(brackets string) bool {\n    // check if brackets are closed.\n    if len(brackets) == 0 {\n        return true\n    }\n    // iterate through the brackets.\n    for I := 0; I < len(brackets); i++ {\n        // check if the current bracket is open.\n        if brackets[i] == '(' {\n            // if it is, check if the next bracket is closed.\n            if brackets[i+1] != ')' {\n                return false\n            }\n        } else {\n            // if it is not, check if the next bracket is open.\n            if brackets[i+1] != '(' {\n                return false\n            }\n        }\n    }\n    // if all brackets are closed, return true.\n    return true\n}\n"], ["package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    var res []int\n    for _, x := range xs {\n        res = append(res, x)\n    }\n    return res\n}\n"], ["package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc fibfib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n"], ["package vowels_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunc vowels_count(s string) int {\n    count := 0\n    for _, c := range s {\n        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n            count++\n        }\n    }\n    return count\n}\n"], ["package circular_shift_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunc circular_shift(x int, shift int) string {\n    digits := strconv.Itoa(x)\n    reversed := make([]byte, len(digits))\n    for I, digit := range digits {\n        reversed[i] = byte(digit)\n    }\n    for I := len(reversed) - 1; I >= 0; i-- {\n        shifted := byte(reversed[i])\n        if shifted == 0 {\n            return string(reversed[:i+1])\n        }\n        shifted = shifted - 1\n        reversed[i] = byte(shifted)\n    }\n    return string(reversed[:])\n}\n"], ["package digitSum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunc digitSum(s string) int {\n    var sum int\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z' {\n            sum += 13\n        } else {\n            sum += 65\n        }\n    }\n    return sum\n}\n"], ["package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int) int {\n    // split the string into an array of strings\n    arr := strings.Split(s, \",\")\n\n    // count the number of apples and oranges\n    apples := 0\n    oranges := 0\n    for _, v := range arr {\n        if strings.HasPrefix(v, \"apple\") {\n            apples++\n        } else if strings.HasPrefix(v, \"orange\") {\n            oranges++\n        }\n    }\n\n    // count the number of mango fruits\n    mango := 0\n    for _, v := range arr {\n        if strings.HasPrefix(v, \"mango\") {\n            mango++\n        }\n    }\n\n    // return the number of mango fruits\n    return mango\n}\n"], ["package pluck_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"Given a list representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in a list, [ smalest_value, its index ],\n// If there are no even values or the given list is empty, return [].\n// Example 1:\n// >>> pluck([]int{4, 2, 3})\n// []int{2, 1}\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([]int{1, 2, 3})\n// []int{2, 1}\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([]int{})\n// []int{}\n// Example 4:\n// >>> pluck([]int{5, 0, 3, 0, 4, 2})\n// []int{0, 1}\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunc pluck(arr []int) []int {\n    if len(arr) == 0 {\n        return []int{}\n    }\n    var min int\n    var index int\n    for _, node := range arr {\n        if node < min {\n            min = node\n            index = 0\n        } else if node == min {\n            index++\n        }\n    }\n    return arr[index:]\n}\n"], ["package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([]int{4, 1, 2, 2, 3, 1})\n// 2\n// >>> search([]int{1, 2, 2, 3, 3, 3, 4, 4, 4})\n// 3\n// >>> search([]int{5, 5, 4, 4, 4})\n// -1\nfunc search(lst []int) int {\n    // Initialize a map to store the frequency of each integer\n    freq := make(map[int]int)\n    // Initialize a map to store the greatest integer that is greater than 0\n    max := make(map[int]int)\n    // Initialize a map to store the frequency of the maximum integer\n    maxFreq := make(map[int]int)\n    // Initialize a map to store the frequency of the minimum integer\n    minFreq := make(map[int]int)\n    // Initialize a map to store the frequency of the maximum integer\n    maxFreq[0] = 1\n    // Initialize a map to store the frequency of the minimum integer\n    minFreq[0] = 1\n    // Initialize a map to store the frequency of the maximum integer\n    maxFreq[1] = 1\n    // Initialize a map to store the frequency of the minimum integer\n    minFreq[1] = 1\n    // Iterate over the list\n    for _, num := range lst {\n        // If the frequency of the current number is greater than or equal to the maximum frequency, update the maximum frequency\n        if freq[num] >= maxFreq[freq[num]] {\n            max[num] = num\n            maxFreq[num] = freq[num]\n        }\n        // If the frequency of the current number is"], ["package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    // Sort the list in strange order\n    var sorted []int\n    for _, num := range lst {\n        if num > 0 {\n            sorted = append(sorted, num)\n        }\n    }\n    return sorted\n}\n"], ["package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int, b int, c int) float64 {\n    if a + b > c {\n        return float64(c) / float64(a + b) * float64(c)\n    }\n    return -1\n}\n"], ["package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q []int, w int) bool {\n    // check if the list is balanced\n    if len(q) != len(q[0]) {\n        return false\n    }\n\n    // check if the sum of the elements is less than or equal to the maximum possible weight\n    sum := 0\n    for _, num := range q {\n        sum += num\n    }\n    if sum > w {\n        return false\n    }\n\n    // check if the list is unbalanced\n    for I := 1; I < len(q); i++ {\n        if q[i] != q[i-1] {\n            return false\n        }\n    }\n\n    return true\n}\n"], ["package smallest_change_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list arr of integers, find the minimum number of elements that\n// need to be changed to make the list palindromic. A palindromic list is a list that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([]int{1, 2, 3, 5, 4, 7, 9, 6})\n// 4\n// >>> smallest_change([]int{1, 2, 3, 4, 3, 2, 2})\n// 1\n// >>> smallest_change([]int{1, 2, 3, 2, 1})\n// 0\nfunc smallest_change(arr []int) int {\n    // initialize the minimum number of changes to 0\n    min := 0\n\n    // loop through the array and count the number of changes\n    for _, num := range arr {\n        if num == num {\n            // if the current number is the same as the previous number,\n            // increment the number of changes by 1\n            min++\n        } else {\n            // if the current number is not the same as the previous number,\n            // decrement the number of changes by 1\n            min--\n        }\n    }\n\n    // return the minimum number of changes\n    return min\n}\n"], ["package total_match_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\n// >>> total_match([]string{}, []string{})\n// []string{}\n// >>> total_match([]string{\"hi\", \"admin\"}, []string{\"hI\", \"Hi\"})\n// []string{\"hI\", \"Hi\"}\n// >>> total_match([]string{\"hi\", \"admin\"}, []string{\"hi\", \"hi\", \"admin\", \"project\"})\n// []string{\"hi\", \"admin\"}\n// >>> total_match([]string{\"hi\", \"admin\"}, []string{\"hI\", \"hi\", \"hi\"})\n// []string{\"hI\", \"hi\", \"hi\"}\n// >>> total_match([]string{\"4\"}, []string{\"1\", \"2\", \"3\", \"4\", \"5\"})\n// []string{\"4\"}\nfunc total_match(lst1 []string, lst2 []string) []string {\n    var total int\n    var lst1_copy []string\n    var lst2_copy []string\n    for _, v := range lst1 {\n        total += len(v)\n    }\n    for _, v := range lst2 {\n        total += len(v)\n    }\n    lst1_copy = make([]string, 0, len(lst1))\n    for _, v := range lst1 {\n        if total > 0 {\n            lst1_copy = append(lst1_copy, v)\n        }\n    }\n    lst2_copy = make([]string, 0, len(lst2))\n    for _, v := range lst2 {\n        if total > 0 {\n            lst2_copy = append(lst2_copy, v)\n        }\n    }\n    return lst1_copy\n}\n"], ["package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunc is_multiply_prime(a int) bool {\n    if a < 100 {\n        return false\n    }\n    for I := 2; I < a; i++ {\n        if a % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n"], ["package is_simple_power_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunc is_simple_power(x int, n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    return x*n%n == 0\n}\n"], ["package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunc iscube(a int) bool {\n    if a < 0 {\n        return false\n    }\n    return a*a*a == a\n}\n"], ["package hex_key_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunc hex_key(num string) int {\n    var count int\n    for _, c := range num {\n        if c >= '0' && c <= '9' {\n            count += int(c - '0')\n        } else if c >= 'A' && c <= 'F' {\n            count += int(c - 'A' + 10)\n        } else if c >= 'a' && c <= 'f' {\n            count += int(c - 'a' + 10)\n        }\n    }\n    return count\n}\n"], ["package decimal_to_binary_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunc decimal_to_binary(decimal int) string {\n    binary := \"\"\n    for decimal > 0 {\n        binary = fmt.Sprintf(\"%d%s\", decimal % 2, binary)\n        decimal /= 2\n    }\n    return binary\n}\n"], ["package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a string s.\n// Your task is to check if the string is hapgo or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunc is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n    var count int\n    for I := 0; I < len(s)-2; i++ {\n        if s[i] != s[i+1] && s[i] != s[i+2] {\n            count++\n        }\n    }\n    if count == 3 {\n        return true\n    }\n    return false\n}\n"], ["package numerical_letter_grade_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([]float64{4.0, 3, 1.7, 2, 3.5})\n// []string{\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nfunc numerical_letter_grade(grades []float64) []string {\n    // Convert grades to string\n    gradesString := make([]string, len(grades))\n    for I, grade := range grades {\n        gradesString[i] = fmt.Sprintf(\"%.2f\", grade)\n    }\n\n    // Calculate letter grade\n    letterGrade := \"\"\n    for _, grade := range gradesString {\n        if grade >= 4.0 {\n            letterGrade = \"A+\"\n        } else if grade >= 3.7 {\n            letterGrade = \"A\"\n        } else if grade >= 3.3 {\n            letterGrade = \"A-\"\n        } else if grade >= 3.0 {\n            letterGrade = \"B+\"\n        } else if grade >= 2.7 {"], ["package prime_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunc prime_length(myString string) bool {\n    // check if the string is empty\n    if len(myString) == 0 {\n        return false\n    }\n\n    // check if the string is a palindrome\n    if myString == myString[::-1] {\n        return true\n    }\n\n    // check if the string is a valid prime number\n    for I := 2; I <= len(myString); i++ {\n        if myString[i] == myString[len(myString)-i] {\n            return false\n        }\n    }\n\n    return true\n}\n"], ["package starts_one_ends_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunc starts_one_ends(n int) int {\n    var count int\n    for I := 1; I <= n; i++ {\n        if i % 10 == 1 {\n            count++\n        }\n    }\n    return count\n}\n"], ["package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunc solve(N int) string {\n    var sum int\n    for I := 0; I < N; i++ {\n        sum += int(math.Pow(2, uint(i)))\n    }\n    return fmt.Sprintf(\"%d\", sum)\n}\n"], ["package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n    if len(lst) == 0 {\n        return 0\n    }\n    if len(lst) == 1 {\n        return lst[0]\n    }\n    mid := len(lst) / 2\n    left := add(lst[:mid])\n    right := add(lst[mid:])\n    return left + right\n}\n"], ["package anti_shuffle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunc anti_shuffle(s string) string {\n    // Split the string into words\n    words := strings.Split(s, \" \")\n\n    // Sort the words in ascending order based on ASCII value\n    sortedWords := make([]string, 0, len(words))\n    for _, word := range words {\n        ascii := utf8.DecodeRuneInString(word)\n        sortedWords = append(sortedWords, string([]rune{ascii}))\n    }\n\n    // Join the sorted words back into a single string\n    return strings.Join(sortedWords, \" \")\n}\n"], ["package get_row_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a 2 dimensional data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the list,\n// and return list of lists, [(x1, y1), (x2, y2) ...] such that\n// each list is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([][]int{[]int{1, 2, 3, 4, 5, 6}, []int{1, 2, 3, 4, 1, 6}, []int{1, 2, 3, 4, 5, 1}}, 1)\n// [][]int{[]interface{}{0, 0}, []interface{}{1, 4}, []interface{}{1, 0}, []interface{}{2, 5}, []interface{}{2, 0}}\n// >>> get_row([][]int{}, 1)\n// [][]interface{}{}\n// >>> get_row([]interface{}{[]interface{}{}, []int{1}, []int{1, 2, 3}}, 3)\n// [][]int{[]interface{}{2, 2}}\nfunc get_row(lst [][]int, x int) [][]interface{} {\n    if len(lst) == 0 {\n        return [][]interface{}{}\n    }\n    if x == 0 {\n        return lst\n    }\n    var rows [][]interface{}\n    for _, row := range lst {\n        if len(row) == 0 {\n            continue\n        }\n        if x == len(row) {\n            rows = append(rows, row)\n        } else {\n            row = append(row, nil)\n            rows = append(rows, row)\n        }\n    }\n    sort.Slice(rows, func(i, j"], ["package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of non-negative integers, return a cogo of the given list after sorting,\n// you will sort the given list in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given list.\n// Examples:\n// >>> sort_array([]int{})\n// []int{}\n// >>> sort_array([]int{5})\n// []int{5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5})\n// []int{0, 1, 2, 3, 4, 5}\n// >>> sort_array([]int{2, 4, 3, 0, 1, 5, 6})\n// []int{6, 5, 4, 3, 2, 1, 0}\nfunc sort_array(array []int) []int {\n    if len(array) == 0 {\n        return array\n    }\n    if len(array)%2 == 1 {\n        return sort_array(array[:(len(array) - 1)])\n    }\n    mid := len(array) / 2\n    left := sort_array(array[:mid])\n    right := sort_array(array[mid:])\n    sorted := make([]int, len(left))\n    for I := range left {\n        sorted[i] = left[i]\n    }\n    for I := range right {\n        sorted[i] = right[i]\n    }\n    return append(sorted, array[mid]...)\n}\n"], ["package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Rotate the alphabet by two places\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\n    rotatedAlphabet := alphabet[2:]\n\n    // Create a new string to hold the encrypted characters\n    encrypted := \"\"\n\n    // Loop through each character in the input string\n    for _, c := range s {\n        // If the current character is not a letter, skip it\n        if !(c >= 'a' && c <= 'z') {\n            continue\n        }\n\n        // If the current character is not in the rotated alphabet, skip it\n        if c != alphabet[c-'a'] {\n            continue\n        }\n\n        // If the current character is in the rotated alphabet, add it to the encrypted string\n        encrypted += rotatedAlphabet[c-'a']\n    }\n\n    // Return the encrypted string\n    return encrypted\n}\n"], ["package is_bored_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunc is_bored(S string) int {\n    // Split the string into words\n    words := strings.Split(S, \" \")\n\n    // Count the number of boredoms\n    count := 0\n    for _, word := range words {\n        if word == \"I\" {\n            count++\n        }\n    }\n\n    return count\n}\n"], ["package any_int_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunc any_int(x float64, y float64, z float64) bool {\n    // Check if any of the numbers is a float\n    if !(x == float64(x) || y == float64(y) || z == float64(z)) {\n        return false\n    }\n    // Check if all numbers are integers\n    if x != int64(x) || y != int64(y) || z != int64(z) {\n        return false\n    }\n    return true\n}\n"], ["package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Split the message into an array of words\n    words := strings.Split(message, \" \")\n\n    // Loop through each word and swap case\n    for I, word := range words {\n        words[i] = strings.ToLower(word)\n    }\n\n    // Loop through each word and swap vowels\n    for I, word := range words {\n        if word == \"a\" || word == \"e\" || word == \"i\" || word == \"o\" || word == \"u\" {\n            words[i] = strings.Repeat(string(word[1]), 2) + word[0]\n        }\n    }\n\n    // Join the words back into a single string\n    return strings.Join(words, \" \")\n}\n"], ["package skjkasdkd_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([]int{0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n// 10\n// >>> skjkasdkd([]int{1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n// 25\n// >>> skjkasdkd([]int{1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3})\n// 13\n// >>> skjkasdkd([]int{0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6})\n// 11\n// >>> skjkasdkd([]int{0, 81, 12, 3, 1, 21})\n// 3\n// >>> skjkasdkd([]int{0, 8, 1, 2, 1, 7})\n// 7\nfunc skjkasdkd(lst []int) int {\n    var sum int\n    for _, num := range lst {\n        if num > 1 {\n            sum += num\n        }\n    }\n    return sum\n}\n"], ["package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string) bool {\n    if len(dict) == 0 {\n        return true\n    }\n    for key, value := range dict {\n        if !strings.ToLower(key) == key || !strings.ToLower(value) == value {\n            return false\n        }\n    }\n    return true\n}\n"], ["package count_up_to_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement a function that takes an non-negative integer and returns a list of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// []int{2, 3}\n// >>> count_up_to(11)\n// []int{2, 3, 5, 7}\n// >>> count_up_to(0)\n// []int{}\n// >>> count_up_to(20)\n// []int{2, 3, 5, 7, 11, 13, 17, 19}\n// >>> count_up_to(1)\n// []int{}\n// >>> count_up_to(18)\n// []int{2, 3, 5, 7, 11, 13, 17}\nfunc count_up_to(n int) []int {\n    var result []int\n    for I := 2; I <= n; i++ {\n        if is_prime(i) {\n            result = append(result, i)\n        }\n    }\n    return result\n}\n"], ["package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Handle negative numbers\n    if b < 0 {\n        b = -b\n    }\n    // Handle zero or negative numbers\n    if b == 0 {\n        return 0\n    }\n    // Calculate the product of the digits\n    var product int\n    for I := 0; I < len(strconv.Itoa(a)); i++ {\n        product += int(strconv.Itoa(a)[i]) * int(strconv.Itoa(b)[i])\n    }\n    return product\n}\n"], ["package count_upper_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunc count_upper(s string) int {\n    count := 0\n    for I := 0; I < len(s); i++ {\n        if s[i] >= 'A' && s[i] <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n"], ["package closest_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunc closest_integer(value string) int {\n    // Split the value into an array of integers\n    numbers := strings.Split(value, \".\")\n\n    // Check if the value is an integer\n    if len(numbers) != 2 {\n        return 0\n    }\n\n    // Convert the integers to float64\n    numbers = []float64(numbers)\n\n    // Calculate the difference between the two integers\n    diff := float64(numbers[0]) - float64(numbers[1])\n\n    // Round the difference to the nearest integer\n    return int(math.Round(diff))\n}\n"], ["package make_a_pile_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// []int{3, 5, 7}\nfunc make_a_pile(n int) []int {\n    if n == 0 {\n        return []int{0}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    return make_a_pile(n-1)\n}\n"], ["package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return a list of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three, four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}\nfunc words_string(s string) []string {\n    // Split the string into words using the comma or space separator\n    words := strings.Split(s, \",\")\n    // Remove any leading or trailing whitespace from the words\n    words = remove_leading_trailing_whitespace(words)\n    // Return the words as a list\n    return words\n}\n"], ["package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunc choose_num(x int, y int) int {\n    // Check if the range is valid\n    if x > y {\n        return -1\n    }\n    // Find the smallest number in the range\n    var min int\n    for I := x; I <= y; i++ {\n        if i % 2 == 0 {\n            min = i\n        }\n    }\n    // Find the biggest number in the range\n    var max int\n    for I := x; I <= y; i++ {\n        if i % 2 == 0 {\n            max = i\n        }\n    }\n    // Return the biggest even number in the range\n    return max\n}\n"], ["package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for _, num := range x {\n        if num % 2 == 0 {\n            continue\n        }\n        result = append(result, num)\n    }\n    sort.Ints(result)\n    return result\n}\n"], ["package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8, 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n// If the list is empty, return an empty list:\n// >>> by_length([]int{})\n// []string{}\n// If the list has any strange number ignore it:\n// >>> by_length([]int{1, -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n    sorted := make([]int, len(arr))\n    copy(sorted, arr)\n    sort.Ints(sorted)\n    result := make([]string, len(sorted))\n    for I, num := range sorted {\n        result[i] = fmt.Sprintf(\"%s%d\", by_length_test.Name(num), num)\n    }\n    return result\n}\n```\n\nExplanation:\n\n1. We define a function `by_length` that takes a list of integers as input and returns a new list with the same elements but sorted in ascending order.\n\n2. We initialize an empty slice `result` to store the sorted list.\n\n3. We iterate over the input list `arr` and call the `sort.Ints` function to sort the list.\n\n4. We copy the sorted list `sorted` into the `result` slice.\n\n5. We call the `sort.Ints` function again to sort the `result` slice in reverse order.\n\n6. We iterate over the sorted list `sorted` and for each element `num` we create a new string using the `by_length_test.Name` function to get"], ["package f_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Implement the function f that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// []int{1, 2, 6, 24, 15}\nfunc f(n int) []int {\n    if n < 2 {\n        return []int{1}\n    }\n    result := make([]int, n)\n    for I := 1; I <= n; i++ {\n        result[i] = i * factorial(i-1)\n    }\n    return result\n}\n"], ["package even_odd_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return a list that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// []interface{}{1, 2}\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// []interface{}{4, 6}\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned list has the number of even and odd integer palindromes respectively.\nfunc even_odd_palindrome(n int) []interface{} {\n    var palindromes []interface{}\n    for I := 1; I <= n; i++ {\n        if i%2 == 0 {\n            palindromes = append(palindromes, i)\n        } else {\n            palindromes = append(palindromes, i*2)\n        }\n    }\n    return palindromes\n}\n"], ["package count_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function count_nums which takes a list of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([]int{})\n// 0\n// >>> count_nums([]int{-1, 11, -11})\n// 1\n// >>> count_nums([]int{1, 1, 2})\n// 3\nfunc count_nums(arr []int) int {\n    count := 0\n    for _, num := range arr {\n        sum := 0\n        for _, digit := range strconv.FormatInt(int64(num), 10) {\n            sum += int(digit)\n        }\n        if sum > 0 {\n            count++\n        }\n    }\n    return count\n}\n"], ["package move_one_ball_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the list will be randomly ordered. Your task is to determine if\n// it is possible to get a list sorted in non-decreasing order by performing \n// the following operation on the given list:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the list by one\n// position in the right direction. The last element of the list will be moved to\n// the starting position in the list i.e. 0th index. \n// If it is possible to obtain the sorted list by performing the above operation\n// then return true else return false.\n// If the given list is empty then return true.\n// Note: The given list is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([]int{3, 4, 5, 1, 2})\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given list.\n// >>> move_one_ball([]int{3, 5, 4, 1, 2})\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// list by performing any number of right shift operations.\nfunc move_one_ball(arr []int) bool {\n    // Check if the list is empty\n    if len(arr) == 0 {\n        return true\n    }\n\n    // Check if the list is already sorted\n    if arr[0] > arr[1] {\n        return false\n    }\n\n    // Perform right shift operations\n    for I := 1; I < len(arr); i++ {\n        arr[i], arr[i-1] = arr[i-1], arr[i]\n    }\n\n    // Check if the list is now sorted\n    if arr[0] > arr[1] {\n        return false\n    }\n\n    // If the list is now sorted, return true"], ["package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this problem, you will implement a function that takes two lists of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 a list of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([]int{1, 2, 3, 4}, []int{1, 2, 3, 4})\n// \"YES\"\n// >>> exchange([]int{1, 2, 3, 4}, []int{1, 5, 3, 4})\n// \"NO\"\n// It is assumed that the input lists will be non-empty.\nfunc exchange(lst1 []int, lst2 []int) string {\n    // Check if the lists are empty\n    if len(lst1) == 0 || len(lst2) == 0 {\n        return \"NO\"\n    }\n\n    // Initialize an empty list to store the even elements\n    even := []int{}\n\n    // Loop through both lists\n    for I := 0; I < len(lst1); i++ {\n        for j := 0; j < len(lst2); j++ {\n            // If the current element in lst1 is even, swap it with the next even element in lst2\n            if lst1[i] % 2 == 0 && lst2[j] % 2 == 0 {\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n                even = append(even, lst1[i])\n                break\n            }\n        }\n    }\n\n    // Check if the even elements were swapped\n    if len(even) != len(lst1) {\n        return \"NO\"\n    }\n\n    // Return \"YES\" if all even elements were swapped\n    return \"YES\"\n}\n"], ["package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\nfunc histogram(test string) map[string]int {\n    var counts map[string]int\n    var maxCount int\n    for _, letter := range test {\n        if _, ok := counts[letter]; !ok {\n            counts[letter] = 1\n            maxCount = 1\n        } else {\n            counts[letter]++\n            maxCount = max(counts[letter], maxCount)\n        }\n    }\n    return counts\n}\n"], ["package reverse_delete_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a list containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// []interface{}{\"bcd\", false}\n// >>> reverse_delete(\"abcdef\", \"b\")\n// []interface{}{\"acdef\", false}\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// []interface{}{\"cdedc\", true}\nfunc reverse_delete(s string, c string) []interface{} {\n    var result []interface{}\n    var temp string\n    for _, char := range s {\n        temp = temp + char\n    }\n    for _, char := range c {\n        temp = temp + char\n    }\n    result = append(result, temp)\n    return result\n}\n"], ["package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n    var count map[string]int\n    for _, str := range lst {\n        if str == \"0\" {\n            continue\n        }\n        count[str]++\n    }\n    var output []string\n    for k, v := range count {\n        output = append(output, fmt.Sprintf(\"%d the number of odd elements %s of the input.\", v, k))\n    }\n    return output\n}\n"], ["package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of integers nums, find the minimum sum of any non-empty sub-list\n// of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n// >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int) int {\n    // initialize sum to 0\n    sum := 0\n    // initialize minSum to -1\n    minSum := -1\n    // initialize maxSum to 0\n    maxSum := 0\n    // initialize minIndex to -1\n    minIndex := -1\n    // initialize maxIndex to 0\n    maxIndex := 0\n    // loop through the array\n    for I := range nums {\n        // if the current element is not -1, then it is a valid sub-array\n        if nums[i] != -1 {\n            // calculate the sum of the sub-array\n            sum += nums[i]\n            // calculate the minimum sum of any non-empty sub-array\n            minSum = math.Min(minSum, sum)\n            // calculate the maximum sum of any non-empty sub-array\n            maxSum = math.Max(maxSum, sum)\n            // calculate the minimum index of any non-empty sub-array\n            minIndex = math.Min(minIndex, i)\n            // calculate the maximum index of any non-empty sub-array\n            maxIndex = math.Max(maxIndex, i)\n        }\n    }\n    // return the minimum sum of any non-empty sub-array\n    return minSum\n}\n"], ["package max_fill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([][]int{[]int{0, 0, 1, 0}, []int{0, 1, 0, 0}, []int{1, 1, 1, 1}}, 1)\n// 6\n// Example 2:\n// >>> max_fill([][]int{[]int{0, 0, 1, 1}, []int{0, 0, 0, 0}, []int{1, 1, 1, 1}, []int{0, 1, 1, 1}}, 2)\n// 5\n// Example 3:\n// >>> max_fill([][]int{[]int{0, 0, 0}, []int{0, 0, 0}}, 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunc max_fill(grid [][]int, capacity int) int {\n    n := len(grid)\n    m := len(grid[0])\n    buckets := make([]int, n)\n    for I := 0; I < n; i++ {\n        for j := 0; j < m; j++ {\n            if grid[i][j] == 0 {\n                buckets[i]++\n            }\n        }\n    }\n    for I := 0; I < n; i++ {\n        for"], ["package sort_array_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// In this Kata, you have to sort a list of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([]int{1, 5, 2, 3, 4})\n// []int{1, 2, 3, 4, 5}\n// >>> sort_array([]int{-2, -3, -4, -5, -6})\n// []int{-6, -5, -4, -3, -2}\n// >>> sort_array([]int{1, 0, 2, 3, 4})\n// []int{0, 1, 2, 3, 4}\nfunc sort_array(arr []int) []int {\n    // Sort array based on binary representation of non-negative integers\n    var binary int\n    for _, num := range arr {\n        binary = binary * 2 + int(num)\n    }\n    // Sort array based on decimal value\n    var decimal int\n    for _, num := range arr {\n        decimal = decimal * 10 + int(num)\n    }\n    // Sort array based on binary and decimal values\n    var sorted []int\n    for binary > 0 {\n        sorted = append(sorted, int(binary % 10))\n        binary /= 10\n    }\n    return sorted\n}\n"], ["package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n// >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string {\n    var words []string\n    var word string\n    var count int\n    for I := 0; I < len(s); i++ {\n        if s[i] == ' ' {\n            word = word + s[i]\n            count++\n        } else {\n            if count == n {\n                words = append(words, word)\n                count = 0\n                word = \"\"\n            }\n            word = word + s[i]\n            count++\n        }\n    }\n    if count == n {\n        words = append(words, word)\n    }\n    return words\n}\n"], ["package get_closest_vowel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunc get_closest_vowel(word string) string {\n    var closest_vowel string\n    var distance int\n    for I := 0; I < len(word); i++ {\n        for j := 0; j < len(word); j++ {\n            if I == j {\n                continue\n            }\n            if word[i] == word[j] {\n                continue\n            }\n            if word[i] < word[j] {\n                distance = i\n            } else {\n                distance = j\n            }\n            if distance == 0 {\n                closest_vowel = word[i]\n                break\n            }\n        }\n    }\n    return closest_vowel\n}\n"], ["package match_parens_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([]string{\"()(\", \")\"})\n// \"Yes\"\n// >>> match_parens([]string{\")\", \")\"})\n// \"No\"\nfunc match_parens(lst []string) string {\n    // check if the list is empty\n    if len(lst) == 0 {\n        return \"No\"\n    }\n\n    // check if the list is balanced\n    balanced := true\n    for _, s := range lst {\n        if s == \"(\" || s == \")\" {\n            balanced = false\n            break\n        }\n    }\n\n    // if the list is not balanced, return \"No\"\n    if !balanced {\n        return \"No\"\n    }\n\n    // concatenate the two strings in the correct order\n    result := \"\"\n    for _, s := range lst {\n        if s == \"(\" {\n            result += \")\"\n        } else {\n            result += s\n        }\n    }\n\n    return result\n}\n"], ["package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3, -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4, 4}, 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1, -2, 1}, 1)\n// []int{2}\n// Note:\n// 1. The length of the list will be in the range of [1, 1000].\n// 2. The elements in the list will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n        return arr\n    }\n    if k == 1 {\n        return arr[0:1]\n    }\n    max := arr[0]\n    for I := 1; I < k; i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return append(arr[0:i], arr[i+1:]...)\n}\n"], ["package solution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([]int{5, 8, 7, 1})\n// 12\n// >>> solution([]int{3, 3, 3, 3, 3})\n// 9\n// >>> solution([]int{30, 13, 24, 321})\n// 0\nfunc solution(lst []int) int {\n    var sum int\n    for _, num := range lst {\n        if num % 2 == 1 {\n            sum += num\n        }\n    }\n    return sum\n}\n"], ["package add_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a non-empty list of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([]int{111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunc add_elements(arr []int, k int) int {\n    // check if k is less than or equal to the length of arr\n    if k < len(arr) {\n        return 0\n    }\n\n    // initialize sum to 0\n    sum := 0\n\n    // iterate over arr and add the first k elements to the sum\n    for I := 0; I < k; i++ {\n        sum += arr[i]\n    }\n\n    // iterate over arr and remove the first k elements from the sum\n    for I := k; I < len(arr); i++ {\n        sum -= arr[i]\n    }\n\n    return sum\n}\n"], ["package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var odd []int\n    for I := 1; I <= n/2; i++ {\n        odd = append(odd, Collatz(i))\n    }\n    return odd\n}\n"], ["package valid_date_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunc valid_date(date string) bool {\n    // Check if the date string is not empty\n    if len(date) == 0 {\n        return false\n    }\n\n    // Check if the number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    if len(date) < 3 || len(date) > 10 || (len(date) == 3 && (date[0] != '0' || date[1] != '0' || date[2] != '0')) {\n       "], ["package is_sorted_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of numbers, return whether or not they are sorted\n// in ascending order. If list has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([]int{5})\n// true\n// >>> is_sorted([]int{1, 2, 3, 4, 5})\n// true\n// >>> is_sorted([]int{1, 3, 2, 4, 5})\n// false\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6})\n// true\n// >>> is_sorted([]int{1, 2, 3, 4, 5, 6, 7})\n// true\n// >>> is_sorted([]int{1, 3, 2, 4, 5, 6, 7})\n// false\n// >>> is_sorted([]int{1, 2, 2, 3, 3, 4})\n// true\n// >>> is_sorted([]int{1, 2, 2, 2, 3, 4})\n// false\nfunc is_sorted(lst []int) bool {\n    // Check if list has more than 1 duplicate of the same number\n    if len(lst) < 2 {\n        return true\n    }\n    for I := 0; I < len(lst)-1; i++ {\n        if lst[i] > lst[i+1] {\n            return false\n        }\n    }\n    return true\n}\n"], ["package intersection_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([]interface{}{1, 2}, []interface{}{2, 3})\n// \"NO\"\n// >>> intersection([]interface{}{-1, 1}, []interface{}{0, 4})\n// \"NO\"\n// >>> intersection([]interface{}{-3, -1}, []interface{}{-5, 5})\n// \"YES\"\nfunc intersection(interval1 []interface{}, interval2 []interface{}) string {\n    if len(interval1) == 0 || len(interval2) == 0 {\n        return \"NO\"\n    }\n    if len(interval1) == 1 && len(interval2) == 1 {\n        return fmt.Sprintf(\"%d\", interval1[0])\n    }\n    if len(interval1) == 1 && len(interval2) == 2 {\n        return fmt.Sprintf(\"%d\", interval1[0])\n    }\n    if len(interval1) == 2 && len(interval2) == 1 {\n        return fmt.Sprintf(\"%d\", interval2[0])\n    }\n    if len(interval1) == 2 && len(interval2) == 2 {\n        return fmt.Sprintf(\"%d\", interval1[0])\n    }\n   "], ["package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered lists of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered list of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int, k int) []int {\n    if len(grid) == 0 || len(grid[0]) == 0 {\n        return []int{}\n    }\n    if"], ["package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{1, 1}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n        return []int{1, 1}\n    }\n    return []int{tri(n - 1), tri(n - 2), tri(n - 1)}\n}\n"], ["package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n    var product int\n    for I := 0; I < n; i++ {\n        product *= 10\n        if n % 10 == 1 {\n            product += 1\n        }\n    }\n    return product\n}\n"], ["package is_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunc is_nested(myString string) bool {\n    // Check if the string is empty\n    if len(myString) == 0 {\n        return false\n    }\n\n    // Split the string into an array of substrings\n    substrings := strings.Split(myString, \"[\")\n\n    // Check if there is a valid subsequence of brackets\n    for _, substring := range substrings {\n        // Check if the substring is a valid subsequence of brackets\n        if len(substring) > 1 && substring[0] == '[' && substring[len(substring)-1] == ']' {\n            // If it is, return true\n            return true\n        }\n    }\n\n    // If there is no valid subsequence, return false\n    return false\n}\n"], ["package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0, 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>> lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n// 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, num := range lst {\n        sum += num * num\n    }\n    return sum\n}\n"], ["package check_if_last_char_is_a_letter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunc check_if_last_char_is_a_letter(txt string) bool {\n    // Split the string into words using the space character as a delimiter.\n    words := strings.Split(txt, \" \")\n\n    // Loop through each word and check if the last character is an alphabetical character.\n    for I, word := range words {\n        if word[len(word)-1] == 'a' || word[len(word)-1] == 'e' || word[len(word)-1] == 'i' || word[len(word)-1] == 'o' {\n            return false\n        }\n    }\n\n    // If the last character is not an alphabetical character, it is not a word.\n    return true\n}\n"], ["package can_arrange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given list will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([]int{1, 2, 4, 3, 5})\n// 3\n// >>> can_arrange([]int{1, 2, 3})\n// -1\nfunc can_arrange(arr []int) int {\n    // Initialize the largest index to -1\n    largest := -1\n\n    // Loop through the array\n    for I := range arr {\n        // Check if the current element is greater than or equal to the\n        // element immediately preceding it\n        if arr[i] >= arr[i-1] {\n            // If it is, update the largest index\n            if largest == -1 {\n                largest = i\n            }\n        }\n    }\n\n    // Return the largest index\n    return largest\n}\n"], ["package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as nil.\n// Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1, 3, 5, 7})\n// []interface{}{nil, 1}\n// >>> largest_smallest_integers([]int{})\n// []interface{}{nil, nil}\n// >>> largest_smallest_integers([]int{0})\n// []interface{}{nil, nil}\nfunc largest_smallest_integers(lst []int) []interface{} {\n    // Check if the list is empty\n    if len(lst) == 0 {\n        return []interface{}{nil, nil}\n    }\n\n    // Find the largest and smallest integers in the list\n    largest := lst[0]\n    smallest := lst[0]\n\n    // Loop through the rest of the list and update the largest and smallest\n    for _, num := range lst[1:] {\n        if num < smallest {\n            smallest = num\n        }\n        if num > largest {\n            largest = num\n        }\n    }\n\n    // Return the updated list with the largest and smallest integers\n    return []interface{}{largest, smallest}\n}\n"], ["package is_equal_to_sum_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunc is_equal_to_sum_even(n int) bool {\n    sum := 0\n    for I := 1; I <= n; i++ {\n        if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum % 4 == 0\n}\n"], ["package special_factorial_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunc special_factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * special_factorial(n-1)\n}\n"], ["package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunc fix_spaces(text string) string {\n    // remove leading and trailing spaces\n    text = strings.TrimSpace(text)\n\n    // replace spaces with underscores\n    text = strings.ReplaceAll(text, \" \", \"_\")\n\n    // if string has more than 2 consecutive spaces, replace all consecutive spaces with -\n    if len(text) > 2 {\n        text = strings.ReplaceAll(text, \" \", \"-\")\n    }\n\n    return text\n}\n"], ["package file_name_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunc file_name_check(file_name string) string {\n    // Check if the file's name contains only digits and dots.\n    if len(file_name) < 3 || !strings.HasSuffix(file_name, \".\") {\n        return \"No\"\n    }\n    // Check if the file's name contains only letters and dots.\n    if len(strings.Split(file_name, \".\")[0]) != 1 || !strings.HasPrefix(strings.Split(file_name, \".\")[0], \"a-z\") || !strings.HasSuffix(strings.Split(file_name, \".\")[0], \".\")) {\n        return \"No\"\n    }\n    // Check if the file's name starts with a letter.\n    if !strings.HasPrefix(file_name, \"a-z\") {\n        return \"No\"\n    }\n    // Check if the file's name ends with a dot.\n    if !strings.HasSuffix(file_name, \".\") {\n        return \"No\"\n    }\n    // Check if the file's name contains exactly one dot.\n    if len(strings.Split"], ["package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// \"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// []int{1, 2, 3}\n// >>> lst\n// int{}\n// >>> lst\n// []int{-1, -5, 2, -1, -5}\nfunc sum_squares(lst []int) int {\n    var sum int\n    for _, num := range lst {\n        if num % 3 == 0 && num % 4 != 0 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n"], ["package words_in_sentence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunc words_in_sentence(sentence string) string {\n    // check if sentence is empty or contains only letters\n    if len(sentence) == 0 || len(sentence) == 1 {\n        return sentence\n    }\n\n    // split sentence into words and remove duplicates\n    words := strings.Split(sentence, \" \")\n    words = removeDuplicates(words)\n\n    // sort words in ascending order by length\n    words = sortWords(words)\n\n    // return the sorted words in the original order\n    return strings.Join(words, \" \")\n}\n"], ["package simplify_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunc simplify(x string, n string) bool {\n    // Split the string into numerator and denominator\n    numerator, denominator := split(x)\n    // Check if denominator is zero\n    if denominator == \"\" {\n        return false\n    }\n    // Check if numerator is zero\n    if numerator == \"\" {\n        return false\n    }\n    // Calculate the product of numerator and denominator\n    product := calculate(numerator, denominator)\n    // Check if the product is a whole number\n    if product == \"\" {\n        return false\n    }\n    // Split the product back into numerator and denominator\n    numerator, denominator = split(product)\n    // Check if denominator is zero\n    if denominator == \"\" {\n        return false\n    }\n    // Check if numerator is zero\n    if numerator == \"\" {\n        return false\n    }\n    // Calculate the quotient of numerator and denominator\n    quotient := calculate(numerator, denominator)\n    // Check if the quotient is a whole number\n    if quotient == \"\" {\n        return false\n    }\n    // Return true if the product is a whole number and the quotient is a whole number\n    return true\n}\n"], ["package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n// []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc order_by_points(nums []int) []int {\n    // sort the list by sum of digits\n    sorted := make([]int, 0)\n    for _, num := range nums {\n        sum := 0\n        for _, digit := range num {\n            sum += digit\n        }\n        sorted = append(sorted, sum)\n    }\n    // reverse the sorted list\n    sorted = sorted[len(sorted)-1 : len(sorted)]\n    return sorted\n}\n"], ["package specialFilter_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([]int{15, -73, 14, -15})\n// 1\n// >>> specialFilter([]int{33, -2, -3, 45, 21, 109})\n// 2\nfunc specialFilter(nums []int) int {\n    var count int\n    for _, num := range nums {\n        if num > 10 && num % 2 == 1 {\n            count++\n        }\n    }\n    return count\n}\n"], ["package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a positive integer n. You have to create an integer list a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a := make([]int, n)\n    for I := 1; I <= n; i++ {\n        a[i] = i * i - i + 1\n    }\n    return count_triples(a, 1, n)\n}\n"], ["package bf_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return a list containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty list if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// []interface{}{\"Saturn\", \"Uranus\"}\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// []interface{}{\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\nfunc bf(planet1 string, planet2 string) []interface{} {\n    // check if planet1 and planet2 are valid planet names\n    if !isPlanet(planet1) || !isPlanet(planet2) {\n        return []interface{}{}\n    }\n\n    // create a list of all planets between the two planets\n    planets := make([]interface{}, 0)\n    for _, planet := range planetNames {\n        if planet.Name == planet1 || planet.Name == planet2 {\n            planets = append(planets, planet)\n        }\n    }\n\n    // sort the planets by proximity to the sun\n    sort.Slice(planets, func(i, j int) bool {\n        return planets[i].DistanceToSun < planets[j].DistanceToSun\n    })\n\n    // return the sorted list of planets\n    return planets\n}\n"], ["package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\", \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst []string) []string {\n    var sorted_lst []string\n    for _, word := range lst {\n        if len(word)%2 == 1 {\n            sorted_lst = append(sorted_lst, word)\n        }\n    }\n    return sorted_lst\n}\n"], ["package x_or_y_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunc x_or_y(n int, x int, y int) int {\n    if n == 2 {\n        return x\n    }\n    if n == 3 || n == 5 {\n        return y\n    }\n    return x_or_y(n-1, x, y)\n}\n"], ["package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n// in the list that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1, -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n// 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst []float64) int {\n    var sum float64\n    for _, num := range lst {\n        if num % 2 == 1 {\n            sum += num * num\n        }\n    }\n    return sum\n}\n"], ["package compare_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two lists of scores and guesses of equal length, where each index shows a match. \n// Return a list of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([]int{1, 2, 3, 4, 5, 1}, []int{1, 2, 3, 4, 2, -2})\n// []int{0, 0, 0, 0, 3, 3}\n// >>> compare([]int{0, 5, 0, 0, 0, 4}, []int{4, 1, 1, 0, 0, -2})\n// []int{4, 4, 1, 0, 0, 6}\nfunc compare(game []int, guess []int) []int {\n    // initialize the result list\n    result := make([]int, len(game))\n    // loop through the game list\n    for I, v := range game {\n        // check if the guess is within the game list\n        if v >= 0 && v < len(guess) {\n            // if it is, add the difference to the result list\n            result[i] = abs(guess[v] - v)\n        }\n    }\n    // return the result list\n    return result\n}\n"], ["package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the list.\n// For example, if you are given \"Slices\" as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name string, extensions []string) string {\n    var (\n        cap, sm int\n        cap_str, sm_str string\n    )\n    for _, extension := range extensions {\n        cap_str = extension[0 : len(extension)-1]\n        sm_str = extension[len(extension)-1 :]\n        cap = len(cap_str)\n        sm = len(sm_str)\n        if cap > sm {\n            cap_str = \" \" + cap_str\n            sm_str = \" \" + sm_str\n        }\n        cap = cap - sm\n        sm = sm - cap\n        cap_str = strings.ToLower(cap_str)\n        sm_str = strings.ToLower(sm_str)\n        cap_str = strings.Replace(cap_str, \" \", \"\", -cap"], ["package cycpattern_check_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunc cycpattern_check(a string, b string) bool {\n    // Check if a is a substring of b\n    if len(a) < len(b) {\n        return false\n    }\n    for I := 0; I < len(a); i++ {\n        if a[i] != b[i] {\n            return false\n        }\n    }\n    return true\n}\n"], ["package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given an integer. return a list that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n// >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int) []interface{} {\n    var even []interface{}\n    var odd []interface{}\n    for num > 0 {\n        if num % 2 == 0 {\n            even = append(even, num)\n        } else {\n            odd = append(odd, num)\n        }\n        num /= 2\n    }\n    return even\n}\n"], ["package int_to_mini_roman_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunc int_to_mini_roman(number int) string {\n    var output string\n    var count int\n    var roman string\n    var i int\n    var j int\n    var k int\n\n    // Initialize variables\n    output = \"I\"\n    count = 1\n    roman = \"I\"\n\n    // Loop through the number\n    for I := 1; I <= number; i++ {\n        // If the current digit is a 1, add it to the output string\n        if I == 1 {\n            output = string([]rune{'I'})\n            count++\n        }\n        // If the current digit is a 5, add it to the output string\n        if I == 5 {\n            output = string([]rune{'V'})\n            count++\n        }\n        // If the current digit is a 10, add it to the output string\n        if I == 10 {\n            output = string([]rune{'X'})\n            count++\n        }\n        // If the current digit is a 50, add it to the output string\n        if I == 50 {\n            output = string([]rune{'L'})\n            count++\n        }\n        // If the current digit is a 100, add it to the output string\n        if I == 100 {\n            output = string([]rune{'C'})\n            count++\n        }\n        // If the current digit is a 500, add it to the output string\n        if I == 500 {\n           "], ["package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int, b int, c int) bool {\n    if a == b && b == c {\n        return true\n    }\n    if a == c && c == b {\n        return true\n    }\n    if a == b || b == c || a == c {\n        return false\n    }\n    return false\n}\n"], ["package find_max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([]string{\"name\", \"of\", \"string\"})\n// \"string\"\n// >>> find_max([]string{\"name\", \"enam\", \"game\"})\n// \"enam\"\n// >>> find_max([]string{\"aaaaaaa\", \"bb\", \"cc\"})\n// \"aaaaaaa\"\nfunc find_max(words []string) string {\n    // initialize max word as empty string\n    max := \"\"\n    // iterate over words and find max word with maximum number of unique characters\n    for _, word := range words {\n        if len(word) > len(max) {\n            max = word\n        }\n    }\n    // return max word\n    return max\n}\n"], ["package eat_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return a list of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// []int{11, 4}\n// >>> eat(4, 8, 9)\n// []int{12, 1}\n// >>> eat(1, 10, 10)\n// []int{11, 0}\n// >>> eat(2, 11, 5)\n// []int{7, 0}\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunc eat(number int, need int, remaining int) []int {\n    if number < need {\n        return []int{number, remaining}\n    }\n    if number == need {\n        return []int{remaining, 0}\n    }\n    return []int{0, remaining - number}\n}\n"], ["package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two lists operator, and operand. The first list has basic algebra operations, and \n// the second list is a list of integers. Use the two given lists to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list is equal to the length of operand list minus one.\n// Operand is a list of of non-negative integers.\n// Operator list has at least one operator, and operand list has at least two operands.\nfunc do_algebra(operator []string, operand []int) int {\n    var result int\n    for _, op := range operator {\n        switch op {\n        case \"+\":\n            result += operand[0]\n        case \"*\":\n            result *= operand[0]\n        case \"-\":\n            result -= operand[0]\n        case \"/\":\n            if operand[0] == 0 {\n                return 0\n            }\n            result /= operand[0]\n        case \"^\":\n            result = math.Pow(float64(operand[0]), float64(operand[1]))\n        default:\n            return 0\n        }\n    }\n    return result\n}\n"], ["package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunc solve(s string) string {\n    // convert string to lowercase\n    s = strings.ToLower(s)\n\n    // reverse case if it's lowercase\n    if s[0] == s[len(s)-1] {\n        s = s[1:] + s[0]\n    }\n\n    // reverse case if it's uppercase\n    if s[0] == s[len(s)-1] {\n        s = s[0] + s[1:]\n    }\n\n    // reverse case if it's mixed case\n    if s[0] == s[len(s)-1] && s[1] == s[2] {\n        s = s[2] + s[1]\n    }\n\n    return s\n}\n"], ["package generate_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(8, 2)\n// []int{2, 4, 6, 8}\n// >>> generate_integers(10, 14)\n// []int{}\nfunc generate_integers(a int, b int) []int {\n    var result []int\n    for I := a; I <= b; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n"]]