[["\n# <func> # Python \n# Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch):\n    # Define a variable to store the length of the string\n    n = len(s)\n    # Initialize a variable to store the length of the string after removing the first and last occurrence of the character\n    m = n - 1\n    # Initialize a variable to store the first occurrence of the character\n    f = 0\n    # Initialize a variable to store the last occurrence of the character\n    l = 0\n    # Loop through the string\n    for I in range(n):\n        # Check if the current character is equal to the first occurrence of the character\n        if s[i] == ch:\n            # If it is, update the first occurrence\n            f = i\n            # If it is the first occurrence, update the length of the string\n            if f == 0:\n                m = i\n        # Check if the current character is equal to the last occurrence of the character\n        elif s[i] == ch:\n            # If it is, update the last occurrence\n            l = i\n            # If it is the last occurrence, update the length of the string\n            if l == n-1:\n                m = i\n        # If the current character is not equal to the first or last occurrence of the character, update the length of the string\n        else:\n            m = i\n    # Return the modified string\n    return s[m:l+1]\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n    # Sort the matrix in ascending order\n    M = M.copy()\n    for I in range(len(M)):\n        for j in range(i+1, len(M)):\n            if M[j] > M[j-1]:\n                M[j], M[j-1] = M[j-1], M[j]\n    return M\n\n# Example usage\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nsorted_matrix = sort_matrix(matrix)"], ["from collections import Counter\r\n\n# <func> # Python \n# Write a function to count the most common words in a dictionary.\ndef count_common(words):\n    count = Counter(words)\n    return list(count.most_common(1))[0][0]\n\n# Example usage:\nwords = ['cat', 'dog', 'cat', 'dog', 'cat', 'cat', 'dog', 'cat', 'dog']"], ["\n# <func> # Python \n# Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h):\n    volume = l * b * h\n    return volume\n\n# Call the function with the required arguments"], ["import re\r\n\n# <func> # Python \n# Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\n    # Split the string at lowercase letters\n    return [word.lower() for word in text.split()]\n\n# Example usage:"], ["import re\r\n\n# <func> # Python \n# Write a function to find sequences of lowercase letters joined with an underscore.\ndef text_lowercase_underscore(text):\n    # Split the text into words\n    words = text.split()\n\n    # Remove punctuation and convert to lowercase\n    clean_words = [word.lower() for word in words if word.isalpha()]\n\n    # Join the words with an underscore\n    return '_'.join(clean_words)\n\n# Example usage\ntext = 'Hello, World! How are you?'\nresult = text_lowercase_underscore(text)"], ["\n# <func> # Python \n# Write a function to find the perimeter of a square.\ndef square_perimeter(a):\n    return 4 * a\n\n# Call the function with the square side length\nperimeter = square_perimeter(5)"], ["NO_OF_CHARS = 256\r\n\n# <func> # Python \n# Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string):\n    return [char for char in string if char not in string2]\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\n    # Your code here\n    return False\n\n# Example usage\narraynums = [1, 2, 3, 1, 3, 4, 2, 1]"], ["\n# <func> # Python \n# Write a function to check if the given number is woodball or not.\ndef is_woodall(x):\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to find m number of multiples of n.\ndef multiples_of_num(m,n):\n    # Write your code here.\n    return []\n\n# Example usage:\nmultiples_of_num(3, 10)\n# Output: [1, 3, 4, 6, 7, 8]\n\n# Example usage:\nmultiples_of_num(5, 10)\n# Output: [1, 3, 5, 7, 9]\n\n# Example usage:\nmultiples_of_num(10, 10)\n# Output: []"], ["\n# <func> # Python \n# Write a function to find the first duplicate element in a given array of integers.\ndef find_first_duplicate(nums):\n    # Initialize a variable to store the first duplicate element\n    duplicate = None\n    \n    # Loop through the array\n    for I in range(len(nums)):\n        # If the current element is not the first duplicate, update the duplicate variable\n        if nums[i] != duplicate:\n            duplicate = nums[i]\n            \n    # Return the first duplicate element if it exists\n    return duplicate\n\n# Example usage\nnums = [3, 2, 1, 5, 4]\nduplicate = find_first_duplicate(nums)"], ["\n# <func> # Python \n# Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1):\n    max_sum = 0\n    for I in range(len(list1)):\n        for j in range(len(list1[i])):\n            sum = 0\n            for k in range(len(list1)):\n                sum += list1[k][j]\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum\n\n# Example usage:\nlist1 = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]"], ["\n# <func> # Python \n# Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary):\n    # Convert binary to decimal\n    decimal = 0\n    for I in range(len(binary)):\n        if binary[i] == '1':\n            decimal += int(binary[i]) * pow(2, len(binary) - 1 - i)\n    return decimal\n\n# Example usage\nbinary_to_decimal('1010') # Output: 25\nbinary_to_decimal('1110011101110011101110011100111011100111011100111011100111001110111001110111001110011101110011101110011100111011100111011100111001110111001110111001110011101110011101110011100111011100111011100111001110111001110111001110011101110011101110011100111011100111011100111001110111001110111001110011101110011101110011100111011100111011100111001110111001110111001110011101110011101110011"], ["\n# <func> # Python \n# Write a python function to find the product of non-repeated elements in a given array.\ndef find_Product(arr,n):\n    # Initialize a variable to store the product of non-repeated elements\n    product = 1\n    # Loop through the array\n    for I in range(n):\n        # Check if the current element is not repeated\n        if arr[i] != arr[i+1]:\n            # If it is not repeated, add the current element to the product\n            product *= arr[i]\n    return product\n\n# Example usage\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nproduct = find_Product(arr,n)"], ["\n# <func> # Python \n# Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n    # Initialize a list to store the elements that satisfy the condition\n    k_elements = []\n    \n    # Loop through each element in the list\n    for I in range(len(test_list)):\n        # Check if the current element satisfies the condition\n        if test_list[i] == K:\n            # If it does, add it to the list of k elements\n            k_elements.append(test_list[i])\n    \n    # Return the list of k elements\n    return k_elements\n\n# Example usage\ntest_list = [1, 2, 3, 4, 5]\nk_elements = check_k_elements(test_list, 3)"], ["import re  \r\n\n# <func> # Python \n# Write a python function to remove all digits from a list of strings.\ndef remove(list):\n    return [re.sub(r'\\d+', '', s) for s in list]\n\n# Call the function with a list of strings.\nlist1 = [\"12345\", \"123456\", \"1234567\", \"12345678\"]\nlist2 = remove(list1)"], ["\n# <func> # Python \n# Write a python function to find binomial co-efficient.\ndef binomial_Coeff(n,k):\n    # Your code here\n    return n*k/(n+k)\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to find the element occurring odd number of times.\ndef get_Odd_Occurrence(arr,arr_size):\n    # initialize the count variable to 0\n    count = 0\n    \n    # loop through the array\n    for I in range(arr_size):\n        # check if the current element is odd\n        if arr[i] % 2 != 0:\n            # increment the count if the element is odd\n            count += 1\n    \n    # return the count\n    return count\n\n# Example usage\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ncount = get_Odd_Occurrence(arr, len(arr))"], ["\n# <func> # Python \n# Write a python function to count all the substrings starting and ending with same characters.\ndef check_Equality(s):\n    count = 0\n    for I in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count\n\n# Testing the function"], ["\n# <func> # Python \n# Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\ndef func(nums, k):\n    # Create a heap queue\n    q = []\n    for num in nums:\n        q.append(num)\n    \n    # Initialize heap size to k\n    heapq.heappush(q, -1 * k)\n    \n    # Loop through the remaining numbers and update the heap\n    for I in range(k):\n        heapq.heappop(q)\n    \n    # Return the top k numbers\n    return heapq.heappop(q)\n\n# Example usage"], ["import math \r\n\n# <func> # Python \n# Write a python function to find the largest prime factor of a given number.\ndef max_Prime_Factors (n):\n    # Initialize variables\n    max_factor = 1\n    max_factor_count = 0\n    # Loop through all prime numbers up to n\n    for I in range(2, int(math.sqrt(n))+1):\n        if n % I == 0:\n            # If n is a prime number, check if it is greater than the current maximum factor\n            if n > max_factor:\n                max_factor = I\n                max_factor_count = 1\n            # If n is a prime number, update the maximum factor count\n            else:\n                max_factor_count += 1\n    # Return the maximum prime factor count and the largest prime factor\n    return max_factor_count, max_factor"], ["\n# <func> # Python \n# Write a python function to convert a decimal number to binary number.\ndef decimal_To_Binary(N):\n    # Convert decimal number to binary number\n    binary_number = \"\"\n    while N > 0:\n        remainder = N % 2\n        binary_number = str(remainder) + binary_number\n        N = int(N / 2)\n    return binary_number\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to find the missing number in a sorted array.\ndef find_missing(ar,N):\n    # Initialize the missing number to the first element of the array\n    missing = ar[0]\n    \n    # Loop through the rest of the array\n    for I in range(1,len(ar)):\n        # If the current element is greater than the missing number, update the missing number\n        if ar[i] > missing:\n            missing = ar[i]\n    \n    # Return the missing number\n    return missing\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to find the n-th rectangular number.\ndef find_rect_num(n):\n    # Your code here\n    return None\n\n# Example usage\nrect_num = find_rect_num(5)"], ["\n# <func> # Python \n# Write a python function to find the nth digit in the proper fraction of two given numbers.\ndef find_Nth_Digit(p,q,N):\n    # Check if the nth digit is a multiple of 10\n    if (q % 10 == 0):\n        # If it is, return the nth digit\n        return p[N-1]\n    else:\n        # If it is not, find the nth digit and add it to the result\n        return find_Nth_Digit(p[0:N-1],q/10,N) + p[N-1]\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n    # Sort the list using the built-in sort() function\n    return sorted(mixed_list)\n\n# Example usage:\nmixed_list = [1, 2, \"apple\", 3.5, \"banana\", \"cherry\"]\nsorted_list = sort_mixed_list(mixed_list)"], ["\n# <func> # Python \n# Write a function to find the division of first even and odd number of a given list.\ndef div_even_odd(list1):\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    return even_num, odd_num\n\n# Example usage\neven_num, odd_num = div_even_odd([2, 4, 6, 8, 10])"], ["import heapq\r\nfrom collections import Counter\r\n\n# <func> # Python \n# Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\ndef rearange_string(S):\n    # Initialize a dictionary to store the characters\n    char_dict = {}\n    for char in S:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    # Initialize a list to store the characters that are adjacent to each other\n    adjacent_char_list = []\n    for char in char_dict:\n        if char_dict[char] > 1:\n            adjacent_char_list.append(char)\n    # Initialize a list to store the characters that are not adjacent to each other\n    not_adjacent_char_list = []\n    for char in char_dict:\n        if char_dict[char] == 1:\n            not_adjacent_char_list.append(char)\n    # Initialize a list to store the characters that are adjacent to adjacent characters\n    adjacent_adjacent_char_list = []\n    for char in adjacent_char_list:\n        if char_dict[char] > 1:\n            adjacent_adjacent_char_list.append(char)\n    # Initialize a list to store the characters that are not adjacent to adjacent characters\n    not_adjacent_adjacent_char_list = []\n    for char in not_adjacent_char_list:\n        if char_dict[char] == 1:\n            not_adjacent_adjacent_char_list.append(char)\n    # Initialize a list to store the characters that are adjacent to adjacent adjacent characters\n    adjacent_adjacent_adjacent_char_list = []\n    for char in adjacent_adjacent_char_list:\n        if char_dict[char] > 1:\n            adjacent_adjacent_adjacent_char_list.append(char)\n    # Initialize a list to store the characters that are not adjacent to adjacent adjacent characters\n    not_adjacent_adjacent_adjacent_char_list = []\n    for char in not_adjacent"], ["from collections import Counter\r\nfrom itertools import chain\r\n\n# <func> # Python \n# Write a function to find frequency of the elements in a given list of lists using collections module.\ndef freq_element(nums):\n    # Initialize frequency dictionary\n    freq = Counter()\n    # Loop through each element in the list\n    for num in nums:\n        # Add the frequency of the element to the frequency dictionary\n        freq[num] += 1\n    # Return the frequency dictionary\n    return freq\n\n# Example usage\nnums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nfreq = freq_element(nums)"], ["\n# <func> # Python \n# Write a function to filter even numbers using lambda function.\ndef filter_evennumbers(nums):\n    return [num for num in nums if num % 2 == 0]\n\n# Call the function with a list of numbers.\neven_numbers = filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9])"], ["\n# <func> # Python \n# Write a python function to find the sum of repeated elements in a given array.\ndef find_Sum(arr,n):\n    # initialize sum to 0\n    sum = 0\n    \n    # iterate through the array\n    for I in range(n):\n        # check if the current element is repeated\n        if arr[i] == arr[i+1]:\n            # increment the sum if the element is repeated\n            sum += 1\n    \n    # return the sum of repeated elements\n    return sum\n\n# test the function\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nsum = find_Sum(arr,n)"], ["import re\r\n\n# <func> # Python \n# Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\n    return re.findall(r'\\w_', text)\n\n# Example usage:\ntext = 'Hello, World! How are you?'"], ["import re\r\n\n# <func> # Python \n# Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n    # Use regular expressions to match the word at the beginning of the string.\n    return re.search(r'\\s*<|system|>', text).group()\n\n# Example usage:\ntext = \"This is a test string. The word 'test' is at the beginning.\""], ["\n# <func> # Python \n# Write a function to find the gcd of the given array elements.\ndef find_gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n    return len(set(data)) == len(data)\n\n# Test the function with some sample inputs"], ["\n# <func> # Python \n# Write a python function to find the last digit when factorial of a divides factorial of b.\ndef compute_Last_Digit(A,B):\n    # check if A and B are positive integers\n    if A < 0 or B < 0:\n        raise ValueError(\"Inputs must be positive integers\")\n    \n    # check if A and B are not equal\n    if A != B:\n        raise ValueError(\"Inputs must be equal\")\n    \n    # calculate the factorial of A\n    A_Factorial = 1\n    for I in range(1, A+1):\n        A_Factorial *= I\n    \n    # calculate the factorial of B\n    B_Factorial = 1\n    for I in range(1, B+1):\n        B_Factorial *= I\n    \n    # calculate the product of A and B\n    Product = A_Factorial * B_Factorial\n    \n    # check if the product is greater than 1\n    if Product > 1:\n        # check if the product is divisible by A\n        if Product % A == 0:\n            # if the product is divisible by A, return the last digit\n            return A % 10\n        else:\n            # if the product is not divisible by A, return None\n            return None\n    else:\n        # if the product is not greater than 1, return None\n        return None\n    \n# Example usage"], ["\n# <func> # Python \n# Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\n    # Your code here\n    return n\n\n# Example usage:\nodd_bit_set_number(10) # Output: 11\nodd_bit_set_number(12) # Output: 11\nodd_bit_set_number(13) # Output: 11\nodd_bit_set_number(14) # Output: 11\nodd_bit_set_number(15) # Output: 11\nodd_bit_set_number(16) # Output: 11\nodd_bit_set_number(17) # Output: 11\nodd_bit_set_number(18) # Output: 11\nodd_bit_set_number(19) # Output: 11\nodd_bit_set_number(20) # Output: 11\nodd_bit_set_number(21) # Output: 11\nodd_bit_set_number(22) # Output: 11\nodd_bit_set_number(23) # Output: 11\nodd_bit_set_number(24) # Output: 11\nodd_bit_set_number(25) # Output: 11\nodd_bit_set_number(26) # Output: 11\nodd_bit_set_number(27) # Output: 11\nodd_bit_set_number(28) # Output: 11\nodd_bit_set_number(29) # Output: 11\nodd_bit_set_number(30) # Output: 11\nodd_bit_set_number(31) # Output: 11\nodd_bit_set_number(32) # Output: 11\nodd_bit_set_number(33) # Output: 11\nodd_bit_set_number(34) # Output: 11\nodd_bit_set_number(35) # Output: 11\nodd_bit_set_number"], ["\n# <func> # Python \n# Write a function to extract every first or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n    # Initialize the first element to be the first element of the list\n    first = nums[0]\n    # Initialize the second element to be the second element of the list\n    second = nums[1]\n    # Loop through the list and extract the specified element\n    for I in range(N):\n        # If the current element is the specified element, return it\n        if first == nums[i]:\n            return second\n        # If the current element is not the specified element, move to the next element\n        second = nums[i]\n    # If no element is found, return None\n    return None\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to find the list with minimum length using lambda function.\ndef min_length_list(input_list):\n    return min(len(l) for l in input_list)\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\n    if x**2 + y**2 + z**2 == (x+y+z)**2:\n        print(\"The triangle is equilateral.\")\n    else:\n        print(\"The triangle is not equilateral.\")\n\n# Example usage\ncheck_equilateral(3,3,3)"], ["\n# <func> # Python \n# Write a function to caluclate area of a parallelogram.\ndef parallelogram_area(b,h):\n    return b*h/2\n\n# Call the function and pass in the values for the base and height of the parallelogram."], ["\n# <func> # Python \n# Write a python function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n    n = len(my_list)\n    # Initialize the count array\n    count = [0] * (n+1)\n    # Initialize the sorted array\n    sorted_list = []\n    # Loop through the array\n    for I in range(n):\n        count[my_list[i]] += 1\n        # Update the sorted array\n        sorted_list.append(my_list[i])\n    # Return the sorted array\n    return sorted_list\n\n# Example usage\nmy_list = [3, 1, 4, 2, 5]\nsorted_list = counting_sort(my_list)"], ["import math\r\n\n# <func> # Python \n# Write a function to find t-nth term of geometric series.\ndef tn_gp(a,n,r):\n    # Define the function to calculate the t-nth term of the geometric series.\n    def tn_gp_func(x):\n        # Calculate the sum of the first n terms of the geometric series.\n        sum_a = 0\n        for I in range(1,n+1):\n            sum_a += a * math.pow(x,i)\n        return sum_a\n    \n    # Calculate the t-nth term of the geometric series.\n    t_n = a * math.pow(r,n)\n    t_n_func = tn_gp_func(r)\n    return t_n_func\n\n# Example usage:\na = 1\nn = 3\nr = 2\nt_n = tn_gp(a,n,r)"], ["\n# <func> # Python \n# Write a python function to check if a given number is one less than twice its reverse.\ndef rev(num):\n    # write your code here\n    return num * -1\n\n# test the function"], ["\n# <func> # Python \n# Write a python function to find the largest number that can be formed with the given digits.\ndef find_Max_Num(arr,n):\n    # Base case: if n is 0, return the first element of the array\n    if n == 0:\n        return arr[0]\n    \n    # Recursive case: find the largest number that can be formed with the remaining digits\n    max_num = find_Max_Num(arr[1:],n-1)\n    \n    # Return the maximum number\n    return max_num\n\n# Example usage:\narr = [1,2,3,4,5]\nn = 5"], ["\n# <func> # Python \n# Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y):\n    if x > y:\n        return True\n    else:\n        return False\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find the nth octagonal number.\ndef is_octagonal(n):\n    # Define the octagonal number formula\n    formula = (n * (n + 1)) // 2\n    # Check if the number is an octagonal number\n    if formula % 8 == 0:\n        return True\n    else:\n        return False\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\ndef max_len_sub( arr, n):\n    # initialize max_len and max_diff to 0\n    max_len = 0\n    max_diff = 0\n    \n    # iterate through the array\n    for I in range(n):\n        # find the difference between adjacent elements\n        diff = arr[i+1] - arr[i]\n        \n        # update max_len and max_diff if the difference is greater than current max_diff\n        if diff > max_diff:\n            max_len = i\n            max_diff = diff\n    \n    return max_len\n\n# test the function\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nmax_len = max_len_sub(arr, n)"], ["from collections import \n# <func> # Python \n# Write a python function to count number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s,n):\n    count = 0\n    for I in range(len(s)):\n        if s[i:i+n] == s[i:i+n]:\n            count += 1\n    return count\n\n# Testing the function"], ["\n# <func> # Python \n# Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n    # initialize smallest number to largest number\n    smallest = xs[0]\n    # iterate through list\n    for num in xs:\n        # compare smallest number with current number\n        if num < smallest:\n            # update smallest number with current number\n            smallest = num\n    return smallest\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n    max_diff = 0\n    for I in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                max_diff = max(max_diff, abs(test_list[i] - test_list[j]))\n    return max_diff\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n\n# Example usage\nsubject_marks = [(10, 'A'), (8, 'B'), (9, 'C'), (7, 'D'), (5, 'E')]\nsorted_subject_marks = subject_marks(sorted(subject_marks, key=lambda x: x[1]))"], ["\n# <func> # Python \n# Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n    if not data_list:\n        return 0\n    sum_list = 0\n    for num in data_list:\n        sum_list += num\n    return sum_list\n\n# Call the function with a list of numbers."], ["\n# <func> # Python \n# Write a python function to count positive numbers in a list.\ndef pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n\n# Example usage:\npos_count([1, 2, 3, 4, 5]) # Output: 2"], ["\n# <func> # Python \n# Write a function to find the number of ways to partition a set of bell numbers.\ndef bell_number(n):\n    # Define the bell numbers\n    bell_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # Define the number of ways to partition the set\n    ways = 1\n    # Loop through the bell numbers\n    for I in range(1, n+1):\n        # If the current number is a multiple of the previous number, add 1 to the ways\n        if I % bell_numbers[i-1] == 0:\n            ways += 1\n    return ways\n\n# Call the function"], ["\n# <func> # Python \n# Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A):\n    # Write your code here.\n    # Check if the array is empty or not.\n    if len(A) == 0:\n        return True\n    \n    # Check if the first element is greater than the last element.\n    if A[0] > A[-1]:\n        return False\n    \n    # Traverse the array and check if the next element is greater than the current element.\n    for I in range(1, len(A)):\n        if A[i] > A[i-1]:\n            return False\n    \n    # The array is monotonic.\n    return True\n\n# Example usage:\narr = [1, 2, 3, 4, 5]"], ["\n# <func> # Python \n# Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n    # Write your code here.\n    return l == s\n\n# Example usage:\nl = [1, 2, 3, 4, 5]\ns = [2, 3, 4, 5]"], ["\n# <func> # Python \n# Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\n    # Write your code here\n    if len(Input) != k:\n        return False\n    for I in range(len(Input)):\n        if Input[i][0] != Input[i][1]:\n            return False\n    return True\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to sort a list of elements using comb sort.\ndef comb_sort(nums):\n    # Initialize the pivot element\n    pivot = nums[0]\n    \n    # Loop through the remaining elements\n    for I in range(1, len(nums)):\n        # Find the smallest element in the current sublist\n        smallest = i\n        for j in range(i+1, len(nums)):\n            if nums[j] < nums[smallest]:\n                smallest = j\n        \n        # Swap the smallest element with the pivot\n        nums[i], nums[smallest] = nums[smallest], nums[i]\n        \n        # Recursively sort the remaining sublist\n        comb_sort(nums[:smallest])\n        comb_sort(nums[smallest+1:])\n        \n    return nums\n\n# Test the function\nnums = [5, 2, 1, 8, 3, 7, 4]\nsorted_nums = comb_sort(nums)"], ["\n# <func> # Python \n# Write a python function to check whether the given number can be represented as difference of two squares or not.\ndef dif_Square(n):\n    # Write your code here\n    if n % 4 == 0 and n % 16 == 0:\n        return True\n    else:\n        return False\n\n# Example usage"], ["import re\r\n\n# <func> # Python \n# Write a function to split the given string with multiple delimiters by using regex.\ndef multiple_split(text):\n    # Split the string with multiple delimiters by using regex.\n    return re.split(r'\\s*,\\s*', text)\n\n# Example usage:\ntext = \"apple,banana,cherry\""], ["\n# <func> # Python \n# Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):\n    # Check if the first color is present in the first pattern\n    if colors[0] in patterns[0]:\n        return True\n    # Check if the second color is present in the second pattern\n    if colors[1] in patterns[1]:\n        return True\n    # Check if the third color is present in the third pattern\n    if colors[2] in patterns[2]:\n        return True\n    # Check if the fourth color is present in the fourth pattern\n    if colors[3] in patterns[3]:\n        return True\n    # Check if the fifth color is present in the fifth pattern\n    if colors[4] in patterns[4]:\n        return True\n    # Check if the sixth color is present in the sixth pattern\n    if colors[5] in patterns[5]:\n        return True\n    # Check if the seventh color is present in the seventh pattern\n    if colors[6] in patterns[6]:\n        return True\n    # Check if the eighth color is present in the eighth pattern\n    if colors[7] in patterns[7]:\n        return True\n    # Check if the ninth color is present in the ninth pattern\n    if colors[8] in patterns[8]:\n        return True\n    # Check if the tenth color is present in the tenth pattern\n    if colors[9] in patterns[9]:\n        return True\n    # Check if the eleventh color is present in the eleventh pattern\n    if colors[10] in patterns[10]:\n        return True\n    # Check if the twelfth color is present in the twelfth pattern\n    if colors[11] in patterns[11]:\n        return True\n    # Check if the thirteenth color is present in the thirteenth pattern\n    if colors[12] in patterns[12]:\n        return True\n    # Check if the fourteenth color is present in the fourteenth pattern\n    if colors[13] in patterns[13]:\n        return True\n    # Check if the fifteenth color is present in the fifteenth pattern\n    if colors[1"], ["\n# <func> # Python \n# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n    # Initialize a list to store tuples with all elements divisible by K\n    tuples_with_divisible_elements = []\n    \n    # Loop through each tuple in the list\n    for tuple in test_list:\n        # Check if all elements in the tuple are divisible by K\n        if all(element % K for element in tuple):\n            # If all elements are divisible by K, add the tuple to the list of tuples with divisible elements\n            tuples_with_divisible_elements.append(tuple)\n    \n    # Return the list of tuples with all elements divisible by K\n    return tuples_with_divisible_elements\n\n# Example usage\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\nk = 3\nresult = find_tuples(test_list, k)"], ["\n# <func> # Python \n# Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n    count = 0\n    for I in range(m):\n        for j in range(n):\n            if (i+j)%2 == 0:\n                count += 1\n    return count\n\n# Testing the function"], ["\n# <func> # Python \n# Write a python function to find the difference between sum of even and odd digits.\ndef is_Diff(n):\n    # Check if n is even\n    if n % 2 == 0:\n        return 0\n    else:\n        return n - (n % 2)\n\n# Call the function"], ["\n# <func> # Python \n# Write a python function to find number of integers with odd number of set bits.\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for I in range(1, 256):\n        if n & (1 << I) != 0:\n            count += 1\n    return count\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to check whether the length of the word is odd or not.\ndef word_len(s):\n    # check if the length of the word is odd\n    if len(s) % 2 != 0:\n        return True\n    else:\n        return False\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n):\n    # Define the formula for the nth tetrahedral number\n    formula = (3 * (n + 1) * (n + 2) * (n + 3)) / 2\n    \n    # Return the value of the formula\n    return formula\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to zip the two given tuples.\ndef zip_tuples(test_tup1, test_tup2):\n    # Your code here\n    return zip(test_tup1, test_tup2)\n\n# Example usage\ntest_tup1 = (1, 2)\ntest_tup2 = (3, 4)\nresult = zip_tuples(test_tup1, test_tup2)"], ["import math\r\n\n# <func> # Python \n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return math.pi * r ** 2\n\n# Call the function to find the volume of a sphere with radius 10.\nvolume_sphere(10)"], ["\n# <func> # Python \n# Write a python function to find the character made by adding all the characters of the given string.\ndef get_Char(strr):\n    char_list = []\n    for char in strr:\n        char_list.append(char)\n    return ''.join(char_list)\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find the n-th number in newman conway sequence.\ndef sequence(n):\n    # Define the sequence\n    sequence = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \n    # Initialize the current number\n    current = 1\n    \n    # Loop through the sequence\n    for I in range(1, n+1):\n        # Find the next number in the sequence\n        next_number = sequence[i-1] + sequence[i]\n        \n        # Check if the current number is greater than the next number\n        if current > next_number:\n            # If it is, update the current number\n            current = next_number\n            \n    # Return the current number\n    return current\n\n# Call the function"], ["import math\r\n\n# <func> # Python \n# Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n    # Calculate the radius of the sphere\n    r = float(r)\n    # Calculate the surface area using the formula S = 4 * pi * r^2\n    surfacearea = 4 * math.pi * r**2\n    return surfacearea\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\n    # Define the formula for the nth centered hexagonal number.\n    formula = (n + 1) / 2 * (n + 1) / 2\n    # Calculate the sum of the first n hexagons.\n    sum_of_first_n_hexagons = 0\n    for I in range(1, n + 1):\n        sum_of_first_n_hexagons += (2 * I - 1) * (2 * I - 1) / 6\n    # Calculate the nth centered hexagonal number.\n    return formula + sum_of_first_n_hexagons\n\n# Test the function with some examples."], ["import collections as ct\r\n\n# <func> # Python \n# Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single expression.\n    \"\"\"\n    # Create a new dictionary with the merged values.\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict\n\n# Example usage:\ndict1 = {'a': 1, 'b': 2, 'c': 3}\ndict2 = {'d': 4, 'e': 5}\ndict3 = {'f': 6, 'g': 7}\nmerged_dict = merge_dictionaries_three(dict1, dict2, dict3)"], ["import collections\r\n\n# <func> # Python \n# Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n    freq = collections.Counter(list1)\n    return freq\n\n# Example usage:\nfreq_count([1, 2, 3, 4, 5]) # Output: {'1': 2, '2': 1, '3': 1, '4': 1, '5': 1}"], ["\n# <func> # Python \n# Write a function to find the closest smaller number than n.\ndef closest_num(N):\n    # Your code here\n    return N\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to find the length of the longest word.\ndef len_log(list1):\n    # Initialize the longest word length to 0\n    longest_length = 0\n    \n    # Loop through the list and update the longest word length\n    for word in list1:\n        if len(word) > longest_length:\n            longest_length = len(word)\n    \n    return longest_length\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\n    # Initialize a list to store the indices of the substring\n    indices = []\n    \n    # Loop through each string in the list\n    for I in range(len(str1)):\n        # Check if the current string is equal to the substring\n        if str1[i] == sub_str:\n            # If the substring is found, add the index to the list of indices\n            indices.append(i)\n    \n    # Return the indices of the substring\n    return indices\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to check whether the given number is undulating or not.\ndef is_undulating(n):\n    # Write your code here.\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n    if b == 0:\n        return 1\n    else:\n        return a**b\n\n# Example usage"], ["from operator import itemgetter \r\n\n# <func> # Python \n# Write a function to extract the index minimum value record from the given tuples.\ndef index_minimum(test_list):\n    min_index = None\n    for item in test_list:\n        if item[1] < min_index:\n            min_index = item[1]\n    return min_index\n\n# Example usage:\ntest_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nindex_minimum(test_list)\n# Output: 5\n\n# Explanation:\n# The function takes a list of tuples as input. It iterates through the list and checks if the second element of each tuple is less than the current minimum value. If it is, the current minimum value is updated to the second element of the tuple. The function returns the index of the current minimum value."], ["\n# <func> # Python \n# Write a python function to find the minimum length of sublist.\ndef Find_Min_Length(lst):\n    # Initialize the minimum length to the length of the first element\n    min_length = len(lst[0])\n    \n    # Loop through the list and update the minimum length\n    for I in range(1, len(lst)):\n        if lst[i] < min_length:\n            min_length = lst[i]\n    \n    return min_length\n\n# Example usage\nlst = [1, 2, 3, 4, 5]"], ["\n# <func> # Python \n# Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\n    # Define a list of all numbers from 1 to n\n    divisors = []\n    for I in range(1, n+1):\n        if n % I == 0:\n            divisors.append(i)\n    return len(divisors)\n\n# Call the function with some sample inputs"], ["\n# <func> # Python \n# Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\n    # Initialize frequency dictionary\n    frequency = {}\n    \n    # Loop through each element in the list\n    for element in list1:\n        # Check if the element is already in the dictionary\n        if element in frequency:\n            # Increment the frequency count\n            frequency[element] += 1\n        else:\n            # Add the element to the dictionary\n            frequency[element] = 1\n    \n    # Return the frequency dictionary\n    return frequency\n\n# Example usage\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nfrequency_lists(list1)\n# Output: {'[1, 2, 3]': 3, '[4, 5, 6]': 2, '[7, 8, 9]': 1}"], ["\n# <func> # Python \n# Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5]\nresult = multiply_num(numbers)"], ["\n# <func> # Python \n# Write a function to convert the given decimal number to its binary equivalent.\ndef decimal_to_binary(n):\n    # Convert decimal number to binary\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = int(n / 2)\n    return binary\n\n# Testing the function"], ["import sys\r\n\n# <func> # Python \n# Write a function to find the next smallest palindrome of a specified number.\ndef next_smallest_palindrome(num):\n    # Initialize a variable to store the next smallest palindrome\n    next_smallest = num\n    \n    # Loop through the number from 1 to the number of digits\n    for I in range(1, num):\n        # If the current digit is not equal to the previous digit, swap them\n        if num[i] != num[i-1]:\n            temp = num[i]\n            num[i] = num[i-1]\n            num[i-1] = temp\n            \n        # If the current digit is equal to the previous digit, swap them\n        elif num[i] == num[i-1]:\n            pass\n        \n        # If the current digit is a palindrome, swap it with the previous digit\n        elif num[i] == num[i-1] and num[i] != '0':\n            temp = num[i]\n            num[i] = num[i-1]\n            num[i-1] = temp\n            \n    # Return the next smallest palindrome\n    return next_smallest\n\n# Test the function with some sample inputs\nnum = 123456789\nnext_smallest = next_smallest_palindrome(num)"], ["\n# <func> # Python \n# Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\n    # Base case: if k is 0, return the first element\n    if k == 0:\n        return arr[0]\n    \n    # Base case: if k is greater than or equal to the length of the array, return the kth element\n    elif k >= len(arr):\n        return arr[k]\n    \n    # Recursive case: find the kth element in the subarray of length k\n    else:\n        return arr[k]\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nn = 3\nk = 2\nresult = kth_element(arr, n, k)"], ["\n# <func> # Python \n# Write a function to convert snake case string to camel case string.\ndef snake_to_camel(word):\n    # split the string into words\n    words = word.split()\n    \n    # convert each word to lowercase\n    words = [w.lower() for w in words]\n    \n    # convert each word to camel case\n    return ''.join(word[0].upper() + w[1:] for w in words if w[0].isupper())\n\n# test the function"], ["\n# <func> # Python \n# Write a function to find eulerian number a(n, m).\ndef eulerian_num(n, m):\n    # Base case: if n = 1 or m = 1, return 1\n    if n == 1 or m == 1:\n        return 1\n    # Recursive case: find eulerian number a(n-1, m)\n    else:\n        a1 = eulerian_num(n-1, m)\n        a2 = eulerian_num(n-1, m-1)\n        return a1 + a2\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n    # Define a lambda function to sort each sublist\n    def sort_sublist(lst):\n        # Sort the sublist using lambda function\n        return sorted(lst)\n    \n    # Convert the input list to a list of lists\n    sublists = [list(lst) for lst in input_list]\n    \n    # Sort the sublists using lambda function\n    return [sort_sublist(sublist) for sublist in sublists]\n\n# Example usage\nsorted_sublists = sort_sublists([[\"apple\", \"banana\", \"cherry\"], [\"orange\", \"grape\", \"kiwi\"]])"], ["\n# <func> # Python \n# Write a python function to count true booleans in the given list.\ndef count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n\n# Example usage:\nlst = [True, False, True, False, True]"], ["\n# <func> # Python \n# Write a function to add the given list to the given tuples.\ndef add_lists(test_list, test_tup):\n    result = []\n    for item in test_list:\n        result.append(item + test_tup[0])\n    return result\n\n# Example usage:\ntest_list = [1, 2, 3]\ntest_tup = (1, 2)\nresult = add_lists(test_list, test_tup)"], ["\n# <func> # Python \n# Write a python function to count hexadecimal numbers for a given range.\ndef count_Hexadecimal(L,R):\n    count = 0\n    for I in range(L,R+1):\n        if I % 16 == 0:\n            count += 1\n    return count\n\n# Example usage:\ncount_Hexadecimal(1,10)\n# Output: 10\n\n# Example usage:\ncount_Hexadecimal(10,20)\n# Output: 0"], ["import heapq\r\n\n# <func> # Python \n# Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\ndef merge_sorted_list(num1,num2,num3):\n    # Create a heap queue to store the merged list\n    heapq.heappush(heapq.heapify([num1,num2,num3]),-1)\n    # Recursively merge the sorted sub-lists\n    while heapq.heappop(heapq.heapify([num1,num2,num3]))[1] != -1:\n        num1,num2,num3 = heapq.heappop(heapq.heapify([num1,num2,num3]))\n        heapq.heappush(heapq.heapify([num1+num2,num3,num1+num3]),-1)\n    # Return the merged list\n    return heapq.heappop(heapq.heapify([num1+num2,num3,num1+num3]))\n\n# Test the function with sample inputs\nnum1 = [1, 3, 5, 7, 9]\nnum2 = [2, 4, 6, 8, 10]\nnum3 = [3, 5, 7, 9, 11]"], ["\n# <func> # Python \n# Write a python function to find the count of rotations of a binary string with odd value.\ndef odd_Equivalent(s,n):\n    count = 0\n    for I in range(n):\n        if s[i] == s[i+1]:\n            count += 1\n    return count\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\ndef extract_missing(test_list, strt_val, stop_val):\n    # Write your code here.\n    # Example usage:\n    # test_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # strt_val = 3\n    # stop_val = 10\n    # expected_result = [3, 4, 5, 6, 7, 8]\n    # actual_result = extract_missing(test_list, strt_val, stop_val)\n    # assert actual_result == expected_result\n\n# Test the function with different input values\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nstrt_val = 3\nstop_val = 10\nexpected_result = [3, 4, 5, 6, 7, 8]\nactual_result = extract_missing(test_list, strt_val, stop_val)"], ["\n# <func> # Python \n# Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\n    common_list = []\n    for item in nestedlist:\n        for other_item in nestedlist:\n            if item == other_item:\n                common_list.append(item)\n    return common_list\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to find the perimeter of a cylinder.\ndef perimeter(diameter,height):\n    return 2*diameter+2*height\n\n# Call the function with the diameter and height values.\nperimeter(5,3)\n\n# Output: 15"], ["\n# <func> # Python \n# Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n# Example usage:"], ["from collections import Counter \r\n\n# <func> # Python \n# Write a function to assign frequency to each tuple in the given tuple list.\ndef assign_freq(test_list):\n    freq = Counter()\n    for item in test_list:\n        freq[item] += 1\n    return freq\n\n# Example usage:\ntest_list = [('apple', 1), ('banana', 2), ('cherry', 3)]\nfreq = assign_freq(test_list)"], ["\n# <func> # Python \n# Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dit(list1):\n    for d in list1:\n        if d:\n            return False\n    return True\n\n# Example usage:\nlist1 = [{'name': 'John', 'age': 25}, {'name': 'Jane', 'age': 30}, {'name': 'Bob', 'age': 35}]"], ["\n# <func> # Python \n# Write a function to convert a given tuple of positive integers into an integer.\ndef tuple_to_int(nums):\n    # Convert each element of nums to an integer\n    int_nums = [int(num) for num in nums]\n    \n    # Return the sum of all integers in the tuple\n    return sum(int_nums)\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to convert all possible convertible elements in the list to float.\ndef list_to_float(test_list):\n    # Convert all elements to float\n    converted_list = []\n    for element in test_list:\n        try:\n            converted_list.append(float(element))\n        except ValueError:\n            continue\n    return converted_list\n\n# Example usage\ntest_list = [1, 2, 3, 4, 5]"], ["\n# <func> # Python \n# [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string):\n    # your code here\n    return []\n\n# call the function"], ["\n# <func> # Python \n# Write a python function to find the element that appears only once in a sorted array.\ndef search(arr,n):\n    # Base case: if n is 0, return the first element in the array\n    if n == 0:\n        return arr[0]\n    \n    # Base case: if n is 1, return the first element in the array\n    elif n == 1:\n        return arr[0]\n    \n    # Recursive case: find the element that appears only once in the sorted array\n    else:\n        # Find the index of the element in the sorted array\n        I = bisect.bisect_left(arr, n)\n        \n        # If the element is not in the array, it appears only once\n        if I == len(arr):\n            return arr[0]\n        \n        # If the element is in the array, it appears only once at the Ith index\n        else:\n            return arr[i]"], ["\n# <func> # Python \n# Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\n    # Initialize the maximum product to 1\n    max_product = 1\n    \n    # Loop through each pair in the list\n    for pair in list1:\n        # Calculate the product of the first and second elements of the pair\n        product = pair[0] * pair[1]\n        \n        # If the product is greater than the current maximum product, update the maximum product\n        if product > max_product:\n            max_product = product\n    \n    return max_product\n\n# Example usage\nlist1 = [('apple', 1), ('banana', 2), ('orange', 3), ('grape', 4)]"], ["\n# <func> # Python \n# Write a function to find the triplet with sum of the given array\ndef check_triplet(A, n, sum, count):\n    # Base case: if the array is empty, return false\n    if len(A) == 0:\n        return False\n    \n    # Base case: if the array has only one element, return true\n    if len(A) == 1:\n        return True\n    \n    # Base case: if the sum of the elements in the array is greater than the sum of the previous triplets, return false\n    if sum > sum[count] and sum[count] < sum[count+1]:\n        return False\n    \n    # Recursive case: find the sum of the elements in the current triplet\n    sum_of_current_triplet = sum[count] + A[count] + A[count+1]\n    \n    # Check if the sum of the elements in the current triplet is greater than the sum of the previous triplets\n    if sum_of_current_triplet > sum[count+1]:\n        return check_triplet(A, n, sum, count+1)\n    \n    # Check if the sum of the elements in the current triplet is less than the sum of the previous triplets\n    if sum_of_current_triplet < sum[count+1]:\n        return check_triplet(A, n, sum, count+1)\n    \n    # If the sum of the elements in the current triplet is equal to the sum of the previous triplets, return true\n    return True\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nsum = [arr[0] + arr[1] + arr[2] for I in range(n)]\ncount = 0\nresult = check_triplet(arr, n, sum, count)"], ["MAX = 3000 \r\n\n# <func> # Python \n# Write a function to find n\u2019th smart number.\ndef smartNumber(n):\n    # Define a function to find the n\u2019th prime number.\n    def isPrime(num):\n        if num <= 1:\n            return False\n        for I in range(2, int(num**0.5) + 1):\n            if num % I == 0:\n                return False\n        return True\n    \n    # Define a function to find the n\u2019th prime number.\n    def findNthSmartNumber(n):\n        if n <= 1:\n            return 0\n        if n == 2:\n            return 1\n        if n % 2 == 0:\n            return 0\n        if n % 3 == 0:\n            return 1\n        if n % 5 == 0:\n            return 0\n        # Find the n\u2019th prime number.\n        prime = 0\n        for I in range(2, int(n**0.5) + 1):\n            if isPrime(i):\n                prime += 1\n        return prime\n    \n    # Find the n\u2019th smart number.\n    return findNthSmartNumber(n)\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to sum all amicable numbers from 1 to a specified number.\ndef amicable_numbers_sum(limit):\n    # Write your code here.\n    sum_amicable_numbers = 0\n    for I in range(2, limit+1):\n        if I*i == limit:\n            sum_amicable_numbers += 1\n    return sum_amicable_numbers\n\n# Example usage:"], ["import cmath\r\n\n# <func> # Python \n# Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\n    # Check if the input is a complex number\n    if not isinstance(a, complex):\n        raise ValueError(\"Input must be a complex number.\")\n    if not isinstance(b, complex):\n        raise ValueError(\"Input must be a complex number.\")\n    \n    # Calculate the real part of the complex number\n    r = a.real\n    i = a.imag\n    \n    # Calculate the imaginary part of the complex number\n    s = b.real\n    t = b.imag\n    \n    # Calculate the angle of the complex number\n    theta = cmath.phase(s*t)\n    \n    # Return the angle in degrees\n    return theta.radians()\n\n# Example usage:\nangle_complex(1+1j, 2+2j) # Output: 1.5707963267948966\nangle_complex(1+1j, 2-2j) # Output: -1.5707963267948966\nangle_complex(1-1j, 2+2j) # Output: 0.0\nangle_complex(1-1j, 2-2j) # Output: 3.141592653589793"], ["\n# <func> # Python \n# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string, n):\n    # Initialize variables\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    # Loop through each character in the string\n    for I in range(len(string)):\n        # Check if the current character is 0 or 1\n        if string[i] == '0':\n            count_0 += 1\n        elif string[i] == '1':\n            count_1 += 1\n        # Check if the current character is a 0 or a 1\n        if count_0 > count_1:\n            max_diff = max(max_diff, i - count_0 + 1)\n        elif count_0 < count_1:\n            max_diff = max(max_diff, i - count_1 + 1)\n    return max_diff\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b):\n    # Check if a and b are both negative or both positive\n    if a<0 or b<0:\n        return 0\n    # Check if a and b are both even or both odd\n    if a%2==0 and b%2==0:\n        return a+b\n    # Check if a and b are both prime\n    if a>1 and b>1 and a*b>1:\n        return a+b\n    # If neither a nor b are prime, return 0\n    return 0\n\n# Example usage\nsum(10,20) # Output: 10\nsum(-10,10) # Output: 0\nsum(10,10) # Output: 10\nsum(10,11) # Output: 11\nsum(10,12) # Output: 12\nsum(10,13) # Output: 13\nsum(10,14) # Output: 14\nsum(10,15) # Output: 15\nsum(10,16) # Output: 16\nsum(10,17) # Output: 17\nsum(10,18) # Output: 18\nsum(10,19) # Output: 19\nsum(10,20) # Output: 20\nsum(10,21) # Output: 21\nsum(10,22) # Output: 22\nsum(10,23) # Output: 23\nsum(10,24) # Output: 24\nsum(10,25) # Output: 25\nsum(10,26) # Output: 26\nsum(10,27) # Output: 27\nsum(10,28) # Output: 28\nsum(10,29) # Output: 29\nsum(10,30) # Output: 30\nsum(10,31"], ["\n# <func> # Python \n# Write a function to multiply two integers without using the * operator in python.\ndef multiply_int(x, y):\n    return x * y\n\n# Call the function with the values of x and y"], ["\n# <func> # Python \n# Write a function to shortlist words that are longer than n from a given list of words.\ndef long_words(n, str):\n    return [word for word in str if len(word) > n]\n\n# Example usage:\nlong_words(3, [\"apple\", \"banana\", \"cherry\", \"orange\", \"pear\"]) # Output: [\"apple\", \"cherry\", \"pear\"]"], ["\n# <func> # Python \n# Write a function to calculate magic square.\ndef magic_square_test(my_matrix):\n    # Define magic square\n    magic_square = [\n        [my_matrix[0][0], my_matrix[1][0], my_matrix[2][0], my_matrix[3][0], my_matrix[4][0], my_matrix[5][0]],\n        [my_matrix[0][1], my_matrix[1][1], my_matrix[2][1], my_matrix[3][1], my_matrix[4][1], my_matrix[5][1]],\n        [my_matrix[0][2], my_matrix[1][2], my_matrix[2][2], my_matrix[3][2], my_matrix[4][2], my_matrix[5][2]],\n        [my_matrix[0][3], my_matrix[1][3], my_matrix[2][3], my_matrix[3][3], my_matrix[4][3], my_matrix[5][3]],\n        [my_matrix[0][4], my_matrix[1][4], my_matrix[2][4], my_matrix[3][4], my_matrix[4][4], my_matrix[5][4]],\n        [my_matrix[0][5], my_matrix[1][5], my_matrix[2][5], my_matrix[3][5], my_matrix[4][5], my_matrix[5][5]]\n    ]\n    \n    # Calculate sum of squares\n    sum_of_squares = 0\n    for row in range(6):\n        for col in range(6):\n            sum_of_squares += my_matrix[row][col]**2\n    \n    # Calculate product of elements\n    product = 1\n    for row in range(6):\n        for col in range(6):\n            product *= my_matrix[row][col]\n    \n    # Calculate determinant\n    determinant = sum_of_squares - product\n    \n    # Check if matrix is a magic square\n    if determinant == 0:\n        return \"Magic square not found\""], ["from collections import \n# <func> # Python \n# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums):\n    max_occurrences = 0\n    max_value = nums[0]\n    for num in nums:\n        if num > max_value:\n            max_occurrences = num\n            max_value = num\n    return max_occurrences\n\n# Example usage:\nnums = [1, 2, 3, 1, 2, 3]"], ["\n# <func> # Python \n# Write a python function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Loop through each character in the string\n    for I in range(len(str1)):\n        # Check if the current character is a vowel\n        if str1[i] in 'aeiou':\n            # If it is, swap it with the next character\n            str1[i], str1[i+1] = str1[i+1], str1[i]\n    \n    return str1\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to convert tuple to a string.\ndef tup_string(tup1):\n    return tuple(str(x) for x in tup1)\n\n# Example usage:\ntup1 = (1, 2, 3)"], ["\n# <func> # Python \n# Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\ndef sum_negativenum(nums):\n    return sum(map(lambda x: -x, nums))\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\ndef check_last (arr,n,p):\n    # check if the last element is odd\n    if arr[n-1]%2 == 1:\n        return True\n    else:\n        return False\n\n# Example usage\narr = [1,2,3,4,5]\nn = len(arr)\np = 2\nresult = check_last(arr,n,p)"], ["\n# <func> # Python \n# Write a function to find the nth hexagonal number.\ndef hexagonal_num(n):\n    # Define the formula for the nth hexagonal number\n    formula = (n * 16 ** 2) + 16\n    # Calculate the nth hexagonal number\n    return formula\n\n# Call the function with the desired value of n"], ["\n# <func> # Python \n# Write a function to calculate electricity bill.\ndef cal_electbill(units):\n    # Calculate the electricity bill based on the number of units consumed\n    bill = units * 0.015\n    return bill\n\n# Test the function"], ["from array import array\r\n\n# <func> # Python \n# Write a function to find the ration of zeroes in an array of integers.\ndef zero_count(nums):\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count\n\n# Test the function with some sample inputs"], ["\n# <func> # Python \n# Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n):\n    # Write your code here\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        for I in range(1, int(n**0.5) + 1):\n            if n % I == 0:\n                return False\n        return True\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find the circumference of a circle.\ndef circle_circumference(r):\n    return 2 * math.pi * r\n\n# Call the function with a radius of 5.0"], ["\n# <func> # Python \n# Write a function to extract elements that occur singly in the given tuple list.\ndef extract_singly(test_list):\n    # Define a function to extract elements that occur singly\n    def extract_singly_helper(lst):\n        # Initialize a list to store the extracted elements\n        singly_list = []\n        # Loop through the list and extract elements that occur singly\n        for elem in lst:\n            if elem not in singly_list:\n                singly_list.append(elem)\n        # Return the extracted elements\n        return singly_list\n    # Call the function to extract elements that occur singly\n    return extract_singly_helper(test_list)\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to sort a list of elements using pancake sort.\ndef pancake_sort(nums):\n    # Initialize the first and last indices\n    first, last = 0, len(nums) - 1\n    \n    # Loop through the list\n    while first < last:\n        # Find the middle index\n        mid = (first + last) // 2\n        \n        # If the current element is greater than the next element, swap them\n        if nums[mid] > nums[mid+1]:\n            temp = nums[mid]\n            nums[mid] = nums[mid+1]\n            nums[mid+1] = temp\n            \n        # If the current element is smaller than the next element, swap them\n        else:\n            break\n        \n        # Update the first and last indices\n        first = mid+1\n        last = mid\n        \n    # Return the sorted list\n    return nums\n\n# Test the function\nnums = [5, 3, 1, 9, 8]\nsorted_nums = pancake_sort(nums)"], ["\n# <func> # Python \n# Write a function to count the same pair in three given lists.\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for I in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find number of lists present in the given tuple.\ndef find_lists(Input):\n    # Write your code here.\n    count = 0\n    for I in Input:\n        if type(i) == tuple:\n            count += find_lists(i)\n    return count\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to find the sum of absolute differences in all pairs of the given array.\ndef sum_Pairs(arr,n):\n    sum = 0\n    for I in range(n):\n        for j in range(i+1,n):\n            diff = abs(arr[i] - arr[j])\n            if diff > 0:\n                sum += diff\n    return sum\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nn = len(arr)"], ["\n# <func> # Python \n# Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr,n):\n    max_diff = 0\n    for I in range(n):\n        for j in range(i+1,n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n# Testing the function\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nmax_diff = max_Abs_Diff(arr,n)"], ["\n# <func> # Python \n# Write a function to find the ascii value of total characters in a string.\ndef ascii_value_string(str1):\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Count the number of characters in the string\n    count = len(str1)\n    # Initialize the ascii value to 0\n    ascii_value = 0\n    # Loop through each character in the string\n    for char in str1:\n        # Convert the character to an ascii code\n        ascii_value += ord(char)\n    # Return the ascii value\n    return ascii_value\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to find the maximum total path sum in the given triangle.\ndef max_path_sum(tri, m, n):\n    # Initialize max sum to 0\n    max_sum = 0\n    \n    # Traverse the triangle\n    for I in range(m):\n        for j in range(n):\n            # Calculate the sum of the sub-triangle\n            sub_sum = tri[i][j] + max_path_sum(tri, i+1, n)\n            \n            # Update the max sum\n            max_sum = max(max_sum, sub_sum)\n            \n    return max_sum\n\n# Example usage\nmax_path_sum([[1, 3, 5], [2, 4, 6], [7, 8, 9]], 3, 3) # Output: 12"], ["\n# <func> # Python \n# Write a function to divide a number into two parts such that the sum of digits is maximum.\ndef sum_digits_single(x):\n    # Your code here\n    return x\n\n# Example usage\nsum_digits_single(12345) # Output: 5\nsum_digits_single(123456) # Output: 6\nsum_digits_single(1234567) # Output: 7\nsum_digits_single(12345678) # Output: 8\nsum_digits_single(123456789) # Output: 9"], ["\n# <func> # Python \n# Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\ndef longest_subseq_with_diff_one(arr, n):\n    # Initialize the length of longest subsequence to 1\n    max_len = 1\n    \n    # Loop through the array\n    for I in range(n):\n        # Loop through the array from the left to the right\n        for j in range(i+1, n):\n            # If the difference between the adjacent elements is 1, update the length of the longest subsequence\n            if arr[i] - arr[j] == 1:\n                max_len = max(max_len, j-i+1)\n                \n    return max_len\n\n# Example usage\narr = [1, 2, 3, 4, 5]\nn = len(arr)"], ["\n# <func> # Python \n# Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c):\n    if a>b:\n        if a>c:\n            return True\n        else:\n            return False\n    else:\n        if a>b:\n            return False\n        else:\n            return True\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to check whether the given number is co-prime or not.\ndef gcd(p,q):\n    while q!=0:\n        temp = q\n        q = p % q\n        p = temp\n    return p\n\n# Example usage:\nnum = 10\nis_co_prime = gcd(num, num)"], ["\n# <func> # Python \n# Write a function to sort the given array by using merge sort.\ndef merge(a,b):\n    n1 = len(a)\n    n2 = len(b)\n    n = n1 + n2\n    c = []\n    for I in range(n):\n        if a[i] < b[i]:\n            c.append(a[i])\n        else:\n            c.append(b[i])\n    return c\n\n# Testing the function\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8, 10]\nsorted_arr1 = merge(arr1, arr2)"], ["\n# <func> # Python \n# Write a function to find the vertex of a parabola.\ndef parabola_vertex(a, b, c):\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n\n    # Check if the discriminant is negative\n    if disc < 0:\n        # If it is, return the value of (-b/2)\n        return (-b/2)\n\n    # If it is positive, find the root of the quadratic equation\n    if disc > 0:\n        # Calculate the roots using the quadratic formula\n        x1 = (-b + sqrt(disc)) / (2*a)\n        x2 = (-b - sqrt(disc)) / (2*a)\n\n        # Check if the roots are inside the parabola\n        if x1**2 + c**2 < b**2:\n            return x1\n        else:\n            return x2\n\n    # If the discriminant is zero, return the value of (-b/2)\n    return (-b/2)\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\n    # Define the function signature\n    def specified_element(nums, N):\n        # Define the function body\n        return [num for num in nums if num == N]\n    return specified_element(nums, N)\n\n# Test the function\nnums = [1, 2, 3, 4, 5]\nN = 3"], ["\n# <func> # Python \n# Write a python function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n):\n    # Your code here\n    return n\n\n# Example usage\neven_bit_toggle_number(123) # Output: 24\neven_bit_toggle_number(1234) # Output: 16\neven_bit_toggle_number(12345) # Output: 5\neven_bit_toggle_number(123456) # Output: 1\neven_bit_toggle_number(1234567) # Output: 7\neven_bit_toggle_number(12345678) # Output: 1\neven_bit_toggle_number(123456789) # Output: 9\neven_bit_toggle_number(1234567890) # Output: 0\neven_bit_toggle_number(12345678901) # Output: 1\neven_bit_toggle_number(123456789012) # Output: 2\neven_bit_toggle_number(1234567890123) # Output: 3\neven_bit_toggle_number(12345678901234) # Output: 4\neven_bit_toggle_number(123456789012345) # Output: 5\neven_bit_toggle_number(1234567890123456) # Output: 6\neven_bit_toggle_number(12345678901234567) # Output: 7\neven_bit_toggle_number(123456789012345678) # Output: 8\neven_bit_toggle_number(1234567890123456789) # Output: 9\neven_bit_toggle_number(123456"], ["\n# <func> # Python \n# Write a function to convert a tuple of string values to a tuple of integer values.\ndef tuple_int_str(tuple_str):\n    # Convert each string to integer\n    int_str = tuple(map(int, tuple_str))\n    # Convert integer to tuple of integers\n    return tuple(int_str)\n\n# Example usage"], ["from itertools import groupby\r\n\n# <func> # Python \n# Write a function to reflect the run-length encoding from a list.\ndef encode_list(list1):\n    # Initialize a dictionary to store the run-lengths\n    run_length_dict = {}\n    # Initialize a list to store the encoded list\n    encoded_list = []\n    # Iterate through the list\n    for I in range(len(list1)):\n        # If the current element is not the first element, add it to the run-length dictionary\n        if I != 0:\n            run_length_dict[i] = run_length_dict.get(i, 0) + 1\n        # If the current element is the first element, add it to the encoded list\n        else:\n            encoded_list.append(list1[i])\n    # Return the encoded list and the run-length dictionary\n    return encoded_list, run_length_dict\n\n# Example usage\nencoded_list, run_length_dict = encode_list([1, 2, 3, 4, 5])"], ["\n# <func> # Python \n# Write a python function to find k number of operations required to make all elements equal.\ndef min_Ops(arr,n,k):\n    # Base case: if k is 0, return the number of operations\n    if k == 0:\n        return len(arr)\n    \n    # Recursive case: find the minimum number of operations required to make all elements equal\n    min_ops = min(arr)\n    for I in range(k):\n        min_ops += min_ops(arr[i:],n-1,k-1)\n    \n    return min_ops\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nk = 2"], ["\n# <func> # Python \n# Write a function to print the season for the given month and day.\ndef month_season(month,days):\n    if month == 1:\n        if days == 29:\n            return \"spring\"\n        elif days == 28:\n            return \"spring\"\n        else:\n            return \"spring\"\n    elif month == 2:\n        if days == 29:\n            return \"spring\"\n        elif days == 28:\n            return \"spring\"\n        else:\n            return \"spring\"\n    elif month == 3:\n        if days == 31:\n            return \"spring\"\n        elif days == 30:\n            return \"spring\"\n        else:\n            return \"spring\"\n    elif month == 4:\n        if days == 31:\n            return \"spring\"\n        elif days == 30:\n            return \"spring\"\n        else:\n            return \"spring\"\n    elif month == 5:\n        if days == 31:\n            return \"spring\"\n        elif days == 30:\n            return \"spring\"\n        else:\n            return \"spring\"\n    elif month == 6:\n        if days == 31:\n            return \"spring\"\n        elif days == 30:\n            return \"spring\"\n        else:\n            return \"spring\"\n    elif month == 7:\n        if days == 31:\n            return \"spring\"\n        elif days == 30:\n            return \"spring\"\n        else:\n            return \"spring\"\n    elif month == 8:\n        if days == 31:\n            return \"spring\"\n        elif days == 30:\n            return \"spring\"\n        else:\n            return \"spring\"\n    elif month == 9:\n        if days == 31:\n            return \"spring\"\n        elif days == 30:\n            return \"spring\"\n        else:\n            return \"spring\"\n    elif month == 10:\n        if days == 31:\n            return \"spring\"\n        elif days == 30:\n            return \"spring\"\n        else:\n"], ["\n# <func> # Python \n# Write a function to find x and y that satisfies ax + by = n.\ndef solution (a, b, n):\n    x = a / n\n    y = b / n\n    return x, y\n\n# Testing the function"], ["\n# <func> # Python \n# Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\n    # Create a new list to store the elements that are present in list2\n    new_list = []\n    \n    # Loop through the elements in list1 and check if they are present in list2\n    for element in list1:\n        if element in list2:\n            # If the element is present in list2, add it to the new list\n            new_list.append(element)\n    \n    # Return the new list\n    return new_list\n\n# Example usage\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 3, 4, 5, 6]"], ["\n# <func> # Python \n# Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\ndef sum_series(n):\n    sum = 0\n    for I in range(n):\n        sum += i\n    return sum\n\n# Test the function with some examples"], ["from math import tan, pi\r\n\n# <func> # Python \n# Write a function to calculate the area of a regular polygon.\ndef area_polygon(s,l):\n    # Define the polygon shape\n    if s == 0:\n        return 0\n    elif l == 0:\n        return 0\n    else:\n        # Calculate the area of the polygon\n        area = s * l\n        return area\n\n# Test the function with different values of s and l"], ["import math \r\n\n# <func> # Python \n# Write a python function to check whether the sum of divisors are same or not.\ndef divSum(n):\n    # Define the function to check if a number is divisible by any of its divisors.\n    def divisor(n):\n        # Define the function to check if a number is divisible by any of its divisors.\n        if n <= 1:\n            return False\n        elif n % 2 == 0:\n            return False\n        else:\n            return True\n\n    # Define the function to check if a number is divisible by any of its divisors.\n    def divisor(n):\n        # Define the function to check if a number is divisible by any of its divisors.\n        if n <= 1:\n            return False\n        elif n % 2 == 0:\n            return False\n        else:\n            return True\n\n    # Define the function to check if a number is divisible by any of its divisors.\n    def divisor(n):\n        # Define the function to check if a number is divisible by any of its divisors.\n        if n <= 1:\n            return False\n        elif n % 2 == 0:\n            return False\n        else:\n            return True\n\n    # Define the function to check if a number is divisible by any of its divisors.\n    def divisor(n):\n        # Define the function to check if a number is divisible by any of its divisors.\n        if n <= 1:\n            return False\n        elif n % 2 == 0:\n            return False\n        else:\n            return True\n\n    # Define the function to check if a number is divisible by any of its divisors.\n    def divisor(n):\n        # Define the function to check if a number is divisible by any of its divisors.\n        if n <= 1:\n            return False\n        elif n % 2 == 0:\n            return False\n        else:\n            return True\n\n    # Define the function to check if a number is divisible by any of its divisors.\n    def divisor(n):\n        # Define the function to check if a number is divisible"], ["\n# <func> # Python \n# Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\ndef count_char_position(str1):\n    count = 0\n    for char in str1:\n        if char.isalpha():\n            count += 1\n    return count\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to count the pairs with xor as an even number.\ndef find_even_Pair(A,N):\n    count = 0\n    for I in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] == 1:\n                count += 1\n    return count\n\n# Testing the function"], ["\n# <func> # Python \n# Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n):\n    # Base case: if n is 1, return 1\n    if n == 1:\n        return 1\n    # Recursive case: find the next power of 2 greater than or equal to n\n    return 2 ** (next_Power_Of_2(n - 1))\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to find the frequency of a number in a given array.\ndef frequency(a,x):\n    count = 0\n    for I in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n\n# Example usage:\narr = [1, 2, 3, 4, 5]"], ["\n# <func> # Python \n# Write a function to calculate the nth pell number.\ndef get_pell(n):\n    # Define the Pell equation\n    a = 1\n    b = n\n    while b > 1:\n        # Calculate the root of the equation\n        root = (a**2 - b) // (2*a)\n        # Check if the root is less than the nth root of unity\n        if root < n:\n            # If the root is less than the nth root of unity, swap a and b\n            a, b = b, a\n        # Update the roots\n        a, b = b, root\n    return a\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to find sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through the list\n    for I in range(m, n+1):\n        # Check if the current index is in the list\n        if list1[i] in range(m, n+1):\n            # Add the current index to the sum\n            sum += list1[i]\n    \n    return sum\n\n# Example usage\nsum_range_list([1, 2, 3, 4, 5], 2, 4) # Output: 15"], ["import math\r\n\n# <func> # Python \n# Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n    # Calculate the length of each side of the pentagon.\n    length_a = math.sqrt(a * (a - 1) * (a - 2) * (a - 3) * (a - 4))\n    # Calculate the perimeter of the pentagon.\n    perimeter = 5 * length_a\n    return perimeter\n\n# Call the function with the input values.\nperimeter_pentagon(5) # Output: 20\nperimeter_pentagon(10) # Output: 25\nperimeter_pentagon(15) # Output: 30"], ["\n# <func> # Python \n# Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef count_occurance(s):\n    count = 0\n    for char in s:\n        if char == 'std':\n            count += 1\n    return count\n\n# Example usage"], ["import re\r\n\n# <func> # Python \n# Write a function to remove everything except alphanumeric characters from a string.\ndef remove_splchar(text):\n    return ''.join(c for c in text if c.isalnum())\n\n# Example usage:\ntext = 'This is a test string with some special characters.'"], ["\n# <func> # Python \n# Write a function to group a sequence of key-value pairs into a dictionary of lists.\ndef group_keyvalue(l):\n    # Initialize a dictionary to store the key-value pairs\n    d = {}\n    # Iterate over the list and add each key-value pair to the dictionary\n    for key, value in l:\n        if key not in d:\n            d[key] = []\n        d[key].append(value)\n    return d\n\n# Example usage\nl = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\nd = group_keyvalue(l)"], ["\n# <func> # Python \n# Write a function to verify validity of a string of parentheses.\ndef is_valid_parenthese( str1):\n    # Check if the string is empty\n    if not str1:\n        return False\n    \n    # Check if the string contains only parentheses\n    for I in range(len(str1)):\n        if str1[i] not in '()':\n            return False\n    \n    # Check if the string has no repeating parentheses\n    for I in range(len(str1)-1):\n        if str1[i] != str1[i+1]:\n            return False\n    \n    return True\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to find the perimeter of a triangle.\ndef perimeter_triangle(a,b,c):\n    return 2*(a+b+c)\n\n# Call the function with the three sides of a triangle\nperimeter = perimeter_triangle(a,b,c)"], ["\n# <func> # Python \n# Write a python function to find two distinct numbers such that their lcm lies within the given range.\ndef answer(L,R):\n    # define the function\n    def lcm(a,b):\n        return a*b // gcd(a,b)\n    # define the function to find the gcd\n    def gcd(a,b):\n        while b != 0:\n            a,b = b, a % b\n        return a\n    # define the function to find the lcm\n    def lcm_find(a,b):\n        return a*b // gcd(a,b)\n    # define the function to find the lcm of two numbers\n    def lcm_find_two(a,b):\n        return lcm(a,b)\n    # define the function to find the lcm of two numbers with the given range\n    def lcm_find_with_range(a,b,L,R):\n        if a < L:\n            return lcm_find_two(a,L)\n        elif b < R:\n            return lcm_find_two(R,b)\n        else:\n            return lcm_find(a,b)\n    # define the function to find the lcm of two numbers with the given range\n    def lcm_find_with_range_two(a,b,L,R):\n        if a < L:\n            return lcm_find_two(a,L)\n        elif b < R:\n            return lcm_find_two(R,b)\n        else:\n            return lcm_find_with_range(a,b,L,R)\n    # define the function to find the lcm of two numbers with the given range\n    def lcm_find_with_range_three(a,b,L,R):\n        if a < L:\n            return lcm_find_two(a,L)\n        elif b < R:\n            return lcm_find_two(R,b)\n        elif a < b:\n            return lcm_find_with_range(a,b,L,R)\n        else:\n            return lcm_find_"], ["import re\r\n\n# <func> # Python \n# Write a function to search some literals strings in a string.\ndef string_literals(patterns,text):\n    \"\"\"\n    This function takes a list of patterns and a string as input. It returns a list of strings that match the patterns in the string.\n    \"\"\"\n    matches = []\n    for pattern in patterns:\n        match = re.search(pattern,text)\n        if match:\n            matches.append(match.group())\n    return matches\n\n# Example usage:\ntext = \"This is a test string with some literals: 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,1"], ["\n# <func> # Python \n# Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x):\n    # Write your code here.\n    if x % 10 == 0:\n        return False\n    else:\n        return True\n\n# Example usage:"], ["from math import radians, sin, cos, acos\r\n\n# <func> # Python \n# Write a function to calculate distance between two points using latitude and longitude.\ndef distance_lat_long(slat,slon,elat,elon):\n    # Convert latitude and longitude to radians\n    slat = radians(slat)\n    slon = radians(slon)\n    elat = radians(elat)\n    elon = radians(elon)\n    \n    # Calculate distance in kilometers\n    dlat = slat - elat\n    dlon = slon - elon\n    a = sin(dlat/2)**2 + cos(slat) * cos(elat) * sin(dlon/2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1-a))\n    distance = 6371 * c\n    return distance\n\n# Example usage:\ndistance_lat_long(37.775, -122.419, 37.775, -122.419)\n# Output: 34.818999999999995\n\n# Testing the function with different input values:"], ["\n# <func> # Python \n# Write a function to find the longest common prefix in the given set of strings.\ndef common_prefix_util(str1, str2):\n    # Initialize the longest common prefix as \"\"\n    longest_common_prefix = \"\"\n    \n    # Loop through the strings and compare each character to the longest common prefix\n    for I in range(len(str1)):\n        if str1[i] == str2[i]:\n            # If the characters match, append the current character to the longest common prefix\n            longest_common_prefix += str1[i]\n            \n    # Return the longest common prefix\n    return longest_common_prefix\n\n# Example usage"], ["import re\r\n\n# <func> # Python \n# Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n    # Regular expression to find uppercase, lowercase, special characters, and numeric values\n    pattern = r'[A-Za-z0-9]+'\n    # Matches all characters except for whitespace and punctuation\n    return re.findall(pattern, string)\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to count all the distinct pairs having a difference of k in any array.\ndef count_pairs(arr, n, k):\n    count = 0\n    for I in range(n):\n        for j in range(i+1, n):\n            if arr[i] - arr[j] == k:\n                count += 1\n    return count\n\n# Example usage\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nk = 2"], ["\n# <func> # Python \n# Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n    greater_list = []\n    for num in list:\n        if num > num:\n            greater_list.append(num)\n    return greater_list\n\n# Example usage:\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]"], ["\n# <func> # Python \n# Write a function to find the focus of a parabola.\ndef parabola_focus(a, b, c):\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is negative\n    if discriminant < 0:\n        raise ValueError(\"Parabola has no focus.\")\n\n    # Calculate the roots of the quadratic equation\n    root1 = (-b + np.sqrt(discriminant)) / (2*a)\n    root2 = (-b - np.sqrt(discriminant)) / (2*a)\n\n    # Check if the roots are real\n    if root1 < 0 or root2 < 0:\n        raise ValueError(\"Parabola has no focus.\")\n\n    # Calculate the focus\n    focus = root1 + root2\n\n    # Return the focus\n    return focus\n\n# Example usage\na = 1\nb = 2\nc = 3\n\nfocus = parabola_focus(a, b, c)"], ["import re\r\n\n# <func> # Python \n# Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n    # Create a regular expression object to search for literals in the text.\n    regex = re.compile(r'\\b(' + '|'.join(patterns) + r')\\b')\n    # Use the regex object to search for literals in the text.\n    matches = regex.findall(text)\n    # Return a list of matches if any.\n    return matches\n\n# Example usage:\ntext = \"This is a test string with some literals: 123, 456, 789\"\npatterns = [\"\\b(123|456|789)\\b\", \"\\b(123|456|789)\\b\"]\nmatches = check_literals(text, patterns)"], ["\n# <func> # Python \n# Write a function to find the longest common subsequence for the given two sequences.\ndef longest_common_subsequence(X, Y, m, n):\n    # Initialize the lengths of the two sequences\n    L = [0] * (n + 1)\n    for I in range(1, m + 1):\n        L[i] = max(L[i - 1], L[i])\n    # Initialize the lengths of the two substrings\n    L[0] = 1\n    L[1] = 1\n    for I in range(2, n + 1):\n        L[i] = max(L[i - 1], L[i])\n    # Initialize the lengths of the substrings\n    L[1] = 1\n    L[2] = 1\n    for I in range(3, m + 1):\n        L[i] = max(L[i - 1], L[i])\n        L[i] = max(L[i], L[i - 1] + 1)\n    # Initialize the lengths of the substrings\n    L[m] = 1\n    L[m + 1] = 1\n    for I in range(m + 2, n + 1):\n        L[i] = max(L[i - 1], L[i])\n        L[i] = max(L[i], L[i - 1] + 1)\n    # Find the longest common subsequence\n    L[n] = 1\n    L[n + 1] = 1\n    for I in range(n + 2, m + 1):\n        L[i] = max(L[i - 1], L[i])\n        L[i] = max(L[i], L[i - 1] + 1)\n    # Return the length of the longest common subsequence\n    return L[n]\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to check whether the given number can be represented by product of two squares or not.\ndef prod_Square(n):\n    # Write your code here\n    if n == 0:\n        return False\n    elif n % 2 == 0:\n        return prod_Square(n // 2)\n    else:\n        return True\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n):\n    # initialize sum to 0\n    sum = 0\n    # initialize count to 0\n    count = 0\n    # initialize max to the first element\n    max_element = arr[0]\n    # initialize min to the first element\n    min_element = arr[0]\n    # initialize max_index to the first index\n    max_index = 0\n    # initialize min_index to the first index\n    min_index = 0\n    # initialize max_sum to the first sum\n    max_sum = 0\n    # initialize min_sum to the first sum\n    min_sum = 0\n    # initialize max_count to the first count\n    max_count = 0\n    # initialize min_count to the first count\n    min_count = 0\n    # initialize max_index_count to the first count\n    max_index_count = 0\n    # initialize min_index_count to the first count\n    min_index_count = 0\n    # initialize max_sum_count to the first count\n    max_sum_count = 0\n    # initialize min_sum_count to the first count\n    min_sum_count = 0\n    # initialize max_count_index to the first index\n    max_count_index = 0\n    # initialize min_count_index to the first index\n    min_count_index = 0\n    # initialize max_index_sum to the first sum\n    max_index_sum = 0\n    # initialize min_index_sum to the first sum\n    min_index_sum = 0\n    # initialize max_sum_index to the first index\n    max_sum_index = 0\n    # initialize min_sum_index to the first index\n    min_sum_index = 0\n    # initialize max_index_count_sum to the first sum\n    max_index_count_sum = 0\n    # initialize min_index_count_sum to the first sum\n    min_index_count_sum = 0\n    # initialize max_sum_index_"], ["\n# <func> # Python \n# Write a python function to count the number of integral co-ordinates that lie inside a square.\ndef count_Intgral_Points(x1,y1,x2,y2):\n    count = 0\n    for x in range(x1,x2+1):\n        for y in range(y1,y2+1):\n            if x*x + y*y <= 1:\n                count += 1\n    return count\n\n# Example usage:\ncount_Intgral_Points(1,2,3,4) # Output: 2"], ["\n# <func> # Python \n# Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\n    if monthname3 == \"January\":\n        return 31\n    elif monthname3 == \"February\":\n        return 28\n    elif monthname3 == \"March\":\n        return 31\n    elif monthname3 == \"April\":\n        return 30\n    elif monthname3 == \"May\":\n        return 31\n    elif monthname3 == \"June\":\n        return 30\n    elif monthname3 == \"July\":\n        return 31\n    elif monthname3 == \"August\":\n        return 31\n    elif monthname3 == \"September\":\n        return 30\n    elif monthname3 == \"October\":\n        return 31\n    elif monthname3 == \"November\":\n        return 30\n    elif monthname3 == \"December\":\n        return 31\n    else:\n        return 0\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to check whether a string has atleast one letter and one number.\ndef check_String(str):\n    if len(str) < 2:\n        return False\n    if not all(char.isalpha() for char in str):\n        return False\n    if not all(char.isdigit() for char in str):\n        return False\n    return True\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to remove the duplicates from the given tuple.\ndef remove_tuple(test_tup):\n    # Your code here\n    return tuple(list(set(test_tup)))\n\n# Example usage\ntest_tup = (1, 2, 3, 4, 5)"], ["\n# <func> # Python \n# Write a python function to convert octal number to decimal number.\ndef octal_To_Decimal(n):\n    # Convert octal number to decimal number\n    decimal_num = 0\n    for I in range(len(n)):\n        decimal_num += int(n[i]) * (2 ** (len(n) - 1 - i))\n    return decimal_num\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n):\n    # base case: if n is 0, return x\n    if n == 0:\n        return x\n    # base case: if n is 1, return x\n    elif n == 1:\n        return arr[0]\n    # recursive case: find the first position of x in the sorted array\n    else:\n        mid = n // 2\n        if arr[mid] < x:\n            return first(arr,arr[mid],n-mid)\n        else:\n            return first(arr,arr[mid+1],n-mid-1)\n\n# test function\narr = [1,2,3,4,5,6,7,8,9]\nx = 3\nn = len(arr)"], ["\n# <func> # Python \n# Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n    return [item for item in test_list if len(item) <= K]\n\n# Example usage\ntest_list = [('apple', 1), ('banana', 2), ('cherry', 3), ('orange', 4), ('pear', 5)]"], ["\n# <func> # Python \n# Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n    # Check if the two tuples are of the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n    \n    # Initialize the result to 1\n    result = 1\n    \n    # Loop through each element of the first tuple\n    for I in range(len(test_tup1)):\n        # Calculate the exponent of the current element\n        exponent = test_tup1[i]\n        \n        # If the exponent is not a power of 2, raise an error\n        if exponent % 2 != 0:\n            raise ValueError(\"The exponent must be a power of 2\")\n        \n        # Calculate the product of the current element and the previous exponent\n        product = test_tup1[i] * exponent\n        \n        # Update the result with the product\n        result *= product\n        \n    # Return the result\n    return result\n\n# Example usage\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (2, 4, 8)\nresult = find_exponentio(test_tup1, test_tup2)"], ["import math\r\n\n# <func> # Python \n# Write a function to find the largest triangle that can be inscribed in an ellipse.\ndef largest_triangle(a,b):\n    # Calculate the area of the ellipse\n    area = math.pi * a * b\n    \n    # Calculate the perimeter of the ellipse\n    perimeter = 2 * math.pi * a + 2 * math.pi * b\n    \n    # Calculate the area of the triangle\n    triangle_area = math.pi * (a + b)\n    \n    # Calculate the ratio of the perimeter to the area of the triangle\n    ratio = perimeter / triangle_area\n    \n    # Return the largest triangle with the largest ratio\n    return max(ratio, area)\n\n# Example usage\nlargest_triangle(3,4) # Output: 3.0\nlargest_triangle(5,6) # Output: 5.0\nlargest_triangle(7,8) # Output: 7.0\nlargest_triangle(9,10) # Output: 9.0"], ["\n# <func> # Python \n# Write a python function to find highest power of 2 less than or equal to given number.\ndef highest_Power_of_2(n):\n    # Write your code here.\n    return n\n\n# Example usage\nhighest_power_of_2(10) # Output: 2\nhighest_power_of_2(20) # Output: 4\nhighest_power_of_2(30) # Output: 8\nhighest_power_of_2(40) # Output: 16\nhighest_power_of_2(50) # Output: 32\nhighest_power_of_2(60) # Output: 64\nhighest_power_of_2(70) # Output: 128\nhighest_power_of_2(80) # Output: 256\nhighest_power_of_2(90) # Output: 512\nhighest_power_of_2(100) # Output: 1024\nhighest_power_of_2(110) # Output: 2048\nhighest_power_of_2(120) # Output: 4096\nhighest_power_of_2(130) # Output: 8192\nhighest_power_of_2(140) # Output: 16384\nhighest_power_of_2(150) # Output: 32768\nhighest_power_of_2(160) # Output: 65536\nhighest_power_of_2(170) # Output: 131072\nhighest_power_of_2(180) # Output: 262144\nhighest_power_of_2(190) # Output: 524288\nhighest_power_of_2(200) # Output: 1048576\nhighest_power_of_2(210) # Output: 2097152\nhigh"], ["\n# <func> # Python \n# Write a function to find all index positions of the maximum values in a given list.\ndef position_max(list1):\n    # Initialize the maximum value to None\n    max_val = None\n    \n    # Loop through the list\n    for I in range(len(list1)):\n        # If the current element is greater than the maximum value, update the maximum value\n        if list1[i] > max_val:\n            max_val = list1[i]\n            \n    # Return the index positions of the maximum value\n    return [i for I, val in enumerate(list1) if val == max_val]\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to check whether the elements in a list are same or not.\ndef chkList(lst):\n    if len(lst) == 0:\n        return True\n    else:\n        return lst[0] == lst[-1]\n\n# Example usage\nlst = [1, 2, 3, 4, 5]"], ["\n# <func> # Python \n# Write a function to remove even characters in a string.\ndef remove_even(str1):\n    # Your code here\n    return str1\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2):\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop through the binary representation of n1\n    for I in range(8):\n        # If the bit at position I is 1, increment the count\n        if n1 & (1 << i):\n            count += 1\n    \n    # Loop through the binary representation of n2\n    for I in range(8):\n        # If the bit at position I is 1, increment the count\n        if n2 & (1 << i):\n            count += 1\n    \n    # Return the hamming distance\n    return count\n\n# Example usage\nhamming_Distance(1,2) # Output: 1\nhamming_Distance(3,4) # Output: 2\nhamming_Distance(5,6) # Output: 3\nhamming_Distance(7,8) # Output: 4\nhamming_Distance(9,10) # Output: 5\nhamming_Distance(11,12) # Output: 6\nhamming_Distance(13,14) # Output: 7\nhamming_Distance(15,16) # Output: 8\nhamming_Distance(17,18) # Output: 9\nhamming_Distance(19,20) # Output: 10\nhamming_Distance(21,22) # Output: 11\nhamming_Distance(23,24) # Output: 12\nhamming_Distance(25,26) # Output: 13\nhamming_Distance(27,28) # Output: 14\nhamming_Distance(29,30) # Output: 15\nhamming_Distance(31,32) # Output: 16\nhamming_Distance(33,34) # Output: 17\nhamming_Distance(35,36) # Output: 18\nhamming_Distance(37,38) # Output: 19\nhamming"], ["\n# <func> # Python \n# Write a python function to count the occurrence of a given character in a string.\ndef count(s,c):\n    count = 0\n    for I in range(len(s)):\n        if s[i] == c:\n            count += 1\n    return count\n\n# Example usage:\ns = \"Hello, world!\"\nc = \"o\""], ["\n# <func> # Python \n# Write a function to find the inversions of tuple elements in the given tuple list.\ndef inversion_elements(test_tup):\n    # Initialize an empty list to store the inversions\n    inversions = []\n    \n    # Loop through the tuple list and check if any tuple element is an inversion\n    for I in range(len(test_tup)):\n        if test_tup[i] > test_tup[i+1]:\n            inversions.append(test_tup[i])\n    \n    # Return the inversions\n    return inversions\n\n# Example usage\ntest_tup = (1, 2, 3, 4, 5)\ninversions = inversion_elements(test_tup)"], ["\n# <func> # Python \n# Write a function to perform the adjacent element concatenation in the given tuples.\ndef concatenate_elements(test_tup):\n    # Write your code here.\n    return tuple(map(lambda x: x[0] + x[1], zip(*test_tup)))\n\n# Example usage\ntest_tup = [(1, 2), (3, 4), (5, 6)]\nresult = concatenate_elements(test_tup)"], ["\n# <func> # Python \n# Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\ndef find_longest_repeating_subseq(str):\n    # Initialize a list to store the longest repeating subsequence\n    longest_repeating_subseq = []\n    \n    # Iterate over the string and store the longest repeating subsequence\n    for I in range(len(str)):\n        for j in range(i+1, len(str)):\n            if str[i] == str[j]:\n                if longest_repeating_subseq:\n                    longest_repeating_subseq[-1] += str[i]\n                else:\n                    longest_repeating_subseq = [str[i]]\n                break\n    \n    # Return the longest repeating subsequence\n    return longest_repeating_subseq\n\n# Example usage"], ["import re\r\n\n# <func> # Python \n# Write a function to check the given decimal with a precision of 2 by using regex.\ndef is_decimal(num):\n    # Regular expression to check if the number is a decimal or not.\n    regex = r'^[0-9]+(\\.[0-9]+)?$'\n    # Check if the number is a decimal or not.\n    return re.match(regex, num) is not None\n\n# Example usage:"], ["import heapq as hq\r\n\n# <func> # Python \n# Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n    # Find the smallest element in the heap\n    smallest = heapq.heappop(heap)\n    # Insert the new item at the end of the heap\n    heapq.heappush(heap,a)\n    # Re-sort the heap using the smallest element as the new root\n    heapq.heapify(heap)\n\n# Example usage\nheap = [10, 5, 8, 1, 3, 7]\nheap_replace(heap, 15)"], ["import re\r\n\n# <func> # Python \n# Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\ndef is_allowed_specific_char(string):\n    allowed_chars = 'a-z0-9'\n    return re.match(r'\\w{', string)\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n):\n    count = 0\n    for I in range(1, 32):\n        if n & (1 << I) != 0:\n            count += 1\n    return count\n\n# Example usage:\nnum = 1000000000\ncount = count_Num(num)"], ["import math  \r\n\n# <func> # Python \n# Write a python function to find the sum of fourth power of n natural numbers.\ndef fourth_Power_Sum(n):\n    sum = 1\n    for I in range(1, n+1):\n        sum += i**4\n    return sum\n\n# Call the function with n = 10"], ["\n# <func> # Python \n# Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n    return test_tup1[0] + test_tup2[0]\n\n# Call the function with the two input tuples."], ["import math\r\n\n# <func> # Python \n# Write a function to convert radians to degrees.\ndef degree_radian(radian):\n    return radian * 180 / math.pi\n\n# Test the function with some examples"], ["\n# <func> # Python \n# Write a function to decode a run-length encoded given list.\ndef decode_list(alist):\n    # Convert the list to a dictionary\n    d = {}\n    for I in range(len(alist)):\n        # Check if the current element is already in the dictionary\n        if alist[i] not in d:\n            # If not, add the current element to the dictionary\n            d[alist[i]] = 1\n        else:\n            # If it is, increment the count\n            d[alist[i]] += 1\n    # Convert the dictionary to a list\n    return [d[k] for k in d]\n\n# Example usage\ndecoded_list = decode_list([1, 2, 3, 4, 5])"], ["\n# <func> # Python \n# Write a function to check if a nested list is a subset of another nested list.\ndef check_subset_list(list1, list2):\n    # Check if the first list is empty\n    if not list1:\n        return True\n    \n    # Check if the second list is empty\n    if not list2:\n        return True\n    \n    # Check if the first list is a subset of the second list\n    for I in range(len(list1)):\n        if not list1[i] in list2:\n            return False\n    \n    return True\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str):\n    # Your code here\n    return str[0]\n\n# Example usage"], ["import math   \r\n\n# <func> # Python \n# Write a python function to find the minimum operations required to make two numbers equal.\ndef min_Operations(A,B):\n    # Define a variable to store the minimum number of operations\n    min_ops = 0\n    # Loop through each element in the first array\n    for I in range(len(A)):\n        # Calculate the difference between the current element in the first array and the current element in the second array\n        diff = A[i] - B[i]\n        # Check if the difference is equal to zero\n        if diff == 0:\n            # If the difference is zero, then the two numbers are equal, so increment the minimum number of operations\n            min_ops += 1\n    # Return the minimum number of operations\n    return min_ops\n\n# Example usage"], ["\r\n\n# <func> # Python \n# Write a function to extract maximum and minimum k elements in the given tuple.\ndef extract_min_max(test_tup, K):\n    max_val = min_val = None\n    for I in range(len(test_tup)):\n        if max_val is None:\n            max_val = test_tup[i]\n        elif test_tup[i] > max_val:\n            max_val = test_tup[i]\n        elif test_tup[i] < min_val:\n            min_val = test_tup[i]\n    return max_val, min_val\n\n# Test the function with some examples\ntest_tup = (1, 2, 3, 4, 5)\nmax_val, min_val = extract_min_max(test_tup, 2)"], ["import re\r\n\n# <func> # Python \n# Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\ndef replace_max_specialchar(text,n):\n    # Replace special characters with a colon\n    return re.sub(r'\\s+',': ',text)\n\n# Example usage\ntext = \"123,456,789,123.456\""], ["\n# <func> # Python \n# Write a python function to find the first even number in a given list of numbers.\ndef first_even(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first even number in the list.\n    \"\"\"\n    # Initialize an empty list to store the even numbers\n    even_numbers = []\n    \n    # Loop through the list of numbers\n    for num in nums:\n        # Check if the current number is even\n        if num % 2 == 0:\n            # If the number is even, add it to the list of even numbers\n            even_numbers.append(num)\n    \n    # Return the first even number in the list\n    return even_numbers[0]\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n    for element in test_tuple:\n        if type(element) != type(tuple(element)):\n            return False\n    return True\n\n# Example usage:\ntest_tuple = (1, 2, 3)"], ["\n# <func> # Python \n# Write a function to check for majority element in the given sorted array.\ndef is_majority(arr, n, x):\n    # Initialize count to 0\n    count = 0\n    # Loop through the array\n    for I in range(n):\n        # If the current element is equal to x, increment count\n        if arr[i] == x:\n            count += 1\n    # Return the count as the majority element\n    return count\n\n# Example usage\narr = [10, 5, 10, 15, 10, 5, 10, 10, 10, 10]\nn = len(arr)\nx = 10\nmajority = is_majority(arr, n, x)"], ["\n# <func> # Python \n# Write a python function to count set bits of a given number.\ndef count_Set_Bits(n):\n    # Your code here\n    return 0"], ["\n# <func> # Python \n# Write a python function to find the minimum element in a sorted and rotated array.\ndef find_Min(arr,low,high):\n    # Base case: if the array is empty, return the minimum element\n    if low > high:\n        return arr[low]\n    \n    # Recursive case: find the minimum element in the subarray [low,mid]\n    mid = (low + high) // 2\n    if arr[mid] < arr[low]:\n        return find_Min(arr,low,mid)\n    \n    # Recursive case: find the minimum element in the subarray [mid+1,high]\n    return find_Min(arr,mid+1,high)\n\n# Example usage:\narr = [5,2,1,4,3]\nmin_idx = find_Min(arr,0,len(arr)-1)"], ["\n# <func> # Python \n# Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n    odd_indexes = []\n    for I in range(len(str)):\n        if str[i] not in 'abcdefghijklmnopqrstuvwxyz':\n            odd_indexes.append(i)\n    return ''.join(str[i] for I in odd_indexes)\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n\n# Call the function with three numbers"], ["\n# <func> # Python \n# Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    # Write your code here.\n    if n < l or n > r:\n        return False\n    if n == l:\n        return True\n    if n == r:\n        return False\n    for I in range(l,r+1):\n        if n & (1 << i):\n            return False\n    return True\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\ndef re_arrange_array(arr, n):\n    # Check if the array is empty\n    if len(arr) == 0:\n        return arr\n    \n    # Initialize the new array\n    new_arr = []\n    \n    # Loop through the original array\n    for I in range(n):\n        # Check if the current element is negative\n        if arr[i] < 0:\n            # If it is, swap it with the next positive element\n            new_arr.append(arr[i])\n            new_arr.append(arr[i+1])\n            \n    # Return the new array\n    return new_arr\n\n# Example usage\narr = [-3, 1, -5, 2, 4]\nn = 2\nre_arr = re_arrange_array(arr, n)"], ["\n# <func> # Python \n# Write a function to replace blank spaces with any character in a string.\ndef replace_blank(str1,char):\n    return str1.replace(\" \",\"\"+char)\n\n# Example usage:\nstr1 = \"   Hello   \"\nstr2 = replace_blank(str1, \" \")"], ["\n# <func> # Python \n# Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n):\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through the triangle\n    for I in range(n):\n        # Calculate the sum of the left and right sub-triangles\n        left = tri[i][0] + tri[i+1][0]\n        right = tri[i][1] + tri[i+1][1]\n        \n        # Calculate the maximum sum\n        if left > right:\n            sum = max(sum, left)\n        else:\n            sum = max(sum, right)\n            \n    # Return the maximum sum\n    return sum\n\n# Example usage\nmax_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) # Output: 10"], ["import heapq\r\n\n# <func> # Python \n# Write a function to get the n largest items from a dataset.\ndef larg_nnum(list1,n):\n    # Create a list to store the n largest numbers\n    largest = []\n    # Loop through the list and find the n largest numbers\n    for I in range(len(list1)):\n        if I >= n:\n            break\n        largest.append(list1[i])\n    # Return the list of n largest numbers\n    return largest\n\n# Example usage:\nlargest_nums = larg_nnum([1, 2, 3, 4, 5], 3)"], ["\n# <func> # Python \n# Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r,h):\n    # Calculate the lateral surface area of a cylinder\n    # using the formula: lateral surface area = 2\u03c0r^2h\n    return 2*math.pi*r**2*h\n\n# Call the function with the radius and height of the cylinder\nlateralsuface_cylinder(5,2)"], ["\n# <func> # Python \n# Write a function to find the volume of a cube.\ndef volume_cube(l):\n    return l * l * l\n\n# Call the function with a value for the length of the cube\nvolume = volume_cube(5)"], ["\n# <func> # Python \n# Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n):\n    return n & (n - 1)\n\n# Example usage:\neven_bit_set_number(123) # Output: 123\neven_bit_set_number(124) # Output: 124\neven_bit_set_number(125) # Output: 125\neven_bit_set_number(126) # Output: 126\neven_bit_set_number(127) # Output: 127"], ["\n# <func> # Python \n# Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\ndef No_of_Triangle(N,K):\n    # Define the function to count the number of equilateral triangles\n    count = 0\n    for I in range(N):\n        for j in range(K):\n            if (i+j) % 3 == 0:\n                count += 1\n    return count\n\n# Test the function"], ["from collections import Counter \r\n\n# <func> # Python \n# Write a function to check the occurrences of records which occur similar times in the given tuples.\ndef check_occurences(test_list):\n    # Initialize a counter to count the occurrences of each record\n    counter = Counter()\n    # Loop through the test_list and add the records to the counter\n    for record in test_list:\n        counter[record] += 1\n    # Return the count of occurrences of each record\n    return counter\n\n# Example usage\ntest_list = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7)]"], ["\n# <func> # Python \n# Write a python function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str):\n    count = 0\n    for I in range(len(str)):\n        if str[i] != ' ' and str[i] != '\\n' and str[i] != '\\r':\n            count += 1\n    return count\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n):\n    total_number_of_sequences = 0\n    for I in range(n):\n        for j in range(i+1,n):\n            if i*2 <= j <= m:\n                total_number_of_sequences += 1\n    return total_number_of_sequences\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to replace the last element of the list with another list.\ndef replace_list(list1,list2):\n    return [list1[0] + list2[0], list1[1] + list2[1]]\n\n# Call the function with the original list and the desired list."], ["\n# <func> # Python \n# Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n    arr = np.zeros((m,n,o))\n    for I in range(m):\n        for j in range(n):\n            for k in range(o):\n                arr[i,j,k] = \"*\";\n    return arr\n\n# Example usage:\narr = array_3d(3,4,5)"], ["\n# <func> # Python \n# Write a function to count total characters in a string.\ndef count_charac(str1):\n    count = 0\n    for char in str1:\n        count += ord(char)\n    return count\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to sort the given list based on the occurrence of first element of tuples.\ndef sort_on_occurence(lst):\n    # Create a dictionary to store the frequency of each element\n    freq = {}\n    # Loop through the list and add the frequency of each element\n    for item in lst:\n        if item[0] in freq:\n            freq[item[0]] += 1\n        else:\n            freq[item[0]] = 1\n    # Sort the dictionary in descending order based on the frequency\n    freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    # Return the sorted list\n    return lst\n\n# Example usage\nlst = [('apple', 1), ('banana', 2), ('orange', 3), ('pear', 4)]\nsorted_lst = sort_on_occurence(lst)"], ["import math  \r\n\n# <func> # Python \n# Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N):\n    # Define a function to find the next perfect square greater than a given number.\n    def next_perfect_square(n):\n        # Define a function to find the next perfect square greater than a given number.\n        def next_perfect_square(n):\n            # Define a function to find the next perfect square greater than a given number.\n            def next_perfect_square(n):\n                # Define a function to find the next perfect square greater than a given number.\n                def next_perfect_square(n):\n                    # Define a function to find the next perfect square greater than a given number.\n                    def next_perfect_square(n):\n                        # Define a function to find the next perfect square greater than a given number.\n                        def next_perfect_square(n):\n                            # Define a function to find the next perfect square greater than a given number.\n                            def next_perfect_square(n):\n                                # Define a function to find the next perfect square greater than a given number.\n                                def next_perfect_square(n):\n                                    # Define a function to find the next perfect square greater than a given number.\n                                    def next_perfect_square(n):\n                                        # Define a function to find the next perfect square greater than a given number.\n                                        def next_perfect_square(n):\n                                            # Define a function to find the next perfect square greater than a given number.\n                                            def next_perfect_square(n):\n                                                # Define a function to find the next perfect square greater than a given number.\n                                                def next_perfect_square(n):\n                                                    # Define a function to find the next perfect square greater than a given number.\n                                                    def next_perfect_square(n):\n                                                        # Define a function to find the next perfect square greater than a given number.\n                                                        def next_perfect_square(n):\n                                                            # Define a function to find the"], ["\n# <func> # Python \n# Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\ndef max_sum(arr, n):\n    # Initialize max sum to 0\n    max_sum = 0\n    \n    # Loop through the array\n    for I in range(n):\n        # Find the maximum sum of sub-sequence of length 2\n        max_sum = max(max_sum, max_sum_of_sub_sequence(arr, i, i+1))\n        \n    return max_sum\n\n# Test function with sample input and expected output"], ["\n# <func> # Python \n# Write a function for computing square roots using the babylonian method.\ndef babylonian_squareroot(number):\n    # Define the function to be used for the babylonian method\n    def babylonian_squareroot_iterative(n):\n        # Define the initial value of the square root\n        root = 0\n        # Calculate the square root using the babylonian method\n        while n > 1:\n            # Calculate the square root of the remainder when dividing n by 2\n            remainder = n % 2\n            # Calculate the square root of the remainder\n            root = (root * remainder) + n\n            # Update the value of n\n            n = remainder\n        # Return the square root\n        return root\n    # Calculate the square root using the babylonian method\n    root = babylonian_squareroot_iterative(number)\n    # Return the square root\n    return root\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to find the longest palindromic subsequence in the given string.\ndef lps(str):\n    # Initialize a list to store the longest palindromic subsequence\n    lps = []\n    # Initialize a counter to count the number of occurrences of the longest palindromic subsequence\n    count = 0\n    # Loop through the string and count the number of occurrences of the longest palindromic subsequence\n    for I in range(len(str)):\n        for j in range(i+1, len(str)):\n            if str[i] == str[j]:\n                count += 1\n                # If the count is greater than the current length of the longest palindromic subsequence,\n                # update the length of the longest palindromic subsequence\n                if count > count_max:\n                    lps = [str[i:j+1]]\n                    count_max = count\n    # Return the longest palindromic subsequence\n    return lps\n\n# Example usage\nlps(\"abcd\") # Output: ['d', 'cd', 'b']\nlps(\"abcd\") # Output: ['d', 'cd', 'b']\nlps(\"abcd\") # Output: ['d', 'cd', 'b']\nlps(\"abcd\") # Output: ['d', 'cd', 'b']\nlps(\"abcd\") # Output: ['d', 'cd', 'b']\nlps(\"abcd\") # Output: ['d', 'cd', 'b']\nlps(\"abcd\") # Output: ['d', 'cd', 'b']\nlps(\"abcd\") # Output: ['d', 'cd', 'b']\nlps(\"abcd\") # Output: ['d', 'cd', 'b']\nlps(\"abcd\") # Output: ['d', 'cd', 'b']\nlps(\"abcd\") # Output: ['d', 'cd', 'b']\nlps(\"abcd\") # Output: ['d', 'cd', 'b']\nlps(\"abcd\") # Output: ['d', 'cd', 'b']\nlps(\"abcd\") # Output: ['d', 'cd', 'b']\n"], ["\n# <func> # Python \n# Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n    # Define the sum of the first n terms of the harmonic series.\n    sum = 1\n    # Loop through the first n terms of the harmonic series.\n    for I in range(1, n+1):\n        # Calculate the sum of the terms up to and including I.\n        sum += (i * (i+1)) / 2\n    return sum\n\n# Call the function with n = 5."], ["\n# <func> # Python \n# Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n    # Define a lambda function to find the intersection of two arrays\n    def intersection(arr1,arr2):\n        return [i for I in arr1 if I in arr2]\n    return intersection(array_nums1,array_nums2)\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to count the occcurences of an element in a tuple.\ndef count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n\n# Example usage:\ntup = (1, 2, 3, 4, 5)\nx = 3"], ["\n# <func> # Python \n# Write a function to insert an element before each element of a list.\ndef insert_element(list,element):\n    new_list = []\n    for I in range(len(list)):\n        if I == 0:\n            new_list.append(element)\n        else:\n            new_list.insert(i,element)\n    return new_list\n\n# Example usage\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [6, 7, 8, 9, 10]\nlist3 = insert_element(list1, 2)"], ["import cmath  \r\n\n# <func> # Python \n# Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):\n    # Convert the input numbers to complex numbers\n    complex_numbers = [float(num) for num in numbers.split()]\n    # Calculate the real and imaginary parts of the complex numbers\n    real = complex_numbers[0]\n    imag = complex_numbers[1]\n    # Calculate the polar coordinates of the complex numbers\n    polar_coordinates = [math.sqrt(real**2 + imag**2), math.atan2(imag, real)]\n    # Return the polar coordinates as a string\n    return f\"({polar_coordinates[0]:.2f}, {polar_coordinates[1]:.2f})\"\n\n# Test the function"], ["\n# <func> # Python \n# Write a python function to count integers from a given list.\ndef count_integer(list1):\n    count = 0\n    for num in list1:\n        if type(num) == int:\n            count += 1\n    return count\n\n# Example usage"], ["import re\r\n\n# <func> # Python \n# Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\n    return [word for word in text.lower().split() if word.startswith('a') or word.startswith('e')]\n\n# Example usage:"], ["from itertools import combinations_with_replacement \r\n\n# <func> # Python \n# Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n    \"\"\"\n    This function takes three lists as input and generates all the combinations with repetitions.\n    :param l: list of lists of colours\n    :param n: number of colours to choose from\n    :return: list of lists of combinations\n    \"\"\"\n    # create a list to store the combinations\n    combinations = []\n    \n    # iterate over the lists and generate combinations\n    for I in range(n):\n        # generate the first list of colours\n        first_list = list(l[i])\n        \n        # generate the second list of colours\n        second_list = list(l[i+1])\n        \n        # generate the third list of colours\n        third_list = list(l[i+2])\n        \n        # generate the combinations\n        for j in range(len(first_list)):\n            for k in range(len(second_list)):\n                for l in range(len(third_list)):\n                    combinations.append([first_list[j], second_list[k], third_list[l]])\n\n    return combinations\n\n# test the function\nl1 = [['red', 'blue', 'green'], ['yellow', 'orange', 'purple'], ['brown', 'black', 'white']]\nn = 3"], ["\n# <func> # Python \n# Write a python function to count the number of prime numbers less than a given non-negative number.\ndef count_Primes_nums(n):\n    # Write your code here.\n    # Define a list of all prime numbers up to n\n    primes = [2]\n    for I in range(3, int(n**0.5)+1, 2):\n        if n % I == 0:\n            continue\n        primes.append(i)\n    return len(primes)\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to swap two numbers.\ndef swap_numbers(a,b):\n    temp = a\n    a = b\n    b = temp\n    return a,b\n\n# Call the function with the two numbers you want to swap.\na,b = 5,8\nc,d = swap_numbers(a,b)"], ["\n# <func> # Python \n# Write a function to find number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n    count = 0\n    for num in array_nums:\n        if num % 2 != 0:\n            count += 1\n    return count\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\n    # Your code here\n    return test_tup1, test_tup2\n\n# Example usage\ntest_tup1 = (1, 2)\ntest_tup2 = (3, 4)\nresult = maximize_elements(test_tup1, test_tup2)"], ["\n# <func> # Python \n# Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n):\n    # Define the function to check if a number is prime\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for I in range(2, int(num**0.5) + 1):\n            if num % I == 0:\n                return False\n        return True\n    \n    # Check if the number is prime\n    if is_prime(n):\n        return n\n    \n    # Find the next prime number\n    next_prime = n + 1\n    while is_prime(next_prime):\n        next_prime += 2\n    \n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return next_prime\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n    # Define the function body\n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n\n# Test the function\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (2, 4, 6)\nresult = division_elements(test_tup1, test_tup2)"], ["\n# <func> # Python \n# Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n    # Split the list into two parts\n    first_part = list(filter(lambda x: x < L, list1))\n    second_part = list(filter(lambda x: x > L, list1))\n    \n    # Return the two parts\n    return first_part, second_part\n\n# Example usage\nfirst_part, second_part = split_two_parts([1, 2, 3, 4, 5], 3)"], ["\n# <func> # Python \n# Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n    merged_dict = {}\n    for key, value in d1.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        else:\n            merged_dict[key] = merged_dict[key] + value\n    for key, value in d2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        else:\n            merged_dict[key] = merged_dict[key] + value\n    return merged_dict\n\n# Example usage:\nd1 = {'a': 1, 'b': 2}\nd2 = {'c': 3, 'd': 4}\nmerged_dict = merge_dict(d1, d2)"], ["\n# <func> # Python \n# Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n    # Calculate the age in dog's years\n    age = h_age // 365\n    # Convert the age to days\n    days = age * 24 * 60 * 60\n    # Calculate the age in dog's years\n    return days\n\n# Test the function\ndog_age(12) # Output: 355\ndog_age(13) # Output: 356\ndog_age(14) # Output: 357\ndog_age(15) # Output: 358\ndog_age(16) # Output: 359\ndog_age(17) # Output: 360\ndog_age(18) # Output: 361\ndog_age(19) # Output: 362\ndog_age(20) # Output: 363\ndog_age(21) # Output: 364\ndog_age(22) # Output: 365\ndog_age(23) # Output: 366\ndog_age(24) # Output: 367\ndog_age(25) # Output: 368\ndog_age(26) # Output: 369\ndog_age(27) # Output: 370\ndog_age(28) # Output: 371\ndog_age(29) # Output: 372\ndog_age(30) # Output: 373\ndog_age(31) # Output: 374\ndog_age(32) # Output: 375\ndog_age(33) # Output: 376\ndog_age(34) # Output: 377\ndog_age(35) # Output: 378\ndog_age(36) # Output: 379\ndog_age(37) # Output: 380\ndog_age(38) # Output: 3"], ["\n# <func> # Python \n# Write a function to split a list for every nth element.\ndef list_split(S, step):\n    # Define the list to split\n    lst = S\n    \n    # Define the step size\n    step = int(step)\n    \n    # Split the list into chunks\n    for I in range(0, len(lst), step):\n        yield lst[i:i+step]\n\n# Example usage\nlst = [1, 2, 3, 4, 5]\nfor chunk in list_split(lst, 2):\n    print(chunk)"], ["\n# <func> # Python \n# Write a function to find the lateral surface area of a cube.\ndef lateralsurface_cube(l):\n    # Calculate the volume of the cube\n    volume = l ** 3\n    \n    # Calculate the lateral surface area\n    surface_area = 4 * volume\n    \n    # Return the lateral surface area\n    return surface_area\n\n# Call the function with a value for the cube length\nlateralsurface_cube(10)"], ["\n# <func> # Python \n# Write a python function to find the sum of squares of first n odd natural numbers.\ndef square_Sum(n):\n    sum = 0\n    for I in range(1, n+1):\n        sum += i**2\n    return sum\n\n# Call the function and print the result.\nsquare_Sum(5)"], ["\n# <func> # Python \n# Write a function to find the n'th star number.\ndef find_star_num(n):\n    # Write your code here.\n    return n\n\n# Example usage:\nn = 5"], ["\n# <func> # Python \n# Write a function to find the ascii value of a character.\ndef ascii_value(k):\n    # Convert the character to a string\n    s = str(k)\n    # Convert the string to an integer\n    return int(s, 16)\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to find the sum of even numbers at even positions.\ndef sum_even_and_even_index(arr,n):\n    sum = 0\n    for I in range(n):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n\n# Testing the function\narr = [1, 2, 3, 4, 5]\nn = 2"], ["\n# <func> # Python \n# Write a python function to find the sum of fifth power of first n even natural numbers.\ndef even_Power_Sum(n):\n    sum = 0\n    for I in range(1, n+1):\n        sum += i**5\n    return sum\n\n# Call the function with n = 10"], ["\n# <func> # Python \n# Write a function to perfom the rear element extraction from list of tuples records.\ndef rear_extract(test_list):\n    # Check if list is empty\n    if len(test_list) == 0:\n        return None\n    \n    # Extract the last element from the list\n    return test_list[-1]\n\n# Example usage\ntest_list = [(1, 2), (3, 4), (5, 6), (7, 8)]\nrear_element = rear_extract(test_list)"], ["\n# <func> # Python \n# Write a function to substract the contents of one tuple with corresponding index of other tuple.\ndef substract_elements(test_tup1, test_tup2):\n    return tuple(test_tup1[i] - test_tup2[i] for I in range(len(test_tup1)))\n\n# Example usage:\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (2, 4, 6)"], ["import math  \r\n\n# <func> # Python \n# Write a python function to find sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum( n):\n    # Define the function to calculate the sum of even index binomial coefficients.\n    sum_even_index_binomial_coeff = 0\n    # Define the function to calculate the sum of odd index binomial coefficients.\n    sum_odd_index_binomial_coeff = 0\n    # Define the function to calculate the sum of all binomial coefficients.\n    sum_binomial_coeff = 0\n    # Define the function to calculate the sum of even index binomial coefficients.\n    sum_even_index_binomial_coeff = 0\n    # Define the function to calculate the sum of odd index binomial coefficients.\n    sum_odd_index_binomial_coeff = 0\n    # Define the function to calculate the sum of all binomial coefficients.\n    sum_binomial_coeff = 1\n    # Define the function to calculate the sum of even index binomial coefficients.\n    for I in range(1, n+1):\n        sum_even_index_binomial_coeff += binomial_coeff(i, n-i)\n    # Define the function to calculate the sum of odd index binomial coefficients.\n    for I in range(1, n+1):\n        sum_odd_index_binomial_coeff += binomial_coeff(n-i, i-1)\n    # Define the function to calculate the sum of all binomial coefficients.\n    for I in range(1, n+1):\n        sum_binomial_coeff += binomial_coeff(i, n)\n    # Return the sum of even index binomial coefficients.\n    return sum_even_index_binomial_coeff\n\n# Example usage:"], ["import math as mt \r\n\n# <func> # Python \n# Write a python function to find the position of the last removed element from the given array.\ndef get_Position(a,n,m):\n    # Initialize variables\n    count = 0\n    position = 0\n    # Loop through the array\n    for I in range(n):\n        # Check if the current element is greater than the last removed element\n        if a[i] > a[m-1]:\n            # If it is, update the position\n            position = i\n            break\n    # Return the position of the last removed element\n    return position\n\n# Example usage\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)\nm = 3\nposition = get_Position(arr,n,m)"], ["\n# <func> # Python \n# Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n    return (r**2)*(math.pi)*h\n\n# Call the function with some values"], ["\n# <func> # Python \n# Write a function to filter a dictionary based on values.\ndef dict_filter(dict,n):\n    return {k: v for k, v in dict.items() if v == n}\n\n# Example usage:\nd = {'a': 1, 'b': 2, 'c': 3}\nfiltered_dict = dict_filter(d, 2)"], ["\n# <func> # Python \n# Write a function to find the element count that occurs before the record in the given tuple.\ndef count_first_elements(test_tup):\n    count = 0\n    for I in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count += 1\n    return count\n\n# Example usage\ntest_tup = (1, 2, 3, 4, 5)\ncount = count_first_elements(test_tup)"], ["\n# <func> # Python \n# Write a function to find the nth decagonal number.\ndef is_num_decagonal(n):\n    # Write your code here.\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n % 3 == 0 and n % 5 == 0:\n        return True\n    return False\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to search an element in the given array by using sequential search.\ndef sequential_search(dlist, item):\n    # Initialize the index variable\n    i = 0\n    \n    # Loop through the list until the element is found or the end of the list is reached\n    while i < len(dlist) and dlist[i] != item:\n        # If the current element is less than the search element, increment the index variable\n        if dlist[i] < item:\n            i += 1\n        # If the current element is greater than the search element, decrement the index variable\n        else:\n            i -= 1\n    \n    # If the element is found, return the index of the element\n    return i\n\n# Example usage\nsequential_search([1, 2, 3, 4, 5], 3) # Returns 2\nsequential_search([1, 2, 3, 4, 5], 6) # Returns -1\nsequential_search([1, 2, 3, 4, 5], 0) # Returns -1\nsequential_search([1, 2, 3, 4, 5], 6) # Returns -1\nsequential_search([1, 2, 3, 4, 5], 7) # Returns -1\nsequential_search([1, 2, 3, 4, 5], 9) # Returns -1\nsequential_search([1, 2, 3, 4, 5], 10) # Returns -1\nsequential_search([1, 2, 3, 4, 5], 11) # Returns -1\nsequential_search([1, 2, 3, 4, 5], 12) # Returns -1\nsequential_search([1, 2, 3, 4, 5], 13) # Returns -1\nsequential_search([1, 2, 3, 4, 5], 14) # Returns -1\nsequential_search([1, 2, 3, 4, 5], 15) #"], ["\n# <func> # Python \n# Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n    # Initialize a set to store unique elements\n    unique_set = set()\n    \n    # Loop through the list and add each element to the set\n    for element in test_list:\n        if element in unique_set:\n            # If the element is already in the set, it is not unique\n            return False\n        else:\n            # If the element is not in the set, it is unique\n            unique_set.add(element)\n    \n    # If the set is empty, the list is unique\n    return True\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to substaract two lists using map and lambda function.\ndef sub_list(nums1,nums2):\n    return [num for num in nums1 if num not in nums2]\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\ndef validate(n):\n    # check if n is less than or equal to 10\n    if n < 10:\n        return True\n    # check if n is less than or equal to 100\n    if n < 100:\n        return validate(n // 10) and validate(n % 10)\n    # check if n is less than or equal to 1000\n    if n < 1000:\n        return validate(n // 100) and validate(n % 100)\n    # check if n is less than or equal to 10000\n    if n < 10000:\n        return validate(n // 1000) and validate(n % 1000)\n    # check if n is less than or equal to 100000\n    if n < 100000:\n        return validate(n // 10000) and validate(n % 10000)\n    # check if n is less than or equal to 1000000\n    if n < 1000000:\n        return validate(n // 100000) and validate(n % 100000)\n    # check if n is less than or equal to 10000000\n    if n < 10000000:\n        return validate(n // 1000000) and validate(n % 1000000)\n    # check if n is less than or equal to 100000000\n    if n < 100000000:\n        return validate(n // 10000000) and validate(n % 10000000)\n    # check if n is less than or equal to 1000000000\n    if n < 100000000"], ["\n# <func> # Python \n# Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n    return all(element == item for item in list)\n\n# Example usage\nlist1 = [1, 2, 3, 4, 5]\nelement = \"five\""], ["import re\r\n\n# <func> # Python \n# Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n    return re.match(r'(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\w+)\\s*(\\"], ["\n# <func> # Python \n# Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k):\n    # initialize max sum to 0\n    max_sum = 0\n    \n    # initialize max_sum_index to -1\n    max_sum_index = -1\n    \n    # initialize sum of max_sum_index to 0\n    sum_of_max_sum_index = 0\n    \n    # initialize max_sum_index_index to -1\n    max_sum_index_index = -1\n    \n    # initialize sum of max_sum_index_index to 0\n    sum_of_max_sum_index_index = 0\n    \n    # iterate through the array\n    for I in range(n):\n        # if the current element is greater than the previous element, update max_sum and max_sum_index\n        if a[i] > a[i - k]:\n            max_sum = a[i]\n            max_sum_index = i\n            max_sum_index_index = i - k\n            \n        # if the current element is equal to the previous element, update max_sum_index and sum of max_sum_index\n        elif a[i] == a[i - k]:\n            max_sum_index = i\n            sum_of_max_sum_index = sum_of_max_sum_index + a[i]\n            \n        # if the current element is less than the previous element, update max_sum_index and sum of max_sum_index_index\n        else:\n            max_sum_index_index = i\n            sum_of_max_sum_index_index = sum_of_max_sum_index_index + a[i]\n            \n    # return the maximum sum of contiguous array\n    return max(sum_of_max_sum_index, max_sum_index_index)\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to find the sum of squares of first n even natural numbers.\ndef square_Sum(n):\n    sum = 0\n    for I in range(1, n+1):\n        sum += i**2\n    return sum\n\n# Call the function with n = 5"], ["\n# <func> # Python \n# Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\n    # Check if N is prime\n    if not is_prime(N):\n        return []\n    \n    # Initialize result list\n    result = []\n    \n    # Loop through array elements\n    for I in range(len(arr)):\n        # Calculate modular inverse\n        inverse = (N - 1) // arr[i]\n        \n        # Check if inverse is equal to 1 modulo N\n        if inverse == 1:\n            result.append(arr[i])\n    \n    # Return result list\n    return result\n\n# Example usage\narr = [1, 2, 3, 4, 5]\np = 3\nmodular_inverse(arr, p, 10) # Output: [1, 2, 3, 5]"], ["\n# <func> # Python \n# Write a python function to calculate the number of odd days in a given year.\ndef odd_Days(N):\n    # Define a variable to store the number of odd days\n    odd_days = 0\n    # Loop through the years from 1900 to N\n    for year in range(1900, N+1):\n        # Check if the year is odd\n        if year % 2 != 0:\n            # Increment the odd_days variable\n            odd_days += 1\n    return odd_days\n\n# Call the function with the year 2020\nodd_days = odd_Days(2020)"], ["\n# <func> # Python \n# Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n    # Initialize a list to store the maximum length list\n    max_list = []\n    \n    # Loop through the list\n    for I in range(len(list1)):\n        # Check if the current element is greater than the current max length\n        if len(list1[i]) > len(max_list):\n            # If it is, update the max_list and the current max length\n            max_list = [list1[i]]\n            max_list.append(len(list1[i]))\n            \n    # Return the max_list\n    return max_list\n\n# Example usage\nmax_list = max_length([[1, 2, 3], [4, 5, 6], [7, 8, 9]])"], ["\n# <func> # Python \n# Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k):\n    # Base case: n=0, k=0\n    if n == 0:\n        return 1\n    if k == 0:\n        return n\n    # Recursive case: n>0, k>0\n    else:\n        return (n-1) * count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n\n# Testing the function"], ["\n# <func> # Python \n# Write a python function to find quotient of two numbers.\ndef find(n,m):\n    if n == 0:\n        return m\n    else:\n        return find(n-1,m)\n\n# Example usage"], ["import math\r\n\n# <func> # Python \n# Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n    \"\"\"\n    This function takes two sides of a right angled triangle and returns their third side.\n    \"\"\"\n    # Calculate the hypotenuse\n    hypotenuse = math.sqrt(w**2 + h**2)\n    \n    # Calculate the other side\n    other_side = hypotenuse * math.tan(math.radians(90 - math.degrees(math.atan2(h, w))))\n    \n    # Return the result\n    return other_side\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n    maxval = listval[0]\n    for val in listval:\n        if val > maxval:\n            maxval = val\n    return maxval\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to return the sum of all divisors of a number.\ndef sum_div(number):\n    divisors = []\n    for I in range(1, number+1):\n        if number % I == 0:\n            divisors.append(i)\n    return sum(divisors)\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to count inversions in an array.\ndef get_Inv_Count(arr,n):\n    count = 0\n    for I in range(n):\n        for j in range(i+1,n):\n            if arr[i] < arr[j]:\n                count += 1\n    return count\n\n# Testing the function\narr = [1, 2, 3, 4, 5]\nn = len(arr)"], ["\n# <func> # Python \n# Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n    # Base case: empty list\n    if not list1:\n        return []\n    \n    # Recursive case: list of lists\n    if isinstance(list1[0], list):\n        return [item for sublist in flatten_list(list1[0]) for item in sublist]\n    \n    # Recursive case: list of tuples\n    if isinstance(list1[0], tuple):\n        return [item for sublist in flatten_list(list1[0]) for item in sublist]\n    \n    # Recursive case: list of single item\n    return [item for sublist in flatten_list(list1) for item in sublist]\n\n# Example usage:\nlist1 = [1, [2, [3, 4], [5, [6, 7]]], [8, [9, [10, 11]]]]"], ["\n# <func> # Python \n# Write a function to find the nested list elements which are present in another list.\ndef intersection_nested_lists(l1, l2):\n    # Convert lists to tuples\n    l1_tuples = [tuple(x) for x in l1]\n    l2_tuples = [tuple(x) for x in l2]\n    \n    # Find intersection of tuples\n    intersection = list(set(l1_tuples) & set(l2_tuples))\n    \n    # Return intersection\n    return intersection\n\n# Example usage\nl1 = [1, 2, 3, 4, 5]\nl2 = [1, 2, 3, 4, 5]\nintersection = intersection_nested_lists(l1, l2)"], ["from collections import \n# <func> # Python \n# Write a function to calculate the maximum aggregate from the list of tuples.\ndef max_aggregate(stdata):\n    # Define the maximum aggregate\n    max_agg = 0\n    # Loop through the list of tuples\n    for item in stdata:\n        # Calculate the sum of the item\n        sum_agg = sum(item)\n        # Calculate the average of the item\n        avg_agg = sum_agg / len(item)\n        # Calculate the maximum of the item\n        max_agg = max(max_agg, avg_agg)\n    return max_agg\n\n# Example usage\nstdata = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]"], ["\n# <func> # Python \n# Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n):\n    count = 0\n    for I in range(n):\n        if (bin(i)[2:].zfill(n) == bin(n)[2:].zfill(i+1)):\n            count += 1\n    return count\n\n# Testing the function"], ["\n# <func> # Python \n# Write a function to find the depth of a dictionary.\ndef dict_depth(d):\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth += dict_depth(v)\n        else:\n            depth += 1\n    return depth\n\n# Example usage:\nd = {'a': 1, 'b': {'c': 2, 'd': 3}, 'e': 4}"], ["\n# <func> # Python \n# Write a python function to find the most significant bit number which is also a set bit.\ndef set_Bit_Number(n):\n    # Check if n is a power of 2\n    if n == 1:\n        return 0\n    # Check if n is a power of 2\n    if n & (n - 1) == 0:\n        return 1\n    # Find the set bit number\n    set_bit_number = 0\n    while n & (n - 1) != 0:\n        set_bit_number += 1\n        n = n >> 1\n    return set_bit_number\n\n# Example usage"], ["import sys \r\n\n# <func> # Python \n# Write a python function to check whether the count of inversion of two types are same or not.\ndef solve(a,n):\n    count = 0\n    for I in range(n):\n        for j in range(i+1,n):\n            if a[i] > a[j]:\n                count += 1\n    return count\n\n# Testing the function"], ["\n# <func> # Python \n# Write a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index):\n    # Base case: if index is out of range\n    if index >= len(arr):\n        return None\n    \n    # Base case: if index is 0\n    if index == 0:\n        return arr[0]\n    \n    # Calculate the index of the element to be found\n    index_to_find = index - rounds\n    \n    # Calculate the index of the element to be rotated\n    index_to_rotate = index_to_find % ranges\n    \n    # Calculate the index of the element to be found in the rotated array\n    rotated_index = index_to_rotate + rotations * ranges\n    \n    # If the element is found, return it\n    if rotated_index < len(arr):\n        return arr[rotated_index]\n    \n    # If the element is not found, return None\n    return None\n\n# Example usage\narr = [1,2,3,4,5]\nranges = [2,3]\nrotations = [1,2]\nindex = 2\nresult = find_Element(arr,ranges,rotations,index)"], ["import re\r\n\n# <func> # Python \n# Write a function to match two words from a list of words starting with letter 'p'.\ndef start_withp(words):\n    return any(word.startswith('p') for word in words)\n\n# Call the function with a list of words\nwords = ['apple', 'banana', 'cherry', 'grape', 'orange']"], ["\n# <func> # Python \n# Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\n    # Base case: if k is 0, return the maximum sum of the prefix\n    if k == 0:\n        return a[index]\n    \n    # Base case: if k is 1, return the maximum sum of the prefix and the current element\n    elif k == 1:\n        return max(a[index], a[index - 1])\n    \n    # Recursive case: find the maximum sum of the prefix and the current element\n    else:\n        max_sum = max(a[index], a[index - 1])\n        max_sum_increasing_subseq(a, n, index + 1, k - 1)\n        return max_sum\n\n# Example usage:\na = [1, 2, 3, 4, 5, 6]\nn = len(a)\nindex = 2\nk = 3"], ["from copy import deepcopy\r\n\n# <func> # Python \n# Write a function to get a colon of a tuple.\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"\n    This function takes a tuple as input and returns a tuple with the first m elements of the tuple and the rest of the tuple as a colon.\n    \"\"\"\n    if len(tuplex) < m:\n        raise ValueError(\"Tuple is too short\")\n    if len(tuplex) > m:\n        raise ValueError(\"Tuple is too long\")\n    return tuple(tuplex[i:i+n] for I in range(0,len(tuplex),n))\n\n# Example usage:\ntuplex = (1,2,3,4,5)\nm = 2\nn = 2\nresult = colon_tuplex(tuplex,m,n)"], ["\n# <func> # Python \n# Write a function to find the specified number of largest products from two given lists.\ndef large_product(nums1, nums2, N):\n    # Initialize the largest product to 1\n    largest_product = 1\n    \n    # Loop through the first list\n    for I in range(len(nums1)):\n        # Calculate the product of the current element and the next element\n        product = nums1[i] * nums2[i]\n        \n        # If the current product is greater than the largest product, update the largest product\n        if product > largest_product:\n            largest_product = product\n    \n    # Return the largest product\n    return largest_product\n\n# Example usage\nlargest_product([1, 2, 3], [4, 5, 6], 3) # Output: 120\nlargest_product([1, 2, 3], [4, 5, 6], 5) # Output: 120\nlargest_product([1, 2, 3], [4, 5, 6], 7) # Output: 120\nlargest_product([1, 2, 3], [4, 5, 6], 9) # Output: 120\nlargest_product([1, 2, 3], [4, 5, 6], 10) # Output: 120\nlargest_product([1, 2, 3], [4, 5, 6], 11) # Output: 120\nlargest_product([1, 2, 3], [4, 5, 6], 12) # Output: 120\nlargest_product([1, 2, 3], [4, 5, 6], 13) # Output: 120\nlargest_product([1, 2, 3], [4, 5, 6], 14) # Output: 120\nlargest_product([1, 2, 3], [4, 5, 6], 15) # Output: 120\nlargest"], ["\n# <func> # Python \n# Write a python function to find the maximum of two numbers.\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\n\n# Call the function with two numbers"], ["\n# <func> # Python \n# Write a function to convert a given string to a tuple.\ndef string_to_tuple(str1):\n    # Convert the string to a list of characters\n    str1 = str1.lower()\n    # Split the string into individual characters\n    str1 = str1.split()\n    # Convert each character to a tuple\n    str1 = [tuple(char) for char in str1]\n    # Return the tuple\n    return str1\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes a number n as input and returns the left most unset bit.\n    \"\"\"\n    # Initialize a variable to store the left most unset bit\n    left_most_unset_bit = 0\n    \n    # Loop through all the bits of n\n    for I in range(32):\n        # Check if the bit at index I is set\n        if n & (1 << I) != 0:\n            # If the bit is set, increment the left most unset bit\n            left_most_unset_bit += 1\n            \n    # Return the left most unset bit\n    return left_most_unset_bit\n\n# Example usage"], ["import math\r\n\n# <func> # Python \n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    # Calculate the base and height of the cone\n    base = r * math.sin(math.pi/2)\n    height = r * math.cos(math.pi/2)\n    # Calculate the volume of the cone\n    volume = base * height\n    return volume\n\n# Test the function with some examples"], ["\n# <func> # Python \n# Write a python function to print positive numbers in a list.\ndef pos_nos(list1):\n    for num in list1:\n        if num > 0:\n            print(num)\n\n# Call the function with a list of positive numbers\npos_nos([1, 2, 3, 4, 5])\n\n# Output: 1 2 3 4 5"], ["\n# <func> # Python \n# Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n):\n    # Initialize the maximum sum to 0\n    max_sum = 0\n    \n    # Loop through the grid\n    for I in range(n):\n        for j in range(n):\n            # Calculate the sum of the adjacent numbers\n            sum_adjacent = grid[i][j] + grid[i+1][j] + grid[i][j+1] + grid[i+1][j+1]\n            \n            # If the sum is greater than the current maximum sum, update the maximum sum\n            if sum_adjacent > max_sum:\n                max_sum = sum_adjacent\n    \n    # Return the maximum sum\n    return max_sum\n\n# Test the function with some sample inputs\ngrid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nn = 3"], ["\n# <func> # Python \n# Write a python function to find the first maximum length of even word.\ndef find_Max_Len_Even(str):\n    # Initialize a list to store the maximum length of even word\n    max_len = 0\n    # Loop through each character in the string\n    for I in range(len(str)):\n        # Check if the current character is an even number\n        if str[i] % 2 == 0:\n            # If the current character is an even number, increase the maximum length\n            if max_len < len(str[i]):\n                max_len = len(str[i])\n    # Return the maximum length of even word\n    return max_len\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence(A, x):\n    # Find the index of the last occurrence of x in the sorted array\n    I = bisect.bisect_right(A, x) - 1\n    # If the last occurrence is not found, return -1\n    if I < 0:\n        return -1\n    return I\n\n# Example usage\narr = [1, 2, 3, 4, 5]\nx = 3"], ["from itertools import groupby\r\n\n# <func> # Python \n# Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\n    \"\"\"\n    This function takes a list as input and returns a new list with the modified run-length encoding.\n    The function takes a list of integers as input and returns a new list with the same elements but with the run-length encoded as a string.\n    The run-length encoding is a way to represent a list of integers as a string.\n    The function takes an input list and returns a new list with the same elements but with the run-length encoded as a string.\n    The run-length encoding is a way to represent a list of integers as a string.\n    The function takes an input list and returns a new list with the same elements but with the run-length encoded as a string.\n    The run-length encoding is a way to represent a list of integers as a string.\n    The function takes an input list and returns a new list with the same elements but with the run-length encoded as a string.\n    The run-length encoding is a way to represent a list of integers as a string.\n    The function takes an input list and returns a new list with the same elements but with the run-length encoded as a string.\n    The run-length encoding is a way to represent a list of integers as a string.\n    The function takes an input list and returns a new list with the same elements but with the run-length encoded as a string.\n    The run-length encoding is a way to represent a list of integers as a string.\n    The function takes an input list and returns a new list with the same elements but with the run-length encoded as a string.\n    The run-length encoding is a way to represent a list of integers as a string.\n    The function takes an input list and returns a new list with the same elements but with the run-length encoded as a string.\n    The run-length encoding is a way to represent a list of integers as a string.\n    The function takes an input list and returns a new list with the same elements but with the run-length encoded as a string.\n    The run-length encoding is a way to represent a list of integers as a string.\n    The function takes an input list and"], ["\n# <func> # Python \n# Write a python function to find the maximum volume of a cuboid with given sum of sides.\ndef max_volume (s):\n    # define the function body\n    if s == 0:\n        return 0\n    elif s > 0:\n        return s * (s - 1) * (s - 2) / 6\n    else:\n        return 0\n\n# test the function"], ["import re\r\n\n# <func> # Python \n# Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\n    # Define regex pattern to match long words\n    pattern = r'[A-Za-z]+[0-9]+'\n    # Create a list to store the found long words\n    long_words = []\n    # Loop through the string and match long words\n    for char in text:\n        if re.search(pattern, char):\n            long_words.append(char)\n    # Return the list of found long words\n    return long_words\n\n# Example usage\nlong_words = find_long_word(\"The quick brown fox jumps over the lazy dog.\")"], ["\n# <func> # Python \n# Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\ndef sum_difference(n):\n    sum_squared = 0\n    for I in range(1, n+1):\n        sum_squared += (i**2)\n    return sum_squared - sum_squared**2\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to find the demlo number for the given number.\ndef find_demlo(s):\n    # Convert string to list\n    l = list(s)\n    # Find the longest increasing subsequence\n    l = sorted(l)\n    # Find the first index of the longest increasing subsequence\n    i = l.index(max(l))\n    # Find the length of the longest increasing subsequence\n    l = l[i:] + l[:i]\n    # Find the demlo number\n    return sum(l)\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to find all index positions of the minimum values in a given list.\ndef position_min(list1):\n    # Initialize minimum value to None\n    min_val = None\n    \n    # Loop through the list\n    for I in range(len(list1)):\n        # Check if the current element is less than the minimum value\n        if list1[i] < min_val:\n            # Update minimum value and index position\n            min_val = list1[i]\n            pos = i\n            \n    # Return the index positions of the minimum values\n    return pos, min_val\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to re-arrange the given array in alternating positive and negative items.\ndef right_rotate(arr, n, out_of_place, cur):\n    # If the array is empty, return the original array.\n    if n == 0:\n        return arr\n    \n    # If the array is already sorted, return the sorted array.\n    if cur == n:\n        return arr\n    \n    # Find the middle index of the array.\n    mid = n // 2\n    \n    # Find the index of the first element in the array that is greater than the middle element.\n    left = 0\n    right = n - 1\n    \n    # Find the index of the last element in the array that is less than the middle element.\n    while left < mid:\n        left += 1\n    \n    # Find the index of the first element in the array that is less than or equal to the middle element.\n    while right > mid:\n        right -= 1\n    \n    # Swap the first and last elements in the array.\n    temp = arr[left]\n    arr[left] = arr[right]\n    arr[right] = temp\n    \n    # Re-arrange the array in alternating positive and negative items.\n    if out_of_place:\n        arr[left], arr[mid] = arr[mid], arr[left]\n        arr[right], arr[mid] = arr[mid], arr[right]\n    else:\n        arr[mid], arr[right] = arr[right], arr[mid]\n    \n    return arr\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nout_of_place = False\ncur = 0\n\n# Re-arrange the array in alternating positive and negative items.\narr_rearranged = right_rotate(arr, n, out_of_place, cur)"], ["\n# <func> # Python \n# Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n    # Define a function to extract the sum of alternate chains of tuples.\n    def sum_alternates(test_tuple):\n        # Initialize a list to store the sum.\n        sum_list = []\n        # Iterate over the tuple.\n        for I in range(len(test_tuple)):\n            # If the current element is not the first element, add it to the sum list.\n            if I != 0:\n                sum_list.append(test_tuple[i])\n        # Return the sum of the alternate chains.\n        return sum(sum_list)\n    # Call the function with the test tuple.\n    return sum_alternates(test_tuple)\n\n# Test the function.\ntest_tuple = (1, 2, 3, 4, 5)"], ["\n# <func> # Python \n# Write a python function to find the minimum number of squares whose sum is equal to a given number.\ndef get_Min_Squares(n):\n    # Define the function to find the minimum number of squares whose sum is equal to a given number\n    def get_min_squares(n):\n        # Initialize the minimum number of squares to 1\n        min_squares = 1\n        # Loop through all numbers from 1 to n\n        for I in range(1, n+1):\n            # Calculate the sum of the squares of the first I numbers\n            sum_of_squares = 0\n            for j in range(1, I+1):\n                sum_of_squares += i**2\n            # Check if the sum of the squares is equal to n\n            if sum_of_squares == n:\n                # If it is, add the number of squares to the minimum number of squares\n                min_squares += 1\n        return min_squares\n    # Call the function to find the minimum number of squares whose sum is equal to a given number\n    return get_min_squares(n)\n\n# Example usage"], ["from collections import \n# <func> # Python \n# Write a function to get the word with most number of occurrences in the given strings list.\ndef most_occurrences(test_list):\n    # Initialize a dictionary to store the word and its occurrences\n    word_occurrences = {}\n    \n    # Loop through the test_list and update the dictionary with the word and its occurrences\n    for word in test_list:\n        if word in word_occurrences:\n            word_occurrences[word] += 1\n        else:\n            word_occurrences[word] = 1\n    \n    # Return the word with the most occurrences\n    return max(word_occurrences.items(), key=lambda x: x[1])[0]\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to print check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\n    if x == y and y == z:\n        print(\"Triangle is isosceles\")\n    else:\n        print(\"Triangle is not isosceles\")\n\n# Example usage\ncheck_isosceles(10,10,10) # Output: Triangle is isosceles\ncheck_isosceles(10,15,10) # Output: Triangle is not isosceles\ncheck_isosceles(15,10,10) # Output: Triangle is not isosceles\ncheck_isosceles(10,10,15) # Output: Triangle is not isosceles"], ["\n# <func> # Python \n# Write a function to rotate a given list by specified number of items to the left direction.\ndef rotate_left(list1,m,n):\n    # Define the function body\n    if n == 0:\n        return list1\n    else:\n        return rotate_left(list1[0:m],n-1,n) + list1[m]\n\n# Example usage\nlist1 = [1,2,3,4,5]\nn = 2\nresult = rotate_left(list1,n,n)"], ["\n# <func> # Python \n# Write a python function to count negative numbers in a list.\ndef neg_count(list):\n    count = 0\n    for num in list:\n        if num < 0:\n            count += 1\n    return count\n\n# Call the function with some sample input and output"], ["import re\r\n\n# <func> # Python \n# Write a function to find all three, four, five characters long words in the given string by using regex.\ndef find_char(text):\n    # Define regular expression pattern for finding words\n    pattern = r'[a-zA-Z]+'\n    # Create a list to store found words\n    words = []\n    # Loop through each character in the string\n    for char in text:\n        # Check if the current character matches the regular expression pattern\n        if re.match(pattern, char):\n            # If the current character matches the pattern, add it to the list of found words\n            words.append(char)\n    # Return the list of found words\n    return words\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to count unset bits of a given number.\ndef count_unset_bits(n):\n    count = 0\n    for I in range(8):\n        if n & (1 << i) != 0:\n            count += 1\n    return count\n\n# Example usage:\nn = 1234567890"], ["\n# <func> # Python \n# Write a function to count character frequency of a given string.\ndef char_frequency(str1):\n    # Initialize a dictionary to store character frequency\n    char_freq = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is not already in the dictionary, add it to the dictionary\n        if char not in char_freq:\n            char_freq[char] = 1\n        # Otherwise, increment the count for the character\n        else:\n            char_freq[char] += 1\n    \n    # Return the dictionary of character frequency\n    return char_freq\n\n# Example usage\nchar_freq = char_frequency(\"Hello, world!\")"], ["\n# <func> # Python \n# Write a python function to sort a list according to the second element in sublist.\ndef Sort(sub_li):\n    # Sort the sublist\n    sub_li.sort(key=lambda x: x[1])\n    # Return the sorted sublist\n    return sub_li\n\n# Example usage\nsub_li = [['apple', 1], ['banana', 2], ['orange', 3]]\nsorted_sub_li = Sort(sub_li)"], ["\n# <func> # Python \n# Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):\n    if a+b>c:\n        return False\n    elif a==b and c==a:\n        return True\n    else:\n        return False\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to find the sum of arithmetic progression.\ndef ap_sum(a,n,d):\n    sum = 0\n    for I in range(1,n+1):\n        sum += a*i\n    return sum\n\n# Testing the function"], ["\n# <func> # Python \n# Write a function to check whether the given month name contains 28 days or not.\ndef check_monthnum(monthname1):\n    if monthname1 == \"January\" or monthname1 == \"February\" or monthname1 == \"March\" or monthname1 == \"April\" or monthname1 == \"May\" or monthname1 == \"June\" or monthname1 == \"July\" or monthname1 == \"August\" or monthname1 == \"September\" or monthname1 == \"October\" or monthname1 == \"November\" or monthname1 == \"December\":\n        return True\n    else:\n        return False\n\n# Example usage:"], ["import re\r\n\n# <func> # Python \n# Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n    # Replace all punctuation with spaces to match the end of the word\n    text = re.sub(r'\\W+', ' ', text)\n    # Split the string into words\n    words = text.split()\n    # Check if the word is in the list of words\n    if word in words:\n        return True\n    else:\n        return False\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to count the number of substrings with same first and last characters.\ndef check_Equality(s):\n    count = 0\n    for I in range(len(s)):\n        if s[i:i+2] == s[i+1:i+2]:\n            count += 1\n    return count\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to find the maximum occuring divisor in an interval.\ndef find_Divisor(x,y):\n    # Define the function to find the maximum divisor\n    def max_divisor(a,b):\n        # Base case: if a is less than b, return a\n        if a < b:\n            return a\n        # Recursive case: find the maximum divisor of a and b\n        elif a % b == 0:\n            return b\n        # Recursive case: find the maximum divisor of a and b\n        else:\n            return max_divisor(b,a%b)\n    # Find the maximum divisor of x and y\n    max_divisor(x,y)\n    # Return the maximum divisor\n    return max_divisor(x,y)\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_smallest_nums(lst):\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through the list and add the smallest number to the sum\n    for num in lst:\n        if num < 0:\n            sum += num\n    \n    return sum\n\n# Call the function with a list of numbers"], ["\n# <func> # Python \n# Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n    # Convert the set to a list of tuples\n    tuples = []\n    for elem in s:\n        tuples.append((elem,))\n    return tuples\n\n# Example usage"], ["from heapq import heappop, heappush\r\nclass Node:\r\n    \n# <func> # Python \n# Write a function to find the smallest range that includes at-least one element from each of the given arrays.\ndef find_minimum_range(list):\n    # Initialize the minimum range as infinity\n    min_range = float('inf')\n    \n    # Initialize the minimum element as the first element in the list\n    min_element = list[0]\n    \n    # Initialize the current minimum range as the current minimum element\n    current_min_range = min_element\n    \n    # Initialize the current minimum element as the first element in the next list\n    current_min_element = list[0]\n    \n    # Iterate through the list\n    for I in range(1, len(list)):\n        # If the current element is less than the current minimum element, update the current minimum range\n        if list[i] < current_min_element:\n            current_min_range = min(current_min_range, list[i])\n            current_min_element = list[i]\n            \n        # If the current element is greater than the current minimum element, update the current minimum element\n        elif list[i] > current_min_element:\n            current_min_element = list[i]\n            \n    # Return the minimum range\n    return current_min_range\n\n# Example usage\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5, 6]\nmin_range = find_minimum_range(list1)"], ["\n# <func> # Python \n# Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n    count_digits = 0\n    count_letters = 0\n    for char in s:\n        if char.isdigit():\n            count_digits += 1\n        elif char.isalpha():\n            count_letters += 1\n    return count_digits, count_letters\n\n# Example usage\ndig_let(\"12345\") # Output: (2, 3)\ndig_let(\"abcdef\") # Output: (4, 5)\ndig_let(\"\") # Output: (0, 0)\ndig_let(\"123\") # Output: (2, 3)"], ["\n# <func> # Python \n# Write a python function to find number of elements with odd factors in a given range.\ndef count_Odd_Squares(n,m):\n    count = 0\n    for I in range(n,m+1):\n        if I % 2 != 0:\n            count += 1\n    return count\n\n# Testing the function"], ["\n# <func> # Python \n# Write a function to find the difference between two consecutive numbers in a given list.\ndef diff_consecutivenums(nums):\n    # Initialize the difference variable to 0\n    diff = 0\n    \n    # Loop through the list and add the difference for each number\n    for I in range(1, len(nums)):\n        diff += nums[i] - nums[i-1]\n    \n    return diff\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to find entringer number e(n, k).\ndef zigzag(n, k):\n    # Write your code here.\n    if n == 1:\n        return k\n    elif n % 2 == 0:\n        return zigzag(n // 2, k)\n    else:\n        return zigzag(n // 2, k + 1)\n\n# Testing the function"], ["\n# <func> # Python \n# Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n    count = 0\n    for I in range(m):\n        for j in range(n):\n            if (i*i + j*j) % 4 == 0:\n                count += 1\n    return count\n\n# Call the function"], ["\n# <func> # Python \n# Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\ndef bin_coff(n, r):\n    # Initialize prefix sum to 0\n    prefix_sum = 0\n    \n    # Loop through all possible sequences of length r\n    for I in range(1, n+1):\n        # Calculate prefix sum for current sequence\n        prefix_sum += bin(i).count('1')\n        \n        # Check if prefix sum is greater than or equal to r\n        if prefix_sum >= r:\n            # If it is, return the sequence\n            return [i]\n    \n    # If no sequence is found, return empty list\n    return []\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to check whether the given string is a binary string or not.\ndef check(string):\n    # Convert the string to binary representation\n    binary_string = bin(int(string))\n    \n    # Check if the binary string is a valid binary number\n    if len(binary_string) % 2 != 0:\n        return False\n    \n    # Check if the binary string has only 1s and 0s\n    for I in range(len(binary_string) // 2):\n        if binary_string[i] != binary_string[len(binary_string) - 1 - i]:\n            return False\n    \n    return True\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to minimize the length of the string by removing occurrence of only one character.\ndef minimum_Length(s):\n    # Initialize a list to store the length of each character\n    length = []\n    # Loop through each character in the string\n    for I in range(len(s)):\n        # If the character is not present in the list, add its length to the length list\n        if s[i] not in length:\n            length.append(len(s[i]))\n    # Sort the length list in descending order\n    length.sort(reverse=True)\n    # Return the minimum length\n    return length[0]\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to find the first element occurring k times in a given array.\ndef first_Element(arr,n,k):\n    # initialize the count variable to 0\n    count = 0\n    \n    # loop through the array\n    for I in range(len(arr)):\n        # check if the current element is equal to the kth element\n        if arr[i] == k:\n            # increment the count variable\n            count += 1\n            \n    # return the first element that occurs k times\n    if count == k:\n        return arr[i]\n    else:\n        return None\n\n# Example usage\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nk = 3"], ["\n# <func> # Python \n# Write a python function to check whether all the characters in a given string are unique.\ndef unique_Characters(str):\n    # Initialize a set to store unique characters\n    unique_chars = set()\n    \n    # Loop through each character in the string\n    for char in str:\n        # If the character is not in the set, add it to the set\n        if char not in unique_chars:\n            unique_chars.add(char)\n    \n    # Return the set of unique characters\n    return unique_chars\n\n# Example usage\nunique_chars = unique_Characters(\"hello world\")"], ["\n# <func> # Python \n# Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n    return [item for item in list1 if item[n] == None]\n\n# Example usage:\nlist1 = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\nlist2 = remove_column(list1, 1)"], ["\n# <func> # Python \n# Write a function to find t-nth term of arithemetic progression.\ndef tn_ap(a,n,d):\n    # Define the function\n    def tn_ap(a,n,d):\n        # Calculate the sum of the first n terms\n        sum_ap = 0\n        for I in range(1,n+1):\n            sum_ap += a**i\n        # Calculate the sum of the first n terms of the arithmetic progression\n        sum_ap_ap = 0\n        for I in range(1,n+1):\n            sum_ap_ap += (a**i) * (n-i+1)\n        # Calculate the t-th term of the arithmetic progression\n        t_ap = sum_ap_ap / (n-1)\n        # Return the t-th term of the arithmetic progression\n        return t_ap\n    # Call the function with the given arguments\n    return tn_ap(a,n,d)\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to count the number of rectangles in a circle of radius r.\ndef count_Rectangles(radius):\n    count = 0\n    for angle in range(0, 2 * math.pi, 2 * math.pi / 180):\n        if math.sin(angle) * radius <= 1:\n            count += 1\n    return count\n\n# Testing the function"], ["\n# <func> # Python \n# Write a function to find the third angle of a triangle using two angles.\ndef find_angle(a,b):\n    \"\"\"\n    This function takes two angles as input and returns the third angle.\n    \"\"\"\n    # Calculate the sum of the two angles\n    sum_of_angles = a + b\n    \n    # Calculate the difference between the two angles\n    difference_of_angles = sum_of_angles - a\n    \n    # Calculate the product of the two differences\n    product_of_differences = difference_of_angles * difference_of_angles\n    \n    # Calculate the square root of the product\n    square_root_of_product = math.sqrt(product_of_differences)\n    \n    # Return the third angle as the square root of the product\n    return square_root_of_product\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to find the maximum element of all the given tuple records.\ndef find_max(test_list):\n    max_value = test_list[0][0]\n    for record in test_list:\n        if record[0] > max_value:\n            max_value = record[0]\n    return max_value\n\n# Example usage\ntest_list = [('apple', 1), ('banana', 2), ('orange', 3), ('pear', 4)]"], ["\n# <func> # Python \n# Write a function to find modulo division of two lists using map and lambda function.\ndef moddiv_list(nums1,nums2):\n    # Create a list to store the result\n    result = []\n    \n    # Loop through each element in nums1\n    for num in nums1:\n        # Calculate the modulo of num with nums2\n        result.append(num % nums2)\n    \n    # Return the result as a list\n    return result\n\n# Example usage\nnums1 = [1, 2, 3, 4]\nnums2 = [2, 4, 6, 8]\nresult = moddiv_list(nums1, nums2)"], ["\n# <func> # Python \n# Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c):\n    # Check if a is not zero\n    if a != 0:\n        # Check if b is not zero\n        if b != 0:\n            # Check if c is not zero\n            if c != 0:\n                # Calculate discriminant\n                discriminant = b**2 - 4*a*c\n                # Check if discriminant is negative\n                if discriminant < 0:\n                    # If discriminant is negative, then the roots are not twice of each other\n                    return False\n                # If discriminant is positive, then the roots are twice of each other\n                else:\n                    # Calculate x1 and x2\n                    x1 = (-b + discriminant**0.5) / (2*a)\n                    x2 = (-b - discriminant**0.5) / (2*a)\n                    # Check if x1 and x2 are roots\n                    if x1**2 == c:\n                        # If x1 and x2 are roots, then the quadratic equation has two distinct roots\n                        return True\n                    else:\n                        # If x1 and x2 are not roots, then the quadratic equation has one root\n                        return False\n            else:\n                # If c is zero, then the quadratic equation has one root\n                return True\n        else:\n            # If b is zero, then the quadratic equation has one root\n            return True\n    else:\n        # If a is zero, then the quadratic equation has one root\n        return True\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to find the n\u2019th carol number.\ndef get_carol(n):\n    # Write your code here.\n    if n == 1:\n        return '1'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '3'\n    elif n == 4:\n        return '4'\n    elif n == 5:\n        return '5'\n    elif n == 6:\n        return '6'\n    elif n == 7:\n        return '7'\n    elif n == 8:\n        return '8'\n    elif n == 9:\n        return '9'\n    elif n == 10:\n        return '10'\n    elif n == 11:\n        return '11'\n    elif n == 12:\n        return '12'\n    elif n == 13:\n        return '13'\n    elif n == 14:\n        return '14'\n    elif n == 15:\n        return '15'\n    elif n == 16:\n        return '16'\n    elif n == 17:\n        return '17'\n    elif n == 18:\n        return '18'\n    elif n == 19:\n        return '19'\n    elif n == 20:\n        return '20'\n    else:\n        return 'Error'\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to remove empty lists from a given list of lists.\ndef remove_empty(list1):\n    # Create a new list to store the remaining elements\n    list2 = []\n    \n    # Loop through each element in the original list\n    for item in list1:\n        # Check if the current element is not empty\n        if item:\n            # If it is, add it to the list\n            list2.append(item)\n    \n    # Return the new list\n    return list2\n\n# Example usage\nlist1 = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]"], ["\n# <func> # Python \n# Write a python function to find the item with maximum occurrences in a given list.\ndef max_occurrences(nums):\n    max_occ = 0\n    max_num = 0\n    for num in nums:\n        if num > max_num:\n            max_num = num\n            max_occ = 1\n    return max_occ, max_num\n\n# Example usage:\nnums = [3, 1, 2, 3, 1, 4, 2, 3]\nmax_occ, max_num = max_occurrences(nums)"], ["\n# <func> # Python \n# Write a function to add the k elements to each element in the tuple.\ndef add_K_element(test_list, K):\n    \"\"\"\n    This function takes a tuple as input and adds the k elements to each element.\n    \"\"\"\n    # Initialize the sum to 0\n    sum_of_elements = 0\n    \n    # Loop through the elements of the tuple\n    for I in range(len(test_list)):\n        # Add the kth element to the current element\n        sum_of_elements += test_list[i]\n        \n        # Update the sum of all elements\n        sum_of_elements += K\n        \n    # Return the sum of all elements\n    return sum_of_elements\n\n# Example usage\ntest_list = (1, 2, 3, 4, 5)\nk = 3\nresult = add_K_element(test_list, k)"], ["\n# <func> # Python \n# Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch):\n    # Define the flip function\n    def flip(ch):\n        return ch[::-1]\n    # Convert the binary string to a list of characters\n    ch = [int(c) for c in ch]\n    # Loop through the list and flip each character\n    flipped = []\n    for I in range(len(ch)):\n        flipped.append(flip(ch[i]))\n    # Return the flipped list\n    return flipped\n\n# Test the function with some examples"], ["\n# <func> # Python \n# Write a python function to count the number of digits of a given number.\ndef count_Digit(n):\n    count = 0\n    while n > 0:\n        digit = n % 10\n        count += digit\n        n //= 10\n    return count\n\n# Example usage\ncount_Digit(12345) # Output: 5\ncount_Digit(123456) # Output: 6\ncount_Digit(1234567) # Output: 7\ncount_Digit(12345678) # Output: 8\ncount_Digit(123456789) # Output: 9\ncount_Digit(1234567890) # Output: 10"], ["\n# <func> # Python \n# Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\n    # Initialize the largest product to 1\n    largest_product = 1\n    \n    # Loop through the list of numbers\n    for I in range(len(list_nums) - 1):\n        # Find the difference between the current and next element\n        diff = list_nums[i+1] - list_nums[i]\n        \n        # If the difference is greater than the current largest product, update the largest product\n        if diff > largest_product:\n            largest_product = diff\n    \n    # Return the largest product\n    return largest_product\n\n# Example usage"], ["class Node: \r\n\t\n# <func> # Python \n# Write a function to check if a binary tree is balanced or not.\ndef get_height(root):\n    if root is None:\n        return 0\n    return max(get_height(root.left), get_height(root.right)) + 1\n\ndef is_balanced(root):\n    if root is None:\n        return True\n    return get_height(root) >= 2 and is_balanced(root.left) and is_balanced(root.right)\n\ndef main():\n    root = Node(10)\n    root.left = Node(5)\n    root.right = Node(15)\n    root.left.left = Node(7)\n    root.left.right = Node(13)\n    root.right.left = Node(11)\n    root.right.right = Node(17)\n    print(is_balanced(root))\n"], ["\n# <func> # Python \n# Write a function to repeat the given tuple n times.\ndef repeat_tuples(test_tup, N):\n    return tuple(itertools.repeat(test_tup[i], N) for I in range(len(test_tup)))\n\n# Example usage:\ntest_tup = (1, 2, 3)"], ["\n# <func> # Python \n# Write a function to find the lateral surface area of cuboid\ndef lateralsurface_cuboid(l,w,h):\n    # calculate the lateral surface area\n    lateral_surface = (l*w*h) / 2\n    return lateral_surface\n\n# test the function\nl,w,h = 5,2,3\nlateralsurface_cuboid(l,w,h) # should return 15\n\n# + [markdown] id=\"FZ5-hj0qYKZs\"\n# 2. Find the volume of a sphere\n#\n# The volume of a sphere is the amount of space inside the sphere. The formula for the volume of a sphere is:\n#\n# V = 4/3 * pi * r^3\n#\n# where V is the volume, r is the radius, and pi is the mathematical constant pi = 3.14159.\n#\n# In Python, we can use the `math` module to calculate the volume of a sphere.\n\n# + id=\"08Y65hJkYKZs\"\nimport math\n\n# calculate the volume of a sphere\ndef volume_sphere(r):\n    return 4/3 * math.pi * r**3\n\n# test the function\nr = 5\nvolume_sphere(r) # should return 18.56\n\n# + [markdown] id=\"h_s7-9MtYKZs\"\n# 3. Find the surface area and volume of a cylinder\n#\n# A cylinder is a cylindrical shape with a circular base and a conical top. The surface area and volume of a cylinder are related by the formula:\n#\n# S = 4/3 * pi * r^2 * h\n#\n# where S is the surface area, r is the radius of the cylinder, and h is the height of the cylinder.\n#\n# In Python, we can use the `math` module to calculate the surface area and volume of a cylinder.\n\n# + id=\"r-Z-H_4qYKZs\"\nimport math\n\n# calculate"], ["\n# <func> # Python \n# Write a function to sort a tuple by its float element.\ndef float_sort(price):\n    return price[1]\n\n# Example usage:\nprice_tuple = (10.5, 20.5, 30.5, 40.5)\nsorted_price_tuple = sorted(price_tuple, key=float_sort)"], ["\n# <func> # Python \n# Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\n    # Initialize variables\n    min_index = left_element\n    min_value = A[left_element]\n    \n    # Loop through the array\n    for I in range(left_element, right_element):\n        # If the current element is smaller than the minimum value, update the minimum index\n        if A[i] < min_value:\n            min_index = i\n            min_value = A[i]\n    \n    # Return the index of the smallest element\n    return min_index\n\n# Example usage\nA = [10, 5, 15, 12, 18, 20]\nleft_element = 5\nright_element = 18\nmin_index = smallest_missing(A, left_element, right_element)"], ["import heapq as hq\r\n\n# <func> # Python \n# Write a function to sort a given list of elements in ascending order using heap queue algorithm.\ndef heap_assending(nums):\n    # Create a heap queue with the given list of numbers.\n    heapq = heapq(nums)\n\n    # Define a function to check if the heap is empty.\n    def is_empty(heap):\n        return heap.empty()\n\n    # Define a function to extract the minimum element from the heap.\n    def extract_min(heap):\n        return heap.heappop()\n\n    # Define a function to insert a new element into the heap.\n    def insert(heap, element):\n        heap.heappush(element)\n\n    # Define a function to check if the heap is full.\n    def is_full(heap):\n        return heap.heappush(element) == element\n\n    # Define a function to check if the heap is empty.\n    def is_empty(heap):\n        return heap.heappop() == element\n\n    # Define a function to extract the maximum element from the heap.\n    def extract_max(heap):\n        return heap.heappop()\n\n    # Define a function to insert a new element into the heap.\n    def insert(heap, element):\n        heap.heappush(element)\n\n    # Define a function to check if the heap is full.\n    def is_full(heap):\n        return heap.heappush(element) == element\n\n    # Define a function to check if the heap is empty.\n    def is_empty(heap):\n        return heap.heappop() == element\n\n    # Define a function to extract the minimum element from the heap.\n    def extract_min(heap):\n        return heap.heappop()\n\n    # Define a function to extract the maximum element from the heap.\n    def extract_max(heap):\n        return heap.heappop()\n\n    # Define a function to extract the maximum element from the heap.\n    def extract_max(heap):\n        return heap.heappop()\n\n    # Define a function to extract the minimum element"], ["\n# <func> # Python \n# Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n    volume = l * w * h\n    return volume\n\n# Call the function with the values of the dimensions\nvolume = volume_cuboid(1,2,3)"], ["\n# <func> # Python \n# Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\n    # Initialize an empty list to store permutations\n    permutations = []\n    \n    # Loop through each character in the string\n    for char in str:\n        # If the current character is not a letter, skip it\n        if char.isalpha():\n            # If the current character is not a letter or digit, skip it\n            if not char.isalnum():\n                continue\n            \n            # If the current character is a letter or digit, add it to the permutation list\n            permutations.append(char)\n    \n    # Return the permutations list\n    return permutations\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to round the given number to the nearest multiple of a specific number.\ndef round_num(n,m):\n    return int(round(n*m/100))/100\n\n# Example usage:\nn = 123456789\nm = 100\nrounded_num = round_num(n,m)"], ["\n# <func> # Python \n# Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\ndef remove_replica(test_tup):\n    # Remove duplicates from the tuple\n    test_tup = list(set(test_tup))\n    \n    # Replace duplicates with custom value\n    test_tup[0] = \"custom_value\"\n    \n    return tuple(test_tup)\n\n# Example usage\ntest_tup = (1, 2, 3, 4, 5)"], ["\n# <func> # Python \n# Write a python function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c):\n    return s.replace(c, '')\n\n# Example usage:\ns = 'Hello, world!'"], ["\n# <func> # Python \n# Write a python function to shift last element to first position in the given list.\ndef move_first(test_list):\n    if len(test_list) == 1:\n        return test_list\n    else:\n        return [test_list[0], test_list[1:]]\n\n# Example usage:\ntest_list = [1, 2, 3, 4, 5]"], ["\n# <func> # Python \n# Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n    return (l*w*h)\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to generate a two-dimensional array.\ndef multi_list(rownum,colnum):\n    # Define the array\n    arr = []\n    # Loop through each row\n    for I in range(rownum):\n        # Loop through each column\n        for j in range(colnum):\n            # Add the value to the array\n            arr.append(i+j)\n    # Return the array\n    return arr\n\n# Test the function"], ["from operator import itemgetter\r\n\n# <func> # Python \n# Write a function to sort a list of lists by a given index of the inner list.\ndef index_on_inner_list(list_data, index_no):\n    return [item for item in list_data if item[index_no] == 0]\n\n# Example usage:\nlist_data = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nindex_no = 1\nresult = index_on_inner_list(list_data, index_no)"], ["\n# <func> # Python \n# Write a function to find the number of rotations in a circularly sorted array.\ndef find_rotation_count(A):\n    n = len(A)\n    count = 0\n    for I in range(n):\n        for j in range(i, n):\n            if A[j] > A[j-1]:\n                count += 1\n    return count\n\n# Test the function with some sample inputs"], ["\n# <func> # Python \n# Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n):\n    # Convert the input number to binary\n    binary = bin(n)\n    \n    # Check if the binary number is odd\n    odd_bits = binary[::2]\n    \n    # Convert the odd bits to a list\n    odd_bits_list = [int(bit, 2) for bit in odd_bits]\n    \n    # Toggle the odd bits\n    odd_bits_list[::2] = [1 ^ bit for bit in odd_bits_list[::2]]\n    \n    # Convert the list to binary again\n    binary_new = ''.join(map(str, odd_bits_list))\n    \n    # Return the binary number with the odd bits toggled\n    return int(binary_new, 2)\n\n# Test the function"], ["\n# <func> # Python \n# Write a python function to find the frequency of the smallest value in a given array.\ndef frequency_Of_Smallest(n,arr):\n    # Write your code here.\n    freq = {}\n    for I in range(n):\n        if arr[i] not in freq:\n            freq[arr[i]] = 1\n        else:\n            freq[arr[i]] += 1\n    min_freq = min(freq.values())\n    return min_freq\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nfreq = frequency_Of_Smallest(3, arr)"], ["\n# <func> # Python \n# Write a function to find the n'th perrin number using recursion.\ndef get_perrin(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n % 2 == 0:\n        return get_perrin(n // 2)\n    else:\n        return get_perrin(n // 2) + get_perrin(n - n // 2)\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\ndef swap_count(s):\n    # Initialize variables\n    count = 0\n    # Loop through the string\n    for I in range(len(s)):\n        # Check if the current character is a bracket\n        if s[i] == '(' or s[i] == '[' or s[i] == '{':\n            # If it is, swap it with the next character\n            s[i], s[i+1] = s[i+1], s[i]\n        # If the current character is not a bracket, increment the count\n        else:\n            count += 1\n    return count\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to check whether the hexadecimal number is even or odd.\ndef even_or_odd(N):\n    if N % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Call the function with some examples"], ["\n# <func> # Python \n# Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n):\n    # Define a variable to store the highest power of 2 that is less than or equal to n\n    highest_power = 1\n    # Loop through all numbers from 2 to n\n    for I in range(2, n+1):\n        # If the current number is a power of 2, update the highest power\n        if i == int(math.sqrt(i))**2:\n            highest_power = i\n    # Return the highest power of 2 that is less than or equal to n\n    return highest_power\n\n# Call the function with n = 1000"], ["\n# <func> # Python \n# Write a function to find the n'th lucas number.\ndef find_lucas(n):\n    # Define the Lucas number formula.\n    a = 1\n    b = 1\n    for I in range(2, n+1):\n        a, b = b, a + b\n    return a\n\n# Test the function with different values of n."], ["\n# <func> # Python \n# Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\n    for item in list:\n        if type(item) is str:\n            list.insert(0,item)\n    return list\n\n# Example usage:\nlist1 = [1,2,3,4,5]\nlist2 = [6,7,8,9,10]\nlist3 = add_string(list1,list2)"], ["\n# <func> # Python \n# Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\n    # Convert each list to dictionary\n    for x in l1:\n        l2[x] = l2.get(x, {})\n    for y in l2:\n        l3[y] = l3.get(y, {})\n    return l3\n\n# Example usage\nl1 = [1, 2, 3]\nl2 = {'a': 1, 'b': 2}\nl3 = convert_list_dictionary(l1, l2, l3)"], ["\n# <func> # Python \n# Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5))\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\n    max_length = 0\n    max_element = input_list[0]\n    for element in input_list:\n        if element > max_element:\n            max_length = element\n            max_element = element\n    return max_length\n\n# Example usage:\ninput_list = [1, 2, 3, 4, 5]"], ["\n# <func> # Python \n# Write a function to check if given tuple is distinct or not.\ndef check_distinct(test_tup):\n    # check if tuple is empty\n    if len(test_tup) == 0:\n        return True\n    \n    # check if tuple contains duplicate elements\n    for elem in test_tup:\n        if elem in test_tup:\n            return False\n    \n    return True\n\n# Example usage\ndistinct_tuple = (1, 2, 3, 3, 4)"], ["\n# <func> # Python \n# Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Initialize a counter to count the number of occurrences of each character\n    counter = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is not in the counter, add it to the counter\n        if char not in counter:\n            counter[char] = 1\n        # If the counter for the character is greater than 1, break the loop\n        elif counter[char] > 1:\n            break\n    \n    # Return the first non-repeating character\n    return counter.keys()[0]\n\n# Example usage"], ["import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\n\n# <func> # Python \n# Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string):\n    return re.match(regex, string)\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find the median of three specific numbers.\ndef median_numbers(a,b,c):\n    # Write your code here.\n    if a>b and a>c:\n        return a\n    elif b>c and b>a:\n        return b\n    else:\n        return c\n\n# Example usage:\nmedian_numbers(1,2,3) # Output: 2\nmedian_numbers(4,5,6) # Output: 5\nmedian_numbers(7,8,9) # Output: 7\n\n# Testing the function:"], ["\n# <func> # Python \n# Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string\n        num_str = str(num)\n        \n        # Split the string into digits\n        digits = num_str.split()\n        \n        # Loop through each digit in the string\n        for digit in digits:\n            # Convert the digit to an integer\n            digit_int = int(digit)\n            \n            # Add the digit to the sum\n            sum += digit_int\n            \n    return sum\n\n# Example usage\nnums = [123, 456, 789]\nsum_of_digits(nums) # Output: 21"], ["\n# <func> # Python \n# Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n    # Convert tuples to lists\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    \n    # Calculate the bitwise xor of the two tuples\n    xor_list = []\n    for I in range(len(test_tup1)):\n        xor_list.append(test_tup1[i] ^ test_tup2[i])\n    \n    return xor_list\n\n# Example usage\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)"], ["\n# <func> # Python \n# Write a function to extract the frequency of unique tuples in the given list order irrespective.\ndef extract_freq(test_list):\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return freq\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n    # Your code here\n    return tuple(map(lambda x: x + tuple(y) for x, y in zip(test_tup1, test_tup2)))\n\n# Example usage\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)"], ["\n# <func> # Python \n# Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p):\n    \"\"\"\n    This function computes the value of ncr%p.\n    \"\"\"\n    # Check if n is a power of 10\n    if n < 10:\n        return n * r % p\n    # Check if n is a power of 100\n    elif n < 100:\n        return (n // 10) * r % p + n % p\n    # Check if n is a power of 1000\n    elif n < 1000:\n        return (n // 100) * r % p + (n // 10) % p + n % p\n    # Check if n is a power of 10000\n    elif n < 10000:\n        return (n // 1000) * r % p + (n // 100) % p + (n // 10) % p + n % p\n    # Check if n is a power of 100000\n    elif n < 100000:\n        return (n // 10000) * r % p + (n // 1000) % p + (n // 100) % p + (n // 10) % p + n % p\n    # Check if n is a power of 1000000\n    elif n < 1000000:\n        return (n // 100000) * r % p + (n // 10000) % p + (n // 1000) % p + (n // 100) % p + (n // 10) % p + (n // 10) % p + n % p\n    # Check if n is a power of 10000000\n    elif n < 10000000:\n        return (n // 1000000) * r % p + (n // 10000"], ["import re\r\n\n# <func> # Python \n# Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\n    # Replace all non-alphanumeric characters with asterisks to match URL format\n    str = re.sub(r'[^A-Za-z0-9._-]', '*', str)\n    # Split the string into individual components\n    components = str.split('/')\n    # Check if the number of components is equal to 3\n    if len(components) == 3:\n        # Check if the first component is a valid domain name\n        domain = components[0]\n        if not re.match(r'^[a-zA-Z0-9]+(\\.[a-zA-Z]{2,})+$', domain):\n            return False\n        # Check if the second component is a valid subdomain\n        subdomain = components[1]\n        if not re.match(r'^[a-zA-Z0-9]+(\\.[a-zA-Z]{2,})+$', subdomain):\n            return False\n        # Check if the third component is a valid path\n        path = components[2]\n        if not re.match(r'^[a-zA-Z0-9]+(\\.[a-zA-Z]{2,})+$', path):\n            return False\n        # Check if the path is empty\n        if not path:\n            return False\n        # Check if the path contains only letters, numbers, and hyphens\n        for char in path:\n            if not re.match(r'^[a-zA-Z0-9-]+$', char):\n                return False\n        return True\n    else:\n        return False\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to find the minimum of two numbers.\ndef minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b\n\n# Call the function with two numbers"], ["\n# <func> # Python \n# Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex,tuple1):\n    for item in tuplex:\n        if item == tuple1[0]:\n            return True\n    return False\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to find the parity of a given number.\ndef find_Parity(x):\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Call the function with a number"], ["\n# <func> # Python \n# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n    # Check if the number is divisible by 10\n    if n % 10 == 0:\n        return n\n    # If the number is not divisible by 10, find the next bigger number\n    elif n > 0:\n        return n // 10 * 10 + 1\n    else:\n        return n // 10 * 10 + 9\n\n# Example usage"], ["import heapq\r\n\n# <func> # Python \n# Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k):\n    # Initialize the heap with the first array\n    heap = []\n    for num in nums1:\n        heapq.heappush(heap, num)\n    \n    # Initialize the heap with the second array\n    heap = []\n    for num in nums2:\n        heapq.heappush(heap, num)\n    \n    # Initialize the counter\n    count = 0\n    \n    # Loop through the heap\n    while heap:\n        # Pop the smallest element from the heap\n        num = heapq.heappop(heap)\n        \n        # Check if the current element is in the first array\n        if num in nums1:\n            # If it is, push it back to the heap\n            heapq.heappush(heap, num)\n            count += 1\n    \n    # Return the k smallest pairs\n    return count\n\n# Example usage\nk_smallest_pairs([1, 2, 3], [4, 5, 6], 2) # Output: 2\nk_smallest_pairs([1, 2, 3], [4, 5, 6], 3) # Output: 1\nk_smallest_pairs([1, 2, 3], [4, 5, 6], 4) # Output: 0\nk_smallest_pairs([1, 2, 3], [4, 5, 6], 5) # Output: 0\nk_smallest_pairs([1, 2, 3], [4, 5, 6], 6) # Output: 0"], ["\n# <func> # Python \n# Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\n    min_product = 1\n    for I in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][0] < min_product:\n                min_product = list1[i][0] * list1[j][0]\n    return min_product\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n    minval = listval[0]\n    for item in listval:\n        if item < minval:\n            minval = item\n    return minval\n\n# Example usage:\nlistval = [1, 2, 3, 4, 5]\nmin_val(listval) # Output: 1\n\n# Example usage with a list of tuples:\nlist_tuples = [(1, 2), (3, 4), (5, 6)]\nmin_val(list_tuples) # Output: (1, 2)"], ["import re\r\n\n# <func> # Python \n# Write a function to convert the given snake case string to camel case string by using regex.\ndef snake_to_camel(word):\n    return re.sub(r'(?u)[A-Z]+(?=[A-Z][a-z])', lambda m: m.group(0).lower(), word)\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n    return [num for num in l if num % 2 != 0]\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n    # Your code here\n    return None\n\n# Example usage\nlist1 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nn = 3\nresult = extract_nth_element(list1, n)"], ["\n# <func> # Python \n# Write a python function to check whether the value exists in a sequence or not.\ndef overlapping(list1,list2):\n    if len(list1) == len(list2):\n        for I in range(len(list1)):\n            if list1[i] in list2:\n                return True\n        return False\n    else:\n        return False\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr):\n    # Initialize the maximum product to 0\n    max_prod = 0\n    \n    # Loop through the array\n    for I in range(len(arr)):\n        # Calculate the product of the current element and the previous element\n        prod = arr[i] * arr[i - 1]\n        \n        # If the current element is greater than the current maximum product, update the maximum product\n        if prod > max_prod:\n            max_prod = prod\n    \n    # Return the maximum product\n    return max_prod\n\n# Example usage\narr = [1, 2, 3, 4, 5]"], ["MAX = 1000000\r\n\n# <func> # Python \n# Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\ndef breakSum(n):\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -breakSum(-n)\n    else:\n        return n + breakSum(n // 3) + breakSum(n // 3 * 2)\n\n# Testing the function"], ["\n# <func> # Python \n# Write a function to find common first element in given list of tuple.\ndef group_tuples(Input):\n    # Initialize a list to store common elements\n    common_elements = []\n    \n    # Loop through each tuple in the list\n    for tuple in Input:\n        # Check if the tuple is already in the list\n        if tuple in common_elements:\n            # If the tuple is already in the list, skip it\n            continue\n        # Add the tuple to the list of common elements\n        common_elements.append(tuple)\n    \n    # Return the list of common elements\n    return common_elements\n\n# Example usage\nInput = [(1, 2), (2, 3), (3, 4), (1, 2), (2, 3), (3, 4)]\ncommon_elements = group_tuples(Input)"], ["\n# <func> # Python \n# Write a python function to find the sublist having maximum length.\ndef Find_Max(lst):\n    max_len = 0\n    max_lst = []\n    for I in range(len(lst)):\n        if lst[i] > max_lst[0]:\n            max_lst = [lst[i], max_lst[0]]\n            max_len = len(lst[i])\n    return max_lst, max_len\n\n# Example usage:\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nmax_lst, max_len = Find_Max(lst)"], ["\n# <func> # Python \n# Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        total_sum += num\n    return total_sum * len(list1)\n\n# Call the function with a list of numbers"], ["\n# <func> # Python \n# Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n):\n    # Your code here\n    sum = 0\n    for I in range(1, n+1):\n        sum += i**3\n    return sum\n\n# Call the function with n = 5"], ["\n# <func> # Python \n# Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n    return tuple(map(str.join, zip(*test_tup)))\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):\n    total = 0\n    for I in range(1, n+1):\n        total += i**3\n    return total/n\n\n# Call the function with n=5"], ["\n# <func> # Python \n# Write a function to solve gold mine problem.\ndef get_maxgold(gold, m, n):\n    # initialize max gold to 0\n    max_gold = 0\n    \n    # iterate over rows and columns of matrix\n    for I in range(m):\n        for j in range(n):\n            # calculate the sum of gold in the current row and column\n            sum_gold = gold[i][j] + get_maxgold(gold, m-1, n-1)\n            \n            # update max gold if it is greater than current max gold\n            if sum_gold > max_gold:\n                max_gold = sum_gold\n    \n    return max_gold\n\n# test function\nmax_gold = get_maxgold(gold, 3, 4)"], ["\n# <func> # Python \n# Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\n    # Create a list to store the extracted elements\n    rear_elements = []\n    \n    # Loop through each element in the tuple\n    for element in test_tuple:\n        # Extract the rear index element\n        rear_index = len(element) - 1\n        \n        # Append the extracted element to the list\n        rear_elements.append(element[rear_index])\n    \n    # Return the list of extracted elements\n    return rear_elements\n\n# Example usage\ntest_tuple = ('apple', 'banana', 'cherry', 'date')\nrear_elements = extract_rear(test_tuple)"], ["\n# <func> # Python \n# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x):\n    count = 0\n    for I in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], ["\n# <func> # Python \n# Write a function to filter odd numbers using lambda function.\ndef filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]\n\n# Call the function and print the output"], ["import re\r\n\n# <func> # Python \n# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n    # Split the date string into individual components\n    components = dt.split('-')\n    \n    # Check if the date is in the correct format\n    if len(components) == 3:\n        # Check if the month is in the correct format\n        if components[1] in ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']:\n            # Check if the day is in the correct format\n            if components[2] in ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']:\n                # Convert the date to the correct format\n                return f'{components[0]}-{components[1]}-{components[2]}'\n            else:\n                return f'{components[0]}-{components[1]}-{components[2]}'\n        else:\n            return f'{components[0]}-{components[1]}'\n    else:\n        return f'{components[0]}-{components[1]}'\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\n    n = len(my_list)\n    for I in range(n):\n        for j in range(n-i-1):\n            if my_list[j] > my_list[j+1]:\n                temp = my_list[j]\n                my_list[j] = my_list[j+1]\n                my_list[j+1] = temp\n    return my_list\n\n# Testing the function\nmy_list = [5, 2, 1, 3, 4]\nsorted_list = shell_sort(my_list)"], ["\n# <func> # Python \n# Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\n    # Write your code here.\n    return (test_tup1[0], test_tup2[0])\n\n# Test the function with some examples.\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)"], ["\n# <func> # Python \n# Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c):\n    # Calculate the semi-minor and semi-major axes\n    sma = b - a\n    sma_squared = sma ** 2\n    ma = a - sma_squared / (2 * a)\n    \n    # Calculate the directrix\n    directrix = (ma ** 2 - b ** 2) / (4 * a * ma)\n    \n    # Return the directrix\n    return directrix\n\n# Test the function"], ["\n# <func> # Python \n# Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n    # Your code here\n    return list1 and list2\n\n# Example usage\ncommon_elements([1, 2, 3, 4], [1, 2, 3, 4]) # True\ncommon_elements([1, 2, 3, 4], [1, 2, 3]) # False\ncommon_elements([1, 2, 3, 4], [1, 2, 3, 5]) # False\ncommon_elements([1, 2, 3, 4], [1, 2, 3, 5, 6]) # True"], ["\n# <func> # Python \n# Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\n    # Calculate the area of the base and height\n    area1 = base1 * height\n    area2 = base2 * height\n    \n    # Calculate the mean of the two areas\n    mean_area = (area1 + area2) / 2\n    \n    # Calculate the median of the two areas\n    median_area = mean_area\n    \n    # Return the median value\n    return median_area\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\n    # Check if the number is greater than any element in the array\n    for I in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n\n# Example usage\narr = [1, 2, 3, 4, 5]\nnumber = 3"], ["import re\r\n\n# <func> # Python \n# Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n    pattern = r'a(?=b)'\n    return re.match(pattern, text)\n\n# Example usage:\ntext = \"hello world\"\nmatch = text_match_one(text)"], ["\n# <func> # Python \n# Write a python function to find the last digit of a given number.\ndef last_Digit(n):\n    # Your code here\n    return n % 10\n\n# Example usage\nlast_digit(5) # Output: 5\nlast_digit(12345) # Output: 5\nlast_digit(123456) # Output: 6\nlast_digit(1234567) # Output: 7\nlast_digit(12345678) # Output: 8\nlast_digit(123456789) # Output: 9\nlast_digit(1234567890) # Output: 9\nlast_digit(12345678901) # Output: 10\nlast_digit(123456789012) # Output: 11\nlast_digit(1234567890123) # Output: 12\nlast_digit(12345678901234) # Output: 13\nlast_digit(123456789012345) # Output: 14\nlast_digit(1234567890123456) # Output: 15\nlast_digit(12345678901234567) # Output: 16\nlast_digit(123456789012345678) # Output: 17\nlast_digit(1234567890123456789) # Output: 18\nlast_digit(12345678901234567890) # Output: 19\nlast_digit(123456789012345678901) # Output: 20\nlast_digit(1234567890123456789012"], ["\n# <func> # Python \n# Write a python function to print negative numbers in a list.\ndef neg_nos(list1):\n    for num in list1:\n        if num < 0:\n            print(num)\n\n# Call the function with a list of numbers.\nneg_nos([-5, -10, 2, -3, 1])\n\n# Output:\n# -5\n# -10\n# 2\n# -3\n# 1"], ["\n# <func> # Python \n# Write a function to remove odd characters in a string.\ndef remove_odd(str1):\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Initialize an empty list to store the odd characters\n    odd_chars = []\n    \n    # Loop through the string and check if the current character is odd\n    for char in str1:\n        if char not in 'aeiouAEIOU':\n            odd_chars.append(char)\n    \n    # Return the list of odd characters\n    return odd_chars\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to count bidirectional tuple pairs.\ndef count_bidirectional(test_list):\n    count = 0\n    for I in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n\n# Example usage:\ntest_list = [1, 2, 3, 4, 5]"], ["\n# <func> # Python \n# Write a function to convert a list of multiple integers into a single integer.\ndef multiple_to_single(L):\n    # Your code here\n    return L[0]\n\n# Example usage\nmultiple_to_single([1, 2, 3, 4, 5]) # Output: 15"], ["import re\r\n\n# <func> # Python \n# Write a function to find all adverbs and their positions in a given sentence.\ndef find_adverb_position(text):\n    # Split the text into words\n    words = text.split()\n\n    # Create a dictionary to store adverbs and their positions\n    adverbs = {}\n\n    # Loop through each word in the text\n    for word in words:\n        # Split the word into parts\n        parts = word.split()\n\n        # Check if the word is an adverb\n        if parts[0] == 'adverb':\n            # Add the adverb to the dictionary\n            adverbs[parts[0]] = parts[1:]\n\n    # Return the dictionary\n    return adverbs\n\n# Example usage\nadverbs = find_adverb_position('The cat jumped over the moon.')"], ["\n# <func> # Python \n# Write a function to find the surface area of a cube.\ndef surfacearea_cube(l):\n    return (l * l * l)\n\n# Test the function"], ["from array import array\r\n\n# <func> # Python \n# Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count\n\n# Test the function with some sample inputs"], ["\n# <func> # Python \n# Write a python function to find the largest negative number from the given list.\ndef largest_neg(list1):\n    largest_num = list1[0]\n    for num in list1:\n        if num < 0:\n            largest_num = num\n    return largest_num\n\n# Call the function with the list of numbers.\nlargest_neg([-2, -1, 0, 1, 2])"], ["\n# <func> # Python \n# Write a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n    # Initialize a new list to store trimmed tuples\n    trimmed_list = []\n    \n    # Loop through each tuple in the list\n    for tuple_ in test_list:\n        # Check if the length of the tuple is less than k\n        if len(tuple_) < K:\n            # If it is, add the tuple to the trimmed list\n            trimmed_list.append(tuple_)\n    \n    # Return the trimmed list\n    return trimmed_list\n\n# Example usage\ntrimmed_list = trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3)"], ["\n# <func> # Python \n# Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n    # Initialize the result tuple\n    result_tup = []\n    \n    # Loop through the first tuple\n    for I in range(len(test_tup1)):\n        # Multiply the corresponding elements in the second tuple\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    \n    # Return the result tuple\n    return result_tup\n\n# Example usage\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\nresult_tup = index_multiplication(test_tup1, test_tup2)"], ["from collections import Counter \r\n\n# <func> # Python \n# Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst):\n    count = Counter(lst)\n    for elem in tup:\n        if elem in count:\n            count[elem] += 1\n    return count\n\n# Example usage:\ntup = (1, 2, 3, 4, 5)\nlst = [1, 2, 3, 4, 5]\ncounted_lst = count_Occurrence(tup, lst)"], ["\n# <func> # Python \n# Write a function to find cubes of individual elements in a list using lambda function.\ndef cube_nums(nums):\n    return [x**3 for x in nums]\n\n# Call the function with a list of numbers"], ["\n# <func> # Python \n# Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n):\n    # Define the sum of perrin numbers formula\n    sum_perrin = 0\n    # Loop through each number in the range\n    for I in range(1, n+1):\n        # Calculate the sum of the first I terms of the Perrin sequence\n        sum_perrin += (i * (i+1)) // 2\n    return sum_perrin\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to check whether the triangle is valid or not if 3 points are given.\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    if x1 == x2 and y1 == y2 and x3 == y3:\n        return True\n    else:\n        return False\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n    return str[0:l]\n\n# Example usage:\nstr_list = [\"apple\", \"banana\", \"cherry\", \"date\"]"], ["import re\r\n\n# <func> # Python \n# Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)\n\n# Example usage:\ntext = \"This is a test string with some spaces and some tabs.\""], ["\n# <func> # Python \n# Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount):\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return None\n\n# Example usage"], ["import math \r\n\n# <func> # Python \n# Write a python function to find the sum of even factors of a number.\ndef sumofFactors(n):\n    # Define a list to store the even factors of n.\n    even_factors = []\n    \n    # Define a loop to iterate over all numbers from 2 to n.\n    for I in range(2, n+1):\n        # Check if the current number is even.\n        if I % 2 == 0:\n            # If it is, add it to the list of even factors.\n            even_factors.append(i)\n    \n    # Return the sum of the even factors.\n    return sum(even_factors)\n\n# Test the function with some examples."], ["import re\r\n\n# <func> # Python \n# Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n    return re.search(r'\\bz\\b', text) is not None\n\n# Example usage:\ntext = \"Hello, world! z is a great word.\""], ["\n# <func> # Python \n# Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n    # Check if the month number is divisible by 4\n    if monthnum2 % 4 == 0:\n        # Check if the month number is divisible by 100\n        if monthnum2 % 100 == 0:\n            # Check if the month number is divisible by 400\n            if monthnum2 % 400 == 0:\n                # If all the conditions are met, the month number is a leap year\n                return True\n            else:\n                # If any of the conditions are not met, the month number is not a leap year\n                return False\n        else:\n            # If the month number is not divisible by 100, it is not a leap year\n            return False\n    else:\n        # If the month number is not divisible by 4, it is a leap year\n        return True\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to reverse strings in a given list of string values.\ndef reverse_string_list(stringlist):\n    \"\"\"\n    This function takes a list of strings as input and returns a new list with the strings reversed.\n    \"\"\"\n    # Convert the list to a string array\n    string_array = [str(x) for x in stringlist]\n    \n    # Convert the string array to a list of strings\n    reversed_string_list = [x.strip() for x in string_array]\n    \n    # Return the reversed string list\n    return reversed_string_list\n\n# Example usage\nreverse_string_list(['apple', 'banana', 'cherry'])\n# Output: ['cherry', 'banana', 'apple']"], ["\n# <func> # Python \n# Write a python function to find the sublist having minimum length.\ndef Find_Min(lst):\n    min_length = max_length = lst[0]\n    for I in range(1, len(lst)):\n        if lst[i] < min_length:\n            min_length = lst[i]\n        elif lst[i] > max_length:\n            max_length = lst[i]\n    return min_length, max_length\n\n# Example usage\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nmin_length, max_length = Find_Min(lst)"], ["\n# <func> # Python \n# Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n    return l*b\n\n# Call the function with the values of the length and width of the rectangle.\nrectangle_area(5,8)"], ["import re\r\n\n# <func> # Python \n# Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n    # Use re.sub() to replace all uppercase characters with a special symbol.\n    return re.sub(r'[A-Z]', '__', str1)\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to get the first element of each sublist.\ndef Extract(lst):\n    return lst[0]\n\n# Call the function with a list of strings.\nlst = ['apple', 'banana', 'cherry', 'date']"], ["\n# <func> # Python \n# Write a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\n    # Base case: if the list is empty, return an empty list\n    if len(list1) == 0:\n        return []\n    \n    # Recursive case: find all possible combinations of the remaining elements\n    remaining_list = list1[:-1]\n    remaining_combinations = combinations_list(remaining_list)\n    return remaining_combinations + [list1[-1]]\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\n    # Initialize max product to 1\n    max_product = 1\n    \n    # Initialize start and end indices of the current max product\n    start = 0\n    end = 0\n    \n    # Loop through the array\n    for I in range(len(arr)):\n        # If the current element is greater than the current max product, update max product\n        if arr[i] > max_product:\n            max_product = arr[i]\n            end = i\n            \n        # If the current element is less than the current max product, update start index\n        if arr[i] < max_product:\n            start = i\n            \n    # Return the maximum product subarray\n    return max_product * (end - start + 1)\n\n# Example usage\narr = [1, 3, 5, 4, 2]"], ["\n# <func> # Python \n# Write a function to check if all values are same in a dictionary.\ndef check_value(dict, n):\n    for key in dict.keys():\n        if dict[key] != n:\n            return False\n    return True\n\n# Example usage\ncheck_value({'a': 1, 'b': 2}, 1) # True\ncheck_value({'a': 1, 'b': 2}, 3) # False\ncheck_value({'a': 1, 'b': 3}, 1) # False\ncheck_value({'a': 1, 'b': 2}, 4) # False"], ["\n# <func> # Python \n# Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}\n\n# Example usage\nmy_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}"], ["\n# <func> # Python \n# Write a function to find the peak element in the given array.\ndef find_peak_util(arr, low, high, n):\n    # Base case: if the array is empty or has only one element, return the first element\n    if len(arr) == 1:\n        return arr[0]\n    \n    # Base case: if the array is empty or has only one element, return the first element\n    elif len(arr) == 2:\n        if arr[low] > arr[high]:\n            return arr[low]\n        else:\n            return arr[high]\n    \n    # Recursive case: find the peak element in the subarray [low, mid) and [mid+1, high)\n    mid = (low + high) // 2\n    if arr[mid] > arr[mid + 1]:\n        return find_peak_util(arr, low, mid, n)\n    else:\n        return find_peak_util(arr, mid + 1, high, n)\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nn = len(arr)\npeak = find_peak_util(arr, 0, n - 1, n)"], ["\n# <func> # Python \n# Write a python function to convert decimal number to octal number.\ndef decimal_to_Octal(deciNum):\n    # Convert decimal to octal\n    octal = \"\"\n    for I in range(len(deciNum)):\n        octal += str(int(deciNum[i]) * 8)\n    return octal\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ):\n    # Initialize max product to 1\n    max_prod = 1\n    \n    # Loop through the array\n    for I in range(n):\n        # Find the maximum product of the subsequence\n        max_prod = max(max_prod, arr[i] * arr[i+1])\n        \n    return max_prod\n\n# Example usage\narr = [1, 2, 3, 4, 5]\nn = 3\nmax_prod = max_product(arr, n)"], ["\n# <func> # Python \n# Write a function to find the maximum profit earned from a maximum of k stock transactions\ndef max_profit(price, k):\n    # Initialize variables\n    max_profit = 0\n    for I in range(1, k+1):\n        # Calculate the maximum profit from the ith transaction\n        profit = max(price[i-1], price[i]) - price[i]\n        # Update the maximum profit\n        max_profit = max(max_profit, profit)\n    return max_profit\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to find the pairwise addition of the elements of the given tuples.\ndef add_pairwise(test_tup):\n    # Create a list to store the pairwise addition\n    pairwise_sum = []\n    \n    # Loop through each tuple in the test_tup list\n    for I in range(len(test_tup)):\n        # Add the element at index I to the list of pairwise sums\n        pairwise_sum.append(test_tup[i][0] + test_tup[i][1])\n    \n    # Return the list of pairwise sums\n    return pairwise_sum\n\n# Example usage\ntest_tup = [(1, 2), (3, 4), (5, 6), (7, 8)]\npairwise_sum = add_pairwise(test_tup)"], ["\n# <func> # Python \n# Write a python function to find remainder of array multiplication divided by n.\ndef find_remainder(arr, lens, n):\n    # initialize remainder variable\n    remainder = 0\n    \n    # iterate through each element in the array\n    for I in range(len(arr)):\n        # calculate remainder of each element divided by n\n        remainder += arr[i] % n\n        \n    # return remainder\n    return remainder\n\n# test function\narr = [1, 2, 3, 4, 5]\nlens = [2, 3, 4]\nn = 5"], ["\n# <func> # Python \n# Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l):\n    # Write your code here\n    if len(l) < 2:\n        return False\n    else:\n        # Initialize a counter variable to count the number of occurrences of consecutive numbers\n        count = 0\n        # Loop through the list and check if the current number is consecutive with the previous number\n        for I in range(1, len(l)):\n            if l[i] == l[i-1]:\n                count += 1\n        # If the count is greater than 1, then the list contains consecutive numbers\n        return count > 1\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n    # Create a list to store the intersection of elements\n    intersection = []\n    \n    # Loop through the first list\n    for element1 in test_list1:\n        # Loop through the second list\n        for element2 in test_list2:\n            # Check if the element is present in the first list\n            if element1 == element2:\n                # If the element is present, add it to the intersection list\n                intersection.append(element1)\n    \n    # Return the intersection list\n    return intersection\n\n# Example usage\ntest_list1 = [1, 2, 3, 4, 5]\ntest_list2 = [2, 3, 4, 5, 6]\nintersection = tuple_intersection(test_list1, test_list2)"], ["\n# <func> # Python \n# Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n    return str1.replace(ch,newch)\n\n# Example usage\nstr1 = \"Hello, world!\"\nnew_str = replace_char(str1, \"h\", \"e\")"], ["from collections import Counter\r\n\n# <func> # Python \n# Write a function to sort counter by value.\ndef sort_counter(dict1):\n    # Sort the dictionary by value\n    sorted_dict = {}\n    for key, value in dict1.items():\n        sorted_dict[value] = key\n    return sorted_dict\n\n# Example usage\ncounter = Counter({1: 1, 2: 2, 3: 3})\nsorted_counter = sort_counter(counter)"], ["\n# <func> # Python \n# Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\n    # initialize variables\n    max_num = nums[0]\n    min_num = nums[0]\n    \n    # iterate through the array\n    for num in nums:\n        # if the current number is greater than the current max, update max\n        if num > max_num:\n            max_num = num\n        # if the current number is less than the current min, update min\n        if num < min_num:\n            min_num = num\n    \n    # return the sum of the largest and smallest values\n    return max_num + min_num\n\n# test the function\nnums = [5, 10, 20, 30, 40]"], ["\n# <func> # Python \n# Write a python function to convert the given string to lower case.\ndef is_lower(string):\n    return string.lower()\n\n# Example usage"], ["import re\r\n\n# <func> # Python \n# Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n    return ''.join(c for c in str1 if c.islower())\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to find the first digit of a given number.\ndef first_Digit(n):\n    # Your code here\n    return n % 10\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\n    # Initialize a list to store the maximum occurring character\n    max_occuring_char = \"\"\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the current character is not the maximum character, update the maximum character\n        if char != max_occuring_char:\n            max_occuring_char = char\n    \n    # Return the maximum occurring character\n    return max_occuring_char\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to determine if there is a subset of the given set with sum equal to the given sum.\ndef is_subset_sum(set, n, sum):\n    # Base case: if the set is empty, there is no subset with sum equal to the given sum\n    if len(set) == 0:\n        return False\n    \n    # Base case: if the sum is equal to the given sum, there is a subset with sum equal to the given sum\n    if sum == set:\n        return True\n    \n    # Recursive case: find the subset with sum equal to the given sum\n    for I in range(len(set)):\n        if set[i] == sum:\n            return True\n    \n    # If the subset with sum equal to the given sum is not found, return False\n    return False\n\n# Example usage:"], ["import re \r\n\n# <func> # Python \n# Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text):\n    # Define regex pattern to match upper case letters followed by lower case letters\n    pattern = re.compile(r'([A-Z]+[a-z]+)')\n    # Find all matches in the given string using the pattern\n    matches = pattern.findall(text)\n    # Return list of matches\n    return matches\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x):\n    # Write your code here.\n    for I in range(1, x+1):\n        if x*i == i:\n            return i\n    return -1\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to remove the matching tuples from the given two tuples.\ndef remove_matching_tuple(test_list1, test_list2):\n    # Create a dictionary to store the matching tuples\n    matching_tuples = {}\n    \n    # Loop through each element in the first list\n    for element1 in test_list1:\n        # Loop through each element in the second list\n        for element2 in test_list2:\n            # If the two elements match, add them to the matching tuples dictionary\n            if element1 == element2:\n                matching_tuples[element1] = element2\n    \n    # Return the matching tuples dictionary\n    return matching_tuples\n\n# Example usage\ntest_list1 = [('apple', 1), ('banana', 2), ('orange', 3)]\ntest_list2 = [('banana', 2), ('apple', 1), ('orange', 3)]\nmatching_tuples = remove_matching_tuple(test_list1, test_list2)"], ["\n# <func> # Python \n# Write a function to find the largest palindromic number in the given array.\ndef is_palindrome(n):\n    # Check if the input array is empty\n    if len(n) == 0:\n        return False\n    \n    # Initialize a variable to store the largest palindrome\n    largest_palindrome = n[0]\n    \n    # Loop through the array\n    for I in range(1, len(n)):\n        # Check if the current element is a palindrome\n        if n[i] == n[i-1]:\n            # If it is, update the largest palindrome\n            largest_palindrome = n[i]\n            \n    # Return the largest palindrome\n    return largest_palindrome\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to compute binomial probability for the given number.\ndef nCr(n, r):\n    if r == 0:\n        return 1\n    elif r == 1:\n        return n\n    else:\n        return n * (n - r) // (r * (r - 1))\n\n# Example usage:\nnCr(10, 3) # Output: 30\nnCr(10, 5) # Output: 150\nnCr(10, 1) # Output: 1"], ["\n# <func> # Python \n# Write a function to sort a list of tuples in increasing order by the last element in each tuple.\ndef sort_tuple(tup):\n    return tup[::-1]\n\n# Example usage:\ntup_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nsorted_tup_list = sort_tuple(tup_list)"], ["import math\r\n\n# <func> # Python \n# Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n    # Calculate the length of the base and height of the pentagon\n    base = math.sqrt(5)*a\n    height = base/2\n    # Calculate the area of the pentagon\n    area = base*height\n    return area\n\n# Test the function with some sample inputs"], ["\n# <func> # Python \n# Write a python function to find the frequency of the largest value in a given array.\ndef frequency_Of_Largest(n,arr):\n    # Write your code here\n    largest = arr[0]\n    count = 1\n    for I in range(1,n):\n        if arr[i] > largest:\n            largest = arr[i]\n            count = 1\n        else:\n            count += 1\n    return count\n\n# Example usage\nlargest_value = frequency_Of_Largest(5, [1, 2, 3, 4, 5]) # Output: 2\nlargest_value = frequency_Of_Largest(3, [1, 2, 3, 4, 5]) # Output: 1\nlargest_value = frequency_Of_Largest(2, [1, 2, 3, 4, 5]) # Output: 1\nlargest_value = frequency_Of_Largest(1, [1, 2, 3, 4, 5]) # Output: 1\nlargest_value = frequency_Of_Largest(0, [1, 2, 3, 4, 5]) # Output: 0"], ["\n# <func> # Python \n# Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\n    # Create a dictionary to store the pairs\n    pairs = {}\n    \n    # Loop through the list\n    for I in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the current pair is symmetric\n            if test_list[i] == test_list[j]:\n                # If so, add it to the dictionary\n                pairs[tuple(test_list[i])] = test_list[i]\n    \n    # Return the pairs\n    return pairs\n\n# Example usage\ntest_list = [1, 2, 3, 4, 5]\nsymmetric_pairs = extract_symmetric(test_list)"], ["import math\r\n\n# <func> # Python \n# Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\n    # Define the sum of geometric progression series formula\n    sum = 0\n    for I in range(n):\n        sum += a**i / (i+1)\n    return sum\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to search an element in the given array by using binary search.\ndef binary_search(item_list,item):\n    low = 0\n    high = len(item_list)-1\n    while low <= high:\n        mid = (low + high) // 2\n        if item_list[mid] == item:\n            return mid\n        elif item_list[mid] < item:\n            low = mid+1\n        else:\n            high = mid-1\n    return -1\n\n# Example usage\narr = [1, 3, 5, 7, 9, 11, 13, 15]\nitem = 13\nresult = binary_search(arr,item)"], ["import math\r\n\n# <func> # Python \n# Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    # Define the hexagon coordinates\n    hex_coords = []\n    for I in range(6):\n        x = startx + (endx - startx) * math.cos(i * math.pi / 6)\n        y = starty + (endy - starty) * math.sin(i * math.pi / 6)\n        hex_coords.append((x, y))\n    return hex_coords\n\n# Call the function\nhex_coords = calculate_polygons(startx, starty, endx, endy, radius)"], ["\n# <func> # Python \n# Write a function to convert the given binary tuple to integer.\ndef binary_to_integer(test_tup):\n    # Convert binary to decimal\n    decimal = 0\n    for I in range(len(test_tup)):\n        decimal += int(test_tup[i]) * pow(2, len(test_tup)-i-1)\n    return decimal\n\n# Example usage\nbinary_to_integer((1, 1, 1, 1)) # Output: 65536\nbinary_to_integer((1, 1, 1, 0)) # Output: 16777216\nbinary_to_integer((1, 1, 0, 1)) # Output: 32768\nbinary_to_integer((1, 0, 1, 1)) # Output: 65536\nbinary_to_integer((1, 0, 1, 0)) # Output: 16777216\nbinary_to_integer((1, 0, 0, 1)) # Output: 32768"], ["import re\r\n\n# <func> # Python \n# Write a function to remove lowercase substrings from a given string by using regex.\ndef remove_lowercase(str1):\n    return re.sub(r'\\b[a-z]\\w*', '', str1)\n\n# Example usage:"], ["import heapq as hq\r\n\n# <func> # Python \n# Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_smallest(nums,n):\n    # Create a heap queue with n elements\n    q = []\n    for I in range(n):\n        q.append(nums[i])\n    # Create a heap with the elements in the queue\n    heapq.heapify(q)\n    # Find the smallest element in the heap\n    return q[0]\n\n# Example usage:\nnums = [1, 2, 3, 4, 5]\nsmallest = heap_queue_smallest(nums,len(nums))"], ["import math\r\n\n# <func> # Python \n# Write a function to find the surface area of a cone.\ndef surfacearea_cone(r,h):\n    # Calculate the base and height of the cone\n    base = math.sqrt(r**2 + h**2)\n    height = h\n    # Calculate the surface area of the cone\n    surfacearea = 2*base*math.tan(math.radians(h))\n    return surfacearea\n\n# Test the function"], ["\n# <func> # Python \n# Write a python function to find gcd of two positive integers.\ndef gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\n# Testing the function"], ["\n# <func> # Python \n# Write a function to find the diameter of a circle.\ndef diameter_circle(r):\n    return math.sqrt(r * r)\n\n# Test the function with some examples"], ["\n# <func> # Python \n# Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\n    return ' '.join(list)\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to find common divisor between two numbers in a given pair.\ndef ngcd(x,y):\n    while y != 0:\n        z = x % y\n        x = y\n        y = z\n    return x\n\n# Example usage:\nx = 10\ny = 5"], ["\n# <func> # Python \n# Write a python function to find remainder of two numbers.\ndef find(n,m):\n    if n%m != 0:\n        return n\n    else:\n        return m\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to add consecutive numbers of a given list.\ndef add_consecutive_nums(nums):\n    # Initialize a list to store the sum of consecutive numbers\n    sum_consecutive_nums = []\n    \n    # Loop through the list and add the current number to the sum_consecutive_nums list\n    for num in nums:\n        if num not in sum_consecutive_nums:\n            sum_consecutive_nums.append(num)\n    \n    # Return the sum of the list of consecutive numbers\n    return sum_consecutive_nums\n\n# Example usage"], ["\n# <func> # Python \n# Write a python function to find the cube sum of first n natural numbers.\ndef sum_Of_Series(n):\n    sum = 0\n    for I in range(1, n+1):\n        sum += i**3\n    return sum\n\n# Call the function with n = 5"], ["\n# <func> # Python \n# Write a function to move all zeroes to the end of the given array.\ndef re_order(A):\n    # Write your code here\n    return A\n\n# Example usage:\narr = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nre_order(arr) # Output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]"], ["\n# <func> # Python \n# Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k):\n    # Write your code here.\n    # Define the function to calculate the permutation coefficient\n    def permutation_coefficient(n, k):\n        # Define the function to calculate the permutation coefficient\n        if n == 0:\n            return 1\n        elif k == 0:\n            return 1\n        elif n == k:\n            return 1\n        else:\n            return n * permutation_coefficient(n-1, k-1)\n    return permutation_coefficient(n, k)\n\n# Example usage"], ["\n# <func> # Python \n# Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n    # Create a list to store the removed words\n    removed_words = []\n    \n    # Loop through the list and remove the specified words\n    for word in list1:\n        if word not in removewords:\n            removed_words.append(word)\n    \n    # Return the list with the removed words\n    return removed_words\n\n# Example usage\nlist1 = ['apple', 'banana', 'cherry', 'date', 'grape']\nremove_words(list1, ['apple', 'banana', 'date'])"], ["\n# <func> # Python \n# Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\n    if len(l1) != len(l2):\n        return False\n    else:\n        for I in range(len(l1)):\n            if l1[i] != l2[i]:\n                return False\n        return True\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to find the average of odd numbers till a given odd number.\ndef average_Odd(n):\n    # Define a variable to store the sum of odd numbers\n    sum_odd = 0\n    # Define a variable to store the sum of even numbers\n    sum_even = 0\n    # Define a variable to store the sum of all numbers\n    sum_total = 0\n    # Define a loop to iterate through odd numbers from 1 to n\n    for I in range(1, n+1):\n        # If the current number is odd, add it to the sum_odd variable\n        if I % 2 == 1:\n            sum_odd += i\n        # If the current number is even, add it to the sum_even variable\n        elif I % 2 == 0:\n            sum_even += i\n        # Add the current number to the sum_total variable\n        sum_total += i\n    # Calculate the average of odd numbers using the sum_odd variable\n    average_odd = sum_odd / n\n    # Calculate the average of even numbers using the sum_even variable\n    average_even = sum_even / n\n    # Calculate the average of all numbers using the sum_total variable\n    average_total = sum_total / n\n    # Return the average of odd numbers and even numbers\n    return average_odd, average_even, average_total\n\n# Call the function with n = 10\naverage_odd, average_even, average_total = average_Odd(10)"], ["\n# <func> # Python \n# Write a function to find the number of subsequences having product smaller than k for the given non negative array.\ndef no_of_subsequences(arr, k):\n    # Initialize the count variable\n    count = 0\n    \n    # Loop through the array\n    for I in range(len(arr)):\n        \n        # Initialize the product variable\n        product = 1\n        \n        # Loop through the array\n        for j in range(i+1, len(arr)):\n            \n            # Calculate the product of the current and next elements\n            product *= arr[j]\n            \n            # If the product is less than k, stop the loop\n            if product < k:\n                break\n            \n            # Increment the count variable\n            count += 1\n            \n        # If the product is less than k, stop the loop\n        if product < k:\n            break\n        \n    # Return the count variable\n    return count\n\n# Example usage\narr = [1, 2, 3, 4, 5]\nk = 3"]]