[["//Check if in given list of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nbool has_close_elements(List<double> numbers, double threshold) {\n  if (numbers.length != 2) {\n    return false;\n  }\n  double difference = numbers[1] - numbers[0];\n  return difference <= threshold;"], ["//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the list of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nList<String> separate_paren_groups(String paren_string) {\n  List<String> groups = [];\n  List<String> open_braces = [];\n  List<String> close_braces = [];\n  List<String> balanced_braces = [];\n  List<String> balanced_braces_with_spaces = [];\n  List<String> balanced_braces_without_spaces = [];\n\n  for (int I = 0; I < paren_string.length; i++) {\n    if (paren_string[i] == '(') {\n      open_braces.add(paren_string[i]);\n    } else if (paren_string[i] == ')') {\n      if (open_braces.isNotEmpty) {\n        balanced_braces.add(paren_string.substring(0, i) + paren_string.substring(i + 1));\n        open_braces.removeAt(open_braces.lastIndexOf(paren_string[i]));\n      }\n    } else if (paren_string[i] == '(' && paren_string[i + 1] == ')') {\n      if (open_braces.isNotEmpty) {\n        balanced_braces_with_spaces.add(paren_string.substring(0, i) + paren_string.substring(i + 1));\n        open_braces.removeAt(open_braces.lastIndexOf(paren_string[i]));\n      }\n    } else if (paren_string[i] == '(' && paren_string[i + 1] == '(') {\n      if (open_braces.isNotEmpty) {\n"], ["//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\ndouble truncate_number(double number) {\n  int integer = (int)number;\n  double decimal = number - integer;\n  return decimal;"], ["//You're given a list of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nbool below_zero(List<int> operations) {\n  int balance = 0;\n  for (int op in operations) {\n    if (op == 1) {\n      balance += 1;\n    } else if (op == -1) {\n      balance -= 1;\n    } else if (op == 2) {\n      balance += 2;\n    } else if (op == -2) {\n      balance -= 2;\n    } else if (op == 3) {\n      balance += 3;\n    } else if (op == -3) {\n      balance -= 3;\n    } else {\n      return false;\n    }\n  }\n  return balance == 0;"], ["//For a given list of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\ndouble mean_absolute_deviation(List<double> numbers) {\n  double sum = 0.0;\n  for (double num in numbers) {\n    sum += abs(num - numbers.mean());\n  }\n  return sum / numbers.length;"], ["//Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nList<int> intersperse(List<int> numbers, int delimeter) {\n  List<int> result = [];\n  for (int I = 0; I < numbers.length; i++) {\n    result.add(numbers[i]);\n    result.add(delimeter);\n  }\n  return result;"], ["//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nList<int> parse_nested_parens(String paren_string) {\n  List<int> nesting_levels = [];\n  List<int> depths = [];\n  List<int> groups = [];\n  List<String> parens = [];\n  for (int I = 0; I < paren_string.length; i++) {\n    if (paren_string[i] == '(') {\n      groups.add(paren_string[i..]);\n      depths.add(0);\n    } else if (paren_string[i] == ')') {\n      String group = paren_string.substring(0, i);\n      String depth = groups[depths.last];\n      groups.removeAt(depths.last);\n      depths.add(depth);\n      parens.add(group);\n    } else if (paren_string[i] == '(') {\n      groups.add(paren_string[i..]);\n      depths.add(0);\n    } else if (paren_string[i] == ')') {\n      String group = paren_string.substring(0, i);\n      String depth = groups[depths.last];\n      groups.removeAt(depths.last);\n      depths.add(depth);\n      parens.add(group);\n    }\n  }\n  List<int> max_depth = [];\n  for (int I = 0; I < parens.length; i++) {\n    if (depths[i] > max_depth.length) {\n      max_depth = [depths[i]];\n    }\n    max_depth[i] = Math.max(max_depth[i], depths[i]);\n  }\n  List<int> max_nest"], ["//Filter an input list of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nList<String> filter_by_substring(List<String> strings, String substring) {\n  return strings.where((String str) {\n    return str.contains(substring);\n  }).toList();"], ["//For a given list of integers, return a record consisting of a sum and a product of all the integers in a list.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// (0, 1)\n// >>> sum_product([1, 2, 3, 4])\n// (10, 24)\n(int, int) sum_product(List<int> numbers) {\n  int sum = 0;\n  int product = 1;\n  for (int num in numbers) {\n    sum += num;\n    product *= num;\n  }\n  return (sum, product);"], ["//From a given list of integers, generate a list of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nList<int> rolling_max(List<int> numbers) {\n  List<int> max_list = [];\n  int max_index = 0;\n  for (int I = 1; I < numbers.length; i++) {\n    if (numbers[i] > numbers[max_index]) {\n      max_list.add(numbers[i]);\n      max_index = i;\n    }\n  }\n  return max_list;"], ["//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nString make_palindrome(String string) {\n  int length = string.length;\n  String prefix = \"\";\n  String suffix = \"\";\n  for (int I = 0; I < length; i++) {\n    if (string[i] == string[i + 1]) {\n      prefix += string[i];\n      suffix += string[i];\n    } else {\n      prefix += string[i];\n      suffix += string[i + 1];\n    }\n  }\n  String palindrome = prefix + suffix;\n  int length_palindrome = palindrome.length;\n  String reverse_palindrome = \"\";\n  for (int I = 0; I < length_palindrome; i++) {\n    reverse_palindrome += palindrome[i];\n  }\n  return reverse_palindrome;"], ["//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nString string_xor(String a, String b) {\n  String result = \"\";\n  for (int I = 0; I < a.length; i++) {\n    if (a[i] == b[i]) {\n      result += \"1\";\n    } else {\n      result += \"0\";\n    }\n  }\n  return result;"], ["//Out of list of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return null in case the input list is empty.\n// >>> longest([])\n// null\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nString? longest(List<String> strings) {\n  if (strings.isEmpty) {\n    return null;\n  }\n  final longest = strings.first;\n  for (var I = 1; I < strings.length; i++) {\n    if (longest.length > strings[i].length) {\n      longest = strings[i];\n    }\n  }\n  return longest;"], ["//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nint greatest_common_divisor(int a, int b) {\n  if (b == 0) {\n    return a;\n  }\n  int gcd = greatest_common_divisor(b, a % b);\n  return gcd;"], ["//Return list of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nList<String> all_prefixes(String string) {\n  List<String> prefixes = [];\n  int length = string.length;\n  int start = 0;\n  while (start < length) {\n    String prefix = string.substring(start, length);\n    if (prefix.isEmpty) {\n      prefixes.add(prefix);\n    } else {\n      prefixes.add(prefix);\n      start = prefix.length;\n    }\n  }\n  return prefixes;"], ["//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nString string_sequence(int n) {\n  String result = \"\";\n  for (int I = 0; I <= n; i++) {\n    result += \" \" + i;\n  }\n  return result;"], ["//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nint count_distinct_characters(String string) {\n    int count = 0;\n    for (int I = 0; I < string.length(); i++) {\n        char c = string.charAt(i);\n        if (Character.isLetterOrDigit(c)) {\n            count++;\n        }\n    }\n    return count;"], ["//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return list of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nList<int> parse_music(String music_string) {\n  List<int> beats = [];\n  int current_beat = 0;\n  int current_note = 0;\n  int current_octave = 0;\n  for (int I = 0; I < music_string.length; i++) {\n    if (music_string[i] == 'o') {\n      current_note = 12;\n      current_octave = 0;\n    } else if (music_string[i] == 'o|') {\n      current_note = 12;\n      current_octave = 1;\n    } else if (music_string[i] == 'o|.') {\n      current_note = 12;\n      current_octave = 2;\n    } else if (music_string[i] == 'o|.|') {\n      current_note = 12;\n      current_octave = 3;\n    } else if (music_string[i] == 'o|.|.') {\n      current_note = 12;\n      current_octave = 4;\n    } else if (music_string[i] == 'o|.|.|') {\n      current_note = 12;\n      current_octave = 5;\n    } else if (music_string[i] == 'o|.|.|.') {\n      current_note = 12;\n      current_octave = 6"], ["//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nint how_many_times(String string, String substring) {\n  int count = 0;\n  for (int I = 0; I < string.length; i++) {\n    if (string.charAt(i) == substring.charAt(0)) {\n      count++;\n      for (int j = I + 1; j < string.length; j++) {\n        if (string.charAt(j) == substring.charAt(0)) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;"], ["//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nString sort_numbers(String numbers) {\n  List<int> numbersList = numbers.split(\" \").map((s) => int.parse(s)).toList();\n  numbersList.sort();\n  return numbersList.join(\" \");"], ["//From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// (2.0, 2.0)\n(double, double) find_closest_elements(List<double> numbers) {\n  List<double> sorted_numbers = numbers.sort((a, b) => a.compareTo(b));\n  double min_distance = double.max(sorted_numbers[0], sorted_numbers[1]);\n  double max_distance = double.min(sorted_numbers[0], sorted_numbers[1]);\n  return (min_distance, max_distance);"], ["//Given list of numbers (of at least two elements), apply a linear transform to that list,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nList<double> rescale_to_unit(List<double> numbers) {\n  List<double> rescaled = List<double>.from(numbers);\n  double min = rescaled.first;\n  double max = rescaled.last;\n  for (int I = 1; I < rescaled.length; i++) {\n    if (rescaled[i] < min) {\n      min = rescaled[i];\n    }\n    if (rescaled[i] > max) {\n      max = rescaled[i];\n    }\n  }\n  return List<double>.from(rescaled.sublist(0, 2));"], ["//Filter given list of any dartthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nList<int> filter_integers(List values) {\n  return values.where((value) => value is int).cast<int>();"], ["//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nint strlen(String string) {\n  int length = 0;\n  for (int I = 0; I < string.length; i++) {\n    length++;\n  }\n  return length;"], ["//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nint largest_divisor(int n) {\n  int max = 0;\n  for (int I = 1; I <= n; i++) {\n    if (n % I == 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;"], ["//Return list of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nList<int> factorize(int n) {\n  List<int> factors = [];\n  int current = 1;\n  while (n % current == 0) {\n    factors.add(current);\n    n /= current;\n  }\n  return factors;"], ["//From a list of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nList<int> remove_duplicates(List<int> numbers) {\n  List<int> uniqueNumbers = [];\n  for (int number in numbers) {\n    if (!uniqueNumbers.contains(number)) {\n      uniqueNumbers.add(number);\n    }\n  }\n  return uniqueNumbers;"], ["//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nString flip_case(String string) {\n  String result = \"\";\n  for (int I = 0; I < string.length; i++) {\n    if (string[i] == string[i].toUpperCase()) {\n      result += string[i].toLowerCase();\n    } else {\n      result += string[i];\n    }\n  }\n  return result;"], ["//Concatenate list of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nString concatenate(List<String> strings) {\n  if (strings.isEmpty) {\n    return \"\";\n  }\n  String result = \"\";\n  for (String s in strings) {\n    result += s;\n  }\n  return result;"], ["//Filter an input list of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nList<String> filter_by_prefix(List<String> strings, String prefix) {\n  return strings.where((String str) {\n    return str.startsWith(prefix);\n  });"], ["//Return only positive numbers in the list.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nList<int> get_positive(List<int> l) {\n  return l.where((num) => num > 0).toList();"], ["//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nbool is_prime(int n) {\n  if (n <= 1) {\n    return false;\n  }\n  for (int I = 2; I * I <= n; i++) {\n    if (n % I == 0) {\n      return false;\n    }\n  }\n  return true;"], ["//This function takes a list l and returns a list l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nList<int> sort_third(List<int> l) {\n  List<int> l' = List<int>();\n  for (int I = 0; I < l.length; i++) {\n    if (i % 3 == 0) {\n      l' << l[i];\n    } else {\n      l' << l[i] << l[i];\n    }\n  }\n  return l';"], ["//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nList<int> unique(List<int> l) {\n  return l.where((element) => l.contains(element)).toList();"], ["//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nint max_element(List<int> l) {\n  int max = l.first;\n  for (int I = 1; I < l.last; i++) {\n    if (l.first > l.last) {\n      max = l.last;\n    } else if (l.first < l.last) {\n      if (l[i] > max) {\n        max = l[i];\n      }\n    }\n  }\n  return max;"], ["//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nint fizz_buzz(int n) {\n  int count = 0;\n  for (int I = 1; I <= n; i++) {\n    if (i % 11 == 7 || i % 13 == 7) {\n      count++;\n    }\n  }\n  return count;"], ["//This function takes a list l and returns a list l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nList<int> sort_even(List<int> l) {\n  List<int> l' = List<int>.from(l);\n  l' = l.reversed.toList();\n  l' = l.map((e) => e * 2).toList();\n  l' = l.sort();\n  return l';"], ["//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nint prime_fib(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    if (n % 2 == 0) {\n        return n;\n    }\n    int fibonacci_sum = 0;\n    for (int I = 1; I <= n; i++) {\n        fibonacci_sum += i;\n    }\n    if (fibonacci_sum % 2 == 0) {\n        return 0;\n    }\n    return fibonacci_sum;"], ["//triples_sum_to_zero takes a list of integers as an input.\n// it returns true if there are three distinct elements in the list that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nbool triples_sum_to_zero(List<int> l) {\n  int sum = 0;\n  for (int I = 0; I < l.length; i++) {\n    sum += l[i];\n  }\n  return sum == 0;"], ["//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nint car_race_collision(int n) {\n    int count = 0;\n    for (int I = 0; I < n; i++) {\n        for (int j = I + 1; j < n; j++) {\n            if (i != j && cars[i].speed == cars[j].speed) {\n                cars[i].speed = cars[i].speed * 2;\n                cars[j].speed = cars[j].speed * 2;\n                cars[i].x += cars[i].speed;\n                cars[j].x += cars[j].speed;\n                count++;\n            }\n        }\n    }\n    return count;"], ["//Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nList<int> incr_list(List<int> l) {\n  List<int> new_list = List<int>();\n  for (int I = 0; I < l.length; i++) {\n    new_list.add(l[i] + 1);\n  }\n  return new_list;"], ["//pairs_sum_to_zero takes a list of integers as an input.\n// it returns true if there are two distinct elements in the list that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nbool pairs_sum_to_zero(List<int> l) {\n  if (l.length != 2) return false;\n  int a = l[0], b = l[1];\n  if (a == b) return false;\n  if (a < 0 && b < 0) return false;\n  return a + b == 0;"], ["//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nString change_base(int x, int base) {\n  String result = \"\";\n  while (x > 0) {\n    int remainder = x % base;\n    result = remainder.toString() + result;\n    x = x / base;\n  }\n  return result;"], ["//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\ndouble triangle_area(int a, int h) {\n  double s = a * h / 2;\n  return s * s;"], ["//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nint fib4(int n) {\n    if (n < 3) {\n        return n;\n    }\n    int fib1 = 0;\n    int fib2 = 1;\n    for (int I = 2; I <= n; i++) {\n        int fib3 = fib1 + fib2;\n        fib1 = fib2;\n        fib2 = fib3;\n    }\n    return fib3;"], ["//Return median of elements in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\ndouble median(List<int> l) {\n  int n = l.length;\n  if (n < 2) {\n    return l[0];\n  }\n  int mid = (n / 2) - 1;\n  int left = l.sublist(0, mid);\n  int right = l.sublist(mid + 1);\n  double sum = 0;\n  for (int I = 0; I < left.length; i++) {\n    sum += left[i];\n  }\n  double median = (sum / left.length) + (sum / right.length) - (sum / (left.length + right.length));\n  return median;"], ["//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nbool is_palindrome(String text) {\n  if (text.isEmpty) {\n    return true;\n  }\n  int len = text.length;\n  for (int I = 0; I < len / 2; i++) {\n    if (text[i] != text[len - 1 - i]) {\n      return false;\n    }\n  }\n  return true;"], ["//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nint modp(int n, int p) {\n  int rem = n % p;\n  return rem == 0 ? n : n % p + p;"], ["//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nString remove_vowels(String text) {\n  return text.replaceAll(r'\\p{Vowel}', '');"], ["//Return true if all numbers in the list l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nbool below_threshold(List<int> l, int t) {\n  int n = l.length;\n  for (int I = 0; I < n; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;"], ["//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nint add(int x, int y) {\n  return x + y;"], ["//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nbool same_chars(String s0, String s1) {\n  if (s0.length != s1.length) {\n    return false;\n  }\n  for (int I = 0; I < s0.length; i++) {\n    if (s0[i] != s1[i]) {\n      return false;\n    }\n  }\n  return true;"], ["//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nint fib(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    int a = 0, b = 1;\n    for (int I = 2; I <= n; i++) {\n        int c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;"], ["//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nbool correct_bracketing(String brackets) {\n  // check if brackets are balanced\n  if (brackets.length % 2 != 0) {\n    return false;\n  }\n  // iterate over brackets and check if every opening bracket has a corresponding closing bracket\n  for (int I = 0; I < brackets.length; i++) {\n    if (brackets[i] != brackets[i + 1]) {\n      return false;\n    }\n  }\n  return true;"], ["//Return true is list elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nbool monotonic(List<int> l) {\n  int n = l.length;\n  for (int I = 1; I < n; i++) {\n    if (l[i] < l[i - 1]) {\n      return false;\n    }\n  }\n  return true;"], ["//Return sorted unique common elements for two lists.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nList<int> common(List<int> l1, List<int> l2) {\n  List<int> result = [];\n  for (int I = 0; I < l1.length; i++) {\n    if (l1[i] != l2[i]) {\n      result.add(l1[i]);\n    }\n  }\n  return result;"], ["//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nint largest_prime_factor(int n) {\n    int max_factor = 1;\n    for (int I = 2; I <= sqrt(n); i++) {\n        if (n % I == 0) {\n            if (max_factor < I) {\n                max_factor = I;\n            }\n        }\n    }\n    return max_factor;"], ["//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nint sum_to_n(int n) {\n  int sum = 0;\n  for (int I = 1; I <= n; i++) {\n    sum += i;\n  }\n  return sum;"], ["//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nbool correct_bracketing(String brackets) {\n  // Check if brackets is empty\n  if (brackets.isEmpty) {\n    return true;\n  }\n\n  // Check if brackets contains only one opening bracket\n  if (brackets.length == 1) {\n    return true;\n  }\n\n  // Check if brackets contains only one closing bracket\n  if (brackets.length == 2) {\n    return true;\n  }\n\n  // Check if brackets contains no opening bracket and one closing bracket\n  if (brackets.length == 3) {\n    return brackets[0] == brackets[1];\n  }\n\n  // Check if brackets contains no opening bracket and two closing bracket\n  if (brackets.length == 4) {\n    return brackets[0] == brackets[2] && brackets[1] == brackets[3];\n  }\n\n  // Check if brackets contains no opening bracket and three closing bracket\n  if (brackets.length == 5) {\n    return brackets[0] == brackets[2] && brackets[1] == brackets[3] && brackets[4] == brackets[5];\n  }\n\n  // Check if brackets contains no opening bracket and four closing bracket\n  if (brackets.length == 6) {\n    return brackets[0] == brackets[2] && brackets[1] == brackets[3] && brackets[4] == brackets[5] && brackets[6] == brackets[7];\n  }\n\n  // Check if brackets contains no opening bracket and five closing bracket\n  if (brackets.length == 7) {\n    return brackets[0] == brackets[2] && brackets[1] == brackets[3] && brackets[4] == brackets[5] && brackets[6] == brackets[7] && brackets[8] == brackets"], ["//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nList<int> derivative(List<int> xs) {\n  List<int> result = List<int>();\n  int n = xs.length;\n  for (int I = 0; I < n; i++) {\n    result.add(xs[i] + xs[i + 1] * xs[i + 2] * xs[i + 3]);\n  }\n  return result;"], ["//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nint fibfib(int n) {\n    if (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return 0;\n    } else if (n == 2) {\n        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }"], ["//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nint vowels_count(String s) {\n  int count = 0;\n  for (int I = 0; I < s.length; i++) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n      count++;\n    }\n  }\n  return count;"], ["//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nString circular_shift(int x, int shift) {\n  String digits = \"0123456789\";\n  String reversed_digits = \"\";\n  for (int I = 0; I < x; i++) {\n    reversed_digits += digits[x % 10];\n    x /= 10;\n  }\n  return reversed_digits;"], ["//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nint digitSum(String s) {\n  int sum = 0;\n  for (int I = 0; I < s.length(); i++) {\n    char c = s.charAt(i);\n    if (c >= '0' && c <= '9') {\n      sum += c - '0';\n    }\n  }\n  return sum;"], ["//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nint fruit_distribution(String s, int n) {\n    int apples = 0;\n    int oranges = 0;\n    int mangoes = 0;\n    for (int I = 0; I < s.length(); i++) {\n        char c = s.charAt(i);\n        if (c == 'a') {\n            apples++;\n        } else if (c == 'o') {\n            oranges++;\n        } else if (c == 'm') {\n            mangoes++;\n        }\n    }\n    return n - (apples + oranges + mangoes);"], ["//\"Given a list representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in a list, [ smalest_value, its index ],\n// If there are no even values or the given list is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nList<int> pluck(List<int> arr) {\n  List<int> result = [];\n  int min = int.max;\n  for (int I = 0; I < arr.length; i++) {\n    if (arr[i] % 2 == 0) {\n      min = min.min(arr[i]);\n    }\n  }\n  for (int I = 0; I < arr.length; i++) {\n    if (arr[i] % 2 == 0) {\n      result.add(arr[i]);\n      result.add(i);\n    }\n  }\n  return result;"], ["//You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nint search(List<int> lst) {\n    int max = 0;\n    int freq = 0;\n    for (int I = 0; I < lst.length; i++) {\n        if (lst[i] > 0 && freq < lst[i]) {\n            freq = lst[i];\n            max = lst[i];\n        }\n    }\n    return max;"], ["//Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nList<int> strange_sort_list(List<int> lst) {\n  if (lst.isEmpty) {\n    return [];\n  }\n  List<int> sorted = lst.sort();\n  List<int> odd = sorted.skip(1);\n  List<int> even = sorted.skip(1).skip(1);\n  List<int> result = [];\n  for (int I = 0; I < odd.length; i++) {\n    result.add(odd[i]);\n  }\n  for (int I = 0; I < even.length; i++) {\n    result.add(even[i]);\n  }\n  return result;"], ["//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\ndouble triangle_area(int a, int b, int c) {\n    if (a + b > c && b + c > a && c + a > b) {\n        return (a + b + c) / 2;\n    } else {\n        return -1;\n    }"], ["//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(List<int> q, int w) {\n  if (q.isEmpty) {\n    return false;\n  }\n  int sum = 0;\n  for (int I = 0; I < q.length; i++) {\n    sum += q[i];\n  }\n  return sum <= w && sum >= w - q.reduce((a, b) => a + b);"], ["//Given a list arr of integers, find the minimum number of elements that\n// need to be changed to make the list palindromic. A palindromic list is a list that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nint smallest_change(List<int> arr) {\n    int n = arr.length;\n    int min_change = 0;\n    for (int I = 0; I < n; i++) {\n        int temp = arr[i];\n        for (int j = I + 1; j < n; j++) {\n            if (arr[j] != temp) {\n                int change = j - i + 1;\n                if (change < min_change) {\n                    min_change = change;\n                }\n            }\n        }\n    }\n    return min_change;"], ["//Write a function that accepts two lists of strings and returns the list that has \n// total number of chars in the all strings of the list less than the other list.\n// if the two lists have the same number of chars, return the first list.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nList<String> total_match(List<String> lst1, List<String> lst2) {\n  List<String> result = [];\n  for (String s in lst1) {\n    if (lst2.contains(s)) {\n      result.add(s);\n    }\n  }\n  return result;"], ["//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nbool is_multiply_prime(int a) {\n    if (a < 100) {\n        return false;\n    }\n    int b = 2;\n    int c = 3;\n    while (b * b <= a) {\n        if (a % b == 0 || a % c == 0) {\n            return false;\n        }\n        b++;\n        c++;\n    }\n    return true;"], ["//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nbool is_simple_power(int x, int n) {\n    return n == 1 || x == n;"], ["//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nbool iscube(int a) {\n    int b = a;\n    while (b > 1) {\n        if (b % 2 == 0) {\n            b /= 2;\n        } else {\n            b *= 2;\n        }\n    }\n    return b == a;"], ["//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nint hex_key(String num) {\n  int count = 0;\n  for (int I = 0; I < num.length; i++) {\n    char c = num.charAt(i);\n    if (c >= '0' && c <= '9') {\n      count++;\n    } else if (c >= 'A' && c <= 'F') {\n      count += 10;\n    } else if (c >= 'a' && c <= 'f') {\n      count += 10;\n    }\n  }\n  return count;"], ["//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nString decimal_to_binary(int decimal) {\n    String binary = \"\";\n    int decimal_part = decimal;\n    while (decimal_part > 0) {\n        int remainder = decimal_part % 2;\n        binary += remainder.toString();\n        decimal_part = decimal_part / 2;\n    }\n    binary += \"db\";\n    return binary;"], ["//You are given a string s.\n// Your task is to check if the string is hapdart or not.\n// A string is hapdart if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nbool is_happy(String s) {\n  if (s.length < 3) {\n    return false;\n  }\n  int count = 0;\n  for (int I = 0; I < s.length - 2; i += 3) {\n    if (s[i] != s[i + 1] && s[i] != s[i + 2]) {\n      count++;\n    }\n  }\n  if (count == 3) {\n    return true;\n  }\n  return false;"], ["//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you a list of GPAs for some students and you have to write \n// a function that can output a list of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nList<String> numerical_letter_grade(List<double> grades) {\n  List<String> letter_grades = [];\n  grades.forEach((grade) {\n    if (grade >= 3.7) {\n      letter_grades.add('A+');\n    } else if (grade >= 3.3 && grade < 3.7) {\n      letter_grades.add('A');\n    } else if (grade >= 3.0 && grade < 3.3) {\n      letter_grades.add('A-');\n    } else if (grade >= 2.7 && grade < 3.0) {\n      letter_grades.add('B+');\n    } else if (grade >= 2.3 && grade < 2.7) {\n      letter_grades.add('B');\n    } else if (grade >= 2.0 && grade < 2.3) {\n      letter_grades.add('B-');\n   "], ["//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nbool prime_length(String string) {\n  int length = string.length;\n  for (int I = 2; I <= length; i++) {\n    if (string.contains(i)) {\n      return false;\n    }\n  }\n  return true;"], ["//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nint starts_one_ends(int n) {\n    int count = 0;\n    for (int I = 1; I <= n; i++) {\n        if (i % 10 == 1) {\n            count++;\n        }\n    }\n    return count;"], ["//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nString solve(int N) {\n    String res = \"\";\n    while (N > 0) {\n        int digit = N % 2;\n        res += digit.toString();\n        N /= 2;\n    }\n    return res;"], ["//Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nint add(List<int> lst) {\n    int sum = 0;\n    for (int I = 0; I < lst.length; i++) {\n        if (i % 2 == 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;"], ["//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nString anti_shuffle(String s) {\n  List<String> words = s.split(\" \").toList();\n  List<String> sortedWords = words.sorted();\n  String result = \"\";\n  for (String word in sortedWords) {\n    result += word;\n    result += \" \";\n  }\n  return result;"], ["//You are given a 2 dimensional data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the list,\n// and return list of records, [(x1, y1), (x2, y2) ...] such that\n// each record is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [(2, 2)]\nList<(int, int)> get_row(List<List<int>> lst, int x) {\n  List<(int, int)> records = new List<(int, int)>();\n  for (int I = 0; I < lst.length; i++) {\n    List<int> row = lst[i];\n    for (int j = 0; j < row.length; j++) {\n      if (j == x) {\n        records.add((row[j], i));\n      }\n    }\n  }\n  records.sort((a, b) => a.first.compareTo(b.first));\n  records.sort((a, b) => a.second.compareTo(b.second));\n  return records;"], ["//Given a list of non-negative integers, return a codart of the given list after sorting,\n// you will sort the given list in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given list.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nList<int> sort_array(List<int> array) {\n  List<int> sortedArray = array.sort((a, b) {\n    if (a == b) {\n      return 0;\n    }\n    if (a == null || a == 0) {\n      return -1;\n    }\n    if (b == null || b == 0) {\n      return 1;\n    }\n    return a.compareTo(b);\n  });\n  return sortedArray;"], ["//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nString encrypt(String s) {\n  List<String> letters = s.split(\"\").toList();\n  List<String> rotated = [];\n  for (int I = 0; I < letters.length; i++) {\n    rotated.add(letters[i] * 2.0.pow(2).toInt().toString());\n  }\n  return rotated.join(\"\");"], ["//You are given a list of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the list.\n// Return null if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// null\n// >>> next_smallest([1, 1])\n// null\nint? next_smallest(List<int> lst) {\n  if (lst.length == 0) {\n    return null;\n  }\n  int? min = lst[0];\n  for (int I = 1; I < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;"], ["//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nint is_bored(String S) {\n    int count = 0;\n    for (int I = 0; I < S.length(); i++) {\n        if (S.charAt(i) == 'I') {\n            count++;\n        }\n    }\n    return count;"], ["//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nbool any_int(double x, double y, double z) {\n  return (x + y + z) == (int) (x + y + z);"], ["//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nString encode(String message) {\n  var result = message.replaceAll(RegExp(r'\\b[aeiouAEIOU]\\b'), (match) => match.group(0).toUpperCase());\n  var vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (var I = 0; I < vowels.length; i++) {\n    result = result.replaceAll(RegExp(r'\\b$vowels[$i]\\b'), (match) => match.group(0).toUpperCase());\n  }\n  return result;"], ["//You are given a list of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nint skjkasdkd(List<int> lst) {\n  List<int> primes = [];\n  for (int I = 2; I < lst.length; i++) {\n    if (lst[i] % I == 0) {\n      primes.add(i);\n    }\n  }\n  int sum = 0;\n  for (int I in primes) {\n    sum += lst[i];\n  }\n  return sum;"], ["//Given a map, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given map is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nbool check_dict_case(Map<String, String> dict) {\n  if (dict.isEmpty) return true;\n  for (String key in dict.keys) {\n    if (dict[key].toLowerCase() != key) return false;\n  }\n  return true;"], ["//Implement a function that takes an non-negative integer and returns a list of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nList<int> count_up_to(int n) {\n  List<int> result = [];\n  for (int I = 2; I <= n; i++) {\n    if (is_prime(i)) {\n      result.add(i);\n    }\n  }\n  return result;"], ["//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nint multiply(int a, int b) {\n    int product = 1;\n    while (b > 0) {\n        int digit = b % 10;\n        product *= digit;\n        b /= 10;\n    }\n    return product;"], ["//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nint count_upper(String s) {\n  int count = 0;\n  for (int I = 0; I < s.length; i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n  }\n  return count;"], ["//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nint closest_integer(String value) {\n  int closest_integer = 0;\n  int left_integer = 0;\n  int right_integer = 0;\n\n  for (int I = 0; I < value.length; i++) {\n    int digit = value[i] - '0';\n    if (digit < left_integer) {\n      left_integer = digit;\n    } else if (digit > right_integer) {\n      right_integer = digit;\n    }\n  }\n\n  if (left_integer == right_integer) {\n    return left_integer;\n  } else {\n    return (left_integer < right_integer) ? left_integer : right_integer;\n  }"], ["//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in a list, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nList<int> make_a_pile(int n) {\n  List<int> result = [];\n  int next_odd = 0;\n  int next_even = 0;\n  for (int I = 1; I <= n; i++) {\n    if (i % 2 == 1) {\n      next_odd++;\n    } else {\n      next_even++;\n    }\n    result.add(next_odd);\n    result.add(next_even);\n  }\n  return result;"], ["//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return a list of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nList<String> words_string(String s) {\n  List<String> words = [];\n  if (s == null || s.isEmpty) {\n    return words;\n  }\n  for (String word in s.split(RegExp(r'\\s+'))) {\n    if (word != null && word.isNotEmpty) {\n      words.add(word);\n    }\n  }\n  return words;"], ["//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nint choose_num(int x, int y) {\n    int max_num = 0;\n    for (int I = x; I <= y; i++) {\n        if (i % 2 == 0) {\n            max_num = max(max_num, i);\n        }\n    }\n    return max_num;"], ["//Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nList<int> unique_digits(List<int> x) {\n  List<int> unique = [];\n  for (int I = 0; I < x.length; i++) {\n    if (x[i] % 2 == 0) {\n      continue;\n    }\n    unique.add(x[i]);\n  }\n  return unique;"], ["//Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting list, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the list is empty, return an empty list:\n// >>> by_length([])\n// []\n// If the list has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nList<String> by_length(List<int> arr) {\n  List<String> result = [];\n  for (int I = 1; I <= 9; i++) {\n    result.add(arr[i - 1].toString());\n  }\n  return result;"], ["//Implement the function f that takes n as a parameter,\n// and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nList<int> f(int n) {\n  List<int> result = [];\n  int i = 1;\n  while (i <= n) {\n    result.add(i);\n    i += n % i;\n  }\n  return result;"], ["//Given a positive integer n, return a record that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// (1, 2)\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// (4, 6)\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned record has the number of even and odd integer palindromes respectively.\n(int, int) even_odd_palindrome(int n) {\n    int even_count = 0;\n    int odd_count = 0;\n    for (int I = 1; I <= n; i++) {\n        if (i % 2 == 0) {\n            even_count++;\n        } else {\n            odd_count++;\n        }\n    }\n    return (even_count, odd_count);"], ["//Write a function count_nums which takes a list of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nint count_nums(List<int> arr) {\n  int count = 0;\n  for (int num in arr) {\n    if (num > 0 && num.isDigit && num % 10 != 0) {\n      count++;\n    }\n  }\n  return count;"], ["//We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the list will be randomly ordered. Your task is to determine if\n// it is possible to get a list sorted in non-decreasing order by performing \n// the following operation on the given list:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the list by one\n// position in the right direction. The last element of the list will be moved to\n// the starting position in the list i.e. 0th index. \n// If it is possible to obtain the sorted list by performing the above operation\n// then return true else return false.\n// If the given list is empty then return true.\n// Note: The given list is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given list.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// list by performing any number of right shift operations.\nbool move_one_ball(List<int> arr) {\n  int n = arr.length;\n  int shift = 0;\n  List<int> newArr = List<int>();\n  for (int I = 0; I < n; i++) {\n    if (i == n - 1) {\n      newArr.add(arr[i]);\n    } else {\n      newArr.add(arr[i] >> shift);\n    }\n    shift++;\n  }\n  return newArr.isNotEmpty && newArr.every((num) => num >= 0);"], ["//In this problem, you will implement a function that takes two lists of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 a list of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input lists will be non-empty.\nString exchange(List<int> lst1, List<int> lst2) {\n  if (lst1.length != lst2.length) {\n    return \"NO\";\n  }\n  List<int> evenList = [];\n  for (int I = 0; I < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) {\n      evenList.add(lst1[i]);\n    }\n  }\n  List<int> oddList = [];\n  for (int I = 0; I < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) {\n      oddList.add(lst2[i]);\n    }\n  }\n  if (evenList.length == lst1.length && evenList.every((num) => num % 2 == 0)) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }"], ["//Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nMap<String, int> histogram(String test) {\n  Map<String, int> result = {};\n  List<String> words = test.split(\" \");\n  for (String word in words) {\n    int count = 0;\n    for (int I = 0; I < word.length; i++) {\n      if (word[i] == word[i + 1]) {\n        count++;\n      }\n    }\n    result[word] = count;\n  }\n  return result;"], ["//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return a record containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// (\"bcd\", false)\n// >>> reverse_delete(\"abcdef\", \"b\")\n// (\"acdef\", false)\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// (\"cdedc\", true)\n(String, bool) reverse_delete(String s, String c) {\n    var result = \"\";\n    var count = 0;\n    for (var I = 0; I < s.length; i++) {\n        if (s[i] == c[count]) {\n            count++;\n        } else {\n            result += s[i];\n            count = 0;\n        }\n    }\n    result += s[i..];\n    return (result, count == 0);"], ["//Given a list of strings, where each string consists of only digits, return a list.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nList<String> odd_count(List<String> lst) {\n  List<int> odd_count = [];\n  for (String str in lst) {\n    int count = 0;\n    for (int I = 0; I < str.length; i++) {\n      if (str[i] != '0') {\n        count++;\n      }\n    }\n    odd_count.add(count.toString());\n  }\n  return odd_count;"], ["//Given a list of integers nums, find the minimum sum of any non-empty sub-list\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nint minSubArraySum(List<int> nums) {\n  int min = nums.first;\n  for (int I = 1; I < nums.length; i++) {\n    int sum = nums[i] + min;\n    if (sum < min) {\n      min = sum;\n    }\n  }\n  return min;"], ["//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nint max_fill(List<List<int>> grid, int capacity) {\n    int n = grid.length;\n    int m = grid[0].length;\n    int[][] buckets = new int[n][m];\n    for (int I = 0; I < n; i++) {\n        for (int j = 0; j < m; j++) {\n            buckets[i][j] = grid[i][j] == 1 ? 1 : 0;\n        }\n    }\n    int[][] dp = new int[n][m];\n    for (int I = 0; I < n; i++) {\n        for (int j = 0; j < m; j++) {\n            dp[i][j] ="], ["//In this Kata, you have to sort a list of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nList<int> sort_array(List<int> arr) {\n  List<int> sorted = [];\n  for (int I = 0; I < arr.length; i++) {\n    int num = arr[i];\n    int num_ones = num.count(1);\n    int decimal_value = num.toDouble();\n    if (num_ones > 0) {\n      sorted.add(decimal_value);\n    } else {\n      sorted.add(num);\n    }\n  }\n  return sorted;"], ["//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nList<String> select_words(String s, int n) {\n  List<String> words = [];\n  for (int I = 0; I < s.length; i++) {\n    String word = s.substring(i, i + n);\n    if (word.length == n) {\n      words.add(word);\n    }\n  }\n  return words;"], ["//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nString get_closest_vowel(String word) {\n  var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  var closest_vowel = \"\";\n  for (var I = 0; I < word.length; i++) {\n    var vowel = word[i];\n    var next_vowel = word[i + 1];\n    if (vowels.contains(vowel) && next_vowel == \"e\" || next_vowel == \"o\" || next_vowel == \"u\") {\n      closest_vowel = vowel;\n      break;\n    }\n  }\n  return closest_vowel;"], ["//You are given a list of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nString match_parens(List<String> lst) {\n  List<String> lst1 = lst.reversed.toList();\n  List<String> lst2 = lst.reversed.toList();\n  int n = lst1.length;\n  int m = lst2.length;\n  if (n == 0 || m == 0) {\n    return \"No\";\n  }\n  if (n == 1 || m == 1) {\n    return \"Yes\";\n  }\n  int[][] dp = new int[n + 1][m + 1];\n  for (int I = 1; I <= n; i++) {\n    for (int j = 1; j <= m; j++) {\n      if (lst1[i - 1] == \"(\" && lst2[j - 1] == \")\") {\n        dp[i][j] = dp[i - 1][j - 1] + 1;\n      } else if (lst1[i - 1] == \")\") {\n        dp[i][j] = dp[i - 1][j] + 1;\n      } else if (lst2[j - 1] == \")\") {\n        dp[i][j] = dp[i][j - 1] + 1;\n      } else {\n        dp[i][j] = dp[i - 1][j - "], ["//Given a list arr of integers and a positive integer k, return a sorted list \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the list will be in the range of [1, 1000].\n// 2. The elements in the list will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nList<int> maximum(List<int> arr, int k) {\n  List<int> result = [];\n  int maxIndex = -1;\n  for (int I = 0; I < k; i++) {\n    if (arr[i] > result[maxIndex]) {\n      result[maxIndex] = arr[i];\n      maxIndex = i;\n    }\n  }\n  result.insert(maxIndex + 1, arr[k]);\n  return result;"], ["//Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nint solution(List<int> lst) {\n  int sum = 0;\n  for (int I = 0; I < lst.length; i++) {\n    if (lst[i] % 2 == 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;"], ["//Given a non-empty list of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nint add_elements(List<int> arr, int k) {\n    List<int> sorted_arr = arr.sort();\n    int sum = 0;\n    for (int I = 0; I < sorted_arr.length; i++) {\n        if (i > k) {\n            sum += sorted_arr[i];\n        } else if (i == k) {\n            sum += sorted_arr[i];\n        } else {\n            int digit = sorted_arr[i] / 10;\n            sum += digit * (sorted_arr[i] % 10);\n        }\n    }\n    return sum;"], ["//Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nList<int> get_odd_collatz(int n) {\n  List<int> collatz = [1];\n  while (n > 1) {\n    int next = collatz[collatz.length - 1] * 2 + 1;\n    collatz.add(next);\n    n = next;\n  }\n  return collatz;"], ["//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nbool valid_date(String date) {\n  String month = date.substring(0, 2);\n  String day = date.substring(3, 5);\n  String year = date.substring(6, 10);\n\n  if (month.length != 2 || month.toInt() < 1 || month.toInt() > 12) {\n    return false;\n  }\n\n  if (day.length != 2 || day.toInt() < 1 || day.toInt() > 31) {\n    return false;\n  }\n\n  if (year.length != 4 || year.toInt() < 1900 || year.toInt() > 2100) {\n    return false;\n  }\n\n  if (month.toInt() < 1 || month.toInt() > 12) {\n    return false;\n  }\n\n  if (day.to"], ["//Given a list of numbers, return whether or not they are sorted\n// in ascending order. If list has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nbool is_sorted(List<int> lst) {\n  if (lst.length < 2) {\n    return true;\n  }\n  int n = lst.length;\n  for (int I = 0; I < n - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;"], ["//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection((1, 2), (2, 3))\n// \"NO\"\n// >>> intersection((-1, 1), (0, 4))\n// \"NO\"\n// >>> intersection((-3, -1), (-5, 5))\n// \"YES\"\nString intersection((int, int) interval1, (int, int) interval2) {\n    int start1 = interval1.start;\n    int end1 = interval1.end;\n    int start2 = interval2.start;\n    int end2 = interval2.end;\n    int diff = end2 - start1;\n    if (diff < 0) {\n        diff = -diff;\n        start1 = interval1.start;\n        end1 = interval1.end;\n    }\n    if (diff < 0) {\n        diff = -diff;\n        start2 = interval2.start;\n        end2 = interval2.end;\n    }\n    int diff1 = end1 - start1;\n    int diff2 = end2 - start2;\n    if (diff1 < 0 || diff2 < 0) {\n        return \"NO\";\n    }\n    int sum = diff1 + diff2;\n    if (sum == 0) {\n        return \"YES\";\n    }\n    return \"NO\";"], ["//You are given a list arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the list, represented by 1, -1 or 0.\n// Note: return null for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// null\nint? prod_signs(List<int> arr) {\n  if (arr.isEmpty) {\n    return null;\n  }\n  int? sum = 0;\n  int? product = 1;\n  for (int I = 0; I < arr.length; i++) {\n    int num = arr[i];\n    if (num == 1) {\n      sum += 1;\n    } else if (num == -1) {\n      sum += -1;\n    } else {\n      product *= num;\n    }\n  }\n  return sum * product;"], ["//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered lists of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered list of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nList<int> minPath(List<List<int>> grid, int k) {\n    List<int> path = [];\n    for (int I = 0; I < grid.length; i++) {\n        for (int j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] == k) {\n                path.add(grid[i][j]);"], ["//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nList<int> tri(int n) {\n    List<int> result = List<int>();\n    result.add(1);\n    result.add(3);\n    result.add(1 + n / 2);\n    result.add(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    return result;"], ["//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nint digits(int n) {\n    int product = 1;\n    while (n > 0) {\n        int digit = n % 10;\n        product *= digit;\n        n /= 10;\n    }\n    return product;"], ["//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nbool is_nested(String string) {\n  int bracket_count = 0;\n  int bracket_nesting = 0;\n  for (int I = 0; I < string.length; i++) {\n    char c = string[i];\n    if (c == ']') {\n      bracket_count++;\n      bracket_nesting++;\n    } else if (c == '[' && bracket_nesting > 0) {\n      bracket_nesting--;\n    } else if (c == ']' && bracket_nesting == 0) {\n      return false;\n    }\n  }\n  return bracket_count > 0 && bracket_nesting > 0;"], ["//You are given a list of numbers.\n// You need to return the sum of squared numbers in the given list,\n// round each element in the list to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nint sum_squares(List<double> lst) {\n  double sum = 0;\n  for (double num : lst) {\n    sum += num * num;\n  }\n  return Math.round(sum * 100) / 100;"], ["//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nbool check_if_last_char_is_a_letter(String txt) {\n  String last_char = txt.last;\n  if (last_char == \"a\" || last_char == \"e\" || last_char == \"i\" || last_char == \"o\" || last_char == \"u\") {\n    return true;\n  }\n  return false;"], ["//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given list will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nint can_arrange(List<int> arr) {\n  int max_idx = -1;\n  for (int I = 0; I < arr.length; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      max_idx = i;\n      break;\n    }\n  }\n  return max_idx;"], ["//Create a function that returns a record (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in a list.\n// If there is no negative or positive integers, return them as null.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// (null, 1)\n// >>> largest_smallest_integers([])\n// (null, null)\n// >>> largest_smallest_integers([0])\n// (null, null)\n(int?, int?) largest_smallest_integers(List<int> lst) {\n  List<int> sorted_lst = lst.sort((a, b) {\n    return a.compareTo(b);\n  });\n  int? max = sorted_lst.first;\n  int? min = sorted_lst.last;\n  return (max, min);"], ["//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nbool is_equal_to_sum_even(int n) {\n    int sum = 0;\n    for (int I = 1; I <= n; i++) {\n        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return sum % 4 == 0;"], ["//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nint special_factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else if (n == 1) {\n        return 1;\n    } else if (n == 2) {\n        return 2;\n    } else if (n == 3) {\n        return 6;\n    } else if (n == 4) {\n        return 24;\n    } else if (n == 5) {\n        return 120;\n    } else if (n == 6) {\n        return 720;\n    } else if (n == 7) {\n        return 5040;\n    } else if (n == 8) {\n        return 40320;\n    } else if (n == 9) {\n        return 362880;\n    } else if (n == 10) {\n        return 3628800;\n    } else if (n == 11) {\n        return 39916800;\n    } else if (n == 12) {\n        return 479001600;\n    } else if (n == 13) {\n        return 5599295360;\n    } else if (n == 14) {\n        return 69945654400;\n    } else if (n == 15) {\n        return 879609302220800;\n    } else if (n == 16) {\n        return 125829120088832000;\n    } else if (n =="], ["//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nString fix_spaces(String text) {\n  if (text.isEmpty) {\n    return text;\n  }\n  var spaces = text.replaceAll(\" \", \"_\");\n  if (spaces.length > 2) {\n    spaces = spaces.replaceAll(\" \", \"-\");\n  }\n  return spaces;"], ["//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nString file_name_check(String file_name) {\n  // Remove all non-alphanumeric characters from the file name\n  String file_name_without_non_alphanumeric = file_name.replaceAll(\"[^a-zA-Z0-9]\", \"\");\n\n  // Split the file name into an array of substrings\n  List<String> file_name_parts = file_name_without_non_alphanumeric.split(\"\\\\.\\\\.\");\n\n  // Check if the file name contains exactly one dot\n  if (file_name_parts.length != 2) {\n    return \"No\";\n  }\n\n  // Check if the file name contains exactly one letter from the latin alphabet\n  String file_name_part_1 = file_name_parts[0];\n  if (file_name_part_1.isEmpty || !file_name_part_1.allMatch(String.isLetter)) {\n    return \"No\";\n  }\n\n  // Check if the file name contains exactly one dot and one letter from the latin alphabet\n  String file_name_part_2 = file_name_parts[1];\n  if (file_name_part_2.isEmpty || !file_name_part_2.allMatch(String.isLetter)) {\n    return \"No"], ["//\"\n// This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nint sum_squares(List<int> lst) {\n    List<int> new_lst = new List<int>();\n    for (int I = 0; I < lst.length; i++) {\n        if (i % 3 == 0 && i % 4 != 0) {\n            new_lst.add(lst[i] * lst[i]);\n        } else if (i % 3 != 0 && i % 4 == 0) {\n            new_lst.add(lst[i] * lst[i]);\n        } else {\n            new_lst.add(lst[i]);\n        }\n    }\n    return new_lst.reduce((a, b) => a + b);"], ["//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nString words_in_sentence(String sentence) {\n  List<String> words = sentence.split(\" \").where((word) => word.isNotEmpty).toList();\n  List<int> lengths = words.map((word) => word.length).toList();\n  List<String> sortedWords = words.sort((a, b) => lengths[a] - lengths[b]);\n  return sortedWords.join(\" \");"], ["//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nbool simplify(String x, String n) {\n  // Split the string into numerator and denominator\n  String numerator = x.split(\"/\")[0];\n  String denominator = x.split(\"/\")[1];\n\n  // Check if denominator is zero\n  if (denominator == \"0\") {\n    return false;\n  }\n\n  // Check if numerator is zero\n  if (numerator == \"0\") {\n    return false;\n  }\n\n  // Check if denominator is a whole number\n  if (denominator.isInt()) {\n    int numeratorInt = int.parse(numerator);\n    int denominatorInt = int.parse(denominator);\n    if (numeratorInt * denominatorInt == 1) {\n      return true;\n    }\n  }\n\n  // Check if denominator is a fraction\n  if (denominator.isFraction()) {\n    String numeratorString = numerator.replaceAll(\"\\\\D\", \"\");\n    String denominatorString = denominator.replaceAll(\"\\\\D\", \"\");\n    int numeratorInt = int.parse(numeratorString);\n    int denominatorInt = int.parse(denominatorString);\n    if (numeratorInt * denominatorInt == 1) {\n      return true;\n    }\n  }\n\n  // If none of the above conditions are met, return false\n  return false;"], ["//Write a function which sorts the given list of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original list.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nList<int> order_by_points(List<int> nums) {\n  List<int> sorted = nums.sort((a, b) {\n    return a.sumDigits() - b.sumDigits();\n  });\n  return sorted;"], ["//Write a function that takes a list of numbers as input and returns \n// the number of elements in the list that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nint specialFilter(List<int> nums) {\n  int count = 0;\n  for (int num in nums) {\n    if (num > 10 && num % 2 != 0) {\n      count++;\n    }\n  }\n  return count;"], ["//You are given a positive integer n. You have to create an integer list a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nint get_max_triples(int n) {\n    int a[n];\n    for (int I = 1; I <= n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    int max_triples = 0;\n    for (int I = 1; I <= n; i++) {\n        for (int j = I; j <= n; j++) {\n            for (int k = j; k <= n; k++) {\n                if (a[i] + a[j] + a[k] % 3 == 0) {\n                    max_triples++;\n                }\n            }\n        }\n    }\n    return max_triples;"], ["//Write a function that accepts a list of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted list with a sorted order,\n// The list is always a list of strings and never a list of numbers,\n// and it may contain duplicates.\n// The order of the list should be ascending by length of each word, and you\n// should return the list sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n// The function should return a list of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nList<String> sorted_list_sum(List<String> lst) {\n  List<String> sorted_lst = [];\n  for (String s in lst) {\n    int length = s.length;\n    if (length == 1) {\n      sorted_lst.add(s);\n    } else if (length == 2) {\n      sorted_lst.add(s);\n    } else {\n      sorted_lst.addAll(sorted_list_sum(lst.where((s2) => s2.length == length - 1).toList()));\n      sorted_lst.add(s);\n    }\n  }\n  return sorted_lst;"], ["//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nint x_or_y(int n, int x, int y) {\n    if (n == 1) {\n        return y;\n    }\n    if (n % 2 == 0) {\n        return x;\n    }\n    return x_or_y(n-2, x, y);"], ["//Given a list of numbers, return the sum of squares of the numbers\n// in the list that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input list is empty, return 0.\nint double_the_difference(List<double> lst) {\n  if (lst.isEmpty) {\n    return 0;\n  }\n  double sum = 0;\n  for (double num in lst) {\n    if (num % 2 != 0) {\n      sum += num * num;\n    }\n  }\n  return sum;"], ["//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two lists of scores and guesses of equal length, where each index shows a match. \n// Return a list of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nList<int> compare(List<int> game, List<int> guess) {\n  List<int> result = List<int>.filled(game.length, 0);\n  for (int I = 0; I < game.length; i++) {\n    result[i] = game[i] - guess[i];\n  }\n  return result;"], ["//You will be given the name of a class (a string) and a list of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the list.\n// For example, if you are given \"Slices\" as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nString Strongest_Extension(String class_name, List<String> extensions) {\n  int max_cap = extensions.length;\n  int max_sm = extensions.length;\n  for (int I = 0; I < extensions.length; i++) {\n    int cap = extensions[i].length;\n    int sm = extensions[i].length;\n    if (cap > max_cap) {\n      max_cap = cap;\n    }\n    if (sm > max_sm) {\n      max_sm = sm;\n    }\n  }\n  String strongest_extension = extensions[max_cap - max_sm];\n  return strongest_extension;"], ["//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nbool cycpattern_check(String a, String b) {\n  String a_rot = rotate(a);\n  String b_rot = rotate(b);\n  return a_rot.contains(b_rot);"], ["//Given an integer. return a record that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// (1, 1)\n// >>> even_odd_count(123)\n// (1, 2)\n(int, int) even_odd_count(int num) {\n    int even = 0, odd = 0;\n    for (int I = 0; I < num; i++) {\n        if (num % 2 == 0) {\n            even += num / 2;\n        } else {\n            odd += num / 2;\n        }\n    }\n    return (even, odd);"], ["//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nString int_to_mini_roman(int number) {\n  String result = \"\";\n  while (number > 0) {\n    int remainder = number % 10;\n    result = (remainder == 0) ? \"I\" : (remainder == 1) ? \"I\" : (remainder == 2) ? \"II\" : (remainder == 3) ? \"III\" : \"IV\";\n    number /= 10;\n  }\n  return result;"], ["//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nbool right_angle_triangle(int a, int b, int c) {\n    if (a == b && b == c) {\n        return true;\n    }\n    if (a == b || b == c || a == c) {\n        return false;\n    }\n    int s = sqrt(pow(b, 2) + pow(c, 2));\n    if (s == 0) {\n        return false;\n    }\n    double angle = acos((b * c) / (s * sqrt(pow(b, 2) + pow(c, 2)))) * 180 / 3.14159;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle <= 90;"], ["//Write a function that accepts a list of strings.\n// The list contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nString find_max(List<String> words) {\n  var max_count = 0;\n  var max_word = \"\";\n  for (var word in words) {\n    var count = word.length;\n    if (count > max_count) {\n      max_count = count;\n      max_word = word;\n    }\n  }\n  return max_word;"], ["//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return a list of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nList<int> eat(int number, int need, int remaining) {\n  List<int> result = [];\n  while (need > 0) {\n    if (remaining == 0) {\n      result.add(need);\n      break;\n    }\n    remaining -= need;\n    need -= 1;\n  }\n  return result;"], ["//Given two lists operator, and operand. The first list has basic algebra operations, and \n// the second list is a list of integers. Use the two given lists to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// list = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator list is equal to the length of operand list minus one.\n// Operand is a list of of non-negative integers.\n// Operator list has at least one operator, and operand list has at least two operands.\nint do_algebra(List<String> operator, List<int> operand) {\n    int result = 0;\n    for (int I = 0; I < operand.length - 1; i++) {\n        String op = operand[i].toUpperCase();\n        if (operator[i].equals(\"+\") || operator[i].equals(\"-\")) {\n            result += operand[i + 1] * operand[i];\n        } else if (operator[i].equals(\"*\") || operator[i].equals(\"//\")) {\n            result += operand[i + 1] * operand[i];\n            result += operand[i + 2];\n        } else if (operator[i].equals(\"**\")) {\n            result += operand[i + 1] * operand[i];\n            result += operand[i + 2] * operand[i + 1];\n        } else {\n            throw new IllegalArgumentException(\"Invalid operator: \" + op);\n        }\n    }\n    return result;"], ["//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nString solve(String s) {\n  if (s.isEmpty) {\n    return s;\n  }\n  var reversed = s.reversed();\n  var result = \"\";\n  for (var I = 0; I < reversed.length; i++) {\n    var c = reversed[i];\n    if (c == 'a' || c == 'A') {\n      result += c.toUpperCase();\n    } else {\n      result += c.toLowerCase();\n    }\n  }\n  return result;"], ["//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return null.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nString? string_to_md5(String text) {\n  if (text.isEmpty) {\n    return null;\n  }\n  final md5 = MD5.convert(utf8.encode(text));\n  final hex = md5.hex.toUpperCase();\n  return hex.substring(0, 8) + hex.substring(8, 12) + hex.substring(12, 16) + hex.substring(16, 20) + hex.substring(20);"], ["//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nList<int> generate_integers(int a, int b) {\n  List<int> even_digits = [];\n  int current_digit = 0;\n  while (current_digit <= b) {\n    even_digits.add(current_digit);\n    current_digit++;\n  }\n  return even_digits;"]]