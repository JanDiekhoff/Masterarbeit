[["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if in given list of numbers, are any two numbers closer to each other than\n    // given threshold.\n    // >>> HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})), (0.5f))\n    // (false)\n    // >>> HasCloseElements((new List<float>(new float[]{(float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})), (0.3f))\n    // (true)\n    public static bool HasCloseElements(List<float> numbers, float threshold) {\n        if (numbers.Count < 2) {\n            return false;\n        }\n        var sortedNumbers = numbers.OrderBy(x => x);\n        var min = sortedNumbers.First();\n        var max = sortedNumbers.Last();\n        var difference = max - min;\n        if (difference < threshold) {\n            return true;\n        }\n        return false;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> SeparateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (new List<string>(new string[]{(string)\"()\", (string)\"(())\", (string)\"(()())\"}))\n    public static List<string> SeparateParenGroups(string paren_string) {\n        List<string> result = new List<string>();\n        int open_braces = 0;\n        int close_braces = 0;\n        bool is_balanced = true;\n        for (int I = 0; I < paren_string.Length; i++) {\n            if (paren_string[i] == '(') {\n                open_braces++;\n            }\n            else if (paren_string[i] == ')') {\n                if (close_braces == 0) {\n                    is_balanced = false;\n                }\n                close_braces++;\n            }\n            else if (paren_string[i] == '(' && paren_string[i + 1] == ')') {\n                open_braces--;\n            }\n            else if (paren_string[i] == '(' && paren_string[i + 1] == '(') {\n                open_braces--;\n            }\n            else if (paren_string[i] == '(' && paren_string[i + 1] == ')') {\n                close_braces--;\n            }\n            else if (paren_string[i] == '(' && paren_string[i + 1] == '(') {\n                close_braces--;\n"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive floating point number, it can be decomposed into\n    // and integer part (largest integer smaller than given number) and decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public static float TruncateNumber(float number) {\n        return (float)Math.Truncate(number);"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You're given a list of deposit and withdrawal operations on a bank account that starts with\n    // zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    // at that point function should return true. Otherwise it should return false.\n    // >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    // >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n    // (true)\n    public static bool BelowZero(List<long> operations) {\n        if (operations.Count == 0) {\n            return false;\n        }\n        var balance = operations[0];\n        for (int I = 1; I < operations.Count; i++) {\n            if (operations[i] < balance) {\n                return true;\n            }\n            balance = operations[i];\n        }\n        return false;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> MeanAbsoluteDeviation((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f})))\n    // (1.0f)\n    public static float MeanAbsoluteDeviation(List<float> numbers) {\n        float sum = 0;\n        foreach (float num in numbers) {\n            sum += Math.Abs(num - numbers.Average());\n        }\n        return (float)sum / numbers.Count();"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    // >>> Intersperse((new List<long>()), (4L))\n    // (new List<long>())\n    // >>> Intersperse((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (4L))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)4L, (long)3L}))\n    public static List<long> Intersperse(List<long> numbers, long delimeter) {\n        var result = new List<long>();\n        for (int i = 0; i < numbers.Count; i++) {\n            result.Add(numbers[i]);\n            result.Add(delimeter);\n        }\n        return result;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> ParseNestedParens((\"(()()) ((())) () ((())()())\"))\n    // (new List<long>(new long[]{(long)2L, (long)3L, (long)1L, (long)3L}))\n    public static List<long> ParseNestedParens(string paren_string) {\n        List<long> result = new List<long>();\n        int depth = 0;\n        for (int I = 0; I < paren_string.Length; i++) {\n            if (paren_string[i] == '(') {\n                depth++;\n            }\n            else if (paren_string[i] == ')') {\n                depth--;\n            }\n            if (depth == 0) {\n                result.Add(depth);\n            }\n        }\n        return result;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Filter an input list of strings only for ones that contain given substring\n    // >>> FilterBySubstring((new List<string>()), (\"a\"))\n    // (new List<string>())\n    // >>> FilterBySubstring((new List<string>(new string[]{(string)\"abc\", (string)\"bacd\", (string)\"cde\", (string)\"array\"})), (\"a\"))\n    // (new List<string>(new string[]{(string)\"abc\", (string)\"bacd\", (string)\"array\"}))\n    public static List<string> FilterBySubstring(List<string> strings, string substring) {\n        List<string> filteredStrings = new List<string>();\n        foreach (string str in strings) {\n            if (str.Contains(substring)) {\n                filteredStrings.Add(str);\n            }\n        }\n        return filteredStrings;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public static Tuple<long, long> SumProduct(List<long> numbers) {\n        long sum = 0;\n        long product = 1;\n        foreach (long num in numbers) {\n            sum += num;\n            product *= num;\n        }\n        return Tuple.Create(sum, product);"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // From a given list of integers, generate a list of rolling maximum element found until given moment\n    // in the sequence.\n    // >>> RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static List<long> RollingMax(List<long> numbers) {\n        List<long> result = new List<long>();\n        int n = numbers.Count;\n        for (int i = 0; i < n; i++) {\n            long max = numbers[i];\n            for (int j = i + 1; j < n; j++) {\n                if (numbers[j] > max) {\n                    max = numbers[j];\n                }\n            }\n            result.Add(max);\n        }\n        return result;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Find the shortest palindrome that begins with a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n    // - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    // >>> MakePalindrome((\"\"))\n    // (\"\")\n    // >>> MakePalindrome((\"cat\"))\n    // (\"catac\")\n    // >>> MakePalindrome((\"cata\"))\n    // (\"catac\")\n    public static string MakePalindrome(string str) {\n        if (str == null || str.Length == 0) {\n            return \"\";\n        }\n        string prefix = \"\";\n        string suffix = \"\";\n        for (int I = 0; I < str.Length; i++) {\n            char c = str[i];\n            if (c == 'a' || c == 'A') {\n                prefix += c;\n            }\n            else {\n                suffix += c;\n            }\n        }\n        return prefix + suffix;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> StringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    public static string StringXor(string a, string b) {\n        var a_bytes = a.ToCharArray();\n        var b_bytes = b.ToCharArray();\n        var result = new char[a_bytes.Length + b_bytes.Length];\n        for (int I = 0; I < a_bytes.Length; i++) {\n            result[i] = a_bytes[i] ^ b_bytes[i];\n        }\n        return new string(result);"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Out of list of strings, return the longest one. Return the first one in case of multiple\n    // strings of the same length. Return null in case the input list is empty.\n    // >>> Longest((new List<string>()))\n    // null\n    // >>> Longest((new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\"})))\n    // (\"a\")\n    // >>> Longest((new List<string>(new string[]{(string)\"a\", (string)\"bb\", (string)\"ccc\"})))\n    // (\"ccc\")\n    public static string Longest(List<string> strings) {\n        if (strings == null) {\n            return null;\n        }\n        if (strings.Count == 0) {\n            return null;\n        }\n        var longest = strings[0];\n        foreach (var s in strings) {\n            if (longest.Length < s.Length) {\n                longest = s;\n            }\n        }\n        return longest;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> GreatestCommonDivisor((3L), (5L))\n    // (1L)\n    // >>> GreatestCommonDivisor((25L), (15L))\n    // (5L)\n    public static long GreatestCommonDivisor(long a, long b) {\n        long gcd = 1;\n        while (b != 0) {\n            gcd = gcd * b % a;\n            b = b / a;\n        }\n        return gcd;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return list of all prefixes from shortest to longest of the input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static List<string> AllPrefixes(string str) {\n        List<string> prefixes = new List<string>();\n        int n = str.Length;\n        for (int I = 0; I < n; i++) {\n            if (str[i] == ' ') {\n                prefixes.Add(str.Substring(0, i + 1));\n            }\n        }\n        return prefixes;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> StringSequence((0L))\n    // (\"0\")\n    // >>> StringSequence((5L))\n    // (\"0 1 2 3 4 5\")\n    public static string StringSequence(long n) {\n        var sb = new StringBuilder();\n        for (long I = 0; I < n; i++) {\n            sb.Append(i);\n        }\n        return sb.ToString();"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> CountDistinctCharacters((\"xyzXYZ\"))\n    // (3L)\n    // >>> CountDistinctCharacters((\"Jerry\"))\n    // (4L)\n    public static long CountDistinctCharacters(string str) {\n        var count = 0;\n        foreach (var c in str) {\n            if (char.IsLetter(c)) {\n                count++;\n            }\n        }\n        return count;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> ParseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (new List<long>(new long[]{(long)4L, (long)2L, (long)1L, (long)2L, (long)2L, (long)1L, (long)1L, (long)1L, (long)1L, (long)4L, (long)4L}))\n    public static List<long> ParseMusic(string music_string) {\n        List<long> beats = new List<long>();\n        foreach (char c in music_string) {\n            if (c == 'o') {\n                beats.Add(4L);\n            } else if (c == 'o|') {\n                beats.Add(2L);\n            } else if (c == '.|') {\n                beats.Add(1L);\n            } else if (c == '|') {\n                beats.Add(2L);\n            } else if (c == 'o') {\n                beats.Add(1L);\n            } else if (c == '|') {\n                beats.Add(1L);\n            } else if (c == '.|') {\n                beats.Add(1L);\n            } else if (c == '|') {\n                beats.Add(1L);\n            } else if (c == 'o') {\n                beats.Add(2L);\n            } else if (c == '|"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> HowManyTimes((\"\"), (\"a\"))\n    // (0L)\n    // >>> HowManyTimes((\"aaa\"), (\"a\"))\n    // (3L)\n    // >>> HowManyTimes((\"aaaa\"), (\"aa\"))\n    // (3L)\n    public static long HowManyTimes(string str, string substring) {\n        if (str == null) {\n            throw new ArgumentNullException(\"str\");\n        }\n        if (substring == null) {\n            throw new ArgumentNullException(\"substring\");\n        }\n        if (str.Length < 2) {\n            return 0;\n        }\n        if (substring.Length < 2) {\n            return 0;\n        }\n        int n = str.Length;\n        int m = substring.Length;\n        int[][] dp = new int[n + 1][];\n        for (int i = 0; i <= n; i++) {\n            dp[i] = new int[m + 1];\n            for (int j = 0; j <= m; j++) {\n                dp[i][j] = 0;\n            }\n        }\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= m; j++) {\n                if (str[i - 1] == substring[j - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                }\n                else {\n                    dp[i][j] = dp[i - 1][j];\n                }\n            }\n        }\n        return dp[n][m];"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> SortNumbers((\"three one five\"))\n    // (\"one three five\")\n    public static string SortNumbers(string numbers) {\n        var numbersList = numbers.Split(' ');\n        var sortedNumbers = numbersList.OrderBy(n => n).ToList();\n        return string.Join(\" \", sortedNumbers);"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> FindClosestElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.2f})))\n    // (Tuple.Create(2.0f, 2.2f))\n    // >>> FindClosestElements((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f})))\n    // (Tuple.Create(2.0f, 2.0f))\n    public static Tuple<float, float> FindClosestElements(List<float> numbers) {\n        var min = numbers.Min();\n        var max = numbers.Max();\n        var minIndex = numbers.FindIndex(x => x < min);\n        var maxIndex = numbers.FindIndex(x => x > max);\n        var minIndex2 = numbers.FindIndex(x => x < min);\n        var maxIndex2 = numbers.FindIndex(x => x > max);\n        var minIndex3 = numbers.FindIndex(x => x < min);\n        var maxIndex3 = numbers.FindIndex(x => x > max);\n        var minIndex4 = numbers.FindIndex(x => x < min);\n        var maxIndex4 = numbers.FindIndex(x => x > max);\n        var minIndex5 = numbers.FindIndex(x => x < min);\n        var maxIndex5 = numbers.FindIndex(x => x > max);\n        var minIndex6 = numbers.FindIndex(x => x < min);\n        var"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given list of numbers (of at least two elements), apply a linear transform to that list,\n    // such that the smallest number will become 0 and the largest will become 1\n    // >>> RescaleToUnit((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f, (float)5.0f})))\n    // (new List<float>(new float[]{(float)0.0f, (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f}))\n    public static List<float> RescaleToUnit(List<float> numbers) {\n        var sorted = numbers.OrderBy(x => x);\n        var min = sorted.First();\n        var max = sorted.Last();\n        var delta = max - min;\n        var scale = 1.0f / delta;\n        return sorted.Select(x => (float)Math.Round(x * scale));"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Filter given list of any csthon values only for integers\n    // >>> FilterIntegers((new List<object>(new string[]{(string)\"a\", (string)3.14f, (string)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>> FilterIntegers((new List<object>(new object[]{1L, 2L, 3L, \"abc\", new List<object>()})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))\n    public static List<long> FilterIntegers(List<object> values) {\n        List<long> result = new List<long>();\n        foreach (object value in values) {\n            if (value is string) {\n                result.Add((long)Convert.ToInt64(value));\n            }\n            else if (value is int) {\n                result.Add((long)Convert.ToInt64(value));\n            }\n            else if (value is long) {\n                result.Add((long)value);\n            }\n            else {\n                throw new Exception(\"Invalid type of value\");\n            }\n        }\n        return result;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return length of given string\n    // >>> StringLength((\"\"))\n    // (0L)\n    // >>> StringLength((\"abc\"))\n    // (3L)\n    public static long Strlen(string str) {\n        if (str == null)\n            return 0;\n        return str.Length;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given number n, find the largest number that divides n evenly, smaller than n\n    // >>> LargestDivisor((15L))\n    // (5L)\n    public static long LargestDivisor(long n) {\n        long[] arr = new long[10000000];\n        for (long i = 1; i <= n; i++) {\n            arr[i] = i;\n        }\n        for (long i = 1; i <= n; i++) {\n            if (i % arr[i] == 0) {\n                return i;\n            }\n        }\n        return n;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> Factorize((8L))\n    // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>> Factorize((25L))\n    // (new List<long>(new long[]{(long)5L, (long)5L}))\n    // >>> Factorize((70L))\n    // (new List<long>(new long[]{(long)2L, (long)5L, (long)7L}))\n    public static List<long> Factorize(long n) {\n        List<long> factors = new List<long>();\n        long[] factorsArray = new long[n];\n        for (int I = 1; I <= n; i++) {\n            if (n % i == 0) {\n                factorsArray[i] = i;\n            }\n        }\n        for (int I = 1; I <= n; i++) {\n            if (factorsArray[i] != 1) {\n                factors.Add(factorsArray[i]);\n            }\n        }\n        return factors;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // From a list of integers, remove all elements that occur more than once.\n    // Keep order of elements left the same as in the input.\n    // >>> RemoveDuplicates((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)3L, (long)4L}))\n    public static List<long> RemoveDuplicates(List<long> numbers) {\n        var result = new List<long>();\n        var count = 0;\n        foreach (var num in numbers) {\n            if (count == 0) {\n                result.Add(num);\n                count++;\n            } else if (count == 1) {\n                result.Add(num);\n                count--;\n            } else {\n                result.Add(num);\n                count = 0;\n            }\n        }\n        return result;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\")\n    public static string FlipCase(string str) {\n        char[] chars = str.ToCharArray();\n        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] >= 'a' && chars[i] <= 'z') {\n                chars[i] += 'A' - 'a';\n            }\n            else if (chars[i] >= 'A' && chars[i] <= 'Z') {\n                chars[i] -= 'A' - 'a';\n            }\n        }\n        return new string(chars);"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Concatenate list of strings into a single string\n    // >>> Concatenate((new List<string>()))\n    // (\"\")\n    // >>> Concatenate((new List<string>(new string[]{(string)\"a\", (string)\"b\", (string)\"c\"})))\n    // (\"abc\")\n    public static string Concatenate(List<string> strings) {\n        StringBuilder sb = new StringBuilder();\n        foreach (string s in strings)\n            sb.Append(s);\n        return sb.ToString();"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Filter an input list of strings only for ones that start with a given prefix.\n    // >>> FilterByPrefix((new List<string>()), (\"a\"))\n    // (new List<string>())\n    // >>> FilterByPrefix((new List<string>(new string[]{(string)\"abc\", (string)\"bcd\", (string)\"cde\", (string)\"array\"})), (\"a\"))\n    // (new List<string>(new string[]{(string)\"abc\", (string)\"array\"}))\n    public static List<string> FilterByPrefix(List<string> strings, string prefix) {\n        List<string> result = new List<string>();\n        foreach (string s in strings) {\n            if (s.StartsWith(prefix)) {\n                result.Add(s);\n            }\n        }\n        return result;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return only positive numbers in the list.\n    // >>> GetPositive((new List<long>(new long[]{(long)-1L, (long)2L, (long)-4L, (long)5L, (long)6L})))\n    // (new List<long>(new long[]{(long)2L, (long)5L, (long)6L}))\n    // >>> GetPositive((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n    // (new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)3L, (long)9L, (long)123L, (long)1L}))\n    public static List<long> GetPositive(List<long> l) {\n        List<long> ret = new List<long>();\n        foreach (long n in l) {\n            if (n > 0) {\n                ret.Add(n);\n            }\n        }\n        return ret;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true if a given number is prime, and false otherwise.\n    // >>> IsPrime((6L))\n    // (false)\n    // >>> IsPrime((101L))\n    // (true)\n    // >>> IsPrime((11L))\n    // (true)\n    // >>> IsPrime((13441L))\n    // (true)\n    // >>> IsPrime((61L))\n    // (true)\n    // >>> IsPrime((4L))\n    // (false)\n    // >>> IsPrime((1L))\n    // (false)\n    public static bool IsPrime(long n) {\n        if (n < 2)\n            return false;\n        if (n == 2)\n            return true;\n        if (n % 2 == 0)\n            return false;\n        for (long I = 3; I * I <= n; i += 2) {\n            if (n % i == 0)\n                return false;\n        }\n        return true;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // This function takes a list l and returns a list l' such that\n    // l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    // to the values of the corresponding indicies of l, but sorted.\n    // >>> SortThird((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))\n    // >>> SortThird((new List<long>(new long[]{(long)5L, (long)6L, (long)3L, (long)4L, (long)8L, (long)9L, (long)2L})))\n    // (new List<long>(new long[]{(long)2L, (long)6L, (long)3L, (long)4L, (long)8L, (long)9L, (long)5L}))\n    public static List<long> SortThird(List<long> l) {\n        List<long> l' = new List<long>();\n        for (int I = 0; I < l.Count; i++) {\n            if (i % 3 != 0) {\n                l' = l.ToList();\n                l'[i] = l[i];\n                l = l'.ToList();\n            }\n            else {\n                l'[i] = l[i] + l[i + 1];\n                l = l'.ToList();\n            }\n        }\n        return l';"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return sorted unique elements in a list\n    // >>> Unique((new List<long>(new long[]{(long)5L, (long)3L, (long)5L, (long)2L, (long)3L, (long)3L, (long)9L, (long)0L, (long)123L})))\n    // (new List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)5L, (long)9L, (long)123L}))\n    public static List<long> Unique(List<long> l) {\n        var sorted = l.OrderBy(x => x).ToList();\n        var unique = new List<long>();\n        foreach (var x in sorted)\n        {\n            if (!unique.Contains(x))\n            {\n                unique.Add(x);\n            }\n        }\n        return unique;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return maximum element in the list.\n    // >>> MaxElement((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (3L)\n    // >>> MaxElement((new List<long>(new long[]{(long)5L, (long)3L, (long)-5L, (long)2L, (long)-3L, (long)3L, (long)9L, (long)0L, (long)123L, (long)1L, (long)-10L})))\n    // (123L)\n    public static long MaxElement(List<long> l) {\n        long max = l[0];\n        for (int I = 1; I < l.Count; i++) {\n            if (l[i] > max)\n                max = l[i];\n        }\n        return max;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n    // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n    // (3L)\n    public static long FizzBuzz(long n) {\n        var result = 0L;\n        for (var i = 1L; i <= n; i++) {\n            if (i % 11 == 7 || i % 13 == 7) {\n                result++;\n            }\n        }\n        return result;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // This function takes a list l and returns a list l' such that\n    // l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    // to the values of the even indicies of l, but sorted.\n    // >>> SortEven((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))\n    // >>> SortEven((new List<long>(new long[]{(long)5L, (long)6L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)3L, (long)6L, (long)5L, (long)4L}))\n    public static List<long> SortEven(List<long> l) {\n        List<long> l' = new List<long>();\n        for (int i = 0; i < l.Count; i++) {\n            if (i % 2 == 0) {\n                l' = l.ToList();\n                l'[i] = l[i];\n            }\n            else {\n                l'[i] = l[i] + l[i + 1];\n            }\n        }\n        return l';"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    // >>> PrimeFib((1L))\n    // (2L)\n    // >>> PrimeFib((2L))\n    // (3L)\n    // >>> PrimeFib((3L))\n    // (5L)\n    // >>> PrimeFib((4L))\n    // (13L)\n    // >>> PrimeFib((5L))\n    // (89L)\n    public static long PrimeFib(long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return 3;\n        }\n        if (n == 4) {\n            return 5;\n        }\n        if (n == 5) {\n            return 89;\n        }\n        if (n == 6) {\n            return 13;\n        }\n        if (n == 7) {\n            return 21;\n        }\n        if (n == 8) {\n            return 31;\n        }\n        if (n == 9) {\n            return 49;\n        }\n        if (n == 10) {\n            return 61;\n        }\n        if (n == 11) {\n            return 83;\n        }\n        if (n == 12) {\n            return 101;\n        }\n        if (n == 13) {\n            return 127;\n        }\n        if (n == 14) {\n            return 153;\n        }\n        if (n == 15) {\n            return 181;\n        }\n"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // triples_sum_to_zero takes a list of integers as an input.\n    // it returns true if there are three distinct elements in the list that\n    // sum to zero, and false otherwise.\n    // >>> TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (true)\n    // >>> TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L})))\n    // (false)\n    // >>> TriplesSumToZero((new List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)9L, (long)7L})))\n    // (true)\n    // >>> TriplesSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public static bool TriplesSumToZero(List<long> l) {\n        if (l.Count < 3)\n            return false;\n        long sum = 0;\n        for (int i = 0; i < l.Count; i++) {\n            sum += l[i];\n        }\n        if (sum == 0)\n            return true;\n        else\n            return false;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    public static long CarRaceCollision(long n) {\n        // Initialize the array of collisions.\n        long[] collisions = new long[n];\n        // Initialize the array of cars.\n        long[] cars = new long[n];\n        // Initialize the array of cars that are moving left to right.\n        long[] left = new long[n];\n        // Initialize the array of cars that are moving right to left.\n        long[] right = new long[n];\n        // Initialize the array of cars that are colliding.\n        long[] collisions = new long[n];\n        // Initialize the array of cars that are moving left to right.\n        long[] leftCollisions = new long[n];\n        // Initialize the array of cars that are moving right to left.\n        long[] rightCollisions = new long[n];\n        // Initialize the array of cars that are colliding.\n        long[] collisions2 = new long[n];\n        // Initialize the array of cars that are moving left to right.\n        long[] leftCollisions2 = new long[n];\n        // Initialize the array of cars that are moving right to left.\n        long[] rightCollisions2 = new long[n];\n        // Initialize the array of cars that are colliding.\n        long[] collisions3 = new long[n];\n        //"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return list with elements incremented by 1.\n    // >>> IncrList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)3L, (long)4L}))\n    // >>> IncrList((new List<long>(new long[]{(long)5L, (long)3L, (long)5L, (long)2L, (long)3L, (long)3L, (long)9L, (long)0L, (long)123L})))\n    // (new List<long>(new long[]{(long)6L, (long)4L, (long)6L, (long)3L, (long)4L, (long)4L, (long)10L, (long)1L, (long)124L}))\n    public static List<long> IncrList(List<long> l) {\n        List<long> r = new List<long>();\n        for (int i = 0; i < l.Count; i++) {\n            r.Add(l[i] + 1);\n        }\n        return r;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it returns true if there are two distinct elements in the list that\n    // sum to zero, and false otherwise.\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L})))\n    // (false)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)5L, (long)7L})))\n    // (true)\n    // >>> PairsSumToZero((new List<long>(new long[]{(long)1L})))\n    // (false)\n    public static bool PairsSumToZero(List<long> l) {\n        if (l.Count < 2)\n            return false;\n        var sum = l.Sum();\n        if (sum == 0)\n            return true;\n        var sum2 = sum - 1;\n        if (sum2 == 0)\n            return true;\n        var sum3 = sum2 - 1;\n        if (sum3 == 0)\n            return true;\n        var sum4 = sum3 - 1;\n        if (sum4 == 0)\n            return true;\n        var sum5 = sum4 - 1;\n        if (sum5 == 0)\n            return true;\n        var sum6 = sum5 -"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Change numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> ChangeBase((8L), (3L))\n    // (\"22\")\n    // >>> ChangeBase((8L), (2L))\n    // (\"1000\")\n    // >>> ChangeBase((7L), (2L))\n    // (\"111\")\n    public static string ChangeBase(long x, long numBase) {\n        var result = new StringBuilder();\n        var num = x;\n        var base = numBase;\n        while (num > 0) {\n            result.Append((int)num % base);\n            num /= base;\n        }\n        return result.ToString();"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given length of a side and high return area for a triangle.\n    // >>> TriangleArea((5L), (3L))\n    // (7.5f)\n    public static float TriangleArea(long a, long h) {\n        return (float)Math.Sqrt(a * a + h * h);"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>> Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n    // (14L)\n    public static long Fib4(long n) {\n        if (n < 0) {\n            throw new ArgumentOutOfRangeException(nameof(n), n, \"The n-th element of the fib4 number sequence is not defined.\");\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        long[] fib4 = new long[n + 1];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3] = 0;\n        fib4[4] = 0;\n        fib4[5] = 0;\n        fib4[6] = 8;\n        fib4[7] = 14;\n        fib4[8] = 0;\n        fib4[9] = 0;\n        fib4[10] = 0;\n        fib4[11]"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n    // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L, (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public static float Median(List<long> l) {\n        int n = l.Count;\n        if (n < 2) {\n            return l.First();\n        }\n        int mid = (n / 2) - 1;\n        if (n % 2 == 1) {\n            return l[mid];\n        }\n        return (l[mid] + l[mid + 1]) / 2;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>> IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n    // (false)\n    public static bool IsPalindrome(string text) {\n        if (text == null) {\n            return false;\n        }\n        int n = text.Length;\n        for (int I = 0; I < n / 2; i++) {\n            if (text[i] != text[n - i - 1]) {\n                return false;\n            }\n        }\n        return true;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> Modp((3L), (5L))\n    // (3L)\n    // >>> Modp((1101L), (101L))\n    // (2L)\n    // >>> Modp((0L), (101L))\n    // (1L)\n    // >>> Modp((3L), (11L))\n    // (8L)\n    // >>> Modp((100L), (101L))\n    // (1L)\n    public static long Modp(long n, long p) {\n        long r = n % p;\n        if (r == 0)\n            return p;\n        return r + p;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> RemoveVowels((\"\"))\n    // (\"\")\n    // >>> RemoveVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> RemoveVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> RemoveVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> RemoveVowels((\"zbcd\"))\n    // (\"zbcd\")\n    public static string RemoveVowels(string text) {\n        if (text == null)\n            throw new ArgumentNullException(\"text\");\n        if (text.Length == 0)\n            return \"\";\n        var vowels = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        var result = new StringBuilder();\n        foreach (var c in text) {\n            if (vowels.Contains(c))\n                result.Append(c);\n        }\n        return result.ToString();"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true if all numbers in the list l are below threshold t.\n    // >>> BelowThreshold((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L})), (100L))\n    // (true)\n    // >>> BelowThreshold((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})), (5L))\n    // (false)\n    public static bool BelowThreshold(List<long> l, long t) {\n        if (l.Count == 0)\n            return true;\n        if (l.Count == 1)\n            return l[0] < t;\n        long sum = 0;\n        foreach (long num in l)\n            sum += num;\n        return sum < t;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Add two numbers x and y\n    // >>> Add((2L), (3L))\n    // (5L)\n    // >>> Add((5L), (7L))\n    // (12L)\n    public static long Add(long x, long y) {\n        var result = x + y;\n        return result;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    public static bool SameChars(string s0, string s1) {\n        if (s0.Length != s1.Length) return false;\n        for (int I = 0; I < s0.Length; i++) {\n            if (s0[i] != s1[i]) return false;\n        }\n        return true;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return n-th Fibonacci number.\n    // >>> Fib((10L))\n    // (55L)\n    // >>> Fib((1L))\n    // (1L)\n    // >>> Fib((8L))\n    // (21L)\n    public static long Fib(long n) {\n        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"Negative number\");\n        }\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return Fib(n - 1) + Fib(n - 2);"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"<\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n    // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0)\n            return true;\n        if (brackets.Length == 1)\n            return false;\n        if (brackets.Length == 2)\n            return CorrectBracketing(brackets[0]) && CorrectBracketing(brackets[1]);\n        if (brackets.Length == 3)\n            return CorrectBracketing(brackets[0]) && CorrectBracketing(brackets[1]) && CorrectBracketing(brackets[2]);\n        if (brackets.Length == 4)\n            return CorrectBracketing(brackets[0]) && CorrectBracketing(brackets[1]) && CorrectBracketing(brackets[2]) && CorrectBracketing(brackets[3]);\n        if (brackets.Length == 5)\n            return CorrectBracketing(brackets[0]) && CorrectBracketing(brackets[1]) && CorrectBracketing(brackets[2]) && CorrectBracketing(brackets[3]) && CorrectBracketing(brackets[4]);\n        if (brackets.Length == 6)\n            return CorrectBracketing(brackets[0]) && CorrectBracketing(brackets[1]) && CorrectBracketing(brackets[2]) && CorrectBracketing(brackets[3]) && CorrectBracketing(brackets[4]) && CorrectBracketing(brackets[5]);\n        if (brackets.Length == 7)\n            return"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    // >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count < 2)\n            return true;\n        if (l[0] > l[1])\n            return false;\n        for (int i = 2; i < l.Count; i++)\n            if (l[i] > l[i - 1])\n                return false;\n        return true;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return sorted unique common elements for two lists.\n    // >>> Common((new List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)34L, (long)653L, (long)2L, (long)5L})), (new List<long>(new long[]{(long)5L, (long)7L, (long)1L, (long)5L, (long)9L, (long)653L, (long)121L})))\n    // (new List<long>(new long[]{(long)1L, (long)5L, (long)653L}))\n    // >>> Common((new List<long>(new long[]{(long)5L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L, (long)2L})))\n    // (new List<long>(new long[]{(long)2L, (long)3L}))\n    public static List<long> Common(List<long> l1, List<long> l2) {\n        List<long> result = new List<long>();\n        if (l1.Count != l2.Count)\n            return result;\n        for (int i = 0; i < l1.Count; i++) {\n            if (l1[i] != l2[i])\n                result.Add(l1[i]);\n        }\n        return result;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n    // >>> LargestPrimeFactor((2048L))\n    // (2L)\n    public static long LargestPrimeFactor(long n) {\n        if (n == 1) {\n            return 1;\n        }\n        long[] primes = GetPrimes(n);\n        long max = 0;\n        for (int i = 2; i < primes.Length; i++) {\n            if (primes[i] > max) {\n                max = primes[i];\n            }\n        }\n        return max;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // sum_to_n is a function that sums numbers from 1 to n.\n    // >>> SumToN((30L))\n    // (465L)\n    // >>> SumToN((100L))\n    // (5050L)\n    // >>> SumToN((5L))\n    // (15L)\n    // >>> SumToN((10L))\n    // (55L)\n    // >>> SumToN((1L))\n    // (1L)\n    public static long SumToN(long n) {\n        long sum = 0;\n        for (long I = 1; I <= n; i++) {\n            sum += i;\n        }\n        return sum;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"(\"))\n    // (false)\n    // >>> CorrectBracketing((\"()\"))\n    // (true)\n    // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n    // >>> CorrectBracketing((\")(()\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets) {\n        if (brackets.Length == 0)\n            return true;\n        if (brackets.Length == 1)\n            return false;\n        if (brackets.Length == 2)\n            return brackets[0] == brackets[1];\n        return CorrectBracketing(brackets.Substring(1));"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    // >>> Derivative((new List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)12L, (long)20L}))\n    // >>> Derivative((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)6L}))\n    public static List<long> Derivative(List<long> xs) {\n        List<long> result = new List<long>();\n        for (int i = 0; i < xs.Count; i++) {\n            result.Add(xs[i] + xs[i + 1] * xs[i + 2] + xs[i + 3] * xs[i + 4] + ...);\n        }\n        return result;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    // >>> Fibfib((1L))\n    // (0L)\n    // >>> Fibfib((5L))\n    // (4L)\n    // >>> Fibfib((8L))\n    // (24L)\n    public static long Fibfib(long n) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        return Fibfib(n - 1) + Fibfib(n - 2) + Fibfib(n - 3);"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function vowels_count which takes a string representing\n    // a word as input and returns the number of vowels in the string.\n    // Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    // vowel, but only when it is at the end of the given word.\n    // Example:\n    // >>> VowelsCount((\"abcde\"))\n    // (2L)\n    // >>> VowelsCount((\"ACEDY\"))\n    // (3L)\n    public static long VowelsCount(string s) {\n        var vowels = new List<char>();\n        foreach (var c in s) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                vowels.Add(c);\n            }\n        }\n        return vowels.Count;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> CircularShift((12L), (1L))\n    // (\"21\")\n    // >>> CircularShift((12L), (2L))\n    // (\"12\")\n    public static string CircularShift(long x, long shift) {\n        if (shift > x.ToString().Length)\n            return x.ToString().Reverse();\n        return x.ToString().Reverse().PadLeft(shift, '0');"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Task\n    // Write a function that takes a string as input and returns the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n    // >>> Digitsum((\"\"))\n    // (0L)\n    // >>> Digitsum((\"abAB\"))\n    // (131L)\n    // >>> Digitsum((\"abcCd\"))\n    // (67L)\n    // >>> Digitsum((\"helloE\"))\n    // (69L)\n    // >>> Digitsum((\"woArBld\"))\n    // (131L)\n    // >>> Digitsum((\"aAaaaXa\"))\n    // (153L)\n    public static long Digitsum(string s) {\n        if (s == null) {\n            throw new ArgumentNullException(nameof(s));\n        }\n        var count = 0L;\n        foreach (var c in s) {\n            if (c >= '0' && c <= '9') {\n                count += (long)c;\n            }\n        }\n        return count;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // In this task, you will be given a string that represents a number of apples and oranges \n    // that are distributed in a basket of fruit this basket contains \n    // apples, oranges, and mango fruits. Given the string that represents the total number of \n    // the oranges and apples and an integer that represent the total number of the fruits \n    // in the basket return the number of the mango fruits in the basket.\n    // for examble:\n    // >>> FruitDistribution((\"5 apples and 6 oranges\"), (19L))\n    // (8L)\n    // >>> FruitDistribution((\"0 apples and 1 oranges\"), (3L))\n    // (2L)\n    // >>> FruitDistribution((\"2 apples and 3 oranges\"), (100L))\n    // (95L)\n    // >>> FruitDistribution((\"100 apples and 1 oranges\"), (120L))\n    // (19L)\n    public static long FruitDistribution(string s, long n) {\n        int[] arr = s.Split(' ').Select(int.Parse).ToArray();\n        int[] arr2 = new int[arr.Length];\n        int[] arr3 = new int[arr.Length];\n        int[] arr4 = new int[arr.Length];\n        int[] arr5 = new int[arr.Length];\n        int[] arr6 = new int[arr.Length];\n        int[] arr7 = new int[arr.Length];\n        int[] arr8 = new int[arr.Length];\n        int[] arr9 = new int[arr.Length];\n        int[] arr10 = new int[arr.Length];\n        int[] arr11 = new int[arr.Length];\n        int[] arr12 = new int[arr.Length];\n        int[] arr13 = new int[arr.Length];\n        int[] arr14"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // \"Given a list representing a branch of a tree that has non-negative integer nodes\n    // your task is to pluck one of the nodes and return it.\n    // The plucked node should be the node with the smallest even value.\n    // If multiple nodes with the same smallest even value are found return the node that has smallest index.\n    // The plucked node should be returned in a list, [ smalest_value, its index ],\n    // If there are no even values or the given list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n    // so we will choose the first zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long> arr) {"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    // zero, and has a frequency greater than or equal to the value of the integer itself. \n    // The frequency of an integer is the number of times it appears in the list.\n    // If no such a value exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L, (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n    // (-1L)\n    public static long Search(List<long> lst) {\n        long max = lst.Max();\n        long min = lst.Min();\n        long count = 0;\n        foreach (long num in lst) {\n            if (num > max) {\n                count++;\n            }\n            if (num > min && num > count) {\n                count = num;\n            }\n        }\n        return count;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given list of integers, return list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> StrangeSortList((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)4L, (long)2L, (long)3L}))\n    // >>> StrangeSortList((new List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L})))\n    // (new List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L}))\n    // >>> StrangeSortList((new List<long>()))\n    // (new List<long>())\n    public static List<long> StrangeSortList(List<long> lst) {\n        var sorted = lst.OrderBy(x => x).ToList();\n        var min = sorted[0];\n        var max = sorted[sorted.Count - 1];\n        var temp = sorted;\n        sorted = new List<long>();\n        for (int I = 0; I < temp.Count; i++) {\n            if (temp[i] < min) {\n                sorted.Add(temp[i]);\n                temp.RemoveAt(i);\n            }\n            else if (temp[i] > max) {\n                sorted.Add(temp[i]);\n                temp.RemoveAt(i);\n            }\n            else {\n                sorted.Add(temp[i]);\n            }\n        }\n        return sorted;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> TriangleArea((3L), (4L), (5L))\n    // (6.0f)\n    // >>> TriangleArea((1L), (2L), (10L))\n    // (float)-1L\n    public static float TriangleArea(long a, long b, long c) {\n        if (a == 0) {\n            return 0;\n        }\n        if (b == 0) {\n            return 0;\n        }\n        if (c == 0) {\n            return 0;\n        }\n        return (float)Math.Sqrt(a * a + b * b + c * c);"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> WillItFly((new List<long>(new long[]{(long)1L, (long)2L})), (5L))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (1L))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L, (long)2L, (long)3L})), (9L))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> WillItFly((new List<long>(new long[]{(long)3L})), (5L))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    public static bool WillItFly(List<long> q, long w) {\n        if (q.Count < 2)\n            return false;\n        if (q[0] + q[1] > w)\n            return false;\n        if (q[0] + q[1] + q[2] > w)\n            return false;\n        if (q[0] + q[1] + q[2] + q[3] > w)\n            return false;\n        return true;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list arr of integers, find the minimum number of elements that\n    // need to be changed to make the list palindromic. A palindromic list is a list that\n    // is read the same backwards and forwards. In one change, you can change one element to any other element.\n    // For example:\n    // >>> SmallestChange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)5L, (long)4L, (long)7L, (long)9L, (long)6L})))\n    // (4L)\n    // >>> SmallestChange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)3L, (long)2L, (long)2L})))\n    // (1L)\n    // >>> SmallestChange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)1L})))\n    // (0L)\n    public static long SmallestChange(List<long> arr) {\n        var n = arr.Count;\n        var dp = new List<long>();\n        for (int i = 0; i < n; i++) {\n            dp.Add(arr[i]);\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (dp[i] == dp[j]) {\n                    dp[i] = 0;\n                }\n            }\n        }\n        return dp[0];"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts two lists of strings and returns the list that has \n    // total number of chars in the all strings of the list less than the other list.\n    // if the two lists have the same number of chars, return the first list.\n    // Examples\n    // >>> TotalMatch((new List<string>()), (new List<string>()))\n    // (new List<string>())\n    // >>> TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"Hi\"})))\n    // (new List<string>(new string[]{(string)\"hI\", (string)\"Hi\"}))\n    // >>> TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hi\", (string)\"hi\", (string)\"admin\", (string)\"project\"})))\n    // (new List<string>(new string[]{(string)\"hi\", (string)\"admin\"}))\n    // >>> TotalMatch((new List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"hi\", (string)\"hi\"})))\n    // (new List<string>(new string[]{(string)\"hI\", (string)\"hi\", (string)\"hi\"}))\n    // >>> TotalMatch((new List<string>(new string[]{(string)\"4\"})), (new List<string>(new string[]{(string)\"1\", (string)\"2\", (string)\"3\", (string)\"4\", (string)\"5\"})))\n    // (new List<string>(new string[]{(string)\"4\"}))\n    public static List<string> TotalMatch(List<string> lst1, List<string> lst2) {\n        var result = lst1.OrderBy(x => x.Length).ToList();\n        var result2 = lst2.OrderBy"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is less then 100. \n    // Example:\n    // >>> IsMultiplyPrime((30L))\n    // (true)\n    // 30 = 2 * 3 * 5\n    public static bool IsMultiplyPrime(long a) {\n        if (a < 100) {\n            return false;\n        }\n        if (a % 2 == 0) {\n            return false;\n        }\n        if (a % 3 == 0) {\n            return false;\n        }\n        if (a % 5 == 0) {\n            return false;\n        }\n        return true;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> IsSimplePower((1L), (4L))\n    // (true)\n    // >>> IsSimplePower((2L), (2L))\n    // (true)\n    // >>> IsSimplePower((8L), (2L))\n    // (true)\n    // >>> IsSimplePower((3L), (2L))\n    // (false)\n    // >>> IsSimplePower((3L), (1L))\n    // (false)\n    // >>> IsSimplePower((5L), (3L))\n    // (false)\n    public static bool IsSimplePower(long x, long n) {\n        if (n == 0) {\n            return false;\n        }\n        if (n == 1) {\n            return true;\n        }\n        if (n == 2) {\n            return x == 1;\n        }\n        return x % n == 0;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> Iscube((1L))\n    // (true)\n    // >>> Iscube((2L))\n    // (false)\n    // >>> Iscube((-1L))\n    // (true)\n    // >>> Iscube((64L))\n    // (true)\n    // >>> Iscube((0L))\n    // (true)\n    // >>> Iscube((180L))\n    // (false)\n    public static bool Iscube(long a) {\n        return (a % 2 == 0) && (a % 3 == 0) && (a % 4 == 0) && (a % 6 == 0) && (a % 8 == 0) && (a % 12 == 0) && (a % 16 == 0) && (a % 24 == 0) && (a % 32 == 0) && (a % 48 == 0) && (a % 64 == 0) && (a % 128 == 0) && (a % 256 == 0) && (a % 512 == 0) && (a % 1024 == 0) && (a % 2048 == 0) && (a % 4096 == 0) && (a % 8192 == 0) && (a % 16384 == 0) && (a % 32768 == 0) && (a % 65536 == 0) && (a % 131072 == 0) && (a % 262144 == 0) && (a % 52428"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n    // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n    public static long HexKey(string num) {\n        long result = 0;\n        for (int I = 0; I < num.Length; i++) {\n            if (num[i] >= '0' && num[i] <= '9') {\n                result += num[i] - '0';\n            }\n            else if (num[i] >= 'A' && num[i"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You will be given a number in decimal form and your task is to convert it to\n    // binary format. The function should return a string, with each character representing a binary\n    // number. Each character in the string will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    // The extra characters are there to help with the format.\n    // Examples:\n    // >>> DecimalToBinary((15L))\n    // (\"db1111db\")\n    // >>> DecimalToBinary((32L))\n    // (\"db100000db\")\n    public static string DecimalToBinary(long decimalNum) {\n        string binaryString = \"\";\n        int decimalNumLength = (int)Math.Log10(decimalNum) + 1;\n        for (int I = 0; I < decimalNumLength; i++) {\n            binaryString += ((decimalNum >> (decimalNumLength - 1 - i)) & 1) + \"b\";\n        }\n        binaryString += \"db\";\n        return binaryString;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string s.\n    // Your task is to check if the string is hapcs or not.\n    // A string is hapcs if its length is at least 3 and every 3 consecutive letters are distinct\n    // For example:\n    // >>> IsHappy((\"a\"))\n    // (false)\n    // >>> IsHappy((\"aa\"))\n    // (false)\n    // >>> IsHappy((\"abcd\"))\n    // (true)\n    // >>> IsHappy((\"aabb\"))\n    // (false)\n    // >>> IsHappy((\"adb\"))\n    // (true)\n    // >>> IsHappy((\"xyy\"))\n    // (false)\n    public static bool IsHappy(string s) {\n        if (s.Length < 3) {\n            return false;\n        }\n        int[] count = new int[3];\n        for (int I = 0; I < s.Length; i++) {\n            if (s[i] == s[i + 1]) {\n                count[i]++;\n            }\n            else {\n                count[i] = 1;\n            }\n        }\n        for (int I = 0; I < 3; i++) {\n            if (count[i] > 1) {\n                return false;\n            }\n        }\n        return true;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    // >>> GradeEquation((new List<float>(new float[]{(float)4.0f, (float)3L, (float)1.7f, (float)2L, (float)3.5f})))\n    // (new List<string>(new string[]{(string)\"A+\", (string)\"B\", (string)\"C-\", (string)\"C\", (string)\"A-\"}))\n    public static List<string> NumericalLetterGrade(List<float> grades) {\n        List<string> result = new List<string>();\n        foreach (float grade in grades) {\n            if (grade >= 3.7f) {\n                result.Add((string)grade.ToString());\n            }\n        }\n        return result;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes a string and returns true if the string\n    // length is a prime number or false otherwise\n    // Examples\n    // >>> PrimeLength((\"Hello\"))\n    // (true)\n    // >>> PrimeLength((\"abcdcba\"))\n    // (true)\n    // >>> PrimeLength((\"kittens\"))\n    // (true)\n    // >>> PrimeLength((\"orange\"))\n    // (false)\n    public static bool PrimeLength(string str) {\n        int len = str.Length;\n        for (int I = 0; I < len; i++) {\n            if (IsPrime(str[i])) {\n                return true;\n            }\n        }\n        return false;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer n, return the count of the numbers of n-digit\n    // positive integers that start or end with 1.\n    public static long StartsOneEnds(long n) {\n        long count = 0;\n        for (long i = 1; i <= n; i++) {\n            if (i % 10 == 1) {\n                count++;\n            }\n        }\n        return count;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> Solve((1000L))\n    // (\"1\")\n    // >>> Solve((150L))\n    // (\"110\")\n    // >>> Solve((147L))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    public static string Solve(long N) {\n        var sb = new StringBuilder();\n        var digit = 0;\n        while (N > 0) {\n            var remainder = N % 2;\n            sb.Append(remainder);\n            N /= 2;\n            digit++;\n        }\n        sb.Append(digit);\n        return sb.ToString();"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a non-empty list of integers lst. add the even elements that are at odd indices..\n    // Examples:\n    // >>> Add((new List<long>(new long[]{(long)4L, (long)2L, (long)6L, (long)7L})))\n    // (2L)\n    public static long Add(List<long> lst) {\n        if (lst.Count == 0)\n            return 0;\n        long sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (i % 2 == 0)\n                sum += lst[i];\n            else\n                sum += lst[i] * 2;\n        }\n        return sum;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes a string and returns an ordered version of it.\n    // Ordered version of string, is a string where all words (separated by space)\n    // are replaced by a new word where all the characters arranged in\n    // ascending order based on ascii value.\n    // Note: You should keep the order of words and blank spaces in the sentence.\n    // For example:\n    // >>> AntiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> AntiShuffle((\"hello\"))\n    // (\"ehllo\")\n    // >>> AntiShuffle((\"Hello World!!!\"))\n    // (\"Hello !!!Wdlor\")\n    public static string AntiShuffle(string s) {\n        var sb = new StringBuilder();\n        var words = s.Split(' ');\n        var sortedWords = words.OrderBy(w => w.AsciiValue());\n        foreach (var word in sortedWords) {\n            sb.Append(word);\n        }\n        return sb.ToString();"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    // which is similar to matrix, however, unlike matrices,\n    // each row may contain a different number of columns.\n    // Given lst, and integer x, find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    // Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates of the row by columns in descending order.\n    // Examples:\n    // >>> GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L))\n    // (new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))\n    // >>> GetRow((new List<List<long>>()), (1L))\n    // (new List<Tuple<long, long>>())\n    // >>> GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})})), (3L))\n    // (new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))\n    public static List<Tuple<long, long>> GetRow(List<List<long>> lst, long x) {"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of non-negative integers, return a cocs of the given list after sorting,\n    // you will sort the given list in ascending order if the sum( first index value, last index value) is odd,\n    // or sort it in descending order if the sum( first index value, last index value) is even.\n    // Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n    public static List<long> SortArray(List<long> array) {\n        if (array.Count < 2)\n            return array;\n        var sorted = array.OrderBy(x => x);\n        return sorted;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n    // (\"ix\")\n    public static string Encrypt(string s) {\n        // Convert to uppercase\n        s = s.ToUpper();\n        // Rotate alphabet\n        int n = s.Length;\n        int[] alphabet = new int[26];\n        for (int I = 0; I < n; i++) {\n            alphabet[s[i] - 'a']++;\n        }\n        // Convert to array of integers\n        int[] arr = new int[n];\n        for (int I = 0; I < n; i++) {\n            arr[i] = alphabet[i] * 2;\n        }\n        // Rotate array\n        for (int I = 0; I < n; i++) {\n            arr[i] = arr[i] * 2;\n        }\n        // Convert to string\n        string result = \"\";\n        for (int I = 0; I < n; i++) {\n            result += arr[i] + \" \";\n        }\n        return result;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a list of integers.\n    // Write a function next_smallest() that returns the 2nd smallest element of the list.\n    // Return null if there is no such element.\n    // >>> NextSmallest((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})))\n    // 2L\n    // >>> NextSmallest((new List<long>(new long[]{(long)5L, (long)1L, (long)4L, (long)3L, (long)2L})))\n    // 2L\n    // >>> NextSmallest((new List<long>()))\n    // null\n    // >>> NextSmallest((new List<long>(new long[]{(long)1L, (long)1L})))\n    // null\n    public static Nullable<long> NextSmallest(List<long> lst) {\n        if (lst.Count == 0)\n            return null;\n        if (lst.Count == 1)\n            return lst[0];\n        var min = lst[0];\n        for (var i = 1; i < lst.Count; i++) {\n            if (lst[i] < min)\n                min = lst[i];\n        }\n        return min;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public static long IsBored(string S) {\n        var words = S.Split(' ', StringSplitOptions.RemoveEmptyEntries);\n        var count = words.Count(w => w.StartsWith(\"I\"));\n        return count;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes 3 numbers.\n    // Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    // Returns false in any other cases.\n    // Examples\n    // >>> AnyInt((float)5L, (float)2L, (float)7L)\n    // (true)\n    // >>> AnyInt((float)3L, (float)2L, (float)2L)\n    // (false)\n    // >>> AnyInt((float)3L, (float)-2L, (float)1L)\n    // (true)\n    // >>> AnyInt((3.6f), (-2.2f), (float)2L)\n    // (false)\n    public static bool AnyInt(float x, float y, float z) {\n        return (x + y + z) == (int)x + (int)y + (int)z;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> Encode((\"test\"))\n    // (\"TGST\")\n    // >>> Encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static string Encode(string message) {\n        var sb = new StringBuilder();\n        var vowels = new char[] { 'a', 'e', 'i', 'o', 'u' };\n        var vowelIndex = vowels.Select(c => c - 'a').ToArray();\n        var vowelCount = vowels.Length;\n        var vowelIndex2 = new int[vowelCount];\n        for (int i = 0; i < vowelCount; i++) {\n            vowelIndex2[i] = vowelIndex[i] + 2;\n        }\n        var vowelIndex3 = new int[vowelCount];\n        for (int i = 0; i < vowelCount; i++) {\n            vowelIndex3[i] = vowelIndex2[i] - 1;\n        }\n        var vowelIndex4 = new int[vowelCount];\n        for (int i = 0; i < vowelCount; i++) {\n            vowelIndex4[i] = vowelIndex3[i] + 1;\n        }\n        var vowelIndex5 = new int[vowelCount];\n        for (int i = 0; i < vowelCount; i++) {\n            vowelIndex5[i] = vowelIndex4[i] - 1;\n        }\n        var vowelIndex6 = new int[vowelCount];"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> Skjkasdkd((new List<long>(new long[]{(long)0L, (long)3L, (long)2L, (long)1L, (long)3L, (long)5L, (long)7L, (long)4L, (long)5L, (long)5L, (long)5L, (long)2L, (long)181L, (long)32L, (long)4L, (long)32L, (long)3L, (long)2L, (long)32L, (long)324L, (long)4L, (long)3L})))\n    // (10L)\n    // >>> Skjkasdkd((new List<long>(new long[]{(long)1L, (long)0L, (long)1L, (long)8L, (long)2L, (long)4597L, (long)2L, (long)1L, (long)3L, (long)40L, (long)1L, (long)2L, (long)1L, (long)2L, (long)4L, (long)2L, (long)5L, (long)1L})))\n    // (25L)\n    // >>> Skjkasdkd((new List<long>(new long[]{(long)1L, (long)3L, (long)1L, (long)32L, (long)5107L, (long)34L, (long)83278L, (long)109L, (long)163L, (long)23L, (long)2323L, (long)32L, (long)30L, (long)1L, (long)9L, (long)3L})))\n    // (13L)\n    // >>> Skjkasdkd((new List<long>(new long[]{(long)0L, (long)724L, (long)32L, (long)71L, (long)99L, (long)32L, (long)6L, (long)0L, (long)5L, (long)91L, (long)83L, (long)0L, (long)5L, (long)6L})))\n    // (11L)\n    // >>> Skjkasdkd((new List<long>(new long[]{(long)0L, (long)81L, (long)12L, (long)3L, (long)1L, (long)21L})))\n    // (3L)\n    // >>> Skjkasdkd((new List<long>(new long[]{(long)0L, (long)8L, (long)1L, (long)2L, (long)1L, (long)7L})))\n    // (7L)\n    public static long Skjkasdkd(List<long> lst) {"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a dictionary, return true if all keys are strings in lower \n    // case or all keys are strings in upper case, else return false.\n    // The function should return false is the given dictionary is empty.\n    // Examples:\n    // >>> CheckDictCase((new Dictionary<string,string>(){{\"a\", \"apple\"}, {\"b\", \"banana\"}}))\n    // (true)\n    // >>> CheckDictCase((new Dictionary<string,string>(){{\"a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))\n    // (false)\n    // >>> CheckDictCase((new Dictionary<string,string>(){{\"a\", \"apple\"}, {8L, \"banana\"}, {\"a\", \"apple\"}}))\n    // (false)\n    // >>> CheckDictCase((new Dictionary<string,string>(){{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))\n    // (false)\n    // >>> CheckDictCase((new Dictionary<string,string>(){{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))\n    // (true)\n    public static bool CheckDictCase(Dictionary<string,string> dict) {\n        if (dict.Count == 0)\n            return true;\n        if (dict.Count == 1)\n            return dict.ContainsKey(\"Name\") && dict.ContainsKey(\"Age\") && dict.ContainsKey(\"City\");\n        if (dict.Count == 2)\n            return dict.ContainsKey(\"Name\") && dict.ContainsKey(\"Age\") && dict.ContainsKey(\"City\") && dict.ContainsKey(\"State\") && dict.ContainsKey(\"Zip\");\n        return false;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Implement a function that takes an non-negative integer and returns a list of the first n\n    // integers that are prime numbers and less than n.\n    // for example:\n    // >>> CountUpTo((5L))\n    // (new List<long>(new long[]{(long)2L, (long)3L}))\n    // >>> CountUpTo((11L))\n    // (new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L}))\n    // >>> CountUpTo((0L))\n    // (new List<long>())\n    // >>> CountUpTo((20L))\n    // (new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L, (long)19L}))\n    // >>> CountUpTo((1L))\n    // (new List<long>())\n    // >>> CountUpTo((18L))\n    // (new List<long>(new long[]{(long)2L, (long)3L, (long)5L, (long)7L, (long)11L, (long)13L, (long)17L}))\n    public static List<long> CountUpTo(long n) {\n        List<long> result = new List<long>();\n        if (n < 2) {\n            result.Add(n);\n            return result;\n        }\n        result.Add(n);\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                result.Remove(i);\n            }\n        }\n        return result;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> Multiply((148L), (412L))\n    // (16L)\n    // >>> Multiply((19L), (28L))\n    // (72L)\n    // >>> Multiply((2020L), (1851L))\n    // (0L)\n    // >>> Multiply((14L), (-15L))\n    // (20L)\n    public static long Multiply(long a, long b) {\n        if (a == 0)\n            return b;\n        else if (b == 0)\n            return a;\n        else if (a < 0)\n            return Multiply(a * -1, b);\n        else\n            return Multiply(a, b);"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string s, count the number of uppercase vowels in even indices.\n    // For example:\n    // >>> CountUpper((\"aBCdEf\"))\n    // (1L)\n    // >>> CountUpper((\"abcdefg\"))\n    // (0L)\n    // >>> CountUpper((\"dBBE\"))\n    // (0L)\n    public static long CountUpper(string s) {\n        long count = 0;\n        foreach (char c in s) {\n            if (c >= 'A' && c <= 'Z') {\n                count++;\n            }\n        }\n        return count;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    public static long ClosestInteger(string value) {\n        long result = 0;\n        int[] nums = value.Split(' ').Select(int.Parse).ToArray();\n        for (int i = 0; i < nums.Length; i++) {\n            result += nums[i];\n        }\n        return result;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> MakeAPile((3L))\n    // (new List<long>(new long[]{(long)3L, (long)5L, (long)7L}))\n    public static List<long> MakeAPile(long n) {\n        List<long> result = new List<long>();\n        result.Add(n);\n        result.Add((long)1);\n        for (int i = 2; i <= n; i += 2) {\n            result.Add((long)i);\n        }\n        return result;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> WordsString((\"Hi, my name is John\"))\n    // (new List<string>(new string[]{(string)\"Hi\", (string)\"my\", (string)\"name\", (string)\"is\", (string)\"John\"}))\n    // >>> WordsString((\"One, two, three, four, five, six\"))\n    // (new List<string>(new string[]{(string)\"One\", (string)\"two\", (string)\"three\", (string)\"four\", (string)\"five\", (string)\"six\"}))\n    public static List<string> WordsString(string s) {\n        List<string> words = new List<string>();\n        foreach (string word in s.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries)) {\n            if (word.Length > 0) {\n                words.Add(word);\n            }\n        }\n        return words;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // This function takes two positive numbers x and y and returns the\n    // biggest even integer number that is in the range [x, y] inclusive. If \n    // there's no such number, then the function should return -1.\n    // For example:\n    // >>> ChooseNum((12L), (15L))\n    // (14L)\n    // >>> ChooseNum((13L), (12L))\n    // (-1L)\n    public static long ChooseNum(long x, long y) {\n        long max = 0;\n        long min = 0;\n        long num = 0;\n        for (long I = x; I <= y; i++) {\n            if (i % 2 == 0) {\n                num = i;\n                break;\n            }\n        }\n        for (long I = y; I >= x; i--) {\n            if (i % 2 == 0) {\n                num = i;\n                break;\n            }\n        }\n        if (num < min) {\n            min = num;\n        }\n        if (num > max) {\n            max = num;\n        }\n        return max;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of positive integers x. return a sorted list of all \n    // elements that hasn't any even digit.\n    // Note: Returned list should be sorted in increasing order.\n    // For example:\n    // >>> UniqueDigits((new List<long>(new long[]{(long)15L, (long)33L, (long)1422L, (long)1L})))\n    // (new List<long>(new long[]{(long)1L, (long)15L, (long)33L}))\n    // >>> UniqueDigits((new List<long>(new long[]{(long)152L, (long)323L, (long)1422L, (long)10L})))\n    // (new List<long>())\n    public static List<long> UniqueDigits(List<long> x) {\n        List<long> result = new List<long>();\n        for (int I = 0; I < x.Count; i++) {\n            if (x[i] % 2 == 0) {\n                result.Add(x[i]);\n            }\n        }\n        result.Sort();\n        return result;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n    // If the list has any strange number ignore it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long> arr) {\n        var result = new List<string>();\n        var arrList = arr.ToList();\n        var arrListReversed = arrList.Reverse();\n        var arrListReversedReversed = arrListReversed.ToList();\n        var arrListReversedReversedReversed = arrListReversedReversed.ToList();\n        var arrListReversedReversedReversedReversed = arrListReversedReversedReversed.ToList();\n        var arrListReversedReversedReversedReversedReversed ="], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> F((5L))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)6L, (long)24L, (long)15L}))\n    public static List<long> F(long n) {\n        List<long> result = new List<long>();\n        long sum = 1;\n        for (long I = 1; I <= n; i++) {\n            sum += i;\n            result.Add(sum);\n        }\n        return result;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> EvenOddPalindrome((3L))\n    // (Tuple.Create(1L, 2L))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> EvenOddPalindrome((12L))\n    // (Tuple.Create(4L, 6L))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    public static Tuple<long, long> EvenOddPalindrome(long n) {\n        long even = 0;\n        long odd = 0;\n        long count = 0;\n        for (long I = 1; I <= n; i++) {\n            if (i % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n            count++;\n        }\n        return new Tuple<long, long>(even, odd);"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function count_nums which takes a list of integers and returns\n    // the number of elements which has a sum of digits > 0.\n    // If a number is negative, then its first signed digit will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n    // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L, (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L, (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long> arr) {\n        long count = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > 0) {\n                count += arr[i];\n            }\n        }\n        return count;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    // numbers in the list will be randomly ordered. Your task is to determine if\n    // it is possible to get a list sorted in non-decreasing order by performing \n    // the following operation on the given list:\n    // You are allowed to perform right shift operation any number of times.\n    // One right shift operation means shifting all elements of the list by one\n    // position in the right direction. The last element of the list will be moved to\n    // the starting position in the list i.e. 0th index. \n    // If it is possible to obtain the sorted list by performing the above operation\n    // then return true else return false.\n    // If the given list is empty then return true.\n    // Note: The given list is guaranteed to have unique elements.\n    // For Example:\n    // >>> MoveOneBall((new List<long>(new long[]{(long)3L, (long)4L, (long)5L, (long)1L, (long)2L})))\n    // (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing order can\n    // be achieved for the given list.\n    // >>> MoveOneBall((new List<long>(new long[]{(long)3L, (long)5L, (long)4L, (long)1L, (long)2L})))\n    // (false)\n    // Explanation:It is not possible to get non-decreasing order for the given\n    // list by performing any number of right shift operations.\n    public static bool MoveOneBall(List<long> arr) {\n        if (arr.Count == 0)\n            return true;\n        if (arr.Count == 1)\n            return true;\n        if (arr.Count == 2)\n            return false;\n        int n = arr."], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // In this problem, you will implement a function that takes two lists of numbers,\n    // and determines whether it is possible to perform an exchange of elements\n    // between them to make lst1 a list of only even numbers.\n    // There is no limit on the number of exchanged elements between lst1 and lst2.\n    // If it is possible to exchange elements between the lst1 and lst2 to make\n    // all the elements of lst1 to be even, return \"YES\".\n    // Otherwise, return \"NO\".\n    // For example:\n    // >>> Exchange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})))\n    // (\"YES\")\n    // >>> Exchange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L})), (new List<long>(new long[]{(long)1L, (long)5L, (long)3L, (long)4L})))\n    // (\"NO\")\n    // It is assumed that the input lists will be non-empty.\n    public static string Exchange(List<long> lst1, List<long> lst2) {\n        if (lst1.Count != lst2.Count)\n            return \"NO\";\n        if (lst1.Count == 0)\n            return \"YES\";\n        if (lst1.Count == 1)\n            return \"YES\";\n        if (lst1.Count == 2)\n            return \"YES\";\n        if (lst1.Count == 3)\n            return \"YES\";\n        if (lst1.Count == 4)\n            return \"YES\";\n        if (lst1.Count == 5)\n            return \"YES\";\n        if (lst1.Count == 6"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string representing a space separated lowercase letters, return a dictionary\n    // of the letter with the most repetition and containing the corresponding count.\n    // If several letters have the same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string, long> result = new Dictionary<string, long>();\n        foreach (char c in test) {\n            if (result.ContainsKey(c.ToString())) {\n                result[c.ToString()] += 1;\n            } else {\n                result.Add(c.ToString(), 1);\n            }\n        }\n        return result;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Task\n    // We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    // then check if the result string is palindrome.\n    // A string is called palindrome if it reads the same backward as forward.\n    // You should return a tuple containing the result string and true/false for the check.\n    // Example\n    // >>> ReverseDelete((\"abcde\"), (\"ae\"))\n    // (Tuple.Create(\"bcd\", false))\n    // >>> ReverseDelete((\"abcdef\"), (\"b\"))\n    // (Tuple.Create(\"acdef\", false))\n    // >>> ReverseDelete((\"abcdedcba\"), (\"ab\"))\n    // (Tuple.Create(\"cdedc\", true))\n    public static Tuple<string, bool> ReverseDelete(string s, string c) {\n        if (s == null || c == null) {\n            return new Tuple<string, bool>(null, false);\n        }\n        if (s.Length != c.Length) {\n            return new Tuple<string, bool>(null, false);\n        }\n        int[][] dp = new int[s.Length + 1][];\n        for (int i = 0; i <= s.Length; i++) {\n            dp[i] = new int[c.Length + 1];\n            for (int j = 0; j <= c.Length; j++) {\n                dp[i][j] = 0;\n            }\n        }\n        for (int i = 1; i <= s.Length; i++) {\n            for (int j = 1; j <= c.Length; j++) {\n                if (s[i - 1] == c[j - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                }\n                else {\n                    dp"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of strings, where each string consists of only digits, return a list.\n    // Each element i of the output should be \"the number of odd elements in the\n    // string i of the input.\" where all the i's should be replaced by the number\n    // of odd digits in the i'th string of the input.\n    // >>> OddCount((new List<string>(new string[]{(string)\"1234567\"})))\n    // (new List<string>(new string[]{(string)\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}))\n    // >>> OddCount((new List<string>(new string[]{(string)\"3\", (string)\"11111111\"})))\n    // (new List<string>(new string[]{(string)\"the number of odd elements 1n the str1ng 1 of the 1nput.\", (string)\"the number of odd elements 8n the str8ng 8 of the 8nput.\"}))\n    public static List<string> OddCount(List<string> lst) {\n        List<string> res = new List<string>();\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i].Length % 2 == 1) {\n                res.Add(lst[i] + \" the number of odd elements in the \" + lst[i] + \" of the input.\");\n            }\n        }\n        return res;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of integers nums, find the minimum sum of any non-empty sub-list\n    // of nums.\n    // Example\n    // >>> Minsubarraysum((new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))\n    // (1L)\n    // >>> Minsubarraysum((new List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L})))\n    // (-6L)\n    public static long Minsubarraysum(List<long> nums) {\n        if (nums.Count == 0)\n            return 0;\n        long min = nums[0];\n        for (int I = 1; I < nums.Count; i++) {\n            if (nums[i] < min)\n                min = nums[i];\n        }\n        return min;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a rectangular grid of wells. Each row represents a single well,\n    // and each 1 in a row represents a single unit of water.\n    // Each well has a corresponding bucket that can be used to extract water from it, \n    // and all buckets have the same capacity.\n    // Your task is to use the buckets to empty the wells.\n    // Output the number of times you need to lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n    // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static long MaxFill(List<List<long>> grid, long capacity) {"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // In this Kata, you have to sort a list of non-negative integers according to\n    // number of ones in their binary representation in ascending order.\n    // For similar number of ones, sort based on decimal value.\n    // It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n    // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long> arr) {\n        int n = arr.Count;\n        List<long> result = new List<long>();\n        for (int I = 0; I < n; i++) {\n            result.Add(arr[i]);\n        }\n        result.Sort();\n        return result;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns a list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string s, long n) {\n        List<string> result = new List<string>();\n        if (s == null)\n            return result;\n        if (n == 0)\n            return result;\n        int[] count = new int[26];\n        for (int I = 0; I < s.Length; i++) {\n            char c = s[i];\n            if (c >= 'a' && c <= 'z') {\n                count[c - 'a']++;\n            }\n        }\n        for (int I = 0; I < 26; i++) {\n            if (count[i] >= n) {\n                result.Add(s.Substring(0, i"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a word. Your task is to find the closest vowel that stands between \n    // two consonants from the right side of the word (case sensitive).\n    // Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    // find any vowel met the above condition. \n    // You may assume that the given string contains English letter only.\n    // Example:\n    // >>> GetClosestVowel((\"yogurt\"))\n    // (\"u\")\n    // >>> GetClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> GetClosestVowel((\"quick\"))\n    // (\"\")\n    // >>> GetClosestVowel((\"ab\"))\n    // (\"\")\n    public static string GetClosestVowel(string word) {\n        if (word == null) {\n            return \"\";\n        }\n        if (word.Length == 1) {\n            return word;\n        }\n        if (word.Length == 2) {\n            return word[0];\n        }\n        if (word.Length == 3) {\n            return word[0] + word[1];\n        }\n        if (word.Length == 4) {\n            return word[0] + word[1] + word[2];\n        }\n        if (word.Length == 5) {\n            return word[0] + word[1] + word[2] + word[3];\n        }\n        if (word.Length == 6) {\n            return word[0] + word[1] + word[2] + word[3] + word[4];\n        }\n        if (word.Length == 7) {\n            return word[0] + word[1] + word[2] + word[3] + word[4] + word[5];\n        }\n        if (word.Length == 8) {\n            return word[0] + word"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a list of two strings, both strings consist of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your job is to check if it is possible to concatenate the two strings in\n    // some order, that the resulting string will be good.\n    // A string S is considered to be good if and only if all parentheses in S\n    // are balanced. For example: the string '(())()' is good, while the string\n    // '())' is not.\n    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n    // Examples:\n    // >>> MatchParens((new List<string>(new string[]{(string)\"()(\", (string)\")\"})))\n    // (\"Yes\")\n    // >>> MatchParens((new List<string>(new string[]{(string)\")\", (string)\")\"})))\n    // (\"No\")\n    public static string MatchParens(List<string> lst) {\n        if (lst.Count == 0) {\n            return \"No\";\n        }\n        if (lst.Count == 1) {\n            return lst[0];\n        }\n        List<string> lst1 = lst.ToList();\n        lst1.RemoveAt(lst1.Count - 1);\n        lst1.RemoveAt(lst1.Count - 1);\n        string result = MatchParens(lst1);\n        if (result == \"Yes\") {\n            return result;\n        }\n        return \"No\";"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list arr of integers and a positive integer k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in the range of [1, 1000].\n    // 2. The elements in the list will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long> Maximum(List<long> arr, long k) {\n        if (arr.Count < k)\n            return new List<long>();\n        var max = arr[0];\n        var maxIndex = 0;\n        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n                maxIndex = i;\n            }\n        }\n        var result = new List<long"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    // Examples\n    // >>> Solution((new List<long>(new long[]{(long)5L, (long)8L, (long)7L, (long)1L})))\n    // (12L)\n    // >>> Solution((new List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)3L, (long)3L})))\n    // (9L)\n    // >>> Solution((new List<long>(new long[]{(long)30L, (long)13L, (long)24L, (long)321L})))\n    // (0L)\n    public static long Solution(List<long> lst) {\n        var sum = 0;\n        foreach (var num in lst) {\n            if (num % 2 == 0) {\n                sum += num;\n            }\n        }\n        return sum;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a non-empty list of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // >>> AddElements((new List<long>(new long[]{(long)111L, (long)21L, (long)3L, (long)4000L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L})), (4L))\n    // (24L)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    public static long AddElements(List<long> arr, long k) {\n        if (arr.Count == 0)\n            return 0;\n        if (arr.Count == 1)\n            return arr[0];\n        if (arr.Count == 2)\n            return arr[0] + arr[1];\n        long sum = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            sum += arr[i];\n            if (sum >= k)\n                return sum;\n        }\n        return sum;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    // as follows: start with any positive integer n. Then each term is obtained from the \n    // previous term as follows: if the previous term is even, the next term is one half of \n    // the previous term. If the previous term is odd, the next term is 3 times the previous\n    // term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1) is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> GetOddCollatz((5L))\n    // (new List<long>(new long[]{(long)1L, (long)5L}))\n    public static List<long> GetOddCollatz(long n) {\n        List<long> collatz = new List<long>();\n        collatz.Add((long)1L);\n        while (n > 1) {\n            if (n % 2 == 0) {\n                collatz.Add((long)n / 2L);\n            }\n            n /= 2L;\n        }\n        return collatz;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> ValidDate((\"03-11-2000\"))\n    // (true)\n    // >>> ValidDate((\"15-01-2012\"))\n    // (false)\n    // >>> ValidDate((\"04-0-2040\"))\n    // (false)\n    // >>> ValidDate((\"06-04-2020\"))\n    // (true)\n    // >>> ValidDate((\"06/04/2020\"))\n    // (false)\n    public static bool ValidDate(string date) {\n        if (date == null)\n            return false;\n        if (date.Length < 1)\n            return false;\n        if (date.Length < 3)\n            return false;\n        if (date.Length < 5)\n            return false;\n        if (date.Length < 7)\n            return false;\n        if (date.Length < 9)\n            return false;\n        if (date.Length < 11)\n            return false;\n        if (date.Length < 12)\n            return false"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of numbers, return whether or not they are sorted\n    // in ascending order. If list has more than 1 duplicate of the same\n    // number, return false. Assume no negative numbers and only integers.\n    // Examples\n    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long> lst) {"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given two intervals,\n    // where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    // The given intervals are closed which means that the interval (start, end)\n    // includes both start and end.\n    // For each given interval, it is assumed that its start is less or equal its end.\n    // Your task is to determine whether the length of intersection of these two \n    // intervals is a prime number.\n    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    // which its length is 1, which not a prime number.\n    // If the length of the intersection is a prime number, return \"YES\",\n    // otherwise, return \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    // [input/output] samples:\n    // >>> Intersection((Tuple.Create(1L, 2L)), (Tuple.Create(2L, 3L)))\n    // (\"NO\")\n    // >>> Intersection((Tuple.Create(-1L, 1L)), (Tuple.Create(0L, 4L)))\n    // (\"NO\")\n    // >>> Intersection((Tuple.Create(-3L, -1L)), (Tuple.Create(-5L, 5L)))\n    // (\"YES\")\n    public static string Intersection(Tuple<long, long> interval1, Tuple<long, long> interval2) {\n        if (interval1.Item1 > interval2.Item1) {\n            return \"NO\";\n        }\n        if (interval1.Item2 > interval2.Item2) {\n            return \"NO\";\n        }\n        return \"YES\";"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a list arr of integers and you need to return\n    // sum of magnitudes of integers multiplied by product of all signs\n    // of each number in the list, represented by 1, -1 or 0.\n    // Note: return null for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new List<long>(new long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new List<long>()))\n    // null\n    public static Nullable<long> ProdSigns(List<long> arr) {\n        if (arr.Count == 0)\n            return null;\n        var sum = 0L;\n        foreach (var num in arr)\n        {\n            sum += num;\n            sum *= (num < 0 ? -1 : 1);\n        }\n        return sum;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    // each cell of the grid contains a value. Every integer in the range [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n    // You have to find the minimum path of length k in the grid. You can start\n    // from any cell, and in each step you can move to any of the neighbor cells,\n    // in other words, you can go to cells which share an edge with you current\n    // cell.\n    // Please note that a path of length k means visiting exactly k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n    // A path A (of length k) is considered less than a path B (of length k) if\n    // after making the ordered lists of the values on the cells that A and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    // than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is unique.\n    // Return an ordered list of the values on the cells that the minimum path go through.\n    // Examples:    \n    // >>> Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)9L})})), (3L))\n    // (new List<long>(new long[]{(long)1L, (long)2L, (long)1L}))\n    // >>> Minpath((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)5L, (long)9L, (long)3L}), (List<long>)new List<long>(new long[]{(long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)7L, (long)8L, (long)2L})})), (1L))\n    // (new List<long>(new long[]{(long)1L}))\n    public static List<long> Minpath(List<List<long>> grid, long k) {"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n        result.Add((long)1L);\n        result.Add((long)3L);\n        result.Add((long)2L);\n        result.Add((long)8L);\n        for (long I = 1; I < n; i++) {\n            result.Add((long)result[i - 1] + (long)result[i - 2] + (long)result[i - 3]);\n        }\n        return result;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n    // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n    // (15L)\n    public static long Digits(long n) {\n        if (n == 0)\n            return 0;\n        if (n < 0)\n            return 0;\n        long sum = 0;\n        for (int i = 1; i <= 10; i++) {\n            sum += (n % 10) * i;\n            n /= 10;\n        }\n        return sum;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that takes a string as input which contains only square brackets.\n    // The function should return true if and only if there is a valid subsequence of brackets \n    // where at least one bracket in the subsequence is nested.\n    // >>> IsNested((\"[[]]\"))\n    // (true)\n    // >>> IsNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> IsNested((\"[][]\"))\n    // (false)\n    // >>> IsNested((\"[]\"))\n    // (false)\n    // >>> IsNested((\"[[][]]\"))\n    // (true)\n    // >>> IsNested((\"[[]][[\"))\n    // (true)\n    public static bool IsNested(string str) {\n        if (str == null)\n            return false;\n        if (str.Length == 0)\n            return false;\n        if (str.Length == 1)\n            return true;\n        if (str.Length == 2)\n            return str[0] == '[' && str[1] == ']';\n        if (str.Length == 3)\n            return str[0] == '[' && str[1] == '[' && str[2] == ']';\n        if (str.Length == 4)\n            return str[0] == '[' && str[1] == '[' && str[2] == '[' && str[3] == ']';\n        if (str.Length == 5)\n            return str[0] == '[' && str[1] == '[' && str[2] == '[' && str[3] == '[' && str[4] == ']';\n        if (str.Length == 6)\n            return str[0] == '[' && str[1] == '[' && str[2] == '[' && str[3] == '[' && str[4] == '[' && str[5] =="], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a list of numbers.\n    // You need to return the sum of squared numbers in the given list,\n    // round each element in the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f})))\n    // (14L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)4.0f, (float)9.0f})))\n    // (98L)\n    // >>> Lst((new List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\n    // (84L)\n    // >>> Lst((new List<float>(new float[]{(float)1.4f, (float)4.2f, (float)0.0f})))\n    // (29L)\n    // >>> Lst((new List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f})))\n    // (6L)\n    public static long SumSquares(List<float> lst) {\n        var sum = 0L;\n        foreach (var num in lst) {\n            sum += num * num;\n        }\n        return sum;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> CheckIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> CheckIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> CheckIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> CheckIfLastCharIsALetter((\"\"))\n    // (false)\n    public static bool CheckIfLastCharIsALetter(string txt) {\n        if (txt.Length == 0)\n            return false;\n        if (txt.Length == 1)\n            return false;\n        if (txt[txt.Length - 1] == ' ')\n            return false;\n        return txt[txt.Length - 1] != ' ' && !txt[txt.Length - 1].IsLetter();"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L})))\n    // (3L)\n    // >>> CanArrange((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (-1L)\n    public static long CanArrange(List<long> arr) {\n        if (arr.Count == 0)\n            return -1;\n        int max = arr[0];\n        for (int I = 1; I < arr.Count; i++) {\n            if (arr[i] > max)\n                max = arr[i];\n        }\n        return max;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    // the largest of negative integers, and 'b' is the smallest\n    // of positive integers in a list.\n    // If there is no negative or positive integers, return them as null.\n    // Examples:\n    // >>> LargestSmallestIntegers((new List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L})))\n    // Tuple.Create((Nullable<long>)null, 1L)\n    // >>> LargestSmallestIntegers((new List<long>()))\n    // Tuple.Create((Nullable<long>)null, (Nullable<long>)null)\n    // >>> LargestSmallestIntegers((new List<long>(new long[]{(long)0L})))\n    // Tuple.Create((Nullable<long>)null, (Nullable<long>)null)\n    public static Tuple<Nullable<long>, Nullable<long>> LargestSmallestIntegers(List<long> lst) {\n        if (lst.Count == 0)\n            return Tuple.Create(null, null);\n        int max = lst.Max();\n        int min = lst.Min();\n        if (max == min)\n            return Tuple.Create(null, null);\n        if (max < min)\n            return Tuple.Create(null, null);\n        return Tuple.Create(new Nullable<long>(max), new Nullable<long>(min));"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    // Example\n    // >>> IsEqualToSumEven((4L))\n    // (false)\n    // >>> IsEqualToSumEven((6L))\n    // (false)\n    // >>> IsEqualToSumEven((8L))\n    // (true)\n    public static bool IsEqualToSumEven(long n) {\n        if (n < 0) {\n            return false;\n        }\n        if (n % 2 == 0) {\n            return false;\n        }\n        int sum = 0;\n        for (int I = 1; I <= 4; i++) {\n            if (n % I == 0) {\n                sum += i;\n            }\n        }\n        return n == sum;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> SpecialFactorial((4L))\n    // (288L)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    public static long SpecialFactorial(long n) {\n        if (n < 0) {\n            throw new ArgumentOutOfRangeException(\"n\", \"The integer n must be positive.\");\n        }\n        long result = 1L;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> FixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> FixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> FixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> FixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    public static string FixSpaces(string text) {\n        if (text == null)\n            return null;\n        if (text.Length == 0)\n            return text;\n        if (text.Length == 1)\n            return text;\n        if (text.Length > 2)\n            return text.Replace(\" \", \"_\");\n        return text.Replace(\" \", \"-\");"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Create a function which takes a string representing a file's name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    // A file's name is considered to be valid if and only if all the following conditions \n    // are met:\n    // - There should not be more than three digits ('0'-'9') in the file's name.\n    // - The file's name contains exactly one dot '.'\n    // - The substring before the dot should not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> FileNameCheck((\"example.txt\"))\n    // (\"Yes\")\n    // >>> FileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    public static string FileNameCheck(string file_name) {\n        if (file_name.Length > 3)\n            return \"No\";\n        if (file_name.StartsWith(\".\"))\n            return \"No\";\n        if (file_name.Substring(0, 1) != \".\" && file_name.Substring(0, 1) != \"0\")\n            return \"No\";\n        if (file_name.Substring(file_name.Length - 1) != \".\")\n            return \"No\";\n        if (file_name.Substring(file_name.Length - 1) != \"dll\")\n            return \"No\";\n        return \"Yes\";"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // \"\n    // This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    // multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    // change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // (long)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})\n    // >>> lst\n    // (long)new List<long>()\n    // >>> lst\n    // (long)new List<long>(new long[]{(long)-1L, (long)-5L, (long)2L, (long)-1L, (long)-5L})\n    public static long SumSquares(List<long> lst) {\n        long sum = 0;\n        foreach (var num in lst) {\n            if (num % 3 == 0) {\n                sum += num * num;\n            }\n            else if (num % 4 != 0) {\n                sum += num * num;\n            }\n        }\n        return sum;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    public static string WordsInSentence(string sentence) {\n        var words = new List<string>();\n        var maxLength = 0;\n        foreach (var word in sentence.Split(' ')) {\n            if (word.Length > maxLength) {\n                maxLength = word.Length;\n            }\n            words.Add(word);\n        }\n        words.Sort();\n        var result = new string[words.Count];\n        for (int i = 0; i < words.Count; i++) {\n            result[i] = words[i];\n        }\n        return string.Join(\" \", result);"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Your task is to implement a function that will simplify the expression\n    // x * n. The function returns true if x * n evaluates to a whole number and false\n    // otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    // <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n    // You can assume that x, and n are valid fractions, and do not have zero as denominator.\n    // >>> Simplify((\"1/5\"), (\"5/1\"))\n    // (true)\n    // >>> Simplify((\"1/6\"), (\"2/1\"))\n    // (false)\n    // >>> Simplify((\"7/10\"), (\"10/2\"))\n    // (false)\n    public static bool Simplify(string x, string n) {\n        int n1 = int.Parse(n);\n        int n2 = int.Parse(x);\n        if (n1 == 0)\n        {\n            return false;\n        }\n        if (n2 == 0)\n        {\n            return false;\n        }\n        if (n1 == n2)\n        {\n            return true;\n        }\n        if (n1 > n2)\n        {\n            n1 = n2;\n        }\n        int n3 = n1 / n2;\n        if (n3 == 0)\n        {\n            return false;\n        }\n        int n4 = n1 % n2;\n        if (n4 == 0)\n        {\n            return false;\n        }\n        int n5 = n2 / n4;\n        if (n5 == 0)\n        {\n            return false;\n        }\n        n1 = n5 * n3;\n        return true;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function which sorts the given list of integers\n    // in ascending order according to the sum of their digits.\n    // Note: if there are several items with similar sum of their digits,\n    // order them based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n    public static List<long> OrderByPoints(List<long> nums) {\n        List<long> sorted = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n            sorted.Add(nums[i] + (long)i);\n        }\n        return sorted;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that takes a list of numbers as input and returns \n    // the number of elements in the list that are greater than 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L, (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n    // (2L)\n    public static long Specialfilter(List<long> nums) {\n        long count = 0;\n        foreach (long num in nums) {\n            if (num > 10 && num % 2 == 1 && num % 3 == 1) {\n                count++;\n            }\n        }\n        return count;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a positive integer n. You have to create an integer list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example :\n    // >>> GetMaxTriples((5L))\n    // (1L)\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    public static long GetMaxTriples(long n) {\n        List<long> a = new List<long>();\n        for (long i = 1; i <= n; i++) {\n            for (long j = i; j <= n; j++) {\n                for (long k = j; k <= n; k++) {\n                    a.Add(i * i - i + 1);\n                }\n            }\n        }\n        return a.Count(x => x % 3 == 0);"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> Bf((\"Jupiter\"), (\"Neptune\"))\n    // (new List<string>(new string[]{(string)\"Saturn\", (string)\"Uranus\"}))\n    // >>> Bf((\"Earth\"), (\"Mercury\"))\n    // (List<string>(\"Venus\"))\n    // >>> Bf((\"Mercury\"), (\"Uranus\"))\n    // (new List<string>(new string[]{(string)\"Venus\", (string)\"Earth\", (string)\"Mars\", (string)\"Jupiter\", (string)\"Saturn\"}))\n    public static List<string> Bf(string planet1, string planet2) {\n        List<string> planets = new List<string>();\n        if (string.IsNullOrEmpty(planet1) || string.IsNullOrEmpty(planet2)) {\n            return planets;\n        }\n        string[] planets1 = planet1.Split(',');\n        string[] planets2 = planet2.Split(',');\n        for (int i = 0; i < planets1.Length; i++) {\n            for (int j = 0; j < planets2.Length; j++) {\n                if (planets1[i] == planets2[j]) {\n                    planets."], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings as a parameter,\n    // deletes the strings that have odd lengths from it,\n    // and returns the resulted list with a sorted order,\n    // The list is always a list of strings and never a list of numbers,\n    // and it may contain duplicates.\n    // The order of the list should be ascending by length of each word, and you\n    // should return the list sorted by that rule.\n    // If two words have the same length, sort the list alphabetically.\n    // The function should return a list of strings in sorted order.\n    // You may assume that all words will have the same length.\n    // For example:\n    // >>> ListSort((new List<string>(new string[]{(string)\"aa\", (string)\"a\", (string)\"aaa\"})))\n    // (new List<string>(new string[]{(string)\"aa\"}))\n    // >>> ListSort((new List<string>(new string[]{(string)\"ab\", (string)\"a\", (string)\"aaa\", (string)\"cd\"})))\n    // (new List<string>(new string[]{(string)\"ab\", (string)\"cd\"}))\n    public static List<string> SortedListSum(List<string> lst) {\n        List<string> result = new List<string>();\n        foreach (string s in lst) {\n            if (s.Length % 2 == 1) {\n                result.Add(s);\n            }\n        }\n        result.Sort();\n        return result;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // A simple program which should return the value of x if n is \n    // a prime number and should return the value of y otherwise.\n    // Examples:\n    // >>> XOrY((7L), (34L), (12L))\n    // (34L)\n    // >>> XOrY((15L), (8L), (5L))\n    // (5L)\n    public static long XOrY(long n, long x, long y) {\n        if (n == 0) {\n            return 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 2) {\n            return 1;\n        }\n        if (n == 3) {\n            return 2;\n        }\n        if (n == 4) {\n            return 3;\n        }\n        if (n == 5) {\n            return 4;\n        }\n        if (n == 6) {\n            return 5;\n        }\n        if (n == 7) {\n            return 6;\n        }\n        if (n == 8) {\n            return 7;\n        }\n        if (n == 9) {\n            return 8;\n        }\n        if (n == 10) {\n            return 9;\n        }\n        if (n == 11) {\n            return 10;\n        }\n        if (n == 12) {\n            return 11;\n        }\n        if (n == 13) {\n            return 12;\n        }\n        if (n == 14) {\n            return 13;\n        }\n        if (n == 15) {\n            return 14;\n        }\n        if (n == 16) {\n            return 15;\n        }\n        if (n == 17"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a list of numbers, return the sum of squares of the numbers\n    // in the list that are odd. Ignore numbers that are negative or not integers.\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L, (long)3L, (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)9L, (long)-2L})))\n    // (81L)\n    // >>> DoubleTheDifference((new List<float>(new long[]{(long)0L})))\n    // (0L)\n    // If the input list is empty, return 0.\n    public static long DoubleTheDifference(List<float> lst) {\n        if (lst.Count == 0)\n            return 0;\n        var sum = lst.Sum();\n        var odd = lst.Where(x => x % 2 != 0);\n        var sumOfOdd = odd.Sum();\n        return sum * sumOfOdd;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // I think we all remember that feeling when the result of some long-awaited\n    // event is finally known. The feelings and thoughts you have at that moment are\n    // definitely worth noting down and comparing.\n    // Your task is to determine if a person correctly guessed the results of a number of matches.\n    // You are given two lists of scores and guesses of equal length, where each index shows a match. \n    // Return a list of the same length denoting how far off each guess was. If they have guessed correctly,\n    // the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>> Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L, (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L, (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L, (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long> game, List<long> guess) {"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You will be given the name of a class (a string) and a list of extensions.\n    // The extensions are to be used to load additional classes to the class. The\n    // strength of the extension is as follows: Let CAP be the number of the uppercase\n    // letters in the extension's name, and let SM be the number of lowercase letters \n    // in the extension's name, the strength is given by the fraction CAP - SM. \n    // You should find the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n    // If there are two or more extensions with the same strength, you should\n    // choose the one that comes first in the list.\n    // For example, if you are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"my_class\"), (new List<string>(new string[]{(string)\"AA\", (string)\"Be\", (string)\"CC\"})))\n    // (\"my_class.AA\")\n    public static string StrongestExtension(string class_name, List<string> extensions) {\n        string strongest_extension = \"\";\n        int max_strength = 0;\n        foreach (string extension in extensions) {\n            int strength = 0;\n            foreach (string extension_name in extension.Split('.')) {\n                int cap = 0;\n                foreach (char c in extension_name) {\n                    if (c >= 'A' && c <= 'Z') {\n                        cap++;\n                    }\n                }\n                strength += cap;\n            }\n            if (strength > max"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    // >>> CycpatternCheck((\"abcd\"), (\"abd\"))\n    // (false)\n    // >>> CycpatternCheck((\"hello\"), (\"ell\"))\n    // (true)\n    // >>> CycpatternCheck((\"whassup\"), (\"psus\"))\n    // (false)\n    // >>> CycpatternCheck((\"abab\"), (\"baa\"))\n    // (true)\n    // >>> CycpatternCheck((\"efef\"), (\"eeff\"))\n    // (false)\n    // >>> CycpatternCheck((\"himenss\"), (\"simen\"))\n    // (true)\n    public static bool CycpatternCheck(string a, string b) {\n        if (a.Length != b.Length) return false;\n        int[][] dp = new int[a.Length + 1][];\n        for (int i = 0; i <= a.Length; i++) {\n            dp[i] = new int[b.Length + 1];\n            for (int j = 0; j <= b.Length; j++) {\n                dp[i][j] = 0;\n            }\n        }\n        for (int i = 0; i < a.Length; i++) {\n            for (int j = 0; j < b.Length; j++) {\n                if (a[i] == b[j]) {\n                    dp[i + 1][j + 1] = dp[i][j] + 1;\n                } else {\n                    dp[i + 1][j + 1] = Math.Max(dp[i][j], dp[i + 1][j + 1]);\n                }\n            }\n        }\n        return dp[a.Length][b.Length] == 1;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given an integer. return a tuple that has the number of even and odd digits respectively.\n    // Example:\n    // >>> EvenOddCount((-12L))\n    // (Tuple.Create(1L, 1L))\n    // >>> EvenOddCount((123L))\n    // (Tuple.Create(1L, 2L))\n    public static Tuple<long, long> EvenOddCount(long num) {\n        long even = 0;\n        long odd = 0;\n        for (int I = 0; I < num.ToString().Length; i++) {\n            if (num[i] % 2 == 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n        return new Tuple<long, long>(even, odd);"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a positive integer, obtain its roman numeral equivalent as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <= 1000\n    // Examples:\n    // >>> IntToMiniRoman((19L))\n    // (\"xix\")\n    // >>> IntToMiniRoman((152L))\n    // (\"clii\")\n    // >>> IntToMiniRoman((426L))\n    // (\"cdxxvi\")\n    public static string IntToMiniRoman(long number) {\n        StringBuilder sb = new StringBuilder();\n        int n = number;\n        while (n > 0) {\n            int rem = n % 10;\n            sb.Append(rem + 'I');\n            n /= 10;\n        }\n        return sb.ToString().ToLower();"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given the lengths of the three sides of a triangle. Return true if the three\n    // sides form a right-angled triangle, false otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    // (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n        if (a == 0)\n            return false;\n        if (b == 0)\n            return false;\n        if (c == 0)\n            return false;\n        if (a == b)\n            return false;\n        if (b == c)\n            return false;\n        if (a == c)\n            return false;\n        return true;"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static string FindMax(List<string> words) {\n        var max = words.Max(x => x.Length);\n        var sorted = words.OrderBy(x => x.Length).ToList();\n        return sorted[sorted.Count - 1].Substring(0, max);"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    // but now you need to eat more carrots to complete the day's meals.\n    // you should return a list of [ total number of eaten carrots after your meals,\n    // the number of carrots left after your meals ]\n    // if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    // Example:\n    // >>> Eat((5L), (6L), (10L))\n    // (new List<long>(new long[]{(long)11L, (long)4L}))\n    // >>> Eat((4L), (8L), (9L))\n    // (new List<long>(new long[]{(long)12L, (long)1L}))\n    // >>> Eat((1L), (10L), (10L))\n    // (new List<long>(new long[]{(long)11L, (long)0L}))\n    // >>> Eat((2L), (11L), (5L))\n    // (new List<long>(new long[]{(long)7L, (long)0L}))\n    // Variables:\n    // @number : integer\n    // the number of carrots that you have eaten.\n    // @need : integer\n    // the number of carrots that you need to eat.\n    // @remaining : integer\n    // the number of remaining carrots thet exist in stock\n    // Constrain:\n    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining <= 1000\n    // Have fun :)\n    public static List<long> Eat(long number, long need, long remaining) {\n        List<long> result = new List<long>();\n"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given two lists operator, and operand. The first list has basic algebra operations, and \n    // the second list is a list of integers. Use the two given lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator list is equal to the length of operand list minus one.\n    // Operand is a list of of non-negative integers.\n    // Operator list has at least one operator, and operand list has at least two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand) {\n        if (op.Count != operand.Count) {\n            throw new ArgumentException(\"The length of operator list is not equal to the length of operand list.\");\n        }\n        List<long> result = new List<long>();\n        for (int i = 0; i < op.Count; i++) {\n            if (i == 0) {\n                result.Add(long.Parse(op[i]));\n            }\n            else {\n                result.Add(result[i - 1] * long.Parse(op[i]));\n            }\n        }\n        return result[0];"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n    // If the string contains no letters, reverse the string.\n    // The function should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"))\n    // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"#a@C\"))\n    // (\"#A@c\")\n    public static string Solve(string s) {\n        if (s == null) {\n            return null;\n        }\n        if (s.Length == 1) {\n            return s;\n        }\n        if (s.Length == 2) {\n            return s[0].ToString() + s[1].ToString();\n        }\n        char[] arr = s.ToCharArray();\n        Array.Reverse(arr);\n        return Solve(arr);"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return null.\n    // >>> StringToMd5((\"Hello world\"))\n    // (\"3e25960a79dbc69b674cd4ec67a72c62\")\n    public static string StringToMd5(string text) {\n        if (text == null) {\n            return null;\n        }\n        byte[] bytes = Encoding.UTF8.GetBytes(text);\n        byte[] hash = MD5.Create().ComputeHash(bytes);\n        StringBuilder sb = new StringBuilder();\n        foreach (byte b in hash) {\n            sb.Append(b.ToString(\"X2\"));\n        }\n        return sb.ToString();"], ["using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass Problem {\n    // Given two positive integers a and b, return the even digits between a\n    // and b, in ascending order.\n    // For example:\n    // >>> GenerateIntegers((2L), (8L))\n    // (new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))\n    // >>> GenerateIntegers((8L), (2L))\n    // (new List<long>(new long[]{(long)2L, (long)4L, (long)6L, (long)8L}))\n    // >>> GenerateIntegers((10L), (14L))\n    // (new List<long>())\n    public static List<long> GenerateIntegers(long a, long b) {\n        List<long> result = new List<long>();\n        while (a < b) {\n            result.Add(a);\n            a += 10;\n        }\n        return result;"]]