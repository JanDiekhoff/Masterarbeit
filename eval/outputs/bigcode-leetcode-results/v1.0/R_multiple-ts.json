[["// <func> // TypeScript\n//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers: number[], threshold: number): boolean {\n  const sorted_numbers = numbers.sort((a, b) => a - b);\n  return sorted_numbers.length >= 2 && sorted_numbers[1] - sorted_numbers[0] < threshold;\n}"], ["// <func> // TypeScript\n//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string: string): string[] {\n  const groups: string[] = [];\n  let current_group: string = \"\";\n  let current_open_brace: string = \"\";\n  let current_close_brace: string = \"\";\n  let current_open_bracket: string = \"\";\n  let current_close_bracket: string = \"\";\n  for (let I = 0; I < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === \"(\") {\n      current_group = \"\";\n      current_open_brace = \"\";\n      current_open_bracket = \"\";\n      current_close_brace = \"\";\n      current_close_bracket = \"\";\n    } else if (char === \")\") {\n      if (current_group !== \"\") {\n        groups.push(current_group);\n        current_group = \"\";\n        current_open_brace = \"\";\n        current_open_bracket = \"\";\n        current_close_brace = \"\";\n        current_close_bracket = \"\";\n      }\n    } else if (char === \"(\") {\n      current_group += char;\n    } else if (char === \")\") {\n      if (current_group !== \"\") {\n        groups.push(current_group);\n        current_group = \"\";\n        current_open_brace = \"\";\n        current_open_bracket = \"\";\n        current_close_brace = \"\";\n        current_close_bracket = \"\";\n      }\n    } else if (char === \"(\") {\n      current_open_brace += char;\n    } else if (char === \")\") {\n      current_close_brace += char;\n    }"], ["// <func> // TypeScript\n//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number): number {\n  return number.toFixed(0);\n}\n```\n\nIn this example, we use the `truncate_number` function to convert a number to a string with 2 decimal places. The function takes a number as input and returns the decimal part of the number. The `toFixed(0)` method is used to remove the decimal places.\n\nIn the `main` function, we call the `truncate_number` function with the `3.5` number. The result is 0.5."], ["// <func> // TypeScript\n//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations: number[]): boolean {\n  const balance = operations.reduce((acc, op) => acc + op, 0);\n  return balance < 0;\n}"], ["// <func> // TypeScript\n//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers: number[]): number {\n  const mean = numbers.reduce((acc, num) => acc + num, 0) / numbers.length;\n  return Math.sqrt(numbers.map((num) => Math.abs(num - mean)).reduce((acc, num) => acc + num, 0));\n}\n```\n\nIn this example, we're using the `mean_absolute_deviation` function to calculate the mean absolute deviation (MAD) of a given array of numbers. The function takes an array of numbers and returns the MAD.\n\nIn the `mean_absolute_deviation` function, we're using the `reduce` function to calculate the mean of the array. We're also using the `map` function to calculate the absolute difference between each element and the mean.\n\nThe `reduce` function takes an array of numbers and a function that takes two numbers and returns a number. In this case, we're using the `Math.abs` function to calculate the absolute difference between each element and the mean.\n\nThe `map` function takes an array of numbers and a function that takes two numbers and returns a number. In this case, we're using the `Math.abs` function to calculate the absolute difference between each element and the mean.\n\nThe `reduce` function takes an array of numbers and a function that takes two numbers and returns a number. In this case, we're using the `Math.sqrt` function to calculate the square root of the difference between each element and the mean.\n\nThe `map` function takes an array of numbers and a function that takes two numbers and returns a number. In this case, we're using the `Math.abs` function to calculate the absolute difference between each element and the mean.\n\nThe `reduce` function takes an array of numbers"], ["// <func> // TypeScript\n//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers: number[], delimeter: number): number[] {\n  const result: number[] = [];\n  for (let I = 0; I < numbers.length; i++) {\n    result.push(numbers[i] + delimeter);\n  }\n  return result;\n}\n```\n\nIn this example, we're using the `intersperse` function to insert a `delimeter` between every two consecutive elements of the input array.\n\n```typescript"], ["// <func> // TypeScript\n//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n  const parens_string_split = paren_string.split(\" \");\n  const parens_string_length = parens_string_split.length;\n  const parens_string_array = parens_string_split.map((paren_string_part) => {\n    const paren_string_part_split = paren_string_part.split(\"(\");\n    const paren_string_part_length = paren_string_part_split.length;\n    const parens_level = paren_string_part_split.map((paren_string_part_part) => {\n      const paren_string_part_part_split = paren_string_part_part.split(\")\");\n      const paren_string_part_part_length = paren_string_part_part_split.length;\n      return {\n        level: paren_string_part_part_length,\n        paren_string_part_part: paren_string_part_part_split.join(\"\"),\n      };\n    }).reduce((acc, curr) => {\n      return acc + curr.level;\n    }, 0);\n    return {\n      level: paren_string_part_length,\n      paren_string_part: paren_string_part_split.join(\"\"),\n    };\n  }).reduce((acc, curr) => {\n    return acc + curr.level;\n  }, 0);\n  return [parens_string_length, parens_string_array, parens_string_length];\n}\n```\n\nIn this function, we first split the input string into an array of parts separated by spaces.\n\n```typescript\n"], ["// <func> // TypeScript\n//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings: string[], substring: string): string[] {\n  return strings.filter(function (str) {\n    return str.indexOf(substring) !== -1;\n  });\n}\n"], ["// <func> // TypeScript\n//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers: number[]): [number, number] {\n  if (numbers.length === 0) {\n    return [0, 1];\n  }\n  const sum = numbers.reduce((acc, num) => acc + num, 0);\n  const product = numbers.reduce((acc, num) => acc * num, 1);\n  return [sum, product];\n} ```\n\nIn this example, we define a function called `sum_product` that takes an array of integers as input and returns an array consisting of the sum and product of all integers in the array. The function takes an empty array as input, and returns an empty array.\n\nWe then define a function called `sum_product` that takes an array of integers as input and returns an array consisting of the sum and product of all integers in the array.\n\nWe then call `sum_product` with an empty array as input, and the function returns an empty array.\n\nWe then call `sum_product` with an array of integers, and the function returns the sum and product of all integers in the array.\n\nFinally, we call `sum_product` with an empty array again, and the function returns the empty array."], ["// <func> // TypeScript\n//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]): number[] {\n  const max = numbers[0];\n  const max_index = numbers.findIndex(n => n === max);\n  const max_index_plus_1 = max_index + 1;\n  const max_index_plus_2 = max_index_plus_1 + 1;\n  const max_index_plus_3 = max_index_plus_2 + 1;\n  const max_index_plus_4 = max_index_plus_3 + 1;\n  const max_index_plus_5 = max_index_plus_4 + 1;\n  const max_index_plus_6 = max_index_plus_5 + 1;\n  const max_index_plus_7 = max_index_plus_6 + 1;\n  const max_index_plus_8 = max_index_plus_7 + 1;\n  const max_index_plus_9 = max_index_plus_8 + 1;\n  const max_index_plus_10 = max_index_plus_9 + 1;\n  const max_index_plus_11 = max_index_plus_10 + 1;\n  const max_index_plus_12 = max_index_plus_11 + 1;\n  const max_index_plus_13 = max_index_plus_12 + 1;\n  const max_index_plus_14 = max_index_plus_13 + 1;\n  const max_index_plus_15 = max_index_plus_14 + 1;\n  const max_index_plus_16 = max_index_plus_15 + 1;\n  const max_index_plus_17 = max_index_plus_16 + 1;\n "], ["// <func> // TypeScript\n//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string: string): string {\n  const prefix = string.slice(0, -1);\n  const suffix = string.slice(-1);\n  const reversed_prefix = prefix.split(\"\").reverse().join(\"\");\n  const reversed_suffix = suffix.split(\"\").reverse().join(\"\");\n  return `${reversed_prefix}${reversed_suffix}`;\n}"], ["// <func> // TypeScript\n//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a: string, b: string): string {\n  const a_len = a.length;\n  const b_len = b.length;\n  const result = \"\";\n  for (let I = 0; I < a_len; i++) {\n    for (let j = 0; j < b_len; j++) {\n      result += a[i] ^ b[j];\n    }\n  }\n  return result;\n}"], ["// <func> // TypeScript\n//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings: string[]): string | undefined {\n  if (strings.length === 0) {\n    return undefined;\n  }\n  const longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i] > longest) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n}\n"], ["// <func> // TypeScript\n//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n  if (b === 0) {\n    return a;\n  }\n  return greatest_common_divisor(b, a % b);\n}\n```\n\nIn this example, we define a function `greatest_common_divisor` that takes two integers `a` and `b` as arguments. It returns the greatest common divisor of `a` and `b`.\n\nThe function first checks if `b` is zero. If it is, then `a` is the greatest common divisor of `a` and `b`. Otherwise, it calculates the greatest common divisor of `b` and `a` and returns it.\n\nThe function then returns `a`.\n\nThe function is defined using TypeScript's `function` keyword, and the `return` keyword is used to return the result.\n\nThe function is called with two arguments, `a` and `b`. The `greatest_common_divisor` function returns the greatest common divisor of `a` and `b`.\n\nThe function is tested using the `console.log` statement.\n\n```\nconsole.log(greatest_common_divisor(3, 5)); // 1\nconsole.log(greatest_common_divisor(25, 15)); // 5\n```"], ["// <func> // TypeScript\n//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string: string): string[] {\n  const result: string[] = [];\n  const prefixes = string.split(\"\");\n  const length = prefixes.length;\n  for (let I = 0; I < length; i++) {\n    const prefix = prefixes[i];\n    const prefix_length = prefix.length;\n    for (let j = 0; j < prefix_length; j++) {\n      const prefix_char = prefix[j];\n      const prefix_index = prefix.indexOf(prefix_char);\n      if (prefix_index !== -1) {\n        result.push(prefixes.slice(0, prefix_index + 1).join(\"\"));\n      }\n    }\n  }\n  return result;\n}"], ["// <func> // TypeScript\n//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n: number): string {\n  const result = [];\n  for (let I = 0; I < n; i++) {\n    result.push(i.toString());\n  }\n  return result.join(\" \");\n}"], ["// <func> // TypeScript\n//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string: string): number {\n  const char_set = new Set<string>();\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char_set.has(char)) {\n      char_set.delete(char);\n    } else {\n      char_set.add(char);\n    }\n  }\n  return char_set.size;\n}"], ["// <func> // TypeScript\n//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string: string): number[] {\n  const notes: number[] = [];\n  const notes_string = music_string.toLowerCase();\n  const notes_array = notes_string.split(\"|\");\n  for (let i = 0; i < notes_array.length; i++) {\n    const note = parseInt(notes_array[i]);\n    if (note > 0) {\n      notes.push(note);\n    }\n  }\n  return notes;\n}"], ["// <func> // TypeScript\n//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string): number {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string.charAt(index) === substring.charAt(0)) {\n      count++;\n      index++;\n    } else if (string.charAt(index) === substring.charAt(1)) {\n      index++;\n    } else {\n      break;\n    }\n  }\n  return count;\n}"], ["// <func> // TypeScript\n//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers: string): string {\n  const sorted_numbers = numbers.split(\" \").map((num) => parseInt(num, 10));\n  sorted_numbers.sort((a, b) => a - b);\n  return sorted_numbers.join(\" \");\n}"], ["// <func> // TypeScript\n//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n  const sorted_numbers = numbers.sort((a, b) => a - b);\n  const closest_numbers = sorted_numbers.slice(1, sorted_numbers.length);\n  return [closest_numbers[0], closest_numbers[1]];\n}"], ["// <func> // TypeScript\n//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const scale = max / min;\n  return numbers.map((num) => (num * scale) + min);\n}\n```\n\nThis function takes an array of numbers as input and returns a new array with the same size, but with the smallest number set to 0 and the largest number set to 1. The function uses the `Math.min()` and `Math.max()` functions to find the smallest and largest numbers in the array."], ["// <func> // TypeScript\n//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n  return values.filter(function (value) {\n    return typeof value === \"number\";\n  });\n}\n"], ["// <func> // TypeScript\n//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string: string): number {\n  return string.length;\n}\n```\n\nIn this example, we have a function `strlen` that takes a string as input and returns its length. The function is defined as a function that takes a string as input and returns its length.\n\nThe `strlen` function is a simple function that takes a string as input and returns its length. The `strlen` function is defined as a function that takes a string as input and returns its length.\n\nThe `strlen` function is defined as a function that takes a string as input and returns its length. The `strlen` function is defined as a function that takes a string as input and returns its length.\n\nThe `strlen` function is defined as a function that takes a string as input and returns its length. The `strlen` function is defined as a function that takes a string as input and returns its length.\n\nThe `strlen` function is defined as a function that takes a string as input and returns its length. The `strlen` function is defined as a function that takes a string as input and returns its length.\n\nThe `strlen` function is defined as a function that takes a string as input and returns its length. The `strlen` function is defined as a function that takes a string as input and returns its length.\n\nThe `strlen` function is defined as a function that takes a string as input and returns its length. The `strlen` function is defined as a function that takes a string as input and returns its length.\n\nThe `strlen` function is defined as a function that takes a string as input and returns its length. The `strlen` function is defined as a function that takes a string as input and returns its length.\n\nThe `strlen` function is defined as a function that takes a string as input and returns its length. The `strlen` function is defined as a function that takes a string as input and returns its length.\n\nThe `strlen` function is defined as a function that takes a string as input and returns its length. The `strlen` function is defined as a function that takes a string as input and"], ["// <func> // TypeScript\n//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n: number): number {\n  let max = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % n === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n}\n"], ["// <func> // TypeScript\n//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\n  const factors = [];\n  const factor = 1;\n  const maxFactor = Math.max(...Array.from(Array(n).keys()));\n  for (let I = 2; I <= maxFactor; i++) {\n    if (n % i === 0) {\n      const factorIndex = Array.from(Array(n).keys()).indexOf(i);\n      factors.push(i);\n      if (factorIndex === 0) {\n        factors.push(factor);\n      }\n    }\n  }\n  return factors;\n}\n```\n\nIn this implementation, we use a `for` loop to iterate over all possible factors of `n`. We then push each factor to the `factors` array.\n\nIn the `factorize` function, we use a `for` loop to iterate over all possible factors of `n`. We then push each factor to the `factors` array.\n\nIn the `factorize` function, we use a `for` loop to iterate over all possible factors of `n`. We then push each factor to the `factors` array.\n\nIn the `factorize` function, we use a `for` loop to iterate over all possible factors of `n`. We then push each factor to the `factors` array.\n\nIn the `factorize` function, we use a `for` loop to iterate over all possible factors of `n`. We then push each factor to the `factors` array.\n\nIn the `factorize` function, we use a `for` loop to iterate over all possible factors of `n`. We then push each factor to the `factors` array.\n\nIn the `factorize` function, we use a"], ["// <func> // TypeScript\n//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers: number[]): number[] {\n  const result = [];\n  for (let I = 0; I < numbers.length; i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n```\n\nIn this example, we're using the `remove_duplicates` function from the `array_utils` module.\n\n```typescript"], ["// <func> // TypeScript\n//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string: string): string {\n  return string.toLowerCase().replace(/\\b\\w\\b/g, function(match) {\n    return match.toUpperCase();\n  });\n}\n```\n\nIn this example, we define a function called `flip_case` that takes a string as input and returns a new string with all lowercase characters flipped to uppercase and uppercase characters flipped to lowercase.\n\nNow, let's modify the `flip_case` function to handle a string with a single character.\n\n```typescript"], ["// <func> // TypeScript\n//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings: string[]): string {\n  return strings.join(\"\");\n}\n```\n\nIn this example, we have a function called `concatenate` that takes an array of strings as input and returns a string. The function takes an optional parameter `strings` which is an array of strings.\n\nThe function is defined as a function with a single parameter `strings` which is an array of strings.\n\nThe function is called with an empty array `[]` as the parameter `strings`.\n\nThe function returns an empty string `\"\"` as the result.\n\nThe function is called with an array of strings `[\"a\", \"b\", \"c\"]` as the parameter `strings`.\n\nThe function concatenates the strings `[\"a\", \"b\", \"c\"]` into a single string `\"abc\"`.\n\nThe function is called with an array of strings `[\"a\", \"b\", \"c\"]` as the parameter `strings`.\n\nThe function concatenates the strings `[\"a\", \"b\", \"c\"]` into a single string `\"abc\"`.\n\nThe function is called with an array of strings `[\"a\", \"b\", \"c\"]` as the parameter `strings`.\n\nThe function concatenates the strings `[\"a\", \"b\", \"c\"]` into a single string `\"abc\"`.\n\nThe function is called with an array of strings `[\"a\", \"b\", \"c\"]` as the parameter `strings`.\n\nThe function concatenates the strings `[\"a\", \"b\", \"c\"]` into a single string `\"abc\"`.\n\nThe function is called with an array of strings `[\"a\", \"b\", \"c\"]` as the parameter `strings`.\n\nThe function concatenates the strings `[\"a\", \"b\", \"c\"]` into a single string `\"abc\"`.\n\nThe function is called with an array of strings `[\"a\", \"b\", \"c\"]` as the parameter `strings`.\n\nThe function concatenates the strings `[\"a\", \"b\", \"c\"]` into a single string `\"abc\"`.\n\nThe function is"], ["// <func> // TypeScript\n//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings: string[], prefix: string): string[] {\n  return strings.filter(function(s: string) {\n    return s.startsWith(prefix);\n  });\n}\n```\n\nIn this example, we're using a `filter_by_prefix` function to filter an array of strings based on a prefix. The function takes an array of strings and a prefix as arguments, and returns an array of strings that match the prefix.\n\nThe `filter_by_prefix` function takes an array of strings as input, and returns an array of strings that match the prefix. It uses a `filter` function to filter the input array based on the prefix, and returns an array of strings that match the prefix.\n\nThe `filter` function takes an array of strings as input, and returns an array of strings that match the prefix. It uses a `filter` function to filter the input array based on the prefix, and returns an array of strings that match the prefix.\n\nThe `filter_by_prefix` function takes an array of strings as input, and returns an array of strings that match the prefix. It uses a `filter` function to filter the input array based on the prefix, and returns an array of strings that match the prefix.\n\nThe `filter_by_prefix` function takes an array of strings as input, and returns an array of strings that match the prefix. It uses a `filter` function to filter the input array based on the prefix, and returns an array of strings that match the prefix.\n\nThe `filter_by_prefix` function takes an array of strings as input, and returns an array of strings that match the prefix. It uses a `filter` function to filter the input array based on the prefix, and returns an array of strings that match the prefix.\n\nThe `filter_by_prefix` function takes an array of strings as input, and returns an array of strings that match the prefix. It uses a `filter` function to filter the input array based on the"], ["// <func> // TypeScript\n//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l: number[]): number[] {\n  return l.filter((x) => x > 0);\n}\n"], ["// <func> // TypeScript\n//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number): boolean {\n  if (n === 2) {\n    return true;\n  }\n  if (n === 1) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let I = 3; I <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n"], ["// <func> // TypeScript\n//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l: number[]): number[] {\n  const l_copy = l.slice();\n  const l_sort = l_copy.sort((a, b) => a - b);\n  const l_indices = l_sort.map((i) => i % 3);\n  const l_indices_sorted = l_indices.map((i) => l_indices.indexOf(i));\n  const l_indices_sorted_copy = l_indices_sorted.slice();\n  const l_indices_sorted_copy_copy = l_indices_sorted_copy.map((i) => l_indices_sorted_copy.indexOf(i));\n  const l_indices_sorted_copy_copy_copy = l_indices_sorted_copy_copy.map((i) => l_indices_sorted_copy_copy.indexOf(i));\n  const l_indices_sorted_copy_copy_copy_copy = l_indices_sorted_copy_copy_copy.map((i) => l_indices_sorted_copy_copy_copy.indexOf(i));\n  const l_indices_sorted_copy_copy_copy_copy_copy = l_indices_sorted_copy_copy_copy_copy_copy.map((i) => l_indices_sorted_copy_copy_copy_copy_copy.indexOf(i));\n  const l_indices_sorted_copy_copy_copy_copy_copy_copy_copy = l_indices_sorted_copy_copy_copy_copy"], ["// <func> // TypeScript\n//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l: number[]): number[] {\n  const result: number[] = [];\n  const seen: number[] = [];\n  for (let i = 0; i < l.length; i++) {\n    if (!seen.includes(l[i])) {\n      seen.push(l[i]);\n      result.push(l[i]);\n    }\n  }\n  return result;\n}\n```\n\nIn this example, we define a function called `unique` that takes an array of numbers as input and returns a new array with unique elements. The function first checks if an element is already in the `seen` array, and if it is, it adds it to the `result` array. If it is not in the `seen` array, it adds it to the `result` array. The function then returns the `result` array.\n\nThe `unique` function is called with an array of numbers as input, and returns an array of unique numbers. The `unique` function is used in the `sortUnique` function to sort the unique numbers in an array."], ["// <func> // TypeScript\n//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l: number[]): number {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n}\n```\n\nIn this example, we define a function `max_element` that takes an array `l` and returns the maximum element in the array. The function first initializes a variable `max` to the first element of the array. Then, for each element `i` of the array, it checks if `l[i]` is greater than `max`. If it is, it updates `max` to `l[i]`. Finally, it returns `max`.\n\nThe `max_element` function is used in the `max_element_test` function.\n\n```typescript"], ["// <func> // TypeScript\n//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n  const fizz_buzz = 0;\n  const fizz = 1;\n  const buzz = 2;\n  const fizz_buzz_count = 0;\n  const buzz_count = 0;\n  const fizz_count = 0;\n  const buzz_buzz_count = 0;\n  for (let I = 1; I <= n; i++) {\n    if (i % 11 === 7 || i % 13 === 7) {\n      fizz_count++;\n    } else if (i % 11 === 11 || i % 13 === 11) {\n      buzz_count++;\n    } else if (i % 11 === 13 || i % 13 === 11) {\n      fizz_buzz_count++;\n    } else if (i % 11 === 13) {\n      buzz_buzz_count++;\n    }\n  }\n  return fizz_count + buzz_count + fizz_buzz_count + buzz_buzz_count;\n}\n```\n\nIn this example, we define a function named `fizz_buzz` that takes an integer `n` as input and returns the number of times the digit 7 appears in integers less than `n` which are divisible by `11` or `13`.\n\nThe function first checks if the input number is divisible by `11` or `13`. If it is, it increments the `fizz` variable by 1, and increments the `buzz` variable by 2. If it is not, it increments the `fizz_buzz` variable by 3.\n\nNext, it checks if the input number is divisible by `"], ["// <func> // TypeScript\n//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l: number[]): number[] {\n  const l_copy = Array.from(l);\n  l_copy.sort((a, b) => a - b);\n  return l_copy;\n}\n```\n\nIn this example, we have a function called `sort_even` that takes an array `l` and returns an array `l'`. The `sort_even` function takes an array `l` and sorts it in the same way as the `sort_odd` function, but with the values at the even indices being the same as the values at the odd indices.\n\nThe `sort_even` function takes an array `l` and returns an array `l'`. The `l'` array is identical to `l` in the odd indices, but its values at the even indices are equal to the values of the even indices of `l`.\n\nThe `sort_even` function takes an array `l` and returns an array `l'`. The `l'` array is identical to `l` in the odd indices, but its values at the even indices are equal to the values of the even indices of `l`.\n\nThe `sort_even` function takes an array `l` and returns an array `l'`. The `l'` array is identical to `l` in the odd indices, but its values at the even indices are equal to the values of the even indices of `l`.\n\nThe `sort_even` function takes an array `l` and returns an array `l'`. The `l'` array is identical to `l` in the odd indices, but its values at the even indices are equal to the values of the even indices of `l`.\n\nThe `sort_even` function takes an array `l` and"], ["// <func> // TypeScript\n//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n  if (n < 2) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 5;\n  }\n  if (n === 4) {\n    return 13;\n  }\n  if (n === 5) {\n    return 89;\n  }\n  return 0;\n}\n"], ["// <func> // TypeScript\n//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l: number[]): boolean {\n  const n = l.length;\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  return sum === 0;\n}\n```\n\nIn this implementation, we use a `reduce` function to iterate over the list and check if the sum of the elements is zero. If it is, we return `true`. Otherwise, we return `false`.\n\nNote that this implementation is not optimized for performance. It is a simple implementation that checks if the sum of the elements is zero."], ["// <func> // TypeScript\n//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n: number): number {\n    const cars = new Array(n).fill(0);\n    const collisions = new Array(n).fill(0);\n    const car_positions = new Array(n).fill(0);\n\n    for (let i = 0; i < n; i++) {\n        cars[i] = 1;\n        car_positions[i] = 0;\n    }\n\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (cars[i] && cars[j]) {\n                if (car_positions[i] + 1 === car_positions[j]) {\n                    cars[i]--;\n                    cars[j]--;\n                    car_positions[i] = car_positions[j] + 1;\n                }\n            }\n        }\n    }\n\n    for (let i = 0; i < n; i++) {\n        if (cars[i] === 0) {\n            collisions[i] = 0;\n        }\n    }\n\n    return collisions.reduce((acc, curr) => acc + curr, 0);\n}"], ["// <func> // TypeScript\n//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l: number[]): number[] {\n  return l.map((x, i) => x + 1);\n}\n```\n\nIn this example, we define a function `incr_list` that takes an array `l` and returns an array with elements incremented by 1. The function uses a `map` function to apply a function to each element of the array and returns the result.\n\nIn the `incr_list` function, we use the `map` function to apply a function to each element of the array and return the result. The function takes an array `l` and returns an array with elements incremented by 1. The `map` function applies the function to each element of the array and returns the result.\n\nIn the `incr_list` function, we use the `map` function to apply a function to each element of the array and return the result. The function takes an array `l` and returns an array with elements incremented by 1. The `map` function applies the function to each element of the array and returns the result.\n\nIn the `incr_list` function, we use the `map` function to apply a function to each element of the array and return the result. The function takes an array `l` and returns an array with elements incremented by 1. The `map` function applies the function to each element of the array and returns the result.\n\nIn the `incr_list` function, we use the `map` function to apply a function to each element of the array and return the result. The function takes an array `l` and returns an array with elements incremented by 1. The `map` function applies the function to each element of the array and returns the result.\n\nIn the `incr_list` function"], ["// <func> // TypeScript\n//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n  const n = l.length;\n  const sum = l.reduce((acc, x) => acc + x, 0);\n  for (let I = 0; I < n; i++) {\n    if (sum + l[i] === 0) {\n      return true;\n    }\n  }\n  return false;\n}"], ["// <func> // TypeScript\n//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x: number, base: number): string {\n  if (base === 1) {\n    return x.toString();\n  }\n  const result = x.toString();\n  const result_str = result.split(\"\");\n  const result_str_len = result_str.length;\n  const result_str_base = result_str.map((v) => v.charCodeAt(0).toString(base));\n  const result_str_new = result_str_base.join(\"\");\n  return result_str_new;\n}"], ["// <func> // TypeScript\n//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a: number, h: number): number {\n  return a * h;\n}\n"], ["// <func> // TypeScript\n//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n: number): number {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 0\n  } else if (n === 2) {\n    return 2\n  } else if (n === 3) {\n    return 0\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  }\n}\n```\n\nIn this implementation, we first check if the input number is less than or equal to 0. If it is, we return 0. If it is greater than 0, we return the input number.\n\n```typescript"], ["// <func> // TypeScript\n//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n  if (l.length < 2) {\n    return l[0];\n  }\n  const n = l.length;\n  const mid = n / 2;\n  const left = l.slice(0, mid);\n  const right = l.slice(mid);\n  return (left[0] + right[0]) / 2;\n}"], ["// <func> // TypeScript\n//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text: string): boolean {\n  const str = text.toLowerCase();\n  const len = str.length;\n  for (let I = 0; I < len / 2; i++) {\n    if (str[i] !== str[len - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"], ["// <func> // TypeScript\n//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 2\n  }\n  if (n === 3) {\n    return 3\n  }\n  if (n === 4) {\n    return 4\n  }\n  if (n === 5) {\n    return 5\n  }\n  if (n === 6) {\n    return 6\n  }\n  if (n === 7) {\n    return 7\n  }\n  if (n === 8) {\n    return 8\n  }\n  if (n === 9) {\n    return 9\n  }\n  if (n === 10) {\n    return 10\n  }\n  if (n === 11) {\n    return 11\n  }\n  if (n === 12) {\n    return 12\n  }\n  if (n === 13) {\n    return 13\n  }\n  if (n === 14) {\n    return 14\n  }\n  if (n === 15) {\n    return 15\n  }\n  if (n === 16) {\n    return 16\n  }\n  if (n === 17) {\n    return 17\n  }\n  if (n === 18) {\n    return 18\n  }\n  if (n === 19) {\n    return 19\n  }\n  if (n"], ["// <func> // TypeScript\n//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text: string): string {\n  return text.replace(/[aeiouAEIOU]/g, \"\");\n}\n"], ["// <func> // TypeScript\n//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l: number[], t: number): boolean {\n  return l.every((num) => num < t);\n}\n```\n\nIn this example, we have a function `below_threshold` that takes an array of numbers and a threshold value. The function returns `true` if all numbers in the array are below the threshold, and `false` otherwise.\n\nThe `below_threshold` function is a simple function that takes an array of numbers and a threshold value. It returns `true` if all numbers in the array are below the threshold, and `false` otherwise.\n\nThe `below_threshold` function is a simple function that takes an array of numbers and a threshold value. It returns `true` if all numbers in the array are below the threshold, and `false` otherwise.\n\nThe `below_threshold` function is a simple function that takes an array of numbers and a threshold value. It returns `true` if all numbers in the array are below the threshold, and `false` otherwise.\n\nThe `below_threshold` function is a simple function that takes an array of numbers and a threshold value. It returns `true` if all numbers in the array are below the threshold, and `false` otherwise.\n\nThe `below_threshold` function is a simple function that takes an array of numbers and a threshold value. It returns `true` if all numbers in the array are below the threshold, and `false` otherwise.\n\nThe `below_threshold` function is a simple function that takes an array of numbers and a threshold value. It returns `true` if all numbers in the array are below the threshold, and `false` otherwise.\n\nThe `below_threshold` function is a simple function that takes an array of numbers and a threshold value. It returns `true` if all numbers in the array are below the threshold, and `false` otherwise.\n\nThe `below_threshold` function is a simple function that takes an array"], ["// <func> // TypeScript\n//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x: number, y: number): number {\n  return x + y;\n}\n```\n\nIn this example, we have a function `add` that takes two numbers as arguments. The function returns the sum of the two numbers.\n\nThe `add` function is defined as a function with a `return` statement. This means that the function returns a value.\n\nIn the `add` function, we have a `return` statement that returns the sum of the two numbers.\n\nThe `add` function is defined as a function with a `function` keyword. This means that the function is a function that takes two arguments.\n\nIn the `add` function, we have a `function` keyword followed by the function name. This means that the function is a function that takes two arguments.\n\nThe `add` function is defined as a function with a `function` keyword. This means that the function is a function that takes two arguments.\n\nIn the `add` function, we have a `function` keyword followed by the function name. This means that the function is a function that takes two arguments.\n\nThe `add` function is defined as a function with a `function` keyword. This means that the function is a function that takes two arguments.\n\nIn the `add` function, we have a `function` keyword followed by the function name. This means that the function is a function that takes two arguments.\n\nThe `add` function is defined as a function with a `function` keyword. This means that the function is a function that takes two arguments.\n\nIn the `add` function, we have a `function` keyword followed by the function name. This means that the function is a function that takes two arguments.\n\nThe `add` function is defined as a function with a `function` keyword. This means that the function is a function that takes two arguments.\n\nIn the `add` function, we have a `function` keyword followed by the function name. This means that the function is a function that takes two arguments.\n\nThe `add` function is defined as a function with a `function` keyword. This means that the function"], ["// <func> // TypeScript\n//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0: string, s1: string): boolean {\n  return s0.length === s1.length && s0.every((c, i) => c === s1[i]);\n}\n"], ["// <func> // TypeScript\n//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n <= 1) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n"], ["// <func> // TypeScript\n//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets: string): boolean {\n  if (brackets.length === 0) {\n    return true;\n  }\n  if (brackets.length === 1) {\n    return false;\n  }\n  const openBracket = brackets[0];\n  const closeBracket = brackets[brackets.length - 1];\n  return correct_bracketing(brackets.slice(1, -1));\n}\n"], ["// <func> // TypeScript\n//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]): boolean {\n  if (l.length === 0) {\n    return false;\n  }\n  let i = 0;\n  let j = l.length - 1;\n  while (i < j) {\n    if (l[i] > l[j]) {\n      j--;\n    } else {\n      i++;\n    }\n  }\n  return true;\n}\n```\n\nThis function takes an array of numbers and returns true if the array is monotonically increasing or decreasing. The function uses a loop to iterate through the array and compare the elements. If the elements are in the correct order, the function returns true. Otherwise, it returns false.\n\nI hope this helps! Let me know if you have any further questions."], ["// <func> // TypeScript\n//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1: number[], l2: number[]): number[] {\n  if (l1.length === 0) {\n    return [];\n  }\n  if (l2.length === 0) {\n    return [];\n  }\n  const l1Arr = Array.isArray(l1) ? l1 : [l1];\n  const l2Arr = Array.isArray(l2) ? l2 : [l2];\n  const l1ArrLength = l1Arr.length;\n  const l2ArrLength = l2Arr.length;\n  const l1ArrIndex = Array.isArray(l1) ? 0 : 0;\n  const l2ArrIndex = Array.isArray(l2) ? 0 : 0;\n  const l1ArrLengthArr = Array.isArray(l1Arr) ? l1Arr.length : [];\n  const l2ArrLengthArr = Array.isArray(l2Arr) ? l2Arr.length : [];\n  const l1ArrIndexArr = Array.isArray(l1Arr) ? l1Arr.map(i => i - 1) : [];\n  const l2ArrIndexArr = Array.isArray(l2Arr) ? l2Arr.map(i => i - 1) : [];\n  const l1ArrIndexArrLength = Array.isArray(l1Arr) ? l1Arr.length : [];\n  const l2ArrIndexArrLength = Array.isArray(l2Arr) ? l2Arr.length : [];\n  const l1ArrIndexArrLengthArr = Array.isArray(l1Arr) ? l1Arr.map(i => i - 1) : [];\n  const l2ArrIndexArr"], ["// <func> // TypeScript\n//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n: number): number {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n === 5) {\n    return 5;\n  }\n  if (n === 7) {\n    return 7;\n  }\n  if (n === 11) {\n    return 11;\n  }\n  if (n === 13) {\n    return 13;\n  }\n  if (n === 17) {\n    return 17;\n  }\n  if (n === 19) {\n    return 19;\n  }\n  if (n === 23) {\n    return 23;\n  }\n  if (n === 29) {\n    return 29;\n  }\n  if (n === 31) {\n    return 31;\n  }\n  if (n === 37) {\n    return 37;\n  }\n  if (n === 41) {\n    return 41;\n  }\n  if (n === 43) {\n    return 43;\n  }\n  if (n === 47) {\n    return 47;\n  }\n  if (n === 53) {\n    return 53;\n  }\n  if (n === 59) {\n    return 59;\n  }\n  if (n === 61) {\n    return 61;\n  }\n  if (n === 67) {\n    return 67;\n  }\n  if (n === 71) {\n    return 71;\n  }"], ["// <func> // TypeScript\n//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n: number): number {\n  return n * (n + 1) / 2;\n}\n"], ["// <func> // TypeScript\n//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets: string): boolean {\n  return brackets.split(\"\").every((c) => c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\" || c === \"(\" || c === \")\""], ["// <func> // TypeScript\n//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs: number[]): number[] {\n  const n = xs.length;\n  const result = new Array(n);\n  for (let i = 0; i < n; i++) {\n    result[i] = 0;\n  }\n  result[0] = 1;\n  for (let i = 1; i < n; i++) {\n    result[i] = result[i - 1] + xs[i] * result[i - 1];\n  }\n  return result;\n}\n```\n\nIn this implementation, we use a `for` loop to iterate over the coefficients of the polynomial, and then use the `map` function to apply the derivative to each coefficient. The `map` function is used to apply a function to each element of a collection, and the `reduce` function is used to accumulate the results.\n\nThe `reduce` function is used to accumulate the results of the `map` function. The `reduce` function takes a function `f` that takes two arguments, `acc` and `x`, and returns the result of applying `f` to `acc` and `x`. In this implementation, we use a `for` loop to iterate over the coefficients of the polynomial, and then use the `reduce` function to accumulate the results.\n\nThe `reduce` function is used to accumulate the results of the `map` function. The `reduce` function takes a function `f` that takes two arguments, `acc` and `x`, and returns the result of applying `f` to `acc` and `x`. In this implementation, we use a `for` loop to iterate over the coefficients of the polynomial, and then use the `reduce` function to accumulate the results.\n\nThe `map` function is used to apply the derivative to each coefficient"], ["// <func> // TypeScript\n//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n: number): number {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 0\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n  }\n}\n"], ["// <func> // TypeScript\n//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s: string): number {\n  let count = 0;\n  for (let I = 0; I < s.length; i++) {\n    if (s[i] === \"a\" || s[i] === \"e\" || s[i] === \"i\" || s[i] === \"o\" || s[i] === \"u\") {\n      count++;\n    }\n  }\n  return count;\n}"], ["// <func> // TypeScript\n//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x: number, shift: number): string {\n  const digits = x.toString().split(\"\");\n  const reversed = digits.reverse();\n  const reversed_digits = reversed.slice(0, shift);\n  const reversed_digits_reverse = reversed_digits.reverse();\n  const reversed_digits_reverse_reverse = reversed_digits_reverse.slice(0, shift);\n  const reversed_digits_reverse_reverse_reverse = reversed_digits_reverse_reverse.reverse();\n  const reversed_digits_reverse_reverse_reverse_reverse = reversed_digits_reverse_reverse_reverse.reverse();\n  const reversed_digits_reverse_reverse_reverse_reverse_reverse = reversed_digits_reverse_reverse_reverse_reverse.reverse();\n  const reversed_digits_reverse_reverse_reverse_reverse_reverse_reverse = reversed_digits_reverse_reverse_reverse_reverse_reverse.reverse();\n  const reversed_digits_reverse_reverse_reverse_reverse_reverse_reverse_reverse = reversed_digits_reverse_reverse_reverse_reverse_reverse_reverse.reverse();\n  const reversed_digits_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = reversed_digits_reverse_reverse_reverse_reverse_reverse_reverse_reverse.reverse();\n  const reversed_digits_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = reversed_digits_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.reverse();\n  const reversed_digits_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = reversed_digits_reverse_reverse_"], ["// <func> // TypeScript\n//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s: string): number {\n  const result = 0;\n  for (let I = 0; I < s.length; i++) {\n    const c = s[i];\n    if (c >= 'a' && c <= 'z') {\n      result += c.charCodeAt(0);\n    }\n  }\n  return result;\n}"], ["// <func> // TypeScript\n//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s: string, n: number): number {\n  const arr = s.split(\",\");\n  const nArr = arr.map((x) => parseInt(x));\n  const nArrSum = nArr.reduce((acc, x) => acc + x, 0);\n  const nArrSum2 = nArr.reduce((acc, x) => acc + x, 0);\n  const nArrSum3 = nArr.reduce((acc, x) => acc + x, 0);\n  const nArrSum4 = nArr.reduce((acc, x) => acc + x, 0);\n  const nArrSum5 = nArr.reduce((acc, x) => acc + x, 0);\n  const nArrSum6 = nArr.reduce((acc, x) => acc + x, 0);\n  const nArrSum7 = nArr.reduce((acc, x) => acc + x, 0);\n  const nArrSum8 = nArr.reduce((acc, x) => acc + x, 0);\n  const nArrSum9 = nArr.reduce((acc, x) => acc + x, 0);\n  const nArrSum10 = nArr.reduce((acc, x) => acc + x, 0);\n  const"], ["// <func> // TypeScript\n//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\n  const n = arr.length;\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    if (arr[i] % 2 === 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}"], ["// <func> // TypeScript\n//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst: number[]): number {\n  if (lst.length === 0) {\n    return -1;\n  }\n  const max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return max;\n}"], ["// <func> // TypeScript\n//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n  if (lst.length === 0) {\n    return [];\n  }\n  const min = lst[0];\n  const max = lst[lst.length - 1];\n  const mid = Math.floor((min + max) / 2);\n  const sorted = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      sorted.push(lst[i]);\n    } else if (lst[i] > max) {\n      sorted.push(lst[i]);\n    } else {\n      sorted.push(lst[i]);\n    }\n  }\n  return sorted;\n}\n```\n\nIn this function, we first sort the input array in the strange order. Then we return the sorted array.\n\n```typescript"], ["// <func> // TypeScript\n//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a: number, b: number, c: number): number {\n  return (a + b + c) / 2;\n}"], ["// <func> // TypeScript\n//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n  const n = q.length;\n  const sum = q.reduce((acc, x) => acc + x, 0);\n  return sum <= w;\n} ```\n\nIn this example, we're using the `reduce` method to calculate the sum of the elements in the `q` array. We're also using the `reduce` method to calculate the sum of the elements in the `w` array.\n\nThe `will_it_fly` function returns `true` if the object `q` will fly, and `false` otherwise. The function takes two arguments: `q` and `w`. `q` is an array of numbers, and `w` is the maximum possible weight.\n\nThe function checks if the sum of the elements in `q` is less than or equal to `w`. If it is, it returns `true`. Otherwise, it returns `false`.\n\nThe function also checks if the object `q` is balanced. If it is, it returns `true`. Otherwise, it returns `false`.\n\nThe function returns `true` if the object `q` is balanced, and `false"], ["// <func> // TypeScript\n//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr: number[]): number {\n  const n = arr.length;\n  const min_change = 0;\n  for (let I = 0; I < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (arr[i] === arr[j]) {\n        const change = j - i;\n        if (change < min_change) {\n          min_change = change;\n        }\n      }\n    }\n  }\n  return min_change;\n}"], ["// <func> // TypeScript\n//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n  if (lst1.length === 0) {\n    return lst2;\n  }\n  if (lst2.length === 0) {\n    return lst1;\n  }\n  const arr1 = lst1.filter((s) => s.length > 0);\n  const arr2 = lst2.filter((s) => s.length > 0);\n  const arr1_len = arr1.length;\n  const arr2_len = arr2.length;\n  const arr1_arr2_len = arr1.length + arr2.length;\n  const arr1_arr2_arr1_len = arr1.length + arr2.length + arr1.length;\n  const arr1_arr2_arr2_len = arr1.length + arr2.length + arr2.length;\n  const arr1_arr2_arr1_arr2_len = arr1.length + arr2.length + arr2.length + arr1.length;\n  const arr1_arr2_arr1_arr2_arr1_len = arr1.length + arr2.length + arr2.length + arr2.length + arr1.length;\n  const arr1_arr2_arr1"], ["// <func> // TypeScript\n//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a: number): boolean {\n  if (a < 100) {\n    return false;\n  }\n  if (a % 3 === 0 && a % 5 === 0) {\n    return true;\n  }\n  return false;\n}\n```\n\nIn this example, we're using the `is_multiply_prime` function to check if a number is a multiple of 3. The function takes in a number `a` and returns `true` if `a` is a multiple of 3, and `false` otherwise.\n\nWe're using a `for` loop to iterate through all possible 3-prime numbers, and checking if `a` is a multiple of 3. If it is, we return `true`, otherwise we return `false`.\n\nThe function returns `true` if `a` is a multiple of 3, and `false` otherwise."], ["// <func> // TypeScript\n//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n === 2) {\n    return x === 2;\n  }\n  return is_simple_power(x * x, n - 2);\n}\n```\n\nIn this implementation, we use a helper function `is_simple_power` that takes two arguments `x` and `n`. The function returns `true` if `n` is a power of `x`, and `false` otherwise.\n\nThe function `is_simple_power` takes two arguments `x` and `n`. It first checks if `n` is a power of `x`. If `n` is a power of `x`, then `x` is a simple power of `n`. Otherwise, `x` is not a simple power of `n`.\n\nThe function then checks if `n` is a power of `2`. If `n` is a power of `2`, then `x` is a simple power of `n`. Otherwise, `x` is not a simple power of `n`.\n\nFinally, the function returns `true` if `n` is a power of `x` and `false` otherwise."], ["// <func> // TypeScript\n//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a: number): boolean {\n  return a === Math.pow(a, 3);\n}\n```\n\nIn this example, we have a function called `iscube` that takes an integer `a` and returns true if `a` is a cube of some integer number. We have also added some examples to test the function.\n\nThe function takes an integer `a` as input and returns true if `a` is a cube of some integer number. The function uses the built-in `Math.pow` function to calculate the cube of `a`.\n\nThe function is called with `iscube` as the name of the function in the `isCube` function.\n\n```typescript"], ["// <func> // TypeScript\n//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num: string): number {\n  const num_str = num.toUpperCase();\n  const num_arr = num_str.split('');\n  const arr_len = num_arr.length;\n  const arr_sum = 0;\n  let count = 0;\n  for (let I = 0; I < arr_len; i++) {\n    const digit = arr_arr[i];\n    const digit_len = digit.length;\n    const digit_sum = 0;\n    for (let j = 0; j < digit_len; j++) {\n      const digit_digit = digit[j];\n      const digit_digit_len = digit_digit.length;\n      const digit_digit_sum = "], ["// <func> // TypeScript\n//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal: number): string {\n  const binary = String(Math.abs(decimal)).padStart(32, '0');\n  const db = binary.substr(binary.length - 4, 4);\n  return db.padStart(8, '0');\n}"], ["// <func> // TypeScript\n//You are given a string s.\n// Your task is to check if the string is hapts or not.\n// A string is hapts if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s: string): boolean {\n  if (s.length < 3) {\n    return false;\n  }\n  const map = new Map<string, number>();\n  const count = 0;\n  for (let I = 0; I < s.length - 2; i++) {\n    const c1 = s[i];\n    const c2 = s[i + 1];\n    const c3 = s[i + 2];\n    if (c1 === c2 && c1 === c3) {\n      map.set(c1, count + 1);\n    } else {\n      map.set(c1, count);\n      map.set(c2, count);\n      map.set(c3, count);\n      count = 0;\n    }\n    count++;\n  }\n  return map.size === 1;\n}\n```\n\nIn this implementation, we use a Map to store the frequency of each character in the string. The `Map` is initialized with an empty set.\n\nWe then iterate over the string and for each character, we check if it is already in the map. If it is, we increment the count. If it is not in the map, we add it to the map.\n\nFinally, we return whether the string is a happy string or not.\n\nI hope this helps!"], ["// <func> // TypeScript\n//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n    const grade_table = [\n        [4, \"A+\"],\n        [3, \"B\"],\n        [1.7, \"C-\"],\n        [2, \"C\"],\n        [3.5, \"A-\"]\n    ];\n    return grade_table.map(([grade, letter]) => `${grade}${letter}`);\n}\n"], ["// <func> // TypeScript\n//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string: string): boolean {\n  const length = string.length;\n  const isPrime = length % 2 === 0;\n  return isPrime;\n}"], ["// <func> // TypeScript\n//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n: number): number {\n  return starts_one_ends_helper(n, 1);\n}\n"], ["// <func> // TypeScript\n//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N: number): string {\n  const digits = Array(10).fill(0).map(() => Array(10).fill(0))\n  const sum = 0\n  for (let I = 0; I < N; i++) {\n    const digit = parseInt(String(i).padStart(2, '0'))\n    digits[digit >> 3] = (digits[digit >> 3] || 0) + digit % 2\n    sum += digit % 2\n  }\n  return digits.reduce((acc, curr) => acc + curr.join(''), 0).toString()\n}"], ["// <func> // TypeScript\n//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst: number[]): number {\n  if (lst.length === 0) {\n    return 0;\n  }\n  if (lst.length === 1) {\n    return lst[0];\n  }\n  const n = lst.length;\n  const result = 0;\n  for (let I = 0; I < n; i++) {\n    result += lst[i] % 2 === 0 ? lst[i + 1] : lst[i];\n  }\n  return result;\n}\n```\n\nIn this example, we define a function `add` that takes an array of integers as input and returns the sum of the even elements that are at odd indices. We use a `for` loop to iterate over the array and add the even elements to a variable `result`. The `result` variable is initialized to 0, which is the sum of the first element of the array. We then iterate over the array and add the even elements to `result`. We use a `for` loop to iterate over the array and add the even elements to a variable `result`. The `result` variable is initialized to 0, which is the sum of the first element of the array. We then iterate over the array and add the even elements to `result`. We use a `for` loop to iterate over the array and add the even elements to a variable `result`. The `result` variable is initialized to 0, which is the sum of the first element of the array. We then iterate over the array and add the even elements to `result`. We use a `for` loop to iterate over the array and add the even elements to a variable `result`. The `result` variable is initialized to 0, which is the sum of the first element of the array. We then iterate over the array and add the even elements to `result`. We use a `for` loop to iterate over the array and add the even elements to a variable `result`. The `result` variable is initialized to 0, which is the sum of the first element of the array. We then iterate over"], ["// <func> // TypeScript\n//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s: string): string {\n  const words = s.split(\" \");\n  const sortedWords = words.sort((a, b) => a.localeCompare(b));\n  return sortedWords.join(\" \");\n}"], ["// <func> // TypeScript\n//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][] {\n  const rows = lst.map((row) => row.map((col) => col))\n  const sorted = rows.sort((a, b) => a[0] - b[0])\n  const sorted_rows = sorted.map((row) => row.map((col) => col))\n  const sorted_rows_by_row = sorted_rows.sort((a, b) => a[0] - b[0])\n  const sorted_rows_by_column = sorted_rows_by_row.map((row) => row.map((col) => col))\n  const sorted_rows_by_column_by_row = sorted_rows_by_column.sort((a, b) => a[0] - b[0])\n  const sorted_rows_by_column_by_row_by_column = sorted_rows_by_column_by_row.map((row)"], ["// <func> // TypeScript\n//Given an array of non-negative integers, return a cots of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array: number[]): number[] {\n  if (array.length === 0) {\n    return [];\n  }\n  const sorted = [];\n  let currentIndex = 0;\n  let currentSum = 0;\n  for (let I = 0; I < array.length; i++) {\n    if (currentSum % 2 === 0) {\n      sorted.push(array[currentIndex]);\n      currentIndex++;\n      currentSum++;\n    } else {\n      sorted.push(array[currentIndex]);\n      currentIndex++;\n      currentSum = 0;\n    }\n  }\n  return sorted;\n}\n```\n\nIn this implementation, we first sort the array in ascending order if the sum( first index value, last index value) is odd, or sort it in descending order if the sum( first index value, last index value) is even.\n\n```typescript"], ["// <func> // TypeScript\n//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s: string): string {\n  const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  const alphabetShift = alphabet.split(\"\").map(function (letter) {\n    return letter.charCodeAt(0) - 96;\n  });\n  const alphabetShifted = alphabetShift.map(function (shift) {\n    return shift * 2;\n  });\n  const alphabetShiftedReversed = alphabetShifted.map(function (shift) {\n    return shift % 2;\n  });\n  const alphabetShiftedReversedReversed = alphabetShiftedReversed.map(function (shift) {\n    return shift === 0 ? 256 : shift;\n  });\n  const alphabetShiftedReversedReversedReversed = alphabetShiftedReversedReversed.map(function (shift) {\n    return shift === 0 ? 256 : shift;\n  });\n  const alphabetShiftedReversedReversedReversedReversed = alphabetShiftedReversedReversedReversed.map(function (shift) {\n    return shift === 0 ? 256 : shift;\n  });\n  const alphabetShiftedReversedReversedReversedReversedReversed = alphabetShiftedReversedReversedReversedReversed.map(function (shift) {\n    return shift === 0 ? 256 : shift;\n  });\n  const alphabetShiftedReversedReversedReversedReversedReversedReversed = alphabetShiftedReversedReversedReversedReversedRevers"], ["// <func> // TypeScript\n//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst: number[]): number | undefined {\n  if (lst.length === 0) {\n    return undefined;\n  }\n  const min = lst[0];\n  for (let I = 1; I < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n}"], ["// <func> // TypeScript\n//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S: string): number {\n  let count = 0;\n  for (let I = 0; I < S.length; i++) {\n    if (S[i] === 'I') {\n      count++;\n    }\n  }\n  return count;\n}\n```\n\nIn this version, we've added a `count` variable to keep track of the number of boredoms found.\n\n```typescript"], ["// <func> // TypeScript\n//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number, z: number): boolean {\n  return x + y + z === z + y + x;\n}\n```\n\nIn this example, we have a function called `any_int` that takes three numbers and returns true if any of the numbers is equal to the sum of the other two, and all numbers are integers.\n\nWe can use this function in a `for` loop to check if a number is an integer:\n\n```typescript\nfor (let x of [1, 2, 3]) {\n  if (any_int(x, 2, 4)) {\n    console.log(x);\n  }\n}\n```\n\nIn this example, we loop through a list of numbers, and check if any of them is an integer. If it is, we log the number.\n\nYou can also use this function in a `for` loop to check if a number is a power of 2:\n\n```typescript\nfor (let x of [1, 2, 4, 8, 16]) {\n  if (any_int(x, 2, 4)) {\n    console.log(x);\n  }\n}\n```\n\nIn this example, we loop through a list of numbers, and check if any of them is a power of 2. If it is, we log the number."], ["// <func> // TypeScript\n//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n  const result = message.toLowerCase();\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"];\n  const vowelIndex = vowels.findIndex((vowel) => vowels.includes(result[result.length - 1 - vowel.length]));\n  if (vowelIndex === -1) {\n    throw new Error(\"Invalid message\");\n  }\n  const vowel = result[vowelIndex - 1];\n  const vowelIndex = vowels.findIndex((vowel) => vowels.includes(result[result.length - 1 - vowel.length]));\n  if (vowelIndex === -1) {\n    throw new Error(\"Invalid message\");\n  }\n  const vowelIndex2 = vowels.findIndex((vowel) => vowels.includes(result[result.length - 1 - vowel.length]));\n  if (vowelIndex2 === -1) {\n    throw new Error(\"Invalid message\");\n  }\n  const vowelIndex3 = vowels.findIndex((vowel) => vowels.includes(result[result.length - 1 - vowel.length]));\n  if (vowelIndex3 === -1) {\n    throw new Error(\"Invalid message\");\n  }\n  const vowelIndex4 = vowels.findIndex((vowel) => vowels.includes(result[result.length - 1 - vowel.length]));\n  if (vowelIndex4 === -1) {\n    throw new Error(\"Invalid"], ["// <func> // TypeScript\n//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst: number[]): number {\n  let sum = 0;\n  for (let I = 0; I < lst.length; i++) {\n    const num = parseInt(lst[i].toString());\n    if (isPrime(num)) {\n      sum += num;\n    }\n  }\n  return sum;\n}"], ["// <func> // TypeScript\n//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}): boolean {\n  for (const key in dict) {\n    if (dict.hasOwnProperty(key)) {\n      if (typeof dict[key] === \"string\" && dict[key].toLowerCase() === dict[key]) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n"], ["// <func> // TypeScript\n//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n: number): number[] {\n  const result: number[] = [];\n  for (let I = 2; I <= n; i++) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}"], ["// <func> // TypeScript\n//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n  if (b === 0) {\n    return 0;\n  }\n  let product = a * b;\n  if (product < 0) {\n    product = -product;\n  }\n  return product;\n}\n```\n\nIn this implementation, we use a recursive function to calculate the product of two integers. The function takes two integers as input and returns the product of their unit digits. The function starts with the base case, where the product is 1. The function then recursively calculates the product of the two digits, and returns the final product.\n\nThe function uses a while loop to handle cases where the product is negative. The loop continues until the product is 0.\n\nThe function also handles cases where the input is zero. In this case, the function returns 0.\n\nThe function is tested with examples, including positive and negative integers."], ["// <func> // TypeScript\n//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s: string): number {\n  const count = 0;\n  const vowels = \"aeiouAEIOU\";\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) !== -1) {\n      count++;\n    }\n  }\n  return count;\n}\n```\n\nIn this implementation, we first check if the current character is a vowel. If it is, we increment the count. If it is not a vowel, we increment the count by 1.\n\nThe `count_upper` function returns the count of uppercase vowels in even indices."], ["// <func> // TypeScript\n//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\n  const num = parseFloat(value);\n  const min = Math.min(num, 0);\n  const max = Math.max(num, 0);\n  return Math.round(min + (max - min) / 2);\n}"], ["// <func> // TypeScript\n//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n: number): number[] {\n  const result: number[] = [];\n  const count = n;\n  if (count % 2 === 0) {\n    result.push(count / 2);\n  } else {\n    result.push(count / 2 + 1);\n  }\n  result.push(count);\n  return result;\n} ```\n\nIn this example, we have a function called `make_a_pile` that takes a positive integer `n` as input and returns an array of `n` integers representing the number of stones in each level.\n\nThe function first checks if the input `n` is odd or even. If `n` is odd, it returns `n` as the number of stones in the next level. If `n` is even, it adds `1` to the number of stones in the next level.\n\nThe function then iterates through each level of the pile, starting from the first level. For each level, it checks if the next odd number is `n` or `n + 1`. If it is, it adds `n` to the number of stones in the level.\n\nFinally, the function returns an array of the number of stones in each level.\n\nWe can use this function to generate a pile of n levels of stones. Here's an example:\n\n```typescript\nconst pile = make_a_pile(10);\nconsole.log(pile); // [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]"], ["// <func> // TypeScript\n//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s: string): string[] {\n  return s.split(\",\").map(word => word.trim());\n} ```\n\nIn this function, we first split the string into an array of words using the `split()` method. Then, we map each word to a trimmed version of the word using the `trim()` method. Finally, we return the trimmed words.\n\nThis function is useful for splitting a string into words, but it can also be used to remove any unwanted characters from a string. For example, you could use this function to remove any punctuation marks from a string.\n\n```typescript"], ["// <func> // TypeScript\n//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x: number, y: number): number {\n  if (x < y) {\n    return choose_num(y, x);\n  }\n  if (x > y) {\n    return choose_num(x, y);\n  }\n  return x;\n}\n"], ["// <func> // TypeScript\n//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number): string| number {\n  if (n > m) {\n    return -1;\n  }\n  const n_binary = n.toString(2);\n  const m_binary = m.toString(2);\n  const n_binary_length = n_binary.length;\n  const m_binary_length = m_binary.length;\n  const n_binary_sum = n_binary.padStart(n_binary_length, '0');\n  const m_binary_sum = m_binary.padStart(m_binary_length, '0');\n  const n_binary_sum_length = n_binary_sum.length;\n  const m_binary_sum_length = m_binary_sum.length;\n  const n_binary_sum_index = n_binary_sum_length - m_binary_sum_length;\n  const m_binary_sum_index = m_binary_sum_length - n_binary_sum_length;\n  const n_binary_sum_index_sum = n_binary_sum.slice(0, n_binary_sum_index) + m_binary_sum.slice(0, m_binary_sum_index);\n  const m_binary_sum_index_sum = m_binary_sum.slice(n_binary_sum_index_sum.length - m_binary_sum_length) + n_binary_sum.slice(0, n_binary_sum_index_sum."], ["// <func> // TypeScript\n//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x: number[]): number[] {\n  const result: number[] = [];\n  const n = x.length;\n  for (let I = 0; I < n; i++) {\n    const num = x[i];\n    if (num % 2 === 0) {\n      result.push(num);\n    }\n  }\n  return result;\n}\n```\n\nIn this implementation, we first sort the input array of integers using `Array.sort()`. Then, we iterate over the array and check if the current element has an even digit. If it does, we add it to the `result` array. If it doesn't, we push it to the `result` array. Finally, we return the `result` array."], ["// <func> // TypeScript\n//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n  const result: string[] = [];\n  const length = arr.length;\n  for (let I = 0; I < length; i++) {\n    const digit = arr[i];\n    if (digit === 1) {\n      result.push(\"One\");\n    } else if (digit === 2) {\n      result.push(\"Two\");\n    } else if (digit === 3) {\n      result.push(\"Three\");\n    } else if (digit === 4) {\n      result.push(\"Four\");\n    } else if (digit === 5) {\n      result.push(\"Five\");\n    } else if (digit === 6) {\n      result.push(\"Six\");\n    } else if (digit === 7) {\n      result.push(\"Seven\");\n    } else if (digit === 8) {\n      result.push(\"Eight\");\n    } else if (digit === 9) {\n      result.push(\"Nine\");\n    } else {\n      result.push(\"\");\n    }\n  }\n  return result;\n}\n```\n\nIn this example, we first define a function `by_length` that takes an array of integers and returns an array of strings.\n\nThe function takes an array of integers and"], ["// <func> // TypeScript\n//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n: number): number[] {\n  if (n === 0) return [];\n  if (n === 1) return [1];\n  return f(n - 1)\n    .concat(f(n - 2))\n    .concat(f(n - 3))\n    .concat(f(n - 4))\n    .concat(f(n - 5));\n}\n"], ["// <func> // TypeScript\n//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n: number): [number, number] {\n  const arr: number[] = [];\n  for (let I = 1; I <= n; i++) {\n    const odd = i % 2 === 1;\n    const even = i % 2 === 0;\n    if (odd && even) {\n      arr.push(i);\n    }\n  }\n  return [arr.length, arr];\n} ```\n\nExplanation:\n\n1. The function takes a positive integer n as input.\n2. It checks if n is even or odd.\n3. If n is even, it returns [1, 2].\n4. If n is odd, it returns [4, 6].\n5. It then checks if each integer in the array is even or odd.\n6. If an integer is even, it adds it to the array.\n7. If an integer is odd, it adds the number of even integers to the array.\n8. It returns the array with the number of even and odd integer palindromes.\n9. The function returns [arr.length, arr] to indicate that the function returns the number of even and odd integer palindromes respectively"], ["// <func> // TypeScript\n//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]): number {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num > 0) {\n      count += num;\n    }\n  }\n  return count;\n}"], ["// <func> // TypeScript\n//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr: number[]): boolean {\n  if (arr.length === 0) {\n    return true;\n  }\n\n  let left = 0;\n  let right = arr.length - 1;\n\n  while (left < right) {\n    const mid = Math.floor((left + right) / 2);\n    if (arr[mid] < arr[mid + 1]) {\n      left = mid + 1;\n    } else {\n      right = mid;\n    }\n  }\n\n  return left === 0;\n}"], ["// <func> // TypeScript\n//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1: number[], lst2: number[]): string {\n  if (lst1.length !== lst2.length) {\n    return \"NO\";\n  }\n  const arr1 = lst1.slice();\n  const arr2 = lst2.slice();\n  const arr3 = arr1.concat(arr2);\n  const arr4 = arr3.filter((num) => num % 2 === 0);\n  return arr4.length === 0 ? \"YES\" : \"NO\";\n}"], ["// <func> // TypeScript\n//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test: string): {[key: string]: number} {\n  const map = new Map<string, number>();\n  const count = new Map<string, number>();\n  const countMap = new Map<string, number>();\n  for (const [key, value] of test.split(\" \")) {\n    if (count.has(key)) {\n      count.set(key, count.get(key) + 1);\n    } else {\n      count.set(key, 1);\n    }\n    map.set(key, count.get(key));\n    countMap.set(key, count.get(key));\n  }\n  return {\n    a: map.get(\"a\"),\n    b: map.get(\"b\"),\n    c: map.get(\"c\"),\n    ...countMap,\n  };\n}\n```\n\nIn this implementation, we first create a map of all possible letters and their counts. We then iterate over the input string and count the occurrences of each letter. We then return an object with the most common letter and its count.\n\nThe `histogram` function takes a string as input and returns an object with the most common letter and its count. The function uses a map to keep track of the most common letters and their counts.\n\nThe `histogram` function takes a string as input and returns an object with the most common letter and its count. The function uses a map to keep track of the most common letters and their counts.\n\nThe `"], ["// <func> // TypeScript\n//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s: string, c: string): [string, boolean] {\n  const result = [];\n  const cArr = c.split(\"\");\n  const sArr = s.split(\"\");\n  for (let i = 0; i < sArr.length; i++) {\n    if (sArr[i] === cArr[i]) {\n      result.push(sArr[i]);\n    } else {\n      result.push(sArr[i]);\n    }\n  }\n  return [result.join(\"\"), result.length === sArr.length];\n}"], ["// <func> // TypeScript\n//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst: string[]): string[] {\n  const count: string[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    const num = parseInt(lst[i]);\n    if (num % 2 === 1) {\n      count.push(`the number of odd elements ${i}n the str${i} of the input.`);\n    }\n  }\n  return count;\n}"], ["// <func> // TypeScript\n//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums: number[]): number {\n  const n = nums.length;\n  const arr = new Array(n).fill(0);\n  for (let i = 0; i < n; i++) {\n    arr[i] = nums[i];\n  }\n  let min = arr[0];\n  for (let i = 1; i < n; i++) {\n    arr[i] = arr[i] - arr[i - 1];\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n}"], ["// <func> // TypeScript\n//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number): number {\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = new Array(capacity);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      buckets[grid[i][j] - 1]++;\n    }\n  }\n  const max_fill = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (buckets[i] + buckets[i + 1] + bu"], ["// <func> // TypeScript\n//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n  const arrLength = arr.length;\n  const arrCopy = arr.slice();\n  const arrCopyLength = arrCopy.length;\n  const arrCopyIndex = arrCopy.slice();\n  const arrCopyIndexLength = arrCopyIndex.length;\n  const arrCopyIndexCopy = arrCopyIndex.slice();\n  const arrCopyIndexCopyLength = arrCopyIndexCopy.length;\n  const arrCopyIndexCopyLengthCopy = arrCopyIndexCopy.slice();\n  const arrCopyIndexCopyLengthCopyLength = arrCopyIndexCopyLengthCopy.length;\n  const arrCopyIndexCopyLengthCopyLengthCopy = arrCopyIndexCopyLengthCopyLengthCopy.slice();\n  const arrCopyIndexCopyLengthCopyLengthCopyLength = arrCopyIndexCopyLengthCopyLengthCopyLength.slice();\n  const arrCopyIndexCopyLengthCopyLengthCopyLengthCopy = arrCopyIndexCopyLengthCopyLengthCopyLengthCopyLength.slice();\n  const arrCopyIndexCopyLengthCopyLengthCopyLengthCopyLengthCopy = arrCopyIndexCopyLengthCopyLengthCopyLengthCopyLengthCopyLength.slice();\n  const arrCopyIndexCopyLengthCopyLengthCopyLengthCopyLengthCopyLengthCopy = arrCopyIndexCopyLengthCopyLengthCopyLengthCopyLengthCopyLengthCopyLength.slice();\n  const arrCopyIndexCopyLengthCopyLengthCopyLengthCopyLengthCopyLengthCopyLengthCopy = arrCopyIndexCopyLengthCopyLengthCopyLengthCopyLengthCopyLengthCopyLengthCopyLength.slice();\n  const arrCopyIndexCopyLengthCopy"], ["// <func> // TypeScript\n//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n  const result: string[] = [];\n  const words = s.split(\" \");\n  for (let I = 0; I < words.length; i++) {\n    const word = words[i];\n    if (word.length === n) {\n      result.push(word);\n    }\n  }\n  return result;\n}"], ["// <func> // TypeScript\n//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  const vowel_index = vowels.findIndex(vowel => word.includes(vowel));\n  if (vowel_index === -1) {\n    return \"\";\n  }\n  const vowel = word.slice(0, vowel_index);\n  return vowel.toUpperCase();\n}"], ["// <func> // TypeScript\n//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst: string[]): string {\n  const stack: string[] = [];\n  const result: string[] = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === \"(\") {\n      stack.push(lst[i]);\n    } else if (lst[i] === \")\") {\n      const top = stack.pop();\n      if (top === \"(\") {\n        stack.push(top);\n      } else {\n        result.push(top);\n      }\n    } else {\n      if (stack.length === 0) {\n        return \"No\";\n      }\n      const top = stack.pop();\n      if (top === \"(\") {\n        stack.push(top);\n      } else {\n        result.push(top);\n      }\n    }\n  }\n  return result.join(\"\");\n}"], ["// <func> // TypeScript\n//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n  if (k === 0) {\n    return arr;\n  }\n  const max = arr.slice(0, k);\n  const rest = arr.slice(k);\n  return [...max, ...rest];\n}"], ["// <func> // TypeScript\n//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number {\n  const result = 0;\n  for (let I = 0; I < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      result += lst[i];\n    }\n  }\n  return result;\n}"], ["// <func> // TypeScript\n//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr: number[], k: number): number {\n  if (arr.length < k) {\n    return 0;\n  }\n  let sum = 0;\n  for (let I = 0; I < k; i++) {\n    const num = arr[i];\n    if (num < 10) {\n      sum += num;\n    } else {\n      const num2 = arr[i + 1];\n      if (num2 < 10) {\n        sum += num * 10 + num2;\n      } else {\n        sum += num * 100 + num2;\n      }\n    }\n  }\n  return sum;\n}"], ["// <func> // TypeScript\n//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n: number): number[] {\n  const odds: number[] = [];\n  for (let I = 1; I <= n; i++) {\n    if (i % 2 === 0) {\n      odds.push(i);\n    }\n  }\n  return odds;\n}"], ["// <func> // TypeScript\n//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date: string): boolean {\n  const dateRegex = /^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/;\n  const dateMatch = dateRegex.exec(date);\n  if (dateMatch === null) {\n    return false;\n  }\n  const [, month, day, year] = dateMatch;\n  const monthLength = getMonthLength(month);\n  const dayLength = getDayLength(day);\n  const yearLength = getYearLength(year);\n  const monthLengthIsValid = monthLength >= 1 && monthLength <= 12;\n  const dayLengthIsValid = dayLength >= 1 && dayLength <= 31;\n  const yearLengthIsValid = yearLength >= 1 && yearLength <= 9999;\n  const monthIsValid = monthLengthIsValid && dayLengthIsValid && yearLength"], ["// <func> // TypeScript\n//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n  const words = txt.split(/\\s+/);\n  return words.filter((word) => word.length > 0);\n}"], ["// <func> // TypeScript\n//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]): boolean {\n  if (lst.length < 2) {\n    return true;\n  }\n  if (lst.length === 1) {\n    return lst[0] === lst[0];\n  }\n  const sorted = lst.sort((a, b) => a - b);\n  return sorted.every((num) => num === num);\n}\n\nexport default is_sorted;"], ["// <func> // TypeScript\n//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1: [number, number], interval2: [number, number]): string {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 === end1) {\n    return \"NO\";\n  }\n  if (start2 === end2) {\n    return \"NO\";\n  }\n  if (start1 < start2) {\n    return \"NO\";\n  }\n  if (end1 < end2) {\n    return \"NO\";\n  }\n  return \"YES\";\n}\n```\n\nExplanation:\n\nThe `intersection` function takes two intervals as input and returns a boolean value.\n\nThe function first checks if the two intervals intersect. If they do not intersect,\nthe function returns \"NO\".\n\nIf the two intervals intersect, the function returns \"YES\".\n\nThe function then checks if the length of the intersection is a prime number.\n\nIf the length of the intersection is a prime number, the function returns \"YES\".\n"], ["// <func> // TypeScript\n//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]): number | undefined {\n  if (arr.length === 0) {\n    return undefined;\n  }\n  const product = arr.reduce((acc, num) => acc * num, 1);\n  const sign = arr.reduce((acc, num) => {\n    if (num === 0) {\n      return acc;\n    }\n    return acc * num;\n  }, 1);\n  return product * sign;\n}"], ["// <func> // TypeScript\n//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid: number[][], k: number): number[] {\n  const n = grid.length;\n  const m = grid[0].length;\n  const res = new Array(k + 1).fill(0);\n  const visited = new Array(n * m).fill(false);\n  const visited_idx = new Array(n * m).fill("], ["// <func> // TypeScript\n//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n === 0) {\n    return [1, 1, 1];\n  }\n  if (n === 1) {\n    return [1, 1, 1];\n  }\n  if (n === 2) {\n    return [1, 1, 1];\n  }\n  return tri(n - 1) + tri(n - 2) + tri(n + 1);\n}\n"], ["// <func> // TypeScript\n//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n: number): number {\n  if (n === 0) return 0;\n  const result = n % 10;\n  return result * (digits(n / 10) + 1);\n}\n"], ["// <func> // TypeScript\n//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string: string): boolean {\n  return string.match(/[[]\\]]/g) !== null;\n}"], ["// <func> // TypeScript\n//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst: number[]): number {\n  return lst.reduce((a, b) => a + Math.pow(b, 2), 0);\n}\n```\n\nIn this function, we first convert the input array to a list of numbers.\nThen we calculate the sum of squared numbers in the list.\nWe round each element in the list to the upper int(Ceiling) first.\nFinally, we return the sum of squared numbers.\n\nThe function takes an array of numbers as input.\nThe function returns the sum of squared numbers in the array.\n\nThe function takes an array of numbers as input.\nThe function returns the sum of squared numbers in the array.\n\nThe function takes an array of numbers as input.\nThe function returns the sum of squared numbers in the array.\n\nThe function takes an array of numbers as input.\nThe function returns the sum of squared numbers in the array.\n\nThe function takes an array of numbers as input.\nThe function returns the sum of squared numbers in the array.\n\nThe function takes an array of numbers as input.\nThe function returns the sum of squared numbers in the array.\n\nThe function takes an array of numbers as input.\nThe function returns the sum of squared numbers in the array.\n\nThe function takes an array of numbers as input.\nThe function returns the sum of squared numbers in the array.\n\nThe function takes an array of numbers as input."], ["// <func> // TypeScript\n//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt: string): boolean {\n  const last_char = txt[txt.length - 1];\n  return last_char !== ' ' && !is_alphabetical_char(last_char);\n}\n```\n\nIn this example, we're using the `is_alphabetical_char` function to check if the last character of a string is an alphabetical character. If it is, we return `true`. Otherwise, we return `false`.\n\nI hope this helps! Let me know if you have any other questions."], ["// <func> // TypeScript\n//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr: number[]): number {\n  let max = arr[0];\n  let max_index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      max_index = i;\n    }\n  }\n  return max_index;\n}\n```\n\nIn this example, we have a function called `can_arrange` that takes an array of numbers as input and returns the index of the largest number that is not greater than or equal to the element immediately preceding it. The function uses a `for` loop to iterate through the array and compare each element with the element immediately preceding it. If the element is greater than the element immediately preceding it, the function returns the index of the element immediately preceding it. If no such element exists, the function returns `-1`.\n\nThe `can_arrange` function takes an array as input and returns the index of the largest number that is not greater than or equal to the element immediately preceding it. The function uses a `for` loop to iterate through the array and compare each element with the element immediately preceding it. If the element is greater than the element immediately preceding it, the function returns the index of the element immediately preceding it. If no such element exists, the function returns `-1`.\n\nIn the `can_arrange` function, we use a `max` variable to keep track of the largest number that is not greater than or equal to the element immediately preceding it. We also use a `max_index` variable to keep track of the index of the largest number that is not greater than or equal to the element immediately preceding it.\n\nIn the `can_arrange` function, we use a `for` loop to iterate through the array. We"], ["// <func> // TypeScript\n//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n  if (lst.length === 0) {\n    return [undefined, undefined];\n  }\n\n  let max = lst[0];\n  let min = lst[0];\n\n  for (let I = 1; I < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n\n  return [min, max];\n}"], ["// <func> // TypeScript\n//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n: number): boolean {\n  return n % 4 === 0;\n}"], ["// <func> // TypeScript\n//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n: number): number {\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return n * special_factorial(n - 1);\n}\n"], ["// <func> // TypeScript\n//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text: string): string {\n  return text.replace(/\\s+/g, \"_\");\n}\n"], ["// <func> // TypeScript\n//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name: string): string {\n    const file_name_length = file_name.length;\n    const file_name_start_index = file_name.indexOf('.');\n    const file_name_end_index = file_name.lastIndexOf('.');\n    const file_name_end_length = file_name_end_index - file_name_start_index;\n    const file_name_substring_before_dot = file_name.substring(0, file_name_start_index);\n    const file_name_substring_after_dot = file_name.substring(file_name_start_index + 1, file_name_end_index);\n    const file_name_valid_substring = file_name_substring_before_dot.toLowerCase() + file_name_substring_after_dot;\n    return file_name_valid_substring.includes('txt') || file_name_valid_substring.includes('exe') || file_name_valid_substring.includes('dll');\n}"], ["// <func> // TypeScript\n//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i += 3) {\n        sum += lst[i] * lst[i];\n    }\n    for (let i = 0; i < lst.length; i += 4) {\n        sum += lst[i] * lst[i];\n    }\n    return sum;\n}\n```\n\nIn this example, we have a function named `sum_squares` that takes an array of integers as input and returns the sum of all squares of the integers in the array. The function first initializes a variable `sum` to 0 and then loops through the array `lst`. For each integer `i` in the array, the function calculates the square of `i` using the `lst[i] * lst[i]` expression. The function then adds the square to the `sum` variable. Finally, the function returns the `sum` variable.\n\nThe `sum_squares` function is called with an array of integers `lst` and returns the sum of all squares of the integers in the array. The function is used in the `main` function to calculate the sum of all integers in the input array."], ["// <func> // TypeScript\n//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence: string): string {\n  const words = sentence.split(\" \");\n  const result = [];\n  for (let I = 0; I < words.length; i++) {\n    const word = words[i];\n    if (word.length === 1) {\n      result.push(word);\n    } else {\n      const length = word.length;\n      if (length === 2) {\n        result.push(word);\n      } else if (length === 3) {\n        result.push(word);\n      } else if (length === 4) {\n        result.push(word);\n      } else if (length === 5) {\n        result.push(word);\n      } else if (length === 6) {\n        result.push(word);\n      } else if (length === 7) {\n        result.push(word);\n      } else if (length === 8) {\n        result.push(word);\n      } else if (length === 9) {\n        result.push(word);\n      } else if (length === 10) {\n        result.push(word);\n      } else {\n        result.push(word);\n      }\n    }\n  }\n  return result.join(\" \");\n}"], ["// <func> // TypeScript\n//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x: string, n: string): boolean {\n  if (x === \"0\") {\n    return true;\n  }\n  if (n === \"0\") {\n    return false;\n  }\n  const [numerator, denominator] = x.split(\"/\");\n  const [numerator2, denominator2] = n.split(\"/\");\n  if (numerator === \"0\" && denominator === \"0\") {\n    return true;\n  }\n  if (numerator === \"0\" && denominator2 === \"0\") {\n    return false;\n  }\n  if (numerator === \"0\" && denominator2 === \"0\") {\n    return false;\n  }\n  const [numerator3, denominator3] = numerator2.split(\"/\");\n  const [denominator4, numerator4] = denominator2.split(\"/\");\n  if (numerator === \"0\" && denominator === \"0\") {\n    return false;\n  }\n  if (numerator === \"0\" && denominator4 === \"0\") {\n    return false;\n  }\n  if (numerator === \"0\" && denominator4 === \"0\") {\n    return false;\n  }\n  const [numerator5, denominator5] = numerator3.split(\"/\");\n  const [denominator6, numerator6] = denominator3.split(\"/\");\n  if (numerator === \"0\" && denominator === \"0\") {\n   "], ["// <func> // TypeScript\n//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums: number[]): number[] {\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.map((num) => num * 10 + num);\n} ```\n\nExplanation:\n\n1. We start by creating a function `order_by_points` that takes an array of integers as input.\n\n2. We first sort the array using the `sort` method of the `Array` class.\n\n3. We then create a new array `sorted` that contains the same elements as the original array, but in reverse order.\n\n4. We return the sorted array.\n\n5. We then call the `order_by_points` function with the sorted array as input.\n\n6. We return the sorted array.\n\n7. Finally, we return an empty array.\n\nThis function is a simple example of how we can use the `sort` method of the `Array` class to sort an array."], ["// <func> // TypeScript\n//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums: number[]): number {\n  return nums.filter(num => num > 10 && num % 2 === 1 && num.toString().split('')[0] === num.toString().split('')[1]).length;\n}"], ["// <func> // TypeScript\n//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n: number): number {\n    const a: number[] = [];\n    for (let i = 0; i < n; i++) {\n        a.push(i * i - i + 1);\n    }\n    return a.reduce((acc, x) => acc + x, 0) % 3;\n}"], ["// <func> // TypeScript\n//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst: string[]): string[] {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map((s) => s.trim());\n}\n```\n\nExplanation:\n\n1. We first sort the list of strings by length of each word.\n2. We then return the array of strings in sorted order.\n3. We return an empty array if the list is empty.\n4. We return the sorted array if the list is not empty.\n5. We return the sorted array if the list is empty.\n6. We return the sorted array if the list is not empty.\n7. We return the sorted array if the list is not empty.\n8. We return the sorted array if the list is not empty.\n9. We return the sorted array if the list is not empty.\n10. We return the sorted array if the list is not empty.\n11. We return the sorted array if the list is not empty.\n12. We return the sorted array if the list is not empty.\n13. We return the sorted array if the list is not empty.\n14. We return the sorted array if the list is not empty.\n15. We return the sorted array if the list is not empty.\n16. We return the sorted array if the list is not empty.\n1"], ["// <func> // TypeScript\n//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n: number, x: number, y: number): number {\n  if (n === 2) {\n    return x;\n  }\n  if (n === 3) {\n    return y;\n  }\n  if (n === 5) {\n    return x;\n  }\n  if (n === 7) {\n    return y;\n  }\n  return x_or_y(n - 1, x, y);\n}\n```\n\nIn this example, we have a function `x_or_y` that takes two arguments `n` and `x` and returns the value of `x` if `n` is a prime number, and the value of `y` otherwise.\n\nThe function first checks if `n` is a prime number. If it is, then it returns `x`.\n\nIf `n` is not a prime number, then it checks if `n` is divisible by `5`. If it is, then it returns `y`.\n\nIf `n` is not divisible by `5`, then it checks if `n` is divisible by `7`. If it is, then it returns `x`.\n\nIf `n` is not divisible by `7`, then it checks if `n` is divisible by `15`. If it is, then it returns `y`.\n\nIf `n` is not divisible by `15`, then it checks if `n` is divisible by `8`. If it is, then it returns `x`.\n\nIf `n` is not divisible by `8`, then it checks if `n` is divisible by `3`. If it is, then it returns `y`.\n\nIf `n` is not divisible by `3`, then it checks if `n` is divisible by `2`. If it is, then it returns `x`."], ["// <func> // TypeScript\n//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst: number[]): number {\n  if (lst.length === 0) {\n    return 0\n  }\n  const sum = lst.reduce((acc, num) => acc + num * num, 0)\n  return sum % 2 === 0 ? sum : 0\n}"], ["// <func> // TypeScript\n//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game: number[], guess: number[]): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < game.length; i++) {\n    const score = game[i];\n    const guessScore = guess[i];\n    if (score === guessScore) {\n      result.push(0);\n    } else {\n      result.push(score - guessScore);\n    }\n  }\n  return result;\n}"], ["// <func> // TypeScript\n//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name: string, extensions: string[]): string {\n    let strongest_extension: string = \"\";\n    let max_strength = 0;\n    for (let extension of extensions) {\n        let strength = 0;\n        for (let letter of extension) {\n            strength += letter.charCodeAt(0);\n        }\n        if (strength > max_strength) {\n            max_strength = strength;\n            strongest_extension = extension;\n        }\n    }\n    return strongest_extension;\n}"], ["// <func> // TypeScript\n//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a: string, b: string): boolean {\n  const a_length = a.length;\n  const b_length = b.length;\n  if (a_length === 0 || b_length === 0) {\n    return false;\n  }\n  const a_char = a[0];\n  const b_char = b[0];\n  const a_rotation = a.charAt(1);\n  const b_rotation = b.charAt(1);\n  if (a_rotation === b_rotation) {\n    return cycpattern_check(a.slice(1), b.slice(1));\n  }\n  return false;\n}\n```\n\nIn this function, we first check if the first word is a substring of the second word. If it is, we return true. Otherwise, we check if the second word is a substring of any of its rotations. If it is, we return false. Otherwise, we return true.\n\nThe `cycpattern_check` function takes two strings as input and returns a boolean value."], ["// <func> // TypeScript\n//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num: number): [number, number] {\n  const result: [number, number] = [0, 0];\n  let count = 0;\n  let remainder = num;\n  while (remainder > 0) {\n    const digit = remainder % 10;\n    if (digit === 0) {\n      count++;\n    } else {\n      count--;\n    }\n    remainder /= 10;\n  }\n  result[0] = count;\n  result[1] = count + 1;\n  return result;\n} ```\n\nIn this example, we define a function called `even_odd_count` that takes an integer `num` as input. The function returns two arrays, `result[0]` and `result[1]` that contain the number of even and odd digits respectively.\n\nThe function first initializes two variables `count` and `remainder` to 0. Then, it checks if the remainder is 0. If it is, then the function increments `count` by 1. If it is not, then the function decrements `count` by 1.\n\nFinally, the function returns the two arrays `result[0]` and `result[1]`.\n\nIn the example, the function returns `[1, 1]` for `num` = `-12`. This means that the function returns the number of even digits and the number of odd digits respectively.\n\nIn the example, the function returns `[1, 2]` for `num` = 123. This means that the function returns the number of even digits and the number of odd digits respectively."], ["// <func> // TypeScript\n//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\n  if (number < 1000) {\n    return `i${number}`\n  } else if (number < 1000000) {\n    return `v${number / 10000}`\n  } else if (number < 1000000000) {\n    return `x${number / 1000000}`\n  } else if (number < 1000000000000) {\n    return `l${number / 1000000000}`\n  } else if (number < 1000000000000000) {\n    return `c${number / 1000000000000}`\n  } else {\n    return `m${number / 1000000000000}`\n  }\n}\n```\n\nThe `int_to_mini_roman` function takes a positive integer `number` as input and returns a string in lowercase. The function first checks if the input is less than 1000, and if so, returns the roman numeral equivalent as a string. If the input is less than 1000000, the function checks if the input is less than 1000000000, and if so, returns the roman numeral equivalent as a string. If the input is less than 1000000000000, the function checks if the input is less than 10000"], ["// <func> // TypeScript\n//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    return (a + b + c) % 180 === 0;\n}"], ["// <func> // TypeScript\n//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n  const max_length = words.reduce((acc, word) => Math.max(acc, word.length), 0);\n  return words.reduce((acc, word) => {\n    if (word.length > max_length) {\n      return word;\n    }\n    return acc;\n  }, \"\");\n}"], ["// <func> // TypeScript\n//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number: number, need: number, remaining: number): number[] {\n  if (need <= 0) {\n    return [0, 0];\n  }\n  if (number <= 0) {\n    return [0, 0];\n  }\n  if (need > number) {\n    return [0, 0];\n  }\n  if (need === number) {\n    return [number, 0];\n  }\n  if (need === 1) {\n    return [number, 1];\n  }\n  if (need === 2) {\n    return [number, 2];\n  }\n  if (need === 3) {\n    return [number, 3];\n  }\n  if (need === 4) {\n   "], ["// <func> // TypeScript\n//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    if (operand.length === 0) {\n        return 0;\n    }\n    if (operand.length === 1) {\n        return operand[0];\n    }\n    const result = 0;\n    for (let i = 0; i < operator.length; i++) {\n        if (i === 0) {\n            result += operand[i];\n        } else {\n            result += operator[i] * operand[i - 1];\n        }\n    }\n    return result;\n}\n"], ["// <func> // TypeScript\n//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n  let result = \"\";\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === \"a\" || s[i] === \"A\") {\n      result += s[i] === \"a\" ? \"A\" : \"A\".toUpperCase();\n    } else if (s[i] === \"e\" || s[i] === \"E\") {\n      result += s[i] === \"e\" ? \"E\" : \"E\".toUpperCase();\n    } else if (s[i] === \"i\" || s[i] === \"I\") {\n      result += s[i] === \"i\" ? \"I\" : \"I\".toUpperCase();\n    } else if (s[i] === \"o\" || s[i] === \"O\") {\n      result += s[i] === \"o\" ? \"O\" : \"O\".toUpperCase();\n    } else if (s[i] === \"u\" || s[i] === \"U\") {\n      result += s[i] === \"u\" ? \"U\" : \"U\".toUpperCase();\n    } else {\n      result += s[i];\n    }\n    i++;\n  }\n  return result;\n}\n```\n\nIn this implementation, we first check if the input string is empty. If it is, we return an empty string.\n\nThen, we loop through the input string and check if the current character is a letter. If it is, we reverse its case. If it is not a letter, we keep it as it is.\n\nFinally, we return the resulting string.\n\nThis"], ["// <func> // TypeScript\n//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text: string): string | undefined {\n  if (text === undefined || text === null) {\n    return undefined;\n  }\n  const hash = crypto.createHash(\"md5\");\n  hash.update(text);\n  return hash.digest(\"hex\");\n}"], ["// <func> // TypeScript\n//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a: number, b: number): number[] {\n  const result: number[] = [];\n  let current = a;\n  while (current <= b) {\n    result.push(current);\n    current += 10;\n  }\n  return result;\n}"]]