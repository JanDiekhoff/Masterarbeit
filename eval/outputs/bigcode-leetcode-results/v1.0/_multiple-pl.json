[["# Check if in given array of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n# \"\"\n# >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n# 1\nsub has_close_elements {\n    my($numbers, $threshold) = @_;\n    my $closest_index = 0;\n    my $closest_value = 0.0;\n    foreach my $num (@$numbers) {\n        my $diff = abs($num - $threshold);\n        if ($diff <= $closest_index) {\n            $closest_index = $diff;\n            $closest_value = $num;\n        }\n    }\n    return $closest_index;\n}\n```"], ["# Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n# separate those group into separate strings and return the array of those.\n# Separate groups are balanced (each open brace is properly closed) and not nested within each other\n# Ignore any spaces in the input string.\n# >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n# [\"()\", \"(())\", \"(()())\"]\nsub separate_paren_groups {\n    my($paren_string) = @_;\n    my @paren_groups = ();\n    my $paren_count = 0;\n    my $paren_open = 0;\n    my $paren_close = 0;\n    my $paren_open_count = 0;\n    my $paren_close_count = 0;\n    my $paren_open_end = 0;\n    my $paren_close_end = 0;\n    my $paren_open_end_count = 0;\n    my $paren_close_end_count = 0;\n    my $paren_open_end_count_2 = 0;\n    my $paren_close_end_count_2 = 0;\n    my $paren_open_end_count_3 = 0;\n    my $paren_close_end_count_3 = 0;\n    my $paren_open_end_count_4 = 0;\n    my $paren_close_end_count_4 = 0;\n    my $paren_open_end_count_5 = 0;\n    my $paren_close_end_count_5 = 0;\n    my $paren_open_end_count_6 = 0;\n    my $paren_close_end_count_6 = 0;\n    my $paren_open_end_count_7 = 0;\n    my $paren_close_end_count_7 = 0;\n    my $paren_open_end_count_8 = 0;\n    my $paren_close_end_count_8 = 0;\n   "], ["# Given a positive floating point number, it can be decomposed into\n# and integer part (largest integer smaller than given number) and decimals\n# (leftover part always smaller than 1).\n# Return the decimal part of the number.\n# >>> truncate_number(3.5)\n# 0.5\nsub truncate_number {\n    my($number) = @_;\n    my $decimal = $number;\n    my $integer = $number - $decimal;\n    return $integer;\n}"], ["# You're given an array of deposit and withdrawal operations on a bank account that starts with\n# zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n# at that point function should return 1. Otherwise it should return ''.\n# >>> below_zero([1, 2, 3])\n# \"\"\n# >>> below_zero([1, 2, -4, 5])\n# 1\nsub below_zero {\n    my($operations) = @_;\n    my $balance = 0;\n    foreach my $operation (@$operations) {\n        $balance += $operation->amount;\n    }\n    return $balance < 0 ? 1 : '';\n}\n```"], ["# For a given array of input numbers, calculate Mean Absolute Deviation\n# around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute difference between each\n# element and a centerpoint (mean in this case):\n# MAD = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n# 1.0\nsub mean_absolute_deviation {\n    my($numbers) = @_;\n    my $mean = shift;\n    my $sum = 0;\n    foreach my $num (@_) {\n        $sum += $num - $mean;\n    }\n    return $sum / scalar @_;\n}"], ["# Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n# >>> intersperse([], 4)\n# []\n# >>> intersperse([1, 2, 3], 4)\n# [1, 4, 2, 4, 3]\nsub intersperse {\n    my($numbers, $delimeter) = @_;\n    my $result = [];\n    for my $num (@$numbers) {\n        push @$result, $num;\n    }\n    return $result;\n}\n```"], ["# Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n# For each of the group, output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting while ((())) has three.\n# >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n# [2, 3, 1, 3]\nsub parse_nested_parens {\n    my($paren_string) = @_;\n    my @parens = split(/ /, $paren_string);\n    my $max_level = 0;\n    my @parens_level = ();\n    foreach my $paren (@parens) {\n        my $level = 0;\n        foreach my $paren_level (@parens_level) {\n            if ($paren_level > $level) {\n                $level = $paren_level;\n            }\n        }\n        push @parens_level, $level;\n        $max_level = $level if $level > $max_level;\n    }\n    return [$max_level, @parens_level];\n}\n```"], ["# Filter an input array of strings only for ones that contain given substring\n# >>> filter_by_substring([], \"a\")\n# []\n# >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"bacd\", \"array\"]\nsub filter_by_substring {\n    my($strings, $substring) = @_;\n    return grep { $_ =~ /$substring/ } @$strings;\n}\n```"], ["# For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n# Empty sum should be equal to 0 and empty product should be equal to 1.\n# >>> sum_product([])\n# [0, 1]\n# >>> sum_product([1, 2, 3, 4])\n# [10, 24]\nsub sum_product {\n    my($numbers) = @_;\n    my $sum = 0;\n    my $product = 1;\n    foreach my $num (@$numbers) {\n        $sum += $num;\n        $product *= $num;\n    }\n    return [$sum, $product];\n}\n```"], ["# From a given array of integers, generate an array of rolling maximum element found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\nsub rolling_max {\n    my($numbers) = @_;\n    my $max = $numbers[0];\n    my $i = 1;\n    for my $num (@_) {\n        $max = $max < $num ? $num : $max;\n        $i++;\n    }\n    return [$max, $i];\n}\n```"], ["# Find the shortest palindrome that begins with a supplied string.\n# Algorithm idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n# - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n# >>> make_palindrome(\"\")\n# \"\"\n# >>> make_palindrome(\"cat\")\n# \"catac\"\n# >>> make_palindrome(\"cata\")\n# \"catac\"\nsub make_palindrome {\n    my($string) = @_;\n    my $postfix = reverse $string;\n    my $prefix = reverse $postfix;\n    return $prefix . $postfix;\n}\n```"], ["# Input are two strings a and b consisting only of 1s and 0s.\n# Perform binary XOR on these inputs and return result also as a string.\n# >>> string_xor(\"010\", \"110\")\n# \"100\"\nsub string_xor {\n    my($a, $b) = @_;\n    my $xor = 0;\n    for my $i (0..$#$a) {\n        $xor += $a->[$i] ^ $b->[$i];\n    }\n    return $xor;\n}\n```"], ["# Out of array of strings, return the longest one. Return the first one in case of multiple\n# strings of the same length. Return undef in case the input array is empty.\n# >>> longest([])\n# undef\n# >>> longest([\"a\", \"b\", \"c\"])\n# \"a\"\n# >>> longest([\"a\", \"bb\", \"ccc\"])\n# \"ccc\"\nsub longest {\n    my($strings) = @_;\n    my $max_len = 0;\n    foreach my $string (@$strings) {\n        my $len = length($string);\n        if ($len > $max_len) {\n            $max_len = $len;\n        }\n    }\n    return $max_len;\n}\n1;\n"], ["# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3, 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\nsub greatest_common_divisor {\n    my($a, $b) = @_;\n    return 1 if $a == 0 && $b == 0;\n    return 0 if $a == 0;\n    return 1 if $b == 0;\n    return $a % $b;\n}\n```"], ["# Return array of all prefixes from shortest to longest of the input string\n# >>> all_prefixes(\"abc\")\n# [\"a\", \"ab\", \"abc\"]\nsub all_prefixes {\n    my($string) = @_;\n    my @prefixes = ();\n    my $i = 0;\n    while ($i < length($string)) {\n        my $prefix = substr($string, $i, 1);\n        push @prefixes, $prefix if ($prefix =~ /^[a-z]/);\n        $i += length($prefix);\n    }\n    return @prefixes;\n}"], ["# Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n# >>> string_sequence(0)\n# \"0\"\n# >>> string_sequence(5)\n# \"0 1 2 3 4 5\"\nsub string_sequence {\n    my($n) = @_;\n    my $str = \"\";\n    for (my $i = 0; $i <= $n; $i++) {\n        $str .= \"0\";\n    }\n    $str;\n}\n```"], ["# Given a string, find out how many distinct characters (regardless of case) does it consist of\n# >>> count_distinct_characters(\"xyzXYZ\")\n# 3\n# >>> count_distinct_characters(\"Jerry\")\n# 4\nsub count_distinct_characters {\n    my($string) = @_;\n    my @characters = ();\n    foreach my $char (split(//, $string)) {\n        push @characters, $char if $char =~ /[a-z]/;\n    }\n    return scalar @characters;\n}\n```"], ["# Input to this function is a string representing musical notes in a special ASCII format.\n# Your task is to parse this string and return array of integers corresponding to how many beats does each\n# not last.\n# Here is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|' - quater note, lasts one beat\n# >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n# [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nsub parse_music {\n    my($music_string) = @_;\n    my @beats = ();\n    my $i = 0;\n    my $last_note = 0;\n    my $last_beat = 0;\n    my $current_note = 0;\n    my $current_beat = 0;\n    for my $note (@$music_string) {\n        if ($note eq 'o') {\n            $current_note = $last_note;\n            $current_beat = $last_beat;\n            $last_note = 0;\n            $last_beat = 0;\n        }\n        elsif ($note eq 'o|') {\n            $current_note = $last_note;\n            $current_beat = $last_beat;\n            $last_note = $current_note;\n            $last_beat = $current_beat;\n        }\n        elsif ($note eq '.|') {\n            $current_note = $last_note;\n            $current_beat = $last_beat;\n            $last_note = 0;\n            $last_beat = 0;\n        }\n        elsif ($note eq 'o|.|') {\n            $current_note = $last_note;\n            $current_beat = $last_beat;\n            $last_note = $current_note;\n            $last_beat = $current_beat;\n        }\n        elsif ($"], ["# Find how many times a given substring can be found in the original string. Count overlaping cases.\n# >>> how_many_times(\"\", \"a\")\n# 0\n# >>> how_many_times(\"aaa\", \"a\")\n# 3\n# >>> how_many_times(\"aaaa\", \"aa\")\n# 3\nsub how_many_times {\n    my($string, $substring) = @_;\n    my $count = 0;\n    for my $i (0 .. length($string) - length($substring)) {\n        if ($string[$i] eq $substring[$i]) {\n            $count++;\n        }\n    }\n    return $count;\n}\n```"], ["# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n# Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to largest\n# >>> sort_numbers(\"three one five\")\n# \"one three five\"\nsub sort_numbers {\n    my($numbers) = @_;\n    my @sorted = sort { $a <=> $b } split(/\\s+/, $numbers);\n    return join(\"\", @sorted);\n}"], ["# From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n# [2.0, 2.2]\n# >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n# [2.0, 2.0]\nsub find_closest_elements {\n    my($numbers) = @_;\n    my $closest = $numbers[0];\n    for my $i (0 .. $#$numbers) {\n        my $distance = $numbers[$i] - $closest;\n        if ($distance < 0) {\n            $closest = $numbers[$i];\n        }\n    }\n    return ($closest, $numbers[$#$numbers]);\n}\n```"], ["# Given array of numbers (of at least two elements), apply a linear transform to that array,\n# such that the smallest number will become 0 and the largest will become 1\n# >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n# [0.0, 0.25, 0.5, 0.75, 1.0]\nsub rescale_to_unit {\n    my($numbers) = @_;\n    my $min = $numbers->[0];\n    my $max = $numbers->[1];\n    my $step = $max - $min;\n    my $new_numbers = [];\n    for my $i (0 .. $#$numbers) {\n        my $new_num = $min + ($i * $step);\n        push @$new_numbers, $new_num;\n    }\n    return $new_numbers;\n}\n```"], ["# Filter given array of any plthon values only for integers\n# >>> filter_integers([\"a\", 3.14, 5])\n# [5]\n# >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n# [1, 2, 3]\nsub filter_integers {\n    my($values) = @_;\n    my @integers = grep { defined($_) && $_ =~ /^\\d+$/ } @$values;\n    return @integers;\n}\n```"], ["# Return length of given string\n# >>> strlen(\"\")\n# 0\n# >>> strlen(\"abc\")\n# 3\nsub strlen {\n    my($string) = @_;\n    return length($string);\n}"], ["# For a given number n, find the largest number that divides n evenly, smaller than n\n# >>> largest_divisor(15)\n# 5\nsub largest_divisor {\n    my($n) = @_;\n    my $divisor = 1;\n    while ($n % $divisor == 0) {\n        $divisor = $n / $divisor;\n    }\n    return $divisor;\n}\n```"], ["# Return array of prime factors of given integer in the order from smallest to largest.\n# Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n# Input number should be equal to the product of all factors\n# >>> factorize(8)\n# [2, 2, 2]\n# >>> factorize(25)\n# [5, 5]\n# >>> factorize(70)\n# [2, 5, 7]\nsub factorize {\n    my($n) = @_;\n    my @factors = ();\n    my $i = 0;\n    while ($n > 1) {\n        my $factor = $n % $n;\n        push @factors, $factor if ($factor);\n        $n = $n / $n;\n        $i++;\n    }\n    return @factors;\n}\n```"], ["# From an array of integers, remove all elements that occur more than once.\n# Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1, 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n    my $sorted = sort {$a <=> $b} @$numbers;\n    return $sorted;\n}\n```"], ["# For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n    my($string) = @_;\n    $string =~ s/[a-z]/[A-Z]/g;\n    $string =~ s/[A-Z]/[a-z]/g;\n    return $string;\n}"], ["# Concatenate array of strings into a single string\n# >>> concatenate([])\n# \"\"\n# >>> concatenate([\"a\", \"b\", \"c\"])\n# \"abc\"\nsub concatenate {\n    my($strings) = @_;\n    my $result = \"\";\n    foreach my $string (@$strings) {\n        $result .= $string;\n    }\n    return $result;\n}"], ["# Filter an input array of strings only for ones that start with a given prefix.\n# >>> filter_by_prefix([], \"a\")\n# []\n# >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n# [\"abc\", \"array\"]\nsub filter_by_prefix {\n    my($strings, $prefix) = @_;\n    return grep { $_ =~ s/$prefix/$prefix/g } @$strings;\n}\n```"], ["# Return only positive numbers in the array.\n# >>> get_positive([-1, 2, -4, 5, 6])\n# [2, 5, 6]\n# >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# [5, 3, 2, 3, 9, 123, 1]\nsub get_positive {\n    my($l) = @_;\n    my @pos = grep { $_ >= 0 } @$l;\n    return @pos;\n}"], ["# Return true if a given number is prime, and false otherwise.\n# >>> is_prime(6)\n# \"\"\n# >>> is_prime(101)\n# 1\n# >>> is_prime(11)\n# 1\n# >>> is_prime(13441)\n# 1\n# >>> is_prime(61)\n# 1\n# >>> is_prime(4)\n# \"\"\n# >>> is_prime(1)\n# \"\"\nsub is_prime {\n    my($n) = @_;\n    my $i = 2;\n    while ($i <= sqrt($n) && $n % $i == 0) {\n        $i++;\n    }\n    return $i == $n;\n}\n```"], ["# This function takes an array l and returns an array l' such that\n# l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n# to the values of the corresponding indicies of l, but sorted.\n# >>> sort_third([1, 2, 3])\n# [1, 2, 3]\n# >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n# [2, 6, 3, 4, 8, 9, 5]\nsub sort_third {\n    my($l) = @_;\n    my @l_ind = grep { $_ % 3 == 0 } @$l;\n    my @l_sort = sort { $a <=> $b } @$l_ind;\n    return [@l_sort];\n}\n```"], ["# Return sorted unique elements in an array\n# >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n    my $n = scalar @$l;\n    my $i = 0;\n    my @r;\n    while($i < $n) {\n        my $j = $i + 1;\n        while($j < $n) {\n            if($l->[$i] == $l->[$j]) {\n                $j++;\n                last;\n            }\n            $i++;\n        }\n        push @r, $l->[$i];\n        $i++;\n    }\n    return @r;\n}"], ["# Return maximum element in the array.\n# >>> max_element([1, 2, 3])\n# 3\n# >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# 123\nsub max_element {\n    my($l) = @_;\n    my $max = $l->[0];\n    foreach my $i (@$l) {\n        if ($i > $max) {\n            $max = $i;\n        }\n    }\n    return $max;\n}\n```"], ["# Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n# >>> fizz_buzz(50)\n# 0\n# >>> fizz_buzz(78)\n# 2\n# >>> fizz_buzz(79)\n# 3\nsub fizz_buzz {\n    my($n) = @_;\n    my $fizz = 0;\n    my $buzz = 0;\n    my $i = 0;\n    my $j = 0;\n    while ($i < $n) {\n        if ($i % 11 == 7) {\n            $fizz++;\n        }\n        if ($i % 13 == 7) {\n            $buzz++;\n        }\n        $i++;\n    }\n    return ($fizz + $buzz) % 2;\n}\n```"], ["# This function takes an array l and returns an array l' such that\n# l' is identical to l in the odd indicies, while its values at the even indicies are equal\n# to the values of the even indicies of l, but sorted.\n# >>> sort_even([1, 2, 3])\n# [1, 2, 3]\n# >>> sort_even([5, 6, 3, 4])\n# [3, 6, 5, 4]\nsub sort_even {\n    my($l) = @_;\n    my $even = 0;\n    my $odd = 0;\n    foreach my $i (@$l) {\n        if ($i % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    my $new_l = [sort { $even <=> $i } @$l];\n    $new_l[0] = $new_l[1];\n    $new_l[1] = $new_l[2];\n    $new_l[2] = $new_l[3];\n    $new_l[3] = $new_l[4];\n    $new_l[4] = $new_l[5];\n    $new_l[5] = $new_l[6];\n    $new_l[6] = $new_l[7];\n    $new_l[7] = $new_l[8];\n    $new_l[8] = $new_l[9];\n    $new_l[9] = $new_l[10];\n    $new_l[10] = $new_l[11];\n    $new_l[11] = $new_l[12];\n    $new_l[12] = $new_l[13];\n    $new_l[13] = $new_l[14];\n    $new_l[14] = $new_l[15];\n    $new_l[15] = $new_l[16];\n    $new_l[16] = $new"], ["# prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n# 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\nsub prime_fib {\n    my($n) = @_;\n    return 0 if $n < 2;\n    return 1 if $n % 2 == 0;\n    my $sum = 0;\n    for (my $i = 2; $i <= $n; $i++) {\n        $sum += $i;\n        last if $sum % $i == 0;\n    }\n    return $sum;\n}\n```"], ["# triples_sum_to_zero takes an array of integers as an input.\n# it returns 1 if there are three distinct elements in the array that\n# sum to zero, and '' otherwise.\n# >>> triples_sum_to_zero([1, 3, 5, 0])\n# \"\"\n# >>> triples_sum_to_zero([1, 3, -2, 1])\n# 1\n# >>> triples_sum_to_zero([1, 2, 3, 7])\n# \"\"\n# >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n# 1\n# >>> triples_sum_to_zero([1])\n# \"\"\nsub triples_sum_to_zero {\n    my($l) = @_;\n    my $sum = 0;\n    for my $i (0 .. $#$l) {\n        $sum += $l[$i];\n    }\n    return $sum == 0;\n}\n```"], ["# Imagine a road that's a perfectly straight infinitely long line.\n# n cars are driving left to right;  simultaneously, a different set of n cars\n# are driving right to left.   The two sets of cars start out being very far from\n# each other.  All cars move in the same speed.  Two cars are said to collide\n# when a car that's moving left to right hits a car that's moving right to left.\n# However, the cars are infinitely sturdy and strong; as a result, they continue moving\n# in their trajectory as if they did not collide.\n# This function outputs the number of such collisions.\nsub car_race_collision {\n    my($n) = @_;\n    my $collisions = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        my $car1 = $i;\n        my $car2 = $i + 1;\n        while ($car1 != $car2) {\n            my $collision = $car1 == $car2 ? 1 : 0;\n            $collisions += $collision;\n            $car1 = $car2;\n            $car2 = $car1 + 1;\n        }\n    }\n    return $collisions;\n}\n```"], ["# Return array with elements incremented by 1.\n# >>> incr_list([1, 2, 3])\n# [2, 3, 4]\n# >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [6, 4, 6, 3, 4, 4, 10, 1, 124]\nsub incr_list {\n    my($l) = @_;\n    my $i = 0;\n    my @res = ();\n    while ($i < scalar @$l) {\n        push @res, $l->[$i++];\n    }\n    return \\@res;\n}\n```"], ["# pairs_sum_to_zero takes an array of integers as an input.\n# it returns 1 if there are two distinct elements in the array that\n# sum to zero, and '' otherwise.\n# >>> pairs_sum_to_zero([1, 3, 5, 0])\n# \"\"\n# >>> pairs_sum_to_zero([1, 3, -2, 1])\n# \"\"\n# >>> pairs_sum_to_zero([1, 2, 3, 7])\n# \"\"\n# >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n# 1\n# >>> pairs_sum_to_zero([1])\n# \"\"\nsub pairs_sum_to_zero {\n    my($l) = @_;\n    my $sum = 0;\n    for my $i (0 .. $#$l) {\n        $sum += $l->[$i];\n    }\n    return $sum == 0;\n}\n```"], ["# Change numerical base of input number x to base.\n# return string representation after the conversion.\n# base numbers are less than 10.\n# >>> change_base(8, 3)\n# \"22\"\n# >>> change_base(8, 2)\n# \"1000\"\n# >>> change_base(7, 2)\n# \"111\"\nsub change_base {\n    my($x, $base) = @_;\n    my $result = \"\";\n    for (my $i = 1; $i <= $base; $i++) {\n        $result .= $x / $i * $i;\n    }\n    return $result;\n}\n```"], ["# Given length of a side and high return area for a triangle.\n# >>> triangle_area(5, 3)\n# 7.5\nsub triangle_area {\n    my($a, $h) = @_;\n    return $a * $h;\n}\n```"], ["# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n# 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n    return 0 if $n < 3;\n    return $n if $n == 1;\n    return $n if $n == 2;\n    return $n - 1 + $fib4($n - 2) + $fib4($n - 3) + $fib4($n - 4);\n}\n```"], ["# Return median of elements in the array l.\n# >>> median([3, 1, 2, 4, 5])\n# 3\n# >>> median([-10, 4, 6, 1000, 10, 20])\n# 15.0\nsub median {\n    my($l) = @_;\n    my $n = scalar @$l;\n    my $med = $n / 2;\n    return $l->[$med] if $n > 1;\n    return $l->[$n - 1] if $n < 1;\n    return $l->[$n - 2] if $n > 1;\n    return $l->[$n - 3] if $n > 1;\n    return $l->[$n - 4] if $n > 1;\n    return $l->[$n - 5] if $n > 1;\n    return $l->[$n - 6] if $n > 1;\n    return $l->[$n - 7] if $n > 1;\n    return $l->[$n - 8] if $n > 1;\n    return $l->[$n - 9] if $n > 1;\n    return $l->[$n - 10] if $n > 1;\n    return $l->[$n - 11] if $n > 1;\n    return $l->[$n - 12] if $n > 1;\n    return $l->[$n - 13] if $n > 1;\n    return $l->[$n - 14] if $n > 1;\n    return $l->[$n - 15] if $n > 1;\n    return $l->[$n - 16] if $n > 1;\n    return $l->[$n - 17] if $n > 1;\n    return $l->[$n - 18] if $n > 1;\n    return $l->[$n - 19] if $n > 1;\n    return $l->[$n - 20] if $n > 1"], ["# Checks if given string is a palindrome\n# >>> is_palindrome(\"\")\n# 1\n# >>> is_palindrome(\"aba\")\n# 1\n# >>> is_palindrome(\"aaaaa\")\n# 1\n# >>> is_palindrome(\"zbcd\")\n# \"\"\nsub is_palindrome {\n    my($text) = @_;\n    my $length = length($text);\n    return 1 if $length == 1;\n    return 0 if $length == 0;\n    my $i = 0;\n    while ($i < $length - 1) {\n        my $j = $i + 1;\n        while ($j < $length - 1 && $text{$j} eq $text{$j + 1}) {\n            $j++;\n        }\n        if ($j < $length - 1) {\n            $text{$i} = $text{$j};\n            $i++;\n            $j++;\n        }\n    }\n    return 1;\n}\n```"], ["# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n# >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n# >>> modp(100, 101)\n# 1\nsub modp {\n    my($n, $p) = @_;\n    my $i = 0;\n    while ($n > 0) {\n        $n = $n / $p;\n        $i++;\n    }\n    return $i;\n}\n```"], ["# remove_vowels is a function that takes string and returns string without vowels.\n# >>> remove_vowels(\"\")\n# \"\"\n# >>> remove_vowels(\"abcdef\")\n# \"bcdf\"\n# >>> remove_vowels(\"aaaaa\")\n# \"\"\n# >>> remove_vowels(\"aaBAA\")\n# \"B\"\n# >>> remove_vowels(\"zbcd\")\n# \"zbcd\"\nsub remove_vowels {\n    my($text) = @_;\n    $text =~ s/[aeiouAEIOU]/ /g;\n    return $text;\n}"], ["# Return 1 if all numbers in the array l are below threshold t.\n# >>> below_threshold([1, 2, 4, 10], 100)\n# 1\n# >>> below_threshold([1, 20, 4, 10], 5)\n# \"\"\nsub below_threshold {\n    my($l, $t) = @_;\n    my $i = 0;\n    while ($i < @$l) {\n        my $n = $l->[$i];\n        if ($n < $t) {\n            return 0;\n        }\n        $i++;\n    }\n    return 1;\n}\n```"], ["# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\nsub add {\n    my($x, $y) = @_;\n    return $x - $y;\n}"], ["# Check if two words have the same characters.\n# >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n# 1\n# >>> same_chars(\"abcd\", \"dddddddabc\")\n# 1\n# >>> same_chars(\"dddddddabc\", \"abcd\")\n# 1\n# >>> same_chars(\"eabcd\", \"dddddddabc\")\n# \"\"\n# >>> same_chars(\"abcd\", \"dddddddabce\")\n# \"\"\n# >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n# \"\"\nsub same_chars {\n    my($s0, $s1) = @_;\n    return 1 if $s0 eq $s1;\n    return 0;\n}\n```"], ["# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n    return 0 if $n < 0;\n    return 1 if $n < 1;\n    return fib($n - 1) + fib($n - 2);\n}\n```"], ["# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $bracket_count = 0;\n    foreach my $bracket (@$brackets) {\n        if ($bracket eq \"<\") {\n            $bracket_count++;\n        }\n        elsif ($bracket eq \">\") {\n            $bracket_count--;\n        }\n        elsif ($bracket eq \"<<\") {\n            $bracket_count = 0;\n        }\n        elsif ($bracket eq \"><\") {\n            $bracket_count = 0;\n        }\n        elsif ($bracket eq \">>\") {\n            $bracket_count = 0;\n        }\n        elsif ($bracket eq \">\") {\n            $bracket_count++;\n        }\n    }\n    return $bracket_count;\n}\n```"], ["# Return 1 is array elements are monotonically increasing or decreasing.\n# >>> monotonic([1, 2, 4, 20])\n# 1\n# >>> monotonic([1, 20, 4, 10])\n# \"\"\n# >>> monotonic([4, 1, 0, -10])\n# 1\nsub monotonic {\n    my($l) = @_;\n    my $n = scalar @$l;\n    my $i = 0;\n    while ($i < $n) {\n        my $j = $i + 1;\n        while ($j < $n) {\n            my $k = $j + 1;\n            if ($l[$i] < $l[$j]) {\n                $i = $j;\n            }\n            elsif ($l[$i] > $l[$k]) {\n                $j = $k;\n            }\n            elsif ($l[$i] == $l[$k]) {\n                $i++;\n            }\n            elsif ($l[$i] > $l[$k]) {\n                $i = $k;\n            }\n            elsif ($l[$i] < $l[$k]) {\n                $j = $k;\n            }\n        }\n    }\n    return 1;\n}\n```"], ["# Return sorted unique common elements for two arrays.\n# >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n# [1, 5, 653]\n# >>> common([5, 3, 2, 8], [3, 2])\n# [2, 3]\nsub common {\n    my($l1, $l2) = @_;\n    my @common = ();\n    while (my $i = $l1->[0]) {\n        while (my $j = $l2->[0]) {\n            if ($i < $j) {\n                push @common, $i;\n                $i++;\n            }\n            elsif ($i > $j) {\n                push @common, $j;\n                $j++;\n            }\n            else {\n                last;\n            }\n        }\n    }\n    return @common;\n}\n```"], ["# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n# >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\nsub largest_prime_factor {\n    my($n) = @_;\n    my $i = 2;\n    while ($n % $i == 0) {\n        $n /= $i;\n        $i += 2;\n    }\n    return $i;\n}\n```"], ["# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n# 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n# 55\n# >>> sum_to_n(1)\n# 1\nsub sum_to_n {\n    my($n) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i <= $n; $i++) {\n        $sum += $i;\n    }\n    return $sum;\n}\n```"], ["# brackets is a string of \"(\" and \")\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\")\n# \"\"\n# >>> correct_bracketing(\"()\")\n# 1\n# >>> correct_bracketing(\"(()())\")\n# 1\n# >>> correct_bracketing(\")(()\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $bracket_count = 0;\n    my $bracket_count_last = 0;\n    my $bracket_count_last_last = 0;\n    my $bracket_count_last_last_last = 0;\n    my $bracket_count_last_last_last_last = 0;\n    my $bracket_count_last_last_last_last_last = 0;\n    my $bracket_count_last_last_last_last_last_last_last = 0;\n    my $bracket_count_last_last_last_last_last_last_last_last_last = 0;\n    my $bracket_count_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_last_"], ["# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2] * x^2 + ....\n# Return derivative of this polynomial in the same form.\n# >>> derivative([3, 1, 2, 4, 5])\n# [1, 4, 12, 20]\n# >>> derivative([1, 2, 3])\n# [2, 6]\nsub derivative {\n    my($xs) = @_;\n    my $n = scalar(@$xs);\n    my $d = 1;\n    for(my $i = 1; $i <= $n; $i++) {\n        $d *= $xs[$i];\n    }\n    return $d;\n}\n```"], ["# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n# >>> fibfib(1)\n# 0\n# >>> fibfib(5)\n# 4\n# >>> fibfib(8)\n# 24\nsub fibfib {\n    my($n) = @_;\n    my $a = 0;\n    my $b = 1;\n    my $c = 0;\n    for (my $i = 0; $i < $n; $i++) {\n        $c = $a + $b;\n        $a = $b;\n        $b = $c;\n    }\n    return $c;\n}\n```"], ["# Write a function vowels_count which takes a string representing\n# a word as input and returns the number of vowels in the string.\n# Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is at the end of the given word.\n# Example:\n# >>> vowels_count(\"abcde\")\n# 2\n# >>> vowels_count(\"ACEDY\")\n# 3\nsub vowels_count {\n    my($s) = @_;\n    my @vowels = qw(a e i o u);\n    my $count = 0;\n    for my $char (@$s) {\n        if ($char eq 'y') {\n            $count++;\n        } else {\n            $count++;\n            last if $count == 2;\n        }\n    }\n    return $count;\n}\n```"], ["# Circular shift the digits of the integer x, shift the digits right by shift\n# and return the result as a string.\n# If shift > number of digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# \"21\"\n# >>> circular_shift(12, 2)\n# \"12\"\nsub circular_shift {\n    my($x, $shift) = @_;\n    my $digits = $x =~ s/\\D//g;\n    my $shifted_digits = $digits[0..$shift - 1] . $digits[$shift];\n    return $shifted_digits;\n}\n```"], ["# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum(\"\")\n# 0\n# >>> digitSum(\"abAB\")\n# 131\n# >>> digitSum(\"abcCd\")\n# 67\n# >>> digitSum(\"helloE\")\n# 69\n# >>> digitSum(\"woArBld\")\n# 131\n# >>> digitSum(\"aAaaaXa\")\n# 153\nsub digitSum {\n    my($s) = @_;\n    my $sum = 0;\n    for my $c (split //, $s) {\n        $sum += $c if $c =~ /[A-Z]/;\n    }\n    return $sum;\n}"], ["# In this task, you will be given a string that represents a number of apples and oranges \n# that are distributed in a basket of fruit this basket contains \n# apples, oranges, and mango fruits. Given the string that represents the total number of \n# the oranges and apples and an integer that represent the total number of the fruits \n# in the basket return the number of the mango fruits in the basket.\n# for examble:\n# >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n# 8\n# >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n# 2\n# >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n# 95\n# >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n# 19\nsub fruit_distribution {\n    my($s, $n) = @_;\n    my @fruits = split(/[ ,]+/, $s);\n    my $total_fruits = 0;\n    foreach my $fruit (@fruits) {\n        $total_fruits += $fruit;\n    }\n    return $total_fruits - $n if $total_fruits > $n;\n    return $n;\n}\n```"], ["# \"Given an array representing a branch of a tree that has non-negative integer nodes\n# your task is to pluck one of the nodes and return it.\n# The plucked node should be the node with the smallest even value.\n# If multiple nodes with the same smallest even value are found return the node that has smallest index.\n# The plucked node should be returned in an array, [ smalest_value, its index ],\n# If there are no even values or the given array is empty, return [].\n# Example 1:\n# >>> pluck([4, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>> pluck([1, 2, 3])\n# [2, 1]\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 3:\n# >>> pluck([])\n# []\n# Example 4:\n# >>> pluck([5, 0, 3, 0, 4, 2])\n# [0, 1]\n# Explanation: 0 is the smallest value, but  there are two zeros,\n# so we will choose the first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\nsub pluck {\n    my($arr) = @_;\n    my $min = 0;\n    my $max = scalar @$arr;\n    for (my $i = 0; $i < $max; $i++) {\n        my $even = ($i + 1) % 2;\n        if ($arr[$i] % 2 == $even) {\n            $min = $i;\n        }\n    }\n    return [ $arr->[$min], $min ];\n}\n```"], ["# You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n# zero, and has a frequency greater than or equal to the value of the integer itself. \n# The frequency of an integer is the number of times it appears in the array.\n# If no such a value exist, return -1.\n# Examples:\n# >>> search([4, 1, 2, 2, 3, 1])\n# 2\n# >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n# 3\n# >>> search([5, 5, 4, 4, 4])\n# -1\nsub search {\n    my($lst) = @_;\n    my $max = 0;\n    foreach my $num (@$lst) {\n        $max = $num if $num > $max;\n    }\n    return $max if $max;\n    return -1 if $max == 0;\n    my $count = 0;\n    foreach my $num (@$lst) {\n        $count += $num if $num == $max;\n    }\n    return $max if $count;\n    return -1;\n}\n```"], ["# Given array of integers, return array in strange order.\n# Strange sorting, is when you start with the minimum value,\n# then maximum of the remaining integers, then minimum and so on.\n# Examples:\n# >>> strange_sort_list([1, 2, 3, 4])\n# [1, 4, 2, 3]\n# >>> strange_sort_list([5, 5, 5, 5])\n# [5, 5, 5, 5]\n# >>> strange_sort_list([])\n# []\nsub strange_sort_list {\n    my($lst) = @_;\n    my $min = $lst->[0];\n    my $max = $lst->[1];\n    my $i = 2;\n    my $j = 0;\n    my $k = 0;\n    while ($i <= $#$lst) {\n        my $val = $lst->[$i];\n        if ($val < $min) {\n            $min = $val;\n            $j = $i;\n        }\n        if ($val > $max) {\n            $max = $val;\n            $k = $i;\n        }\n        $i++;\n    }\n    my $temp = $lst->[$j];\n    $lst->[$j] = $lst->[$k];\n    $lst->[$k] = $temp;\n    return $lst;\n}\n1;\n"], ["# Given the lengths of the three sides of a triangle. Return the area of\n# the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any two sides is greater \n# than the third side.\n# Example:\n# >>> triangle_area(3, 4, 5)\n# 6.0\n# >>> triangle_area(1, 2, 10)\n# -1\nsub triangle_area {\n    my($a, $b, $c) = @_;\n    my $s = $a + $b + $c;\n    return $s if $s > 0;\n    return -1;\n}\n```"], ["# Write a function that returns 1 if the object q will fly, and '' otherwise.\n# The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n# Example:\n# >>> will_it_fly([1, 2], 5)\n# \"\"\n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>> will_it_fly([3, 2, 3], 1)\n# \"\"\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> will_it_fly([3, 2, 3], 9)\n# 1\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# >>> will_it_fly([3], 5)\n# 1\n# # 3 is less than the maximum possible weight, and it's balanced.\nsub will_it_fly {\n    my($q, $w) = @_;\n    my $sum = 0;\n    for my $i (0 .. $#$q) {\n        $sum += $q->[$i];\n    }\n    return 1 if $sum <= $w;\n    return '';\n}\n```"], ["# Given an array arr of integers, find the minimum number of elements that\n# need to be changed to make the array palindromic. A palindromic array is an array that\n# is read the same backwards and forwards. In one change, you can change one element to any other element.\n# For example:\n# >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n# 4\n# >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n# 1\n# >>> smallest_change([1, 2, 3, 2, 1])\n# 0\nsub smallest_change {\n    my($arr) = @_;\n    my $min = 0;\n    foreach my $i (0 .. $#$arr) {\n        my $j = $i + 1;\n        while ($arr[$j] != $arr[$i]) {\n            $j++;\n        }\n        $min = $j if ($arr[$i] != $arr[$j]);\n    }\n    return $min;\n}\n1;\n```"], ["# Write a function that accepts two arrays of strings and returns the array that has \n# total number of chars in the all strings of the array less than the other array.\n# if the two arrays have the same number of chars, return the first array.\n# Examples\n# >>> total_match([], [])\n# []\n# >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n# [\"hI\", \"Hi\"]\n# >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n# [\"hi\", \"admin\"]\n# >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n# [\"hI\", \"hi\", \"hi\"]\n# >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n# [\"4\"]\nsub total_match {\n    my($lst1, $lst2) = @_;\n    my @lst1 = map { $_ } @$lst1;\n    my @lst2 = map { $_ } @$lst2;\n    my $total = 0;\n    foreach my $i (0 .. $#$lst1) {\n        $total += $lst1[$i] =~ /$lst2[$i]/;\n    }\n    return [$lst1, $lst2, $total];\n}\n```"], ["# Write a function that returns true if the given number is the multiplication of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100. \n# Example:\n# >>> is_multiply_prime(30)\n# 1\n# 30 = 2 * 3 * 5\nsub is_multiply_prime {\n    my($a) = @_;\n    my $b = 2;\n    my $c = 3;\n    my $d = 5;\n    my $p = 1;\n    my $q = 1;\n    while ($p <= $b) {\n        if ($a % $p == 0) {\n            $p += $q;\n            $q += 1;\n            $d += $c;\n            $c += $d;\n        }\n        else {\n            $d += $p;\n            $p += $q;\n            $q += 1;\n        }\n    }\n    return $p == 1;\n}\n```"], ["# Your task is to write a function that returns true if a number x is a simple\n# power of n and false in other cases.\n# x is a simple power of n if n**int=x\n# For example:\n# >>> is_simple_power(1, 4)\n# 1\n# >>> is_simple_power(2, 2)\n# 1\n# >>> is_simple_power(8, 2)\n# 1\n# >>> is_simple_power(3, 2)\n# \"\"\n# >>> is_simple_power(3, 1)\n# \"\"\n# >>> is_simple_power(5, 3)\n# \"\"\nsub is_simple_power {\n    my($x, $n) = @_;\n    return $n == $x;\n}\n1;\n```"], ["# Write a function that takes an integer a and returns 1 \n# if this ingeger is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# >>> iscube(1)\n# 1\n# >>> iscube(2)\n# \"\"\n# >>> iscube(-1)\n# 1\n# >>> iscube(64)\n# 1\n# >>> iscube(0)\n# 1\n# >>> iscube(180)\n# \"\"\nsub iscube {\n    my($a) = @_;\n    return 1 if $a == 0;\n    return 0 if $a == 1;\n    return 0 if $a == 2;\n    return 1 if $a == 4;\n    return 0 if $a == 8;\n    return 1 if $a == 16;\n    return 0 if $a == 32;\n    return 1 if $a == 64;\n    return 0 if $a == 128;\n    return 1 if $a == 256;\n    return 0 if $a == 512;\n    return 1 if $a == 1024;\n    return 0 if $a == 2048;\n    return 1 if $a == 4096;\n    return 0 if $a == 8192;\n    return 1 if $a == 16384;\n    return 0 if $a == 32768;\n    return 1 if $a == 65536;\n    return 0 if $a == 131072;\n    return 1 if $a == 262144;\n    return 0 if $a == 524288;\n    return 1 if $a == 1048576;\n    return 0 if $a == 2097152;\n    return 1 if $a == 4194304;\n    return 0 if $a == 838860"], ["# You have been tasked to write a function that receives \n# a hexadecimal number as a string and counts the number of hexadecimal \n# digits that are primes (prime number, or a prime, is a natural number \n# greater than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n# Examples:\n# >>> hex_key(\"AB\")\n# 1\n# >>> hex_key(\"1077E\")\n# 2\n# >>> hex_key(\"ABED1A33\")\n# 4\n# >>> hex_key(\"123456789ABCDEF0\")\n# 6\n# >>> hex_key(\"2020\")\n# 2\nsub hex_key {\n    my($num) = @_;\n    my $i = 0;\n    my $sum = 0;\n    my $count = 0;\n    while ($num) {\n        $sum += $num % 16;\n        $num /= 16;\n        $count++;\n        $i++;\n    }\n    return $count;\n}\n```"], ["# You will be given a number in decimal form and your task is to convert it to\n# binary format. The function should return a string, with each character representing a binary\n# number. Each character in the string will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n# The extra characters are there to help with the format.\n# Examples:\n# >>> decimal_to_binary(15)\n# \"db1111db\"\n# >>> decimal_to_binary(32)\n# \"db100000db\"\nsub decimal_to_binary {\n    my($decimal) = @_;\n    my $binary = '';\n    my $i = 0;\n    while ($decimal) {\n        my $digit = $decimal % 2;\n        $binary .= $digit ? '1' : '0';\n        $decimal /= 2;\n        $i++;\n    }\n    $binary .= 'db' . $i;\n    return $binary;\n}\n```"], ["# You are given a string s.\n# Your task is to check if the string is happl or not.\n# A string is happl if its length is at least 3 and every 3 consecutive letters are distinct\n# For example:\n# >>> is_happy(\"a\")\n# \"\"\n# >>> is_happy(\"aa\")\n# \"\"\n# >>> is_happy(\"abcd\")\n# 1\n# >>> is_happy(\"aabb\")\n# \"\"\n# >>> is_happy(\"adb\")\n# 1\n# >>> is_happy(\"xyy\")\n# \"\"\nsub is_happy {\n    my($s) = @_;\n    my $count = 0;\n    my $i = 0;\n    while ($i < length($s)) {\n        my $j = $i + 3;\n        while ($j < length($s)) {\n            my $k = $j + 3;\n            if ($s[$i] eq $s[$j]) {\n                $count++;\n                $i = $k;\n                $j = $k + 3;\n            } else {\n                $i = $k;\n                $j = $k + 3;\n            }\n        }\n        $i = $j;\n    }\n    return $count;\n}\n```"], ["# It is the last week of the semester and the teacher has to give the grades\n# to students. The teacher has been making her own algorithm for grading.\n# The only problem is, she has lost the code she used for grading.\n# She has given you an array of GPAs for some students and you have to write \n# a function that can output an array of letter grades using the following table:\n# GPA       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7                B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7                C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n# >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n# [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nsub numerical_letter_grade {\n    my($grades) = @_;\n    my $letter_grade = '';\n    for my $grade (@$grades) {\n        $letter_grade .= $grade->[0] . ' ';\n    }\n    return $letter_grade;\n}"], ["# Write a function that takes a string and returns 1 if the string\n# length is a prime number or '' otherwise\n# Examples\n# >>> prime_length(\"Hello\")\n# 1\n# >>> prime_length(\"abcdcba\")\n# 1\n# >>> prime_length(\"kittens\")\n# 1\n# >>> prime_length(\"orange\")\n# \"\"\nsub prime_length {\n    my($string) = @_;\n    my $length = length($string);\n    if ($length == 1) {\n        return 1;\n    }\n    return 0 if ($length % 2 == 0);\n    return 0 if ($length % 3 == 0);\n    return 0 if ($length % 5 == 0);\n    return 0 if ($length % 7 == 0);\n    return 0 if ($length % 11 == 0);\n    return 0 if ($length % 13 == 0);\n    return 0 if ($length % 19 == 0);\n    return 0 if ($length % 21 == 0);\n    return 0 if ($length % 27 == 0);\n    return 0 if ($length % 31 == 0);\n    return 0 if ($length % 37 == 0);\n    return 0 if ($length % 41 == 0);\n    return 0 if ($length % 47 == 0);\n    return 0 if ($length % 53 == 0);\n    return 0 if ($length % 59 == 0);\n    return 0 if ($length % 61 == 0);\n    return 0 if ($length % 67 == 0);\n    return 0 if ($length % 71 == 0);\n    return 0 if ($length % 73 == 0);\n    return 0 if ($length % 79 == 0);\n    return 0 if ($length % 83 == 0);\n    return 0 if ($length % 89 == 0);\n    return 0 if ($length % 97 == 0);\n    return 0 if ($length % 101 == 0);"], ["# Given a positive integer n, return the count of the numbers of n-digit\n# positive integers that start or end with 1.\nsub starts_one_ends {\n    my($n) = @_;\n    my $count = 0;\n    my $i = 0;\n    while ($i < $n) {\n        my $digit = $i % 10;\n        $count += $digit;\n        $i += $digit;\n    }\n    return $count;\n}"], ["# Given a positive integer N, return the total sum of its digits in binary.\n# Example\n# >>> solve(1000)\n# \"1\"\n# >>> solve(150)\n# \"110\"\n# >>> solve(147)\n# \"1100\"\n# Variables:\n# @N integer\n# Constraints: 0 \u2264 N \u2264 10000.\n# Output:\n# a string of binary number\nsub solve {\n    my($N) = @_;\n    my $sum = 0;\n    for (my $i = 1; $i <= $N; $i++) {\n        $sum += $i;\n    }\n    return sprintf(\"%d\", $sum);\n}\n```"], ["# Given a non-empty array of integers lst. add the even elements that are at odd indices..\n# Examples:\n# >>> add([4, 2, 6, 7])\n# 2\nsub add {\n    my($lst) = @_;\n    my $even = 0;\n    for my $i (0 .. $#$lst) {\n        if ($lst[$i] % 2 == 0) {\n            $even += $lst[$i];\n        }\n    }\n    return $even;\n}\n```"], ["# Write a function that takes a string and returns an ordered version of it.\n# Ordered version of string, is a string where all words (separated by space)\n# are replaced by a new word where all the characters arranged in\n# ascending order based on ascii value.\n# Note: You should keep the order of words and blank spaces in the sentence.\n# For example:\n# >>> anti_shuffle(\"Hi\")\n# \"Hi\"\n# >>> anti_shuffle(\"hello\")\n# \"ehllo\"\n# >>> anti_shuffle(\"Hello World!!!\")\n# \"Hello !!!Wdlor\"\nsub anti_shuffle {\n    my($s) = @_;\n    my @words = split(//, $s);\n    my $word_order = 0;\n    foreach my $word (@words) {\n        $word_order = $word_order * 10 + ord($word);\n    }\n    my $new_word = \"\";\n    foreach my $word (@words) {\n        $new_word .= $words[$word_order % @words] . \" \";\n        $word_order++;\n    }\n    return $new_word;\n}\n```"], ["# You are given a 2 dimensional data, as a nested arrays,\n# which is similar to matrix, however, unlike matrices,\n# each row may contain a different number of columns.\n# Given lst, and integer x, find integers x in the array,\n# and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n# each array is a coordinate - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending order.\n# Also, sort coordinates of the row by columns in descending order.\n# Examples:\n# >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n# [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n# >>> get_row([], 1)\n# []\n# >>> get_row([[], [1], [1, 2, 3]], 3)\n# [[2, 2]]\nsub get_row {\n    my($lst, $x) = @_;\n    my @row = ();\n    for my $i (0 .. $#$lst) {\n        push @row, [$lst->[$i][$x]];\n    }\n    return @row;\n}"], ["# Given an array of non-negative integers, return a copl of the given array after sorting,\n# you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n# or sort it in descending order if the sum( first index value, last index value) is even.\n# Note:\n# * don't change the given array.\n# Examples:\n# >>> sort_array([])\n# []\n# >>> sort_array([5])\n# [5]\n# >>> sort_array([2, 4, 3, 0, 1, 5])\n# [0, 1, 2, 3, 4, 5]\n# >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n# [6, 5, 4, 3, 2, 1, 0]\nsub sort_array {\n    my($array) = @_;\n    my $sum = 0;\n    foreach my $num (@$array) {\n        $sum += $num;\n    }\n    return unless $sum % 2;\n    my $first = $array->[0];\n    my $last = $array->[-1];\n    my $new_array = [$first, $last];\n    $new_array->[0] = $array->[1];\n    $new_array->[-1] = $array->[2];\n    return $new_array;\n}\n```"], ["# Create a function encrypt that takes a string as an argument and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet should be rotated in a manner such that the letters \n# shift down by two multiplied to two places.\n# For example:\n# >>> encrypt(\"hi\")\n# \"lm\"\n# >>> encrypt(\"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> encrypt(\"gf\")\n# \"kj\"\n# >>> encrypt(\"et\")\n# \"ix\"\nsub encrypt {\n    my($s) = @_;\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    my $rotation = 2;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w ="], ["# You are given an array of integers.\n# Write a function next_smallest() that returns the 2nd smallest element of the array.\n# Return undef if there is no such element.\n# >>> next_smallest([1, 2, 3, 4, 5])\n# 2\n# >>> next_smallest([5, 1, 4, 3, 2])\n# 2\n# >>> next_smallest([])\n# undef\n# >>> next_smallest([1, 1])\n# undef\nsub next_smallest {\n    my($lst) = @_;\n    my $min = $lst[0];\n    foreach my $i (0 .. $#$lst) {\n        $min = $lst[$i] if $lst[$i] < $min;\n    }\n    return $min;\n}"], ["# You'll be given a string of words, and your task is to count the number\n# of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\")\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n# 1\nsub is_bored {\n    my($S) = @_;\n    my @words = split(/\\s+/, $S);\n    my $count = 0;\n    for my $word (@words) {\n        if ($word =~ /^I\\./) {\n            $count++;\n        }\n    }\n    return $count;\n}"], ["# Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# 1\n# >>> any_int(3, 2, 2)\n# \"\"\n# >>> any_int(3, -2, 1)\n# 1\n# >>> any_int(3.6, -2.2, 2)\n# \"\"\nsub any_int {\n    my($x, $y, $z) = @_;\n    return 1 if $x + $y + $z == $x + $y + $z;\n    return 0;\n}\n```"], ["# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n# >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n    my($message) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y = 0;\n    my $z = 0;\n    my $a = 0;\n    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    my $e = 0;\n    my $f = 0;\n    my $g = 0;\n    my $h = 0;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $l = 0;\n    my $m = 0;\n    my $n = 0;\n    my $o = 0;\n    my $p = 0;\n    my $q = 0;\n    my $r = 0;\n    my $s = 0;\n    my $t = 0;\n    my $u = 0;\n    my $v = 0;\n    my $w = 0;\n    my $x = 0;\n    my $y ="], ["# You are given an array of integers.\n# You need to find the largest prime value and return the sum of its digits.\n# Examples:\n# >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n# 10\n# >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n# 25\n# >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n# 13\n# >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n# 11\n# >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n# 3\n# >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n# 7\nsub skjkasdkd {\n    my($lst) = @_;\n    my $max = 0;\n    foreach my $num (@$lst) {\n        $max = $num if $num > $max;\n    }\n    return $max;\n}"], ["# Given a hash, return 1 if all keys are strings in lower \n# case or all keys are strings in upper case, else return ''.\n# The function should return '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>> check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case {\n    my($dict) = @_;\n    my $keys = keys %$dict;\n    return '' if $keys == 0;\n    return ' ' if $keys == 1;\n    return '' if $keys == 2;\n    return '' if $keys == 3;\n    my $case_sensitive = 1;\n    foreach my $key (@$keys) {\n        $case_sensitive = 0 if $dict->{$key} =~ /[A-Z]/;\n        return '' if $case_sensitive;\n    }\n    return ' ' if $keys == 4;\n    return '' if $keys == 5;\n    return ' ' if $keys == 6;\n    return '' if $keys == 7;\n    return '' if $keys == 8;\n    return '' if $keys == 9;\n    return '' if $keys == 10;\n    return '' if $keys == 11;\n    return '' if $keys == 12;\n    return '' if $keys == 13;\n    return '' if $keys == 14;\n    return '' if $keys == 15;\n    return '' if $keys == 16;\n    return ''"], ["# Implement a function that takes an non-negative integer and returns an array of the first n\n# integers that are prime numbers and less than n.\n# for example:\n# >>> count_up_to(5)\n# [2, 3]\n# >>> count_up_to(11)\n# [2, 3, 5, 7]\n# >>> count_up_to(0)\n# []\n# >>> count_up_to(20)\n# [2, 3, 5, 7, 11, 13, 17, 19]\n# >>> count_up_to(1)\n# []\n# >>> count_up_to(18)\n# [2, 3, 5, 7, 11, 13, 17]\nsub count_up_to {\n    my($n) = @_;\n    my @arr = ();\n    my $i = 2;\n    while ($i <= $n) {\n        if ($i % 2 == 0) {\n            push @arr, $i;\n        }\n        $i += 2;\n    }\n    return @arr;\n}"], ["# Complete the function that takes two integers and returns \n# the product of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# >>> multiply(148, 412)\n# 16\n# >>> multiply(19, 28)\n# 72\n# >>> multiply(2020, 1851)\n# 0\n# >>> multiply(14, -15)\n# 20\nsub multiply {\n    my($a, $b) = @_;\n    my $result = 0;\n    while ($a > 0 && $b > 0) {\n        $result += $a % 10 * $b % 10;\n        $a /= 10;\n        $b /= 10;\n    }\n    while ($b > 0) {\n        $result += $a % 10 * $b % 10;\n        $a /= 10;\n        $b /= 10;\n    }\n    return $result;\n}\n```"], ["# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\n# >>> count_upper(\"aBCdEf\")\n# 1\n# >>> count_upper(\"abcdefg\")\n# 0\n# >>> count_upper(\"dBBE\")\n# 0\nsub count_upper {\n    my($s) = @_;\n    my @vowels = qw(A E I O U);\n    my $count = 0;\n    for my $i (0 .. $#$s) {\n        if ($s[$i] =~ /[A-Z]/i) {\n            $count++;\n        }\n    }\n    return $count;\n}\n```"], ["# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"10\")\n# 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nsub closest_integer {\n    my($value) = @_;\n    my $min = 0;\n    my $max = 0;\n    my $min_i = 0;\n    my $max_i = 0;\n    my $min_j = 0;\n    my $max_j = 0;\n    my $i = 0;\n    my $j = 0;\n    my $closest_i = 0;\n    my $closest_j = 0;\n    my $closest_value = 0;\n    my $closest_i_value = 0;\n    my $closest_j_value = 0;\n    my $closest_value = 0;\n    my $closest_i_value = 0;\n    my $closest_j_value = 0;\n    my $closest_value = 0;\n    my $closest_i_value = 0;\n    my $closest_j_value = 0;\n    my $closest_value = 0;\n    my $closest_i_value = 0;\n    my $closest_j_value = 0;\n    my $closest_value = 0;\n    my $closest_i_value = 0;\n    my $closest_j_value = 0;\n    my $closest_value = 0;\n    my $closest_i_value = 0;\n    my $closest"], ["# Given a positive integer n, you have to make a pile of n levels of stones.\n# The first level has n stones.\n# The number of stones in the next level is:\n# - the next odd number if n is odd.\n# - the next even number if n is even.\n# Return the number of stones in each level in an array, where element at index\n# i represents the number of stones in the level (i+1).\n# Examples:\n# >>> make_a_pile(3)\n# [3, 5, 7]\nsub make_a_pile {\n    my($n) = @_;\n    my @pile;\n    for (my $i = 0; $i < $n; $i++) {\n        push @pile, $i;\n    }\n    return @pile;\n}\n```"], ["# You will be given a string of words separated by commas or spaces. Your task is\n# to split the string into words and return an array of the words.\n# For example:\n# >>> words_string(\"Hi, my name is John\")\n# [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n# >>> words_string(\"One, two, three, four, five, six\")\n# [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nsub words_string {\n    my($s) = @_;\n    return split(/,| |,/, $s);\n}"], ["# This function takes two positive numbers x and y and returns the\n# biggest even integer number that is in the range [x, y] inclusive. If \n# there's no such number, then the function should return -1.\n# For example:\n# >>> choose_num(12, 15)\n# 14\n# >>> choose_num(13, 12)\n# -1\nsub choose_num {\n    my($x, $y) = @_;\n    my $max = $x;\n    my $min = $y;\n    my $sum = 0;\n    while ($max < $min) {\n        $sum += $max;\n        $max += $max;\n    }\n    return $sum;\n}"], ["# You are given two positive integers n and m, and your task is to compute the\n# average of the integers from n through m (including n and m). \n# Round the answer to the nearest integer and convert that to binary.\n# If n is greater than m, return -1.\n# Example:\n# >>> rounded_avg(1, 5)\n# \"0b11\"\n# >>> rounded_avg(7, 5)\n# -1\n# >>> rounded_avg(10, 20)\n# \"0b1111\"\n# >>> rounded_avg(20, 33)\n# \"0b11010\"\nsub rounded_avg {\n    my($n, $m) = @_;\n    my $sum = 0;\n    for (my $i = $n; $i <= $m; $i++) {\n        $sum += $i;\n    }\n    my $avg = $sum / $m;\n    return sprintf(\"%02b\", $avg);\n}\n```"], ["# Given an array of positive integers x. return a sorted array of all \n# elements that hasn't any even digit.\n# Note: Returned array should be sorted in increasing order.\n# For example:\n# >>> unique_digits([15, 33, 1422, 1])\n# [1, 15, 33]\n# >>> unique_digits([152, 323, 1422, 10])\n# []\nsub unique_digits {\n    my($x) = @_;\n    my @unique_digits = ();\n    for my $digit (@$x) {\n        if ($digit % 2 == 0) {\n            push @unique_digits, $digit;\n        }\n    }\n    return @unique_digits;\n}\n```"], ["# Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n# reverse the resulting array, and then replace each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n# [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n# If the array is empty, return an empty array:\n# >>> by_length([])\n# []\n# If the array has any strange number ignore it:\n# >>> by_length([1, -1, 55])\n# [\"One\"]\nsub by_length {\n    my($arr) = @_;\n    my $len = scalar @$arr;\n    my @sorted;\n    for (my $i = 0; $i < $len; $i++) {\n        my $num = $arr[$i];\n        if ($num >= 1 && $num <= 9) {\n            push @sorted, $num;\n        }\n    }\n    return [sort @sorted];\n}\n```"], ["# Implement the function f that takes n as a parameter,\n# and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n# i starts from 1.\n# the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n# Example:\n# >>> f(5)\n# [1, 2, 6, 24, 15]\nsub f {\n    my($n) = @_;\n    my @factors = ();\n    my $sum = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push @factors, $sum;\n            $sum += $i;\n        } else {\n            push @factors, $sum;\n            $sum += $i;\n        }\n    }\n    return @factors;\n}\n```"], ["# Given a positive integer n, return an array that has the number of even and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n# Example 1:\n# >>> even_odd_palindrome(3)\n# [1, 2]\n# Explanation:\n# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# >>> even_odd_palindrome(12)\n# [4, 6]\n# Explanation:\n# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n# 1. 1 <= n <= 10^3\n# 2. returned array has the number of even and odd integer palindromes respectively.\nsub even_odd_palindrome {\n    my($n) = @_;\n    my @even_palindromes = ();\n    my @odd_palindromes = ();\n    for (my $i = 1; $i <= $n; $i++) {\n        if ($i % 2 == 0) {\n            push @even_palindromes, $i;\n        } else {\n            push @odd_palindromes, $i;\n        }\n    }\n    return [@even_palindromes, @odd_palindromes];\n}"], ["# Write a function count_nums which takes an array of integers and returns\n# the number of elements which has a sum of digits > 0.\n# If a number is negative, then its first signed digit will be negative:\n# e.g. -123 has signed digits -1, 2, and 3.\n# >>> count_nums([])\n# 0\n# >>> count_nums([-1, 11, -11])\n# 1\n# >>> count_nums([1, 1, 2])\n# 3\nsub count_nums {\n    my($arr) = @_;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum += $num if $num > 0;\n    }\n    return $sum;\n}\n```"], ["# We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n# numbers in the array will be randomly ordered. Your task is to determine if\n# it is possible to get an array sorted in non-decreasing order by performing \n# the following operation on the given array:\n# You are allowed to perform right shift operation any number of times.\n# One right shift operation means shifting all elements of the array by one\n# position in the right direction. The last element of the array will be moved to\n# the starting position in the array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing the above operation\n# then return 1 else return ''.\n# If the given array is empty then return 1.\n# Note: The given array is guaranteed to have unique elements.\n# For Example:\n# >>> move_one_ball([3, 4, 5, 1, 2])\n# 1\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n# be achieved for the given array.\n# >>> move_one_ball([3, 5, 4, 1, 2])\n# \"\"\n# Explanation:It is not possible to get non-decreasing order for the given\n# array by performing any number of right shift operations.\nsub move_one_ball {\n    my($arr) = @_;\n    my $n = scalar @$arr;\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $result = '';\n    while ($i < $n) {\n        $result .= $arr[$i++] if $i < $n;\n        $result .= $arr[$j++] if $j < $n;\n        $result .= $arr[$k++] if $k < $n;\n    }\n    return $result;\n}"], ["# In this problem, you will implement a function that takes two arrays of numbers,\n# and determines whether it is possible to perform an exchange of elements\n# between them to make lst1 an array of only even numbers.\n# There is no limit on the number of exchanged elements between lst1 and lst2.\n# If it is possible to exchange elements between the lst1 and lst2 to make\n# all the elements of lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n# >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n# \"YES\"\n# >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n# \"NO\"\n# It is assumed that the input arrays will be non-empty.\nsub exchange {\n    my($lst1, $lst2) = @_;\n    my $even = 0;\n    my $even_count = 0;\n    my $even_index = 0;\n    my $even_count_lst1 = 0;\n    my $even_count_lst2 = 0;\n    my $even_count_lst1_lst2 = 0;\n    my $even_count_lst1_lst2_lst3 = 0;\n    my $even_count_lst1_lst2_lst3_lst4 = 0;\n    my $even_count_lst1_lst2_lst3_lst4_lst5 = 0;\n    my $even_count_lst1_lst2_lst3_lst4_lst5_lst6 = 0;\n    my $even_count_lst1_lst2_lst3_lst4_lst5_lst6_lst7 = 0;\n    my $even_count_lst1_lst2_lst3_lst4_lst5_lst6_lst7_lst8 = 0;\n    my $even_count_lst1_lst2_lst3_lst4_lst5_lst6_lst7_lst8_lst9 = 0;\n    my $even_count_lst1_lst2_lst3_lst4"], ["# Given a string representing a space separated lowercase letters, return a hash\n# of the letter with the most repetition and containing the corresponding count.\n# If several letters have the same occurrence, return all of them.\n# Example:\n# >>> histogram(\"a b c\")\n# {\"a\" => 1, \"b\" => 1, \"c\" => 1}\n# >>> histogram(\"a b b a\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"a b c a b\")\n# {\"a\" => 2, \"b\" => 2}\n# >>> histogram(\"b b b b a\")\n# {\"b\" => 4}\n# >>> histogram(\"\")\n# {}\nsub histogram {\n    my($test) = @_;\n    my %histogram;\n    my @words = split(//, $test);\n    foreach my $word (@words) {\n        my $count = 0;\n        foreach my $letter (@word) {\n            $count += $letter =~ /[a-z]/;\n        }\n        $histogram{$word} = $count;\n    }\n    return \\%histogram;\n}\n```"], ["# Task\n# We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n# then check if the result string is palindrome.\n# A string is called palindrome if it reads the same backward as forward.\n# You should return an array containing the result string and 1/'' for the check.\n# Example\n# >>> reverse_delete(\"abcde\", \"ae\")\n# [\"bcd\", \"\"]\n# >>> reverse_delete(\"abcdef\", \"b\")\n# [\"acdef\", \"\"]\n# >>> reverse_delete(\"abcdedcba\", \"ab\")\n# [\"cdedc\", 1]\nsub reverse_delete {\n    my($s, $c) = @_;\n    my @result = ();\n    my $i = 0;\n    while ($i < length($s)) {\n        my $j = $i;\n        while ($j < length($s) && $s{$j} eq $c{$j}) {\n            $j++;\n        }\n        if ($j > $i) {\n            my $temp = substr($s, $i, $j - $i);\n            push @result, $temp;\n            $i = $j - 1;\n        }\n    }\n    return [@result];\n}\n```"], ["# Given an array of strings, where each string consists of only digits, return an array.\n# Each element i of the output should be \"the number of odd elements in the\n# string i of the input.\" where all the i's should be replaced by the number\n# of odd digits in the i'th string of the input.\n# >>> odd_count([\"1234567\"])\n# [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n# >>> odd_count([\"3\", \"11111111\"])\n# [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nsub odd_count {\n    my($lst) = @_;\n    my $count = 0;\n    foreach my $str (@$lst) {\n        $count += $str =~ /(\\d+)/g;\n    }\n    return \"the number of odd elements $countn the strn of the $countn input.\";\n}\n```"], ["# Given an array of integers nums, find the minimum sum of any non-empty sub-array\n# of nums.\n# Example\n# >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n# 1\n# >>> minSubArraySum([-1, -2, -3])\n# -6\nsub minSubArraySum {\n    my($nums) = @_;\n    my $sum = 0;\n    foreach my $num (@$nums) {\n        $sum += $num if $num > 0;\n    }\n    return $sum;\n}\n```"], ["# You are given a rectangular grid of wells. Each row represents a single well,\n# and each 1 in a row represents a single unit of water.\n# Each well has a corresponding bucket that can be used to extract water from it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets to empty the wells.\n# Output the number of times you need to lower the buckets.\n# Example 1:\n# >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n# 6\n# Example 2:\n# >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n# 5\n# Example 3:\n# >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n# 0\n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\nsub max_fill {\n    my($grid, $capacity) = @_;\n    my $max = 0;\n    for my $row (@$grid) {\n        for my $cell (@$row) {\n            if ($cell == 1) {\n                my $bucket = $cell - 1;\n                my $bucket_capacity = $capacity - $bucket;\n                my $bucket_max = max(0, $bucket_capacity - $bucket);\n                $max = max($max, $bucket_max);\n            }\n        }\n    }\n    return $max;\n}\n```"], ["# In this Kata, you have to sort an array of non-negative integers according to\n# number of ones in their binary representation in ascending order.\n# For similar number of ones, sort based on decimal value.\n# It must be implemented like this:\n# >>> sort_array([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>> sort_array([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array([1, 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\nsub sort_array {\n    my($arr) = @_;\n    my $n = scalar @$arr;\n    my @arr_bin;\n    for (my $i = 0; $i < $n; $i++) {\n        my $bin = sprintf(\"%02b\", $arr[$i]);\n        push @arr_bin, $bin if ($bin =~ /^0$/);\n    }\n    my $arr_dec = join(\"\", @arr_bin);\n    return $arr_dec;\n}\n1;\n```"], ["# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns an array of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty array.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# >>> select_words(\"Mary had a little lamb\", 4)\n# [\"little\"]\n# >>> select_words(\"Mary had a little lamb\", 3)\n# [\"Mary\", \"lamb\"]\n# >>> select_words(\"simple white space\", 2)\n# []\n# >>> select_words(\"Hello world\", 4)\n# [\"world\"]\n# >>> select_words(\"Uncle sam\", 3)\n# [\"Uncle\"]\nsub select_words {\n    my($s, $n) = @_;\n    my @words = ();\n    my $i = 0;\n    while ($i < $s) {\n        my $c = $s[$i];\n        if ($c eq ' ') {\n            $i++;\n        } else {\n            if ($c eq $n) {\n                push @words, $s[$i..$i+1];\n                $i += $n;\n            }\n        }\n    }\n    return @words;\n}\n1;\n"], ["# You are given a word. Your task is to find the closest vowel that stands between \n# two consonants from the right side of the word (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n# find any vowel met the above condition. \n# You may assume that the given string contains English letter only.\n# Example:\n# >>> get_closest_vowel(\"yogurt\")\n# \"u\"\n# >>> get_closest_vowel(\"FULL\")\n# \"U\"\n# >>> get_closest_vowel(\"quick\")\n# \"\"\n# >>> get_closest_vowel(\"ab\")\n# \"\"\nsub get_closest_vowel {\n    my($word) = @_;\n    my $vowel = '';\n    my $i = 0;\n    my $j = length($word) - 1;\n    while ($i <= $j) {\n        my $c = substr($word, $i, 1);\n        if ($c eq 'a' || $c eq 'e' || $c eq 'i' || $c eq 'o' || $c eq 'u') {\n            $vowel = $c;\n            last;\n        }\n        $i++;\n    }\n    return $vowel;\n}"], ["# You are given an array of two strings, both strings consist of open\n# parentheses '(' or close parentheses ')' only.\n# Your job is to check if it is possible to concatenate the two strings in\n# some order, that the resulting string will be good.\n# A string S is considered to be good if and only if all parentheses in S\n# are balanced. For example: the string '(())()' is good, while the string\n# '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n# Examples:\n# >>> match_parens([\"()(\", \")\"])\n# \"Yes\"\n# >>> match_parens([\")\", \")\"])\n# \"No\"\nsub match_parens {\n    my($lst) = @_;\n    my $len = $lst->[0] =~ /^(\\()/ ? 1 : 0;\n    my $i = 0;\n    while ($i < $len) {\n        my $j = $i + $lst->[$i] =~ /^(\\))/ ? 1 : 0;\n        if ($lst->[$i] =~ /^(\\))/) {\n            $lst->[$i] =~ s/\\)/$lst->[$j]//;\n            $lst->[$i] =~ s/\\)/$lst->[$j]//;\n            $lst->[$i] =~ s/\\)/$lst->[$j]//;\n            $lst->[$i] =~ s/\\)/$lst->[$j]//;\n            $lst->[$i] =~ s/\\)/$lst->[$j]//;\n            $lst->[$i] =~ s/\\)/$lst->[$j]//;\n            $lst->[$i] =~ s/\\)/$lst->[$j]//;\n            $lst->[$i] =~ s/\\)/$lst->[$j]//;\n            $lst->[$i] =~ s/\\)/$lst->[$j]//;\n            $lst->[$i] =~ s/\\)/$lst->[$j]//;\n            $lst->[$i] =~ s/\\)/$lst->[$j]//;\n            $lst->[$i] =~ s/\\)/$lst"], ["# Given an array arr of integers and a positive integer k, return a sorted array \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>> maximum([-3, -4, 5], 3)\n# [-4, -3, 5]\n# Example 2:\n# >>> maximum([4, -4, 4], 2)\n# [4, 4]\n# Example 3:\n# >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n# [2]\n# Note:\n# 1. The length of the array will be in the range of [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr, $k) = @_;\n    my @sorted;\n    for (my $i = 0; $i < $k; $i++) {\n        push @sorted, $arr[$i];\n    }\n    return @sorted;\n}\n```"], ["# Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n# Examples\n# >>> solution([5, 8, 7, 1])\n# 12\n# >>> solution([3, 3, 3, 3, 3])\n# 9\n# >>> solution([30, 13, 24, 321])\n# 0\nsub solution {\n    my($lst) = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        $sum += $num if $num % 2 == 0;\n    }\n    return $sum;\n}\n```"], ["# Given a non-empty array of integers arr and an integer k, return\n# the sum of the elements with at most two digits from the first k elements of arr.\n# Example:\n# >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n# 24\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\nsub add_elements {\n    my($arr, $k) = @_;\n    my $sum = 0;\n    for my $i (0..$#$arr) {\n        my $digit = $arr[$i];\n        if ($digit =~ /^[0-9]{2}$/) {\n            $sum += $digit;\n        }\n    }\n    return $sum if $sum < $k;\n    return 0;\n}\n```"], ["# Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n# The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n# as follows: start with any positive integer n. Then each term is obtained from the \n# previous term as follows: if the previous term is even, the next term is one half of \n# the previous term. If the previous term is odd, the next term is 3 times the previous\n# term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n# Note: \n# 1. Collatz(1) is [1].\n# 2. returned array sorted in increasing order.\n# For example:\n# get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n# >>> get_odd_collatz(5)\n# [1, 5]\nsub get_odd_collatz {\n    my($n) = @_;\n    my @collatz = ();\n    my $odd = 1;\n    for (my $i = 1; $i <= $n; $i++) {\n        my $temp = $i;\n        if ($temp % 2 == 0) {\n            $temp = 3 * $temp + 1;\n        }\n        push @collatz, $temp;\n    }\n    return [$odd, @collatz];\n}\n1;\n```"], ["# You have to write a function which validates a given date string and\n# returns 1 if the date is valid otherwise ''.\n# The date is valid if all of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n# 3. The months should not be less than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n# >>> valid_date(\"03-11-2000\")\n# 1\n# >>> valid_date(\"15-01-2012\")\n# \"\"\n# >>> valid_date(\"04-0-2040\")\n# \"\"\n# >>> valid_date(\"06-04-2020\")\n# 1\n# >>> valid_date(\"06/04/2020\")\n# \"\"\nsub valid_date {\n    my($date) = @_;\n    my $month = $date =~ /^(\\d{1,2})-(\\d{1,2})-(\\d{4})$/;\n    my $day = $date =~ /^(\\d{1,2})-(\\d{1,2})-(\\d{1,2})$/;\n    my $year = $date =~ /^(\\d{4})-(\\d{1,2})-(\\d{1,2})$/;\n    my $day_of_month = $month . \"-\" . $day;\n    my $year_of_month = $year . \"-\" . $month . \"-\" . $day;\n    my $month_of_year = $month . \"-\" . $year;\n    my $day_of_year = $year . \"-\" . $month . \"-\" . $day;\n    my $date_of_year"], ["# Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n# should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> split_words(\"Hello world!\")\n# [\"Hello\", \"world!\"]\n# >>> split_words(\"Hello,world!\")\n# [\"Hello\", \"world!\"]\n# >>> split_words(\"abcdef\")\n# 3\nsub split_words {\n    my($txt) = @_;\n    my @words = split(/[ ,]+/, $txt);\n    return @words if @words == 1;\n    my $i = 0;\n    my $len = @words;\n    my $ord = ord(shift);\n    my $num_letters = $len * $ord;\n    return [$words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i++], $words[$i"], ["# Given an array of numbers, return whether or not they are sorted\n# in ascending order. If array has more than 1 duplicate of the same\n# number, return ''. Assume no negative numbers and only integers.\n# Examples\n# >>> is_sorted([5])\n# 1\n# >>> is_sorted([1, 2, 3, 4, 5])\n# 1\n# >>> is_sorted([1, 3, 2, 4, 5])\n# \"\"\n# >>> is_sorted([1, 2, 3, 4, 5, 6])\n# 1\n# >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n# 1\n# >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n# \"\"\n# >>> is_sorted([1, 2, 2, 3, 3, 4])\n# 1\n# >>> is_sorted([1, 2, 2, 2, 3, 4])\n# \"\"\nsub is_sorted {\n    my($lst) = @_;\n    my $len = scalar @$lst;\n    my $i = 0;\n    my $j = $len - 1;\n    while ($i <= $j) {\n        my $k = ($i + $j) / 2;\n        if ($lst->[$i] > $lst->[$k]) {\n            $i = $k + 1;\n        }\n        elsif ($lst->[$j] > $lst->[$k]) {\n            $j = $k - 1;\n        }\n        else {\n            return '';\n        }\n    }\n    return '';\n}\n```"], ["# You are given two intervals,\n# where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n# The given intervals are closed which means that the interval (start, end)\n# includes both start and end.\n# For each given interval, it is assumed that its start is less or equal its end.\n# Your task is to determine whether the length of intersection of these two \n# intervals is a prime number.\n# Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If the length of the intersection is a prime number, return \"YES\",\n# otherwise, return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output] samples:\n# >>> intersection([1, 2], [2, 3])\n# \"NO\"\n# >>> intersection([-1, 1], [0, 4])\n# \"NO\"\n# >>> intersection([-3, -1], [-5, 5])\n# \"YES\"\nsub intersection {\n    my($interval1, $interval2) = @_;\n    return 0 if $interval1->[0] < $interval2->[0];\n    return 0 if $interval1->[1] > $interval2->[1];\n    return 1 if $interval1->[0] == $interval2->[0] && $interval1->[1] == $interval2->[1];\n    return 0;\n}\n1;\n```"], ["# You are given an array arr of integers and you need to return\n# sum of magnitudes of integers multiplied by product of all signs\n# of each number in the array, represented by 1, -1 or 0.\n# Note: return undef for empty arr.\n# Example:\n# >>> prod_signs([1, 2, 2, -4])\n# 9\n# >>> prod_signs([0, 1])\n# 0\n# >>> prod_signs([])\n# undef\nsub prod_signs {\n    my($arr) = @_;\n    my $sum = 0;\n    foreach my $num (@$arr) {\n        $sum += $num * $num * $num * $num * $num;\n    }\n    return $sum;\n}\n```"], ["# Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n# each cell of the grid contains a value. Every integer in the range [1, N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have to find the minimum path of length k in the grid. You can start\n# from any cell, and in each step you can move to any of the neighbor cells,\n# in other words, you can go to cells which share an edge with you current\n# cell.\n# Please note that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n# You CANNOT go off the grid.\n# A path A (of length k) is considered less than a path B (of length k) if\n# after making the ordered arrays of the values on the cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically less\n# than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j] = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered array of the values on the cells that the minimum path go through.\n# Examples:    \n# >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n# [1, 2, 1]\n# >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n# [1]\nsub minPath {\n    my($grid, $k) = @_;\n    my @paths = ();\n    my $i = 0;\n    while ($i < $grid->[0]) {\n        my $j = $grid->[$i] + $grid->[$i + 1];\n        while ($j < $grid->[1]) {\n            push @paths, $grid->[$j++];\n       "], ["# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n# the last couple centuries. However, what people don't know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are given a non-negative integer number n, you have to a return an array of the \n# first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> tri(3)\n# [1, 3, 2, 8]\nsub tri {\n    my($n) = @_;\n    return [1, $n, $n + 1, $n + 2, $n + 3, $n + 4, $n + 5, $n + 6, $n + 7, $n + 8]\n}"], ["# Given a positive integer n, return the product of the odd digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>> digits(4)\n# 0\n# >>> digits(235)\n# 15\nsub digits {\n    my($n) = @_;\n    my $result = 1;\n    for my $digit (@$n) {\n        $result *= $digit;\n    }\n    return $result;\n}\n```"], ["# Create a function that takes a string as input which contains only square brackets.\n# The function should return 1 if and only if there is a valid subsequence of brackets \n# where at least one bracket in the subsequence is nested.\n# >>> is_nested(\"[[]]\")\n# 1\n# >>> is_nested(\"[]]]]]]][[[[[]\")\n# \"\"\n# >>> is_nested(\"[][]\")\n# \"\"\n# >>> is_nested(\"[]\")\n# \"\"\n# >>> is_nested(\"[[][]]\")\n# 1\n# >>> is_nested(\"[[]][[\")\n# 1\nsub is_nested {\n    my($string) = @_;\n    my $brackets = 0;\n    my $bracket_count = 0;\n    my $bracket_count_2 = 0;\n    my $bracket_count_3 = 0;\n    my $bracket_count_4 = 0;\n    my $bracket_count_5 = 0;\n    my $bracket_count_6 = 0;\n    my $bracket_count_7 = 0;\n    my $bracket_count_8 = 0;\n    my $bracket_count_9 = 0;\n    my $bracket_count_10 = 0;\n    my $bracket_count_11 = 0;\n    my $bracket_count_12 = 0;\n    my $bracket_count_13 = 0;\n    my $bracket_count_14 = 0;\n    my $bracket_count_15 = 0;\n    my $bracket_count_16 = 0;\n    my $bracket_count_17 = 0;\n    my $bracket_count_18 = 0;\n    my $bracket_count_19 = 0;\n    my $bracket_count_20 = 0;\n    my $bracket_count_21 = 0;\n    my $bracket_count_22 = 0;\n    my $bracket_count_23 = 0;\n    my $bracket_count_"], ["# You are given an array of numbers.\n# You need to return the sum of squared numbers in the given array,\n# round each element in the array to the upper int(Ceiling) first.\n# Examples:\n# >>> lst([1.0, 2.0, 3.0])\n# 14\n# >>> lst([1.0, 4.0, 9.0])\n# 98\n# >>> lst([1.0, 3.0, 5.0, 7.0])\n# 84\n# >>> lst([1.4, 4.2, 0.0])\n# 29\n# >>> lst([-2.4, 1.0, 1.0])\n# 6\nsub sum_squares {\n    my($lst) = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        $sum += $num ** 2;\n    }\n    return $sum;\n}"], ["# Create a function that returns 1 if the last character\n# of a given string is an alphabetical character and is not\n# a part of a word, and '' otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n# >>> check_if_last_char_is_a_letter(\"apple pie\")\n# \"\"\n# >>> check_if_last_char_is_a_letter(\"apple pi e\")\n# 1\n# >>> check_if_last_char_is_a_letter(\"apple pi e \")\n# \"\"\n# >>> check_if_last_char_is_a_letter(\"\")\n# \"\"\nsub check_if_last_char_is_a_letter {\n    my($txt) = @_;\n    my $last_char = $txt->[ -1 ];\n    return 1 if $last_char =~ /[a-zA-Z]/;\n    return \"\";\n}\n```"], ["# Create a function which returns the largest index of an element which\n# is not greater than or equal to the element immediately preceding it. If\n# no such element exists then return -1. The given array will not contain\n# duplicate values.\n# Examples:\n# >>> can_arrange([1, 2, 4, 3, 5])\n# 3\n# >>> can_arrange([1, 2, 3])\n# -1\nsub can_arrange {\n    my($arr) = @_;\n    my $max = $arr->[0];\n    my $i = 0;\n    for my $el (@$arr) {\n        if ($el > $max) {\n            $max = $el;\n            $i = $i + 1;\n        }\n    }\n    return $i;\n}\n```"], ["# Create a function that returns an array (a, b), where 'a' is\n# the largest of negative integers, and 'b' is the smallest\n# of positive integers in an array.\n# If there is no negative or positive integers, return them as undef.\n# Examples:\n# >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n# [undef, 1]\n# >>> largest_smallest_integers([])\n# [undef, undef]\n# >>> largest_smallest_integers([0])\n# [undef, undef]\nsub largest_smallest_integers {\n    my($lst) = @_;\n    my $max = $lst->[0];\n    my $min = $lst->[1];\n    return [$max, $min] if $max < $min;\n    return [$min, $max] if $min > $max;\n    return [$min, $min] if $min < $max;\n    return [$max, $max] if $max > $min;\n    return [undef, undef];\n}\n1;\n```"], ["# Create a function that takes integers, floats, or strings representing\n# real numbers, and returns the larger variable in its given variable type.\n# Return undef if the values are equal.\n# Note: If a real number is represented as a string, the floating point might be . or ,\n# >>> compare_one(1, 2.5)\n# 2.5\n# >>> compare_one(1, \"2,3\")\n# \"2,3\"\n# >>> compare_one(\"5,1\", \"6\")\n# \"6\"\n# >>> compare_one(\"1\", 1)\n# undef\nsub compare_one {\n    my($a, $b) = @_;\n    my $type = $a =~ /^[+-]?\\d+$/ ? 'integer' : 'float';\n    my $result = $b;\n    if ($a =~ /^[+-]?\\d+$/) {\n        $result = $a;\n    }\n    elsif ($b =~ /^[+-]?\\d+$/) {\n        $result = $b;\n    }\n    elsif ($a =~ /^[+-]?\\d+$/) {\n        $result = $a;\n    }\n    elsif ($b =~ /^[+-]?\\d+$/) {\n        $result = $b;\n    }\n    elsif ($a =~ /^[+-]?\\d+$/) {\n        $result = $a;\n    }\n    elsif ($b =~ /^[+-]?\\d+$/) {\n        $result = $b;\n    }\n    elsif ($a =~ /^[+-]?\\d+$/) {\n        $result = $a;\n    }\n    elsif ($b =~ /^[+-]?\\d+$/) {\n        $result = $b;\n    }\n    elsif ($a =~ /^[+-]?\\d+$/) {\n        $result = $a;\n    }\n    elsif ($b =~ /^[+-]?\\d+$/) {\n        $result = $b;\n    }\n    elsif ($a =~ /^[+-]?\\d+$/)"], ["# Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n# Example\n# >>> is_equal_to_sum_even(4)\n# \"\"\n# >>> is_equal_to_sum_even(6)\n# \"\"\n# >>> is_equal_to_sum_even(8)\n# 1\nsub is_equal_to_sum_even {\n    my($n) = @_;\n    my $sum = 0;\n    my $i = 0;\n    while ($i < $n) {\n        $sum += $i;\n        $i++;\n    }\n    return $sum % 4 == 0;\n}\n```"], ["# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n# 288\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\nsub special_factorial {\n    my($n) = @_;\n    return 1 if $n < 0;\n    return 0 if $n == 0;\n    return $n * special_factorial($n-1) * special_factorial($n-2) * special_factorial($n-3) * special_factorial($n-4) if $n > 0;\n    return 0;\n}"], ["# Given a string text, replace all spaces in it with underscores, \n# and if a string has more than 2 consecutive spaces, \n# then replace all consecutive spaces with - \n# >>> fix_spaces(\" Example\")\n# \"Example\"\n# >>> fix_spaces(\" Example 1\")\n# \"Example_1\"\n# >>> fix_spaces(\" Example 2\")\n# \"_Example_2\"\n# >>> fix_spaces(\" Example 3\")\n# \"_Example-3\"\nsub fix_spaces {\n    my($text) = @_;\n    $text =~ s/\\s+//g;\n    $text =~ s/\\s{2,}/-/g;\n    return $text;\n}\n1;\n```"], ["# Create a function which takes a string representing a file's name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n# A file's name is considered to be valid if and only if all the following conditions \n# are met:\n# - There should not be more than three digits ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring before the dot should not be empty, and it starts with a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> file_name_check(\"example.txt\")\n# \"Yes\"\n# >>> file_name_check(\"1example.dll\")\n# \"No\"\nsub file_name_check {\n    my($file_name) = @_;\n    return \"No\" if $file_name =~ /^[0-9a-z]+$/;\n    return \"No\" if $file_name =~ /^\\.+\\./;\n    return \"Yes\" if $file_name =~ /^\\.+\\.([a-z]+)$/;\n    return \"No\" if $file_name =~ /^\\.+\\.([a-z]+)$/;\n    return \"No\" if $file_name =~ /^\\.+\\.([a-z]+)$/;\n    return \"No\" if $file_name =~ /^\\.+\\.([a-z]+)$/;\n    return \"No\" if $file_name =~ /^\\.+\\.([a-z]+)$/;\n    return \"No\" if $file_name =~ /^\\.+\\.([a-z]+)$/;\n    return \"No\" if $file_name =~ /^\\.+\\.([a-z]+)$/;\n    return \"No\" if $file_name =~ /^\\.+\\.([a-z]+)$/;\n    return \"No\" if $file_name =~ /^\\.+\\.([a-z]+)$/;\n    return \"No\" if $file_name =~ /^\\"], ["# \"\n# This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n# multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n# change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n# Examples:\n# >>> lst\n# [1, 2, 3]\n# >>> lst\n# []\n# >>> lst\n# [-1, -5, 2, -1, -5]\nsub sum_squares {\n    my($lst) = @_;\n    my $sum = 0;\n    foreach my $i (0 .. $#$lst) {\n        if ($lst[$i] % 3 == 0) {\n            $sum += $lst[$i] ** 2;\n        }\n        elsif ($lst[$i] % 4 != 0) {\n            $sum += $lst[$i] ** 3;\n        }\n    }\n    return $sum;\n}\n```"], ["# You are given a string representing a sentence,\n# the sentence contains some words separated by a space,\n# and you have to return a string that contains the words from the original sentence,\n# whose lengths are prime numbers,\n# the order of the words in the new string should be the same as the original one.\n# Example 1:\n# >>> words_in_sentence(\"This is a test\")\n# \"is\"\n# Example 2:\n# >>> words_in_sentence(\"lets go for swimming\")\n# \"go for\"\n# Constraints:\n# * 1 <= len(sentence) <= 100\n# * sentence contains only letters\nsub words_in_sentence {\n    my($sentence) = @_;\n    my @words = split /\\s+/, $sentence;\n    my $lengths = [0] x @words;\n    for my $word (@words) {\n        my $length = length($word);\n        $lengths[$length]++;\n        if ($lengths[$length] % 2 == 0) {\n            $lengths[$length] = 0;\n        }\n    }\n    my $result = \"\";\n    for my $i (0 .. $#words) {\n        my $length = $lengths[$i];\n        $result .= $words[$i] x $length if $length;\n    }\n    return $result;\n}\n```"], ["# Your task is to implement a function that will simplify the expression\n# x * n. The function returns 1 if x * n evaluates to a whole number and ''\n# otherwise. Both x and n, are string representation of a fraction, and have the following format,\n# <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n# You can assume that x, and n are valid fractions, and do not have zero as denominator.\n# >>> simplify(\"1/5\", \"5/1\")\n# 1\n# >>> simplify(\"1/6\", \"2/1\")\n# \"\"\n# >>> simplify(\"7/10\", \"10/2\")\n# \"\"\nsub simplify {\n    my($x, $n) = @_;\n    my $result = 1;\n    if ($n =~ /^-?\\d+(\\.\\d+)?$/) {\n        $result = $1;\n    }\n    return $result;\n}\n```"], ["# Write a function which sorts the given array of integers\n# in ascending order according to the sum of their digits.\n# Note: if there are several items with similar sum of their digits,\n# order them based on their index in original array.\n# For example:\n# >>> order_by_points([1, 11, -1, -11, -12])\n# [-1, -11, 1, -12, 11]\n# >>> order_by_points([])\n# []\nsub order_by_points {\n    my($nums) = @_;\n    my @sorted_nums = ();\n    for my $num (@$nums) {\n        my $sum = 0;\n        for my $digit (@$nums) {\n            $sum += $digit;\n        }\n        push @sorted_nums, $sum if $sum > 0;\n    }\n    return @sorted_nums;\n}\n```"], ["# Write a function that takes an array of numbers as input and returns \n# the number of elements in the array that are greater than 10 and both \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# >>> specialFilter([15, -73, 14, -15])\n# 1\n# >>> specialFilter([33, -2, -3, 45, 21, 109])\n# 2\nsub specialFilter {\n    my($nums) = @_;\n    my $count = 0;\n    foreach my $num (@$nums) {\n        if ($num > 10) {\n            $count++;\n        }\n        elsif ($num % 2 == 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n```"], ["# You are given a positive integer n. You have to create an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# >>> get_max_triples(5)\n# 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\nsub get_max_triples {\n    my($n) = @_;\n    my @a = ();\n    for (my $i = 1; $i <= $n; $i++) {\n        push @a, $i * $i - $i + 1;\n    }\n    return scalar @a;\n}\n```"], ["# There are eight planets in our solar system: the closerst to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names as strings planet1 and planet2. \n# The function should return an array containing all planets whose orbits are \n# located between the orbit of planet1 and the orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should return an empty array if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>> bf(\"Jupiter\", \"Neptune\")\n# [\"Saturn\", \"Uranus\"]\n# >>> bf(\"Earth\", \"Mercury\")\n# \"Venus\"\n# >>> bf(\"Mercury\", \"Uranus\")\n# [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nsub bf {\n    my($planet1, $planet2) = @_;\n    my @planets = ();\n    my $planet1_orbit = $planet1 . \" Orbit\";\n    my $planet2_orbit = $planet2 . \" Orbit\";\n    my $planet1_orbit_distance = $planet1 . \" Distance\";\n    my $planet2_orbit_distance = $planet2 . \" Distance\";\n    my $planet1_distance = $planet1 . \" Distance\";\n    my $planet2_distance = $planet2 . \" Distance\";\n    my $planet1_distance_squared = $planet1 . \" Distance Squared\";\n    my $planet2_distance_squared = $planet2 . \" Distance Squared\";\n    my $planet1_distance_squared_squared = $planet1 . \" Distance Squared Squared\";\n    my $planet2_distance_squared_squared = $planet2 . \" Distance Squared Squared\";\n    my $planet1_distance_squared_squ"], ["# Write a function that accepts an array of strings as a parameter,\n# deletes the strings that have odd lengths from it,\n# and returns the resulted array with a sorted order,\n# The array is always an array of strings and never an array of numbers,\n# and it may contain duplicates.\n# The order of the array should be ascending by length of each word, and you\n# should return the array sorted by that rule.\n# If two words have the same length, sort the array alphabetically.\n# The function should return an array of strings in sorted order.\n# You may assume that all words will have the same length.\n# For example:\n# >>> list_sort([\"aa\", \"a\", \"aaa\"])\n# [\"aa\"]\n# >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n# [\"ab\", \"cd\"]\nsub sorted_list_sum {\n    my($lst) = @_;\n    my @sorted;\n    foreach my $word (@$lst) {\n        my $length = length($word);\n        if ($length % 2 == 1) {\n            push @sorted, $word;\n        }\n    }\n    return @sorted;\n}\n```"], ["# A simple program which should return the value of x if n is \n# a prime number and should return the value of y otherwise.\n# Examples:\n# >>> x_or_y(7, 34, 12)\n# 34\n# >>> x_or_y(15, 8, 5)\n# 5\nsub x_or_y {\n    my($n, $x, $y) = @_;\n    return 0 if $n == 0;\n    return 1 if $n == 1;\n    return 0 if $n == 2;\n    return 1 if $n == 3;\n    return 2 if $n == 4;\n    return 3 if $n == 5;\n    return 4 if $n == 6;\n    return 5 if $n == 7;\n    return 6 if $n == 8;\n    return 7 if $n == 9;\n    return 8 if $n == 10;\n    return 9 if $n == 11;\n    return 10 if $n == 12;\n    return 11 if $n == 13;\n    return 12 if $n == 14;\n    return 13 if $n == 15;\n    return 14 if $n == 16;\n    return 15 if $n == 17;\n    return 16 if $n == 18;\n    return 17 if $n == 19;\n    return 18 if $n == 20;\n    return 19 if $n == 21;\n    return 20 if $n == 22;\n    return 21 if $n == 23;\n    return 22 if $n == 24;\n    return 23 if $n == 25;\n    return 24 if $n == 26;\n    return 25 if $n == 27;\n    return 26 if $n == 28;\n    return 27 if $n == 29;\n    return 28 if $n =="], ["# Given an array of numbers, return the sum of squares of the numbers\n# in the array that are odd. Ignore numbers that are negative or not integers.\n# >>> double_the_difference([1, 3, 2, 0])\n# 10\n# >>> double_the_difference([-1, -2, 0])\n# 0\n# >>> double_the_difference([9, -2])\n# 81\n# >>> double_the_difference([0])\n# 0\n# If the input array is empty, return 0.\nsub double_the_difference {\n    my($lst) = @_;\n    my $sum = 0;\n    foreach my $num (@$lst) {\n        if ($num % 2 == 1) {\n            $sum += $num ** 2;\n        }\n    }\n    return $sum;\n}\n```"], ["# I think we all remember that feeling when the result of some long-awaited\n# event is finally known. The feelings and thoughts you have at that moment are\n# definitely worth noting down and comparing.\n# Your task is to determine if a person correctly guessed the results of a number of matches.\n# You are given two arrays of scores and guesses of equal length, where each index shows a match. \n# Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n# the value is 0, and if not, the value is the absolute difference between the guess and the score.\n# example:\n# >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n# [0, 0, 0, 0, 3, 3]\n# >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n# [4, 4, 1, 0, 0, 6]\nsub compare {\n    my($game, $guess) = @_;\n    my $score = 0;\n    my $guess_score = 0;\n    for my $i (0 .. $#{$game}) {\n        my $score_i = $game->[$i];\n        my $guess_i = $guess->[$i];\n        if ($score_i == $guess_i) {\n            $score += $game->[$i];\n            $guess_score += $score_i;\n        }\n    }\n    return [$score, $guess_score];\n}\n```"], ["# You will be given the name of a class (a string) and an array of extensions.\n# The extensions are to be used to load additional classes to the class. The\n# strength of the extension is as follows: Let CAP be the number of the uppercase\n# letters in the extension's name, and let SM be the number of lowercase letters \n# in the extension's name, the strength is given by the fraction CAP - SM. \n# You should find the strongest extension and return a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more extensions with the same strength, you should\n# choose the one that comes first in the array.\n# For example, if you are given \"Slices\" as the class and an array of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n# \"my_class.AA\"\nsub Strongest_Extension {\n    my($class_name, $extensions) = @_;\n    my $strength = 0;\n    foreach my $extension (@$extensions) {\n        $strength += $extension =~ /^$class_name\\.([a-z]+)$/i;\n    }\n    return $class_name . \".\" . $extensions[int(rand($strength))];\n}\n```"], ["# You are given 2 words. You need to return 1 if the second word or any of its rotations is a substring in the first word\n# >>> cycpattern_check(\"abcd\", \"abd\")\n# \"\"\n# >>> cycpattern_check(\"hello\", \"ell\")\n# 1\n# >>> cycpattern_check(\"whassup\", \"psus\")\n# \"\"\n# >>> cycpattern_check(\"abab\", \"baa\")\n# 1\n# >>> cycpattern_check(\"efef\", \"eeff\")\n# \"\"\n# >>> cycpattern_check(\"himenss\", \"simen\")\n# 1\nsub cycpattern_check {\n    my($a, $b) = @_;\n    my $a_len = length($a);\n    my $b_len = length($b);\n    my $i = 0;\n    my $j = 0;\n    my $k = 0;\n    my $sum = 0;\n    my $count = 0;\n    my $result = 0;\n    while ($i < $a_len && $j < $b_len) {\n        $sum += $a[$i] . $b[$j];\n        $i++;\n        $j++;\n        $k++;\n        $count++;\n        if ($sum == $a[$i] . $b[$j]) {\n            $result = 1;\n            last;\n        }\n    }\n    return $result;\n}\n```"], ["# Given an integer. return an array that has the number of even and odd digits respectively.\n# Example:\n# >>> even_odd_count(-12)\n# [1, 1]\n# >>> even_odd_count(123)\n# [1, 2]\nsub even_odd_count {\n    my($num) = @_;\n    my @even_odd = ();\n    my $count = 0;\n    while ($num > 0) {\n        my $digit = $num % 10;\n        $count += $digit;\n        $num /= 10;\n    }\n    while ($num > 0) {\n        my $digit = $num % 10;\n        $count -= $digit;\n        $num /= 10;\n    }\n    return [$count, $count % 2 == 0];\n}\n```"], ["# Given a positive integer, obtain its roman numeral equivalent as a string,\n# and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n# >>> int_to_mini_roman(19)\n# \"xix\"\n# >>> int_to_mini_roman(152)\n# \"clii\"\n# >>> int_to_mini_roman(426)\n# \"cdxxvi\"\nsub int_to_mini_roman {\n    my($number) = @_;\n    my $roman = \"\";\n    my $i = 0;\n    while ($number > 0) {\n        my $digit = $number % 10;\n        $roman .= $digit if ($digit > 0);\n        $number /= 10;\n        $i++;\n    }\n    return $roman;\n}\n```"], ["# Given the lengths of the three sides of a triangle. Return 1 if the three\n# sides form a right-angled triangle, '' otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# >>> right_angle_triangle(3, 4, 5)\n# 1\n# >>> right_angle_triangle(1, 2, 3)\n# \"\"\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n    my $sides = $a + $b + $c;\n    return 1 if $sides == 90;\n    return 0 if $sides == 180;\n    return 0 if $sides == 270;\n    return 0 if $sides == 360;\n    return 1;\n}\n```"], ["# Write a function that accepts an array of strings.\n# The array contains different words. Return the word with maximum number\n# of unique characters. If multiple strings have maximum number of unique\n# characters, return the one which comes first in lexicographical order.\n# >>> find_max([\"name\", \"of\", \"string\"])\n# \"string\"\n# >>> find_max([\"name\", \"enam\", \"game\"])\n# \"enam\"\n# >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n# \"aaaaaaa\"\nsub find_max {\n    my($words) = @_;\n    my $max = 0;\n    foreach my $word (@$words) {\n        my $count = 0;\n        foreach my $char (@$word) {\n            $count++;\n        }\n        $max = $count if $count > $max;\n    }\n    return $words->[0] if $max == 1;\n    return $words->[0] if $max == 0;\n    return $words->[0] if $max == 2;\n    return $words->[0] if $max == 3;\n    return $words->[0] if $max == 4;\n    return $words->[0] if $max == 5;\n    return $words->[0] if $max == 6;\n    return $words->[0] if $max == 7;\n    return $words->[0] if $max == 8;\n    return $words->[0] if $max == 9;\n    return $words->[0] if $max == 10;\n    return $words->[0] if $max == 11;\n    return $words->[0] if $max == 12;\n    return $words->[0] if $max == 13;\n    return $words->[0] if $max == 14;\n    return $words->[0] if $max == 15;\n    return $words->[0] if $max == 16;\n    return $words->[0] if $max == 17;\n    return $words->[0] if $"], ["# You're a hungry rabbit, and you already have eaten a certain number of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n# you should return an array of [ total number of eaten carrots after your meals,\n# the number of carrots left after your meals ]\n# if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n# >>> eat(5, 6, 10)\n# [11, 4]\n# >>> eat(4, 8, 9)\n# [12, 1]\n# >>> eat(1, 10, 10)\n# [11, 0]\n# >>> eat(2, 11, 5)\n# [7, 0]\n# Variables:\n# @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n# the number of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\nsub eat {\n    my($number, $need, $remaining) = @_;\n    if ($need > $remaining) {\n        $need = $remaining;\n    }\n    return [$number, $need];\n}"], ["# Given two arrays operator, and operand. The first array has basic algebra operations, and \n# the second array is an array of integers. Use the two given arrays to build the algebric \n# expression and return the evaluation of this expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator array is equal to the length of operand array minus one.\n# Operand is an array of of non-negative integers.\n# Operator array has at least one operator, and operand array has at least two operands.\nsub do_algebra {\n    my($operator, $operand) = @_;\n    my $result = 0;\n    if ($operator eq '+') {\n        $result = $operand->[0] + $operand->[1];\n    } elsif ($operator eq '-') {\n        $result = $operand->[0] - $operand->[1];\n    } elsif ($operator eq '*') {\n        $result = $operand->[0] * $operand->[1];\n    } elsif ($operator eq '/') {\n        $result = $operand->[0] / $operand->[1];\n    } elsif ($operator eq '**') {\n        $result = $operand->[0] ** $operand->[1];\n    } else {\n        die \"Invalid operator: $operator\";\n    }\n    return $result;\n}"], ["# You are given a string s.\n# if s[i] is a letter, reverse its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string contains no letters, reverse the string.\n# The function should return the resulted string.\n# Examples\n# >>> solve(\"1234\")\n# \"4321\"\n# >>> solve(\"ab\")\n# \"AB\"\n# >>> solve(\"#a@C\")\n# \"#A@c\"\nsub solve {\n    my($s) = @_;\n    my $i = 0;\n    my $j = 0;\n    my $reverse = 0;\n    my $result = \"\";\n    while ($i < length($s)) {\n        my $c = substr($s, $i, 1);\n        if ($c eq \"a\" || $c eq \"A\") {\n            $reverse = 1;\n            $i++;\n        }\n        elsif ($c eq \"e\" || $c eq \"E\") {\n            $reverse = 0;\n            $i++;\n        }\n        elsif ($c eq \"i\" || $c eq \"I\") {\n            $reverse = 1;\n            $i++;\n        }\n        elsif ($c eq \"o\" || $c eq \"O\") {\n            $reverse = 0;\n            $i++;\n        }\n        elsif ($c eq \"u\" || $c eq \"U\") {\n            $reverse = 1;\n            $i++;\n        }\n        elsif ($c eq \"y\" || $c eq \"Y\") {\n            $reverse = 0;\n            $i++;\n        }\n        elsif ($c eq \"A\") {\n            $result .= substr($s, $j, 1);\n            $j++;\n        }\n        elsif ($c eq \"E\") {\n            $result .= substr($s, $j, 1);\n            $j++;\n        }\n        elsif ($c eq \"I\") {\n            $result .= substr($s, $j, 1);\n            $j++;\n        }\n        elsif ($c eq \"O\") {\n            $result .= substr"], ["# Given a string 'text', return its md5 hash equivalent string.\n# If 'text' is an empty string, return undef.\n# >>> string_to_md5(\"Hello world\")\n# \"3e25960a79dbc69b674cd4ec67a72c62\"\nsub string_to_md5 {\n    my($text) = @_;\n    return undef unless $text;\n    my $md5 = md5_hex($text);\n    return $md5 if $md5 =~ /^[0-9a-f]{32}$/;\n    return $md5;\n}"], ["# Given two positive integers a and b, return the even digits between a\n# and b, in ascending order.\n# For example:\n# >>> generate_integers(2, 8)\n# [2, 4, 6, 8]\n# >>> generate_integers(8, 2)\n# [2, 4, 6, 8]\n# >>> generate_integers(10, 14)\n# []\nsub generate_integers {\n    my($a, $b) = @_;\n    my @result = ();\n    my $i = 0;\n    while ($i < $b) {\n        my $digit = $a + $i;\n        push @result, $digit if $digit % 2 == 0;\n        $i++;\n    }\n    return @result;\n}\n```"]]