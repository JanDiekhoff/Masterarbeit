[["# Check if in given list of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> has_close_elements(c(1.0, 2.0, 3.0), 0.5)\n# FALSE\n# >>> has_close_elements(c(1.0, 2.8, 3.0, 4.0, 5.0, 2.0), 0.3)\n# TRUE\nhas_close_elements <- function(numbers, threshold) {\n  if (length(numbers) == 0) return(FALSE)\n  if (length(numbers) == 1) return(TRUE)\n  if (length(numbers) == 2) {\n    if (all(numbers[1] > threshold) & all(numbers[2] > threshold)) return(TRUE)\n    if (all(numbers[1] < threshold) & all(numbers[2] < threshold)) return(TRUE)\n  }\n  return(FALSE)\n}"], ["# Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n# separate those group into separate strings and return the list of those.\n# Separate groups are balanced (each open brace is properly closed) and not nested within each other\n# Ignore any spaces in the input string.\n# >>> separate_paren_groups('( ) (( )) (( )( ))')\n# c('()', '(())', '(()())')\nseparate_paren_groups <- function(paren_string) {\n  paren_string <- gsub(\"\\\\(\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\)\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\[\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\]\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\(\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\)\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\[\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\]\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\(\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\)\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\[\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\]\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\(\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\)\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\[\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\]\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\(\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\)\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\[\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\]\", \"\", paren_string)\n  paren_string <- gsub(\"\\\\(\", \"\", paren_string)\n "], ["# Given a positive floating point number, it can be decomposed into\n# and integer part (largest integer smaller than given number) and decimals\n# (leftover part always smaller than 1).\n# Return the decimal part of the number.\n# >>> truncate_number(3.5)\n# 0.5\ntruncate_number <- function(number) {\n  if (is.numeric(number)) {\n    number_decimal <- floor(number)\n    number_integer <- ceiling(number)\n    return(number_decimal)\n  } else {\n    return(number)\n  }\n}"], ["# You're given a list of deposit and withdrawal operations on a bank account that starts with\n# zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n# at that point function should return TRUE. Otherwise it should return FALSE.\n# >>> below_zero(c(1, 2, 3))\n# FALSE\n# >>> below_zero(c(1, 2, -4, 5))\n# TRUE\nbelow_zero <- function(operations) {\n  if (length(operations) == 0) {\n    return(FALSE)\n  }\n  if (any(operations[1] == 0)) {\n    return(TRUE)\n  }\n  return(FALSE)\n}"], ["# For a given list of input numbers, calculate Mean Absolute Deviation\n# around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute difference between each\n# element and a centerpoint (mean in this case):\n# MAD = average | x - x_mean |\n# >>> mean_absolute_deviation(c(1.0, 2.0, 3.0, 4.0))\n# 1.0\nmean_absolute_deviation <- function(numbers) {\n  mean(abs(numbers - mean(numbers)))\n}"], ["# Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n# >>> intersperse(c(), 4)\n# c()\n# >>> intersperse(c(1, 2, 3), 4)\n# c(1, 4, 2, 4, 3)\nintersperse <- function(numbers, delimeter) {\n  if (length(numbers) == 0) {\n    return(c())\n  }\n  if (length(numbers) == 1) {\n    return(c(numbers))\n  }\n  if (length(numbers) == 2) {\n    return(c(numbers[1], numbers[2]))\n  }\n  if (length(numbers) == 3) {\n    return(c(numbers[1], numbers[2], numbers[3]))\n  }\n  return(c(numbers[1], delimeter, numbers[2], delimeter, numbers[3]))\n}"], ["# Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n# For each of the group, output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting while ((())) has three.\n# >>> parse_nested_parens('(()()) ((())) () ((())()())')\n# c(2, 3, 1, 3)\nparse_nested_parens <- function(paren_string) {\n  paren_string <- gsub(\"\\\\s+\", \"\", paren_string)\n  depth <- 0\n  max_depth <- 0\n  max_nesting <- 0\n  for (i in 1:length(paren_string)) {\n    if (paren_string[i] == \"(\") {\n      depth <- depth + 1\n      max_depth <- max(max_depth, depth)\n    } else if (paren_string[i] == \")\") {\n      depth <- depth - 1\n      max_depth <- max(max_depth, depth)\n    } else if (paren_string[i] == \"(\") {\n      depth <- depth + 1\n      max_nesting <- max(max_nesting, depth)\n    } else if (paren_string[i] == \")\") {\n      depth <- depth - 1\n      max_nesting <- max(max_nesting, depth)\n    } else if (paren_string[i] == \"(\") {\n      depth <- depth + 1\n      max_nesting <- max(max_nesting, depth)\n    } else if (paren_string[i] == \")\") {\n      depth <- depth - 1\n      max_nesting <- max(max_nesting, depth)\n    } else if (paren_string[i] == \"(\") {\n      depth <- depth + 1\n      max_nesting <- max(max_nesting, depth)\n    } else if (paren_string[i] == \")\") {\n      depth <- depth - 1\n      max_nesting <- max(max_nesting, depth)\n    } else if (paren_string[i] == \""], ["# Filter an input list of strings only for ones that contain given substring\n# >>> filter_by_substring(c(), 'a')\n# c()\n# >>> filter_by_substring(c('abc', 'bacd', 'cde', 'array'), 'a')\n# c('abc', 'bacd', 'array')\nfilter_by_substring <- function(strings, substring) {\n  strings <- as.character(strings)\n  strings <- str_replace(strings, substring, '', 'g')\n  strings <- str_replace(strings, ' ', '', 'g')\n  strings\n}"], ["# For a given list of integers, return a list consisting of a sum and a product of all the integers in a list.\n# Empty sum should be equal to 0 and empty product should be equal to 1.\n# >>> sum_product(c())\n# c(0, 1)\n# >>> sum_product(c(1, 2, 3, 4))\n# c(10, 24)\nsum_product <- function(numbers) {\n  sum <- 0\n  product <- 1\n  for (i in 1:length(numbers)) {\n    sum <- sum + numbers[i]\n    product <- product * numbers[i]\n  }\n  return(list(sum=sum, product=product))\n}"], ["# From a given list of integers, generate a list of rolling maximum element found until given moment\n# in the sequence.\n# >>> rolling_max(c(1, 2, 3, 2, 3, 4, 2))\n# c(1, 2, 3, 3, 3, 4, 4)\nrolling_max <- function(numbers) {\n  max <- c()\n  for (i in seq_along(numbers)) {\n    max <- c(max, numbers[i])\n  }\n  max\n}"], ["# Find the shortest palindrome that begins with a supplied string.\n# Algorithm idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n# - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n# >>> make_palindrome('')\n# ''\n# >>> make_palindrome('cat')\n# 'catac'\n# >>> make_palindrome('cata')\n# 'catac'\nmake_palindrome <- function(string) {\n  palindrome <- \"\"\n  prefix <- \"\"\n  suffix <- \"\"\n  for (i in 1:length(string)) {\n    if (i > 1) {\n      if (string[i] == string[i - 1]) {\n        prefix <- prefix\n      } else {\n        suffix <- suffix\n      }\n    }\n    if (string[i] == string[i + 1]) {\n      prefix <- prefix\n    } else {\n      suffix <- suffix\n    }\n  }\n  palindrome <- prefix\n  palindrome <- palindrome[1:length(palindrome) - 1]\n  palindrome <- palindrome[1:length(palindrome) - 1]\n  palindrome <- palindrome[1:length(palindrome) - 1]\n  palindrome\n}"], ["# Input are two strings a and b consisting only of 1s and 0s.\n# Perform binary XOR on these inputs and return result also as a string.\n# >>> string_xor('010', '110')\n# '100'\nstring_xor <- function(a, b) {\n  return(unlist(strsplit(a, ''), use.names = FALSE)[!is.na(unlist(strsplit(b, ''), use.names = FALSE))] - unlist(strsplit(b, ''), use.names = FALSE)[!is.na(unlist(strsplit(a, ''), use.names = FALSE))])\n}"], ["# Out of list of strings, return the longest one. Return the first one in case of multiple\n# strings of the same length. Return NULL in case the input list is empty.\n# >>> longest(c())\n# NULL\n# >>> longest(c('a', 'b', 'c'))\n# 'a'\n# >>> longest(c('a', 'bb', 'ccc'))\n# 'ccc'\nlongest <- function(strings) {\n  if (length(strings) == 0) {\n    return(NULL)\n  }\n  maxlen <- 0\n  for (i in 1:length(strings)) {\n    if (maxlen < length(strings[i])) {\n      maxlen <- length(strings[i])\n    }\n  }\n  maxlen\n}"], ["# Return a greatest common divisor of two integers a and b\n# >>> greatest_common_divisor(3, 5)\n# 1\n# >>> greatest_common_divisor(25, 15)\n# 5\ngreatest_common_divisor <- function(a, b) {\n  if (b == 0) {\n    return a\n  } else {\n    return greatest_common_divisor(b, a %/% b)\n  }\n}"], ["# Return list of all prefixes from shortest to longest of the input string\n# >>> all_prefixes('abc')\n# c('a', 'ab', 'abc')\nall_prefixes <- function(string) {\n  prefixes <- list()\n  for (i in 1:length(string)) {\n    prefixes[[i]] <- string[1:i]\n  }\n  return(prefixes)\n}"], ["# Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n# >>> string_sequence(0)\n# '0'\n# >>> string_sequence(5)\n# '0 1 2 3 4 5'\nstring_sequence <- function(n) {\n  n_str <- paste(rep(0, n), collapse = \" \")\n  n_str\n} ```\n\nExplanation:\n\n- We start with an empty string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to the beginning of the string.\n- We add a space character to"], ["# Given a string, find out how many distinct characters (regardless of case) does it consist of\n# >>> count_distinct_characters('xyzXYZ')\n# 3\n# >>> count_distinct_characters('Jerry')\n# 4\ncount_distinct_characters <- function(string) {\n  count <- 0\n  for (i in 1:length(string)) {\n    if (string[i] == string[i - 1]) {\n      count <- count + 1\n    } else {\n      count <- count + 0\n    }\n  }\n  return(count)\n}"], ["# Input to this function is a string representing musical notes in a special ASCII format.\n# Your task is to parse this string and return list of integers corresponding to how many beats does each\n# not last.\n# Here is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|' - quater note, lasts one beat\n# >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n# c(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\nparse_music <- function(music_string) {\n  music_string <- strsplit(music_string, split = \"|\")\n  music_string <- lapply(music_string, function(x) {\n    if (x[1] == \"o\") {\n      return(c(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4))\n    } else {\n      return(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))\n    }\n  })\n  return(music_string)\n}"], ["# Find how many times a given substring can be found in the original string. Count overlaping cases.\n# >>> how_many_times('', 'a')\n# 0\n# >>> how_many_times('aaa', 'a')\n# 3\n# >>> how_many_times('aaaa', 'aa')\n# 3\nhow_many_times <- function(string, substring) {\n  n <- length(string)\n  count <- 0\n  for (i in 1:n) {\n    if (i == 1) {\n      count <- count + 1\n    } else {\n      if (i %in% substring) {\n        count <- count + 1\n      }\n    }\n  }\n  count\n}"], ["# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n# Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to largest\n# >>> sort_numbers('three one five')\n# 'one three five'\nsort_numbers <- function(numbers) {\n  numbers <- strsplit(numbers, split = \"\")[[1]]\n  numbers <- sort(unlist(numbers))\n  return(paste(numbers, collapse = \" \"))\n}"], ["# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\n# >>> find_closest_elements(c(1.0, 2.0, 3.0, 4.0, 5.0, 2.2))\n# c(2.0, 2.2)\n# >>> find_closest_elements(c(1.0, 2.0, 3.0, 4.0, 5.0, 2.0))\n# c(2.0, 2.0)\nfind_closest_elements <- function(numbers) {\n  sorted_numbers <- sort(numbers)\n  min_distance <- 10000\n  min_index <- 1\n  for (i in 2:length(sorted_numbers)) {\n    if (sorted_numbers[i] - sorted_numbers[i - 1] < min_distance) {\n      min_distance <- sorted_numbers[i] - sorted_numbers[i - 1]\n      min_index <- i\n    }\n  }\n  return(c(sorted_numbers[min_index], sorted_numbers[min_index - 1]))\n}"], ["# Given list of numbers (of at least two elements), apply a linear transform to that list,\n# such that the smallest number will become 0 and the largest will become 1\n# >>> rescale_to_unit(c(1.0, 2.0, 3.0, 4.0, 5.0))\n# c(0.0, 0.25, 0.5, 0.75, 1.0)\nrescale_to_unit <- function(numbers) {\n  numbers <- c(numbers)\n  min <- min(numbers)\n  max <- max(numbers)\n  rescaled <- c(0, 0, 0, 0, 1)\n  for (i in 1:length(numbers)) {\n    rescaled[i] <- (numbers[i] - min) / (max - min)\n  }\n  rescaled\n}"], ["# Filter given list of any rthon values only for integers\n# >>> filter_integers(list('a', 3.14, 5))\n# c(5)\n# >>> filter_integers(list(1, 2, 3, 'abc', list(), c()))\n# c(1, 2, 3)\nfilter_integers <- function(values) {\n  if (is.numeric(values)) {\n    values\n  } else {\n    values[values %in% c(1, 2, 3)]\n  }\n}"], ["# Return length of given string\n# >>> strlen('')\n# 0\n# >>> strlen('abc')\n# 3\nstrlen <- function(string) {\n  return(length(string))\n} ```\n\nThe `strlen` function takes a string as input and returns its length. The function uses the `length` function from the `stringi` package to calculate the length of the string.\n"], ["# For a given number n, find the largest number that divides n evenly, smaller than n\n# >>> largest_divisor(15)\n# 5\nlargest_divisor <- function(n) {\n  n <- abs(n)\n  if (n < 1) {\n    return(0)\n  } else {\n    return(n / 2)\n  }\n}"], ["# Return list of prime factors of given integer in the order from smallest to largest.\n# Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n# Input number should be equal to the product of all factors\n# >>> factorize(8)\n# c(2, 2, 2)\n# >>> factorize(25)\n# c(5, 5)\n# >>> factorize(70)\n# c(2, 5, 7)\nfactorize <- function(n) {\n  n <- as.integer(n)\n  if (n < 2) {\n    return(list(n))\n  }\n  factors <- c()\n  for (i in 2:n) {\n    if (i % n == 0) {\n      factors <- c(factors, i)\n    }\n  }\n  return(factors)\n}"], ["# From a list of integers, remove all elements that occur more than once.\n# Keep order of elements left the same as in the input.\n# >>> remove_duplicates(c(1, 2, 3, 2, 4))\n# c(1, 3, 4)\nremove_duplicates <- function(numbers) {\n  return(unique(numbers))\n}"], ["# For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n# >>> flip_case('Hello')\n# 'hELLO'\nflip_case <- function(string) {\n  string_lower <- tolower(string)\n  string_upper <- toupper(string_lower)\n  string_lower\n} ```\n\nIn this example, we're using the `flip_case` function to flip the case of a string. The function takes a string as input and returns the flipped string.\n\nYou can also use the `flip_case` function with other functions, such as `tolower` and `toupper`. For example:\n"], ["# Concatenate list of strings into a single string\n# >>> concatenate(c())\n# ''\n# >>> concatenate(c('a', 'b', 'c'))\n# 'abc'\nconcatenate <- function(strings) {\n  paste(strings, collapse = ' ')\n}"], ["# Filter an input list of strings only for ones that start with a given prefix.\n# >>> filter_by_prefix(c(), 'a')\n# c()\n# >>> filter_by_prefix(c('abc', 'bcd', 'cde', 'array'), 'a')\n# c('abc', 'array')\nfilter_by_prefix <- function(strings, prefix) {\n  strings <- strsplit(strings, split = pattern(prefix, perl = TRUE))\n  strings <- strings[strings == prefix]\n  strings\n}"], ["# Return only positive numbers in the list.\n# >>> get_positive(c(-1, 2, -4, 5, 6))\n# c(2, 5, 6)\n# >>> get_positive(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n# c(5, 3, 2, 3, 9, 123, 1)\nget_positive <- function(l) {\n  l <- as.numeric(l)\n  l[l < 0] <- 0\n  l\n}"], ["# Return true if a given number is prime, and false otherwise.\n# >>> is_prime(6)\n# FALSE\n# >>> is_prime(101)\n# TRUE\n# >>> is_prime(11)\n# TRUE\n# >>> is_prime(13441)\n# TRUE\n# >>> is_prime(61)\n# TRUE\n# >>> is_prime(4)\n# FALSE\n# >>> is_prime(1)\n# FALSE\nis_prime <- function(n) {\n  if (n < 2) {\n    return FALSE\n  }\n  for (i in 2:n) {\n    if (n % i == 0) {\n      return FALSE\n    }\n  }\n  return TRUE\n}"], ["# This function takes a list l and returns a list l' such that\n# l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n# to the values of the corresponding indicies of l, but sorted.\n# >>> sort_third(c(1, 2, 3))\n# c(1, 2, 3)\n# >>> sort_third(c(5, 6, 3, 4, 8, 9, 2))\n# c(2, 6, 3, 4, 8, 9, 5)\nsort_third <- function(l) {\n  n <- length(l)\n  n_divisible <- n %/% 3\n  l_sort <- sort(l, decreasing = FALSE)\n  l_sort[n_divisible] <- l[n_divisible]\n  l_sort\n}"], ["# Return sorted unique elements in a list\n# >>> unique(c(5, 3, 5, 2, 3, 3, 9, 0, 123))\n# c(0, 2, 3, 5, 9, 123)\nunique <- function(l) {\n  l <- as.character(l)\n  l <- unique(l)\n  l <- c(l)\n  l <- as.numeric(l)\n  l <- as.character(l)\n  l\n}"], ["# Return maximum element in the list.\n# >>> max_element(c(1, 2, 3))\n# 3\n# >>> max_element(c(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n# 123\nmax_element <- function(l) {\n  max <- l[1]\n  for (i in 2:length(l)) {\n    if (l[i] > max) {\n      max <- l[i]\n    }\n  }\n  max\n}"], ["# Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n# >>> fizz_buzz(50)\n# 0\n# >>> fizz_buzz(78)\n# 2\n# >>> fizz_buzz(79)\n# 3\nfizz_buzz <- function(n) {\n  if (n % 11 == 7) {\n    return 0\n  } else if (n % 13 == 7) {\n    return 2\n  } else {\n    return 1\n  }\n}"], ["# This function takes a list l and returns a list l' such that\n# l' is identical to l in the odd indicies, while its values at the even indicies are equal\n# to the values of the even indicies of l, but sorted.\n# >>> sort_even(c(1, 2, 3))\n# c(1, 2, 3)\n# >>> sort_even(c(5, 6, 3, 4))\n# c(3, 6, 5, 4)\nsort_even <- function(l) {\n  l <- sort(l)\n  l <- c(l[1], l[2], l[3], l[4])\n  l <- c(l[1], l[2], l[3], l[4])\n  l\n}"], ["# prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n# 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\nprime_fib <- function(n) {\n  if (n < 2) {\n    return(0)\n  } else if (n % 2 == 0) {\n    return(0)\n  } else {\n    return(n + prime_fib(n - 1))\n  }\n}"], ["# triples_sum_to_zero takes a list of integers as an input.\n# it returns TRUE if there are three distinct elements in the list that\n# sum to zero, and FALSE otherwise.\n# >>> triples_sum_to_zero(c(1, 3, 5, 0))\n# FALSE\n# >>> triples_sum_to_zero(c(1, 3, -2, 1))\n# TRUE\n# >>> triples_sum_to_zero(c(1, 2, 3, 7))\n# FALSE\n# >>> triples_sum_to_zero(c(2, 4, -5, 3, 9, 7))\n# TRUE\n# >>> triples_sum_to_zero(c(1))\n# FALSE\ntriples_sum_to_zero <- function(l) {\n  if (length(l) == 3) {\n    sum(l) == 0\n  } else {\n    FALSE\n  }\n}"], ["# Imagine a road that's a perfectly straight infinitely long line.\n# n cars are driving left to right;  simultaneously, a different set of n cars\n# are driving right to left.   The two sets of cars start out being very far from\n# each other.  All cars move in the same speed.  Two cars are said to collide\n# when a car that's moving left to right hits a car that's moving right to left.\n# However, the cars are infinitely sturdy and strong; as a result, they continue moving\n# in their trajectory as if they did not collide.\n# This function outputs the number of such collisions.\ncar_race_collision <- function(n) {\n  n_collisions <- 0\n  for (i in 1:n) {\n    for (j in 1:n) {\n      if (i != j) {\n        if (i == 1 && j == n) {\n          n_collisions <- n_collisions + 1\n        } else if (i == n && j == 1) {\n          n_collisions <- n_collisions + 1\n        } else {\n          if (i == 1) {\n            if (j == 1) {\n              n_collisions <- n_collisions + 1\n            } else {\n              n_collisions <- n_collisions + 1\n            }\n          } else if (i == n) {\n            if (j == 1) {\n              n_collisions <- n_collisions + 1\n            } else {\n              n_collisions <- n_collisions + 1\n            }\n          } else {\n            n_collisions <- n_collisions + 1\n          }\n        }\n      }\n    }\n  }\n  return(n_collisions)\n}\n"], ["# Return list with elements incremented by 1.\n# >>> incr_list(c(1, 2, 3))\n# c(2, 3, 4)\n# >>> incr_list(c(5, 3, 5, 2, 3, 3, 9, 0, 123))\n# c(6, 4, 6, 3, 4, 4, 10, 1, 124)\nincr_list <- function(l) {\n  l[1] <- l[1] + 1\n  l\n}"], ["# pairs_sum_to_zero takes a list of integers as an input.\n# it returns TRUE if there are two distinct elements in the list that\n# sum to zero, and FALSE otherwise.\n# >>> pairs_sum_to_zero(c(1, 3, 5, 0))\n# FALSE\n# >>> pairs_sum_to_zero(c(1, 3, -2, 1))\n# FALSE\n# >>> pairs_sum_to_zero(c(1, 2, 3, 7))\n# FALSE\n# >>> pairs_sum_to_zero(c(2, 4, -5, 3, 5, 7))\n# TRUE\n# >>> pairs_sum_to_zero(c(1))\n# FALSE\npairs_sum_to_zero <- function(l) {\n  if (length(l) == 0) {\n    return(FALSE)\n  }\n  if (length(l) == 1) {\n    return(TRUE)\n  }\n  if (all(l %in% c(0, 1))) {\n    return(FALSE)\n  }\n  if (sum(l) %in% c(0, 1)) {\n    return(FALSE)\n  }\n  return(TRUE)\n}"], ["# Change numerical base of input number x to base.\n# return string representation after the conversion.\n# base numbers are less than 10.\n# >>> change_base(8, 3)\n# '22'\n# >>> change_base(8, 2)\n# '1000'\n# >>> change_base(7, 2)\n# '111'\nchange_base <- function(x, base) {\n  if (base == 1) {\n    return(x)\n  } else {\n    return(base * change_base(x / base, base))\n  }\n}"], ["# Given length of a side and high return area for a triangle.\n# >>> triangle_area(5, 3)\n# 7.5\ntriangle_area <- function(a, h) {\n  return(a * h * h)\n}"], ["# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n# 8\n# >>> fib4(7)\n# 14\nfib4 <- function(n) {\n  if (n == 0) {\n    return 0\n  } else if (n == 1) {\n    return 0\n  } else if (n == 2) {\n    return 2\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  }\n}"], ["# Return median of elements in the list l.\n# >>> median(c(3, 1, 2, 4, 5))\n# 3\n# >>> median(c(-10, 4, 6, 1000, 10, 20))\n# 15.0\nmedian <- function(l) {\n  if (length(l) < 2) {\n    return(l[1])\n  } else {\n    return(median(l[-1] + l[-2]))\n  }\n}"], ["# Checks if given string is a palindrome\n# >>> is_palindrome('')\n# TRUE\n# >>> is_palindrome('aba')\n# TRUE\n# >>> is_palindrome('aaaaa')\n# TRUE\n# >>> is_palindrome('zbcd')\n# FALSE\nis_palindrome <- function(text) {\n  text <- tolower(text)\n  text <- gsub(\"[^a-zA-Z0-9]\", \"\", text)\n  text <- gsub(\"\\\\s+\", \"\", text)\n  text <- gsub(\"\\\\s*\", \"\", text)\n  text <- gsub(\"\\\\s+\", \"\", text)\n  text <- gsub(\"\\\\s*\", \"\", text)\n  text <- gsub(\"\\\\s+\", \"\", text)\n  text <- gsub(\"\\\\s*\", \"\", text)\n  text <- gsub(\"\\\\s+\", \"\", text)\n  text <- gsub(\"\\\\s*\", \"\", text)\n  text <- gsub(\"\\\\s+\", \"\", text)\n  text <- gsub(\"\\\\s*\", \"\", text)\n  text <- gsub(\"\\\\s+\", \"\", text)\n  text <- gsub(\"\\\\s*\", \"\", text)\n  text <- gsub(\"\\\\s+\", \"\", text)\n  text <- gsub(\"\\\\s*\", \"\", text)\n  text <- gsub(\"\\\\s+\", \"\", text)\n  text <- gsub(\"\\\\s*\", \"\", text)\n  text <- gsub(\"\\\\s+\", \"\", text)\n  text <- gsub(\"\\\\s*\", \"\", text)\n  text <- gsub(\"\\\\s+\", \"\", text)\n  text <- gsub(\"\\\\s*\", \"\", text)\n  text <- gsub(\"\\\\s+\", \"\", text)\n  text <- gsub(\"\\\\s*\", \"\", text)\n  text <- gsub(\"\\\\s+\", \"\", text)\n  text <- gsub(\"\\\\s*\", \"\", text)\n  text <- gsub(\"\\\\s+\", \"\", text)\n  text <- gsub(\"\\\\s*\", \"\", text)\n  text <- gsub(\"\\\\s+\", \"\", text)\n  text <- gsub(\"\\\\s*\", \"\", text)\n  text <- gsub(\"\\\\"], ["# Return 2^n modulo p (be aware of numerics).\n# >>> modp(3, 5)\n# 3\n# >>> modp(1101, 101)\n# 2\n# >>> modp(0, 101)\n# 1\n# >>> modp(3, 11)\n# 8\n# >>> modp(100, 101)\n# 1\nmodp <- function(n, p) {\n  if (n < 0) {\n    n = -n\n  }\n  if (n == 0) {\n    return 1\n  }\n  if (n == 1) {\n    return 0\n  }\n  if (n == 2) {\n    return 1\n  }\n  if (n == 3) {\n    return 2\n  }\n  if (n == 4) {\n    return 3\n  }\n  if (n == 5) {\n    return 4\n  }\n  if (n == 6) {\n    return 5\n  }\n  if (n == 7) {\n    return 6\n  }\n  if (n == 8) {\n    return 7\n  }\n  if (n == 9) {\n    return 8\n  }\n  if (n == 10) {\n    return 9\n  }\n  if (n == 11) {\n    return 10\n  }\n  if (n == 12) {\n    return 11\n  }\n  if (n == 13) {\n    return 12\n  }\n  if (n == 14) {\n    return 13\n  }\n  if (n == 15) {\n    return 14\n  }\n  if (n == 16) {\n    return 15\n  }\n  if (n == 17) {\n    return 16\n  }\n  if (n == 18) {\n    return 17\n  }\n  if (n == 19) {\n    return 18\n "], ["# remove_vowels is a function that takes string and returns string without vowels.\n# >>> remove_vowels('')\n# ''\n# >>> remove_vowels('abcdef')\n# 'bcdf'\n# >>> remove_vowels('aaaaa')\n# ''\n# >>> remove_vowels('aaBAA')\n# 'B'\n# >>> remove_vowels('zbcd')\n# 'zbcd'\nremove_vowels <- function(text) {\n  text <- gsub(\"[aeiouAEIOU]\", \"\", text)\n  text <- gsub(\"[aeiouAEIOU]\", \"\", text)\n  text <- gsub(\"[aeiouAEIOU]\", \"\", text)\n  text <- gsub(\"[aeiouAEIOU]\", \"\", text)\n  text <- gsub(\"[aeiouAEIOU]\", \"\", text)\n  text <- gsub(\"[aeiouAEIOU]\", \"\", text)\n  text <- gsub(\"[aeiouAEIOU]\", \"\", text)\n  text <- gsub(\"[aeiouAEIOU]\", \"\", text)\n  text <- gsub(\"[aeiouAEIOU]\", \"\", text)\n  text <- gsub(\"[aeiouAEIOU]\", \"\", text)\n  text <- gsub(\"[aeiouAEIOU]\", \"\", text)\n  text <- gsub(\"[aeiouAEIOU]\", \"\", text)\n  text <- gsub(\"[aeiouAEIOU]\", \"\", text)\n  text <- gsub(\"[aeiouAEIOU]\", \"\", text)\n  text <- gsub(\"[aeiouAEIOU]\", \"\", text)\n  text <- gsub(\"[aeiouAEIOU]\", \"\", text)\n  text <- gsub(\"[aeiouAEIOU]\", \"\", text)\n  text <- gsub(\"[aeiouAEIOU]\", \"\", text)\n  text <- gsub(\"[aeiouAEIOU]\", \"\", text)\n  text <- gsub(\"[aeiouAEIOU]\", \"\", text)\n  text <- gsub(\"[aeiouAEIOU]"], ["# Return TRUE if all numbers in the list l are below threshold t.\n# >>> below_threshold(c(1, 2, 4, 10), 100)\n# TRUE\n# >>> below_threshold(c(1, 20, 4, 10), 5)\n# FALSE\nbelow_threshold <- function(l, t) {\n  if (length(l) == 0) return(FALSE)\n  if (length(l) == 1) return(TRUE)\n  if (length(l) == 2) {\n    if (all(l[[1]] < t)) return(TRUE)\n    else return(FALSE)\n  }\n  if (length(l) == 3) {\n    if (all(l[[1]] < t) && all(l[[2]] < t)) return(TRUE)\n    else return(FALSE)\n  }\n  if (length(l) == 4) {\n    if (all(l[[1]] < t) && all(l[[2]] < t) && all(l[[3]] < t)) return(TRUE)\n    else return(FALSE)\n  }\n  return(FALSE)\n} } ```\n\nThis function takes a list of numbers and a threshold value. It returns TRUE if all numbers in the list are below the threshold value. If the list is empty, it returns FALSE. If the list is a list of lists, it returns TRUE if all numbers in the first list are below the threshold value. If the list is a list of lists, it returns TRUE if all numbers in the second list are below the threshold value. If the list is a list of lists, it returns TRUE if all numbers in the third list are below the threshold value. If the list is a list of lists, it returns TRUE if all numbers in the fourth list are below the threshold value. If the list is a list of lists, it returns TRUE if all numbers in the fifth list are below the threshold value. If the list is a list of lists, it returns TRUE if all numbers in the sixth list are below the threshold value. If the list is a list of lists, it returns TRUE if all numbers in the seventh list are below the threshold value. If the list is a list of lists, it returns TRUE if all numbers in the"], ["# Add two numbers x and y\n# >>> add(2, 3)\n# 5\n# >>> add(5, 7)\n# 12\nadd <- function(x, y) {\n  return(x + y)\n}"], ["# Check if two words have the same characters.\n# >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n# TRUE\n# >>> same_chars('abcd', 'dddddddabc')\n# TRUE\n# >>> same_chars('dddddddabc', 'abcd')\n# TRUE\n# >>> same_chars('eabcd', 'dddddddabc')\n# FALSE\n# >>> same_chars('abcd', 'dddddddabce')\n# FALSE\n# >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n# FALSE\nsame_chars <- function(s0, s1) {\n  if (length(s0) != length(s1)) return(FALSE)\n  if (is.character(s0) && is.character(s1)) {\n    return(sapply(s0, function(x) {\n      return(sapply(s1, function(y) {\n        return(all(x == y))\n      })\n    })\n    )\n  } else {\n    return(FALSE)\n  }\n}\n}"], ["# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n# >>> fib(8)\n# 21\nfib <- function(n) {\n  if (n < 2) {\n    return(n)\n  } else {\n    return(fib(n - 1) + fib(n - 2))\n  }\n}"], ["# brackets is a string of \"<\" and \">\".\n# return TRUE if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing('<')\n# FALSE\n# >>> correct_bracketing('<>')\n# TRUE\n# >>> correct_bracketing('<<><>>')\n# TRUE\n# >>> correct_bracketing('><<>')\n# FALSE\ncorrect_bracketing <- function(brackets) {\n  if (length(brackets) == 0) {\n    return(TRUE)\n  }\n  if (brackets[1] == \"<\") {\n    return(FALSE)\n  }\n  if (brackets[length(brackets)] == \">\") {\n    return(FALSE)\n  }\n  if (brackets[length(brackets) - 1] == \">\") {\n    return(FALSE)\n  }\n  if (brackets[length(brackets) - 2] == \">\") {\n    return(FALSE)\n  }\n  return(TRUE)\n}"], ["# Return TRUE is list elements are monotonically increasing or decreasing.\n# >>> monotonic(c(1, 2, 4, 20))\n# TRUE\n# >>> monotonic(c(1, 20, 4, 10))\n# FALSE\n# >>> monotonic(c(4, 1, 0, -10))\n# TRUE\nmonotonic <- function(l) {\n  if (length(l) == 0) {\n    return(FALSE)\n  }\n  if (all(l < 0)) {\n    return(FALSE)\n  }\n  if (all(l > 0)) {\n    return(TRUE)\n  }\n  return(monotonic(unlist(l)))\n}"], ["# Return sorted unique common elements for two lists.\n# >>> common(c(1, 4, 3, 34, 653, 2, 5), c(5, 7, 1, 5, 9, 653, 121))\n# c(1, 5, 653)\n# >>> common(c(5, 3, 2, 8), c(3, 2))\n# c(2, 3)\ncommon <- function(l1, l2) {\n  l1 <- as.character(l1)\n  l2 <- as.character(l2)\n  common_list <- lapply(l1, function(x) {\n    common_list <- common_list[!(common_list %in% x)]\n    common_list <- common_list[!(common_list %in% x)]\n    common_list\n  })\n  common_list <- common_list[1]\n  common_list\n}"], ["# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n# >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\nlargest_prime_factor <- function(n) {\n  if (n == 1) {\n    return(1)\n  } else if (n % 2 == 0) {\n    return(2)\n  } else {\n    return(largest_prime_factor(n / 2))\n  }\n}"], ["# sum_to_n is a function that sums numbers from 1 to n.\n# >>> sum_to_n(30)\n# 465\n# >>> sum_to_n(100)\n# 5050\n# >>> sum_to_n(5)\n# 15\n# >>> sum_to_n(10)\n# 55\n# >>> sum_to_n(1)\n# 1\nsum_to_n <- function(n) {\n  sum <- 0\n  for (i in 1:n) {\n    sum <- sum + i\n  }\n  return(sum)\n}"], ["# brackets is a string of \"(\" and \")\".\n# return TRUE if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing('(')\n# FALSE\n# >>> correct_bracketing('()')\n# TRUE\n# >>> correct_bracketing('(()())')\n# TRUE\n# >>> correct_bracketing(')(()')\n# FALSE\ncorrect_bracketing <- function(brackets) {\n  if (length(brackets) == 0) {\n    return(FALSE)\n  }\n  if (length(brackets) == 1) {\n    return(TRUE)\n  }\n  if (brackets[1] == '(' && brackets[length(brackets)] == ')') {\n    return(TRUE)\n  }\n  return(FALSE)\n}"], ["# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2] * x^2 + ....\n#  Return derivative of this polynomial in the same form.\n# >>> derivative(c(3, 1, 2, 4, 5))\n# c(1, 4, 12, 20)\n# >>> derivative(c(1, 2, 3))\n# c(2, 6)\nderivative <- function(xs) {\n  if (length(xs) == 1) {\n    return(xs[[1]])\n  } else {\n    return(c(xs[[1]] * xs[[2]], xs[[2]] * xs[[3]], xs[[3]] * xs[[4]], xs[[4]] * xs[[5]], xs[[5]] * xs[[6]], xs[[6]] * xs[[7]], xs[[7]] * xs[[8]], xs[[8]] * xs[[9]], xs[[9]] * xs[[10]], xs[[10]] * xs[[11]], xs[[11]] * xs[[12]], xs[[12]] * xs[[13]], xs[[13]] * xs[[14]], xs[[14]] * xs[[15]], xs[[15]] * xs[[16]], xs[[16]] * xs[[17]], xs[[17]] * xs[[18]], xs[[18]] * xs[[19]], xs[[19]] * xs[[20]]))\n  }\n}"], ["# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n# >>> fibfib(1)\n# 0\n# >>> fibfib(5)\n# 4\n# >>> fibfib(8)\n# 24\nfibfib <- function(n) {\n  if (n == 0) {\n    return(0)\n  } else if (n == 1) {\n    return(0)\n  } else if (n == 2) {\n    return(1)\n  } else {\n    return(fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n  }\n}"], ["# Write a function vowels_count which takes a string representing\n# a word as input and returns the number of vowels in the string.\n# Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is at the end of the given word.\n# Example:\n# >>> vowels_count('abcde')\n# 2\n# >>> vowels_count('ACEDY')\n# 3\nvowels_count <- function(s) {\n  vowels <- c('a', 'e', 'i', 'o', 'u')\n  return(length(s) - length(s %in% vowels))\n}"], ["# Circular shift the digits of the integer x, shift the digits right by shift\n# and return the result as a string.\n# If shift > number of digits, return digits reversed.\n# >>> circular_shift(12, 1)\n# '21'\n# >>> circular_shift(12, 2)\n# '12'\ncircular_shift <- function(x, shift) {\n  if (shift > length(x)) {\n    x[length(x) - shift + 1:length(x)]\n  } else {\n    x[length(x) - shift + 1:length(x) - 1]\n  }\n}"], ["# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> digitSum('')\n# 0\n# >>> digitSum('abAB')\n# 131\n# >>> digitSum('abcCd')\n# 67\n# >>> digitSum('helloE')\n# 69\n# >>> digitSum('woArBld')\n# 131\n# >>> digitSum('aAaaaXa')\n# 153\ndigitSum <- function(s) {\n  sum <- 0\n  for (i in 1:length(s)) {\n    sum <- sum + ascii_to_digit(s[i])\n  }\n  return(sum)\n}"], ["# In this task, you will be given a string that represents a number of apples and oranges \n# that are distributed in a basket of fruit this basket contains \n# apples, oranges, and mango fruits. Given the string that represents the total number of \n# the oranges and apples and an integer that represent the total number of the fruits \n# in the basket return the number of the mango fruits in the basket.\n# for examble:\n# >>> fruit_distribution('5 apples and 6 oranges', 19)\n# 8\n# >>> fruit_distribution('0 apples and 1 oranges', 3)\n# 2\n# >>> fruit_distribution('2 apples and 3 oranges', 100)\n# 95\n# >>> fruit_distribution('100 apples and 1 oranges', 120)\n# 19\nfruit_distribution <- function(s, n) {\n  n <- as.numeric(s)\n  if (n == 0) {\n    return(0)\n  } else {\n    return(n - sum(s == \"orange\"))\n  }\n}\nfruit_distribution(s, n)"], ["# \"Given a vector representing a branch of a tree that has non-negative integer nodes\n# your task is to pluck one of the nodes and return it.\n# The plucked node should be the node with the smallest even value.\n# If multiple nodes with the same smallest even value are found return the node that has smallest index.\n# The plucked node should be returned in a list, [ smalest_value, its index ],\n# If there are no even values or the given vector is empty, return [].\n# Example 1:\n# >>> pluck(c(4, 2, 3))\n# c(2, 1)\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>> pluck(c(1, 2, 3))\n# c(2, 1)\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 3:\n# >>> pluck(c())\n# c()\n# Example 4:\n# >>> pluck(c(5, 0, 3, 0, 4, 2))\n# c(0, 1)\n# Explanation: 0 is the smallest value, but  there are two zeros,\n#              so we will choose the first zero, which has the smallest index.\n# Constraints:\n#     * 1 <= nodes.length <= 10000\n#     * 0 <= node.value\npluck <- function(arr) {\n  if (length(arr) == 0) {\n    return(c())\n  }\n  val <- min(arr)\n  index <- which(arr == val)\n  return(c(val, index[1]))\n}"], ["# You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n# zero, and has a frequency greater than or equal to the value of the integer itself. \n# The frequency of an integer is the number of times it appears in the list.\n# If no such a value exist, return -1.\n# Examples:\n# >>> search(c(4, 1, 2, 2, 3, 1))\n# 2\n# >>> search(c(1, 2, 2, 3, 3, 3, 4, 4, 4))\n# 3\n# >>> search(c(5, 5, 4, 4, 4))\n# -1\nsearch <- function(lst) {\n  n <- length(lst)\n  max <- 0\n  for (i in 1:n) {\n    if (lst[i] > 0) {\n      if (lst[i] > max) {\n        max <- lst[i]\n      }\n    }\n  }\n  if (max == 0) {\n    return(-1)\n  } else {\n    return(max)\n  }\n}"], ["# Given list of integers, return list in strange order.\n# Strange sorting, is when you start with the minimum value,\n# then maximum of the remaining integers, then minimum and so on.\n# Examples:\n# >>> strange_sort_list(c(1, 2, 3, 4))\n# c(1, 4, 2, 3)\n# >>> strange_sort_list(c(5, 5, 5, 5))\n# c(5, 5, 5, 5)\n# >>> strange_sort_list(c())\n# c()\nstrange_sort_list <- function(lst) {\n  lst <- sort(lst, decreasing = TRUE)\n  lst <- c(lst[1], lst[length(lst) - 1])\n  lst\n}"], ["# Given the lengths of the three sides of a triangle. Return the area of\n# the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any two sides is greater \n# than the third side.\n# Example:\n# >>> triangle_area(3, 4, 5)\n# 6.0\n# >>> triangle_area(1, 2, 10)\n# -1\ntriangle_area <- function(a, b, c) {\n  if (a + b > c) {\n    return(c - a)\n  } else {\n    return(-1)\n  }\n}"], ["# Write a function that returns TRUE if the object q will fly, and FALSE otherwise.\n# The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n# Example:\n# >>> will_it_fly(c(1, 2), 5)\n# FALSE\n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>> will_it_fly(c(3, 2, 3), 1)\n# FALSE\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> will_it_fly(c(3, 2, 3), 9)\n# TRUE\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# >>> will_it_fly(c(3), 5)\n# TRUE\n# # 3 is less than the maximum possible weight, and it's balanced.\nwill_it_fly <- function(q, w) {\n  if (length(q) != 2) {\n    return(FALSE)\n  }\n  if (sum(q) > w) {\n    return(FALSE)\n  }\n  return(TRUE)\n} ```\n\nI hope this helps! Let me know if you have any other questions."], ["# Given a vector arr of integers, find the minimum number of elements that\n# need to be changed to make the vector palindromic. A palindromic vector is a vector that\n# is read the same backwards and forwards. In one change, you can change one element to any other element.\n# For example:\n# >>> smallest_change(c(1, 2, 3, 5, 4, 7, 9, 6))\n# 4\n# >>> smallest_change(c(1, 2, 3, 4, 3, 2, 2))\n# 1\n# >>> smallest_change(c(1, 2, 3, 2, 1))\n# 0\nsmallest_change <- function(arr) {\n  n <- length(arr)\n  if (n < 2) return(0)\n  if (n == 2) return(1)\n  if (n %in% c(1, 2)) return(n)\n  if (n %in% c(3, 4)) return(n)\n  if (n %in% c(5, 6)) return(n)\n  if (n %in% c(7, 8)) return(n)\n  if (n %in% c(9, 10)) return(n)\n  if (n %in% c(11, 12)) return(n)\n  if (n %in% c(13, 14)) return(n)\n  if (n %in% c(15, 16)) return(n)\n  if (n %in% c(17, 18)) return(n)\n  if (n %in% c(19, 20)) return(n)\n  if (n %in% c(21, 22)) return(n)\n  if (n %in% c(23, 24)) return(n)\n  if (n %in% c(25, 26)) return(n)\n  if (n %in% c(27, 28)) return(n)\n  if (n %in% c(29, 3"], ["# Write a function that accepts two lists of strings and returns the list that has \n# total number of chars in the all strings of the list less than the other list.\n# if the two lists have the same number of chars, return the first list.\n# Examples\n# >>> total_match(c(), c())\n# c()\n# >>> total_match(c('hi', 'admin'), c('hI', 'Hi'))\n# c('hI', 'Hi')\n# >>> total_match(c('hi', 'admin'), c('hi', 'hi', 'admin', 'project'))\n# c('hi', 'admin')\n# >>> total_match(c('hi', 'admin'), c('hI', 'hi', 'hi'))\n# c('hI', 'hi', 'hi')\n# >>> total_match(c('4'), c('1', '2', '3', '4', '5'))\n# c('4')\ntotal_match <- function(lst1, lst2) {\n  lst1 <- as.character(lst1)\n  lst2 <- as.character(lst2)\n  n <- length(lst1)\n  n2 <- length(lst2)\n  if (n2 == 0) {\n    return(lst1)\n  }\n  if (n == 0) {\n    return(lst2)\n  }\n  if (n == n2) {\n    return(lst1)\n  }\n  if (n == n2 - 1) {\n    return(lst2)\n  }\n  if (n == n2 - 2) {\n    return(lst1)\n  }\n  if (n == n2 - 3) {\n    return(lst2)\n  }\n  return(lst1)\n}"], ["# Write a function that returns true if the given number is the multiplication of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100. \n# Example:\n# >>> is_multiply_prime(30)\n# TRUE\n# 30 = 2 * 3 * 5\nis_multiply_prime <- function(a) {\n  if (a < 100) {\n    return (a % 3 == 0 && a % 5 == 0)\n  } else {\n    return FALSE\n  }\n}"], ["# Your task is to write a function that returns true if a number x is a simple\n# power of n and false in other cases.\n# x is a simple power of n if n**int=x\n# For example:\n# >>> is_simple_power(1, 4)\n# TRUE\n# >>> is_simple_power(2, 2)\n# TRUE\n# >>> is_simple_power(8, 2)\n# TRUE\n# >>> is_simple_power(3, 2)\n# FALSE\n# >>> is_simple_power(3, 1)\n# FALSE\n# >>> is_simple_power(5, 3)\n# FALSE\nis_simple_power <- function(x, n) {\n  return (n == x)\n}"], ["# Write a function that takes an integer a and returns TRUE \n# if this ingeger is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# >>> iscube(1)\n# TRUE\n# >>> iscube(2)\n# FALSE\n# >>> iscube(-1)\n# TRUE\n# >>> iscube(64)\n# TRUE\n# >>> iscube(0)\n# TRUE\n# >>> iscube(180)\n# FALSE\niscube <- function(a) {\n  return(a %/% 3 == 0)\n}"], ["# You have been tasked to write a function that receives \n# a hexadecimal number as a string and counts the number of hexadecimal \n# digits that are primes (prime number, or a prime, is a natural number \n# greater than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n# Examples:\n# >>> hex_key('AB')\n# 1\n# >>> hex_key('1077E')\n# 2\n# >>> hex_key('ABED1A33')\n# 4\n# >>> hex_key('123456789ABCDEF0')\n# 6\n# >>> hex_key('2020')\n# 2\nhex_key <- function(num) {\n  if (num == \"\") return(0)\n  if (num == \"0\") return(0)\n  if (num == \"1\") return(1)\n  if (num == \"2\") return(2)\n  if (num == \"3\") return(3)\n  if (num == \"4\") return(4)\n  if (num == \"5\") return(5)\n  if (num == \"6\") return(6)\n  if (num == \"7\") return(7)\n  if (num == \"8\") return(8)\n  if (num == \"9\") return(9)\n  if (num == \"A\") return(11)\n  if (num == \"B\") return(13)\n  if (num"], ["# You will be given a number in decimal form and your task is to convert it to\n# binary format. The function should return a string, with each character representing a binary\n# number. Each character in the string will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n# The extra characters are there to help with the format.\n# Examples:\n# >>> decimal_to_binary(15)\n# 'db1111db'\n# >>> decimal_to_binary(32)\n# 'db100000db'\ndecimal_to_binary <- function(decimal) {\n  binary <- \"\"\n  for (i in 0:decimal) {\n    binary <- c(binary, paste(decimal %in% c(0, 1), collapse = \"\"), paste(decimal %in% c(1, 0), collapse = \"\"), paste(decimal %in% c(0, 1), collapse = \"\"), paste(decimal %in% c(1, 0), collapse = \"\"), paste(decimal %in% c(0, 1), collapse = \"\"), paste(decimal %in% c(1, 0), collapse = \"\"), paste(decimal %in% c(0, 1), collapse = \"\"), paste(decimal %in% c(1, 0), collapse = \"\"), paste(decimal %in% c(0, 1), collapse = \"\"), paste(decimal %in% c(1, 0), collapse = \"\"), paste(decimal %in% c(0, 1), collapse = \"\"), paste(decimal %in% c(1, 0), collapse = \"\"), paste(decimal %in% c(0, 1), collapse = \"\"), paste(decimal %in% c(1, 0), collapse = \"\"), paste(decimal %in% c(0, 1), collapse = \"\"), paste(decimal %in% c(1, 0), collapse = \"\"), paste(decimal %in% c(0, 1), collapse = \"\"), paste(decimal %in% c(1, 0), collapse = \"\"), paste(decimal %"], ["# You are given a string s.\n# Your task is to check if the string is hapr or not.\n# A string is hapr if its length is at least 3 and every 3 consecutive letters are distinct\n# For example:\n# >>> is_happy('a')\n# FALSE\n# >>> is_happy('aa')\n# FALSE\n# >>> is_happy('abcd')\n# TRUE\n# >>> is_happy('aabb')\n# FALSE\n# >>> is_happy('adb')\n# TRUE\n# >>> is_happy('xyy')\n# FALSE\nis_happy <- function(s) {\n  n <- length(s)\n  if (n < 3) {\n    return(FALSE)\n  }\n  if (n %in% 3) {\n    return(FALSE)\n  }\n  if (n %in% 6) {\n    return(FALSE)\n  }\n  if (n %in% 9) {\n    return(FALSE)\n  }\n  if (n %in% 12) {\n    return(FALSE)\n  }\n  if (n %in% 15) {\n    return(FALSE)\n  }\n  if (n %in% 18) {\n    return(FALSE)\n  }\n  if (n %in% 21) {\n    return(FALSE)\n  }\n  if (n %in% 24) {\n    return(FALSE)\n  }\n  if (n %in% 27) {\n    return(FALSE)\n  }\n  if (n %in% 30) {\n    return(FALSE)\n  }\n  if (n %in% 33) {\n    return(FALSE)\n  }\n  if (n %in% 36) {\n    return(FALSE)\n  }\n  if (n %in% 39) {\n    return(FALSE)\n  }\n  if (n %in% 42) {\n    return(FALSE)\n  }\n  if (n %in% 45) {\n    return(FALSE)\n  }\n  if (n %in% 48)"], ["# It is the last week of the semester and the teacher has to give the grades\n# to students. The teacher has been making her own algorithm for grading.\n# The only problem is, she has lost the code she used for grading.\n# She has given you a list of GPAs for some students and you have to write \n# a function that can output a list of letter grades using the following table:\n#          GPA       |    Letter grade\n#           4.0                A+\n#         > 3.7                A \n#         > 3.3                A- \n#         > 3.0                B+\n#         > 2.7                B \n#         > 2.3                B-\n#         > 2.0                C+\n#         > 1.7                C\n#         > 1.3                C-\n#         > 1.0                D+ \n#         > 0.7                D \n#         > 0.0                D-\n#           0.0                E\n# Example:\n# >>> grade_equation(c(4.0, 3, 1.7, 2, 3.5))\n# c('A+', 'B', 'C-', 'C', 'A-')\nnumerical_letter_grade <- function(grades) {\n  grades %>%\n    mutate(letter = case_when(\n      gpa < 3.7 ~ \"A+\",\n      gpa >= 3.7 ~ \"A\",\n      gpa >= 3.3 ~ \"A-\",\n      gpa >= 3.0 ~ \"B+\",\n      gpa >= 2.7 ~ \"B\",\n      gpa >= 2.3 ~ \"B-\",\n      gpa >= 2.0 ~ \"C+\",\n      gpa >= 1.7 ~ \"C\",\n      gpa >= 1.3 ~ \"C-\",\n      gpa >= 1.0 ~ \"D+\",\n      gpa >= 0.7 ~ \"D\",\n      gpa >= 0.0 ~ \"D-\")) %>%\n    select(letter)\n}\n"], ["# Write a function that takes a string and returns TRUE if the string\n# length is a prime number or FALSE otherwise\n# Examples\n# >>> prime_length('Hello')\n# TRUE\n# >>> prime_length('abcdcba')\n# TRUE\n# >>> prime_length('kittens')\n# TRUE\n# >>> prime_length('orange')\n# FALSE\nprime_length <- function(string) {\n  if (length(string) < 2) {\n    return(FALSE)\n  } else if (is.integer(string) && string %in% c(2, 3)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}"], ["# Given a positive integer n, return the count of the numbers of n-digit\n# positive integers that start or end with 1.\nstarts_one_ends <- function(n) {\n  n <- as.numeric(n)\n  if (n < 1) {\n    return(0)\n  } else {\n    return(sum(n %/% 1 == 0))\n  }\n}"], ["# Given a positive integer N, return the total sum of its digits in binary.\n# Example\n# >>> solve(1000)\n# '1'\n# >>> solve(150)\n# '110'\n# >>> solve(147)\n# '1100'\n# Variables:\n#     @N integer\n#          Constraints: 0 \u2264 N \u2264 10000.\n# Output:\n#      a string of binary number\nsolve <- function(N) {\n  return(format(sum(rep(1:N, each = N)), \"b\"))\n}"], ["# Given a non-empty list of integers lst. add the even elements that are at odd indices..\n# Examples:\n# >>> add(c(4, 2, 6, 7))\n# 2\nadd <- function(lst) {\n  if (length(lst) < 2) {\n    return(lst)\n  }\n  lst[[1]] + lst[[2]]\n} ```\n\n3. `remove()`: removes the element at the specified index.\n"], ["# Write a function that takes a string and returns an ordered version of it.\n# Ordered version of string, is a string where all words (separated by space)\n# are replaced by a new word where all the characters arranged in\n# ascending order based on ascii value.\n# Note: You should keep the order of words and blank spaces in the sentence.\n# For example:\n# >>> anti_shuffle('Hi')\n# 'Hi'\n# >>> anti_shuffle('hello')\n# 'ehllo'\n# >>> anti_shuffle('Hello World!!!')\n# 'Hello !!!Wdlor'\nanti_shuffle <- function(s) {\n  s <- strsplit(s, \" \")\n  s <- sapply(s, function(x) paste(x, collapse = \" \"))\n  s <- strsplit(s, \" \")\n  s <- sapply(s, function(x) paste(x, collapse = \" \"))\n  s <- strsplit(s, \" \")\n  s <- sapply(s, function(x) paste(x, collapse = \" \"))\n  s <- strsplit(s, \" \")\n  s <- sapply(s, function(x) paste(x, collapse = \" \"))\n  s <- strsplit(s, \" \")\n  s <- sapply(s, function(x) paste(x, collapse = \" \"))\n  s <- strsplit(s, \" \")\n  s <- sapply(s, function(x) paste(x, collapse = \" \"))\n  s <- strsplit(s, \" \")\n  s <- sapply(s, function(x) paste(x, collapse = \" \"))\n  s <- strsplit(s, \" \")\n  s <- sapply(s, function(x) paste(x, collapse = \" \"))\n  s <- strsplit(s, \" \")\n  s <- sapply(s, function(x) paste(x, collapse = \" \"))\n  s <- strsplit(s, \" \")\n  s <- sapply(s, function(x) paste(x, collapse = \" \"))\n  s <- strsplit(s, \" \")\n  s <- sapply(s, function(x) paste(x, collapse = \" \""], ["# You are given a 2 dimensional data, as a nested lists,\n# which is similar to matrix, however, unlike matrices,\n# each row may contain a different number of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return list of lists, [(x1, y1), (x2, y2) ...] such that\n# each list is a coordinate - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending order.\n# Also, sort coordinates of the row by columns in descending order.\n# Examples:\n# >>> get_row(list(c(1, 2, 3, 4, 5, 6), c(1, 2, 3, 4, 1, 6), c(1, 2, 3, 4, 5, 1)), 1)\n# list(c(0, 0), c(1, 4), c(1, 0), c(2, 5), c(2, 0))\n# >>> get_row(c(), 1)\n# c()\n# >>> get_row(list(c(), c(1), c(1, 2, 3)), 3)\n# list(c(2, 2))\nget_row <- function(lst, x) {\n  lst <- unlist(lst)\n  lst <- lapply(lst, function(x) {\n    x <- as.numeric(x)\n    if (length(x) != 2) {\n      stop(\"Error: List must be 2D\")\n    }\n    if (x[1] != x[2]) {\n      stop(\"Error: Row must be the same\")\n    }\n    if (x[1] == 0) {\n      x[1] <- 0\n    }\n    if (x[2] == 0) {\n      x[2] <- 0\n    }\n    list(x[1], x[2])\n  })\n  lst <- sort(lst, decreasing = TRUE)\n  lst <- lapply(lst, function(x) {\n    x <- as.numeric(x)\n    if (length(x) != "], ["# Given a vector of non-negative integers, return a cor of the given vector after sorting,\n# you will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\n# or sort it in descending order if the sum( first index value, last index value) is even.\n# Note:\n# * don't change the given vector.\n# Examples:\n# >>> sort_array(c())\n# c()\n# >>> sort_array(c(5))\n# c(5)\n# >>> sort_array(c(2, 4, 3, 0, 1, 5))\n# c(0, 1, 2, 3, 4, 5)\n# >>> sort_array(c(2, 4, 3, 0, 1, 5, 6))\n# c(6, 5, 4, 3, 2, 1, 0)\nsort_array <- function(array) {\n  sorted_array <- sort(array, decreasing = TRUE)\n  return(sorted_array)\n}"], ["# Create a function encrypt that takes a string as an argument and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet should be rotated in a manner such that the letters \n# shift down by two multiplied to two places.\n# For example:\n# >>> encrypt('hi')\n# 'lm'\n# >>> encrypt('asdfghjkl')\n# 'ewhjklnop'\n# >>> encrypt('gf')\n# 'kj'\n# >>> encrypt('et')\n# 'ix'\nencrypt <- function(s) {\n  s <- strsplit(s, \"\")\n  n <- length(s)\n  for (i in 1:n) {\n    s[i] <- s[i] %/% 2 * 2\n  }\n  return(s)\n}"], ["# You are given a list of integers.\n# Write a function next_smallest() that returns the 2nd smallest element of the list.\n# Return NULL if there is no such element.\n# >>> next_smallest(c(1, 2, 3, 4, 5))\n# 2\n# >>> next_smallest(c(5, 1, 4, 3, 2))\n# 2\n# >>> next_smallest(c())\n# NULL\n# >>> next_smallest(c(1, 1))\n# NULL\nnext_smallest <- function(lst) {\n  if (length(lst) < 2) {\n    return(NULL)\n  }\n  n <- length(lst) - 1\n  if (n == 0) {\n    return(lst[1])\n  }\n  if (n == 1) {\n    return(lst[2])\n  }\n  return(lst[n - 1])\n}"], ["# You'll be given a string of words, and your task is to count the number\n# of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored('Hello world')\n# 0\n# >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n# 1\nis_bored <- function(S) {\n  boredoms <- strsplit(S, '\\\\.')\n  return(length(which(boredoms == 'I')))\n}"], ["# Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n# Examples\n# >>> any_int(5, 2, 7)\n# TRUE\n# >>> any_int(3, 2, 2)\n# FALSE\n# >>> any_int(3, -2, 1)\n# TRUE\n# >>> any_int(3.6, -2.2, 2)\n# FALSE\nany_int <- function(x, y, z) {\n  if (is.numeric(x) && is.numeric(y) && is.numeric(z)) {\n    return (x + y + z == sum(c(x, y, z)))\n  } else {\n    return FALSE\n  }\n}"], ["# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> encode('test')\n# 'TGST'\n# >>> encode('This is a message')\n# 'tHKS KS C MGSSCGG'\nencode <- function(message) {\n  message <- strsplit(message, \"\")\n  message <- lapply(message, function(x) {\n    x[1] <- toupper(x[1])\n    x[2] <- toupper(x[2])\n    x[3] <- toupper(x[3])\n    x[4] <- toupper(x[4])\n    x[5] <- toupper(x[5])\n    x[6] <- toupper(x[6])\n    x[7] <- toupper(x[7])\n    x[8] <- toupper(x[8])\n    x[9] <- toupper(x[9])\n    x[10] <- toupper(x[10])\n    x[11] <- toupper(x[11])\n    x[12] <- toupper(x[12])\n    x[13] <- toupper(x[13])\n    x[14] <- toupper(x[14])\n    x[15] <- toupper(x[15])\n    x[16] <- toupper(x[16])\n    x[17] <- toupper(x[17])\n    x[18] <- toupper(x[18])\n    x[19] <- toupper(x[19])\n    x[20] <- toupper(x[20])\n    x[21] <- toupper(x[21])\n    x[22] <- toupper(x[22])\n    x[23] <- toupper(x[23])\n    x[24] <- toupper(x[24"], ["# You are given a list of integers.\n# You need to find the largest prime value and return the sum of its digits.\n# Examples:\n# >>> skjkasdkd(c(0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3))\n# 10\n# >>> skjkasdkd(c(1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1))\n# 25\n# >>> skjkasdkd(c(1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3))\n# 13\n# >>> skjkasdkd(c(0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6))\n# 11\n# >>> skjkasdkd(c(0, 81, 12, 3, 1, 21))\n# 3\n# >>> skjkasdkd(c(0, 8, 1, 2, 1, 7))\n# 7\nskjkasdkd <- function(lst) {\n  lst <- as.numeric(lst)\n  lst <- lst[lst > 0]\n  lst <- lst[lst %in% c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, "], ["# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (length(dict) == 0) {\n    return(TRUE)\n  }\n  if (all(dict == tolower(dict))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}"], ["# Implement a function that takes an non-negative integer and returns a vector of the first n\n# integers that are prime numbers and less than n.\n# for example:\n# >>> count_up_to(5)\n# c(2, 3)\n# >>> count_up_to(11)\n# c(2, 3, 5, 7)\n# >>> count_up_to(0)\n# c()\n# >>> count_up_to(20)\n# c(2, 3, 5, 7, 11, 13, 17, 19)\n# >>> count_up_to(1)\n# c()\n# >>> count_up_to(18)\n# c(2, 3, 5, 7, 11, 13, 17)\ncount_up_to <- function(n) {\n  c(2, 3)\n}"], ["# Complete the function that takes two integers and returns \n# the product of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# >>> multiply(148, 412)\n# 16\n# >>> multiply(19, 28)\n# 72\n# >>> multiply(2020, 1851)\n# 0\n# >>> multiply(14, -15)\n# 20\nmultiply <- function(a, b) {\n  if (b == 0) {\n    return a\n  } else {\n    return multiply(a * b, b)\n  }\n}"], ["# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\n# >>> count_upper('aBCdEf')\n# 1\n# >>> count_upper('abcdefg')\n# 0\n# >>> count_upper('dBBE')\n# 0\ncount_upper <- function(s) {\n  n <- length(s)\n  count <- 0\n  for (i in 1:n) {\n    if (i %in% 2) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}"], ["# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.numeric(value)) {\n    if (value == 0) {\n      return(0)\n    }\n    if (value == 1) {\n      return(1)\n    }\n    if (value == 2) {\n      return(2)\n    }\n    if (value == 3) {\n      return(3)\n    }\n    if (value == 4) {\n      return(4)\n    }\n    if (value == 5) {\n      return(5)\n    }\n    if (value == 6) {\n      return(6)\n    }\n    if (value == 7) {\n      return(7)\n    }\n    if (value == 8) {\n      return(8)\n    }\n    if (value == 9) {\n      return(9)\n    }\n    if (value == 10) {\n      return(10)\n    }\n    if (value == 11) {\n      return(11)\n    }\n    if (value == 12) {\n      return(12)\n    }\n    if (value == 13) {\n      return(13)\n    }\n    if (value == 14) {\n      return(14)\n    }\n    if (value == 15) {\n      return(15)\n    }\n    if (value == 16) {\n     "], ["# Given a positive integer n, you have to make a pile of n levels of stones.\n# The first level has n stones.\n# The number of stones in the next level is:\n#     - the next odd number if n is odd.\n#     - the next even number if n is even.\n# Return the number of stones in each level in a list, where element at index\n# i represents the number of stones in the level (i+1).\n# Examples:\n# >>> make_a_pile(3)\n# c(3, 5, 7)\nmake_a_pile <- function(n) {\n  if (n == 0) {\n    return(list(0, 0))\n  } else {\n    return(list(c(0, 0), make_a_pile(n - 1)))\n  }\n}"], ["# You will be given a string of words separated by commas or spaces. Your task is\n# to split the string into words and return a vector of the words.\n# For example:\n# >>> words_string('Hi, my name is John')\n# c('Hi', 'my', 'name', 'is', 'John')\n# >>> words_string('One, two, three, four, five, six')\n# c('One', 'two', 'three', 'four', 'five', 'six')\nwords_string <- function(s) {\n  words <- strsplit(s, split = \",\")\n  return(c(words[[1]], words[[2]]))\n}"], ["# This function takes two positive numbers x and y and returns the\n# biggest even integer number that is in the range [x, y] inclusive. If \n# there's no such number, then the function should return -1.\n# For example:\n# >>> choose_num(12, 15)\n# 14\n# >>> choose_num(13, 12)\n# -1\nchoose_num <- function(x, y) {\n  if (x > y) {\n    return -1\n  }\n  if (x == y) {\n    return x\n  }\n  if (x % 2 == 0) {\n    return x + 1\n  }\n  return x\n}"], ["# You are given two positive integers n and m, and your task is to compute the\n# average of the integers from n through m (including n and m). \n# Round the answer to the nearest integer and convert that to binary.\n# If n is greater than m, return -1.\n# Example:\n# >>> rounded_avg(1, 5)\n# '0b11'\n# >>> rounded_avg(7, 5)\n# -1\n# >>> rounded_avg(10, 20)\n# '0b1111'\n# >>> rounded_avg(20, 33)\n# '0b11010'\nrounded_avg <- function(n, m) {\n  if (n > m) {\n    return -1\n  }\n  avg <- (n + m) / 2\n  return avg\n}"], ["# Given a list of positive integers x. return a sorted list of all \n# elements that hasn't any even digit.\n# Note: Returned list should be sorted in increasing order.\n# For example:\n# >>> unique_digits(c(15, 33, 1422, 1))\n# c(1, 15, 33)\n# >>> unique_digits(c(152, 323, 1422, 10))\n# c()\nunique_digits <- function(x) {\n  x <- sort(x)\n  x <- unique(x)\n  x <- x[!x %in% 2]\n  x <- x[!x %in% 3]\n  x <- x[!x %in% 5]\n  x <- x[!x %in% 7]\n  x <- x[!x %in% 9]\n  x <- x[!x %in% 11]\n  x <- x[!x %in% 13]\n  x <- x[!x %in% 15]\n  x <- x[!x %in% 17]\n  x <- x[!x %in% 19]\n  x <- x[!x %in% 21]\n  x <- x[!x %in% 23]\n  x <- x[!x %in% 25]\n  x <- x[!x %in% 27]\n  x <- x[!x %in% 29]\n  x <- x[!x %in% 31]\n  x <- x[!x %in% 33]\n  x <- x[!x %in% 35]\n  x <- x[!x %in% 37]\n  x <- x[!x %in% 39]\n  x <- x[!x %in% 41]\n  x <- x[!x %in% 43]\n  x <- x[!x %in% 45]\n  x <- x[!x %in% 47]\n  x <- x[!x %in"], ["# Given a vector of integers, sort the integers that are between 1 and 9 inclusive,\n# reverse the resulting vector, and then replace each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> by_length(c(2, 1, 1, 4, 5, 8, 2, 3))\n# c('Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One')\n#   If the vector is empty, return an empty vector:\n# >>> by_length(c())\n# c()\n#   If the vector has any strange number ignore it:\n# >>> by_length(c(1, -1, 55))\n# c('One')\nby_length <- function(arr) {\n  arr <- as.numeric(arr)\n  arr <- arr[1:9]\n  arr <- arr[arr > 0]\n  arr <- arr[arr < 0]\n  arr <- arr[arr > 9]\n  arr <- arr[arr < 9]\n  arr <- arr[arr > 1]\n  arr <- arr[arr < 1]\n  arr <- arr[arr > 9]\n  arr <- arr[arr < 9]\n  arr <- arr[arr > 1]\n  arr <- arr[arr < 1]\n  arr <- arr[arr > 9]\n  arr <- arr[arr < 9]\n  arr <- arr[arr > 1]\n  arr <- arr[arr < 1]\n  arr <- arr[arr > 9]\n  arr <- arr[arr < 9]\n  arr <- arr[arr > 1]\n  arr <- arr[arr < 1]\n  arr <- arr[arr > 9]\n  arr <- arr[arr < 9]\n  arr <- arr[arr > 1]\n  arr <- arr[arr < 1]\n  arr <- arr[arr > 9]\n  arr <- arr[arr < 9]\n  arr <- arr[arr > 1]\n "], ["# Implement the function f that takes n as a parameter,\n# and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n# i starts from 1.\n# the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n# Example:\n# >>> f(5)\n# c(1, 2, 6, 24, 15)\nf <- function(n) {\n  if (n % 2 == 0) {\n    return(list(c(1, 2, 3, 4, 5), sum(c(1, 2, 3, 4, 5))))\n  } else {\n    return(list(c(1, 2, 3, 4, 5), sum(c(1, 2, 3, 4, 5)) + sum(c(1, 2, 3, 4, 5)))))\n  }\n} ```\n\nI hope this helps! Let me know if you have any more questions."], ["# Given a positive integer n, return a list that has the number of even and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n# Example 1:\n# >>> even_odd_palindrome(3)\n# c(1, 2)\n#     Explanation:\n#     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# >>> even_odd_palindrome(12)\n# c(4, 6)\n#     Explanation:\n#     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n#     1. 1 <= n <= 10^3\n#     2. returned list has the number of even and odd integer palindromes respectively.\neven_odd_palindrome <- function(n) {\n  even_odd_palindrome_helper(n, 1, 1)\n}\n\neven_odd_palindrome_helper <- function(n, start, end) {\n  if (end == n) {\n    return c(start, end)\n  }\n  if (n % 2 == 0) {\n    return even_odd_palindrome_helper(n, start + 1, end + 1)\n  }\n  return c(start, end)\n}"], ["# Write a function count_nums which takes a vector of integers and returns\n# the number of elements which has a sum of digits > 0.\n# If a number is negative, then its first signed digit will be negative:\n# e.g. -123 has signed digits -1, 2, and 3.\n# >>> count_nums(c())\n# 0\n# >>> count_nums(c(-1, 11, -11))\n# 1\n# >>> count_nums(c(1, 1, 2))\n# 3\ncount_nums <- function(arr) {\n  sum_digits <- function(x) {\n    x %/% 10\n  }\n  sum_digits(arr)\n}"], ["# We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n# numbers in the vector will be randomly ordered. Your task is to determine if\n# it is possible to get a vector sorted in non-decreasing order by performing \n# the following operation on the given vector:\n#     You are allowed to perform right shift operation any number of times.\n# One right shift operation means shifting all elements of the vector by one\n# position in the right direction. The last element of the vector will be moved to\n# the starting position in the vector i.e. 0th index. \n# If it is possible to obtain the sorted vector by performing the above operation\n# then return TRUE else return FALSE.\n# If the given vector is empty then return TRUE.\n# Note: The given list is guaranteed to have unique elements.\n# For Example:\n# >>> move_one_ball(c(3, 4, 5, 1, 2))\n# TRUE\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n#              be achieved for the given vector.\n# >>> move_one_ball(c(3, 5, 4, 1, 2))\n# FALSE\n# Explanation:It is not possible to get non-decreasing order for the given\n#             vector by performing any number of right shift operations.\nmove_one_ball <- function(arr) {\n  if (length(arr) == 0) return(TRUE)\n  if (length(arr) == 1) return(TRUE)\n  if (length(arr) == 2) {\n    if (arr[1] > arr[2]) return(TRUE)\n    if (arr[1] < arr[2]) return(FALSE)\n    return(move_one_ball(c(arr[1], arr[2])))\n  }\n  if (length(arr) == 3) {\n    if (arr[1] > arr[2] && arr[3] > arr[4]) return(TRUE)\n    if (arr[1] > arr[2] && arr[3] < arr[4]) return(FALSE)\n    if (arr[1] < arr"], ["# In this problem, you will implement a function that takes two lists of numbers,\n# and determines whether it is possible to perform an exchange of elements\n# between them to make lst1 a list of only even numbers.\n# There is no limit on the number of exchanged elements between lst1 and lst2.\n# If it is possible to exchange elements between the lst1 and lst2 to make\n# all the elements of lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n# >>> exchange(c(1, 2, 3, 4), c(1, 2, 3, 4))\n# 'YES'\n# >>> exchange(c(1, 2, 3, 4), c(1, 5, 3, 4))\n# 'NO'\n# It is assumed that the input lists will be non-empty.\nexchange <- function(lst1, lst2) {\n  if (length(lst1) != length(lst2)) {\n    return(\"NO\")\n  } else {\n    if (all(is.integer(lst1))) {\n      lst1 <- as.integer(lst1)\n    }\n    if (all(is.integer(lst2))) {\n      lst2 <- as.integer(lst2)\n    }\n    if (any(is.integer(lst1) & is.integer(lst2))) {\n      lst1 <- lst1 %/% lst2\n    }\n    if (any(is.integer(lst1) & !is.integer(lst2))) {\n      lst2 <- lst2 %/% lst1\n    }\n    if (all(is.integer(lst1) & is.integer(lst2))) {\n      lst1 <- lst1 %/% lst2\n    }\n    if (any(is.integer(lst1) & !is.integer(lst2))) {\n      lst2 <- lst2 %/% lst1\n    }\n    if (all(is.integer(lst1) & is.integer(lst2))) {\n      lst1 <- lst1 %/% lst2\n    }\n    if (any(is.integer(lst1) & !is.integer(lst2))) {\n      lst2 <- lst2 %"], ["# Given a string representing a space separated lowercase letters, return a named list\n# of the letter with the most repetition and containing the corresponding count.\n# If several letters have the same occurrence, return all of them.\n# Example:\n# >>> histogram('a b c')\n# list('a' = 1, 'b' = 1, 'c' = 1)\n# >>> histogram('a b b a')\n# list('a' = 2, 'b' = 2)\n# >>> histogram('a b c a b')\n# list('a' = 2, 'b' = 2)\n# >>> histogram('b b b b a')\n# list('b' = 4)\n# >>> histogram('')\n# list()\nhistogram <- function(test) {\n  test <- strsplit(test, split = \" \")\n  histogram_list <- list()\n  for (i in 1:length(test)) {\n    if (test[i] %in% unique(test)) {\n      histogram_list[[i]] <- list(count = length(test[i]), letter = test[i])\n    } else {\n      histogram_list[[i]] <- list(count = 0, letter = \"\")\n    }\n  }\n  histogram_list\n}"], ["# Task\n# We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n# then check if the result string is palindrome.\n# A string is called palindrome if it reads the same backward as forward.\n# You should return a list containing the result string and TRUE/FALSE for the check.\n# Example\n# >>> reverse_delete('abcde', 'ae')\n# list('bcd', FALSE)\n# >>> reverse_delete('abcdef', 'b')\n# list('acdef', FALSE)\n# >>> reverse_delete('abcdedcba', 'ab')\n# list('cdedc', TRUE)\nreverse_delete <- function(s, c) {\n  if (length(s) < 2) {\n    return(list(s, FALSE))\n  }\n  else {\n    c_s <- c(s[-1], s[-2])\n    return(list(c_s, reverse_delete(s[-1], c_s)))\n  }\n}"], ["# Given a list of strings, where each string consists of only digits, return a list.\n# Each element i of the output should be \"the number of odd elements in the\n# string i of the input.\" where all the i's should be replaced by the number\n# of odd digits in the i'th string of the input.\n# >>> odd_count(c('1234567'))\n# c('the number of odd elements 4n the str4ng 4 of the 4nput.')\n# >>> odd_count(c('3', '11111111'))\n# c('the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 8n the str8ng 8 of the 8nput.')\nodd_count <- function(lst) {\n  lst <- strsplit(lst, \"\")\n  lst <- lapply(lst, function(x) {\n    x <- strsplit(x, \"\")\n    x <- lapply(x, function(y) {\n      y <- strsplit(y, \"\")\n      y <- lapply(y, function(z) {\n        z <- strsplit(z, \"\")\n        z <- lapply(z, function(w) {\n          w <- strsplit(w, \"\")\n          w <- lapply(w, function(x) {\n            x <- strsplit(x, \"\")\n            x <- lapply(x, function(y) {\n              y <- strsplit(y, \"\")\n              y <- lapply(y, function(z) {\n                z <- strsplit(z, \"\")\n                z <- lapply(z, function(w) {\n                  w <- strsplit(w, \"\")\n                  w <- lapply(w, function(x) {\n                    x <- strsplit(x, \"\")\n                    x <- lapply(x, function(y) {\n                      y <- strsplit(y, \"\")\n                      y <- lapply(y, function(z) {\n                        z <- strsplit(z, \"\")\n                        z <- lapply(z, function(w) {\n                          w <- strsplit(w, \"\")\n                          w <- lapply(w"], ["# Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n# of nums.\n# Example\n# >>> minSubArraySum(c(2, 3, 4, 1, 2, 4))\n# 1\n# >>> minSubArraySum(c(-1, -2, -3))\n# -6\nminSubArraySum <- function(nums) {\n  nums <- as.vector(nums)\n  if (length(nums) < 2) {\n    return(0)\n  }\n  sum <- 0\n  for (i in 1:length(nums)) {\n    sum <- sum + nums[i]\n    if (sum < 0) {\n      return(sum)\n    }\n  }\n  return(sum)\n}"], ["# You are given a rectangular grid of wells. Each row represents a single well,\n# and each 1 in a row represents a single unit of water.\n# Each well has a corresponding bucket that can be used to extract water from it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets to empty the wells.\n# Output the number of times you need to lower the buckets.\n# Example 1:\n# >>> max_fill(list(c(0, 0, 1, 0), c(0, 1, 0, 0), c(1, 1, 1, 1)), 1)\n# 6\n# Example 2:\n# >>> max_fill(list(c(0, 0, 1, 1), c(0, 0, 0, 0), c(1, 1, 1, 1), c(0, 1, 1, 1)), 2)\n# 5\n# Example 3:\n# >>> max_fill(list(c(0, 0, 0), c(0, 0, 0)), 5)\n# 0\n# Constraints:\n#     * all wells have the same length\n#     * 1 <= grid.length <= 10^2\n#     * 1 <= grid[:,1].length <= 10^2\n#     * grid[i][j] -> 0 | 1\n#     * 1 <= capacity <= 10\nmax_fill <- function(grid, capacity) {\n  n <- length(grid)\n  m <- n * n\n  buckets <- rep(0, m)\n  buckets[1] <- 1\n  buckets[2] <- 1\n  buckets[3] <- 1\n  buckets[4] <- 1\n  buckets[5] <- 1\n  buckets[6] <- 1\n  buckets[7] <- 1\n  buckets[8] <- 1\n  buckets[9] <- 1\n  buckets[10] <- 1\n  buckets[11] <- 1\n  buckets[12]"], ["# In this Kata, you have to sort a vector of non-negative integers according to\n# number of ones in their binary representation in ascending order.\n# For similar number of ones, sort based on decimal value.\n# It must be implemented like this:\n# >>> sort_array(c(1, 5, 2, 3, 4))\n# c(1, 2, 3, 4, 5)\n# >>> sort_array(c(-2, -3, -4, -5, -6))\n# c(-6, -5, -4, -3, -2)\n# >>> sort_array(c(1, 0, 2, 3, 4))\n# c(0, 1, 2, 3, 4)\nsort_array <- function(arr) {\n  arr <- as.numeric(arr)\n  arr <- arr[arr > 0]\n  arr <- arr[arr < 0]\n  arr <- arr[arr > 0]\n  arr <- arr[arr < 0]\n  arr <- arr[arr > 0]\n  arr <- arr[arr < 0]\n  arr <- arr[arr > 0]\n  arr <- arr[arr < 0]\n  arr <- arr[arr > 0]\n  arr <- arr[arr < 0]\n  arr <- arr[arr > 0]\n  arr <- arr[arr < 0]\n  arr <- arr[arr > 0]\n  arr <- arr[arr < 0]\n  arr <- arr[arr > 0]\n  arr <- arr[arr < 0]\n  arr <- arr[arr > 0]\n  arr <- arr[arr < 0]\n  arr <- arr[arr > 0]\n  arr <- arr[arr < 0]\n  arr <- arr[arr > 0]\n  arr <- arr[arr < 0]\n  arr <- arr[arr > 0]\n  arr <- arr[arr < 0]\n  arr <- arr[arr > 0]\n  arr <- arr[arr < 0]\n  arr <- arr[arr > 0]\n  arr <- arr[arr < 0]\n  arr <-"], ["# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# >>> select_words('Mary had a little lamb', 4)\n# c('little')\n# >>> select_words('Mary had a little lamb', 3)\n# c('Mary', 'lamb')\n# >>> select_words('simple white space', 2)\n# c()\n# >>> select_words('Hello world', 4)\n# c('world')\n# >>> select_words('Uncle sam', 3)\n# c('Uncle')\nselect_words <- function(s, n) {\n  words <- strsplit(s, \"\")\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words[1:n]\n  words <- words"], ["# You are given a word. Your task is to find the closest vowel that stands between \n# two consonants from the right side of the word (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n# find any vowel met the above condition. \n# You may assume that the given string contains English letter only.\n# Example:\n# >>> get_closest_vowel('yogurt')\n# 'u'\n# >>> get_closest_vowel('FULL')\n# 'U'\n# >>> get_closest_vowel('quick')\n# ''\n# >>> get_closest_vowel('ab')\n# ''\nget_closest_vowel <- function(word) {\n  vowels <- c('a', 'e', 'i', 'o', 'u')\n  vowel_index <- which(word %in% vowels)\n  if (length(vowel_index) == 0) {\n    return('')\n  }\n  vowel_index[1]\n}"], ["# You are given a list of two strings, both strings consist of open\n# parentheses '(' or close parentheses ')' only.\n# Your job is to check if it is possible to concatenate the two strings in\n# some order, that the resulting string will be good.\n# A string S is considered to be good if and only if all parentheses in S\n# are balanced. For example: the string '(())()' is good, while the string\n# '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n# Examples:\n# >>> match_parens(c('()(', ')'))\n# 'Yes'\n# >>> match_parens(c(')', ')'))\n# 'No'\nmatch_parens <- function(lst) {\n  lst <- strsplit(lst, '\\\\(')\n  lst <- strsplit(lst[[1]], '\\\\)')\n  lst <- strsplit(lst[[1]], '\\\\)')\n  lst <- strsplit(lst[[1]], '\\\\)')\n  lst <- strsplit(lst[[1]], '\\\\)')\n  lst <- strsplit(lst[[1]], '\\\\)')\n  lst <- strsplit(lst[[1]], '\\\\)')\n  lst <- strsplit(lst[[1]], '\\\\)')\n  lst <- strsplit(lst[[1]], '\\\\)')\n  lst <- strsplit(lst[[1]], '\\\\)')\n  lst <- strsplit(lst[[1]], '\\\\)')\n  lst <- strsplit(lst[[1]], '\\\\)')\n  lst <- strsplit(lst[[1]], '\\\\)')\n  lst <- strsplit(lst[[1]], '\\\\)')\n  lst <- strsplit(lst[[1]], '\\\\)')\n  lst <- strsplit(lst[[1]], '\\\\)')\n  lst <- strsplit(lst[[1]], '\\\\)')\n  lst <- strsplit(lst[[1]], '\\\\)')\n  lst <- strsplit(lst[[1]], '\\\\)')\n  lst <- strsplit(lst[[1]], '\\\\)')\n  lst <- strsplit(lst[[1]], '\\\\)')\n  lst <- strsplit(lst[[1]], '\\\\"], ["# Given a vector arr of integers and a positive integer k, return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>> maximum(c(-3, -4, 5), 3)\n# c(-4, -3, 5)\n# Example 2:\n# >>> maximum(c(4, -4, 4), 2)\n# c(4, 4)\n# Example 3:\n# >>> maximum(c(-3, 2, 1, 2, -1, -2, 1), 1)\n# c(2)\n# Note:\n#     1. The length of the vector will be in the range of [1, 1000].\n#     2. The elements in the vector will be in the range of [-1000, 1000].\n#     3. 0 <= k <= len(arr)\nmaximum <- function(arr, k) {\n  arr <- sort(arr)\n  max <- arr[1:k]\n  max[k] <- arr[k]\n  max\n}"], ["# Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n# Examples\n# >>> solution(c(5, 8, 7, 1))\n# 12\n# >>> solution(c(3, 3, 3, 3, 3))\n# 9\n# >>> solution(c(30, 13, 24, 321))\n# 0\nsolution <- function(lst) {\n  lst <- as.list(lst)\n  lst <- lst[lst %in% 1:2]\n  lst <- lst[lst %in% 3:4]\n  lst <- lst[lst %in% 5:6]\n  lst <- lst[lst %in% 7:8]\n  lst <- lst[lst %in% 9:10]\n  lst <- lst[lst %in% 11:12]\n  lst <- lst[lst %in% 13:14]\n  lst <- lst[lst %in% 15:16]\n  lst <- lst[lst %in% 17:18]\n  lst <- lst[lst %in% 19:20]\n  lst <- lst[lst %in% 21:22]\n  lst <- lst[lst %in% 23:24]\n  lst <- lst[lst %in% 25:26]\n  lst <- lst[lst %in% 27:28]\n  lst <- lst[lst %in% 29:30]\n  lst <- lst[lst %in% 31:32]\n  lst <- lst[lst %in% 33:34]\n  lst <- lst[lst %in% 35:36]\n  lst <- lst[lst %in% 37:38]\n  lst <- lst[lst %in% 39:40]\n  lst <- lst[lst %in% 41:42]\n  lst <- lst[lst %in% 43:44]\n  lst <- lst[lst %in% 45:46]\n  lst <- lst["], ["# Given a non-empty vector of integers arr and an integer k, return\n# the sum of the elements with at most two digits from the first k elements of arr.\n# Example:\n# >>> add_elements(c(111, 21, 3, 4000, 5, 6, 7, 8, 9), 4)\n# 24\n# Constraints:\n#     1. 1 <= len(arr) <= 100\n#     2. 1 <= k <= len(arr)\nadd_elements <- function(arr, k) {\n  n <- length(arr)\n  m <- k\n  if (n < m) {\n    arr <- arr[1:m]\n  }\n  arr <- arr[1:n]\n  sum <- 0\n  for (i in 1:n) {\n    sum <- sum + arr[i]\n  }\n  return(sum)\n}"], ["# Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n# The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n# as follows: start with any positive integer n. Then each term is obtained from the \n# previous term as follows: if the previous term is even, the next term is one half of \n# the previous term. If the previous term is odd, the next term is 3 times the previous\n# term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n# Note: \n#     1. Collatz(1) is [1].\n#     2. returned list sorted in increasing order.\n# For example:\n# get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n# >>> get_odd_collatz(5)\n# c(1, 5)\nget_odd_collatz <- function(n) {\n  c <- c(1, 5)\n  while (n > 1) {\n    if (n % 2 == 0) {\n      c[2] <- c[1] + c[3]\n      n <- n / 2\n    } else {\n      c[1] <- c[2] + c[3]\n      n <- n * 3 + 1\n    }\n  }\n  return(c)\n}"], ["# You have to write a function which validates a given date string and\n# returns TRUE if the date is valid otherwise FALSE.\n# The date is valid if all of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n# 3. The months should not be less than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n# >>> valid_date('03-11-2000')\n# TRUE\n# >>> valid_date('15-01-2012')\n# FALSE\n# >>> valid_date('04-0-2040')\n# FALSE\n# >>> valid_date('06-04-2020')\n# TRUE\n# >>> valid_date('06/04/2020')\n# FALSE\nvalid_date <- function(date) {\n  if (length(date) != 8) {\n    return(FALSE)\n  }\n  if (is.numeric(date[1])) {\n    if (date[1] < 1 || date[1] > 31) {\n      return(FALSE)\n    }\n    if (date[2] < 1 || date[2] > 30) {\n      return(FALSE)\n    }\n    if (date[3] < 1 || date[3] > 29) {\n      return(FALSE)\n    }\n    if (date[4] < 1 || date[4] > 12) {\n      return(FALSE)\n    }\n    if (date[5] < 1 || date[5] > 12) {\n      return(FALSE)\n    }\n    if (date[6] < 1 || date[6] > 1"], ["# Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n# should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> split_words('Hello world!')\n# c('Hello', 'world!')\n# >>> split_words('Hello,world!')\n# c('Hello', 'world!')\n# >>> split_words('abcdef')\n# 3\nsplit_words <- function(txt) {\n  txt <- strsplit(txt, \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt[[1]], \" \")\n  txt <- strsplit(txt"], ["# Given a list of numbers, return whether or not they are sorted\n# in ascending order. If list has more than 1 duplicate of the same\n# number, return FALSE. Assume no negative numbers and only integers.\n# Examples\n# >>> is_sorted(c(5))\n# TRUE\n# >>> is_sorted(c(1, 2, 3, 4, 5))\n# TRUE\n# >>> is_sorted(c(1, 3, 2, 4, 5))\n# FALSE\n# >>> is_sorted(c(1, 2, 3, 4, 5, 6))\n# TRUE\n# >>> is_sorted(c(1, 2, 3, 4, 5, 6, 7))\n# TRUE\n# >>> is_sorted(c(1, 3, 2, 4, 5, 6, 7))\n# FALSE\n# >>> is_sorted(c(1, 2, 2, 3, 3, 4))\n# TRUE\n# >>> is_sorted(c(1, 2, 2, 2, 3, 4))\n# FALSE\nis_sorted <- function(lst) {\n  if (length(lst) < 2) {\n    return(FALSE)\n  }\n  if (length(lst) == 1) {\n    return(TRUE)\n  }\n  if (all(is.numeric(lst))) {\n    return(TRUE)\n  }\n  if (all(is.integer(lst))) {\n    return(TRUE)\n  }\n  if (all(is.logical(lst))) {\n    return(TRUE)\n  }\n  return(FALSE)\n}"], ["# You are given two intervals,\n# where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n# The given intervals are closed which means that the interval (start, end)\n# includes both start and end.\n# For each given interval, it is assumed that its start is less or equal its end.\n# Your task is to determine whether the length of intersection of these two \n# intervals is a prime number.\n# Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If the length of the intersection is a prime number, return \"YES\",\n# otherwise, return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output] samples:\n# >>> intersection(c(1, 2), c(2, 3))\n# 'NO'\n# >>> intersection(c(-1, 1), c(0, 4))\n# 'NO'\n# >>> intersection(c(-3, -1), c(-5, 5))\n# 'YES'\nintersection <- function(interval1, interval2) {\n  if (interval1[1] > interval2[2]) {\n    return(FALSE)\n  } else {\n    return(TRUE)\n  }\n}"], ["# You are given a vector arr of integers and you need to return\n# sum of magnitudes of integers multiplied by product of all signs\n# of each number in the vector, represented by 1, -1 or 0.\n# Note: return NULL for empty arr.\n# Example:\n# >>> prod_signs(c(1, 2, 2, -4))\n# 9\n# >>> prod_signs(c(0, 1))\n# 0\n# >>> prod_signs(c())\n# NULL\nprod_signs <- function(arr) {\n  if (length(arr) == 0) {\n    return(NULL)\n  }\n  prod_signs_helper(arr, 1)\n}\nprod_signs_helper <- function(arr, sign) {\n  if (length(arr) == 0) {\n    return(NULL)\n  }\n  prod_signs_helper(arr[1:length(arr) - 1], sign * sign)\n}"], ["# Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n# each cell of the grid contains a value. Every integer in the range [1, N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have to find the minimum path of length k in the grid. You can start\n# from any cell, and in each step you can move to any of the neighbor cells,\n# in other words, you can go to cells which share an edge with you current\n# cell.\n# Please note that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n# You CANNOT go off the grid.\n# A path A (of length k) is considered less than a path B (of length k) if\n# after making the ordered lists of the values on the cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically less\n# than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j] = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered list of the values on the cells that the minimum path go through.\n# Examples:    \n# >>> minPath(list(c(1, 2, 3), c(4, 5, 6), c(7, 8, 9)), 3)\n# c(1, 2, 1)\n# >>> minPath(list(c(5, 9, 3), c(4, 1, 6), c(7, 8, 2)), 1)\n# c(1)\nminPath <- function(grid, k) {\n  n <- length(grid)\n  m <- length(grid[1])\n  path <- vector(m, length = n)\n  path[1] <- grid[1]\n  for (i in 2:n) {\n    path[i] <- min(path[i - 1], grid[i])"], ["# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n# the last couple centuries. However, what people don't know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n#        = 2 + 3 + 3 = 8 \n# You are given a non-negative integer number n, you have to a return a list of the \n# first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> tri(3)\n# c(1, 3, 2, 8)\ntri <- function(n) {\n  if (n < 0) {\n    return(c(1, 0, 0, 0))\n  }\n  if (n == 0) {\n    return(c(0, 0, 0, 0))\n  }\n  if (n == 1) {\n    return(c(1, 0, 0, 0))\n  }\n  return(c(tri(n - 1), tri(n - 2), tri(n - 3), tri(n - 4)))\n}"], ["# Given a positive integer n, return the product of the odd digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> digits(1)\n# 1\n# >>> digits(4)\n# 0\n# >>> digits(235)\n# 15\ndigits <- function(n) {\n  if (n == 0) {\n    return 0\n  }\n  if (n % 2 == 0) {\n    return n\n  }\n  return digits(n / 2) * n\n} ```\n\nI hope this helps! Let me know if you have any more questions."], ["# Create a function that takes a string as input which contains only square brackets.\n# The function should return TRUE if and only if there is a valid subsequence of brackets \n# where at least one bracket in the subsequence is nested.\n# >>> is_nested('[[]]')\n# TRUE\n# >>> is_nested('[]]]]]]][[[[[]')\n# FALSE\n# >>> is_nested('[][]')\n# FALSE\n# >>> is_nested('[]')\n# FALSE\n# >>> is_nested('[[][]]')\n# TRUE\n# >>> is_nested('[[]][[')\n# TRUE\nis_nested <- function(string) {\n  if (length(string) == 0) {\n    return(FALSE)\n  }\n  if (length(string) == 1) {\n    return(TRUE)\n  }\n  if (length(string) == 2) {\n    if (string[1] == \"[\") {\n      return(TRUE)\n    }\n    if (string[2] == \"]\") {\n      return(TRUE)\n    }\n    return(FALSE)\n  }\n  if (length(string) == 3) {\n    if (string[1] == \"[\") {\n      if (string[2] == \"]\") {\n        return(TRUE)\n      }\n      return(FALSE)\n    }\n    if (string[2] == \"]\") {\n      return(TRUE)\n    }\n    if (string[3] == \"]\") {\n      return(TRUE)\n    }\n    return(FALSE)\n  }\n  return(FALSE)\n}"], ["# You are given a list of numbers.\n# You need to return the sum of squared numbers in the given list,\n# round each element in the list to the upper int(Ceiling) first.\n# Examples:\n# >>> lst(c(1.0, 2.0, 3.0))\n# 14\n# >>> lst(c(1.0, 4.0, 9.0))\n# 98\n# >>> lst(c(1.0, 3.0, 5.0, 7.0))\n# 84\n# >>> lst(c(1.4, 4.2, 0.0))\n# 29\n# >>> lst(c(-2.4, 1.0, 1.0))\n# 6\nsum_squares <- function(lst) {\n  lst <- as.numeric(lst)\n  lst <- lapply(lst, function(x) {\n    x * x\n  })\n  lst <- lapply(lst, function(x) {\n    x * x\n  })\n  lst <- lapply(lst, function(x) {\n    x * x\n  })\n  lst <- lapply(lst, function(x) {\n    x * x\n  })\n  lst <- lapply(lst, function(x) {\n    x * x\n  })\n  lst <- lapply(lst, function(x) {\n    x * x\n  })\n  lst <- lapply(lst, function(x) {\n    x * x\n  })\n  lst <- lapply(lst, function(x) {\n    x * x\n  })\n  lst <- lapply(lst, function(x) {\n    x * x\n  })\n  lst <- lapply(lst, function(x) {\n    x * x\n  })\n  lst <- lapply(lst, function(x) {\n    x * x\n  })\n  lst <- lapply(lst, function(x) {\n    x * x\n  })\n  lst <- lapply(lst, function(x) {\n    x * x\n  })\n  lst <- lapply(lst, function(x) {\n    x * x\n"], ["# Create a function that returns TRUE if the last character\n# of a given string is an alphabetical character and is not\n# a part of a word, and FALSE otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n# >>> check_if_last_char_is_a_letter('apple pie')\n# FALSE\n# >>> check_if_last_char_is_a_letter('apple pi e')\n# TRUE\n# >>> check_if_last_char_is_a_letter('apple pi e ')\n# FALSE\n# >>> check_if_last_char_is_a_letter('')\n# FALSE\ncheck_if_last_char_is_a_letter <- function(txt) {\n  return(any(grepl(\"[a-zA-Z]\", txt, perl = TRUE)))\n}"], ["# Create a function which returns the largest index of an element which\n# is not greater than or equal to the element immediately preceding it. If\n# no such element exists then return -1. The given vector will not contain\n# duplicate values.\n# Examples:\n# >>> can_arrange(c(1, 2, 4, 3, 5))\n# 3\n# >>> can_arrange(c(1, 2, 3))\n# -1\ncan_arrange <- function(arr) {\n  arr <- as.vector(arr)\n  arr <- arr[arr > arr[-1]]\n  arr <- arr[arr > arr[-2]]\n  arr <- arr[arr > arr[-3]]\n  arr <- arr[arr > arr[-4]]\n  arr <- arr[arr > arr[-5]]\n  arr <- arr[arr > arr[-6]]\n  arr <- arr[arr > arr[-7]]\n  arr <- arr[arr > arr[-8]]\n  arr <- arr[arr > arr[-9]]\n  arr <- arr[arr > arr[-10]]\n  arr <- arr[arr > arr[-11]]\n  arr <- arr[arr > arr[-12]]\n  arr <- arr[arr > arr[-13]]\n  arr <- arr[arr > arr[-14]]\n  arr <- arr[arr > arr[-15]]\n  arr <- arr[arr > arr[-16]]\n  arr <- arr[arr > arr[-17]]\n  arr <- arr[arr > arr[-18]]\n  arr <- arr[arr > arr[-19]]\n  arr <- arr[arr > arr[-20]]\n  arr <- arr[arr > arr[-21]]\n  arr <- arr[arr > arr[-22]]\n  arr <- arr[arr > arr[-23]]\n  arr <- arr[arr > arr[-24]]\n  arr <- arr[arr > arr[-25]]\n  arr <- arr[arr > arr[-26]]\n  arr <- arr[arr > arr[-27]]\n  arr <- arr[arr > arr[-28]]\n  arr <- arr[arr > arr[-29]]\n  arr <- arr[arr > arr[-30]]\n  arr"], ["# Create a function that returns a list (a, b), where 'a' is\n# the largest of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n# If there is no negative or positive integers, return them as NULL.\n# Examples:\n# >>> largest_smallest_integers(c(2, 4, 1, 3, 5, 7))\n# list(NULL, 1)\n# >>> largest_smallest_integers(c())\n# list(NULL, NULL)\n# >>> largest_smallest_integers(c(0))\n# list(NULL, NULL)\nlargest_smallest_integers <- function(lst) {\n  if (length(lst) == 0) {\n    return(c(NULL, NULL))\n  }\n  if (all(is.numeric(lst))) {\n    lst <- as.numeric(lst)\n  }\n  lst <- c(lst[lst < 0], lst[lst > 0])\n  lst <- c(lst[lst < 0], lst[lst > 0])\n  lst <- c(lst[lst < 0], lst[lst > 0])\n  lst <- c(lst[lst < 0], lst[lst > 0])\n  lst <- c(lst[lst < 0], lst[lst > 0])\n  lst <- c(lst[lst < 0], lst[lst > 0])\n  lst <- c(lst[lst < 0], lst[lst > 0])\n  lst <- c(lst[lst < 0], lst[lst > 0])\n  lst <- c(lst[lst < 0], lst[lst > 0])\n  lst <- c(lst[lst < 0], lst[lst > 0])\n  lst <- c(lst[lst < 0], lst[lst > 0])\n  lst <- c(lst[lst < 0], lst[lst > 0])\n  lst <- c(lst[lst < 0], lst[lst > 0])\n  lst <- c(lst[lst < 0], lst[lst > 0])\n  lst <- c(lst[lst < 0], lst[lst > "], ["# Create a function that takes integers, floats, or strings representing\n# real numbers, and returns the larger variable in its given variable type.\n# Return NULL if the values are equal.\n# Note: If a real number is represented as a string, the floating point might be . or ,\n# >>> compare_one(1, 2.5)\n# 2.5\n# >>> compare_one(1, '2,3')\n# '2,3'\n# >>> compare_one('5,1', '6')\n# '6'\n# >>> compare_one('1', 1)\n# NULL\ncompare_one <- function(a, b) {\n  if (is.numeric(a) && is.numeric(b)) {\n    return(a > b)\n  } else if (is.numeric(a) && is.numeric(b)) {\n    return(a < b)\n  } else if (is.numeric(a) && is.numeric(b)) {\n    return(a == b)\n  } else if (is.numeric(a) && is.character(b)) {\n    return(a == b)\n  } else if (is.character(a) && is.numeric(b)) {\n    return(a == b)\n  } else {\n    return(NULL)\n  }\n}"], ["# Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n# Example\n# >>> is_equal_to_sum_even(4)\n# FALSE\n# >>> is_equal_to_sum_even(6)\n# FALSE\n# >>> is_equal_to_sum_even(8)\n# TRUE\nis_equal_to_sum_even <- function(n) {\n  if (n < 0) {\n    return FALSE\n  }\n  if (n % 2 == 0) {\n    return FALSE\n  }\n  if (n % 4 == 0) {\n    return FALSE\n  }\n  return TRUE\n}"], ["# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n# 288\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\nspecial_factorial <- function(n) {\n  if (n < 0) {\n    stop(\"The special factorial cannot be computed for negative integers.\")\n  }\n  if (n == 0) {\n    return(1)\n  }\n  if (n == 1) {\n    return(1)\n  }\n  return(n * special_factorial(n-1) * special_factorial(n-2) * ... * 1)\n}"], ["# Given a string text, replace all spaces in it with underscores, \n# and if a string has more than 2 consecutive spaces, \n# then replace all consecutive spaces with - \n# >>> fix_spaces(' Example')\n# 'Example'\n# >>> fix_spaces(' Example 1')\n# 'Example_1'\n# >>> fix_spaces(' Example 2')\n# '_Example_2'\n# >>> fix_spaces(' Example 3')\n# '_Example-3'\nfix_spaces <- function(text) {\n  text <- gsub(\"\\\\s+\", \"_\", text)\n  text <- gsub(\"\\\\s+\", \"-\", text)\n  return(text)\n}"], ["# Create a function which takes a string representing a file's name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n# A file's name is considered to be valid if and only if all the following conditions \n# are met:\n# - There should not be more than three digits ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring before the dot should not be empty, and it starts with a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> file_name_check('example.txt')\n# 'Yes'\n# >>> file_name_check('1example.dll')\n# 'No'\nfile_name_check <- function(file_name) {\n  if (length(file_name) > 3) {\n    return(FALSE)\n  }\n  if (any(grepl(\"[0-9]\", file_name))) {\n    return(TRUE)\n  }\n  if (grepl(\"[a-z]\", file_name[1:2])) {\n    return(TRUE)\n  }\n  if (grepl(\"[a-z]\", file_name[3:4])) {\n    return(TRUE)\n  }\n  return(FALSE)\n}"], ["# \"\n# This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n# multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n# change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n# Examples:\n# >>> lst\n# c(1, 2, 3)\n# >>> lst\n# c()\n# >>> lst\n# c(-1, -5, 2, -1, -5)\nsum_squares <- function(lst) {\n  sum <- 0\n  for (i in 1:length(lst)) {\n    if (i % 3 == 0 && i % 4 != 0) {\n      sum <- sum + lst[i] * lst[i]\n    } else if (i % 3 != 0 && i % 4 == 0) {\n      sum <- sum + lst[i] * lst[i]\n    } else {\n      sum <- sum + lst[i] * lst[i]\n    }\n  }\n  return(sum)\n}"], ["# You are given a string representing a sentence,\n# the sentence contains some words separated by a space,\n# and you have to return a string that contains the words from the original sentence,\n# whose lengths are prime numbers,\n# the order of the words in the new string should be the same as the original one.\n# Example 1:\n# >>> words_in_sentence('This is a test')\n# 'is'\n# Example 2:\n# >>> words_in_sentence('lets go for swimming')\n# 'go for'\n# Constraints:\n#     * 1 <= len(sentence) <= 100\n#     * sentence contains only letters\nwords_in_sentence <- function(sentence) {\n    words <- strsplit(sentence, \"\")\n    words <- sapply(words, function(x) {\n        length(x) > 1L && length(x) %in% 2L\n    })\n    words <- sapply(words, function(x) {\n        x[!x %in% 0L]\n    })\n    words <- sapply(words, function(x) {\n        x[!x %in% 0L]\n    })\n    words <- sapply(words, function(x) {\n        x[!x %in% 0L]\n    })\n    words <- sapply(words, function(x) {\n        x[!x %in% 0L]\n    })\n    words <- sapply(words, function(x) {\n        x[!x %in% 0L]\n    })\n    words <- sapply(words, function(x) {\n        x[!x %in% 0L]\n    })\n    words <- sapply(words, function(x) {\n        x[!x %in% 0L]\n    })\n    words <- sapply(words, function(x) {\n        x[!x %in% 0L]\n    })\n    words <- sapply(words, function(x) {\n        x[!x %in% 0L]\n    })\n    words <- sapply(words, function(x) {\n        x[!x %in% 0"], ["# Your task is to implement a function that will simplify the expression\n# x * n. The function returns TRUE if x * n evaluates to a whole number and FALSE\n# otherwise. Both x and n, are string representation of a fraction, and have the following format,\n# <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n# You can assume that x, and n are valid fractions, and do not have zero as denominator.\n# >>> simplify('1/5', '5/1')\n# TRUE\n# >>> simplify('1/6', '2/1')\n# FALSE\n# >>> simplify('7/10', '10/2')\n# FALSE\nsimplify <- function(x, n) {\n  if (n == 0) {\n    return(FALSE)\n  }\n  if (is.numeric(x) && is.numeric(n) && x %/% n == 0) {\n    return(TRUE)\n  }\n  return(FALSE)\n}"], ["# Write a function which sorts the given list of integers\n# in ascending order according to the sum of their digits.\n# Note: if there are several items with similar sum of their digits,\n# order them based on their index in original list.\n# For example:\n# >>> order_by_points(c(1, 11, -1, -11, -12))\n# c(-1, -11, 1, -12, 11)\n# >>> order_by_points(c())\n# c()\norder_by_points <- function(nums) {\n  nums <- sort(nums)\n  nums <- nums[1:length(nums) - 1]\n  nums <- nums[nums %in% nums[1:length(nums) - 1]]\n  nums\n}"], ["# Write a function that takes a vector of numbers as input and returns \n# the number of elements in the vector that are greater than 10 and both \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# >>> specialFilter(c(15, -73, 14, -15))\n# 1\n# >>> specialFilter(c(33, -2, -3, 45, 21, 109))\n# 2\nspecialFilter <- function(nums) {\n  nums <- as.numeric(nums)\n  return(sum(nums[nums > 10 & (nums[1] %/% 2) %/% 2 == 1 & (nums[2] %/% 2) %/% 2 == 1 & (nums[3] %/% 2) %/% 2 == 1) & (nums[4] %/% 2) %/% 2 == 1 & (nums[5] %/% 2) %/% 2 == 1 & (nums[6] %/% 2) %/% 2 == 1 & (nums[7] %/% 2) %/% 2 == 1 & (nums[8] %/% 2) %/% 2 == 1 & (nums[9] %/% 2) %/% 2 == 1 & (nums[10] %/% 2) %/% 2 == 1 & (nums[11] %/% 2) %/% 2 == 1 & (nums[12] %/% 2) %/% 2 == 1 & (nums[13] %/% 2) %/% 2 == 1 & (nums[14] %/% 2) %/% 2 == 1 & (nums[15] %/% 2) %/% 2 == 1) & (nums[16] %/% 2) %/% 2 == 1 & (nums[17] %/% 2) %/% 2 == 1 & (nums[18] %/% 2) %/%"], ["# You are given a positive integer n. You have to create an integer vector a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n#     and a[i] + a[j] + a[k] is a multiple of 3.\n#     Example :\n#     >>> get_max_triples(5)\n#     1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\nget_max_triples <- function(n) {\n  a <- rep(0, n)\n  a[1] <- 1\n  a[2] <- 3\n  a[3] <- 5\n  a[4] <- 7\n  a[5] <- 9\n  a[6] <- 11\n  a[7] <- 13\n  a[8] <- 15\n  a[9] <- 17\n  a[10] <- 19\n  a[11] <- 21\n  a[12] <- 23\n  a[13] <- 25\n  a[14] <- 27\n  a[15] <- 29\n  a[16] <- 31\n  a[17] <- 33\n  a[18] <- 35\n  a[19] <- 37\n  a[20] <- 39\n  a[21] <- 41\n  a[22] <- 43\n  a[23] <- 45\n  a[24] <- 47\n  a[25] <- 49\n  a[26] <- 51\n  a[27] <- 53\n  a[28] <- 55\n  a[29] <- 57\n  a[30] <-"], ["# There are eight planets in our solar system: the closerst to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names as strings planet1 and planet2. \n# The function should return a list containing all planets whose orbits are \n# located between the orbit of planet1 and the orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should return an empty list if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>> bf('Jupiter', 'Neptune')\n# c('Saturn', 'Uranus')\n# >>> bf('Earth', 'Mercury')\n# 'Venus'\n# >>> bf('Mercury', 'Uranus')\n# c('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\nbf <- function(planet1, planet2) {\n  if (!is.character(planet1) || !is.character(planet2)) {\n    return(c())\n  }\n  if (planet1 == planet2) {\n    return(list(planet1))\n  }\n  if (planet1 == \"Mercury\" || planet1 == \"Venus\") {\n    return(list(planet2))\n  }\n  if (planet2 == \"Earth\" || planet2 == \"Mars\") {\n    return(list(planet1))\n  }\n  if (planet1 == \"Venus\" || planet1 == \"Earth\") {\n    return(list(planet2))\n  }\n  if (planet1 == \"Mars\" || planet1 == \"Jupiter\") {\n    return(list(planet2))\n  }\n  if (planet1 == \"Saturn\" || planet1 == \"Uranus\") {\n    return(list(planet2))\n  }\n  return(list())\n}"], ["# Write a function that accepts a list of strings as a parameter,\n# deletes the strings that have odd lengths from it,\n# and returns the resulted list with a sorted order,\n# The list is always a list of strings and never a vector of numbers,\n# and it may contain duplicates.\n# The order of the list should be ascending by length of each word, and you\n# should return the list sorted by that rule.\n# If two words have the same length, sort the list alphabetically.\n# The function should return a list of strings in sorted order.\n# You may assume that all words will have the same length.\n# For example:\n# >>> list_sort(c('aa', 'a', 'aaa'))\n# c('aa')\n# >>> list_sort(c('ab', 'a', 'aaa', 'cd'))\n# c('ab', 'cd')\nsorted_list_sum <- function(lst) {\n  lst <- sort(lst, decreasing = TRUE)\n  lst <- unique(lst)\n  lst <- lapply(lst, function(x) {\n    if (length(x) %in% c(1, 2)) {\n      x <- paste(x, collapse = \"\")\n    } else {\n      x <- paste(x, collapse = \"\")\n    }\n    x\n  })\n  lst\n}"], ["# A simple program which should return the value of x if n is \n# a prime number and should return the value of y otherwise.\n# Examples:\n# >>> x_or_y(7, 34, 12)\n# 34\n# >>> x_or_y(15, 8, 5)\n# 5\nx_or_y <- function(n, x, y) {\n  if (n == 2) {\n    return(x)\n  } else if (n % 2 == 0) {\n    return(y)\n  } else {\n    return(x + y)\n  }\n}"], ["# Given a list of numbers, return the sum of squares of the numbers\n# in the list that are odd. Ignore numbers that are negative or not integers.\n# >>> double_the_difference(c(1, 3, 2, 0))\n# 10\n# >>> double_the_difference(c(-1, -2, 0))\n# 0\n# >>> double_the_difference(c(9, -2))\n# 81\n# >>> double_the_difference(c(0))\n# 0\n# If the input list is empty, return 0.\ndouble_the_difference <- function(lst) {\n  if (length(lst) == 0) {\n    return(0)\n  }\n  return(sum(abs(lst) * (1 + abs(lst))))\n}"], ["# I think we all remember that feeling when the result of some long-awaited\n# event is finally known. The feelings and thoughts you have at that moment are\n# definitely worth noting down and comparing.\n# Your task is to determine if a person correctly guessed the results of a number of matches.\n# You are given two vectors of scores and guesses of equal length, where each index shows a match. \n# Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n# the value is 0, and if not, the value is the absolute difference between the guess and the score.\n# example:\n# >>> compare(c(1, 2, 3, 4, 5, 1), c(1, 2, 3, 4, 2, -2))\n# c(0, 0, 0, 0, 3, 3)\n# >>> compare(c(0, 5, 0, 0, 0, 4), c(4, 1, 1, 0, 0, -2))\n# c(4, 4, 1, 0, 0, 6)\ncompare <- function(game, guess) {\n  n <- length(game)\n  result <- rep(0, n)\n  for (i in 1:n) {\n    result[i] <- abs(game[i] - guess[i])\n  }\n  return(result)\n}"], ["# You will be given the name of a class (a string) and a list of extensions.\n# The extensions are to be used to load additional classes to the class. The\n# strength of the extension is as follows: Let CAP be the number of the uppercase\n# letters in the extension's name, and let SM be the number of lowercase letters \n# in the extension's name, the strength is given by the fraction CAP - SM. \n# You should find the strongest extension and return a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more extensions with the same strength, you should\n# choose the one that comes first in the list.\n# For example, if you are given \"Slices\" as the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n# Example:\n# >>> Strongest_Extension('my_class', c('AA', 'Be', 'CC'))\n# 'my_class.AA'\nStrongest_Extension <- function(class_name, extensions) {\n  max_strength <- 0\n  for (i in 1:length(extensions)) {\n    strength <- str_extract(extensions[i], \"\\\\d+\")\n    if (strength > max_strength) {\n      max_strength <- strength\n      class_name_ext <- str_extract(class_name, \"\\\\d+\")\n      class_name_ext_strength <- str_extract(class_name_ext, \"\\\\d+\")\n      class_name_ext_strength <- max(class_name_ext_strength, max_strength)\n    }\n  }\n  return(class_name[max_strength])\n}"], ["# You are given 2 words. You need to return TRUE if the second word or any of its rotations is a substring in the first word\n# >>> cycpattern_check('abcd', 'abd')\n# FALSE\n# >>> cycpattern_check('hello', 'ell')\n# TRUE\n# >>> cycpattern_check('whassup', 'psus')\n# FALSE\n# >>> cycpattern_check('abab', 'baa')\n# TRUE\n# >>> cycpattern_check('efef', 'eeff')\n# FALSE\n# >>> cycpattern_check('himenss', 'simen')\n# TRUE\ncycpattern_check <- function(a, b) {\n  if (length(a) != length(b)) return(FALSE)\n  for (i in 1:length(a)) {\n    if (a[i] != b[i]) return(FALSE)\n  }\n  return(TRUE)\n}"], ["# Given an integer. return a list that has the number of even and odd digits respectively.\n# Example:\n#     >>> even_odd_count(-12)\n#     c(1, 1)\n#     >>> even_odd_count(123)\n#     c(1, 2)\neven_odd_count <- function(num) {\n  if (num < 0) {\n    return c(0, 0)\n  } else if (num % 2 == 0) {\n    return c(1, 0)\n  } else {\n    return c(0, 1)\n  }\n} ```\n\nNow, we can use this function to count the number of even and odd digits in a number.\n"], ["# Given a positive integer, obtain its roman numeral equivalent as a string,\n# and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n# >>> int_to_mini_roman(19)\n# 'xix'\n# >>> int_to_mini_roman(152)\n# 'clii'\n# >>> int_to_mini_roman(426)\n# 'cdxxvi'\nint_to_mini_roman <- function(number) {\n  if (number < 10) {\n    return \"I\"\n  } else if (number < 20) {\n    return \"II\"\n  } else if (number < 50) {\n    return \"III\"\n  } else if (number < 100) {\n    return \"IV\"\n  } else if (number < 400) {\n    return \"V\"\n  } else if (number < 500) {\n    return \"VI\"\n  } else if (number < 900) {\n    return \"VII\"\n  } else if (number < 1000) {\n    return \"VIII\"\n  } else if (number < 9000) {\n    return \"IX\"\n  } else if (number < 10000) {\n    return \"X\"\n  } else if (number < 40000) {\n    return \"XI\"\n  } else if (number < 100000) {\n    return \"XII\"\n  } else if (number < 400000) {\n    return \"XIII\"\n  } else if (number < 1000000) {\n    return \"XIV\"\n  } else if (number < 4000000) {\n    return \"XV\"\n  } else if (number < 10000000) {\n    return \"XVI\"\n  } else if (number < 40000000) {\n    return \"XVII\"\n  } else if (number"], ["# Given the lengths of the three sides of a triangle. Return TRUE if the three\n# sides form a right-angled triangle, FALSE otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# >>> right_angle_triangle(3, 4, 5)\n# TRUE\n# >>> right_angle_triangle(1, 2, 3)\n# FALSE\nright_angle_triangle <- function(a, b, c) {\n  if (a == 0) {\n    return FALSE\n  } else if (b == 0) {\n    return TRUE\n  } else if (c == 0) {\n    return FALSE\n  } else if (a == b) {\n    return TRUE\n  } else if (b == c) {\n    return TRUE\n  } else if (a == c) {\n    return TRUE\n  } else {\n    return FALSE\n  }\n}"], ["# Write a function that accepts a list of strings.\n# The list contains different words. Return the word with maximum number\n# of unique characters. If multiple strings have maximum number of unique\n# characters, return the one which comes first in lexicographical order.\n# >>> find_max(c('name', 'of', 'string'))\n# 'string'\n# >>> find_max(c('name', 'enam', 'game'))\n# 'enam'\n# >>> find_max(c('aaaaaaa', 'bb', 'cc'))\n# 'aaaaaaa'\nfind_max <- function(words) {\n  max_len <- 0\n  max_char <- 0\n  for (i in 1:length(words)) {\n    if (length(words[i]) > max_len) {\n      max_len <- length(words[i])\n      max_char <- i\n    }\n  }\n  words[max_char]\n}"], ["# You're a hungry rabbit, and you already have eaten a certain number of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n# you should return a vector of [ total number of eaten carrots after your meals,\n#                                 the number of carrots left after your meals ]\n# if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n# >>> eat(5, 6, 10)\n# c(11, 4)\n# >>> eat(4, 8, 9)\n# c(12, 1)\n# >>> eat(1, 10, 10)\n# c(11, 0)\n# >>> eat(2, 11, 5)\n# c(7, 0)\n# Variables:\n# @number : integer\n#     the number of carrots that you have eaten.\n# @need : integer\n#     the number of carrots that you need to eat.\n# @remaining : integer\n#     the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\neat <- function(number, need, remaining) {\n  if (number < 0) {\n    stop(\"number should be a positive integer\")\n  }\n  if (need < 0) {\n    stop(\"need should be a positive integer\")\n  }\n  if (remaining < 0) {\n    stop(\"remaining should be a positive integer\")\n  }\n  if (number == 0) {\n    stop(\"you are already full\")\n  }\n  if (number == need) {\n    stop(\"you are already full\")\n  }\n  if (number == remaining) {\n    stop(\"you are already full\")\n  }\n  if (number == 0) {\n    stop(\"you are already full\")\n  }\n  if (number == remaining) {"], ["# Given two lists operator, and operand. The first list has basic algebra operations, and \n# the second list is a list of integers. Use the two given lists to build the algebric \n# expression and return the evaluation of this expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+', '*', '-']\n# vector = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n#     The length of operator list is equal to the length of operand list minus one.\n#     Operand is a list of of non-negative integers.\n#     Operator list has at least one operator, and operand list has at least two operands.\ndo_algebra <- function(operator, operand) {\n  if (length(operator) != length(operand) - 1) {\n    stop(\"Error: operator and operand list have different lengths.\")\n  }\n  if (length(operator) == 0) {\n    return(0)\n  }\n  if (length(operator) == 1) {\n    return(operator[1])\n  }\n  if (length(operator) == 2) {\n    return(operator[1] + operator[2])\n  }\n  if (length(operator) == 3) {\n    return(operator[1] * operator[2])\n  }\n  if (length(operator) == 4) {\n    return(operator[1] / operator[2])\n  }\n  if (length(operator) == 5) {\n    return(operator[1] ** operator[2])\n  }\n  stop(\"Error: operator and operand list have different lengths.\")\n}"], ["# You are given a string s.\n# if s[i] is a letter, reverse its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string contains no letters, reverse the string.\n# The function should return the resulted string.\n# Examples\n# >>> solve('1234')\n# '4321'\n# >>> solve('ab')\n# 'AB'\n# >>> solve('#a@C')\n# '#A@c'\nsolve <- function(s) {\n  if (length(s) == 0) {\n    return(s)\n  }\n  if (s[1] == 'a' || s[1] == 'A') {\n    return(s[2:length(s)])\n  }\n  return(s[1:2] * reverse(s[3:length(s)]) * s[length(s) + 1:length(s) + 2])\n}"], ["# Given a string 'text', return its md5 hash equivalent string.\n# If 'text' is an empty string, return NULL.\n# >>> string_to_md5('Hello world')\n# '3e25960a79dbc69b674cd4ec67a72c62'\nstring_to_md5 <- function(text) {\n  if (is.null(text)) {\n    return(NULL)\n  }\n  return(md5(text))\n} ```\n\n3. `string_to_md5_file`: This function takes a file path and returns its md5 hash.\n"], ["# Given two positive integers a and b, return the even digits between a\n# and b, in ascending order.\n# For example:\n# >>> generate_integers(2, 8)\n# c(2, 4, 6, 8)\n# >>> generate_integers(8, 2)\n# c(2, 4, 6, 8)\n# >>> generate_integers(10, 14)\n# c()\ngenerate_integers <- function(a, b) {\n  if (b < a) {\n    return(c(a, b))\n  } else {\n    return(c(b, a))\n  }\n}"]]