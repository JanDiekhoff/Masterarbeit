[["\n\n# <func> # Python \n# Write a function to find the shared elements from the given two lists.\ndef similar_elements(test_tup1, test_tup2):\n    return [i for i in test_tup1 if i in test_tup2]\n\n# <func> # Python \n# Write a function to find the longest common subsequence.\ndef longest_common_subsequence(s1, s2):\n    n = len(s1)\n    m = len(s2)\n    dp = [[0] * m for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][m]\n\n# <func> # Python \n# Write a function to find the longest common subsequence.\ndef longest_common_subsequence_recursive(s1, s2):\n    n = len(s1)\n    m = len(s2)\n    dp = [[0] * m for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][m]\n\n# <func> # Python \n# Write a function to find the longest common subsequence.\ndef longest_common_subsequence"], ["\nimport math\n\n# <func> # Python \n# Write a python function to identify non-prime numbers.\ndef is_not_prime(n):\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    for I in range(3, int(math.sqrt(n)) + 1):\n        if n % I == 0:\n            return False\n    return True\n\n# <func> # Python \n# Write a python function to find the sum of the first n terms of the Fibonacci sequence.\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)\n\n# <func> # Python \n# Write a python function to find the sum of the first n terms of the Fibonacci sequence.\ndef fibonacci_sum(n):\n    return fibonacci(n)\n\n# <func> # Python \n# Write a python function to find the sum of the first n terms of the Fibonacci sequence.\ndef fibonacci_sum_2(n):\n    return fibonacci(n) + fibonacci(n - 1)\n\n# <func> # Python \n# Write a python function to find the sum of the first n terms of the Fibonacci sequence.\ndef fibonacci_sum_3(n):\n    return fibonacci(n) + fibonacci(n - 2)\n\n# <func> # Python \n# Write a python function to find the sum of the first n terms of the Fibonacci sequence.\ndef fibonacci_sum_4(n):\n    return fibonacci(n) + fibonacci(n - 3)\n\n# <func> # Python \n# Write a python function to find the sum of the first n terms of the Fibonacci sequence.\ndef fibonacci_sum_5(n):\n    return fibonacci(n) + fibonacci(n - 4)\n\n# <func> # Python \n# Write a python function to find the"], ["\nimport heapq as hq\n\n# <func> # Python \n# Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n\n# Example usage:\nnums = [10, 5, 15, 12, 18, 17, 13, 11, 14, 16]\nlargest = heap_queue_largest(nums, 5)"], ["\n\n# <func> # Python \n# Write a python function to check whether the two numbers differ at one bit position only or not.\ndef is_Power_Of_Two(x: int):\n    return x & (x - 1) == 0\n\n# Test the function with some examples."], ["\nimport re\n\n# <func> # Python \n# Write a function to find all words which are at least 4 characters long in a string.\ndef find_char_long(text):\n    return [word for word in text.split() if len(word) >= 4]"], ["\n\n# <func> # Python \n# Write a function to find squares of individual elements in a list.\ndef square_nums(nums):\n    return [num ** 2 for num in nums]\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\ndef find_Rotations(s):\n    return len(s)\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch):\n    return s.replace(ch, '')\n\n# <func> # Python \n# Remove all occurrences of a given character from the string.\ndef remove_all(s,ch):\n    return s.replace(ch, '')\n\n# <func> # Python \n# Remove all occurrences of a given character from the string.\ndef remove_all_occ(s,ch):\n    return s.replace(ch, '')\n\n# <func> # Python \n# Remove all occurrences of a given character from the string.\ndef remove_all_occ_from_start(s,ch):\n    return s.replace(ch, '')\n\n# <func> # Python \n# Remove all occurrences of a given character from the string.\ndef remove_all_occ_from_end(s,ch):\n    return s.replace(ch, '')\n\n# <func> # Python \n# Remove all occurrences of a given character from the string.\ndef remove_all_occ_from_both_end(s,ch):\n    return s.replace(ch, '')\n\n# <func> # Python \n# Remove all occurrences of a given character from the string.\ndef remove_all_occ_from_both_end_and_start(s,ch):\n    return s.replace(ch, '')\n\n# <func> # Python \n# Remove all occurrences of a given character from the string.\ndef remove_all_occ_from_both_end_and_start_and_end(s,ch):\n    return s.replace(ch, '')\n\n# <func> # Python \n# Remove all occurrences of a given character from the string.\ndef remove_all_occ_from_both_end_and_start_and_end_and_start(s,ch):\n    return s.replace(ch, '')\n\n# <func> # Python \n# Remove all occurrences of a given character from the string.\ndef remove_all_occ_from_both_end_and_start_and_end_and_"], ["\n\n# <func> # Python \n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n    return M.transpose() + M\n\n# Test the function\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"], ["\n\n# <func> # Python \n# Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h):\n    return (l*b*h) / 3\n\n# Testing the function"], ["\nimport re\n\n# <func> # Python \n# Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\ndef text_lowercase_underscore(text):\n    return re.search(r'[a-z_]+', text) is not None\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function that returns the perimeter of a square given its side length as input.\ndef square_perimeter(a):\n    return 4 * a\n\n# Test the function with different side lengths."], ["\n\n# <func> # Python \n# Write a function to remove characters from the first string which are present in the second string.\ndef remove_dirty_chars(string, second_string):\n    return string.replace(second_string, '')\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\n    return arraynums.count(1) == len(arraynums)\n\n# <func> # Python \n# Test the function with some sample inputs.\ntest_duplicate_1(arraynums=[1, 2, 3, 1, 4, 2, 1, 3, 4, 2])\ntest_duplicate_2(arraynums=[1, 2, 3, 1, 4, 2, 1, 3, 4, 2])\ntest_duplicate_3(arraynums=[1, 2, 3, 1, 4, 2, 1, 3, 4, 2])\ntest_duplicate_4(arraynums=[1, 2, 3, 1, 4, 2, 1, 3, 4, 2])\ntest_duplicate_5(arraynums=[1, 2, 3, 1, 4, 2, 1, 3, 4, 2])\ntest_duplicate_6(arraynums=[1, 2, 3, 1, 4, 2, 1, 3, 4, 2])\ntest_duplicate_7(arraynums=[1, 2, 3, 1, 4, 2, 1, 3, 4, 2])\ntest_duplicate_8(arraynums=[1, 2, 3, 1, 4, 2, 1, 3, 4, 2])\ntest_duplicate_9(arraynums=[1, 2, 3, 1, 4, 2, 1, 3, 4, 2])\ntest_duplicate_10(arraynums=[1, 2, 3, 1, 4, 2, 1, 3, 4, 2])\ntest_duplicate_11(arraynums=[1, 2, 3, 1,"], ["\n\n# <func> # Python \n# Write a function to check if the given number is woodball or not.\ndef is_woodall(x):\n    return x == 1 or x == 2 or x == 3 or x == 4 or x == 5 or x == 6 or x == 7 or x == 8 or x == 9 or x == 10 or x == 11 or x == 12 or x == 13 or x == 14 or x == 15 or x == 16 or x == 17 or x == 18 or x == 19 or x == 20 or x == 21 or x == 22 or x == 23 or x == 24 or x == 25 or x == 26 or x == 27 or x == 28 or x == 29 or x == 30 or x == 31 or x == 32 or x == 33 or x == 34 or x == 35 or x == 36 or x == 37 or x == 38 or x == 39 or x == 40 or x == 41 or x == 42 or x == 43 or x == 44 or x == 45 or x == 46 or x == 47 or x == 48 or x == 49 or x == 50 or x == 51 or x == 52 or x == 53 or x == 54 or x == 55 or x == 56 or x == 57 or x == 58 or x == 59 or x == 60 or x == 61 or x == 62 or x == 63 or x == 64 or x == 65 or x == 66 or x == 67 or x == 68 or x == 69 or x == 70 or x == 71 or x == 72 or x == 73 or x == 74 or x == 75 or x == 76 or x == 77 or x == 78 or x == 79 or x == 80 or x"], ["\n\n# <func> # Python \n# Write a python function to check if a given number is one less than twice its reverse.\ndef check(n):\n    return n % 2 == 1\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a python function to find the largest number that can be formed with the given list of digits.\ndef find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    return max_num\nn\n# <func> # Python \n# Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y):\n    if x > y:\n        return True\n    else:\n        return False\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to find the nth octagonal number.\ndef is_octagonal(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n\n# Test the function"], ["\nfrom collections import \n# <func> # Python \n# Write a python function to count the number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i + 1]:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to find the longest palindrome.\ndef longest_palindrome(s):\n    longest = 0\n    for i in range(len(s)):\n        if s[i] == s[i + 1]:\n            longest = max(longest, i - 1)\n    return longest\n# <func> # Python \n# Write a python function to find the longest palindrome in a string.\ndef longest_palindrome_in_string(s):\n    longest = 0\n    for i in range(len(s)):\n        if s[i] == s[i + 1]:\n            longest = max(longest, i - 1)\n    return longest\n# <func> # Python \n# Write a python function to find the longest palindrome in a list.\ndef longest_palindrome_in_list(lst):\n    longest = 0\n    for i in range(len(lst)):\n        if lst[i] == lst[i + 1]:\n            longest = max(longest, i - 1)\n    return longest\n# <func> # Python \n# Write a python function to find the longest palindrome in a string.\ndef longest_palindrome_in_string(s):\n    longest = 0\n    for i in range(len(s)):\n        if s[i] == s[i + 1]:\n            longest = max(longest, i - 1)\n    return longest\n# <func> # Python \n# Write a python function to find the longest palindrome in a list.\ndef longest_palindrome_in_list(lst):\n    longest = 0\n    for i in range(len(lst)):\n        if lst[i] == lst[i + 1]:\n            longest"], ["\n\n# <func> # Python \n# Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n    return xs[0]\n\n# Test function"], ["\n\n# <func> # Python \n# Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n    max_diff = 0\n    for pair in test_list:\n        max_diff = max(max_diff, pair[0] - pair[1])\n    return max_diff\n\n# Testing the function\ntest_list = [('apple', 'banana'), ('banana', 'orange'), ('orange', 'grape'), ('grape', 'pear'), ('pear', 'kiwi')]"], ["\n\n# <func> # Python \n# Write a function to sort a list of tuples using the second value of each tuple.\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n\n# Test the function\nsubject_marks([('A', 10), ('B', 9), ('C', 8), ('D', 7), ('E', 6), ('F', 5), ('G', 4), ('H', 3), ('I', 2), ('J', 1)])"], ["\n\n# <func> # Python \n# Write a function to flatten a list and sum all of its elements.\ndef recursive_list_sum(data_list):\n    return sum(data_list)\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a python function to count the number of positive numbers in a list.\ndef pos_count(l):\n    count = 0\n    for num in l:\n        if num > 0:\n            count += 1\n    return count\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to find the number of ways to partition a set of Bell numbers.\ndef bell_number(n):\n    return binomial_coefficient(n, n)\n\n# Test the function with some examples."], ["\n\n# <func> # Python \n# Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A):\n    if len(A) == 0:\n        return True\n    else:\n        return True if A[0] <= A[1] else False\n\n# <func> # Python \n# Write a python function to find the maximum value in an array.\ndef max_value(arr):\n    max_val = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n    return max_val\n\n# <func> # Python \n# Write a python function to find the minimum value in an array.\ndef min_value(arr):\n    min_val = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n    return min_val\n\n# <func> # Python \n# Write a python function to find the sum of all elements in an array.\ndef sum_of_array(arr):\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n\n# <func> # Python \n# Write a python function to find the average of all elements in an array.\ndef average_of_array(arr):\n    sum = sum_of_array(arr)\n    return sum / len(arr)\n\n# <func> # Python \n# Write a python function to find the median of an array.\ndef median_of_array(arr):\n    if len(arr) % 2 == 0:\n        return arr[len(arr) // 2]\n    else:\n        return (arr[len(arr) // 2 - 1] + arr[len(arr) // 2]) / 2\n\n# <func> # Python \n# Write a python function to find the mode of an array.\ndef mode_of_array(arr):\n    if len(arr) == 0:\n        return None\n    else:\n        return"], ["\n\n# <func> # Python \n# Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n    return l == s[:len(s) - len(l)]\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to find whether all the given tuples have equal length or not.\ndef get_equal(Input):\n    return len(Input) == len(set(Input))\n\n# <func> # Python \n# Test the function with some sample input.\ndef test():\n    assert get_equal([(1, 2), (1, 2), (1, 2)]) == True\n    assert get_equal([(1, 2), (1, 3), (1, 4)]) == False\n    assert get_equal([(1, 2), (1, 3), (1, 4), (1, 5)]) == False\n    assert get_equal([(1, 2), (1, 3), (1, 4), (1, 5), (1, 6)]) == True\n    assert get_equal([(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7)]) == False\n    assert get_equal([(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8)]) == True\n    assert get_equal([(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9)]) == False\n    assert get_equal([(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10)]) == True\n    assert get_equal([(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11)]) == False\n    assert get_equal([(1, 2), ("], ["\n\n# <func> # Python \n# Write a function to sort a list of elements.\ndef comb_sort(nums):\n    n = len(nums)\n    for I in range(n):\n        for j in range(i + 1, n):\n            if nums[j] < nums[j - 1]:\n                nums[j], nums[j - 1] = nums[j - 1], nums[j]\n    return nums\nn\n# <func> # Python \n# Write a python function to check whether the given number can be represented as the difference of two squares or not.\ndef dif_Square(n):\n    if n == 0:\n        return True\n    else:\n        return (n % 4 == 0) and (n % 2 == 0)\n\n# Test cases"], ["\n\n# <func> # Python \n# Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):\n    return True if all(patterns[i] == colors[i] for i in range(len(patterns))) else False\n\nn\n# <func> # Python \n# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n    return [tuple(x) for x in test_list if all(y % K == 0 for y in x)]\n\n# Example usage:\ntest_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6)]"], ["\n\n# <func> # Python \n# Write a python function to find whether a number is divisible by 11.\ndef is_Diff(n):\n    return n % 11 == 0\n\n# Testing function"], ["\n\n# <func> # Python \n# Write a python function to check whether the length of the word is odd or not.\ndef word_len(s):\n    return len(s) % 2 == 1\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n):\n    return 2 * (n - 1) * (n - 2) * (n - 3) * (n - 4)\n\n# Test the function."], ["\nimport math\n\n# <func> # Python \n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return math.pi * r ** 2\n\n# Test the function."], ["\n\n# <func> # Python \n# Write a function to find the nth number in the newman conway sequence.\ndef sequence(n):\n    return [1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"], ["\nimport math\n\n# <func> # Python \n# Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n    return math.pi * r ** 2\n\n# Test the function."], ["\n\n# <func> # Python \n# Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\n    return 2 * n + 1\n\n# Test the function."], ["\nimport collections as ct\n\n# <func> # Python \n# Write a function to merge three dictionaries into a single dictionary.\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    return dict(ct.union(dict1,dict2),**dict3)\n\n# <func> # Python \n# Write a function to find the maximum value in a list.\ndef find_max(lst):\n    return max(lst)\n\n# <func> # Python \n# Write a function to find the minimum value in a list.\ndef find_min(lst):\n    return min(lst)\n\n# <func> # Python \n# Write a function to find the sum of a list.\ndef find_sum(lst):\n    return sum(lst)\n\n# <func> # Python \n# Write a function to find the product of a list.\ndef find_product(lst):\n    return product(lst)\n\n# <func> # Python \n# Write a function to find the length of a list.\ndef find_length(lst):\n    return len(lst)\n\n# <func> # Python \n# Write a function to find the sum of all elements in a list.\ndef find_sum_all(lst):\n    return sum(lst)\n\n# <func> # Python \n# Write a function to find the product of all elements in a list.\ndef find_product_all(lst):\n    return product(lst)\n\n# <func> # Python \n# Write a function to find the average of a list.\ndef find_average(lst):\n    return sum(lst) / len(lst)\n\n# <func> # Python \n# Write a function to find the median of a list.\ndef find_median(lst):\n    return sorted(lst)[len(lst) // 2]\n\n# <func> # Python \n# Write a function to find the mode of a list.\ndef find_mode(lst):\n    return max(lst)\n\n# <func> # Python \n# Write a function to find the sum of all elements in a list.\ndef find_sum_all_lst(lst):\n    return sum(lst)\n\n"], ["\nimport collections\n\n# <func> # Python \n# Write a function to get the frequency of all the elements in a list, returned as a dictionary.\ndef freq_count(list1):\n    freq = collections.Counter(list1)\n    return freq\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to find the closest smaller number than n.\ndef closest_num(N):\n    return min(N, key=lambda x: x - N)\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to find the length of the longest word.\ndef len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n# <func> # Python \n# Write a python function to find the longest word in a given string.\ndef longest_word(str):\n    max_len = 0\n    for word in str.split():\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n# <func> # Python \n# Write a python function to find the longest word in a given string.\ndef longest_word_2(str):\n    max_len = 0\n    for word in str.split():\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n# <func> # Python \n# Write a python function to find the longest word in a given string.\ndef longest_word_3(str):\n    max_len = 0\n    for word in str.split():\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n# <func> # Python \n# Write a python function to find the longest word in a given string.\ndef longest_word_4(str):\n    max_len = 0\n    for word in str.split():\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n# <func> # Python \n# Write a python function to find the longest word in a given string.\ndef longest_word_5(str):\n    max_len = 0\n    for word in str.split():\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n# <func> # Python \n# Write a python function to find the longest word in a given string.\ndef longest_word_6(str):\n    max_len ="], ["\n\n# <func> # Python \n# Write a function to check if a string is present as a substring in a given list of string values.\ndef find_substring(str1, sub_str):\n    return str1.find(sub_str) != -1\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to check whether the given number is undulating or not.\ndef is_undulating(n):\n    return n % 2 == 1\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a, b):\n    return a ** b\n\n# Example usage:"], ["\nfrom operator import itemgetter \n\n# <func> # Python \n# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list):\n    return test_list[0][1]\n\n# <func> # Python \n# Given a list of tuples, write a function that returns the second value of the tuple with the smallest second value.\ndef index_second(test_list):\n    return test_list[1][1]\n\n# <func> # Python \n# Given a list of tuples, write a function that returns the third value of the tuple with the smallest second value.\ndef index_third(test_list):\n    return test_list[2][1]\n\n# <func> # Python \n# Given a list of tuples, write a function that returns the fourth value of the tuple with the smallest second value.\ndef index_fourth(test_list):\n    return test_list[3][1]\n\n# <func> # Python \n# Given a list of tuples, write a function that returns the fifth value of the tuple with the smallest second value.\ndef index_fifth(test_list):\n    return test_list[4][1]\n\n# <func> # Python \n# Given a list of tuples, write a function that returns the sixth value of the tuple with the smallest second value.\ndef index_sixth(test_list):\n    return test_list[5][1]\n\n# <func> # Python \n# Given a list of tuples, write a function that returns the seventh value of the tuple with the smallest second value.\ndef index_seventh(test_list):\n    return test_list[6][1]\n\n# <func> # Python \n# Given a list of tuples, write a function that returns the eighth value of the tuple with the smallest second value.\ndef index_eighth(test_list):\n    return test_list[7][1]\n\n# <func> # Python \n# Given a list of tuples, write a function that returns the ninth value of the tuple with the smallest second value.\ndef index_ninth(test_"], ["\n\n# <func> # Python \n# Write a python function to find the length of the smallest list in a list of lists.\ndef Find_Min_Length(lst):\n    return min(len(lst), len(lst[0]))\n\n# Example usage:\nlst = [['apple', 'banana', 'orange'], ['banana', 'orange', 'apple'], ['apple', 'orange', 'banana']]"], ["\n\n# <func> # Python \n# Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\n    return sum(i for I in range(1, n+1) if n % I == 0)\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\ndef frequency_lists(list1):\n    freq = {}\n    for item in list1:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return freq\nn\n# <func> # Python \n# Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):\n    return sum([x * len(numbers) for x in numbers])\n\n# Test the function\nnumbers = [1, 2, 3, 4, 5]"], ["\n\n# <func> # Python \n# Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\ndef decimal_to_binary(n):\n    \"\"\"\n    :param n: Decimal number to convert\n    :return: Binary equivalent of the given decimal number\n    \"\"\"\n    return bin(n)[2:]\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\ndef next_smallest_palindrome(num):\n    \"\"\"\n    :param num: The integer to find the next smallest palindrome of.\n    :return: The next smallest palindrome of num.\n    \"\"\"\n    return next_smallest_palindrome_helper(num)\n\ndef next_smallest_palindrome_helper(num):\n    \"\"\"\n    :param num: The integer to find the next smallest palindrome of.\n    :return: The next smallest palindrome of num.\n    \"\"\"\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num % 2 == 0:\n        return num // 2\n    else:\n        return next_smallest_palindrome_helper(num // 2) + 1\n\n# Test cases"], ["\n\n# <func> # Python \n# Write a function to find the kth element in the given array using 1-based indexing.\ndef kth_element(arr, k):\n    return arr[k-1]\n\n# Test the function with some examples.\narr = [1, 2, 3, 4, 5]\nkth_element(arr, 3) # Output: 4\nkth_element(arr, 6) # Output: 5\nkth_element(arr, 10) # Output: 5\nkth_element(arr, 11) # Output: 6\nkth_element(arr, 12) # Output: 7\nkth_element(arr, 13) # Output: 8\nkth_element(arr, 14) # Output: 9\nkth_element(arr, 15) # Output: 10\nkth_element(arr, 16) # Output: 11\nkth_element(arr, 17) # Output: 12\nkth_element(arr, 18) # Output: 13\nkth_element(arr, 19) # Output: 14\nkth_element(arr, 20) # Output: 15\nkth_element(arr, 21) # Output: 16\nkth_element(arr, 22) # Output: 17\nkth_element(arr, 23) # Output: 18\nkth_element(arr, 24) # Output: 19\nkth_element(arr, 25) # Output: 20\nkth_element(arr, 26) # Output: 21\nkth_element(arr, 27) # Output: 22\nkth_element(arr, 28) # Output: 23\nkth_element(arr, 29) # Output: 24\nkth_element(arr, 30) # Output: 25\nkth_element(arr, 31) # Output: 26\nkth_element(arr,"], ["\n\n# <func> # Python \n# Write a function to convert a snake case string to camel case string.\ndef snake_to_camel(word):\n    return camel_to_snake(word)\n\n# <func> # Python \n# Write a function to convert a camel case string to snake case string.\ndef camel_to_snake(word):\n    return ''.join(x.capitalize() for x in word.split('_'))\n\n# <func> # Python \n# Write a function to convert a snake case string to camel case string.\ndef snake_to_camel_case(word):\n    return ''.join(x.lower() for x in word.split('_'))\n\n# <func> # Python \n# Write a function to convert a camel case string to snake case string.\ndef camel_to_snake_case(word):\n    return ''.join(x.capitalize() for x in word.split('_'))\n\n# <func> # Python \n# Write a function to convert a snake case string to camel case string.\ndef snake_to_camel_case_case(word):\n    return ''.join(x.lower() for x in word.split('_'))\n\n# <func> # Python \n# Write a function to convert a camel case string to snake case string.\ndef camel_to_snake_case_case(word):\n    return ''.join(x.capitalize() for x in word.split('_'))"], ["\n\n# <func> # Python \n# Write a function to find the Eulerian number a(n, m).\ndef eulerian_num(n, m):\n    return n * m + 1\n\n# Test the function."], ["\n\n# <func> # Python \n# Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(input_list):\n    sorted_list = []\n    for sublist in input_list:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n\n# Test the function\nsorted_list = sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']])"], ["\n\n# <func> # Python \n# Write a python function to count true booleans in the given list.\ndef count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\nn\n# <func> # Python \n# Write a function to append the given list to the given tuples.\ndef add_lists(test_list, test_tup):\n    return test_list + test_tup\n\n# Test the function."], ["\nimport heapq\n\n# <func> # Python \n# Write a function to merge three lists into a single sorted list.\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Merge two sorted lists into a single sorted list.\n    :param num1: first list\n    :param num2: second list\n    :param num3: third list\n    :return: sorted list\n    \"\"\"\n    # Initialize the merged list\n    merged_list = []\n    # Loop through the first list\n    for num in num1:\n        # Check if the current element is greater than the second element\n        if num > num2[0]:\n            # If it is, add it to the merged list\n            merged_list.append(num)\n        # If it is not, add it to the second list\n        else:\n            # Add it to the second list\n            num2.append(num)\n    # Loop through the second list\n    for num in num2:\n        # Check if the current element is greater than the third element\n        if num > num3[0]:\n            # If it is, add it to the merged list\n            merged_list.append(num)\n        # If it is not, add it to the third list\n        else:\n            num3.append(num)\n    # Return the merged list\n    return merged_list\n\n# Example usage\nnum1 = [1, 2, 3, 4, 5]\nnum2 = [6, 7, 8, 9, 10]\nnum3 = [11, 12, 13, 14, 15]"], ["\n\n# <func> # Python \n# Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\ndef odd_Equivalent(s,n):\n    return sum(s[i] == '1' for i in range(n))\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to find the common elements in given nested lists.\ndef common_in_nested_lists(nestedlist):\n    return [list1[i] for i, list1 in enumerate(nestedlist) if list1 != []]\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to convert a given tuple of positive integers into a single integer.\ndef tuple_to_int(nums):\n    return sum(nums)\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string):\n    return string.split()\n\n# Example usage:\nstring_to_list('hello world') # ['hello', 'world']\nstring_to_list('  hello world') # ['hello', 'world']\nstring_to_list('  hello world  ') # ['hello', 'world']\nstring_to_list('  hello world  ') # ['hello', 'world']\nstring_to_list('  hello world  ') # ['hello', 'world']\nstring_to_list('  hello world  ') # ['hello', 'world']\nstring_to_list('  hello world  ') # ['hello', 'world']\nstring_to_list('  hello world  ') # ['hello', 'world']\nstring_to_list('  hello world  ') # ['hello', 'world']\nstring_to_list('  hello world  ') # ['hello', 'world']\nstring_to_list('  hello world  ') # ['hello', 'world']\nstring_to_list('  hello world  ') # ['hello', 'world']\nstring_to_list('  hello world  ') # ['hello', 'world']\nstring_to_list('  hello world  ') # ['hello', 'world']\nstring_to_list('  hello world  ') # ['hello', 'world']\nstring_to_list('  hello world  ') # ['hello', 'world']\nstring_to_list('  hello world  ') # ['hello', 'world']\nstring_to_list('  hello world  ') # ['hello', 'world']\nstring_to_list('  hello world  ') # ['hello', 'world']\nstring_to_list('  hello world  ') # ['hello', 'world']\nstring_to_list('  hello world  ') # ['hello', 'world']\nstring_to_list('  hello world  ') # ['hello', 'world']\nstring_to_list('  hello world  ') # ['hello', 'world']\nstring_to_list('  hello world  ') # ['hello', 'world']\nstring_to_"], ["\n\n# <func> # Python \n# Write a python function to find the element that appears only once in a sorted array.\ndef search(arr):\n    return arr[0]\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], ["\n\n# <func> # Python \n# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1):\n    max_product = 0\n    for num1, num2 in list1:\n        if num1 > max_product:\n            max_product = num1\n        if num2 > max_product:\n            max_product = num2\n    return max_product\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to sum all amicable numbers from 1 to a specified number.\ndef div_sum(num):\n    sum = 0\n    for I in range(1, num):\n        if num % i == 0:\n            sum += i\n    return sum\n\n# Example usage:"], ["\nimport cmath\n\n# <func> # Python \n# Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\n    return cmath.angle(a,b)\n\n# <func> # Python \n# Get the magnitude of a complex number.\ndef magnitude(a,b):\n    return cmath.norm(a,b)\n\n# <func> # Python \n# Get the phase of a complex number.\ndef phase(a,b):\n    return cmath.phase(a,b)\n\n# <func> # Python \n# Get the real part of a complex number.\ndef real(a,b):\n    return a\n\n# <func> # Python \n# Get the imaginary part of a complex number.\ndef imaginary(a,b):\n    return b\n\n# <func> # Python \n# Get the argument of a complex number.\ndef argument(a,b):\n    return cmath.angle(a,b)\n\n# <func> # Python \n# Get the modulus of a complex number.\ndef modulus(a,b):\n    return cmath.norm(a,b)\n\n# <func> # Python \n# Get the absolute value of a complex number.\ndef abs(a,b):\n    return cmath.norm(a,b)\n\n# <func> # Python \n# Get the square root of a complex number.\ndef sqrt(a,b):\n    return cmath.sqrt(a,b)\n\n# <func> # Python \n# Get the absolute value of a complex number.\ndef abs_complex(a,b):\n    return cmath.norm(a,b)\n\n# <func> # Python \n# Get the conjugate of a complex number.\ndef conjugate(a,b):\n    return a.conjugate()\n\n# <func> # Python \n# Get the reciprocal of a complex number.\ndef reciprocal(a,b):\n    return a.conjugate() / b\n\n# <func> # Python \n# Get the conjugate of a complex number.\ndef conjugate_complex(a,b):\n"], ["\n\n# <func> # Python \n# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string):\n    return len(string) - sum(map(lambda x: x == '1', string))\n\n# Test cases"], ["\nimport math\n\n# <func> # Python \n# Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b):\n    if a == 0:\n        return 0\n    elif b == 0:\n        return 0\n    else:\n        return a + sum(sum(b, 0), 0)\n\n# <func> # Python \n# Write a python function to find the sum of all the numbers in a given list.\ndef sum_list(lst):\n    return sum(lst)\n\n# <func> # Python \n# Write a python function to find the sum of all the numbers in a given list.\ndef sum_list_2(lst):\n    return sum(lst)\n\n# <func> # Python \n# Write a python function to find the sum of all the numbers in a given list.\ndef sum_list_3(lst):\n    return sum(lst)\n\n# <func> # Python \n# Write a python function to find the sum of all the numbers in a given list.\ndef sum_list_4(lst):\n    return sum(lst)\n\n# <func> # Python \n# Write a python function to find the sum of all the numbers in a given list.\ndef sum_list_5(lst):\n    return sum(lst)\n\n# <func> # Python \n# Write a python function to find the sum of all the numbers in a given list.\ndef sum_list_6(lst):\n    return sum(lst)\n\n# <func> # Python \n# Write a python function to find the sum of all the numbers in a given list.\ndef sum_list_7(lst):\n    return sum(lst)\n\n# <func> # Python \n# Write a python function to find the sum of all the numbers in a given list.\ndef sum_list_8(lst):\n    return sum(lst)\n\n# <func> # Python \n# Write a python function to find the sum of all the numbers in a given list.\ndef sum_list_9(lst):\n    return sum(lst)\n\n# <func> # Python \n# Write a python function to find the sum of all"], ["\n\n# <func> # Python \n# Write a function to multiply two integers.\ndef multiply_int(x, y):\n    return x * y\n\n# Test the function."], ["\n\n# <func> # Python \n# Write a function to find words that are longer than n characters from a given list of words.\ndef long_words(n, s):\n    return [word for word in s if len(word) > n]\n# -\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to calculate whether the matrix is a magic square.\ndef magic_square_test(my_matrix):\n    return my_matrix[0][0] == my_matrix[1][1] and my_matrix[0][1] == my_matrix[2][2] and my_matrix[1][0] == my_matrix[2][1]\n\n# Test Magic Square"], ["\nfrom collections import \n# <func> # Python \n# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums):\n    max_freq = 0\n    max_num = 0\n    for num in nums:\n        if num > max_freq:\n            max_freq = num\n            max_num = num\n    return max_num, max_freq\n# Test cases\nnums = [1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53,"], ["\n\n# <func> # Python \n# Write a python function to reverse only the vowels of a given string (where y is not a vowel).\ndef reverse_vowels(str1):\n    return ''.join(c for c in str1 if c.isalpha() and c.lower() not in ('y', 'i', 'u'))"], ["\n\n# <func> # Python \n# Write a function to convert a tuple to a string.\ndef tup_string(tup1):\n    return '(' + ', '.join(map(str, tup1)) + ')'\n\n# Test the function."], ["\n\n# <func> # Python \n# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums):\n    return sum(nums) - sum(map(lambda x: -x, nums))\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to find the nth hexagonal number.\ndef hexagonal_num(n):\n    return hexagonal_num_helper(n, 0, 0)\n\n# <func> # Python \n# Helper function to find the nth hexagonal number.\ndef hexagonal_num_helper(n, i, j):\n    if i == n:\n        return j\n    elif i == 0:\n        return 0\n    elif i == 1:\n        return 1\n    else:\n        return hexagonal_num_helper(n, i - 1, j + 1) + hexagonal_num_helper(n, i + 1, j)\n\n# <func> # Python \n# Test the function."], ["\n\n# <func> # Python \n# Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\ndef zero_count(nums):\n    return sum(nums) - len(nums)\n\n# Test function"], ["\n\n# <func> # Python \n# Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    else:\n        return is_Sum_Of_Powers_Of_Two(n // 2)\n\nnimport math\n\n# <func> # Python \n# Write a function to find the circumference of a circle.\ndef circle_circumference(r):\n    return 2 * math.pi * r\n\n# Test the function with different values of r."], ["\n\n# <func> # Python \n# Write a function to flatten the list of lists into a single set of numbers.\ndef extract_singly(test_list):\n    return [item for sublist in test_list for item in sublist]\n\n# Test the function\ntest_list = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\nresult = extract_singly(test_list)"], ["\n\n# <func> # Python \n# Write a function to sort a list of elements.\ndef pancake_sort(nums):\n    return sorted(nums)\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to count number items that are identical in the same position of three given lists.\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        if abs(arr[i]) > max_diff:\n            max_diff = abs(arr[i])\n    return max_diff\nn\n# <func> # Python \n# Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\ndef find_solution(a, b, n):\n    if n == 0:\n        return None\n    if n == 1:\n        return (a, b)\n    return find_solution(a, b, n - 1)\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\ndef sum_series(n):\n    return n + (n - 2 * i) + (n - 4 * i) + ... + (n - (n - 1) * i)\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\ndef count_char_position(str1):\n    count = 0\n    for char in str1:\n        if char.isalpha():\n            if char.lower() in str1:\n                count += 1\n    return count\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function that counts the number of pairs of integers in a list that xor to an even number.\ndef find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        if A[i] ^ A[i + 1] == 1:\n            count += 1\n    return count\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a python function to find the smallest power of 2 greater than or equal to n.\ndef next_power_of_2(n):\n    return 2 ** (int(math.log(n, 2)) - 1)\n\n# Test function"], ["\n\n# <func> # Python \n# Write a function to count the number of occurrences of a number in a given list.\ndef frequency(a,x):\n    return a.count(x)\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to find the sum of numbers in a list within a range specified by two indices.\ndef sum_range_list(list1, m, n):\n    return sum(list1[m:n+m])\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to find the perimeter of a regular pentagon from the length of its sides.\ndef perimeter_pentagon(a):\n    return a * 4 + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + 2 * a + "], ["\n\n# <func> # Python \n# Write a function to count the number of occurence of the string 'std' in a given string.\ndef count_occurance(s):\n    return len(s.count('std'))\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n    return all(isinstance(element, type(element)) for element in test_tuple)\n\n# Example usage:\ntest_tuple = (1, 2, 3)"], ["\nfrom bisect import bisect_left, bisect_right\n\n# <func> # Python \n# Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\ndef is_majority(arr, n, x):\n    if n == 1:\n        return x == arr[0]\n    if n == 2:\n        if arr[0] == arr[1]:\n            return x == arr[0]\n        else:\n            return x == arr[1]\n    else:\n        return bisect_left(arr, x) == n - 1\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = 7"], ["\n\n# <func> # Python \n# Write a python function to count the number of set bits (binary digits with value 1) in a given number.\ndef count_Set_Bits(n):\n    count = 0\n    for I in range(1, 32):\n        if n & (1 << i):\n            count += 1\n    return count\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str1):\n    return str1[::-1]\n# -\n\n# Testing the function\nodd_values_string(\"hello world\")\n\n# Testing the function with a string of length 10\nodd_values_string(\"hello world\")\n\n# Testing the function with a string of length 11\nodd_values_string(\"hello world\")\n\n# Testing the function with a string of length 12\nodd_values_string(\"hello world\")\n\n# Testing the function with a string of length 13\nodd_values_string(\"hello world\")\n\n# Testing the function with a string of length 14\nodd_values_string(\"hello world\")\n\n# Testing the function with a string of length 15\nodd_values_string(\"hello world\")\n\n# Testing the function with a string of length 16\nodd_values_string(\"hello world\")\n\n# Testing the function with a string of length 17\nodd_values_string(\"hello world\")\n\n# Testing the function with a string of length 18\nodd_values_string(\"hello world\")\n\n# Testing the function with a string of length 19\nodd_values_string(\"hello world\")\n\n# Testing the function with a string of length 20\nodd_values_string(\"hello world\")\n\n# Testing the function with a string of length 21\nodd_values_string(\"hello world\")\n\n# Testing the function with a string of length 22\nodd_values_string(\"hello world\")\n\n# Testing the function with a string of length 23\nodd_values_string(\"hello world\")\n\n# Testing the function with a string of length 24\nodd_values_string(\"hello world\")\n\n# Testing the function with a string of length 25\nodd_values_string(\"hello world\")\n\n# Testing the function with a string of length 26\nodd_values_string(\"hello world\")\n\n# Testing the function with a string of length 27"], ["\n\n# <func> # Python \n# Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c):\n    return min(a,b,c)\n\n# Testing function"], ["\n\n# <func> # Python \n# Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\ndef replace_blank(str1, char):\n    return str1.replace(' ', char)\n\n# Example usage:"], ["\nimport heapq\n\n# <func> # Python \n# Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\ndef larg_nnum(list1, n):\n    heapq.heapify(list1)\n    return heapq.nlargest(n, list1)\n\n# Example usage:\nlarg_nnum([1, 2, 3, 4, 5], 2) # [4, 5]\nlarg_nnum([1, 2, 3, 4, 5], 3) # [1, 2, 3]\nlarg_nnum([1, 2, 3, 4, 5], 4) # [1, 2, 3, 4]\nlarg_nnum([1, 2, 3, 4, 5], 5) # [1, 2, 3, 4, 5]\nlarg_nnum([1, 2, 3, 4, 5], 6) # [1, 2, 3, 4, 5]\nlarg_nnum([1, 2, 3, 4, 5], 7) # [1, 2, 3, 4, 5]\nlarg_nnum([1, 2, 3, 4, 5], 8) # [1, 2, 3, 4, 5]\nlarg_nnum([1, 2, 3, 4, 5], 9) # [1, 2, 3, 4, 5]\nlarg_nnum([1, 2, 3, 4, 5], 10) # [1, 2, 3, 4, 5]\nlarg_nnum([1, 2, 3, 4, 5], 11) # [1, 2, 3, 4, 5]\nlarg_nnum([1, 2, 3, 4, 5], 12) # [1, 2, 3, 4, 5]\nlarg_nnum([1, 2,"], ["\nimport math\n\n# <func> # Python \n# Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r, h):\n    return math.pi * r * h\n\n# <func> # Python \n# Write a function to find the lateral surface area of a sphere.\ndef lateralsuface_sphere(r):\n    return math.pi * r * r\n\n# <func> # Python \n# Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r, h):\n    return math.pi * r * h\n\n# <func> # Python \n# Write a function to find the lateral surface area of a sphere.\ndef lateralsuface_sphere(r):\n    return math.pi * r * r\n\n# <func> # Python \n# Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r, h):\n    return math.pi * r * h\n\n# <func> # Python \n# Write a function to find the lateral surface area of a sphere.\ndef lateralsuface_sphere(r):\n    return math.pi * r * r\n\n# <func> # Python \n# Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r, h):\n    return math.pi * r * h\n\n# <func> # Python \n# Write a function to find the lateral surface area of a sphere.\ndef lateralsuface_sphere(r):\n    return math.pi * r * r\n\n# <func> # Python \n# Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r, h):\n    return math.pi * r * h\n\n# <func> # Python \n# Write a function to find the lateral surface area of a sphere.\ndef lateralsuface_sphere(r):\n    return math.pi * r * r\n\n# <func> # Python \n# Write a function to find the"], ["\n\n# <func> # Python \n# Write a function to find the volume of a cube given its side length.\ndef volume_cube(l):\n    return l * l * l * 3.0 / 8.0\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n):\n    return n & (n - 1)\n\n# Example usage:"], ["\nfrom collections import Counter \n\n# <func> # Python \n# Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\ndef check_occurences(test_list):\n    return Counter(test_list)\n\n# <func> # Python \n# Write a function that takes in a list of tuples and returns the list of tuples that have the same number of occurrences as the first tuple in the list.\ndef find_duplicates(test_list):\n    return [tuple(t) for t in test_list if len(t) == len(test_list[0])]\n\n# <func> # Python \n# Write a function that takes in a list of tuples and returns the list of tuples that have the same number of occurrences as the first tuple in the list.\ndef find_duplicates_2(test_list):\n    return [tuple(t) for t in test_list if len(t) == len(test_list[0])]\n\n# <func> # Python \n# Write a function that takes in a list of tuples and returns the list of tuples that have the same number of occurrences as the first tuple in the list.\ndef find_duplicates_3(test_list):\n    return [tuple(t) for t in test_list if len(t) == len(test_list[0])]\n\n# <func> # Python \n# Write a function that takes in a list of tuples and returns the list of tuples that have the same number of occurrences as the first tuple in the list.\ndef find_duplicates_4(test_list):\n    return [tuple(t) for t in test_list if len(t) == len(test_list[0])]\n\n# <func> # Python \n# Write a function that takes in a list of tuples and returns the list of tuples that have the same number of occurrences as the first tuple in the list.\ndef find_duplicates_5(test_list):\n    return [tuple(t) for t in test_list if len(t) == len(test_list[0])]\n\n# <func> #"], ["\n\n# <func> # Python \n# Write a python function to count the number of non-empty substrings of a given string.\ndef number_of_substrings(str1):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != '':\n            count += 1\n    return count\n\n# Testing"], ["\n\n# <func> # Python \n# Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m, n):\n    return (m + n - 1) * (m + n - 2) // 2\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\ndef replace_list(list1, list2):\n    return [list1[0] + list2[0] for list1 in list1 for list2 in list2]\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to count the total number of characters in a string.\ndef count_charac(str1):\n    count = 0\n    for char in str1:\n        count += len(char)\n    return count\nnimport math  \n\n# <func> # Python \n# Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N):\n    return (N ** 2) + (2 * N)\n\n# <func> # Python \n# Write a python function to find the next perfect square less than a given number.\ndef next_Perfect_Square_Less(N):\n    return (N ** 2) - (2 * N)\n\n# <func> # Python \n# Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square_Greater(N):\n    return (N ** 2) - (2 * N)\n\n# <func> # Python \n# Write a python function to find the next perfect square less than a given number.\ndef next_Perfect_Square_Less_Greater(N):\n    return (N ** 2) - (2 * N) - 1\n\n# <func> # Python \n# Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square_Greater_Less(N):\n    return (N ** 2) - (2 * N) + 1\n\n# <func> # Python \n# Write a python function to find the next perfect square less than a given number.\ndef next_Perfect_Square_Greater_Less_Greater(N):\n    return (N ** 2) - (2 * N) + 1 - 1\n\n# <func> # Python \n# Write a python function to find the next perfect square less than a given number.\ndef next_Perfect_Square_Greater_Less_Greater_Less(N):\n    return (N ** 2) - (2 * N) + 1 - 1 - 1\n\n# <func> # Python \n# Write a python function to find the next perfect square less than a given number.\ndef next_Perfect_Square_Greater_Less_Greater_Less_Greater(N):\n    return (N ** 2) - (2 * N"], ["\n\n# <func> # Python \n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\ndef max_sum(arr):\n    n = len(arr)\n    max_sum = 0\n    for I in range(n):\n        if arr[i] > arr[i + 1]:\n            max_sum += arr[i]\n        else:\n            max_sum -= arr[i]\n    return max_sum\n\n# Testing"], ["\n\n# <func> # Python \n# Write a function to find the length of the longest palindromic subsequence in the given string.\ndef lps(str1):\n    lps = 0\n    for i in range(len(str1)):\n        for j in range(i + 1, len(str1)):\n            if str1[i] == str1[j]:\n                lps += 1\n    return lps\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\ndef count_X(tup, x):\n    return tup.count(x)\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\ndef insert_element(list1, element):\n    return [element] + list1[1:] + [element]\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5]"], ["\nimport cmath  \n\n# <func> # Python \n# Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):\n    return [cmath.polar(x, y) for x, y in zip(numbers, numbers[1:])]\n\n# <func> # Python \n# Write a python function to calculate the distance between two points.\ndef distance(x1, y1, x2, y2):\n    return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\n# <func> # Python \n# Write a python function to calculate the angle between two points.\ndef angle(x1, y1, x2, y2):\n    return math.acos(distance(x1, y1, x2, y2) / (x2 - x1)) * 180 / math.pi\n\n# <func> # Python \n# Write a python function to calculate the distance between two points.\ndef distance(x1, y1, x2, y2):\n    return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\n# <func> # Python \n# Write a python function to calculate the angle between two points.\ndef angle(x1, y1, x2, y2):\n    return math.acos(distance(x1, y1, x2, y2) / (x2 - x1)) * 180 / math.pi\n\n# <func> # Python \n# Write a python function to calculate the distance between two points.\ndef distance(x1, y1, x2, y2):\n    return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\n# <func> # Python \n# Write a python function to calculate the angle between two points.\ndef angle(x1, y1, x2, y2):\n    return math.acos(distance(x1, y1, x2, y2) / (x2 - x1)) * 180 / math.pi\n\n# <func> # Python \n# Write"], ["\n\n# <func> # Python \n# Write a python function that returns the number of integer elements in a given list.\ndef count_integer(list1):\n    return len(list1)\n\n# Example usage:"], ["\nfrom itertools import combinations_with_replacement \n\n# <func> # Python \n# Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))"], ["\n\n# <func> # Python \n# Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ndef count_Primes_nums(n):\n    return len(set(range(2, n + 1))) - 1\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\ndef swap_numbers(a,b):\n    return (b,a)\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\n    return max(test_tup1, test_tup2)\n# -\n\n# Test the function with the two tuples."], ["\n\n# <func> # Python \n# Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    if n % 11 == 0:\n        return False\n    if n % 13 == 0:\n        return False\n    if n % 17 == 0:\n        return False\n    if n % 21 == 0:\n        return False\n    if n % 23 == 0:\n        return False\n    if n % 29 == 0:\n        return False\n    if n % 31 == 0:\n        return False\n    if n % 37 == 0:\n        return False\n    if n % 41 == 0:\n        return False\n    if n % 43 == 0:\n        return False\n    if n % 47 == 0:\n        return False\n    if n % 53 == 0:\n        return False\n    if n % 59 == 0:\n        return False\n    if n % 61 == 0:\n        return False\n    if n % 67 == 0:\n        return False\n    if n % 71 == 0:\n        return False\n    if n % 73 == 0:\n        return False\n    if n % 79 == 0:\n        return False\n    if n % 83 == 0:\n        return False\n    if n % 89 == 0:\n        return False\n    if n % 97 == 0:\n        return False\n    if n % 101 == 0:\n        return False\n    if n % 103 == 0:\n        return False\n    if n % 107 == 0:\n        return False"], ["\n\n# <func> # Python \n# Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n\n# Example usage:\ntest_tup1 = (1, 2)\ntest_tup2 = (3, 4)\nresult = division_elements(test_tup1, test_tup2)"], ["\n\n# <func> # Python \n# Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\ndef split_two_parts(list1, L):\n    return (list1[:L], list1[L:])\n\n# Test the function with some examples."], ["\n\n# <func> # Python \n# Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n    return h_age * 365.25 * 24 * 60 * 60\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\ndef list_split(S, step):\n    return [S[i:i + step] for i in range(0, len(S), step)]\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to find the lateral surface area of a cube given its side length.\ndef lateralsurface_cube(l):\n    return 4 * l * l * l\n\n# Test the function\nl = 10\nlateralsurface_cube(l) # should return 4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["\n\n# <func> # Python \n# Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\ndef square_Sum(n):\n    return sum([i**2 for i in range(1, n+1)])\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to find the n'th star number.\ndef find_star_num(n):\n    return n * (n + 1) // 2\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to find the ascii value of a character.\ndef ascii_value(k):\n    return ord(k)\n\n# Test the function."], ["\n\n# <func> # Python \n# Write a python function to find the sum of even numbers at even positions of a list.\ndef sum_even_and_even_index(arr):\n    sum = 0\n    for I in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"], ["\n\n# <func> # Python \n# Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\ndef even_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))\n\n# Test the function with some examples."], ["\n\n# <func> # Python \n# Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\ndef rear_extract(test_list):\n    return [tuple[1] for tuple in test_list]\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\ndef substract_elements(test_tup1, test_tup2):\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n\n# Test the function\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (2, 3, 4, 5)"], ["\nimport math  \n\n# <func> # Python \n# Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum( n):\n    return sum(binomial_coeff(n, i) for i in range(1, n+1))\n\n# <func> # Python \n# Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\ndef odd_binomial_Coeff_Sum( n):\n    return sum(binomial_coeff(n, i) for i in range(1, n+1, 2))\n\n# <func> # Python \n# Write a python function that takes in a positive integer n and finds the sum of all index binomial coefficients.\ndef binomial_coeff( n, k):\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return binomial_coeff( n, k-1 ) * binomial_coeff( n-k+1, k )\n\n# <func> # Python \n# Write a python function that takes in a positive integer n and finds the sum of all index binomial coefficients.\ndef sum_binomial_coeff( n ):\n    return sum( binomial_coeff( n, k ) for k in range( 1, n+1 ) )\n\n# <func> # Python \n# Write a python function that takes in a positive integer n and finds the sum of all index binomial coefficients.\ndef sum_binomial_coeff_2( n ):\n    return sum( binomial_coeff( n, k ) for k in range( 1, n+1 ) ) + sum( binomial_coeff( n, k ) for k in range( 1, n+1, 2 ) )\n\n# <func> # Python \n# Write a python function that takes in a positive integer n and finds the sum of all index binomial coefficients.\ndef sum_binomial_coeff_3( n ):\n    return sum( binomial_coeff( n, k ) for k in range( 1, n"], ["\nimport math\n\n# <func> # Python \n# Write a function that takes in the radius and height of a cylinder and returns the the volume.\ndef volume_cylinder(r,h):\n    return math.pi * r * h\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\ndef dict_filter(dict1, n):\n    return {k: v for k, v in dict1.items() if v >= n}\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to find the number of elements that occurs before the tuple element in the given tuple.\ndef count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to find the nth decagonal number.\ndef is_num_decagonal(n):\n    return n % 12 == 0\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\ndef sequential_search(dlist, item):\n    for i, el in enumerate(dlist):\n        if el == item:\n            return (True, i)\n    return (False, -1)\n# -\n\n# Testing the function\nsequential_search(dlist, 10)\nsequential_search(dlist, 20)\nsequential_search(dlist, 30)\nsequential_search(dlist, 40)\nsequential_search(dlist, 50)\nsequential_search(dlist, 60)\nsequential_search(dlist, 70)\nsequential_search(dlist, 80)\nsequential_search(dlist, 90)\nsequential_search(dlist, 100)\nsequential_search(dlist, 110)\nsequential_search(dlist, 120)\nsequential_search(dlist, 130)\nsequential_search(dlist, 140)\nsequential_search(dlist, 150)\nsequential_search(dlist, 160)\nsequential_search(dlist, 170)\nsequential_search(dlist, 180)\nsequential_search(dlist, 190)\nsequential_search(dlist, 200)\nsequential_search(dlist, 210)\nsequential_search(dlist, 220)\nsequential_search(dlist, 230)\nsequential_search(dlist, 240)\nsequential_search(dlist, 250)\nsequential_search(dlist, 260)\nsequential_search(dlist, 270)\nsequential_search(dlist, 280)\nsequential_search(dlist, 290)"], ["\n\n# <func> # Python \n# Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n    return len(set(test_list)) == len(test_list)\n\n# Example usage:\ntest_list = [1, 2, 3, 4, 5]"], ["\n\n# <func> # Python \n# Write a function to subtract two lists element-wise.\ndef sub_list(nums1,nums2):\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]\n\n# Test function"], ["\n\n# <func> # Python \n# Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n):\n    return n <= n % 10\n\n# Test cases"], ["\n\n# <func> # Python \n# Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\ndef check_element(list1, element):\n    return all(list1 == element)\n\n# Test the function"], ["\nimport re\n\n# <func> # Python \n# Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\ndef text_match_two_three(text):\n    return re.match(r'a\\b\\b\\b', text) is not None\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k):\n    if n == 0:\n        return 0\n    if k == 0:\n        return a[0]\n    if a[0] == 0:\n        return 0\n    if a[0] == 1:\n        return a[1]\n    if a[0] == 2:\n        return a[1] + a[2]\n    if a[0] == 3:\n        return a[1] + a[2] + a[3]\n    if a[0] == 4:\n        return a[1] + a[2] + a[3] + a[4]\n    if a[0] == 5:\n        return a[1] + a[2] + a[3] + a[4] + a[5]\n    if a[0] == 6:\n        return a[1] + a[2] + a[3] + a[4] + a[5] + a[6]\n    if a[0] == 7:\n        return a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7]\n    if a[0] == 8:\n        return a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8]\n    if a[0] == 9:\n        return a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9]\n    if a[0] == 10:\n        return a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10"], ["\n\n# <func> # Python \n# Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\ndef square_Sum(n):\n    return sum(map(lambda x: x**2, range(1, n+1)))\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to find the list of maximum length in a list of lists.\ndef max_length(list1):\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a python function to find quotient of two numbers (rounded down to the nearest integer).\ndef find(n,m):\n    return n // m\n\n# Testing the function"], ["\nimport math\n\n# <func> # Python \n# Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n    return (w + h) / 2\n\n# <func> # Python \n# Write a function to find the hypotenuse of a right angled triangle.\ndef hypotenuse(w,h):\n    return math.sqrt(otherside_rightangle(w,h))\n\n# <func> # Python \n# Write a function to find the area of a right angled triangle.\ndef area(w,h):\n    return w * h / 2\n\n# <func> # Python \n# Write a function to find the perimeter of a right angled triangle.\ndef perimeter(w,h):\n    return 2 * (w + h)\n\n# <func> # Python \n# Write a function to find the length of the hypotenuse of a right angled triangle.\ndef hypotenuse_length(w,h):\n    return hypotenuse(w,h)\n\n# <func> # Python \n# Write a function to find the length of the side of a right angled triangle.\ndef side_length(w,h):\n    return w + h\n\n# <func> # Python \n# Write a function to find the area of a right angled triangle.\ndef area_of_triangle(w,h):\n    return area(w,h)\n\n# <func> # Python \n# Write a function to find the perimeter of a right angled triangle.\ndef perimeter_of_triangle(w,h):\n    return perimeter(w,h)\n\n# <func> # Python \n# Write a function to find the length of the hypotenuse of a right angled triangle.\ndef hypotenuse_length_of_triangle(w,h):\n    return hypotenuse_length(w,h)\n\n# <func> # Python \n# Write a function to find the length of the side of a right angled triangle.\ndef side_length_of_triangle(w,h):\n    return side_length(w,h)\n\n# <func> # Python \n#"], ["\n\n# <func> # Python \n# Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n    if len(listval) == 0:\n        return 0\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        return max(listval)\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a python function to count inversions in an array.\ndef get_Inv_Count(arr):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[i + 1]:\n            count += 1\n    return count\n\n# Testing the function\narr = [1, 2, 3, 4, 5]"], ["\n\n# <func> # Python \n# Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n    return [item for sublist in list1 for item in sublist]\n\n# Example usage:\nlist1 = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j', 'k', 'l']]"], ["\nfrom collections import \n# <func> # Python \n# Write a function to calculate the maximum aggregate from the list of tuples.\ndef max_aggregate(stdata):\n    return max(stdata, key=lambda x: x[1])[1]\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n):\n    count = 0\n    for I in range(n):\n        count += bin(i)[2:].zfill(n)\n    return count\n\n# <func> # Python \n# Find the sum of first n bits of a given binary number.\ndef sum_of_bits(n):\n    return sum(bin(i)[2:].zfill(n) for i in range(n))\n\n# <func> # Python \n# Find the sum of last n bits of a given binary number.\ndef sum_of_bits_last(n):\n    return sum(bin(i)[2:].zfill(n) for i in range(n)) - sum(bin(i)[2:].zfill(n) for i in range(n - 1))\n\n# <func> # Python \n# Find the sum of first n bits of a given binary number.\ndef sum_of_bits_first(n):\n    return sum(bin(i)[2:].zfill(n) for i in range(n)) - sum(bin(i)[2:].zfill(n) for i in range(n - 1, -1, -1))\n\n# <func> # Python \n# Find the sum of last n bits of a given binary number.\ndef sum_of_bits_last_last(n):\n    return sum(bin(i)[2:].zfill(n) for i in range(n)) - sum(bin(i)[2:].zfill(n) for i in range(n - 1, -1, -1)) + sum(bin(i)[2:].zfill(n) for i in range(n - 1, -1, -1))\n\n# <func> # Python \n# Find the sum of first n bits of a given binary number.\ndef sum_of_bits_first_last(n):\n    return sum(bin(i)[2:].zfill(n) for i in range(n)) - sum"], ["\n\n# <func> # Python \n# Write a function to find the depth of a dictionary.\ndef dict_depth_aux(d):\n    if d is None:\n        return 0\n    elif isinstance(d, dict):\n        return dict_depth_aux(d.values()) + 1\n    else:\n        return 1\n\n# <func> # Python \n# Find the depth of a dictionary.\ndef dict_depth(d):\n    return dict_depth_aux(d)\n\n# <func> # Python \n# Find the depth of a list.\ndef list_depth(l):\n    return list_depth_aux(l)\n\n# <func> # Python \n# Find the depth of a list.\ndef list_depth_aux(l):\n    if l is None:\n        return 0\n    elif isinstance(l, list):\n        return list_depth_aux(l[0]) + 1\n    else:\n        return 1\n\n# <func> # Python \n# Find the depth of a list.\ndef list_depth_list(l):\n    return list_depth_aux(l)\n\n# <func> # Python \n# Find the depth of a list.\ndef list_depth_list_aux(l):\n    if l is None:\n        return 0\n    elif isinstance(l, list):\n        return list_depth_list_aux(l[0]) + 1\n    else:\n        return 1\n\n# <func> # Python \n# Find the depth of a list.\ndef list_depth_list_aux_list(l):\n    return list_depth_list_aux(l)\n\n# <func> # Python \n# Find the depth of a list.\ndef list_depth_list_aux_list_aux(l):\n    if l is None:\n        return 0\n    elif isinstance(l, list):\n        return list_depth_list_aux_list_aux(l[0]) + 1\n    else:\n        return 1\n\n# <func> # Python \n# Find the depth of a list.\ndef list_depth_list_aux_list_aux_"], ["\nimport re\n\n# <func> # Python \n# Write a function to return two words from a list of words starting with letter 'p'.\ndef start_withp(words):\n    return [word for word in words if word.startswith('p')]\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\n    if k == 0:\n        return a[index]\n    else:\n        return max(a[index], max_sum_increasing_subseq(a, n, index + 1, k - 1))\n\n# Example:\n# >>> max_sum_increasing_subseq([1, 3, 5, 4, 6], 5, 0, 2)\n# 6\n# >>> max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 0, 1)\n# 5\n# >>> max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 0, 3)\n# 5\n# >>> max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 0, 4)\n# 6\n# >>> max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 0, 5)\n# 5\n# >>> max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 0, 6)\n# 6\n# >>> max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 0, 7)\n# 6\n# >>> max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 0, 8)\n# 6\n# >>> max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 0, 9)\n# 6\n# >>> max_sum_increasing_sub"], ["\n\n# <func> # Python \n# Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\ndef large_product(nums1, nums2, N):\n    return max(nums1, nums2) * N\n\n# Example usage:\nlarge_product([1, 2, 3], [4, 5, 6], 3) # Output: 120\nlarge_product([1, 2, 3], [4, 5, 6], 5) # Output: 240\nlarge_product([1, 2, 3], [4, 5, 6], 7) # Output: 1200\nlarge_product([1, 2, 3], [4, 5, 6], 10) # Output: 12000\nlarge_product([1, 2, 3], [4, 5, 6], 15) # Output: 120000\nlarge_product([1, 2, 3], [4, 5, 6], 20) # Output: 1200000\nlarge_product([1, 2, 3], [4, 5, 6], 25) # Output: 12000000\nlarge_product([1, 2, 3], [4, 5, 6], 30) # Output: 120000000\nlarge_product([1, 2, 3], [4, 5, 6], 35) # Output: 1200000000\nlarge_product([1, 2, 3], [4, 5, 6], 40) # Output: 12000000000\nlarge_product([1, 2, 3], [4, 5, 6], 45) # Output: 120000000000\nlarge_product([1, 2, 3], [4, 5, 6], 50) # Output: 1200"], ["\n\n# <func> # Python \n# Write a python function to find the maximum of two numbers.\ndef maximum(a,b):\n    if a>b:\n        return a\n    else:\n        return b\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to convert a given string to a tuple of characters.\ndef string_to_tuple(str1):\n    return tuple(str1)\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in a number.\n    :param n: The number to set the left most unset bit.\n    :return: The number with the left most unset bit set.\n    \"\"\"\n    return n | (1 << (n - 1))\n\n# Testing the function."], ["\nimport math\n\n# <func> # Python \n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    return math.pi * r * h\n\n# <func> # Python \n# Write a function to find the surface area of a cone.\ndef surface_cone(r,h):\n    return math.pi * r * h\n\n# <func> # Python \n# Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n    return math.pi * r * h * math.tan(math.pi / 2)\n\n# <func> # Python \n# Write a function to find the surface area of a cylinder.\ndef surface_cylinder(r,h):\n    return math.pi * r * h * math.tan(math.pi / 2)\n\n# <func> # Python \n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return math.pi * r * r * math.tan(math.pi / 4)\n\n# <func> # Python \n# Write a function to find the surface area of a sphere.\ndef surface_sphere(r):\n    return math.pi * r * r * math.tan(math.pi / 4)\n\n# <func> # Python \n# Write a function to find the volume of a torus.\ndef volume_torus(r,h):\n    return math.pi * r * h * math.tan(math.pi / 4)\n\n# <func> # Python \n# Write a function to find the surface area of a torus.\ndef surface_torus(r,h):\n    return math.pi * r * h * math.tan(math.pi / 4)\n\n# <func> # Python \n# Write a function to find the volume of a prism.\ndef volume_prism(r,h):\n    return math.pi * r * h * math.tan(math.pi / 4)\n\n# <func> # Python \n# Write a function to find the surface area of a prism.\ndef surface_pr"], ["\n\n# <func> # Python \n# Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n):\n    return 1 << (32 - 1 - math.log(n, 2))\n# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"], ["\n\n# <func> # Python \n# Write a function to find the n'th lucas number.\ndef find_lucas(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to apply a given format string to all of the elements in a list.\ndef add_string(list_, string):\n    for element in list_:\n        element = string.format(element)\n    return list_\n\n# Example usage:\nlist_ = [1, 2, 3, 4, 5]"], ["\n\n# <func> # Python \n# Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\n    return dict(zip(l1, l2))\n\n# Testing\nl1 = ['a', 'b', 'c']\nl2 = ['d', 'e', 'f']\nl3 = ['g', 'h', 'i']"], ["\n\n# <func> # Python \n# Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\n    return max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)) for f in range(1, n+1) )\n\n# Testing"], ["\n\n# <func> # Python \n# Write a function to check if given tuple contains no duplicates.\ndef check_distinct(test_tup):\n    return len(set(test_tup)) == len(test_tup)\n\n# Example usage:\ntest_tup = (1, 2, 3, 4, 5)"], ["\n\n# <func> # Python \n# Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n    \"\"\"\n    :param str1: a string\n    :return: the first non-repeated character in str1\n    \"\"\"\n    return str1[0]\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to find the median of three numbers.\ndef median_numbers(a,b,c):\n    if a > b and a > c:\n        return a\n    elif b > c:\n        return b\n    else:\n        return c\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n    return sum(map(int, nums))\n\n# Test function"], ["\n\n# <func> # Python \n# Write a python function to find the minimum of two numbers.\ndef minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex, element):\n    for x in tuplex:\n        if x == element:\n            return True\n    return False\n# end <func> # Python \n\n# <func> # Python \n# Check if a tuple is a valid tuple.\ndef is_valid_tuple(tuplex):\n    return len(tuplex) == 2 and isinstance(tuplex[0], tuple) and isinstance(tuplex[1], tuple) and check_tuplex(tuplex, (tuplex[0][0], tuplex[0][1])) and check_tuplex(tuplex, (tuplex[1][0], tuplex[1][1]))\n# end <func> # Python \n\n# <func> # Python \n# Check if a tuple is a valid tuple.\ndef is_valid_tuple_2(tuplex):\n    return len(tuplex) == 2 and isinstance(tuplex[0], tuple) and isinstance(tuplex[1], tuple) and check_tuplex(tuplex, (tuplex[0][0], tuplex[0][1])) and check_tuplex(tuplex, (tuplex[1][0], tuplex[1][1]))\n# end <func> # Python \n\n# <func> # Python \n# Check if a tuple is a valid tuple.\ndef is_valid_tuple_3(tuplex):\n    return len(tuplex) == 3 and isinstance(tuplex[0], tuple) and isinstance(tuplex[1], tuple) and isinstance(tuplex[2], tuple) and check_tuplex(tuplex, (tuplex[0][0], tuplex[0][1], tuplex[0][2])) and check_tuplex(tuplex, (tuplex[1][0], tuplex[1][1], tuplex[1][2])) and check_tuplex(tuplex, (tuplex[2][0], tuplex[2][1], tuplex[2][2]))\n# end <func> # Python \n\n# <func> # Python \n# Check if a tuple is a valid tuple"], ["\n\n# <func> # Python \n# Write a python function to find whether the parity of a given number is odd.\ndef find_Parity(x):\n    if x % 2 == 1:\n        return True\n    else:\n        return False\n\n# Test function"], ["\n\n# <func> # Python \n# Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\n    return min(list1, key=lambda x: x[1])[0] * min(list1, key=lambda x: x[0])[0]\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n    return listval[0]\n\n# Test the function."], ["\n\n# <func> # Python \n# Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n    return [x for x in l if x % 2 != 0]\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n    return list1[n]\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a python function to check whether any value in a sequence exists in a sequence or not.\ndef overlapping(list1,list2):\n    return any(list1 == list2)\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a python function to find the element of a list having maximum length.\ndef Find_Max(lst):\n    max_len = 0\n    max_val = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_val = i\n    return max_val\n\nn\n# <func> # Python \n# Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\n    sum = 0\n    for num in list1:\n        sum += num\n    return sum * len(list1)\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n):\n    return sum(x**3 for x in range(1, n+1))\n\n# Test the function with some examples."], ["\n\n# <func> # Python \n# Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n    return tuple(map(lambda x: x + delimiter, test_tup))\n\n# Test the function."], ["\n\n# <func> # Python \n# Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):\n    return (1 + 2 + 3 + ... + n) / n\n"], ["\n\n# <func> # Python \n# Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\n    return tuple(test_tuple[::-1])[::-1]\n\n# Test the function\ntest_tuple = ('hello', 'world', '!')"], ["\n\n# <func> # Python \n# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n# <func> # Python \n# Write a function to find the length of a list.\ndef length(list1):\n    return len(list1)\n# <func> # Python \n# Write a function to find the index of a list element.\ndef index(list1, x):\n    for i in range(len(list1)):\n        if list1[i] == x:\n            return i\n    return -1\n# <func> # Python \n# Write a function to find the last index of a list element.\ndef last_index(list1, x):\n    for i in range(len(list1)):\n        if list1[i] == x:\n            return i\n    return -1\n# <func> # Python \n# Write a function to find the first index of a list element.\ndef first_index(list1, x):\n    for i in range(len(list1)):\n        if list1[i] == x:\n            return i\n    return -1\n# <func> # Python \n# Write a function to find the middle index of a list element.\ndef middle_index(list1, x):\n    for i in range(len(list1)):\n        if list1[i] == x:\n            return i\n    return -1\n# <func> # Python \n# Write a function to find the length of a list.\ndef length_of_list(list1):\n    return len(list1)\n# <func> # Python \n# Write a function to find the index of a list element.\ndef index_of_list(list1, x):\n    return index(list1, x)\n# <func> # Python \n# Write a function to find the last index of a list element.\ndef last_index_of_list(list1, x):\n    return last_index(list1,"], ["\n\n# <func> # Python \n# Write a function to filter odd numbers.\ndef filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]\n\n# Test the function."], ["\nimport re\n\n# <func> # Python \n# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef change_date_format(dt):\n    return dt.strftime('%d-%m-%Y')\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\n    n = len(my_list)\n    for I in range(n):\n        for j in range(i, n):\n            if my_list[j] < my_list[j - 1]:\n                my_list[j], my_list[j - 1] = my_list[j - 1], my_list[j]\n    return my_list\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\n    return test_tup1 and tuple(test_tup2)\n\n# <func> # Python \n# Write a function to extract the elementwise and tuples from the given two tuples.\ndef or_tuples(test_tup1, test_tup2):\n    return test_tup1 or tuple(test_tup2)\n\n# <func> # Python \n# Write a function to extract the elementwise and tuples from the given two tuples.\ndef not_and_tuples(test_tup1, test_tup2):\n    return not (test_tup1 and tuple(test_tup2))\n\n# <func> # Python \n# Write a function to extract the elementwise and tuples from the given two tuples.\ndef not_or_tuples(test_tup1, test_tup2):\n    return not (test_tup1 or tuple(test_tup2))\n\n# <func> # Python \n# Write a function to extract the elementwise and tuples from the given two tuples.\ndef not_not_and_tuples(test_tup1, test_tup2):\n    return not (not (test_tup1 and tuple(test_tup2)))\n\n# <func> # Python \n# Write a function to extract the elementwise and tuples from the given two tuples.\ndef not_not_or_tuples(test_tup1, test_tup2):\n    return not (not (test_tup1 or tuple(test_tup2)))\n\n# <func> # Python \n# Write a function to extract the elementwise and tuples from the given two tuples.\ndef not_not_not_and_tuples(test_tup1, test_tup2):\n    return not (not (not (test_tup1 and tuple(test_tup2))) and not (test_tup1 or tuple(test_tup2))) ```\n"], ["\n\n# <func> # Python \n# Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c):\n    x = (b - a) / (2 * c)\n    y = (-b + sqrt(b ** 2 - 4 * a * c)) / (2 * a)\n    return [x, y]\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1,base2,height):\n    if base1 == base2:\n        return base1\n    else:\n        return (base1 + base2) / 2\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a python function to find the last digit of a given number.\ndef last_Digit(n):\n    return n % 10\n\n# Test the function."], ["\n\n# <func> # Python \n# Write a python function to return the negative numbers in a list.\ndef neg_nos(list1):\n    return [x for x in list1 if x < 0]\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to remove odd characters in a string.\ndef remove_odd(str1):\n    return ''.join(filter(lambda x: x != 'a' and x != 'e' and x != 'i' and x != 'o' and x != 'u' and x != 'A' and x != 'E' and x != 'I' and x != 'O' and x != 'U' and x != 'a' and x != 'e' and x != 'i' and x != 'o' and x != 'u', str1))"], ["\n\n# <func> # Python \n# Write a function to join a list of multiple integers into a single integer.\ndef multiple_to_single(L):\n    return sum(L)\n# -\n\n# Test the function with a list of integers:\nmultiple_to_single([1, 2, 3, 4, 5])\n\n# Test the function with a list of integers:\nmultiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n# Test the function with a list of integers:\nmultiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, "], ["\nimport re\n\n# <func> # Python \n# Write a function to find the first adverb and their positions in a given sentence.\ndef find_adverb_position(text):\n    adverbs = re.findall('[a-zA-Z]+', text)\n    return adverbs\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to find the surface area of a cube of a given size.\ndef surfacearea_cube(l):\n    return l * l * l * 3.14159\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n    return tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n\n# Example usage:"], ["\nfrom collections import Counter \n\n# <func> # Python \n# Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst):\n    return Counter(lst).items()[0]\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to find cubes of individual elements in a list.\ndef cube_nums(nums):\n    return [num * num for num in nums]\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n):\n    return sum(perrin_numbers(n))\n\n# Test the function."], ["\n\n# <func> # Python \n# Write a function to extract specified size of strings from a given list of string values.\ndef extract_string(str1, l):\n    return str1[0:l]\n\n# Example usage:"], ["\nimport re\n\n# <func> # Python \n# Write a function to remove all whitespaces from the given string.\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)\n\n# Testing the function."], ["\nimport math \n\n# <func> # Python \n# Write a python function to find the sum of even factors of a number.\ndef sumofFactors(n):\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n# <func> # Python \n# Write a python function to find the sum of odd factors of a number.\ndef sumofOddFactors(n):\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n# <func> # Python \n# Write a python function to find the sum of all factors of a number.\ndef sumofFactors(n):\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n# <func> # Python \n# Write a python function to find the sum of all odd factors of a number.\ndef sumofOddFactors(n):\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n# <func> # Python \n# Write a python function to find the sum of all even factors of a number.\ndef sumofEvenFactors(n):\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n# <func> # Python \n# Write a python function to find the sum of all factors of a number.\ndef sumofFactors(n):\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n# <func> # Python \n# Write"], ["\nimport re\n\n# <func> # Python \n# Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n    return re.search(r'z', text)\n\n# <func> # Python \n# Write a function that matches a word containing 'z'.\ndef text_match_wordz_2(text):\n    return re.search(r'z', text)\n\n# <func> # Python \n# Write a function that matches a word containing 'z'.\ndef text_match_wordz_3(text):\n    return re.search(r'z', text)\n\n# <func> # Python \n# Write a function that matches a word containing 'z'.\ndef text_match_wordz_4(text):\n    return re.search(r'z', text)\n\n# <func> # Python \n# Write a function that matches a word containing 'z'.\ndef text_match_wordz_5(text):\n    return re.search(r'z', text)\n\n# <func> # Python \n# Write a function that matches a word containing 'z'.\ndef text_match_wordz_6(text):\n    return re.search(r'z', text)\n\n# <func> # Python \n# Write a function that matches a word containing 'z'.\ndef text_match_wordz_7(text):\n    return re.search(r'z', text)\n\n# <func> # Python \n# Write a function that matches a word containing 'z'.\ndef text_match_wordz_8(text):\n    return re.search(r'z', text)\n\n# <func> # Python \n# Write a function that matches a word containing 'z'.\ndef text_match_wordz_9(text):\n    return re.search(r'z', text)\n\n# <func> # Python \n# Write a function that matches a word containing 'z'.\ndef text_match_wordz_10(text):\n    return re.search(r'z', text)\n\n# <func> # Python \n# Write a function that matches a word containing 'z'.\ndef text_match_"], ["\n\n# <func> # Python \n# Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n    if monthnum2 == 12:\n        return True\n    elif monthnum2 == 1:\n        return False\n    else:\n        return check_monthnumb_number(monthnum2 - 1)\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to reverse each string in a given list of string values.\ndef reverse_string_list(stringlist):\n    return [stringlist[len(stringlist) - 1] + stringlist[len(stringlist) - 2] + stringlist[len(stringlist) - 3] + stringlist[len(stringlist) - 4] + stringlist[len(stringlist) - 5] + stringlist[len(stringlist) - 6] + stringlist[len(stringlist) - 7] + stringlist[len(stringlist) - 8] + stringlist[len(stringlist) - 9] + stringlist[len(stringlist) - 10] + stringlist[len(stringlist) - 11] + stringlist[len(stringlist) - 12] + stringlist[len(stringlist) - 13] + stringlist[len(stringlist) - 14] + stringlist[len(stringlist) - 15] + stringlist[len(stringlist) - 16] + stringlist[len(stringlist) - 17] + stringlist[len(stringlist) - 18] + stringlist[len(stringlist) - 19] + stringlist[len(stringlist) - 20] + stringlist[len(stringlist) - 21] + stringlist[len(stringlist) - 22] + stringlist[len(stringlist) - 23] + stringlist[len(stringlist) - 24] + stringlist[len(stringlist) - 25] + stringlist[len(stringlist) - 26] + stringlist[len(stringlist) - 27] + stringlist[len(stringlist) - 28] + stringlist[len(stringlist) - 29] + stringlist[len(stringlist) - 30] + stringlist[len(stringlist) - 31] + stringlist[len(stringlist) - 32] + stringlist[len(stringlist) - 33] + stringlist[len(stringlist) - 34] + stringlist"], ["\n\n# <func> # Python \n# Write a python function to find the sublist having minimum length.\ndef Find_Min(lst):\n    return lst[0]\n\n# Testing the function\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], ["\n\n# <func> # Python \n# Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n    return l * b\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to remove uppercase substrings from a given string.\ndef remove_uppercase(str1):\n    return str1.translate(str.maketrans('', '', string.punctuation))\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to get the first element of each sublist.\ndef Extract(lst):\n    return lst[0]\n\n# Example usage:\nlst = [1, 2, 3, 4, 5]"], ["\n\n# <func> # Python \n# Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\n    return combinations(list1, r)\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        max_product = max(max_product, arr[i] * (i + 1))\n    return max_product\n\n# Test cases\narr = [1, 2, 3, 4, 5]"], ["\n\n# <func> # Python \n# Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v != ''}"], ["\n\n# <func> # Python \n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr):\n    max_prod = 1\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                max_prod = max(max_prod, arr[i] * arr[j])\n    return max_prod\n\n# Testing the function\narr = [1, 2, 3, 4, 5]"], ["\n\n# <func> # Python \n# Write a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef add_pairwise(test_tup):\n    return tuple(map(add, test_tup))\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to find the product of the array multiplication modulo n.\ndef find_remainder(arr, n):\n    return arr[0] * n % n\n\n# Testing function\narr = [1, 2, 3, 4, 5]\nn = 5"], ["\n\n# <func> # Python \n# Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l):\n    return True if l[0] == l[-1] else False\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n    return tuple(set(test_list1) & set(test_list2))\n\n# Example usage:\ntest_list1 = (1, 2, 3, 4, 5)\ntest_list2 = (1, 2, 3, 4, 5)"], ["\n\n# <func> # Python \n# Write a function to replace characters in a string.\ndef replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)\n\n# Test function"], ["\n\n# <func> # Python \n# Write a function to sort a dictionary by value.\ndef sort_counter(dict1):\n    return dict1.items()\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\n    max_val = nums[0]\n    min_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    return max_val + min_val\n\n# Testing"], ["\n\n# <func> # Python \n# Write a python function to convert the given string to lower case.\ndef is_lower(string):\n    return string.lower() == string\n\n# Test the function with some examples."], ["\nimport re\n\n# <func> # Python \n# Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n    return re.sub(r'[a-z]', '', str1)\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to find the first digit of a given number.\ndef first_Digit(n):\n    return n % 10\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function which takes a list of integers and only returns the odd ones.\ndef Split(l):\n    return [x for x in l if x % 2 != 0]\n\n# Testing the function\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], ["\n\n# <func> # Python \n# Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef difference(n):\n    return sum([i**3 for i in range(1, n+1)]) - sum([i**3 for i in range(1, n+1)])\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a python function to count the number of pairs whose xor value is odd.\ndef find_Odd_Pair(A,N):\n    count = 0\n    for I in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1 == 1:\n                count += 1\n    return count\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to toggle the case of all characters in a string.\ndef toggle_string(string):\n    return string.lower()\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to find the sum of the per-digit difference between two integers.\ndef digit_distance_nums(n1, n2):\n    return sum(abs(n1[i] - n2[i]) for i in range(len(n1)))\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to find the sum of the largest contiguous sublist in the given list.\ndef max_sub_array_sum(a, size):\n    max_sum = 0\n    max_sum_index = 0\n    for I in range(size):\n        if a[i] > a[i + 1]:\n            max_sum += a[i]\n            max_sum_index = i\n    return max_sum + max_sum_index\n\n# Test cases"], ["\n\n# <func> # Python \n# Write a function to find the union of the elements of two given tuples and output them in sorted order.\ndef union_elements(test_tup1, test_tup2):\n    return tuple(sorted(test_tup1 + test_tup2))\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to find the length of the longest sublists.\ndef Find_Max_Length(lst):\n    max_length = 0\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n\n# Testing the function"], ["\nimport re\n\n# <func> # Python \n# Write a function to extract values between quotation marks from a string.\ndef extract_values(text):\n    return re.findall(r'(?<=\").*?(?=\")', text)\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\ndef count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n# Example usage:\ncount_Pairs([1,2,3],3)\n# Output: 3\n# Explanation:\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n# 1, 2, 3\n"], ["\n\n# <func> # Python \n# Write a python function to split a string into characters.\ndef split(word):\n    return [char for char in word]\n# -\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to get the sum of the digits of a non-negative integer.\ndef sum_digits(n):\n    return sum(map(int, str(n)))\n\n# Test the function with some examples."], ["\n\n# <func> # Python \n# Write a function to check whether a specified list is sorted or not.\ndef issort_list(list1):\n    return True if list1 == sorted(list1) else False\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to create a list of N empty dictionaries.\ndef empty_list(length):\n    return [dict(zip(range(length), range(length))) for _ in range(length)]\n\n# <func> # Python \n# Write a function to create a list of N dictionaries with the given key-value pairs.\ndef dict_list(length, key_value_pairs):\n    return [dict(zip(key_value_pairs, range(length))) for _ in range(length)]\n\n# <func> # Python \n# Write a function to create a list of N dictionaries with the given key-value pairs.\ndef dict_list_with_keys(length, key_value_pairs):\n    return [dict(zip(key_value_pairs, range(length))) for _ in range(length)]\n\n# <func> # Python \n# Write a function to create a list of N dictionaries with the given key-value pairs.\ndef dict_list_with_keys_and_values(length, key_value_pairs):\n    return [dict(zip(key_value_pairs, range(length))) for _ in range(length)]\n\n# <func> # Python \n# Write a function to create a list of N dictionaries with the given key-value pairs.\ndef dict_list_with_keys_and_values_and_keys(length, key_value_pairs):\n    return [dict(zip(key_value_pairs, range(length))) for _ in range(length)]\n\n# <func> # Python \n# Write a function to create a list of N dictionaries with the given key-value pairs.\ndef dict_list_with_keys_and_values_and_keys_and_values(length, key_value_pairs):\n    return [dict(zip(key_value_pairs, range(length))) for _ in range(length)]\n\n# <func> # Python \n# Write a function to create a list of N dictionaries with the given key-value pairs.\ndef dict_list_with_keys_and_values_and_keys_and_values_and_keys(length, key_"], ["\n\n# <func> # Python \n# Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(list1):\n    return sorted(list1, key=lambda x: x[0])"], ["\n\n# <func> # Python \n# Write a python function to remove duplicate numbers from a given number of lists.\ndef two_unique_nums(nums):\n    \"\"\"\n    :param nums: list of integers\n    :return: list of unique numbers\n    \"\"\"\n    return [num for num in nums if num not in nums]\n\n# Example usage:\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], ["\n\n# <func> # Python \n# Write a python function to calculate the product of the unique numbers in a given list.\ndef unique_product(list_data):\n    product = 1\n    for num in list_data:\n        product *= num\n    return product\n# <func> # Python \n# Test the function with some sample inputs.\nunique_product_test(list_data=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nunique_product_test(list_data=[])\nunique_product_test(list_data=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94"], ["\n\n# <func> # Python \n# Write a python function to check whether a list is sublist of another or not.\ndef is_Sub_Array(A,B):\n    if len(A) != len(B):\n        return False\n    for I in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True\n\n# <func> # Python \n# Check whether a list is a sublist of another or not.\ndef is_Sub_List(A,B):\n    if len(A) != len(B):\n        return False\n    for I in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True\n\n# <func> # Python \n# Check whether a list is a sublist of another or not.\ndef is_Sub_List_2(A,B):\n    if len(A) != len(B):\n        return False\n    for I in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True\n\n# <func> # Python \n# Check whether a list is a sublist of another or not.\ndef is_Sub_List_3(A,B):\n    if len(A) != len(B):\n        return False\n    for I in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True\n\n# <func> # Python \n# Check whether a list is a sublist of another or not.\ndef is_Sub_List_4(A,B):\n    if len(A) != len(B):\n        return False\n    for I in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True\n\n# <func> # Python \n# Check whether a list is a sublist of another or not.\ndef is_Sub_List_5(A,B):\n    if len(A) != len(B):\n        return False\n    for I in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True\n\n# <func>"], ["\n\n# <func> # Python \n# Write a python function to find the last digit in factorial of a given number.\ndef last_Digit_Factorial(n):\n    return n % 10\n# -\n\n# Test the function with some examples."], ["\n\n# <func> # Python \n# Write a function to interleave 3 lists of the same length into a single flat list.\ndef interleave_lists(list1, list2, list3):\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\n\n# Test the function\ninterleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9])"], ["\n\n# <func> # Python \n# Write a function to find the dissimilar elements in the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n    return len(set(test_tup1) & set(test_tup2))\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to remove uneven elements in the nested mixed tuple.\ndef even_ele(test_tuple, ):\n    return tuple(filter(lambda x: x[0] % 2 == 0, test_tuple))\n\n# Test function\ntest_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)"], ["\n\n# <func> # Python \n# Write a python function to find the surface area of a square pyramid with a given base edge and height.\ndef surface_Area(b,s):\n    return (b*s) / 2\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function which returns nth catalan number.\ndef catalan_number(num):\n    return binomial_coefficient(num, 0)\n\n# Test function."], ["\nimport heapq\n\n# <func> # Python \n# Write a function to find the n most expensive items in a given dataset.\ndef expensive_items(items,n):\n    heapq.heapify(items)\n    return heapq.nlargest(n, items)\n\n# Example usage:\nitems = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], ["\n\n# <func> # Python \n# Write a python function to split a list at the nth eelment and add the first part to the end.\ndef split_Arr(l, n):\n    return [l[i:i+n] for i in range(0, len(l), n)]\n\n# Example usage:\narr = [1, 2, 3, 4, 5]"], ["\n\n# <func> # Python \n# Write a function to convert a list to a tuple.\ndef list_tuple(listx):\n    return tuple(listx)\n\n# Example usage:\nlist_tuple([1, 2, 3]) # Output: (1, 2, 3)\nlist_tuple([1, 2, 3, 4, 5]) # Output: (1, 2, 3, 4, 5)\nlist_tuple([1, 2, 3, 4, 5, 6]) # Output: (1, 2, 3, 4, 5, 6)\nlist_tuple([1, 2, 3, 4, 5, 6, 7]) # Output: (1, 2, 3, 4, 5, 6, 7)\nlist_tuple([1, 2, 3, 4, 5, 6, 7, 8]) # Output: (1, 2, 3, 4, 5, 6, 7, 8)\nlist_tuple([1, 2, 3, 4, 5, 6, 7, 8, 9]) # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9)\nlist_tuple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nlist_tuple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\nlist_tuple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) # Output: (1,"], ["\n\n# <func> # Python \n# Write a python function to find the difference between largest and smallest value in a given list.\ndef big_diff(nums):\n    return max(nums) - min(nums)\n\n# Test the function"], ["\nimport math\n\n# <func> # Python \n# Write a function to find perfect squares between two given numbers.\ndef perfect_squares(a, b):\n    return math.sqrt(a**2 + b**2)\n\n# Testing the function."], ["\nimport cmath\n\n# <func> # Python \n# Write a function to convert polar coordinates to rectangular coordinates.\ndef polar_rect(x,y):\n    return (x*cmath.cos(y), x*cmath.sin(y))\n\n# <func> # Python \n# Write a function to calculate the area of a circle.\ndef circle_area(radius):\n    return 2*pi*radius**2\n\n# <func> # Python \n# Write a function to calculate the perimeter of a circle.\ndef circle_perimeter(radius):\n    return 2*pi*radius\n\n# <func> # Python \n# Write a function to calculate the area of a rectangle.\ndef rectangle_area(length, width):\n    return length*width\n\n# <func> # Python \n# Write a function to calculate the perimeter of a rectangle.\ndef rectangle_perimeter(length, width):\n    return 2*length+2*width\n\n# <func> # Python \n# Write a function to calculate the area of a square.\ndef square_area(side):\n    return side**2\n\n# <func> # Python \n# Write a function to calculate the perimeter of a square.\ndef square_perimeter(side):\n    return 4*side\n\n# <func> # Python \n# Write a function to calculate the area of a triangle.\ndef triangle_area(base, height):\n    return base*height/2\n\n# <func> # Python \n# Write a function to calculate the perimeter of a triangle.\ndef triangle_perimeter(base, height):\n    return 2*base+2*height\n\n# <func> # Python \n# Write a function to calculate the area of a rectangle.\ndef rectangle_area(length, width):\n    return length*width\n\n# <func> # Python \n# Write a function to calculate the perimeter of a rectangle.\ndef rectangle_perimeter(length, width):\n    return 2*length+2*width\n\n# <func> # Python \n# Write a function to calculate the area of a square.\ndef square_area(side):\n    return side**2\n\n# <func> #"], ["\n\n# <func> # Python \n# Write a python function to interchange the first and last elements in a list.\ndef swap_List(newList):\n    newList.reverse()\n    newList.reverse()\n    return newList\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a python function to find the sum of the product of consecutive binomial co-efficients.\ndef binomial_Coeff(n, k):\n    if n == 0:\n        return 1\n    elif k == 0:\n        return 1\n    else:\n        return binomial_Coeff(n - 1, k - 1) * binomial_Coeff(n, k - 1)\n\n# Test the function"], ["\nimport re\n\n# <func> # Python \n# Write a function to remove leading zeroes from an ip address.\ndef removezero_ip(ip):\n    return re.sub(r'^0+', '', ip)\n\n# <func> # Python \n# Write a function to check if a given string is a valid email address.\ndef is_email(email):\n    return re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$', email)\n\n# <func> # Python \n# Write a function to check if a given string is a valid phone number.\ndef is_phone(phone):\n    return re.match(r'^\\d{10}$', phone)\n\n# <func> # Python \n# Write a function to check if a given string is a valid url.\ndef is_url(url):\n    return re.match(r'^(https?|ftp)://', url)\n\n# <func> # Python \n# Write a function to check if a given string is a valid email.\ndef is_email_valid(email):\n    return is_email(email)\n\n# <func> # Python \n# Write a function to check if a given string is a valid phone number.\ndef is_phone_valid(phone):\n    return is_phone(phone)\n\n# <func> # Python \n# Write a function to check if a given string is a valid url.\ndef is_url_valid(url):\n    return is_url(url)"], ["\n\n# <func> # Python \n# Write a function to find the difference of the first even and first odd number of a given list.\ndef diff_even_odd(list1):\n    return list1[0] - list1[1]\n\n# Example usage:"], ["\nimport sys \n\n# <func> # Python \n# Write a function to find the size in bytes of the given tuple.\ndef tuple_size(tuple_list):\n    return len(tuple_list) * 2 * len(tuple_list[0])\n\n# <func> # Python \n# Write a function to find the size in bytes of the given list.\ndef list_size(list_list):\n    return len(list_list) * 2 * len(list_list[0])\n\n# <func> # Python \n# Write a function to find the size in bytes of the given dictionary.\ndef dict_size(dict_list):\n    return len(dict_list) * 2 * len(dict_list[0])\n\n# <func> # Python \n# Write a function to find the size in bytes of the given string.\ndef string_size(string_list):\n    return len(string_list) * 2 * len(string_list[0])\n\n# <func> # Python \n# Write a function to find the size in bytes of the given list of lists.\ndef list_list_size(list_list):\n    return len(list_list) * 2 * len(list_list[0])\n\n# <func> # Python \n# Write a function to find the size in bytes of the given list of tuples.\ndef tuple_list_size(tuple_list):\n    return len(tuple_list) * 2 * len(tuple_list[0])\n\n# <func> # Python \n# Write a function to find the size in bytes of the given list of dictionaries.\ndef dict_list_size(dict_list):\n    return len(dict_list) * 2 * len(dict_list[0])\n\n# <func> # Python \n# Write a function to find the size in bytes of the given list of strings.\ndef string_list_size(string_list):\n    return len(string_list) * 2 * len(string_list[0])\n\n# <func> # Python \n# Write a function to find the size in bytes of the given list of lists of lists.\ndef list_list_list_size(list"], ["\n\n# <func> # Python \n# Write a function to find kth element from the given two sorted arrays.\ndef find_kth(arr1, arr2, k):\n    return arr1[k] if k < len(arr1) else arr2[k]\n# -\n\n# Testing the function\narr1 = [1, 2, 3, 4, 5]\narr2 = [2, 3, 4, 5, 6]\nk = 3"], ["\n\n# <func> # Python \n# Write a function to check whether the given number is armstrong or not.\ndef armstrong_number(number):\n    \"\"\"\n    :param number: The number to check.\n    :return: True if the number is armstrong, False otherwise.\n    \"\"\"\n    if number < 0:\n        return False\n    if number == 0:\n        return True\n    for I in range(1, number):\n        if number % I == 0:\n            return False\n    return True\n\n# <func> # Python \n# Test the function.\ndef test():\n    assert armstrong_number(123) == True\n    assert armstrong_number(123456789) == True\n    assert armstrong_number(1234567890) == False\n    assert armstrong_number(1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567"], ["\n\n# <func> # Python \n# Write a function to find sum and average of first n natural numbers.\ndef sum_average(number):\n    sum = 0\n    average = 0\n    for I in range(number):\n        sum += i\n    average = sum / number\n    return (sum, average)\nn\n# <func> # Python \n# Write a python function to check whether the given number is even or not.\ndef is_Even(n):\n    return n % 2 == 0\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a python function to find the first repeated character in a given string.\ndef first_repeated_char(str1):\n    return str1[0]\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to get all lucid numbers smaller than or equal to a given integer.\ndef get_ludic(n):\n    return [i for i in range(1, n + 1) if i <= n]\n\n# Test function"], ["\n\n# <func> # Python \n# Write a function to reverse words seperated by spaces in a given string.\ndef reverse_words(s):\n    return ' '.join(reversed(s.split()))\n\n# Test the function"], ["\nimport math\n\n# <func> # Python \n# Write a function to check if the given integer is a prime number.\ndef prime_num(num):\n    if num < 2:\n        return False\n    for I in range(2, int(math.sqrt(num)) + 1):\n        if num % I == 0:\n            return False\n    return True\n\n# <func> # Python \n# Check if the given integer is a prime number.\ndef is_prime(num):\n    if num < 2:\n        return False\n    for I in range(2, int(math.sqrt(num)) + 1):\n        if num % I == 0:\n            return False\n    return True\n\n# <func> # Python \n# Check if the given integer is a prime number.\ndef is_prime(num):\n    if num < 2:\n        return False\n    for I in range(2, int(math.sqrt(num)) + 1):\n        if num % I == 0:\n            return False\n    return True\n\n# <func> # Python \n# Check if the given integer is a prime number.\ndef is_prime(num):\n    if num < 2:\n        return False\n    for I in range(2, int(math.sqrt(num)) + 1):\n        if num % I == 0:\n            return False\n    return True\n\n# <func> # Python \n# Check if the given integer is a prime number.\ndef is_prime(num):\n    if num < 2:\n        return False\n    for I in range(2, int(math.sqrt(num)) + 1):\n        if num % I == 0:\n            return False\n    return True\n\n# <func> # Python \n# Check if the given integer is a prime number.\ndef is_prime(num):\n    if num < 2:\n        return False\n    for I in range(2, int(math.sqrt(num)) + 1):\n        if num % I == 0:\n            return False\n    return True\n\n# <func> # Python \n# Check if the given integer is a prime number.\ndef"], ["\nimport math\n\n# <func> # Python \n# Write a function to convert degrees to radians.\ndef radian_degree(degree):\n    return math.radians(degree)\n\n# Test the function."], ["\nimport re\n\n# <func> # Python \n# Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\ndef find_literals(text, pattern):\n    start = 0\n    end = 0\n    for i in range(len(text)):\n        if text[i] == pattern[0]:\n            start = i\n            end = i\n            break\n        elif text[i] == pattern[1]:\n            end = i\n            break\n    return text[start:end]\n# <func> # Python \n# Write a function to remove all occurrences of a pattern in a string. The function should return the new string.\ndef remove_pattern(text, pattern):\n    return text.replace(pattern, '')\n# <func> # Python \n# Write a function to replace all occurrences of a pattern in a string with a new string. The function should return the new string.\ndef replace_pattern(text, pattern, new_text):\n    return text.replace(pattern, new_text)\n# <func> # Python \n# Write a function to remove all occurrences of a pattern in a string. The function should return the new string.\ndef remove_pattern_all(text, pattern):\n    return text.replace(pattern, '')\n# <func> # Python \n# Write a function to replace all occurrences of a pattern in a string with a new string. The function should return the new string.\ndef replace_pattern_all(text, pattern, new_text):\n    return text.replace(pattern, new_text)"], ["\n\n# <func> # Python \n# Write a python function to find nth bell number.\ndef bell_Number(n):\n    return (n * (n + 1)) // 2\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\ndef remove_kth_element(list1, k):\n    return [list1[i] for i in range(len(list1)) if i != k]"], ["\n\n# <func> # Python \n# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, N):\n    return max(test_list[i][N] for i in range(len(test_list)))\n\n# Testing"], ["\n\n# <func> # Python \n# Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\ndef merge(lst):\n    return [list(x) for x in zip(*lst)]\n\n# Test the function\nlst = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]"], ["\n\n# <func> # Python \n# Write a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef cummulative_sum(test_list):\n    return sum(test_list)\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\ndef average_tuple(nums):\n    return [sum(nums) / len(nums) for nums in nums]\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function which takes two tuples of the same length and performs the element wise modulo.\ndef tuple_modulo(test_tup1, test_tup2):\n    return tuple(map(lambda x: x % test_tup2[0], test_tup1))\n\n# Example usage:\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (2, 4, 6)"], ["\n\n# <func> # Python \n# Write a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n    return [nums1[i] / nums2[i] for i in range(len(nums1))]\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str):\n    return test_str.replace(' ', '')\n\n# Test the function\ntest_str = 'hello world'"], ["\n\n# <func> # Python \n# Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\ndef largest_subset(a):\n    return max(a)\n\n# Test the function with some examples."], ["\n\n# <func> # Python \n# Write a function to find the median of two sorted lists of same size.\ndef get_median(arr1, arr2, n):\n    if n == 0:\n        return arr1[0]\n    elif n == 1:\n        return arr2[0]\n    else:\n        return (arr1[n // 2] + arr2[n // 2]) / 2\n\n# Test function\narr1 = [1, 2, 3, 4, 5]\narr2 = [2, 4, 6, 8, 10]"], ["\n\n# <func> # Python \n# Write a function to compute the n-th power of each number in a list.\ndef nth_nums(nums, n):\n    return [pow(num, n) for num in nums]\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to convert a given string to uppercase.\ndef is_upper(string):\n    return string.isupper()\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\ndef triangle_area(r):\n    return 0.5 * (r * r) * (r * r)\n\n# Test the function with some sample inputs."], ["\n\n# <func> # Python \n# Write a function to replace all spaces in the given string with '%20'.\ndef replace_spaces(string):\n    return string.replace(' ', '%20')\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to find even numbers from a list of numbers.\ndef Split(l):\n    return [n for n in l if n % 2 == 0]\n\n# Test the function.\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], ["\n\n# <func> # Python \n# Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef adjac(ele, sub = []):\n    if ele[0] == ele[1]:\n        return [ele]\n    else:\n        return [ele] + adjac(ele[0], sub) + adjac(ele[1], sub)\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to replace whitespaces with an underscore and vice versa in a given string.\ndef replace_spaces(text):\n    return text.replace(' ', '_')\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list):\n    return num_list[::-1]\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a python function to find the sum of xor of all pairs of numbers in the given list.\ndef pair_xor_Sum(arr,n):\n    return sum(xor(arr[i],arr[i+1]) for i in range(n))\n\n# Testing function"], ["\nimport heapq as hq\n\n# <func> # Python \n# Write a function to sort the given list.\ndef heap_sort(iterable):\n    \"\"\"\n    Sorts the given list using the heap sort algorithm.\n    \"\"\"\n    heapq.heapify(iterable)\n    for I in range(len(iterable) - 1, -1, -1):\n        heapq.heappop(iterable)\n        heapq.heappush(iterable, iterable[i])\n    return iterable\n\n# <func> # Python \n# Write a function to find the kth largest element in the given list.\ndef kth_largest(iterable, k):\n    \"\"\"\n    Finds the kth largest element in the given list.\n    \"\"\"\n    heap = []\n    for I in range(len(iterable)):\n        heapq.heappush(heap, iterable[i])\n    for I in range(len(heap)):\n        heapq.heappop(heap)\n    return heap[k - 1]\n\n# <func> # Python \n# Write a function to find the kth smallest element in the given list.\ndef kth_smallest(iterable, k):\n    \"\"\"\n    Finds the kth smallest element in the given list.\n    \"\"\"\n    heap = []\n    for I in range(len(iterable)):\n        heapq.heappush(heap, iterable[i])\n    for I in range(len(heap)):\n        heapq.heappop(heap)\n    return heap[k - 1]\n\n# <func> # Python \n# Write a function to find the kth smallest element in the given list.\ndef kth_smallest_by_value(iterable, value):\n    \"\"\"\n    Finds the kth smallest element in the given list by value.\n    \"\"\"\n    heap = []\n    for I in range(len(iterable)):\n        heapq.heappush(heap, iterable[i])\n    for I in range(len(heap)):\n        heapq.heappop(heap)\n    return heap[k - 1]"], ["\n\n# <func> # Python \n# Write a function to check whether the given amount has no profit and no loss\ndef noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount == 0:\n        return True\n    elif actual_cost == 0:\n        return True\n    else:\n        return sale_amount - actual_cost > 0\n# end <func> # Python \n\n# <func> # Python \n# Check whether the given amount has no profit and no loss\ndef noprofit_noloss_2(actual_cost, sale_amount):\n    if sale_amount == 0:\n        return True\n    elif actual_cost == 0:\n        return True\n    else:\n        return sale_amount - actual_cost > 0\n# end <func> # Python \n\n# <func> # Python \n# Check whether the given amount has no profit and no loss\ndef noprofit_noloss_3(actual_cost, sale_amount):\n    if sale_amount == 0:\n        return True\n    elif actual_cost == 0:\n        return True\n    else:\n        return sale_amount - actual_cost > 0\n# end <func> # Python \n\n# <func> # Python \n# Check whether the given amount has no profit and no loss\ndef noprofit_noloss_4(actual_cost, sale_amount):\n    if sale_amount == 0:\n        return True\n    elif actual_cost == 0:\n        return True\n    else:\n        return sale_amount - actual_cost > 0\n# end <func> # Python \n\n# <func> # Python \n# Check whether the given amount has no profit and no loss\ndef noprofit_noloss_5(actual_cost, sale_amount):\n    if sale_amount == 0:\n        return True\n    elif actual_cost == 0:\n        return True\n    else:\n        return sale_amount - actual_cost > 0\n# end <func> # Python \n\n# <func> # Python \n# Check whether the given amount has no profit and no loss\ndef noprofit_"], ["\nimport math\n\n# <func> # Python \n# Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\ndef wind_chill(v,t):\n    return (math.ceil(v/10) * 10) + (t - 273.15)\n\n# <func> # Python \n# Calculate the wind chill index for a given wind velocity and temperature.\ndef wind_chill_from_wind_velocity(v,t):\n    return wind_chill(v,t)\n\n# <func> # Python \n# Calculate the wind chill index for a given wind velocity and temperature.\ndef wind_chill_from_temperature(t,t_min,t_max):\n    return wind_chill(t,t_min) + (t - t_min) * (t_max - t_min) / 1000\n\n# <func> # Python \n# Calculate the wind chill index for a given wind velocity and temperature.\ndef wind_chill_from_temperature_and_wind_velocity(t,v,t_min,t_max):\n    return wind_chill(t,t_min) + (t - t_min) * (v - v.min()) / 1000 * (t_max - t_min) / 1000\n\n# <func> # Python \n# Calculate the wind chill index for a given wind velocity and temperature.\ndef wind_chill_from_temperature_and_wind_velocity_and_minimum_temperature(t,v,t_min,t_max):\n    return wind_chill(t,t_min) + (t - t_min) * (v - v.min()) / 1000 * (t_max - t_min) / 1000 * (t_max - t_min) / 1000\n\n# <func> # Python \n# Calculate the wind chill index for a given wind velocity and temperature.\ndef wind_chill_from_temperature_and_"], ["\n\n# <func> # Python \n# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names):\n    return sum(len(name) for name in sample_names if name[0].islower())\n\n# -\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to find the nth nonagonal number.\ndef is_nonagonal(n):\n    return n % 2 == 0\n\n# Test cases"], ["\nimport re\n\n# <func> # Python \n# Write a function that checks if a strings contains 'z', except at the start and end of the word.\ndef text_match_wordz_middle(text):\n    return re.search(r'^[a-z]+$', text) and re.search(r'[a-z]+$', text)\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k):\n    \"\"\"\n    :param input: input array\n    :param k: kth element\n    :return: reversed array\n    \"\"\"\n    if k == 0:\n        return input\n    else:\n        return reverse_Array_Upto_K(input[:k], k - 1) + input[k]\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nk = 2"], ["\n\n# <func> # Python \n# Write a function to add a dictionary to the tuple. The output should be a tuple.\ndef add_dict_to_tuple(test_tup, test_dict):\n    return (test_tup + (test_dict,))\n\n# Example usage:\ntest_tup = (1, 2)\ntest_dict = {'a': 1, 'b': 2}\nresult = add_dict_to_tuple(test_tup, test_dict)"], ["\n\n# <func> # Python \n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\ndef maxAverageOfPath(cost):\n    n = len(cost)\n    m = len(cost[0])\n    max_cost = float('-inf')\n    max_path = []\n    for i in range(n):\n        for j in range(m):\n            if cost[i][j] > max_cost:\n                max_cost = cost[i][j]\n                max_path = [i, j]\n    return max_cost, max_path\n\n# Test cases:\n# >>> maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# (1, [0, 1])\n# >>> maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\n# (2, [0, 1, 2])\n# >>> maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]])\n# (3, [0, 1, 2, 3])\n# >>> maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]])\n# (4, [0, 1, 2, 3, 4])\n# >>> maxAverageOfPath([[1, 2,"], ["\n\n# <func> # Python \n# The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\ndef filter_data(students,h,w):\n    return [student for student in students if student['height'] >= h and student['weight'] >= w]\n\nnfrom operator import eq\n\n# <func> # Python \n# The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                count += 1\n    return count\n\n# Example:\n# >>> count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n# 2\n# >>> count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 6])\n# 0\n# >>> count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6])\n# 0\n# >>> count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7])\n# 0\n# >>> count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8])\n# 0\n# >>> count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n# 0\n# >>> count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n# 0\n# >>> count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9"], ["\n\n# <func> # Python \n# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power):\n    result = 1\n    for I in range(1, power+1):\n        result *= base\n    return result\n\n# Test the function with some examples."], ["\nimport re\n\n# <func> # Python \n# Write a function to extract values between quotation marks \" \" of the given string.\ndef extract_quotation(text1):\n    return re.findall(r'\"[^\"]*\"', text1)\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\ndef multiply_elements(test_tup):\n    return tuple(t_i * t_i for t_i in test_tup)\n\n# Test the function\ntest_tup = (1, 2, 3, 4)"], ["\n\n# <func> # Python \n# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1,lst2):\n    return [a+b for a,b in zip(lst1,lst2)]\n\n# Testing the function"], ["\nfrom itertools import groupby\n\n# <func> # Python \n# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums):\n    return [nums[i] for i, num in enumerate(nums) if i != i - 1]\n\n# Test cases"], ["\nimport math\n\n# <func> # Python \n# Write a function to find the lateral surface area of a cone given radius r and the height h.\ndef lateralsurface_cone(r,h):\n    return math.pi * r * h\n\n# <func> # Python \n# Write a function to find the volume of a cone given radius r and the height h.\ndef volume_cone(r,h):\n    return math.pi * r * h * h\n\n# <func> # Python \n# Write a function to find the surface area of a cone given radius r and the height h.\ndef surfacearea_cone(r,h):\n    return math.pi * r * h\n\n# <func> # Python \n# Write a function to find the volume of a cone given radius r and the height h.\ndef volume_cone(r,h):\n    return math.pi * r * h * h\n\n# <func> # Python \n# Write a function to find the surface area of a cone given radius r and the height h.\ndef surfacearea_cone(r,h):\n    return math.pi * r * h"], ["\nimport re\n\n# <func> # Python \n# Write a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef replace_specialchar(text):\n    return re.sub(r'[ \\.,]', ':', text)\n\n# Example usage:\ntext = 'This is a test. : This is a test.'"], ["\n\n# <func> # Python \n# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(A, x):\n    for I in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n# -\n\n# Test the function with some examples:\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]"], ["\n\n# <func> # Python \n# Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 1\n    for I in range(1, n):\n        res *= arr[i]\n    return res\n\n# <func> # Python \n# Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 1\n    for I in range(1, n):\n        res *= arr[i]\n    return res\n\n# <func> # Python \n# Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 1\n    for I in range(1, n):\n        res *= arr[i]\n    return res\n\n# <func> # Python \n# Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 1\n    for I in range(1, n):\n        res *= arr[i]\n    return res\n\n# <func> # Python \n# Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef sum_Of_Subarray_Prod(arr):\n    n"], ["\n\n# <func> # Python \n# Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\ndef toggle_middle_bits(n):\n    return n ^ (n >> 1) ^ (n >> 2) ^ (n >> 3) ^ (n >> 4) ^ (n >> 5) ^ (n >> 6) ^ (n >> 7) ^ (n >> 8) ^ (n >> 9) ^ (n >> 10) ^ (n >> 11) ^ (n >> 12) ^ (n >> 13) ^ (n >> 14) ^ (n >> 15) ^ (n >> 16) ^ (n >> 17) ^ (n >> 18) ^ (n >> 19) ^ (n >> 20) ^ (n >> 21) ^ (n >> 22) ^ (n >> 23) ^ (n >> 24) ^ (n >> 25) ^ (n >> 26) ^ (n >> 27) ^ (n >> 28) ^ (n >> 29) ^ (n >> 30) ^ (n >> 31) ^ (n >> 32) ^ (n >> 33) ^ (n >> 34) ^ (n >> 35) ^ (n >> 36) ^ (n >> 37) ^ (n >> 38) ^ (n >> 39) ^ (n >> 40) ^ (n >> 41) ^ (n >> 42) ^ (n >> 43) ^ (n >> 44) ^ (n >> 45) ^ (n >> 46) ^ (n >> 47) ^ (n >> 48) ^ (n >> 49) ^ (n >> 50) ^ (n >> 51) ^ (n >> 52) ^ (n >> 53) ^ (n >> 54) ^ (n >> 55) ^ (n >> 56) ^ (n"], ["\nimport bisect\n\n# <func> # Python \n# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef left_insertion(a, x):\n    bisect.insort(a, x)\n    return bisect.bisect_left(a, x)\n\n# Example usage:"], ["\nimport re \n\n# <func> # Python \n# Write a function to check whether the given string is starting with a vowel or not using regex.\ndef check_str(string):\n    return re.match('^[aeiouAEIOU]+$', string)\n\n# Example usage:"], ["\nimport math \n\n# <func> # Python \n# Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\ndef find_Index(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_Index(n-1) + 1\n\n# <func> # Python \n# Write a python function to find the sum of all odd numbers in a list. https://www.geeksforgeeks.org/sum-of-all-odd-numbers-in-a-list/\ndef find_sum(lst):\n    sum = 0\n    for num in lst:\n        if num % 2 != 0:\n            sum += num\n    return sum\n\n# <func> # Python \n# Write a python function to find the sum of all even numbers in a list. https://www.geeksforgeeks.org/sum-of-all-even-numbers-in-a-list/\ndef find_sum(lst):\n    sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            sum += num\n    return sum\n\n# <func> # Python \n# Write a python function to find the sum of all numbers in a list. https://www.geeksforgeeks.org/sum-of-all-numbers-in-a-list/\ndef find_sum(lst):\n    sum = 0\n    for num in lst:\n        sum += num\n    return sum\n\n# <func> # Python \n# Write a python function to find the sum of all numbers in a list. https://www.geeksforgeeks.org/sum-of-all-numbers-in-a-list/\ndef find_sum(lst):\n    sum = 0\n    for num in lst:\n        sum += num\n    return sum\n\n# <func> # Python \n# Write a python function to find the sum of all numbers in a list. https://www.geeksforgeeks.org/sum-of-all-numbers"], ["\n\n# <func> # Python \n# Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\ndef tuple_to_dict(test_tup):\n    return {tuple(t): v for t, v in zip(test_tup, range(len(test_tup)))}\n\n# Example usage:\ntest_tup = (1, 2, 3)"], ["\n\n# <func> # Python \n# Write a python function to check whether all the characters are same or not.\ndef all_Characters_Same(s):\n    return all(c == s[i] for i, c in enumerate(s))\n\n# Example usage:"], ["\nimport math\n\n# <func> # Python \n# Write a function to caluclate the area of a tetrahedron.\ndef area_tetrahedron(side):\n    return math.pi * side * side * side * side\n\n# <func> # Python \n# Write a function to calculate the volume of a tetrahedron.\ndef volume_tetrahedron(side):\n    return math.pi * side * side * side * side * side\n\n# <func> # Python \n# Write a function to calculate the surface area of a tetrahedron.\ndef surface_area_tetrahedron(side):\n    return math.pi * side * side * side * side * side * side\n\n# <func> # Python \n# Write a function to calculate the volume of a tetrahedron.\ndef volume_tetrahedron(side):\n    return math.pi * side * side * side * side * side * side * side\n\n# <func> # Python \n# Write a function to calculate the surface area of a tetrahedron.\ndef surface_area_tetrahedron(side):\n    return math.pi * side * side * side * side * side * side * side * side"], ["\n\n# <func> # Python \n# Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\ndef rotate_right(l, m):\n    return [l[i] for i in range(m, len(l) - 1, -1)] + [l[i] for i in range(0, m)] + [l[len(l) - 1]]\n\n# Testing the function\nl = [1, 2, 3, 4, 5]\nm = 2"], ["\n\n# <func> # Python \n# Write a function to check if the given tuple has any none value or not.\ndef check_none(test_tup):\n    return not any(test_tup)\n\n# Example usage:\ntest_tup = (1, 2, 3, None)"], ["\n\n# <func> # Python \n# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum):\n    return lambda x: x % endnum == 0 and x % startnum == 0\n\n# Example usage:"], ["\nimport re\n\n# <func> # Python \n# Write a function to put spaces between words starting with capital letters in a given string.\ndef capital_words_spaces(str1):\n    return ' '.join(re.findall('[A-Z][a-z]+', str1))"], ["\n\n# <func> # Python \n# Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\ndef sort_numeric_strings(nums_str):\n    return sorted(nums_str, key=lambda x: int(x))\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome. https://www.geeksforgeeks.org/check-if-a-string-is-a-palindrome-in-python/\ndef is_palindrome(str):\n    return str == str[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome. https://www.geeksforgeeks.org/check-if-a-string-is-a-palindrome-in-python/\ndef is_palindrome(str):\n    return str == str[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome. https://www.geeksforgeeks.org/check-if-a-string-is-a-palindrome-in-python/\ndef is_palindrome(str):\n    return str == str[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome. https://www.geeksforgeeks.org/check-if-a-string-is-a-palindrome-in-python/\ndef is_palindrome(str):\n    return str == str[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome. https://www.geeksforgeeks.org/check-if-a-string-is-a-palindrome-in-python/\ndef is_palindrome(str):\n    return str == str[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome. https://www.geeksforgeeks.org/"], ["\n\n# <func> # Python \n# Write a function to add the given tuple to the given list.\ndef add_tuple(test_list, test_tup):\n    test_list.append(test_tup)\n    return test_list\n# -\n\n# Test the function with some examples.\ntest_list = [1, 2, 3, 4, 5]\ntest_tup = (1, 2, 3, 4, 5)\nresult = add_tuple(test_list, test_tup)"], ["\n\n# <func> # Python \n# Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef check_min_heap_helper(arr, i):\n    if arr[i] < arr[0]:\n        return True\n    else:\n        return False\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr) - 1)\n\n# <func> # Python \n# Check if the given array is a min heap. https://www.geeksforgeeks.org/check-if-given-array-represents-min-heap/\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)\n\n# <func> # Python \n# Check if the given array is a max heap. https://www.geeksforgeeks.org/check-if-given-array-represents-max-heap/\ndef check_max_heap(arr):\n    return check_min_heap_helper(arr, len(arr) - 1)\n\n# <func> # Python \n# Check if the given array is a heap. https://www.geeksforgeeks.org/check-if-given-array-represents-heap/\ndef check_heap(arr):\n    return check_min_heap_helper(arr, len(arr) - 1)\n\n# <func> # Python \n# Check if the given array is a heap. https://www.geeksforgeeks.org/check-if-given-array-represents-heap/\ndef check_heap_helper(arr):\n    return arr[0] < arr[1] and arr[0] < arr[2] and arr[0] < arr[3]\n\ndef check_heap(arr):\n    return check_heap_helper(arr)\n\n# <func> # Python \n# Check if the given array is a heap. https://www"], ["\n\n# <func> # Python \n# Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\ndef jacobsthal_num(n):\n    return n * (n + 1) // 2\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\ndef min_k(test_list, K):\n    return min(test_list, key=lambda x: len(x))[0]\n\n# <func> # Python \n# Test cases\ntest_cases = [\n    (([1, 2, 3, 4, 5], 2), 1),\n    (([1, 2, 3, 4, 5], 3), 1),\n    (([1, 2, 3, 4, 5], 4), 2),\n    (([1, 2, 3, 4, 5], 5), 3),\n    (([1, 2, 3, 4, 5], 6), 4),\n    (([1, 2, 3, 4, 5], 7), 5),\n    (([1, 2, 3, 4, 5], 8), 6),\n    (([1, 2, 3, 4, 5], 9), 7),\n    (([1, 2, 3, 4, 5], 10), 8),\n    (([1, 2, 3, 4, 5], 11), 9),\n    (([1, 2, 3, 4, 5], 12), 10),\n    (([1, 2, 3, 4, 5], 13), 11),\n    (([1, 2, 3, 4, 5], 14), 12),\n    (([1, 2, 3, 4, 5], 15), 13),\n    (([1, 2, 3, 4, 5], 16), 14),\n    (([1, 2, 3, 4, 5], 17),"], ["\n\n# <func> # Python \n# We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\ndef extract_index_list(l1, l2, l3):\n    return [i for i in range(len(l1)) if l1[i] == l2[i] and l1[i] == l3[i]]\n\n# Example usage:\nl1 = [1, 2, 3, 4, 5]\nl2 = [1, 2, 3, 4, 5]\nl3 = [1, 2, 3, 4, 5]"], ["\n\n# <func> # Python \n# Write a function to find the second smallest number in a list.\ndef second_smallest(numbers):\n    if len(numbers) == 0:\n        return None\n    elif len(numbers) == 1:\n        return numbers[0]\n    else:\n        return numbers[1]\nn\n# <func> # Python \n# Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\ndef count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] == test_list[i][len(test_list[i]) - j - 1]:\n                count += 1\n    return count\n\nn\n# <func> # Python \n# Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\ndef unique_sublists(list1):\n    return {list1[i]: len(list1[i]) for i in range(len(list1))}\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to check whether a given string is a decimal number with a precision of 2.\ndef is_decimal(num):\n    return num.count('.') == 1 and num.count('e') == 0 and num.count('E') == 0 and num.count('+') == 0 and num.count('-') == 0 and num.count('0') == 0 and num.count('1') == 1 and num.count('2') == 1 and num.count('3') == 1 and num.count('4') == 1 and num.count('5') == 1 and num.count('6') == 1 and num.count('7') == 1 and num.count('8') == 1 and num.count('9') == 1 and num.count('0') == 1 and num.count('1') == 1 and num.count('2') == 1 and num.count('3') == 1 and num.count('4') == 1 and num.count('5') == 1 and num.count('6') == 1 and num.count('7') == 1 and num.count('8') == 1 and num.count('9') == 1 and num.count('0') == 1 and num.count('1') == 1 and num.count('2') == 1 and num.count('3') == 1 and num.count('4') == 1 and num.count('5') == 1 and num.count('6') == 1 and num.count('7') == 1 and num.count('8') == 1 and num.count('9') == 1 and num.count('0') == 1 and num.count('1') == 1 and num.count('2') == 1 and num.count('3') == 1 and num.count('4') == 1 and num.count('5') == 1 and num.count('6') == 1 and num.count('7') == 1 and num.count('8') == 1 and num.count('9') == 1 and num.count('0') == 1 and num.count('1') == "], ["\n\n# <func> # Python \n# Write a python function to check whether a list of numbers contains only one distinct element or not.\ndef unique_Element(arr):\n    return len(set(arr)) == len(arr)\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\ndef check_monthnumber_number(monthnum3):\n    if monthnum3 == 1:\n        return True\n    elif monthnum3 == 2:\n        return True\n    elif monthnum3 == 3:\n        return True\n    elif monthnum3 == 4:\n        return True\n    elif monthnum3 == 5:\n        return True\n    elif monthnum3 == 6:\n        return True\n    elif monthnum3 == 7:\n        return True\n    elif monthnum3 == 8:\n        return True\n    elif monthnum3 == 9:\n        return True\n    elif monthnum3 == 10:\n        return True\n    elif monthnum3 == 11:\n        return True\n    elif monthnum3 == 12:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\ndef check_monthnumber_month(monthnum3):\n    if monthnum3 == 1:\n        return True\n    elif monthnum3 == 2:\n        return True\n    elif monthnum3 == 3:\n        return True\n    elif monthnum3 == 4:\n        return True\n    elif monthnum3 == 5:\n        return True\n    elif monthnum3 == 6:\n        return True\n    elif monthnum3 == 7:\n        return True\n    elif monthnum3 == 8:\n        return True\n    elif monthnum3 == 9:\n        return True\n    elif monthnum3 == 10:\n        return True\n    elif monthnum3 == 11:\n        return True\n    elif monthnum3 == 12:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to "], ["\n\n# <func> # Python \n# Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef find_min_diff(arr,n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                min_diff = min(min_diff, arr[i] - arr[j])\n    return min_diff\nn\n# <func> # Python \n# Write a python function to count number of digits in a given string.\ndef number_ctr(s):\n    return len(s) - len(s.replace(' ', ''))\nnimport math \n\n# <func> # Python \n# Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef is_polite(n):\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_polite(n // 2)\n\n# <func> # Python \n# Find the nth prime number. \ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for I in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % I == 0:\n                return False\n        return True\n\n# <func> # Python \n# Find the nth composite number. \ndef is_composite(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for I in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % I == 0:\n                return False\n        return True\n\n# <func> # Python \n# Find the nth number that is not a composite number. \ndef is_not_composite(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for I in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % I == 0:\n                return False\n        return True\n\n# <func> # Python \n# Find the nth number that is not a composite number. \ndef is_not_composite_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == "], ["\n\n# <func> # Python \n# Write a function to return a list of all pairs of consecutive items in a given list.\ndef pair_wise(l1):\n    return [(i, j) for i, j in itertools.combinations(l1, 2)]\n\n# Test the function with some examples."], ["\n\n# <func> # Python \n# Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef get_pairs_count(arr, sum_):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] + arr[i + 1] == sum_:\n            count += 1\n    return count\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a python function to get the difference between two lists.\ndef Diff(li1,li2):\n    return li1 - li2\n# Example usage:\nli1 = [1,2,3,4,5]\nli2 = [2,3,4,5,6]"], ["\n\n# <func> # Python \n# Write a python function to find the sum of fourth power of first n odd natural numbers.\ndef odd_num_sum(n):\n    return sum(pow(i, 4) for i in range(1, n + 1))\n\n# Test the function"], ["\nfrom collections import deque\n\n# <func> # Python \n# Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ndef check_expression(exp):\n    stack = deque()\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if stack:\n                if stack.pop() == '(':\n                    return False\n                else:\n                    return False\n            else:\n                return False\n        elif c == '[':\n            stack.append(c)\n        elif c == ']':\n            if stack:\n                if stack.pop() == '[':\n                    return False\n                else:\n                    return False\n            else:\n                return False\n        elif c == '{':\n            stack.append(c)\n        elif c == '}':\n            if stack:\n                if stack.pop() == '{':\n                    return False\n                else:\n                    return False\n            else:\n                return False\n        elif c == '+':\n            if stack:\n                if stack.pop() == '(':\n                    return False\n                else:\n                    return False\n            else:\n                return False\n        elif c == '-':\n            if stack:\n                if stack.pop() == '(':\n                    return False\n                else:\n                    return False\n            else:\n                return False\n        elif c == '*':\n            if stack:\n                if stack.pop() == '(':\n                    return False\n                else:\n                    return False\n            else:\n                return False\n        elif c == '/':\n            if stack:\n                if stack.pop() == '(':\n                    return False\n                else:\n                    return False\n            else:\n                return False\n        elif c == '^':\n            if stack:\n                if stack.pop() == '(':\n                    return False\n                else:\n                    return False\n            else:\n                return False\n        elif c == '(':\n            if stack:\n                if stack"], ["\n\n# <func> # Python \n# Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n    return [word for word in test_str.split() if len(word) <= K]\n\n# Test the function\ntest_str = \"hello world\""], ["\nimport re\n\n# <func> # Python \n# Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\ndef occurance_substring(text,pattern):\n    return re.findall(pattern,text)\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to check whether every odd index contains odd numbers of a given list.\ndef odd_position(nums):\n    return all(nums[i] % 2 == 1 for i in range(len(nums)))\n\n# Testing function"], ["\n\n# <func> # Python \n# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr):\n    sum = 0\n    for i in arr:\n        if i not in sum:\n            sum += i\n    return sum\nnfrom itertools import groupby\n\n# <func> # Python \n# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for group in groupby(list1, key=lambda x: x)]"], ["\nfrom itertools import combinations \n\n# <func> # Python \n# Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\ndef find_combinations(test_list):\n    return combinations(test_list, r)\n\n# Example usage:\ntest_list = [1, 2, 3]"], ["\nimport math \n\n# <func> # Python \n# Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\ndef count_divisors(n):\n    count = 0\n    for I in range(1, n+1):\n        if n % I == 0:\n            count += 1\n    return count\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\ndef odd_length_sum(arr):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 != 0:\n            count += arr[i]\n    return count\n\nn\n# <func> # Python \n# Write a function to find the product of first even and odd number of a given list.\ndef mul_even_odd(list1):\n    return sum([i**2 for i in list1 if i % 2 == 0])\n# -\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to convert tuple string to integer tuple.\ndef tuple_str_int(test_str):\n    return tuple(map(int, test_str.split(',')))\n\n# Example usage:\ntest_str = '1,2,3'\nresult = tuple_str_int(test_str)"], ["\nimport bisect\n\n# <func> # Python \n# Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x):\n    bisect.insort(a, x)\n    return bisect.bisect_right(a, x)\n\n# <func> # Python \n# Write a function to find the right insertion point for a specified value in sorted order.\ndef right_insertion_sorted(a, x):\n    return bisect.bisect_right(a, x)\n\n# <func> # Python \n# Write a function to find the left insertion point for a specified value in sorted order.\ndef left_insertion(a, x):\n    bisect.insort(a, x)\n    return bisect.bisect_left(a, x)\n\n# <func> # Python \n# Write a function to find the left insertion point for a specified value in sorted order.\ndef left_insertion_sorted(a, x):\n    return bisect.bisect_left(a, x)\n\n# <func> # Python \n# Write a function to find the right insertion point for a specified value in sorted order.\ndef right_insertion_sorted(a, x):\n    return bisect.bisect_right(a, x)\n\n# <func> # Python \n# Write a function to find the left insertion point for a specified value in sorted order.\ndef left_insertion_sorted(a, x):\n    return bisect.bisect_left(a, x)\n\n# <func> # Python \n# Write a function to find the right insertion point for a specified value in sorted order.\ndef right_insertion_sorted(a, x):\n    return bisect.bisect_right(a, x)\n\n# <func> # Python \n# Write a function to find the left insertion point for a specified value in sorted order.\ndef left_insertion_sorted(a, x):\n    return bisect.bisect_left(a, x)\n\n# <func> # Python \n# Write a function to find the right insertion point for a specified value in sorted order.\n"], ["\nimport re\n\n# <func> # Python \n# Write a function that matches a string that has an a followed by three 'b'.\ndef text_match_three(text):\n    return re.match(r'<a.*?b.*?>', text)\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function to create a new tuple from the given string and list.\ndef new_tuple(test_list, test_str):\n    return tuple(test_list) + tuple(test_str)\n\n# Test the function.\ntest_tuple = new_tuple([\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"])"], ["\n\n# <func> # Python \n# Write a python function to check whether every even index contains even numbers of a given list.\ndef even_position(nums):\n    return True if nums[0] % 2 == 0 else False\n\n# Example usage:\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], ["\n\n# <func> # Python \n# Write a function to remove tuples from the given tuple.\ndef remove_nested(test_tup):\n    return tuple(tuple(x) for x in test_tup if x[0] != x[1])\n# -\n\n# Testing the function\ntest_tup = (1, 2, 3, 4, 5)\ntest_tup_new = remove_nested(test_tup)"], ["\n\n# <func> # Python \n# Write a python function to count the number of lists in a given number of lists.\ndef count_list(input_list):\n    return len(input_list)\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to find the last position of an element in a sorted array.\ndef last(arr,x):\n    return arr[arr.index(x)+1]\n\n# Test function\narr = [1,2,3,4,5,6,7,8,9]"], ["\nimport re\n\n# <func> # Python \n# Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef text_starta_endb(text):\n    return re.search('a.*b', text)\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write function to find the sum of all items in the given dictionary.\ndef return_sum(d):\n    return sum(d.values())\n\n# Example usage:"], ["\n\n# <func> # Python \n# Write a python function to find the sum of all odd natural numbers within the range l and r.\ndef sum_odd(n):\n    return sum(range(l, r + 1, 2))\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a python function to find the sum of an array.\ndef _sum(arr):\n    return sum(arr)\n\n# <func> # Python \n# Test the function.\ntest_sum(arr):\n    assert _sum(arr) == 100"], ["\n\n# <func> # Python \n# Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\ndef left_rotate(n,d):\n    return n << d | (n >> (32 - d))\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to remove all whitespaces from a string.\ndef remove_all_spaces(text):\n    return text.replace(' ', '')\n\n# Test function"], ["\n\n# <func> # Python \n# Write a python function to count the number of equal numbers from three given integers.\ndef test_three_equal(x,y,z):\n    return x+y+z\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\ndef is_perfect_square(n):\n    return (n ** 2) == n\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to check whether the product of numbers in a list is even or not.\ndef is_product_even(arr):\n    if len(arr) % 2 == 0:\n        return True\n    else:\n        return False\n# Example usage:"], ["\n\n# <func> # Python \n# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists):\n    return max(lists, key=lambda x: sum(x))\n\n# Testing the function"], ["\n\n# <func> # Python \n# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str):\n    return max(map(lambda x: len(x), test_str.upper().split()))\n\n# Test cases"], ["\n\n# <func> # Python \n# Write a python function to find the first odd number in a given list of numbers.\ndef first_odd(nums):\n    return nums[0] if nums[0] % 2 == 1 else nums[1]\n\n# Test the function"], ["\n\n# <func> # Python \n# Write a function to check if the given tuples contain the k or not.\ndef check_K(test_tup, K):\n    return all(x in test_tup for x in range(K))\n\n# Example usage:\ntest_tup = (1, 2, 3, 4, 5)"], ["\n\n# <func> # Python \n# Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\ndef check_smaller(test_tup1, test_tup2):\n    return all(tup1[i] < tup2[i] for i in range(len(tup1)))\n\n# Testing the function"]]