[["\n# <func> # Python \n# Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch):\n    return s.replace(ch, '')\n# Example usage:"], ["\n# <func> # Python \n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n    n = len(M)\n    for I in range(n):\n        for j in range(i + 1, n):\n            if M[i][j] > M[i][j - 1]:\n                M[i][j], M[i][j - 1] = M[i][j - 1], M[i][j]\n    return M\n# Testing the function\nM = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"], ["from collections import Counter\r\n\n# <func> # Python \n# Write a function to count the most common words in a dictionary.\ndef count_common(words):\n    return Counter(words).most_common(1)[0][0]\n\n# <func> # Python \n# Write a function to find the longest word in a string.\ndef longest_word(string):\n    return max(len(word) for word in string.split())\n\n# <func> # Python \n# Write a function to find the longest word in a string.\ndef longest_word_from_list(words):\n    return max(len(word) for word in words)\n\n# <func> # Python \n# Write a function to find the longest word in a string.\ndef longest_word_from_list_2(words):\n    return max(len(word) for word in words)\n\n# <func> # Python \n# Write a function to find the longest word in a string.\ndef longest_word_from_list_3(words):\n    return max(len(word) for word in words)\n\n# <func> # Python \n# Write a function to find the longest word in a string.\ndef longest_word_from_list_4(words):\n    return max(len(word) for word in words)\n\n# <func> # Python \n# Write a function to find the longest word in a string.\ndef longest_word_from_list_5(words):\n    return max(len(word) for word in words)\n\n# <func> # Python \n# Write a function to find the longest word in a string.\ndef longest_word_from_list_6(words):\n    return max(len(word) for word in words)\n\n# <func> # Python \n# Write a function to find the longest word in a string.\ndef longest_word_from_list_7(words):\n    return max(len(word) for word in words)\n\n# <func> # Python \n# Write a function to find the longest word in a string.\ndef longest_word_from_list_8(words):\n    return max(len(word) for word in words)\n\n"], ["\n# <func> # Python \n# Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h):\n    return (l + b + h) * (h / 2)\n\n# Test the function"], ["import re\r\n\n# <func> # Python \n# Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\n    return re.split(r'[a-z]', text)\n\n# <func> # Python \n# Write a function to split a string at uppercase letters.\ndef split_upperstring(text):\n    return re.split(r'[A-Z]', text)\n\n# <func> # Python \n# Write a function to split a string at digits.\ndef split_digitstring(text):\n    return re.split(r'[0-9]', text)\n\n# <func> # Python \n# Write a function to split a string at special characters.\ndef split_specialstring(text):\n    return re.split(r'[!@#$%^&*()_+\\-=\\\\|;:\"\\',<>\\[\\]\\\\\\\\\\/]', text)\n\n# <func> # Python \n# Write a function to split a string at punctuation marks.\ndef split_punctuationstring(text):\n    return re.split(r'[!@#$%^&*()_+\\-=\\\\|;:\"\\',<>\\[\\]\\\\\\\\\\/]', text)\n\n# <func> # Python \n# Write a function to split a string at special characters.\ndef split_specialstring(text):\n    return re.split(r'[!@#$%^&*()_+\\-=\\\\|;:\"\\',<>\\[\\]\\\\\\\\\\/]', text)\n\n# <func> # Python \n# Write a function to split a string at punctuation marks.\ndef split_punctuationstring(text):\n    return re.split(r'[!@#$%^&*()_+\\-=\\\\|;:\"\\',<>\\[\\]\\\\\\\\\\/]', text)\n\n# <func> # Python \n# Write a function to split a string at special characters.\ndef split_specialstring(text):\n    return re.split(r'[!@#$%^&*()_+\\-=\\\\|;:\"\\',<>\\[\\]\\\\\\\\\\/]',"], ["import re\r\n\n# <func> # Python \n# Write a function to find sequences of lowercase letters joined with an underscore.\ndef text_lowercase_underscore(text):\n    return re.sub(r'[^\\w\\s]', '_', text).lower()"], ["\n# <func> # Python \n# Write a function to find the perimeter of a square.\ndef square_perimeter(a):\n    return 4 * a\n\n# Test the function with different values of a."], ["NO_OF_CHARS = 256\r\n\n# <func> # Python \n# Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string):\n    return [char for char in string if char not in string2]\r"], ["\n# <func> # Python \n# Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\n    return arraynums.count(1) == len(arraynums)\n\n# Test the function with some sample inputs."], ["\n# <func> # Python \n# Write a function to check if the given number is woodball or not.\ndef is_woodall(x):\n    if x == 1:\n        return True\n    elif x == 2:\n        return True\n    elif x == 3:\n        return True\n    else:\n        return False\n# <func> # Python \n# Check if the given number is woodball.\n# \n# :param x: The number to check.\n# :return: True if the number is woodball, False otherwise.\n# :rtype: bool\n# \n# >>> is_woodball(1)\n# True\n# >>> is_woodball(2)\n# True\n# >>> is_woodball(3)\n# True\n# >>> is_woodball(4)\n# False\n# >>> is_woodball(5)\n# False\n# >>> is_woodball(6)\n# False\n# >>> is_woodball(7)\n# False\n# >>> is_woodball(8)\n# False\n# >>> is_woodball(9)\n# False\n# >>> is_woodball(10)\n# False\n# >>> is_woodball(11)\n# False\n# >>> is_woodball(12)\n# False\n# >>> is_woodball(13)\n# False\n# >>> is_woodball(14)\n# False\n# >>> is_woodball(15)\n# False\n# >>> is_woodball(16)\n# False\n# >>> is_woodball(17)\n# False\n# >>> is_woodball(18)\n# False\n# >>> is_woodball(19)\n# False\n# >>> is_woodball(20)\n# False\n# >>> is_woodball(21)\n# False\n# >>> is_woodball(22)\n# False\n# >>> is_woodball(23)\n# False\n# >>> is_woodball(24)\n# False\n# >>> is_woodball(25)\n# False\n# >>> is_woodball(26)\n# False\n# >>> is_woodball(27)\n# False\n# >>> is"], ["\n# <func> # Python \n# Write a function to find m number of multiples of n.\ndef multiples_of_num(m,n):\n    return [i for I in range(1,n+1) if I*m%n==0]\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find the first duplicate element in a given array of integers.\ndef find_first_duplicate(nums):\n    return nums[0] if nums[0] == nums[1] else nums[1]"], ["\n# <func> # Python \n# Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1):\n    max_sum = 0\n    for i in list1:\n        for j in range(len(i)):\n            if i[j] > max_sum:\n                max_sum = i[j]\n    return max_sum\n# <func> # Python \n# Write a python function to find the maximum sum of elements of list in a list of lists.\n# \n# Example:\n# \n# >>> maximum_Sum([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n# \n# >>> maximum_Sum([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n# \n# >>> maximum_Sum([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [1, 2, 3, 4]])\n# \n# >>> maximum_Sum([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n# \n# >>> maximum_Sum([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n# \n# >>> maximum"], ["\n# <func> # Python \n# Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary):\n    return int(binary, 2)\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to find the product of non-repeated elements in a given array.\ndef find_Product(arr,n):\n    product = 1\n    for I in range(n):\n        product *= arr[i]\n    return product\n# <func> # Python \n# Write a python function to find the sum of non-repeated elements in a given array.\ndef find_Sum(arr,n):\n    sum = 0\n    for I in range(n):\n        sum += arr[i]\n    return sum\n# <func> # Python \n# Write a python function to find the product of non-repeated elements in a given array.\ndef find_Product(arr,n):\n    product = 1\n    for I in range(n):\n        product *= arr[i]\n    return product\n# <func> # Python \n# Write a python function to find the sum of non-repeated elements in a given array.\ndef find_Sum(arr,n):\n    sum = 0\n    for I in range(n):\n        sum += arr[i]\n    return sum"], ["\n# <func> # Python \n# Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n    return all(test_list == tuple(range(K)))"], ["import re  \r\n\n# <func> # Python \n# Write a python function to remove all digits from a list of strings.\ndef remove(list):\n    return [x.replace(' ', '') for x in list]  \r"], ["\n# <func> # Python \n# Write a python function to find binomial co-efficient.\ndef binomial_Coeff(n,k):\n    return binomial(n,k)\n\n# Test function"], ["\n# <func> # Python \n# Write a python function to find the element occurring odd number of times.\ndef get_Odd_Occurrence(arr,arr_size):\n    return arr[arr_size-1]\n\n# Testing the function\narr = [1,2,3,4,5,6,7,8,9,10]\narr_size = len(arr)"], ["\n# <func> # Python \n# Write a python function to count all the substrings starting and ending with same characters.\ndef check_Equality(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                count += 1\n    return count\n# <func> # Python \n# Check if a string is a palindrome or not.\ndef is_palindrome(s):\n    return check_Equality(s) == 0\n# <func> # Python \n# Check if a string is a palindrome or not.\ndef is_palindrome_reverse(s):\n    return check_Equality(s) == 0\n# <func> # Python \n# Check if a string is a palindrome or not.\ndef is_palindrome_reverse_reverse(s):\n    return check_Equality(s) == 0\n# <func> # Python \n# Check if a string is a palindrome or not.\ndef is_palindrome_reverse_reverse_reverse(s):\n    return check_Equality(s) == 0\n# <func> # Python \n# Check if a string is a palindrome or not.\ndef is_palindrome_reverse_reverse_reverse_reverse(s):\n    return check_Equality(s) == 0\n# <func> # Python \n# Check if a string is a palindrome or not.\ndef is_palindrome_reverse_reverse_reverse_reverse_reverse(s):\n    return check_Equality(s) == 0\n# <func> # Python \n# Check if a string is a palindrome or not.\ndef is_palindrome_reverse_reverse_reverse_reverse_reverse_reverse(s):\n    return check_Equality(s) == 0\n# <func> # Python \n# Check if a string is a palindrome or not.\ndef is_palindrome_reverse_reverse_reverse_reverse_reverse_reverse_reverse(s):\n    return check_Equality(s) == 0\n# <func"], ["\n# <func> # Python \n# Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\ndef func(nums, k):\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    for i in range(k):\n        heapq.heappop(heap)\n    return heapq.nsmallest(k, heap)\n# Test cases"], ["import math \r\n\n# <func> # Python \n# Write a python function to find the largest prime factor of a given number.\ndef max_Prime_Factors (n):\n    \"\"\"\r\n    Find the largest prime factor of a given number. The function returns the list of prime factors of the number. \r\n    \"\"\"\r\n    factors = []\r\n    for I in range(2, int(math.sqrt(n))+1):\r\n        if n % I == 0:\r\n            factors.append(i)\r\n    return factors\r"], ["\n# <func> # Python \n# Write a python function to convert a decimal number to binary number.\ndef decimal_To_Binary(N):\n    return bin(N)[2:]\n# <func> # Python \n# Write a python function to convert a binary number to decimal number.\ndef binary_To_Decimal(N):\n    return int(N, 2)\n# <func> # Python \n# Write a python function to check if a number is prime.\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for I in range(2, int(n ** 0.5) + 1):\n        if n % I == 0:\n            return False\n    return True\n# <func> # Python \n# Write a python function to find the sum of all the prime numbers in a list.\ndef sum_of_Prime(lst):\n    sum = 0\n    for n in lst:\n        if is_prime(n):\n            sum += n\n    return sum\n# <func> # Python \n# Write a python function to find the sum of all the prime numbers in a list.\ndef sum_of_Prime_2(lst):\n    sum = 0\n    for n in lst:\n        if is_prime(n):\n            sum += n\n    return sum\n# <func> # Python \n# Write a python function to find the sum of all the prime numbers in a list.\ndef sum_of_Prime_3(lst):\n    sum = 0\n    for n in lst:\n        if is_prime(n):\n            sum += n\n    return sum\n# <func> # Python \n# Write a python function to find the sum of all the prime numbers in a list.\ndef sum_of_Prime_4(lst):\n    sum = 0\n    for n in lst:\n        if is_prime(n):\n            sum += n\n    return sum\n# <func> # Python \n# Write a python function to find the sum of all the prime numbers in a list.\ndef sum_of_Prime_5(lst):\n    sum = 0\n    for n in lst:\n        if is_prime(n"], ["\n# <func> # Python \n# Write a python function to find the missing number in a sorted array.\ndef find_missing(ar,N):\n    \"\"\"\n    Find the missing number in a sorted array.\n    :param ar: sorted array\n    :param N: missing number\n    :return: missing number\n    \"\"\"\n    return ar[N]\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], ["\n# <func> # Python \n# Write a function to find the n-th rectangular number.\ndef find_rect_num(n):\n    return n * (n + 1) // 2\n\n# Test the function."], ["\n# <func> # Python \n# Write a python function to find the nth digit in the proper fraction of two given numbers.\ndef find_Nth_Digit(p,q,N):\n    if N == 0:\n        return 0\n    elif N == 1:\n        return p\n    elif N == 2:\n        return q\n    else:\n        return find_Nth_Digit(q,p,N-1) + (p - q)\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n    return sorted(mixed_list, key=lambda x: x.lower())\n# <func> # Python \n# Write a function to find the length of a given list.\ndef length(list):\n    return len(list)\n# <func> # Python \n# Write a function to find the index of a given element in a given list.\ndef index(list, element):\n    return list.index(element)\n# <func> # Python \n# Write a function to find the length of a given string.\ndef length_string(string):\n    return len(string)\n# <func> # Python \n# Write a function to find the index of a given element in a given string.\ndef index_string(string, element):\n    return string.index(element)\n# <func> # Python \n# Write a function to find the length of a given string.\ndef length_string_2(string):\n    return len(string)\n# <func> # Python \n# Write a function to find the index of a given element in a given string.\ndef index_string_2(string, element):\n    return string.index(element)\n# <func> # Python \n# Write a function to find the length of a given string.\ndef length_string_3(string):\n    return len(string)\n# <func> # Python \n# Write a function to find the index of a given element in a given string.\ndef index_string_3(string, element):\n    return string.index(element)\n# <func> # Python \n# Write a function to find the length of a given string.\ndef length_string_4(string):\n    return len(string)\n# <func> # Python \n# Write a function to find the index of a given element in a given string.\ndef index_string_4(string, element):\n    return string.index(element)\n# <func> # Python \n# Write a function to find the length of a given string.\ndef length_string_5(string):\n    return"], ["\n# <func> # Python \n# Write a function to find the division of first even and odd number of a given list.\ndef div_even_odd(list1):\n    return [i for i in list1 if i % 2 == 0]\n\n# Test the function"], ["import heapq\r\nfrom collections import Counter\r\n\n# <func> # Python \n# Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\ndef rearange_string(S):\n    \"\"\"\n    :param S: string\n    :return: boolean\n    \"\"\"\n    if len(S) < 2:\n        return False\n    if S[0] == S[-1]:\n        return False\n    if S[0] == S[-2]:\n        return False\n    if S[1] == S[-1]:\n        return False\n    if S[1] == S[-2]:\n        return False\n    if S[0] == S[2] and S[1] == S[3]:\n        return False\n    if S[2] == S[3] and S[0] == S[1]:\n        return False\n    return True\n\n# <func> # Python \n# Write a function to find the longest common subsequence of two given strings.\ndef longest_common_subsequence(S1, S2):\n    \"\"\"\n    :param S1: string\n    :param S2: string\n    :return: longest common subsequence\n    \"\"\"\n    if len(S1) == 0:\n        return []\n    if len(S2) == 0:\n        return []\n    if S1[0] == S2[0]:\n        return [S1[0]]\n    if S1[0] == S2[1]:\n        return [S1[0], S2[1]]\n    if S1[1] == S2[0]:\n        return [S1[1], S2[0]]\n    if S1[1] == S2[1]:\n        return [S1[1], S2[1]]\n    return longest_common_subsequence(S1[1:], S2[2:]) + [S1[0], S2[0]]\n\n# <func> # Python \n# Write a function to find the longest common subsequence of two given strings.\ndef longest_common_subsequence_helper(S1, S2):\n    \"\"\"\n    :param S"], ["from collections import Counter\r\nfrom itertools import chain\r\n\n# <func> # Python \n# Write a function to find frequency of the elements in a given list of lists using collections module.\ndef freq_element(nums):\n    counts = Counter(nums)\n    return counts.most_common(1)[0][0]\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to filter even numbers using lambda function.\ndef filter_evennumbers(nums):\n    return [num for num in nums if num % 2 == 0]\n\n# Test the function"], ["\n# <func> # Python \n# Write a python function to find the sum of repeated elements in a given array.\ndef find_Sum(arr,n):\n    sum = 0\n    for I in range(n):\n        if arr[i] == arr[i+1]:\n            sum += 1\n    return sum\n# <func> # Python \n# Write a python function to find the sum of repeated elements in a given array.\n# \n# Args:\n#     arr (list): A list of integers.\n# \n# Returns:\n#     sum: The sum of repeated elements in the given array.\nfind_Sum(arr,n):\n    sum = 0\n    for I in range(n):\n        if arr[i] == arr[i+1]:\n            sum += 1\n    return sum\n# <func> # Python \n# Write a python function to find the sum of repeated elements in a given array.\n# \n# Args:\n#     arr (list): A list of integers.\n# \n# Returns:\n#     sum: The sum of repeated elements in the given array.\nfind_Sum(arr):\n    sum = 0\n    for I in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            sum += 1\n    return sum"], ["import re\r\n\n# <func> # Python \n# Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\n    return re.findall(r'[a-z]+_[a-z]+', text)"], ["import re\r\n\n# <func> # Python \n# Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n    return re.search('^[a-zA-Z]+', text)"], ["\n# <func> # Python \n# Write a function to find the gcd of the given array elements.\ndef find_gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n    return all(set(data) != set(data))\n\n# Test function"], ["\n# <func> # Python \n# Write a python function to find the last digit when factorial of a divides factorial of b.\ndef compute_Last_Digit(A,B):\n    if A == 0:\n        return 0\n    elif B == 0:\n        return 0\n    else:\n        return (A * B) % (B + 1)\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\n    return n | (n >> 1) & 1\n# <func> # Python \n# Write a python function to get the number of odd bits in a given number.\ndef odd_bit_count(n):\n    return odd_bit_set_number(n) & 1\n# <func> # Python \n# Write a python function to get the number of even bits in a given number.\ndef even_bit_count(n):\n    return odd_bit_set_number(n) & 0x1\n# <func> # Python \n# Write a python function to get the number of odd bits in a given number.\ndef odd_bit_count_reverse(n):\n    return odd_bit_set_number(n) & 0x1\n# <func> # Python \n# Write a python function to get the number of even bits in a given number.\ndef even_bit_count_reverse(n):\n    return odd_bit_set_number(n) & 0x1\n# <func> # Python \n# Write a python function to get the number of odd bits in a given number.\ndef odd_bit_count_reverse_reverse(n):\n    return odd_bit_set_number(n) & 0x1\n# <func> # Python \n# Write a python function to get the number of even bits in a given number.\ndef even_bit_count_reverse_reverse(n):\n    return odd_bit_set_number(n) & 0x1\n# <func> # Python \n# Write a python function to get the number of odd bits in a given number.\ndef odd_bit_count_reverse_reverse_reverse(n):\n    return odd_bit_set_number(n) & 0x1\n# <func> # Python \n# Write a python function to get the number of odd bits in a given number.\ndef odd_bit_count_reverse_reverse_reverse_reverse(n):\n    return odd_bit_set_number(n) & 0x1\n# <func"], ["\n# <func> # Python \n# Write a function to extract every first or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n    return [nums[i][j] for i in range(N) for j in range(N) if i == j]\n\n# Test function"], ["\n# <func> # Python \n# Write a function to find the list with minimum length using lambda function.\ndef min_length_list(input_list):\n    return min(input_list)\n\n# Testing the function"], ["\n# <func> # Python \n# Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\n    if x == y and y == z:\n        print('Triangle is equilateral')\n    else:\n        print('Triangle is not equilateral')\n\n# Testing the function\ncheck_equilateral(1,2,3)\ncheck_equilateral(1,2,4)\ncheck_equilateral(1,3,4)\ncheck_equilateral(1,4,5)\ncheck_equilateral(2,3,4)\ncheck_equilateral(3,4,5)\ncheck_equilateral(4,5,6)\ncheck_equilateral(5,6,7)\ncheck_equilateral(6,7,8)\ncheck_equilateral(7,8,9)\ncheck_equilateral(8,9,10)\ncheck_equilateral(9,10,11)\ncheck_equilateral(10,11,12)\ncheck_equilateral(11,12,13)\ncheck_equilateral(12,13,14)\ncheck_equilateral(13,14,15)\ncheck_equilateral(14,15,16)\ncheck_equilateral(15,16,17)\ncheck_equilateral(16,17,18)\ncheck_equilateral(17,18,19)\ncheck_equilateral(18,19,20)\ncheck_equilateral(19,20,21)\ncheck_equilateral(20,21,22)\ncheck_equilateral(21,22,23)\ncheck_equilateral(22,23,24)\ncheck_equilateral(23,24,25)\ncheck_equilateral(24,2"], ["\n# <func> # Python \n# Write a function to caluclate area of a parallelogram.\ndef parallelogram_area(b,h):\n    return b * h\n# <func> # Python \n# Write a function to calculate the perimeter of a parallelogram.\ndef parallelogram_perimeter(b,h):\n    return 2 * b + 2 * h\n# <func> # Python \n# Write a function to calculate the area of a parallelogram.\ndef parallelogram_area(b,h):\n    return b * h\n# <func> # Python \n# Write a function to calculate the perimeter of a parallelogram.\ndef parallelogram_perimeter(b,h):\n    return 2 * b + 2 * h\n# <func> # Python \n# Write a function to calculate the area of a parallelogram.\ndef parallelogram_area(b,h):\n    return b * h\n# <func> # Python \n# Write a function to calculate the perimeter of a parallelogram.\ndef parallelogram_perimeter(b,h):\n    return 2 * b + 2 * h\n# <func> # Python \n# Write a function to calculate the area of a parallelogram.\ndef parallelogram_area(b,h):\n    return b * h\n# <func> # Python \n# Write a function to calculate the perimeter of a parallelogram.\ndef parallelogram_perimeter(b,h):\n    return 2 * b + 2 * h\n# <func> # Python \n# Write a function to calculate the area of a parallelogram.\ndef parallelogram_area(b,h):\n    return b * h\n# <func> # Python \n# Write a function to calculate the perimeter of a parallelogram.\ndef parallelogram_perimeter(b,h):\n    return 2 * b + 2 * h\n# <func> # Python \n# Write a function to calculate the area of a parallelogram.\ndef parallelogram_area(b,h):\n"], ["\n# <func> # Python \n# Write a python function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return True\n    return False\n# <func> # Python \n# Check whether the given string is a palindrome or not.\ndef is_palindrome(str):\n    if len(str) < 2:\n        return True\n    elif str[0] == str[-1]:\n        return is_palindrome(str[1:-1])\n    return False\n# <func> # Python \n# Check whether the given string is a palindrome or not.\ndef is_palindrome_str(str):\n    return is_palindrome(str)\n# <func> # Python \n# Check whether the given string is a palindrome or not.\ndef is_palindrome_list(lst):\n    return is_palindrome(lst)\n# <func> # Python \n# Check whether the given string is a palindrome or not.\ndef is_palindrome_tuple(tuple):\n    return is_palindrome(tuple)\n# <func> # Python \n# Check whether the given string is a palindrome or not.\ndef is_palindrome_set(set):\n    return is_palindrome(set)\n# <func> # Python \n# Check whether the given string is a palindrome or not.\ndef is_palindrome_list_tuple(lst, tuple):\n    return is_palindrome(lst) == is_palindrome(tuple)\n# <func> # Python \n# Check whether the given string is a palindrome or not.\ndef is_palindrome_list_set(lst, set):\n    return is_palindrome(lst) == is_palindrome(set)"], ["\n# <func> # Python \n# Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n    n = len(my_list)\n    count = [0] * n\n    for i in range(n):\n        count[i] = count[i] + my_list[i]\n    for I in range(n):\n        count[i] = count[i] % 10\n    for I in range(n):\n        count[i] = count[i] // 10\n    for I in range(n):\n        my_list[i] = count[i]\n    return my_list\n# Testing\nmy_list = [1, 2, 3, 4, 5]\ncounting_sort(my_list)"], ["import math\r\n\n# <func> # Python \n# Write a function to find t-nth term of geometric series.\ndef tn_gp(a,n,r):\n    return a * math.pow(r,n) / math.pow(r,n-1)\n\n# <func> # Python \n# Write a function to find n-th term of geometric series.\ndef n_gp(a,n,r):\r\n    return a * math.pow(r,n) / math.pow(r,n-1)"], ["\n# <func> # Python \n# Write a python function to check if a given number is one less than twice its reverse.\ndef rev(num):\n    return num * -1\n\n# Test the function"], ["\n# <func> # Python \n# Write a python function to find the largest number that can be formed with the given digits.\ndef find_Max_Num(arr,n):\n    if n == 1:\n        return arr[0]\n    else:\n        return max(find_Max_Num(arr,n-1),find_Max_Num(arr,n-2))\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y):\n    return x != y\n\n# Testing the function"], ["\n# <func> # Python \n# Write a function to find the nth octagonal number.\ndef is_octagonal(n):\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\ndef max_len_sub( arr, n):\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] - arr[j] > max_len:\n                max_len = arr[i] - arr[j]\n    return max_len\n# <func> # Python \n# Test the function with some examples.\narr = [1, 2, 3, 4, 5]\nn = len(arr)"], ["from collections import \n# <func> # Python \n# Write a python function to count number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s,n):\n    count = 0\n    for I in range(len(s)):\n        if s[i] == s[i+n]:\n            count += 1\n    return count\n\n# Test function"], ["\n# <func> # Python \n# Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n    return xs[0]\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n    max_diff = 0\n    for pair in test_list:\n        max_diff = max(max_diff, pair[0] - pair[1])\n    return max_diff\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])\n\n# Test the function."], ["\n# <func> # Python \n# Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n    if len(data_list) == 0:\n        return 0\n    return recursive_list_sum(data_list[1:]) + recursive_list_sum(data_list[0])\n\n# Test function"], ["\n# <func> # Python \n# Write a python function to count positive numbers in a list.\ndef pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to count negative numbers in a list.\ndef neg_count(list):\n    count = 0\n    for num in list:\n        if num < 0:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to count zeroes in a list.\ndef zero_count(list):\n    count = 0\n    for num in list:\n        if num == 0:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to count odd numbers in a list.\ndef odd_count(list):\n    count = 0\n    for num in list:\n        if num % 2 != 0:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to count even numbers in a list.\ndef even_count(list):\n    count = 0\n    for num in list:\n        if num % 2 == 0:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to count numbers in a list.\ndef num_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to count numbers in a list.\ndef num_count_2(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to count numbers in a list.\ndef num_count_3(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to"], ["\n# <func> # Python \n# Write a function to find the number of ways to partition a set of bell numbers.\ndef bell_number(n):\n    return binomial_coefficient(n, n)\n\n# Test the function"], ["\n# <func> # Python \n# Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A):\n    if len(A) == 0:\n        return True\n    if len(A) == 1:\n        return A[0] == A[0]\n    return False\n# <func> # Python \n# Write a python function to find the maximum value in the given array.\ndef findMax(A):\n    if len(A) == 0:\n        return 0\n    max_val = A[0]\n    for i in range(1, len(A)):\n        if A[i] > max_val:\n            max_val = A[i]\n    return max_val\n# <func> # Python \n# Write a python function to find the minimum value in the given array.\ndef findMin(A):\n    if len(A) == 0:\n        return 0\n    min_val = A[0]\n    for i in range(1, len(A)):\n        if A[i] < min_val:\n            min_val = A[i]\n    return min_val\n# <func> # Python \n# Write a python function to find the sum of elements in the given array.\ndef findSum(A):\n    if len(A) == 0:\n        return 0\n    sum = 0\n    for i in range(len(A)):\n        sum += A[i]\n    return sum\n# <func> # Python \n# Write a python function to find the average of elements in the given array.\ndef findAvg(A):\n    if len(A) == 0:\n        return 0\n    sum = 0\n    for i in range(len(A)):\n        sum += A[i]\n    return sum / len(A)\n# <func> # Python \n# Write a python function to find the median of elements in the given array.\ndef findMedian(A):\n    if len(A) == 0:\n        return 0\n    if len(A) == 1:\n        return A[0]\n    if len(A) == "], ["\n# <func> # Python \n# Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n    return any(x in l for x in s)\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\n    if len(Input) != k:\n        return False\n    else:\n        return True\n# <func> # Python \n# Write a function to find the longest common subsequence of two given strings.\ndef longest_common_subsequence(s1, s2):\n    if len(s1) == 0:\n        return s2\n    elif len(s2) == 0:\n        return s1\n    else:\n        return longest_common_subsequence(s2[:-1], s1[1:]) + s2[0] + s1[0]\n# <func> # Python \n# Write a function to find the longest common subsequence of two given strings.\ndef longest_common_subsequence_2(s1, s2):\n    if len(s1) == 0:\n        return s2\n    elif len(s2) == 0:\n        return s1\n    else:\n        return max(longest_common_subsequence_2(s2[:-1], s1[1:]), longest_common_subsequence_2(s2[1:], s1[:-1])) + s2[0] + s1[0]\n# <func> # Python \n# Write a function to find the longest common subsequence of two given strings.\ndef longest_common_subsequence_3(s1, s2):\n    if len(s1) == 0:\n        return s2\n    elif len(s2) == 0:\n        return s1\n    else:\n        return max(longest_common_subsequence_3(s2[:-1], s1[1:]), longest_common_subsequence_3(s2[1:], s1[:-1])) + s2[0] + s1[0]\n# <func> # Python \n# Write a function to find the longest common subsequence of two given strings.\ndef longest_common_subsequence_4(s1, s2):\n    if len(s1) == 0:\n        return"], ["\n# <func> # Python \n# Write a function to sort a list of elements using comb sort.\ndef comb_sort(nums):\n    n = len(nums)\n    for I in range(n):\n        for j in range(i + 1, n):\n            if nums[j] < nums[j - 1]:\n                nums[j], nums[j - 1] = nums[j - 1], nums[j]\n    return nums\n# Testing\nnums = [1, 2, 3, 4, 5]\nsorted_nums = comb_sort(nums)"], ["\n# <func> # Python \n# Write a python function to check whether the given number can be represented as difference of two squares or not.\ndef dif_Square(n):\n    if n % 4 == 0:\n        return True\n    else:\n        return False\n# <func> # Python \n# Write a python function to find the sum of all odd numbers in a given list.\ndef odd_sum(lst):\n    sum = 0\n    for num in lst:\n        if num % 2 == 1:\n            sum += num\n    return sum\n# <func> # Python \n# Write a python function to find the sum of all even numbers in a given list.\ndef even_sum(lst):\n    sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            sum += num\n    return sum\n# <func> # Python \n# Write a python function to find the sum of all numbers in a given list.\ndef sum_of_list(lst):\n    sum = 0\n    for num in lst:\n        sum += num\n    return sum\n# <func> # Python \n# Write a python function to find the sum of all numbers in a given list.\ndef sum_of_list_2(lst):\n    sum = 0\n    for num in lst:\n        sum += num\n    return sum\n# <func> # Python \n# Write a python function to find the sum of all numbers in a given list.\ndef sum_of_list_3(lst):\n    sum = 0\n    for num in lst:\n        sum += num\n    return sum\n# <func> # Python \n# Write a python function to find the sum of all numbers in a given list.\ndef sum_of_list_4(lst):\n    sum = 0\n    for num in lst:\n        sum += num\n    return sum\n# <func> # Python \n# Write a python function to find the sum of all numbers in a given list.\ndef sum_of_list_5(lst):\n    sum = 0\n    for num in lst:\n        sum += num\n    return sum\n# <func> # Python \n# Write a python"], ["import re\r\n\n# <func> # Python \n# Write a function to split the given string with multiple delimiters by using regex.\ndef multiple_split(text):\n    return re.split(r'[\\s\\t\\n]+', text)"], ["\n# <func> # Python \n# Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):\n    for pattern in patterns:\n        if len(colors) != len(pattern):\n            return False\n        for color in colors:\n            if color not in pattern:\n                return False\n    return True\n# <func> # Python \n# Test the function with some examples.\ntest_is_samepatterns():\n    colors = ['red', 'blue', 'green', 'yellow']\n    patterns = ['red', 'blue', 'green', 'yellow']\n    assert is_samepatterns(colors, patterns) is True\n    colors = ['red', 'blue', 'green', 'yellow', 'orange']\n    patterns = ['red', 'blue', 'green', 'yellow', 'orange']\n    assert is_samepatterns(colors, patterns) is False\n    colors = ['red', 'blue', 'green', 'yellow', 'orange', 'pink']\n    patterns = ['red', 'blue', 'green', 'yellow', 'orange', 'pink']\n    assert is_samepatterns(colors, patterns) is False\n    colors = ['red', 'blue', 'green', 'yellow', 'orange', 'pink', 'brown']\n    patterns = ['red', 'blue', 'green', 'yellow', 'orange', 'pink', 'brown']\n    assert is_samepatterns(colors, patterns) is False\n    colors = ['red', 'blue', 'green', 'yellow', 'orange', 'pink', 'brown', 'purple']\n    patterns = ['red', 'blue', 'green', 'yellow', 'orange', 'pink', 'brown', 'purple']\n    assert is_samepatterns(colors, patterns) is False \"\"\"\n    return True\n# <func> # Python \n# Test the function with some examples.\ntest_is_samepatterns():\n    colors = ['red', 'blue', 'green', 'yellow']\n    patterns = ['red', 'blue', 'green', 'yellow']\n    assert is_samepatterns(colors, patterns) is True\n    colors = ['red',"], ["\n# <func> # Python \n# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n    return [(t[0], t[1]) for t in test_list if all(x % K == 0 for x in t[1])]\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n    return m*n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to find the difference between sum of even and odd digits.\ndef is_Diff(n):\n    if n % 2 == 0:\n        return n\n    else:\n        return n - 2 * (n % 2)\n\n# Test cases"], ["\n# <func> # Python \n# Write a python function to find number of integers with odd number of set bits.\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for I in range(1, n+1):\n        if (i & (i - 1)) == 1:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to find number of integers with even number of set bits.\ndef count_With_Even_SetBits(n):\n    count = 0\n    for I in range(1, n+1):\n        if (i & (i - 1)) == 0:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to find number of integers with all set bits.\ndef count_All_Set_Bits(n):\n    count = 0\n    for I in range(1, n+1):\n        if (i & (i - 1)) == 0:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to find number of integers with all zero set bits.\ndef count_All_Zero_Set_Bits(n):\n    count = 0\n    for I in range(1, n+1):\n        if (i & (i - 1)) == 0:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to find number of integers with all one set bits.\ndef count_All_One_Set_Bits(n):\n    count = 0\n    for I in range(1, n+1):\n        if (i & (i - 1)) == 1:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to find number of integers with all two set bits.\ndef count_All_Two_Set_Bits(n):\n    count = 0\n    for I in range(1, n+1):\n        if (i & (i - 1)) == 2:\n            count += 1\n    return count\n"], ["\n# <func> # Python \n# Write a python function to check whether the length of the word is odd or not.\ndef word_len(s):\n    return len(s) % 2 != 0\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n):\n    return 2 * n + 1\n# Example usage:\ntetrahedral_number(3) # Output: 12\ntetrahedral_number(4) # Output: 16\ntetrahedral_number(5) # Output: 20\ntetrahedral_number(6) # Output: 24\ntetrahedral_number(7) # Output: 28\ntetrahedral_number(8) # Output: 32\ntetrahedral_number(9) # Output: 36\ntetrahedral_number(10) # Output: 40\ntetrahedral_number(11) # Output: 44\ntetrahedral_number(12) # Output: 48\ntetrahedral_number(13) # Output: 52\ntetrahedral_number(14) # Output: 56\ntetrahedral_number(15) # Output: 60\ntetrahedral_number(16) # Output: 64\ntetrahedral_number(17) # Output: 68\ntetrahedral_number(18) # Output: 72\ntetrahedral_number(19) # Output: 76\ntetrahedral_number(20) # Output: 80\ntetrahedral_number(21) # Output: 84\ntetrahedral_number(22) # Output: 88\ntetrahedral_number(23) # Output: 92\ntetrahedral_number(24) # Output: 96\ntetrahedral_number(25) # Output: 100\ntetrahedral_number(26) # Output: 104\ntetrahedral_number(27) # Output: 108\ntetrahedral_number(28) # Output: 112\ntetrahedral_number(29) # Output: 116\ntetra"], ["\n# <func> # Python \n# Write a function to zip the two given tuples.\ndef zip_tuples(test_tup1, test_tup2):\n    return zip(test_tup1, test_tup2)\n\n# Test the function.\ntest_zip_tuples = zip_tuples([(1, 2), (3, 4)], [(5, 6), (7, 8)])"], ["import math\r\n\n# <func> # Python \n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return math.pi * r ** 2 * math.sin(math.pi / 2 - math.radians(r))"], ["\n# <func> # Python \n# Write a python function to find the character made by adding all the characters of the given string.\ndef get_Char(strr):\n    return strr.replace(' ', '')\n\n# Testing the function"], ["\n# <func> # Python \n# Write a function to find the n-th number in newman conway sequence.\ndef sequence(n):\n    returnimport math\r\n\n# <func> # Python \n# Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n    return math.pi * r ** 2"], ["\n# <func> # Python \n# Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\n    return (n + 1) // 2 * (n + 1) // 2\n# <func> # Python \n# Test the function.\ntest_centered_hexagonal_number(n=3):\n    assert centered_hexagonal_number(n) == 10\n    assert centered_hexagonal_number(n=4) == 14\n    assert centered_hexagonal_number(n=5) == 18\n    assert centered_hexagonal_number(n=6) == 22\n    assert centered_hexagonal_number(n=7) == 26\n    assert centered_hexagonal_number(n=8) == 30\n    assert centered_hexagonal_number(n=9) == 34\n    assert centered_hexagonal_number(n=10) == 38\n    assert centered_hexagonal_number(n=11) == 42\n    assert centered_hexagonal_number(n=12) == 46\n    assert centered_hexagonal_number(n=13) == 50\n    assert centered_hexagonal_number(n=14) == 54\n    assert centered_hexagonal_number(n=15) == 58\n    assert centered_hexagonal_number(n=16) == 62\n    assert centered_hexagonal_number(n=17) == 66\n    assert centered_hexagonal_number(n=18) == 70\n    assert centered_hexagonal_number(n=19) == 74\n    assert centered_hexagonal_number(n=20) == 78\n    assert centered_hexagonal_number(n=21) == 82\n    assert centered_hexagonal_number(n=22) == 86\n    assert centered_hexagonal_number(n=23) == 90\n    assert centered_hexagonal_number(n"], ["import collections as ct\r\n\n# <func> # Python \n# Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single expression.\n    \"\"\"\n    return dict(dict1.items() + dict2.items() + dict3.items())\n\n# <func> # Python \n# Write a function to check if a dictionary is empty.\ndef is_empty_dict(d):\r\n    \"\"\"\r\n    Check if a dictionary is empty. If it is, return True, otherwise return False.\r\n    \"\"\"\r\n    return len(d) == 0\n\n# <func> # Python \n# Write a function to check if a dictionary is not empty.\ndef is_not_empty_dict(d):\r\n    \"\"\"\r\n    Check if a dictionary is not empty. If it is, return True, otherwise return False.\r\n    \"\"\"\r\n    return len(d) > 0"], ["import collections\r\n\n# <func> # Python \n# Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n    return collections.Counter(list1)\n\n# <func> # Python \n# Get the length of a list.\ndef len_list(list1):\r\n    return len(list1)\n\n# <func> # Python \n# Get the index of the first occurrence of a given element in a list.\ndef index_of(list1, element):\r\n    return list1.index(element)\n\n# <func> # Python \n# Get the index of the last occurrence of a given element in a list.\ndef index_of_last(list1, element):\r\n    return list1.index(element, len(list1) - 1)\n\n# <func> # Python \n# Get the length of a list.\ndef len_list_2(list1):\r\n    return len(list1)\n\n# <func> # Python \n# Get the index of the first occurrence of a given element in a list.\ndef index_of_last_2(list1, element):\r\n    return list1.index(element, len(list1) - 1)\n\n# <func> # Python \n# Get the length of a list.\ndef len_list_3(list1):\r\n    return len(list1)\n\n# <func> # Python \n# Get the index of the first occurrence of a given element in a list.\ndef index_of_last_3(list1, element):\r\n    return list1.index(element, len(list1) - 1)\n\n# <func> # Python \n# Get the length of a list.\ndef len_list_4(list1):\r\n    return len(list1)\n\n# <func> # Python \n# Get the index of the first occurrence of a given element in a list.\ndef index_of_last_4(list1, element):\r\n    return list1.index(element, len(list1) - 1)\n\n# <func> # Python \n# Get the length of a list.\ndef len_list"], ["\n# <func> # Python \n# Write a function to find the closest smaller number than n.\ndef closest_num(N):\n    return min(N, key=lambda x: abs(x - N))\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to find the length of the longest word.\ndef len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n# <func> # Python \n# Write a python function to find the longest word in a given list.\ndef longest_word(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n# <func> # Python \n# Write a python function to find the longest word in a given list.\ndef longest_word_2(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n# <func> # Python \n# Write a python function to find the longest word in a given list.\ndef longest_word_3(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n# <func> # Python \n# Write a python function to find the longest word in a given list.\ndef longest_word_4(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n# <func> # Python \n# Write a python function to find the longest word in a given list.\ndef longest_word_5(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n# <func> # Python \n# Write a python function to find the longest word in a given list.\ndef longest_word_6(list1):\n    max_len ="], ["\n# <func> # Python \n# Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\n    return sub_str in str1.lower()\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to check whether the given number is undulating or not.\ndef is_undulating(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n    return a**b\n\n# Test the function with some examples."], ["from operator import itemgetter \r\n\n# <func> # Python \n# Write a function to extract the index minimum value record from the given tuples.\ndef index_minimum(test_list):\n    return min(test_list, key=itemgetter(0))[0]\n\n# <func> # Python \n# Write a function to extract the index maximum value record from the given tuples.\ndef index_maximum(test_list):\n    return max(test_list, key=itemgetter(0))[0]\n\n# <func> # Python \n# Write a function to extract the index maximum value record from the given tuples.\ndef index_maximum_value(test_list):\n    return max(test_list, key=itemgetter(0))[0]\n\n# <func> # Python \n# Write a function to extract the index maximum value record from the given tuples.\ndef index_maximum_value_from_list(test_list):\n    return max(test_list, key=itemgetter(0))[0]"], ["\n# <func> # Python \n# Write a python function to find the minimum length of sublist.\ndef Find_Min_Length(lst):\n    min_length = 0\n    for i in range(len(lst)):\n        if lst[i] < min_length:\n            min_length = lst[i]\n    return min_length\n# <func> # Python \n# Write a python function to find the maximum length of sublist.\ndef Find_Max_Length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        if lst[i] > max_length:\n            max_length = lst[i]\n    return max_length\n# <func> # Python \n# Write a python function to find the sum of sublist.\ndef Find_Sum_Length(lst):\n    sum_length = 0\n    for i in range(len(lst)):\n        sum_length += lst[i]\n    return sum_length\n# <func> # Python \n# Write a python function to find the product of sublist.\ndef Find_Product_Length(lst):\n    product_length = 1\n    for i in range(len(lst)):\n        product_length *= lst[i]\n    return product_length\n# <func> # Python \n# Write a python function to find the average length of sublist.\ndef Find_Avg_Length(lst):\n    avg_length = 0\n    for i in range(len(lst)):\n        avg_length += lst[i]\n    return avg_length / len(lst)\n# <func> # Python \n# Write a python function to find the length of longest sublist.\ndef Find_Longest_Sublist(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        if lst[i] > max_length:\n            max_length = lst[i]\n    return max_length\n# <func> # Python \n# Write a python function to find the length of shortest sublist.\ndef Find_Shortest_Sublist(lst):\n    min_length = 0\n    for i in range(len(lst)):\n"], ["\n# <func> # Python \n# Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\n    return sum(i for I in range(1, n+1) if n % I == 0)\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\n    count = {}\n    for item in list1:\n        if item not in count:\n            count[item] = 1\n        else:\n            count[item] += 1\n    return count\n# <func> # Python \n# Write a function to find frequency count of list of lists.\ndef frequency_lists2(list1):\n    count = {}\n    for item in list1:\n        if item not in count:\n            count[item] = 1\n        else:\n            count[item] += 1\n    return count\n# <func> # Python \n# Write a function to find frequency count of list of lists.\ndef frequency_lists3(list1):\n    count = {}\n    for item in list1:\n        if item not in count:\n            count[item] = 1\n        else:\n            count[item] += 1\n    return count\n# <func> # Python \n# Write a function to find frequency count of list of lists.\ndef frequency_lists4(list1):\n    count = {}\n    for item in list1:\n        if item not in count:\n            count[item] = 1\n        else:\n            count[item] += 1\n    return count\n# <func> # Python \n# Write a function to find frequency count of list of lists.\ndef frequency_lists5(list1):\n    count = {}\n    for item in list1:\n        if item not in count:\n            count[item] = 1\n        else:\n            count[item] += 1\n    return count\n# <func> # Python \n# Write a function to find frequency count of list of lists.\ndef frequency_lists6(list1):\n    count = {}\n    for item in list1:\n        if item not in count:\n            count[item] = 1\n        else:\n            count[item] += 1\n    return count\n# <func> # Python \n# Write a function to find frequency count of list of lists.\ndef frequency_lists7(list1):\n    count = {}"], ["\n# <func> # Python \n# Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):\n    return [x * len(numbers) for x in numbers]\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to convert the given decimal number to its binary equivalent.\ndef decimal_to_binary(n):\n    \"\"\"\n    Convert a decimal number to its binary equivalent.\n    :param n: Decimal number.\n    :return: Binary equivalent of the given decimal number.\n    \"\"\"\n    return bin(n)[2:]\n\n\n# Example usage:"], ["import sys\r\n\n# <func> # Python \n# Write a function to find the next smallest palindrome of a specified number.\ndef next_smallest_palindrome(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return next_smallest_palindrome(num // 10) * 10 + num % 10\n\n# <func> # Python \n# Test the function with some examples."], ["\n# <func> # Python \n# Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\n    if k > len(arr):\n        return None\n    elif k == 0:\n        return arr[0]\n    elif k == 1:\n        return arr[1]\n    else:\n        mid = len(arr) // 2\n        if k <= mid:\n            return kth_element(arr[mid:], n, k)\n        else:\n            return kth_element(arr[:mid], n, k - mid)\n# Example usage:\narr = [1, 2, 3, 4, 5]\nk = 2"], ["\n# <func> # Python \n# Write a function to convert snake case string to camel case string.\ndef snake_to_camel(word):\n    return word.lower().replace('_', '').replace('-', '')\n\n# Testing the function"], ["\n# <func> # Python \n# Write a function to find eulerian number a(n, m).\ndef eulerian_num(n, m):\n    if n == 0:\n        return 0\n    if m == 0:\n        return 1\n    if n == 1:\n        return 1\n    if m == 1:\n        return 1\n    return eulerian_num(n - 1, m) + eulerian_num(n - 1, m - 1)\n\n# Test cases"], ["\n# <func> # Python \n# Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n    return sorted(input_list, key=lambda x: x[0])"], ["\n# <func> # Python \n# Write a python function to count true booleans in the given list.\ndef count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to find the longest word in a given string.\ndef longest_word(str):\n    longest_word = ''\n    for word in str.split():\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n# <func> # Python \n# Write a python function to find the longest word in a given string.\ndef longest_word_2(str):\n    longest_word = ''\n    for word in str.split():\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n# <func> # Python \n# Write a python function to find the longest word in a given string.\ndef longest_word_3(str):\n    longest_word = ''\n    for word in str.split():\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n# <func> # Python \n# Write a python function to find the longest word in a given string.\ndef longest_word_4(str):\n    longest_word = ''\n    for word in str.split():\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n# <func> # Python \n# Write a python function to find the longest word in a given string.\ndef longest_word_5(str):\n    longest_word = ''\n    for word in str.split():\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n# <func> # Python \n# Write a python function to find the longest word in a given string.\ndef longest_word_6(str):\n    longest_word = ''\n    for word in str.split():\n        if len(word) > len(longest_"], ["\n# <func> # Python \n# Write a function to add the given list to the given tuples.\ndef add_lists(test_list, test_tup):\n    return test_list + test_tup\n# Example usage:\ntest_list = [1, 2, 3]\ntest_tup = (1, 2, 3)"], ["\n# <func> # Python \n# Write a python function to count hexadecimal numbers for a given range.\ndef count_Hexadecimal(L,R):\n    count = 0\n    for I in range(L,R+1):\n        count += 1\n    return count\n# <func> # Python \n# Write a python function to count hexadecimal numbers for a given range.\n# \n# Parameters:\n# ----------\n# L : int\n#     Lower bound of the range\n# R : int\n#     Upper bound of the range\n# \n# Returns:\n# --------\n# count : int\n#     Number of hexadecimal numbers in the range\n# \n# Example:\n# >>> count_Hexadecimal(1,255)\n# 65535\n# >>> count_Hexadecimal(1,1000)\n# 1000000\n# >>> count_Hexadecimal(1,1000000)\n# 1000000\n# >>> count_Hexadecimal(1,1000000000)\n# 1000000000\n# >>> count_Hexadecimal(1,1000000000000)\n# 1000000000000\n# >>> count_Hexadecimal(1,1000000000000000)\n# 1000000000000000000\ndef count_Hexadecimal(L,R):\n    count = 0\n    for I in range(L,R+1):\n        count += 1\n    return count\n# <func> # Python \n# Write a python function to count hexadecimal numbers for a given range.\n# \n# Parameters:\n# ----------\n# L : int\n#     Lower bound of the range\n# R : int\n#     Upper bound of the range\n# \n# Returns:\n# --------\n# count : int"], ["import heapq\r\n\n# <func> # Python \n# Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\ndef merge_sorted_list(num1,num2,num3):\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while True:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            heapq.heappush(num1, num3)\n        elif heapq.heappop(num2) < heapq.heappop(num3):\n            heapq.heappush(num2, num3)\n        elif heapq.heappop(num3) < heapq.heappop(num1):\n            heapq.heappush(num3, num1)\n        else:\n            break\n    return heapq.heappop(num1)\n\n# <func> # Python \n# Write a function to find the longest common prefix of two strings.\ndef longest_common_prefix(strs):\n    if not strs:\n        return ''\n    if len(strs) == 1:\n        return strs[0]\n    return longest_common_prefix(strs[1:]) + strs[0]\n\n# <func> # Python \n# Write a function to find the longest common suffix of two strings.\ndef longest_common_suffix(strs):\n    if not strs:\n        return ''\n    if len(strs) == 1:\n        return strs[0]\n    return longest_common_suffix(strs[1:]) + strs[0]\n\n# <func> # Python \n# Write a function to find the longest common prefix and suffix of two strings.\ndef longest_common_prefix_and_suffix(strs):\n    if not strs:\n        return ''\n    if len(strs) == 1:\n        return strs[0]\n    return longest_common_prefix(strs[1:]) + strs[0] + longest_common_suffix(str"], ["\n# <func> # Python \n# Write a python function to find the count of rotations of a binary string with odd value.\ndef odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to find the count of rotations of a binary string with even value.\ndef even_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to find the count of rotations of a binary string with odd value.\ndef odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to find the count of rotations of a binary string with even value.\ndef even_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n    return count"], ["\n# <func> # Python \n# Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\ndef extract_missing(test_list, strt_val, stop_val):\n    return [i for i in test_list if i >= strt_val and i <= stop_val]\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\n    return [list_item for list_item in nestedlist if list_item != []]\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to find the perimeter of a cylinder.\ndef perimeter(diameter,height):\n    return 2 * (diameter + height)\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n# Example usage:"], ["from collections import Counter \r\n\n# <func> # Python \n# Write a function to assign frequency to each tuple in the given tuple list.\ndef assign_freq(test_list):\n    freq = Counter(test_list)\n    return freq\n\n# <func> # Python \n# Write a function to find the longest string in a given string list.\ndef longest_string(test_list):\r\n    longest_string = ''\r\n    for string in test_list:\r\n        if len(string) > len(longest_string):\r\n            longest_string = string\r\n    return longest_string"], ["\n# <func> # Python \n# Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dit(list1):\n    return all(map(lambda x: x is None, list1))\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to convert a given tuple of positive integers into an integer.\ndef tuple_to_int(nums):\n    return sum(nums)\n# <func> # Python \n# Test the function with some examples.\nnums = (1, 2, 3, 4, 5)"], ["\n# <func> # Python \n# Write a function to convert all possible convertible elements in the list to float.\ndef list_to_float(test_list):\n    return [float(i) for i in test_list]\n\n# Test function\ntest_list = [1, 2, 3, 4, 5]"], ["\n# <func> # Python \n# [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string):\n    return string.split(',')\n\n# Testing the function"], ["\n# <func> # Python \n# Write a python function to find the element that appears only once in a sorted array.\ndef search(arr,n):\n    return arr[n]\n\n# Test function\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = 5"], ["\n# <func> # Python \n# Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\n    max_product = 0\n    for pair in list1:\n        product = pair[0] * pair[1]\n        if product > max_product:\n            max_product = product\n    return max_product\n# <func> # Python \n# Write a function to find the maximum product from the pairs of tuples within a given list.\n# \n# Args:\n#     list1 (list): A list of tuples.\n# \n# Returns:\n#     int: The maximum product.\nmax_product_tuple(list1):\n    return max_product(list1)"], ["\n# <func> # Python \n# Write a function to find the triplet with sum of the given array\ndef check_triplet(A, n, sum, count):\n    for I in range(n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if A[i] + A[j] + A[k] == sum:\n                    return (i, j, k)\n    return None\n# <func> # Python \n# Find the sum of the given array\ndef sum_of_array(A):\n    return sum(A)\n# <func> # Python \n# Find the length of the given array\ndef length_of_array(A):\n    return len(A)\n# <func> # Python \n# Find the sum of the given array\ndef sum_of_array_2(A):\n    return sum(A)\n# <func> # Python \n# Find the length of the given array\ndef length_of_array_2(A):\n    return len(A)\n# <func> # Python \n# Find the sum of the given array\ndef sum_of_array_3(A):\n    return sum(A)\n# <func> # Python \n# Find the length of the given array\ndef length_of_array_3(A):\n    return len(A)\n# <func> # Python \n# Find the sum of the given array\ndef sum_of_array_4(A):\n    return sum(A)\n# <func> # Python \n# Find the length of the given array\ndef length_of_array_4(A):\n    return len(A)\n# <func> # Python \n# Find the sum of the given array\ndef sum_of_array_5(A):\n    return sum(A)\n# <func> # Python \n# Find the length of the given array\ndef length_of_array_5(A):\n    return len(A)\n# <func> # Python \n# Find the sum of the given array\ndef sum_of_array_6(A):\n    return sum(A)\n# <func> # Python \n# Find the"], ["MAX = 3000 \r\n\n# <func> # Python \n# Write a function to find n\u2019th smart number.\ndef smartNumber(n):\n    return n + 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["\n# <func> # Python \n# Write a function to sum all amicable numbers from 1 to a specified number.\ndef amicable_numbers_sum(limit):\n    return sum(amicable_numbers(limit))\n\n# Test the function"], ["import cmath\r\n\n# <func> # Python \n# Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\n    return math.atan2(b,a)\n\n# <func> # Python \n# Get the real part of a complex number.\ndef real_complex(a):\n    return a[0]\n\n# <func> # Python \n# Get the imaginary part of a complex number.\ndef imag_complex(a):\n    return a[1]\n\n# <func> # Python \n# Get the magnitude of a complex number.\ndef magnitude_complex(a):\n    return math.sqrt(real_complex(a)**2 + imag_complex(a)**2)\n\n# <func> # Python \n# Get the angle of a complex number.\ndef angle_complex_real(a):\n    return angle_complex(a,real_complex(a))\n\n# <func> # Python \n# Get the angle of a complex number.\ndef angle_complex_imag(a):\n    return angle_complex(a,imag_complex(a))\n\n# <func> # Python \n# Get the magnitude of a complex number.\ndef magnitude_complex_real(a):\n    return magnitude_complex(a,real_complex(a))\n\n# <func> # Python \n# Get the magnitude of a complex number.\ndef magnitude_complex_imag(a):\n    return magnitude_complex(a,imag_complex(a))\n\n# <func> # Python \n# Get the magnitude of a complex number.\ndef magnitude_complex(a):\n    return magnitude_complex(a,real_complex(a))\n\n# <func> # Python \n# Get the magnitude of a complex number.\ndef magnitude_complex_imag(a):\n    return magnitude_complex(a,imag_complex(a))\n\n# <func> # Python \n# Get the magnitude of a complex number.\ndef magnitude_complex_real(a):\n    return magnitude_complex(a,real_complex(a))\n\n# <func> # Python \n# Get the magnitude of a complex number.\ndef magnitude_complex_imag"], ["\n# <func> # Python \n# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string, n):\n    return n - sum(map(lambda x: x == '1', string))\n\n# Test cases"], ["\n# <func> # Python \n# Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b):\n    if a == 0:\n        return 0\n    elif b == 0:\n        return 0\n    else:\n        return sum(a, b)\n# <func> # Python \n# Test the function with some examples.\nsum_example1 = sum(1, 2)"], ["\n# <func> # Python \n# Write a function to multiply two integers without using the * operator in python.\ndef multiply_int(x, y):\n    return x * y\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to shortlist words that are longer than n from a given list of words.\ndef long_words(n, str):\n    return [word for word in str if len(word) > n]\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to calculate magic square.\ndef magic_square_test(my_matrix):\n    return my_matrix.sum()\n\n# Test function"], ["from collections import \n# <func> # Python \n# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums):\n    max_freq = 0\n    max_freq_index = 0\n    for num in nums:\n        if num > max_freq:\n            max_freq = num\n            max_freq_index = i\n    return max_freq_index\n# Example usage:\n# >>> max_occurrences([1, 2, 3, 1, 3, 2, 1, 3, 1, 2])\n# 3\n# >>> max_occurrences([1, 2, 3, 1, 3, 2, 1, 3, 1, 2])\n# 3\n# >>> max_occurrences([1, 2, 3, 1, 3, 2, 1, 3, 1, 2])\n# 3\n# >>> max_occurrences([1, 2, 3, 1, 3, 2, 1, 3, 1, 2])\n# 3\n# >>> max_occurrences([1, 2, 3, 1, 3, 2, 1, 3, 1, 2])\n# 3\n# >>> max_occurrences([1, 2, 3, 1, 3, 2, 1, 3, 1, 2])\n# 3\n# >>> max_occurrences([1, 2, 3, 1, 3, 2, 1, 3, 1, 2])\n# 3\n# >>> max_occurrences([1, 2, 3, 1, 3, 2, 1, 3, 1, 2])\n# 3\n# >>> max_occurrences([1, 2, 3, 1, 3, 2, 1, 3, 1, 2])\n# 3\n# >>> max_occurrences([1, 2, 3, 1, 3,"], ["\n# <func> # Python \n# Write a python function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\n    return ''.join(reversed(str1))\n\n# Testing the function"], ["\n# <func> # Python \n# Write a function to convert tuple to a string.\ndef tup_string(tup1):\n    return str(tup1)\n\n# Example usage:\ntup_string((1, 2, 3)) # Output: '(1, 2, 3)'\ntup_string((1, 2, 3, 4)) # Output: '(1, 2, 3, 4)'\ntup_string((1, 2, 3, 4, 5)) # Output: '(1, 2, 3, 4, 5)'\ntup_string((1, 2, 3, 4, 5, 6)) # Output: '(1, 2, 3, 4, 5, 6)'\ntup_string((1, 2, 3, 4, 5, 6, 7)) # Output: '(1, 2, 3, 4, 5, 6, 7)'\ntup_string((1, 2, 3, 4, 5, 6, 7, 8)) # Output: '(1, 2, 3, 4, 5, 6, 7, 8)'\ntup_string((1, 2, 3, 4, 5, 6, 7, 8, 9)) # Output: '(1, 2, 3, 4, 5, 6, 7, 8, 9)'\ntup_string((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) # Output: '(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)'\ntup_string((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) # Output: '(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11"], ["\n# <func> # Python \n# Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\ndef sum_negativenum(nums):\n    return sum([-n for n in nums])\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\ndef check_last (arr,n,p):\n    if n == 0:\n        return True\n    else:\n        return check_last(arr[n-1],n-1,p+1)\n\n# Example usage:\narr = [1,2,3,4,5]\np = 2"], ["\n# <func> # Python \n# Write a function to find the nth hexagonal number.\ndef hexagonal_num(n):\n    return hexagonal_num_helper(n, 0, 0)\n\ndef hexagonal_num_helper(n, start, end):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n       "], ["\n# <func> # Python \n# Write a function to calculate electricity bill.\ndef cal_electbill(units):\n    return units * 0.015\ncal_electbill(100) # 100 units = 1000 units * 0.015 = 150.50 units"], ["from array import array\r\n\n# <func> # Python \n# Write a function to find the ration of zeroes in an array of integers.\ndef zero_count(nums):\n    return sum(1 for I in nums if I == 0)\n\n# <func> # Python \n# Write a function to find the sum of all elements in an array of integers.\ndef sum_of_array(nums):\n    return sum(nums)\n\n# <func> # Python \n# Write a function to find the sum of all elements in an array of integers, excluding the first and last element.\ndef sum_of_array_excluding_first_and_last(nums):\n    return sum(nums[1:]) - sum(nums[:1])\n\n# <func> # Python \n# Write a function to find the sum of all elements in an array of integers, excluding the first and last element.\ndef sum_of_array_excluding_first_and_last_excluding_zero(nums):\r\n    return sum_of_array_excluding_first_and_last(nums) - sum_of_array(nums)\n\n# <func> # Python \n# Write a function to find the sum of all elements in an array of integers, excluding the first and last element.\ndef sum_of_array_excluding_first_and_last_excluding_zero_excluding_zero(nums):\r\n    return sum_of_array_excluding_first_and_last_excluding_zero(nums) - sum_of_array(nums)\n\n# <func> # Python \n# Write a function to find the sum of all elements in an array of integers, excluding the first and last element.\ndef sum_of_array_excluding_first_and_last_excluding_zero_excluding_zero_excluding_zero(nums):\r\n    return sum_of_array_excluding_first_and_last_excluding_zero_excluding_zero(nums) - sum_of_array_excluding_first_and_last_excluding_zero(nums)\n\n# <func> # Python \n# Write"], ["\n# <func> # Python \n# Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return False\n    return True if n % 2 == 0 else is_Sum_Of_Powers_Of_Two(n // 2)\n\n# Testing the function"], ["\n# <func> # Python \n# Write a function to find the circumference of a circle.\ndef circle_circumference(r):\n    return 2 * np.pi * r\n# Test the function"], ["\n# <func> # Python \n# Write a function to extract elements that occur singly in the given tuple list.\ndef extract_singly(test_list):\n    return [x for x in test_list if x not in (tuple(test_list[0]), tuple(test_list[1]))]\n\n# Example usage:\ntest_list = [('apple', 'banana'), ('banana', 'orange'), ('orange', 'grape'), ('grape', 'pear')]"], ["\n# <func> # Python \n# Write a function to sort a list of elements using pancake sort.\ndef pancake_sort(nums):\n    n = len(nums)\n    for I in range(n):\n        for j in range(i + 1, n):\n            if nums[j] < nums[i]:\n                nums[j], nums[i] = nums[i], nums[j]\n    return nums\n# Example usage:\nnums = [1, 2, 3, 4, 5]"], ["\n# <func> # Python \n# Write a function to count the same pair in three given lists.\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find number of lists present in the given tuple.\ndef find_lists(Input):\n    count = 0\n    for i in range(len(Input)):\n        if Input[i] == '(':\n            count += 1\n        elif Input[i] == ')':\n            count -= 1\n    return count\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to find the sum of absolute differences in all pairs of the given array.\ndef sum_Pairs(arr,n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                sum += abs(arr[i] - arr[j])\n    return sum\n# <func> # Python \n# Write a python function to find the sum of absolute differences in all pairs of the given array.\n# \n# Parameters:\n# ----------\n# arr : list\n#     The input array.\n# n : int\n#     The length of the input array.\n# \n# Returns:\n# -------\n# sum : int\n#     The sum of absolute differences in all pairs of the given array.\nsum_Pairs(arr,n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                sum += abs(arr[i] - arr[j])\n    return sum\n# <func> # Python \n# Write a python function to find the sum of absolute differences in all pairs of the given array.\n# \n# Parameters:\n# ----------\n# arr : list\n#     The input array.\n# n : int\n#     The length of the input array.\n# \n# Returns:\n# -------\n# sum : int\n#     The sum of absolute differences in all pairs of the given array.\nsum_Pairs(arr,n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                sum += abs(arr[i] - arr[j])\n    return sum"], ["\n# <func> # Python \n# Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr,n):\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff\n# Example usage:\narr = [1,2,3,4,5]\nn = 4"], ["\n# <func> # Python \n# Write a function to find the ascii value of total characters in a string.\ndef ascii_value_string(str1):\n    return sum(ord(c) for c in str1)\n# <func> # Python \n# Write a function to find the length of a string.\ndef length_string(str1):\n    return len(str1)\n# <func> # Python \n# Write a function to find the length of a list.\ndef length_list(lst):\n    return len(lst)\n# <func> # Python \n# Write a function to find the length of a tuple.\ndef length_tuple(tuple1):\n    return len(tuple1)\n# <func> # Python \n# Write a function to find the length of a dictionary.\ndef length_dict(dict1):\n    return len(dict1)\n# <func> # Python \n# Write a function to find the length of a list of lists.\ndef length_list_list(lst_list):\n    return len(lst_list)\n# <func> # Python \n# Write a function to find the length of a list of tuples.\ndef length_list_tuple(lst_tuple):\n    return len(lst_tuple)\n# <func> # Python \n# Write a function to find the length of a list of dictionaries.\ndef length_list_dict(lst_dict):\n    return len(lst_dict)"], ["\n# <func> # Python \n# Write a function to find the maximum total path sum in the given triangle.\ndef max_path_sum(tri, m, n):\n    if m == 0 and n == 0:\n        return 0\n    elif m == 0:\n        return max(tri[n - 1][n - 1], max_path_sum(tri, n - 1, n))\n    elif n == 0:\n        return max(tri[m - 1][m - 1], max_path_sum(tri, m - 1, m))\n    else:\n        return max(tri[m - 1][n - 1], max(tri[m - 1][n - 1], max_path_sum(tri, m - 1, n - 1))) + tri[m - 1][n - 1]\n\n# Test cases"], ["\n# <func> # Python \n# Write a function to divide a number into two parts such that the sum of digits is maximum.\ndef sum_digits_single(x):\n    return x % 10\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\ndef longest_subseq_with_diff_one(arr, n):\n    if n == 1:\n        return arr\n    else:\n        return longest_subseq_with_diff_one(arr[1:], n - 1) + arr[0]\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nn = 4"], ["\n# <func> # Python \n# Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c):\n    if a == b or a == c or b == c:\n        return True\n    else:\n        return False\n\n# Testing the function"], ["\n# <func> # Python \n# Write a python function to check whether the given number is co-prime or not.\ndef gcd(p,q):\n    while q != 0:\n        temp = q\n        q = p % q\n        p = temp\n    return p\n\n# Testing function"], ["\n# <func> # Python \n# Write a function to sort the given array by using merge sort.\ndef merge(a,b):\n    n1 = len(a)\n    n2 = len(b)\n    n = n1 + n2\n    c = []\n    for I in range(n):\n        c.append(a[i])\n    for I in range(n):\n        c.append(b[i])\n    c.sort()\n    return c\n# Testing the function\na = [1, 2, 3, 4, 5]\nb = [5, 3, 4, 2, 1]\nc = merge(a,b)"], ["\n# <func> # Python \n# Write a function to find the vertex of a parabola.\ndef parabola_vertex(a, b, c):\n    return (b - a) / (2 * c)\n# <func> # Python \n# Find the vertex of a parabola.\n# :param a: x-coordinate of the vertex\n# :param b: y-coordinate of the vertex\n# :param c: coefficient of the parabola\n# :return: x-coordinate of the vertex\nparabola_vertex(a, b, c):\n    return (b - a) / (2 * c)\n# <func> # Python \n# Find the vertex of a parabola.\n# :param a: x-coordinate of the vertex\n# :param b: y-coordinate of the vertex\n# :param c: coefficient of the parabola\n# :return: x-coordinate of the vertex\nparabola_vertex(a, b, c):\n    return (b - a) / (2 * c)\n# <func> # Python \n# Find the vertex of a parabola.\n# :param a: x-coordinate of the vertex\n# :param b: y-coordinate of the vertex\n# :param c: coefficient of the parabola\n# :return: x-coordinate of the vertex\nparabola_vertex(a, b, c):\n    return (b - a) / (2 * c)\n# <func> # Python \n# Find the vertex of a parabola.\n# :param a: x-coordinate of the vertex\n# :param b: y-coordinate of the vertex\n# :param c: coefficient of the parabola\n# :return: x-coordinate of the vertex\nparabola_vertex(a, b, c):\n    return (b - a) / (2 * c)\n# <func> # Python \n# Find the vertex of a parabola.\n# :param a: x-coordinate of the vertex\n# :param b: y-coordinate of the vertex\n# :param c: coefficient of the parabola\n# :return: x-coordinate of the vertex\nparabola_vertex(a, b, c):\n   "], ["\n# <func> # Python \n# Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\n    return [nums[i] for i in range(N) if nums[i] == 1]\n\n# Test function"], ["\n# <func> # Python \n# Write a python function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n):\n    return n ^ (n & 1)\n# Example usage:"], ["\n# <func> # Python \n# Write a function to convert a tuple of string values to a tuple of integer values.\ndef tuple_int_str(tuple_str):\n    return tuple(map(int, tuple_str))\n# Example usage:\ntuple_int_str((1, 2, 3)) # Output: (1, 2, 3)\ntuple_int_str((1, 2, 3, 4)) # Output: (1, 2, 3, 4)\ntuple_int_str((1, 2, 3, 4, 5)) # Output: (1, 2, 3, 4, 5)\ntuple_int_str((1, 2, 3, 4, 5, 6)) # Output: (1, 2, 3, 4, 5, 6)\ntuple_int_str((1, 2, 3, 4, 5, 6, 7)) # Output: (1, 2, 3, 4, 5, 6, 7)\ntuple_int_str((1, 2, 3, 4, 5, 6, 7, 8)) # Output: (1, 2, 3, 4, 5, 6, 7, 8)\ntuple_int_str((1, 2, 3, 4, 5, 6, 7, 8, 9)) # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9)\ntuple_int_str((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\ntuple_int_str((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) # Output: (1, 2, 3, 4, 5, 6, 7, 8"], ["from itertools import groupby\r\n\n# <func> # Python \n# Write a function to reflect the run-length encoding from a list.\ndef encode_list(list1):\n    return ''.join(list1)\n\n# <func> # Python \n# Write a function to decode the run-length encoding from a string.\ndef decode_list(list2):\n    return [int(i) for i in list2.split(' ')]\n\n# <func> # Python \n# Write a function to convert a string to a list.\ndef convert_string_to_list(string):\n    return [int(i) for i in string.split(' ')]\n\n# <func> # Python \n# Write a function to convert a list to a string.\ndef convert_list_to_string(list1):\n    return ''.join(list1)\n\n# <func> # Python \n# Write a function to convert a list to a dictionary.\ndef convert_list_to_dict(list1):\n    return {i: j for i, j in enumerate(list1)}\n\n# <func> # Python \n# Write a function to convert a dictionary to a list.\ndef convert_dict_to_list(dict1):\n    return [dict1[i] for i in range(len(dict1))]\n\n# <func> # Python \n# Write a function to convert a list to a tuple.\ndef convert_list_to_tuple(list1):\n    return tuple(list1)\n\n# <func> # Python \n# Write a function to convert a tuple to a list.\ndef convert_tuple_to_list(tuple1):\n    return tuple(i for i in tuple1)\n\n# <func> # Python \n# Write a function to convert a list to a set.\ndef convert_list_to_set(list1):\n    return set(list1)\n\n# <func> # Python \n# Write a function to convert a set to a list.\ndef convert_set_to_list(set1):\n    return [i for i in set1]\n\n# <func> # Python \n# Write a function to convert a list to a list of lists.\ndef convert"], ["\n# <func> # Python \n# Write a python function to find k number of operations required to make all elements equal.\ndef min_Ops(arr,n,k):\n    if n == 1:\n        return 1\n    else:\n        return min_Ops(arr[1:],n-1,k) + 1\n\n# Test cases"], ["\n# <func> # Python \n# Write a function to print the season for the given month and day.\ndef month_season(month,days):\n    if month == 1:\n        return 'Spring'\n    elif month == 2:\n        return 'March'\n    elif month == 3:\n        return 'April'\n    elif month == 4:\n        return 'May'\n    elif month == 5:\n        return 'June'\n    elif month == 6:\n        return 'July'\n    elif month == 7:\n        return 'August'\n    elif month == 8:\n        return 'September'\n    elif month == 9:\n        return 'October'\n    elif month == 10:\n        return 'November'\n    elif month == 11:\n        return 'December'\n    else:\n        return 'Unknown'\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find x and y that satisfies ax + by = n.\ndef solution (a, b, n):\n    x = 0\n    y = 0\n    while x < n:\n        x += a\n        y += b\n    return (x, y)\n\n# Testing"], ["\n# <func> # Python \n# Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]"], ["\n# <func> # Python \n# Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\ndef sum_series(n):\n    return sum(range(n, n+1))\n\n# Test the function with some examples."], ["from math import tan, pi\r\n\n# <func> # Python \n# Write a function to calculate the area of a regular polygon.\ndef area_polygon(s,l):\n    return s * l * tan(pi / l) / 2\n\n# <func> # Python \n# Write a function to calculate the perimeter of a regular polygon.\ndef perimeter_polygon(s,l):\n    return 2 * s + 2 * l - 2 * l * tan(pi / l) / 2\n\n# <func> # Python \n# Test the function with some examples."], ["import math \r\n\n# <func> # Python \n# Write a python function to check whether the sum of divisors are same or not.\ndef divSum(n):\n    if n == 0:\r\n        return 0\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        return sum(divSum(i) for i in range(1, n))"], ["\n# <func> # Python \n# Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\ndef count_char_position(str1):\n    count = 0\n    for char in str1:\n        if char.isalpha():\n            count += 1\n    return count\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to count the pairs with xor as an even number.\ndef find_even_Pair(A,N):\n    count = 0\n    for I in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] == 1:\n                count += 1\n    return count\n# <func> # Python \n# Find the number of even pairs in the array.\ndef find_even_Pairs(A):\n    return find_even_Pair(A,len(A))\n# <func> # Python \n# Find the number of odd pairs in the array.\ndef find_odd_Pairs(A):\n    return find_even_Pair(A,len(A)) - find_even_Pair(A,len(A))\n# <func> # Python \n# Find the number of pairs in the array.\ndef find_Pairs(A):\n    return find_even_Pair(A) + find_odd_Pair(A)\n# <func> # Python \n# Find the number of pairs in the array.\ndef find_Pairs_2(A):\n    return find_even_Pair(A) + find_odd_Pair(A) + find_even_Pair(A,len(A)) + find_odd_Pair(A,len(A))\n# <func> # Python \n# Find the number of pairs in the array.\ndef find_Pairs_3(A):\n    return find_even_Pair(A) + find_odd_Pair(A) + find_even_Pair(A,len(A)) + find_odd_Pair(A,len(A)) + find_even_Pair(A,len(A)) + find_odd_Pair(A,len(A)) + find_even_Pair(A,len(A)) + find_odd_Pair(A,len(A)) + find_even_Pair(A,len(A)) + find_odd_Pair(A,len(A)) + find_even_Pair(A,len(A)) + find_odd_Pair(A,len(A)) + find_even_Pair(A,"], ["\n# <func> # Python \n# Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n):\n    return 2 ** (ceil(log(n) / log(2)))\n\n# Test the function with some examples."], ["\n# <func> # Python \n# Write a python function to find the frequency of a number in a given array.\ndef frequency(a,x):\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to find the frequency of a number in a given array.\n# \n# Parameters:\n# ----------\n# a : list\n#     The array to be searched.\n# x : int\n#     The number to be searched.\n# \n# Returns:\n# --------\n# count : int\n#     The frequency of the number in the array.\n# \n# Examples:\n# >>> frequency([1, 2, 3, 4, 5], 1)\n# 2\n# >>> frequency([1, 2, 3, 4, 5], 2)\n# 1\n# >>> frequency([1, 2, 3, 4, 5], 6)\n# 0\n# >>> frequency([1, 2, 3, 4, 5], 7)\n# 0\n# >>> frequency([1, 2, 3, 4, 5], 10)\n# 0\n# >>> frequency([1, 2, 3, 4, 5], 11)\n# 0\n# >>> frequency([1, 2, 3, 4, 5], 12)\n# 0\n# >>> frequency([1, 2, 3, 4, 5], 13)\n# 0\n# >>> frequency([1, 2, 3, 4, 5], 14)\n# 0\n# >>> frequency([1, 2, 3, 4, 5], 15)\n# 0\n# >>> frequency([1, 2, 3, 4, 5], 16)\n# 0\n# >>> frequency([1, 2, 3, 4, 5], 17)\n# 0\n# >>> frequency([1, 2, 3, 4,"], ["\n# <func> # Python \n# Write a function to calculate the nth pell number.\ndef get_pell(n):\n    if n == 1:\n        return 1\n    else:\n        return n * (n - 1) / 2\n# <func> # Python \n# Test the function.\ndef test():\n    assert get_pell(10) == 10\n    assert get_pell(11) == 11\n    assert get_pell(12) == 12\n    assert get_pell(13) == 13\n    assert get_pell(14) == 14\n    assert get_pell(15) == 15\n    assert get_pell(16) == 16\n    assert get_pell(17) == 17\n    assert get_pell(18) == 18\n    assert get_pell(19) == 19\n    assert get_pell(20) == 20\n    assert get_pell(21) == 21\n    assert get_pell(22) == 22\n    assert get_pell(23) == 23\n    assert get_pell(24) == 24\n    assert get_pell(25) == 25\n    assert get_pell(26) == 26\n    assert get_pell(27) == 27\n    assert get_pell(28) == 28\n    assert get_pell(29) == 29\n    assert get_pell(30) == 30\n    assert get_pell(31) == 31\n    assert get_pell(32) == 32\n    assert get_pell(33) == 33\n    assert get_pell(34) == 34\n    assert get_pell(35) == 35\n    assert get_pell(36) == 36\n    assert get_pell(37) == 37\n    assert get_pell(38"], ["\n# <func> # Python \n# Write a function to find sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):\n    return sum(list1[m:n])\n\n# Example usage:"], ["import math\r\n\n# <func> # Python \n# Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n    return 5 * math.sqrt(a)"], ["\n# <func> # Python \n# Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef count_occurance(s):\n    count = 0\n    for char in s:\n        if char == 'std':\n            count += 1\n    return count\n# <func> # Python \n# Write a function to find the length of a string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef length(s):\n    return len(s)\n# <func> # Python \n# Write a function to find the length of a string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef length_2(s):\n    return len(s)\n# <func> # Python \n# Write a function to find the length of a string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef length_3(s):\n    return len(s)\n# <func> # Python \n# Write a function to find the length of a string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef length_4(s):\n    return len(s)\n# <func> # Python \n# Write a function to find the length of a string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef length_5(s):\n    return len(s)\n# <func> # Python \n# Write a function to find the length of a string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef length_6(s):\n    return len(s)\n# <func> # Python \n# Write a function to find the length of a string 1. list"], ["import re\r\n\n# <func> # Python \n# Write a function to remove everything except alphanumeric characters from a string.\ndef remove_splchar(text):\n    return re.sub(r'[^a-zA-Z0-9]', '', text)"], ["\n# <func> # Python \n# Write a function to group a sequence of key-value pairs into a dictionary of lists.\ndef group_keyvalue(l):\n    return dict(zip(l, range(len(l))))\n\n# Example usage:\nl = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]"], ["\n# <func> # Python \n# Write a function to verify validity of a string of parentheses.\ndef is_valid_parenthese( str1):\n    return True if str1.count('(') == str1.count(')') else False\n\n# Testing the function"], ["\n# <func> # Python \n# Write a function to find the perimeter of a triangle.\ndef perimeter_triangle(a,b,c):\n    return 2*(a+b+c)\n\n# Test the function"], ["\n# <func> # Python \n# Write a python function to find two distinct numbers such that their lcm lies within the given range.\ndef answer(L,R):\n    if L > R:\n        return -1\n    if L == R:\n        return L\n    if L < R:\n        return answer(R,L)\n    return answer(L,R)\n"], ["import re\r\n\n# <func> # Python \n# Write a function to search some literals strings in a string.\ndef string_literals(patterns,text):\n    return re.findall(patterns,text)"], ["\n# <func> # Python \n# Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x):\n    return x % 10 == 0 and x % 100 != 0\n\n# Test cases"], ["from math import radians, sin, cos, acos\r\n\n# <func> # Python \n# Write a function to calculate distance between two points using latitude and longitude.\ndef distance_lat_long(slat,slon,elat,elon):\n    return sqrt((slat - elat)**2 + (slon - elon)**2)\n\n# <func> # Python \n# Calculate the distance between two points using latitude and longitude.\ndef distance_lat_lon(lat1,lon1,lat2,lon2):\n    return sqrt((lat1 - lat2)**2 + (lon1 - lon2)**2)\n\n# <func> # Python \n# Calculate the distance between two points using latitude and longitude.\ndef distance_lat_lon_rad(lat1,lon1,lat2,lon2):\n    return sqrt((lat1 - lat2)**2 + (lon1 - lon2)**2)\n\n# <func> # Python \n# Calculate the distance between two points using latitude and longitude.\ndef distance_lat_lon_deg(lat1,lon1,lat2,lon2):\n    return sqrt((lat1 - lat2)**2 + (lon1 - lon2)**2)\n\n# <func> # Python \n# Calculate the distance between two points using latitude and longitude.\ndef distance_lat_lon_rad_deg(lat1,lon1,lat2,lon2):\n    return sqrt((lat1 - lat2)**2 + (lon1 - lon2)**2)\n\n# <func> # Python \n# Calculate the distance between two points using latitude and longitude.\ndef distance_lat_lon_deg_rad(lat1,lon1,lat2,lon2):\n    return sqrt((lat1 - lat2)**2 + (lon1 - lon2)**2)\n\n# <func> # Python \n# Calculate the distance between two points using latitude and longitude.\ndef distance_lat_lon_rad_deg_rad(lat1,lon1,lat2,lon2):\n    return sqrt((lat1 - lat2)**2 + (lon1 - lon2)**2)\n\n"], ["\n# <func> # Python \n# Write a function to find the longest common prefix in the given set of strings.\ndef common_prefix_util(str1, str2):\n    return str1[:len(str2)] + str2\n\n# Test function"], ["import re\r\n\n# <func> # Python \n# Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n    return re.findall(r'\\w', string)\n\n# <func> # Python \n# Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character_and_numeric(string):\n    return re.findall(r'\\w\\d', string)\n\n# <func> # Python \n# Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character_and_numeric_and_special(string):\n    return re.findall(r'\\w\\d\\s', string)\n\n# <func> # Python \n# Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character_and_numeric_and_special_and_whitespace(string):\n    return re.findall(r'\\w\\d\\s', string)"], ["\n# <func> # Python \n# Write a function to count all the distinct pairs having a difference of k in any array.\ndef count_pairs(arr, n, k):\n    count = 0\n    for I in range(n):\n        for j in range(i + 1, n):\n            if arr[i] - arr[j] == k:\n                count += 1\n    return count\n# <func> # Python \n# Write a function to find the maximum value in a list.\ndef max_value(lst):\n    max_val = lst[0]\n    for num in lst:\n        if num > max_val:\n            max_val = num\n    return max_val\n# <func> # Python \n# Write a function to find the minimum value in a list.\ndef min_value(lst):\n    min_val = lst[0]\n    for num in lst:\n        if num < min_val:\n            min_val = num\n    return min_val\n# <func> # Python \n# Write a function to find the sum of all elements in a list.\ndef sum_of_list(lst):\n    sum = 0\n    for num in lst:\n        sum += num\n    return sum\n# <func> # Python \n# Write a function to find the length of a list.\ndef length_of_list(lst):\n    return len(lst)\n# <func> # Python \n# Write a function to find the average of a list.\ndef average_of_list(lst):\n    sum = 0\n    for num in lst:\n        sum += num\n    return sum / len(lst)\n# <func> # Python \n# Write a function to find the median of a list.\ndef median_of_list(lst):\n    if len(lst) % 2 == 0:\n        return (lst[len(lst) // 2 - 1] + lst[len(lst) // 2]) / 2\n    else:\n        return lst[len(lst) // 2]\n# <func> # Python \n# Write a function to find the mode of a list.\ndef mode_of_list(lst):\n"], ["\n# <func> # Python \n# Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n    return [num for num in list if num > num]\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find the focus of a parabola.\ndef parabola_focus(a, b, c):\n    return (b - a) / (2 * c)\n\n# Test the function."], ["import re\r\n\n# <func> # Python \n# Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n    return re.findall(patterns, text)"], ["\n# <func> # Python \n# Write a function to find the longest common subsequence for the given two sequences.\ndef longest_common_subsequence(X, Y, m, n):\n    if m == 0:\n        return Y\n    if n == 0:\n        return X\n    if X[0] == Y[0]:\n        return longest_common_subsequence(X[1:], Y[1:], m - 1, n - 1)\n    else:\n        return longest_common_subsequence(X[1:], Y[1:], m - 1, n)\n# <func> # Python \n# Test the function with some examples.\ndef test_longest_common_subsequence():\n    assert longest_common_subsequence('abcde', 'abcde', 3, 3) == 'de'\n    assert longest_common_subsequence('abcde', 'abcde', 2, 3) == 'de'\n    assert longest_common_subsequence('abcde', 'abcde', 1, 3) == 'de'\n    assert longest_common_subsequence('abcde', 'abcde', 0, 3) == 'de'\n    assert longest_common_subsequence('abcde', 'abcde', 0, 0) == 'de'\n    assert longest_common_subsequence('abcde', 'abcde', 0, 1) == 'e'\n    assert longest_common_subsequence('abcde', 'abcde', 0, 2) == 'e'\n    assert longest_common_subsequence('abcde', 'abcde', 0, 3) == 'e'\n    assert longest_common_subsequence('abcde', 'abcde', 1, 0) == 'e'\n    assert longest_common_subsequence('abcde', 'abcde', 1, 1) == 'e'\n    assert longest_common_subsequence('abcde', 'abcde', 1, 2) == 'e'\n    assert longest_common_subsequence('abcde', 'abcde', 1, 3) == 'e'\n    assert longest_common_subsequence('abcde', 'abcde',"], ["\n# <func> # Python \n# Write a python function to check whether the given number can be represented by product of two squares or not.\ndef prod_Square(n):\n    if n == 1:\n        return 1\n    else:\n        return n * prod_Square(n - 1)\n\n# Testing the function"], ["\n# <func> # Python \n# Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n):\n    \"\"\"\n    :param arr: list of integers\n    :param n: integer\n    :return: the first missing positive number\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    for I in range(1, n):\n        if arr[i] < arr[i - 1]:\n            return arr[i]\n    return arr[n - 1]\n# Example usage:\n# >>> first_Missing_Positive([1, 2, 3, 0, 4], 5)\n# 5\nfirst_Missing_Positive([1, 2, 3, 0, 4], 5)\n# >>> first_Missing_Positive([1, 2, 3, 0, 4], 0)\n# 0\nfirst_Missing_Positive([1, 2, 3, 0, 4], 0)\n# >>> first_Missing_Positive([], 0)\n# 0\nfirst_Missing_Positive([], 0) \"\"\"\ndef first_Missing_Positive(arr, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    for I in range(1, n):\n        if arr[i] < arr[i - 1]:\n            return arr[i]\n    return arr[n - 1]\nfirst_Missing_Positive([1, 2, 3, 0, 4], 5) \"\"\"\n# Example usage:\n# >>> first_Missing_Positive([1, 2, 3, 0, 4], 5)\n# 5\nfirst_Missing_Positive([1, 2, 3, 0, 4], 5)\n# >>> first_Missing_Positive([1, 2, 3, 0, 4], 0)\n# 0\nfirst_Missing_Positive([1"], ["\n# <func> # Python \n# Write a python function to count the number of integral co-ordinates that lie inside a square.\ndef count_Intgral_Points(x1,y1,x2,y2):\n    count = 0\n    for x in range(x1,x2+1):\n        for y in range(y1,y2+1):\n            if (x,y) in [(x1,y1), (x2,y2)]:\n                count += 1\n    return count\n# Testing the function"], ["\n# <func> # Python \n# Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\n    if monthname3 == 'January':\n        return True\n    elif monthname3 == 'February':\n        return True\n    elif monthname3 == 'March':\n        return True\n    elif monthname3 == 'April':\n        return True\n    elif monthname3 == 'May':\n        return True\n    elif monthname3 == 'June':\n        return True\n    elif monthname3 == 'July':\n        return True\n    elif monthname3 == 'August':\n        return True\n    elif monthname3 == 'September':\n        return True\n    elif monthname3 == 'October':\n        return True\n    elif monthname3 == 'November':\n        return True\n    elif monthname3 == 'December':\n        return True\n    else:\n        return False\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to check whether a string has atleast one letter and one number.\ndef check_String(str):\n    if len(str) >= 1 and len(str) <= 100:\n        return True\n    else:\n        return False\n# <func> # Python \n# Check whether a string has atleast one letter and one number.\ncheck_String(str)"], ["\n# <func> # Python \n# Write a function to remove the duplicates from the given tuple.\ndef remove_tuple(test_tup):\n    return tuple(set(test_tup))"], ["\n# <func> # Python \n# Write a python function to convert octal number to decimal number.\ndef octal_To_Decimal(n):\n    return int(n, 8)\n# <func> # Python \n# Write a python function to convert decimal number to octal number.\ndef decimal_To_Octal(n):\n    return int(n, 10)\n# <func> # Python \n# Write a python function to convert octal number to hexadecimal number.\ndef octal_To_Hex(n):\n    return int(n, 8).hex()\n# <func> # Python \n# Write a python function to convert decimal number to hexadecimal number.\ndef decimal_To_Hex(n):\n    return int(n, 10).hex()"], ["\n# <func> # Python \n# Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n):\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1\n# <func> # Python \n# Write a python function to find the last position of an element in a sorted array.\ndef last(arr,x,n):\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1\n# <func> # Python \n# Write a python function to find the middle position of an element in a sorted array.\ndef middle(arr,x,n):\n    if n == 1:\n        return arr[0]\n    else:\n        return arr[n//2]\n# <func> # Python \n# Write a python function to find the index of an element in a sorted array.\ndef index(arr,x,n):\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1\n# <func> # Python \n# Write a python function to find the length of a sorted array.\ndef length(arr,n):\n    return n\n# <func> # Python \n# Write a python function to find the sum of a sorted array.\ndef sum(arr,n):\n    return sum(arr)\n# <func> # Python \n# Write a python function to find the product of a sorted array.\ndef product(arr,n):\n    return product(arr)\n# <func> # Python \n# Write a python function to find the average of a sorted array.\ndef average(arr,n):\n    return sum(arr) / n\n# <func> # Python \n# Write a python function to find the maximum element in a sorted array.\ndef max(arr,n):\n    return arr[n-1]\n# <func> # Python \n# Write a python function to find the minimum element in a sorted array.\ndef min(arr,n):\n    return arr[0]\n# <func> # Python \n# Write a python function to find the median of a"], ["\n# <func> # Python \n# Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n    return [t for t in test_list if len(t) <= K]"], ["\n# <func> # Python \n# Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n    return test_tup1[0] ** test_tup2[0]\n\n# Test the function"], ["import math\r\n\n# <func> # Python \n# Write a function to find the largest triangle that can be inscribed in an ellipse.\ndef largest_triangle(a,b):\n    return math.sqrt(a**2 + b**2)"], ["\n# <func> # Python \n# Write a python function to find highest power of 2 less than or equal to given number.\ndef highest_Power_of_2(n):\n    return 2 ** (int(math.log(n, 2)) - 1)\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find all index positions of the maximum values in a given list.\ndef position_max(list1):\n    max_index = 0\n    for index, value in enumerate(list1):\n        if value > list1[max_index]:\n            max_index = index\n    return max_index\n# <func> # Python \n# Find the maximum value in a list.\ndef find_max(list1):\n    max_value = list1[0]\n    for value in list1:\n        if value > max_value:\n            max_value = value\n    return max_value\n# <func> # Python \n# Find the minimum value in a list.\ndef find_min(list1):\n    min_value = list1[0]\n    for value in list1:\n        if value < min_value:\n            min_value = value\n    return min_value\n# <func> # Python \n# Find the sum of all elements in a list.\ndef find_sum(list1):\n    sum_value = 0\n    for value in list1:\n        sum_value += value\n    return sum_value\n# <func> # Python \n# Find the average of all elements in a list.\ndef find_avg(list1):\n    sum_value = 0\n    for value in list1:\n        sum_value += value\n    return sum_value / len(list1)\n# <func> # Python \n# Find the length of a list.\ndef find_length(list1):\n    return len(list1)\n# <func> # Python \n# Find the index of the first occurrence of a given element in a list.\ndef find_index(list1, element):\n    for index, value in enumerate(list1):\n        if value == element:\n            return index\n    return -1\n# <func> # Python \n# Find the index of the last occurrence of a given element in a list.\ndef find_last_index(list1, element):\n    for index, value in enumerate(list1):\n        if value == element:\n            return index + 1\n    return -1\n# <"], ["\n# <func> # Python \n# Write a python function to check whether the elements in a list are same or not.\ndef chkList(lst):\n    return lst == lst[::-1]\n\n# Example usage:\nlst = [1, 2, 3, 4, 5]"], ["\n# <func> # Python \n# Write a function to remove even characters in a string.\ndef remove_even(str1):\n    return str1.replace(' ', '')\n\n# Test the function."], ["\n# <func> # Python \n# Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2):\n    return sum(map(lambda x: x == n1, range(n2)))\n\n# Testing the function"], ["\n# <func> # Python \n# Write a python function to count the occurrence of a given character in a string.\ndef count(s,c):\n    return len(s.count(c))\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find the inversions of tuple elements in the given tuple list.\ndef inversion_elements(test_tup):\n    return tuple(sorted(test_tup))\n\n# Test the function\ntest_tup = (1, 2, 3, 4, 5)"], ["\n# <func> # Python \n# Write a function to perform the adjacent element concatenation in the given tuples.\ndef concatenate_elements(test_tup):\n    return tuple(test_tup) + tuple(test_tup[1:])\n\n# Test the function\ntest_tup = (1, 2, 3, 4)\ntest_tup2 = (1, 2, 3, 4, 5)\ntest_tup3 = (1, 2, 3, 4, 5, 6)\ntest_tup4 = (1, 2, 3, 4, 5, 6, 7)\ntest_tup5 = (1, 2, 3, 4, 5, 6, 7, 8)\ntest_tup6 = (1, 2, 3, 4, 5, 6, 7, 8, 9)\ntest_tup7 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\ntest_tup8 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\ntest_tup9 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\ntest_tup10 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)\ntest_tup11 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)\ntest_tup12 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,"], ["\n# <func> # Python \n# Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\ndef find_longest_repeating_subseq(str):\n    longest_repeating_subseq = []\n    for i in range(len(str)):\n        for j in range(i + 1, len(str)):\n            if str[i] == str[j] and str[i] != str[j]:\n                longest_repeating_subseq.append(i)\n    return longest_repeating_subseq\n# Example:\n# >>> find_longest_repeating_subseq('abcabc')\n# [1, 2, 3]\n# >>> find_longest_repeating_subseq('abcd')\n# [1, 2, 3]\n# >>> find_longest_repeating_subseq('abcdabcd')\n# [1, 2, 3, 4, 5]\n# >>> find_longest_repeating_subseq('abcdabcdabcd')\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# >>> find_longest_repeating_subseq('abcdef')\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# >>> find_longest_repeating_subseq('abcdefg')\n# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, "], ["import re\r\n\n# <func> # Python \n# Write a function to check the given decimal with a precision of 2 by using regex.\ndef is_decimal(num):\n    return re.match(r'^[0-9]+(\\.[0-9]+)?$', num) is not None"], ["import heapq as hq\r\n\n# <func> # Python \n# Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n    heapq.heappush(heap,a)\n    heapq.heappush(heap,heap[0])\n    return heapq.heappop(heap)[1]\n\n# <func> # Python \n# Return the minimum element in the given heap.\ndef heap_min(heap):\n    return heapq.heappop(heap)[1]\n\n# <func> # Python \n# Return the maximum element in the given heap.\ndef heap_max(heap):\r\n    return heapq.heappop(heap)[1]"], ["import re\r\n\n# <func> # Python \n# Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\ndef is_allowed_specific_char(string):\n    return re.match(r'[a-z][a-z][0-9]', string) is not None"], ["\n# <func> # Python \n# Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n):\n    count = 0\n    for I in range(n):\n        count += (1 << i) & n\n    return count\n# <func> # Python \n# Write a python function to find the number of distinct elements in a list.\ndef count_distinct(lst):\n    count = 0\n    for i in lst:\n        if i not in count:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to find the number of even numbers in a list.\ndef count_even(lst):\n    count = 0\n    for i in lst:\n        if i % 2 == 0:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to find the number of odd numbers in a list.\ndef count_odd(lst):\n    count = 0\n    for i in lst:\n        if i % 2 != 0:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to find the number of numbers in a list that are odd.\ndef count_odd_num(lst):\n    count = 0\n    for i in lst:\n        if i % 2 != 0:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to find the number of numbers in a list that are even.\ndef count_even_num(lst):\n    count = 0\n    for i in lst:\n        if i % 2 == 0:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to find the number of numbers in a list that are odd.\ndef count_odd_num(lst):\n    count = 0\n    for i in lst:\n        if i % 2 != 0:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to find the number of numbers in a list that are even.\ndef count_even_"], ["import math  \r\n\n# <func> # Python \n# Write a python function to find the sum of fourth power of n natural numbers.\ndef fourth_Power_Sum(n):\n    return math.pow(n, 4)"], ["\n# <func> # Python \n# Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n    return test_tup1 + test_tup2\n# Test the function\ntest_tup1 = ('hello', 'world')\ntest_tup2 = ('hello', 'world')"], ["import math\r\n\n# <func> # Python \n# Write a function to convert radians to degrees.\ndef degree_radian(radian):\n    return radian * 180.0 / math.pi"], ["\n# <func> # Python \n# Write a function to decode a run-length encoded given list.\ndef decode_list(alist):\n    return [int(i) for i in alist]\n\n# Test the function."], ["\n# <func> # Python \n# Write a function to check if a nested list is a subset of another nested list.\ndef check_subset_list(list1, list2):\n    return all(map(lambda x: x in list2, list1))"], ["\n# <func> # Python \n# Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str):\n    return str[0]\n\n# Example usage:"], ["import math   \r\n\n# <func> # Python \n# Write a python function to find the minimum operations required to make two numbers equal.\ndef min_Operations(A,B):\n    return math.ceil(math.sqrt(abs(A-B)))"], ["\r\n\n# <func> # Python \n# Write a function to extract maximum and minimum k elements in the given tuple.\ndef extract_min_max(test_tup, K):\n    return (max(test_tup), min(test_tup)) if len(test_tup) > K else (None, None)"], ["import re\r\n\n# <func> # Python \n# Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\ndef replace_max_specialchar(text,n):\n    return re.sub(r'[^\\w\\s\\.,;:]+', ':', text, n)"], ["\n# <func> # Python \n# Write a python function to find the first even number in a given list of numbers.\ndef first_even(nums):\n    return nums[0] if nums[0] % 2 == 0 else nums[1]\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n    return all(type(t) == type(t2) for t, t2 in zip(test_tuple, test_tuple[1:]))\n\n# Example usage:\ntest_tuple = (1, 2, 3)"], ["\n# <func> # Python \n# Write a function to check for majority element in the given sorted array.\ndef is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False\n# Example usage:\narr = [1, 2, 3, 3, 3, 4, 4, 4, 4, 5]\nn = 4\nx = 3"], ["\n# <func> # Python \n# Write a python function to count set bits of a given number.\ndef count_Set_Bits(n):\n    return bin(n).count('1')\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to find the minimum element in a sorted and rotated array.\ndef find_Min(arr,low,high):\n    if low == high:\n        return arr[low]\n    mid = (low + high) // 2\n    if arr[mid] < arr[high]:\n        return find_Min(arr,low,mid)\n    else:\n        return find_Min(arr,mid+1,high)\n\n# Testing the function\narr = [1,2,3,4,5,6,7,8,9]"], ["\n# <func> # Python \n# Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n    return str[1:-1]\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n# <func> # Python \n# Write a function to find maximum of three numbers.\ndef max_of_three(a,b,c):\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n# <func> # Python \n# Write a function to find sum of three numbers.\ndef sum_of_three(a,b,c):\n    return a + b + c\n# <func> # Python \n# Write a function to find product of three numbers.\ndef product_of_three(a,b,c):\n    return a * b * c\n# <func> # Python \n# Write a function to find average of three numbers.\ndef average_of_three(a,b,c):\n    return (a + b + c) / 3\n# <func> # Python \n# Write a function to find median of three numbers.\ndef median_of_three(a,b,c):\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n# <func> # Python \n# Write a function to find mode of three numbers.\ndef mode_of_three(a,b,c):\n    if a == b == c:\n        return a\n    elif a == b:\n        return b\n    elif a == c:\n        return c\n    else:\n        return a\n# <func> # Python \n# Write a function to find variance of three numbers.\ndef variance_of_three(a,b,c):\n    return (a - mean_of_three(a,b,c)) ** 2 / (variance_of_three(a,b,c))\n# <func> # Python \n# Write a function to find standard"], ["\n# <func> # Python \n# Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    return (n & (1 << l)) == 0 and (n & (1 << r)) == 0\n# <func> # Python \n# Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    return (n & (1 << l)) == 0 and (n & (1 << r)) == 0\n# <func> # Python \n# Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    return (n & (1 << l)) == 0 and (n & (1 << r)) == 0\n# <func> # Python \n# Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    return (n & (1 << l)) == 0 and (n & (1 << r)) == 0\n# <func> # Python \n# Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    return (n & (1 << l)) == 0 and (n & (1 << r)) == 0\n# <func> # Python \n# Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    return (n & (1 << l)) == 0 and (n & (1 << r)) == 0\n# <func> # Python \n# Write a python function to check whether all the bits are unset in the given range or not."], ["\n# <func> # Python \n# Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\ndef re_arrange_array(arr, n):\n    arr = sorted(arr)\n    arr = [arr[i] for i in range(n)]\n    arr = [arr[i] for i in range(n, len(arr))]\n    arr = [arr[i] for i in range(n, len(arr))]\n    arr = [arr[i] for i in range(n, len(arr))]\n    arr = [arr[i] for i in range(n, len(arr))]\n    arr = [arr[i] for i in range(n, len(arr))]\n    arr = [arr[i] for i in range(n, len(arr))]\n    arr = [arr[i] for i in range(n, len(arr))]\n    arr = [arr[i] for i in range(n, len(arr))]\n    arr = [arr[i] for i in range(n, len(arr))]\n    arr = [arr[i] for i in range(n, len(arr))]\n    arr = [arr[i] for i in range(n, len(arr))]\n    arr = [arr[i] for i in range(n, len(arr))]\n    arr = [arr[i] for i in range(n, len(arr))]\n    arr = [arr[i] for i in range(n, len(arr))]\n    arr = [arr[i] for i in range(n, len(arr))]\n    arr = [arr[i] for i in range(n, len(arr))]\n    arr = [arr[i] for i in range(n, len(arr))]\n    arr = [arr[i] for i in range(n, len(arr))]\n    arr = [arr[i] for i in range(n, len(arr))]\n    arr = [arr[i] for i in range(n, len(arr))]\n    arr = [arr[i] for i in range(n, len(arr))]\n    arr = [arr[i] for i in range(n, len(arr"], ["\n# <func> # Python \n# Write a function to replace blank spaces with any character in a string.\ndef replace_blank(str1,char):\n    return str1.replace(' ',char)\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n):\n    if n == 1:\n        return tri[0]\n    else:\n        return max(max_sum(tri[1:], n - 1), max_sum(tri[1:], n - 2)) + tri[0]\n\n# Test the function"], ["import heapq\r\n\n# <func> # Python \n# Write a function to get the n largest items from a dataset.\ndef larg_nnum(list1,n):\n    return heapq.nlargest(n, list1)\n\n# <func> # Python \n# Write a function to get the n smallest items from a dataset.\ndef lis_nnum(list1,n):\n    return heapq.nsmallest(n, list1)\n\n# <func> # Python \n# Write a function to get the n largest items from a dataset.\ndef lis_nnum_reverse(list1,n):\n    return heapq.nsmallest(n, list1, reverse=True)\n\n# <func> # Python \n# Write a function to get the n smallest items from a dataset.\ndef lis_nnum_reverse_reverse(list1,n):\n    return heapq.nsmallest(n, list1, reverse=True, reverse=True)\n\n# <func> # Python \n# Write a function to get the n largest items from a dataset.\ndef lis_nnum_reverse_reverse_reverse(list1,n):\n    return heapq.nsmallest(n, list1, reverse=True, reverse=True, reverse=True)"], ["\n# <func> # Python \n# Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r,h):\n    return 2*np.pi*r*h\n# Test function\nlateralsuface_cylinder(1,1)\nlateralsuface_cylinder(1,2)\nlateralsuface_cylinder(2,1)\nlateralsuface_cylinder(2,2)\nlateralsuface_cylinder(3,1)\nlateralsuface_cylinder(3,2)\nlateralsuface_cylinder(4,1)\nlateralsuface_cylinder(4,2)\nlateralsuface_cylinder(5,1)\nlateralsuface_cylinder(5,2)\nlateralsuface_cylinder(6,1)\nlateralsuface_cylinder(6,2)\nlateralsuface_cylinder(7,1)\nlateralsuface_cylinder(7,2)\nlateralsuface_cylinder(8,1)\nlateralsuface_cylinder(8,2)\nlateralsuface_cylinder(9,1)\nlateralsuface_cylinder(9,2)\nlateralsuface_cylinder(10,1)\nlateralsuface_cylinder(10,2)\nlateralsuface_cylinder(11,1)\nlateralsuface_cylinder(11,2)\nlateralsuface_cylinder(12,1)\nlateralsuface_cylinder(12,2)\nlateralsuface_cylinder(13,1)\nlateralsuface_cylinder(13,2)\nlateralsuface_cylinder(14,1)\nlateralsuface_cylinder(14,2)\nlateralsuface_cylinder(15,1)\nlateralsuface_"], ["\n# <func> # Python \n# Write a function to find the volume of a cube.\ndef volume_cube(l):\n    return l * l * l * l\n\n# Test the function."], ["\n# <func> # Python \n# Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n):\n    return n & (n - 1)"], ["\n# <func> # Python \n# Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\ndef No_of_Triangle(N,K):\n    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    else:\n        return No_of_Triangle(N-1,K) + No_of_Triangle(N-2,K)\n\n# Testing the function"], ["from collections import Counter \r\n\n# <func> # Python \n# Write a function to check the occurrences of records which occur similar times in the given tuples.\ndef check_occurences(test_list):\n    return Counter(test_list)\n\n# <func> # Python \n# Check if the given list is a palindrome.\ndef is_palindrome(lst):\r\n    return lst == list(reversed(lst))\n\n# <func> # Python \n# Check if the given list is a palindrome.\ndef is_palindrome_str(lst):\r\n    return lst == list(reversed(lst))\n\n# <func> # Python \n# Check if the given list is a palindrome.\ndef is_palindrome_int(lst):\r\n    return lst == list(reversed(lst))\n\n# <func> # Python \n# Check if the given list is a palindrome.\ndef is_palindrome_float(lst):\r\n    return lst == list(reversed(lst))\n\n# <func> # Python \n# Check if the given list is a palindrome.\ndef is_palindrome_bool(lst):\r\n    return lst == list(reversed(lst))\n\n# <func> # Python \n# Check if the given list is a palindrome.\ndef is_palindrome_str_list(lst):\r\n    return lst == list(reversed(lst))\n\n# <func> # Python \n# Check if the given list is a palindrome.\ndef is_palindrome_int_list(lst):\r\n    return lst == list(reversed(lst))\n\n# <func> # Python \n# Check if the given list is a palindrome.\ndef is_palindrome_float_list(lst):\r\n    return lst == list(reversed(lst))\n\n# <func> # Python \n# Check if the given list is a palindrome.\ndef is_palindrome_bool_list(lst):\r\n    return lst == list(reversed(lst))\n\n# <func> # Python \n# Check if the"], ["\n# <func> # Python \n# Write a python function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        if str[i] != '':\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to find the longest substring in a given string.\ndef longest_substring(str):\n    longest = ''\n    for i in range(len(str)):\n        if str[i] != '':\n            if len(longest) < len(str[i]):\n                longest = str[i]\n    return longest\n# <func> # Python \n# Write a python function to find the longest substring in a given string.\ndef longest_substring_2(str):\n    longest = ''\n    for i in range(len(str)):\n        if str[i] != '':\n            if len(longest) < len(str[i]):\n                longest = str[i]\n    return longest\n# <func> # Python \n# Write a python function to find the longest substring in a given string.\ndef longest_substring_3(str):\n    longest = ''\n    for i in range(len(str)):\n        if str[i] != '':\n            if len(longest) < len(str[i]):\n                longest = str[i]\n    return longest\n# <func> # Python \n# Write a python function to find the longest substring in a given string.\ndef longest_substring_4(str):\n    longest = ''\n    for i in range(len(str)):\n        if str[i] != '':\n            if len(longest) < len(str[i]):\n                longest = str[i]\n    return longest\n# <func> # Python \n# Write a python function to find the longest substring in a given string.\ndef longest_substring_5(str):\n    longest = ''\n    for i in range(len(str)):\n        if str[i] != '':\n            if len(longest) < len(str[i]):\n                longest = str[i]"], ["\n# <func> # Python \n# Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n):\n    return sum(i for i in range(1,n+1) if sum(i for j in range(1,i+1) if j <= m) >= m)\nn# <func> # Python \n# Write a function to replace the last element of the list with another list.\ndef replace_list(list1,list2):\n    return [list1[0] + list2]\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n    return np.array([*range(m) for _ in range(n) for _ in range(o)])\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to count total characters in a string.\ndef count_charac(str1):\n    count = 0\n    for char in str1:\n        count += len(char)\n    return count\n# <func> # Python \n# Write a function to count total words in a string.\ndef count_word(str1):\n    count = 0\n    for char in str1:\n        if char.isalpha():\n            count += 1\n    return count\n# <func> # Python \n# Write a function to count total sentences in a string.\ndef count_sent(str1):\n    count = 0\n    for word in str1:\n        if word.isalpha():\n            count += 1\n    return count\n# <func> # Python \n# Write a function to count total words in a sentence.\ndef count_word_sent(str1):\n    count = 0\n    for word in str1:\n        if word.isalpha():\n            count += 1\n    return count\n# <func> # Python \n# Write a function to count total sentences in a paragraph.\ndef count_sent_para(str1):\n    count = 0\n    for line in str1:\n        if line.isalpha():\n            count += 1\n    return count\n# <func> # Python \n# Write a function to count total words in a paragraph.\ndef count_word_para(str1):\n    count = 0\n    for line in str1:\n        if line.isalpha():\n            count += 1\n    return count\n# <func> # Python \n# Write a function to count total sentences in a paragraph.\ndef count_sent_para_2(str1):\n    count = 0\n    for line in str1:\n        if line.isalpha():\n            count += 1\n    return count\n# <func> # Python \n# Write a function to count total words in a paragraph.\ndef count_word_para_2(str1):\n    count = 0\n    for line in str1:\n        if line.isalpha():\n            count += 1\n    return count\n# <func>"], ["\n# <func> # Python \n# Write a function to sort the given list based on the occurrence of first element of tuples.\ndef sort_on_occurence(lst):\n    return sorted(lst, key=lambda x: x[0])"], ["import math  \r\n\n# <func> # Python \n# Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N):\n    \"\"\"\n    :param N: the number to be checked\n    :return: the next perfect square greater than N\n    \"\"\"\n    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    else:\n        return (N * (N + 1)) // 2\n\n# <func> # Python \n# Write a python function to find the sum of all perfect squares in a list.\ndef sum_of_perfect_squares(lst):\n    \"\"\"\n    :param lst: a list of integers\n    :return: the sum of all perfect squares in the list\n    \"\"\"\n    sum_ = 0\n    for num in lst:\n        sum_ += next_Perfect_Square(num)\n    return sum_\n\n# <func> # Python \n# Write a python function to find the sum of all perfect squares in a list.\ndef sum_of_perfect_squares_2(lst):\n    \"\"\"\n    :param lst: a list of integers\n    :return: the sum of all perfect squares in the list\n    \"\"\"\n    sum_ = 0\n    for num in lst:\n        sum_ += next_Perfect_Square(num)\n    return sum_\n\n# <func> # Python \n# Write a python function to find the sum of all perfect squares in a list.\ndef sum_of_perfect_squares_3(lst):\n    \"\"\"\n    :param lst: a list of integers\n    :return: the sum of all perfect squares in the list\n    \"\"\"\n    sum_ = 0\n    for num in lst:\n        sum_ += next_Perfect_Square(num)\n    return sum_\n\n# <func> # Python \n# Write a python function to find the sum of all perfect squares in a list.\ndef sum_of_perfect_squares_4(lst):\n    \"\"\"\n    :param lst: a list of integers\n    :return: the sum of all perfect squares in the list\n    \"\"\"\n   "], ["\n# <func> # Python \n# Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\ndef max_sum(arr, n):\n    max_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == 1:\n                max_sum = max(max_sum, arr[i] + arr[j])\n    return max_sum\n# Test cases"], ["\n# <func> # Python \n# Write a function for computing square roots using the babylonian method.\ndef babylonian_squareroot(number):\n    \"\"\"\n    Computes the square root of a given number using the Babylonian method.\n    :param number: The number to be squared.\n    :return: The square root of the given number.\n    \"\"\"\n    return (number ** 0.5) - 0.5\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to find the longest palindromic subsequence in the given string.\ndef lps(str):\n    if len(str) == 0:\n        return 0\n    elif len(str) == 1:\n        return 1\n    else:\n        lps = 1\n        for i in range(1, len(str)):\n            if str[i] == str[i - 1]:\n                lps += 1\n            else:\n                break\n        return lps\n# Example usage:\n# >>> lps(\"abcd\")\n# 5\n# >>> lps(\"abcd\")\n# 5\n# >>> lps(\"abcd\")\n# 5\n# >>> lps(\"abcd\")\n# 5\nlps(input())"], ["\n# <func> # Python \n# Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n    return sum(range(1, n + 1))\n\n# Test the function."], ["\n# <func> # Python \n# Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n    return array_nums1.intersection(array_nums2)\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to count the occcurences of an element in a tuple.\ndef count_X(tup, x):\n    return tup.count(x)\n\n# Testing the function"], ["\n# <func> # Python \n# Write a function to insert an element before each element of a list.\ndef insert_element(list,element):\n    return [element] + list\n# Example usage:\nlist = [1, 2, 3, 4, 5]"], ["import cmath  \r\n\n# <func> # Python \n# Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):\n    return (numbers[0] + 1j * numbers[1]) / 2\n\n# <func> # Python \n# Write a python function to calculate the distance between two points.\ndef distance(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\n# <func> # Python \n# Write a python function to calculate the angle between two points.\ndef angle(x1, y1, x2, y2):\n    return math.atan2(y2 - y1, x2 - x1)\n\n# <func> # Python \n# Write a python function to calculate the distance between two points.\ndef distance(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\n# <func> # Python \n# Write a python function to calculate the angle between two points.\ndef angle(x1, y1, x2, y2):\n    return math.atan2(y2 - y1, x2 - x1)"], ["\n# <func> # Python \n# Write a python function to count integers from a given list.\ndef count_integer(list1):\n    count = 0\n    for num in list1:\n        if num > 0:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to find the sum of all odd numbers in a list.\ndef find_sum_of_odd_numbers(list1):\n    sum = 0\n    for num in list1:\n        if num % 2 != 0:\n            sum += num\n    return sum\n# <func> # Python \n# Write a python function to find the sum of all even numbers in a list.\ndef find_sum_of_even_numbers(list1):\n    sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            sum += num\n    return sum\n# <func> # Python \n# Write a python function to find the sum of all numbers in a list.\ndef find_sum_of_numbers(list1):\n    sum = 0\n    for num in list1:\n        sum += num\n    return sum\n# <func> # Python \n# Write a python function to find the sum of all numbers in a list.\ndef find_sum_of_numbers(list1):\n    sum = 0\n    for num in list1:\n        sum += num\n    return sum\n# <func> # Python \n# Write a python function to find the sum of all numbers in a list.\ndef find_sum_of_numbers(list1):\n    sum = 0\n    for num in list1:\n        sum += num\n    return sum\n# <func> # Python \n# Write a python function to find the sum of all numbers in a list.\ndef find_sum_of_numbers(list1):\n    sum = 0\n    for num in list1:\n        sum += num\n    return sum\n# <func> # Python \n# Write a python function to find the sum of all numbers in a list.\ndef find_sum_of_numbers(list1):\n    sum = 0\n    for num in list1:\n"], ["import re\r\n\n# <func> # Python \n# Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\n    return re.findall(r'[aeiou]', text)\n\n# <func> # Python \n# Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae_2(text):\n    return re.findall(r'[aeiou]', text, re.IGNORECASE)\n\n# <func> # Python \n# Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae_3(text):\n    return re.findall(r'[aeiou]', text, re.IGNORECASE, flags=re.IGNORECASE)"], ["from itertools import combinations_with_replacement \r\n\n# <func> # Python \n# Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n    return combinations_with_replacement(list(range(l)), n)\n\n# <func> # Python \n# Generate all the combinations with repetitions of specified number of colours.\ndef combinations(l, n):\n    return combinations_colors(l, n)\n\n# <func> # Python \n# Generate all the combinations with repetitions of specified number of colours.\ndef combinations_with_replacement(l, n):\n    return combinations(l, n)\n\n# <func> # Python \n# Generate all the combinations with repetitions of specified number of colours.\ndef combinations_with_replacement_with_replacement(l, n):\n    return combinations_with_replacement(l, n)\n\n# <func> # Python \n# Generate all the combinations with repetitions of specified number of colours.\ndef combinations_with_replacement_with_replacement_with_replacement(l, n):\n    return combinations_with_replacement_with_replacement(l, n)\n\n# <func> # Python \n# Generate all the combinations with repetitions of specified number of colours.\ndef combinations_with_replacement_with_replacement_with_replacement_with_replacement(l, n):\n    return combinations_with_replacement_with_replacement_with_replacement(l, n)\n\n# <func> # Python \n# Generate all the combinations with repetitions of specified number of colours.\ndef combinations_with_replacement_with_replacement_with_replacement_with_replacement_with_replacement(l, n):\n    return combinations_with_replacement_with_replacement_with_replacement_with_replacement(l, n)\n\n# <func> # Python \n# Generate all the combinations with repetitions of specified number of colours.\ndef combinations_with_replacement_with_replacement_with_replacement_with_replacement_with_replacement_with_replacement(l"], ["\n# <func> # Python \n# Write a python function to count the number of prime numbers less than a given non-negative number.\ndef count_Primes_nums(n):\n    count = 0\n    for I in range(2, n):\n        if n % I == 0:\n            count += 1\n    return count\n\n# Testing the function"], ["\n# <func> # Python \n# Write a function to swap two numbers.\ndef swap_numbers(a,b):\n    return a,b\n# <func> # Python \n# Test the function.\ntest_swap_numbers(a,b):\n    return swap_numbers(a,b)\n# <func> # Python \n# Test the function with different inputs.\ntest_swap_numbers(1,2)\ntest_swap_numbers(3,4)\ntest_swap_numbers(5,6)\ntest_swap_numbers(7,8)\ntest_swap_numbers(9,10)\ntest_swap_numbers(11,12)\ntest_swap_numbers(13,14)\ntest_swap_numbers(15,16)\ntest_swap_numbers(17,18)\ntest_swap_numbers(19,20)\ntest_swap_numbers(21,22)\ntest_swap_numbers(23,24)\ntest_swap_numbers(25,26)\ntest_swap_numbers(27,28)\ntest_swap_numbers(29,30)\ntest_swap_numbers(31,32)\ntest_swap_numbers(33,34)\ntest_swap_numbers(35,36)\ntest_swap_numbers(37,38)\ntest_swap_numbers(39,40)\ntest_swap_numbers(41,42)\ntest_swap_numbers(43,44)\ntest_swap_numbers(45,46)\ntest_swap_numbers(47,48)\ntest_swap_numbers(49,50)\ntest_swap_numbers(51,52)\ntest_swap_numbers(53,54)\ntest_swap_numbers(55,56)\ntest_swap_numbers(57,58)\ntest_swap_numbers(59,60)\ntest_swap_numbers(61,62)\ntest_swap_numbers(63,64)\ntest_swap_numbers(65,66)\ntest_"], ["\n# <func> # Python \n# Write a function to find number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n    count = 0\n    for num in array_nums:\n        if num % 2 != 0:\n            count += 1\n    return count\n# Example usage:"], ["\n# <func> # Python \n# Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2\n# <func> # Python \n# Test the function.\ntest_maximize_elements(test_tup1, test_tup2):\n    return maximize_elements(test_tup1, test_tup2) == test_tup1\n# <func> # Python \n# Test the function.\ntest_maximize_elements(test_tup1, test_tup2):\n    return maximize_elements(test_tup1, test_tup2) == test_tup2\n# <func> # Python \n# Test the function.\ntest_maximize_elements(test_tup1, test_tup2):\n    return maximize_elements(test_tup1, test_tup2) == test_tup1\n# <func> # Python \n# Test the function.\ntest_maximize_elements(test_tup1, test_tup2):\n    return maximize_elements(test_tup1, test_tup2) == test_tup2\n# <func> # Python \n# Test the function.\ntest_maximize_elements(test_tup1, test_tup2):\n    return maximize_elements(test_tup1, test_tup2) == test_tup1\n# <func> # Python \n# Test the function.\ntest_maximize_elements(test_tup1, test_tup2):\n    return maximize_elements(test_tup1, test_tup2) == test_tup2\n# <func> # Python \n# Test the function.\ntest_maximize_elements(test_tup1, test_tup2):\n    return maximize_elements(test_tup1, test_tup2) == test_tup1\n# <func> # Python \n"], ["\n# <func> # Python \n# Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n):\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    if n % 9 == 0:\n        return False\n    if n % 11 == 0:\n        return False\n    if n % 13 == 0:\n        return False\n    if n % 15 == 0:\n        return False\n    if n % 17 == 0:\n        return False\n    if n % 19 == 0:\n        return False\n    if n % 21 == 0:\n        return False\n    if n % 23 == 0:\n        return False\n    if n % 25 == 0:\n        return False\n    if n % 27 == 0:\n        return False\n    if n % 29 == 0:\n        return False\n    if n % 31 == 0:\n        return False\n    if n % 33 == 0:\n        return False\n    if n % 35 == 0:\n        return False\n    if n % 37 == 0:\n        return False\n    if n % 39 == 0:\n        return False\n    if n % 41 == 0:\n        return False\n    if n % 43 == 0:\n        return False\n    if n % 45 == 0:\n        return False\n    if n % 47 == 0:\n        return False\n    if n % 49 == 0:\n        return False\n    if n % 51 == 0:\n        return False\n    if n % 53 == 0:\n        return False\n    if n % 55 == 0:\n        return False\n    if n %"], ["\n# <func> # Python \n# Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n    return test_tup1[0] / test_tup2[0]"], ["\n# <func> # Python \n# Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n    return [list1[i:i + L] for i in range(0, len(list1), L)]\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n    return {**d1,**d2}\n# Example usage:\nd1 = {'a':1, 'b':2}\nd2 = {'c':3, 'd':4}"], ["\n# <func> # Python \n# Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n    return h_age * 25.4 * 365\n# Test the function\ndog_age(12)\ndog_age(13)\ndog_age(14)\ndog_age(15)\ndog_age(16)\ndog_age(17)\ndog_age(18)\ndog_age(19)\ndog_age(20)\ndog_age(21)\ndog_age(22)\ndog_age(23)\ndog_age(24)\ndog_age(25)\ndog_age(26)\ndog_age(27)\ndog_age(28)\ndog_age(29)\ndog_age(30)\ndog_age(31)\ndog_age(32)\ndog_age(33)\ndog_age(34)\ndog_age(35)\ndog_age(36)\ndog_age(37)\ndog_age(38)\ndog_age(39)\ndog_age(40)\ndog_age(41)\ndog_age(42)\ndog_age(43)\ndog_age(44)\ndog_age(45)\ndog_age(46)\ndog_age(47)\ndog_age(48)\ndog_age(49)\ndog_age(50)\ndog_age(51)\ndog_age(52)\ndog_age(53)\ndog_age(54)\ndog_age(55)\ndog_age(56)\ndog_age(57)\ndog_age(58)\ndog_age(59)\ndog_age(60)\ndog_age(61)\ndog_age(62)\ndog_age(63)\ndog_age(64)\ndog_age(65)\ndog_age(66)\ndog_age(67)\ndog_age"], ["\n# <func> # Python \n# Write a function to split a list for every nth element.\ndef list_split(S, step):\n    return [S[i:i + step] for i in range(0, len(S), step)]\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to find the lateral surface area of a cube.\ndef lateralsurface_cube(l):\n    return 4 * l * l * l * l\n\n# Test the function\nl = 10\nlateralsurface_cube(l) # Output: 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["\n# <func> # Python \n# Write a python function to find the sum of squares of first n odd natural numbers.\ndef square_Sum(n):\n    return sum([i**2 for i in range(1, n+1)])\n\n# Testing the function"], ["\n# <func> # Python \n# Write a function to find the n'th star number.\ndef find_star_num(n):\n    return 1 + (n - 1) // 2\n# Example:\n# >>> find_star_num(10)\n# 10\n# >>> find_star_num(12)\n# 12\n# >>> find_star_num(13)\n# 13\n# >>> find_star_num(14)\n# 14\n# >>> find_star_num(15)\n# 15\n# >>> find_star_num(16)\n# 16\n# >>> find_star_num(17)\n# 17\n# >>> find_star_num(18)\n# 18\n# >>> find_star_num(19)\n# 19\n# >>> find_star_num(20)\n# 20\n# >>> find_star_num(21)\n# 21\n# >>> find_star_num(22)\n# 22\n# >>> find_star_num(23)\n# 23\n# >>> find_star_num(24)\n# 24\n# >>> find_star_num(25)\n# 25\n# >>> find_star_num(26)\n# 26\n# >>> find_star_num(27)\n# 27\n# >>> find_star_num(28)\n# 28\n# >>> find_star_num(29)\n# 29\n# >>> find_star_num(30)\n# 30\n# >>> find_star_num(31)\n# 31\n# >>> find_star_num(32)\n# 32\n# >>> find_star_num(33)\n# 33\n# >>> find_star_num(34)\n# 34\n# >>> find_star_num(35)\n# 35\n# >>> find_star_num(36)\n# 36\n# >>> find_star_num(37)\n# 37"], ["\n# <func> # Python \n# Write a function to find the ascii value of a character.\ndef ascii_value(k):\n    return ord(k)\n# <func> # Python \n# Find the ascii value of a character.\nascii_value(k)"], ["\n# <func> # Python \n# Write a python function to find the sum of even numbers at even positions.\ndef sum_even_and_even_index(arr,n):\n    sum = 0\n    for I in range(n):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n# <func> # Python \n# Write a python function to find the sum of odd numbers at odd positions.\ndef sum_odd_and_odd_index(arr,n):\n    sum = 0\n    for I in range(n):\n        if arr[i] % 2 != 0:\n            sum += arr[i]\n    return sum\n# <func> # Python \n# Write a python function to find the sum of odd numbers at odd positions.\ndef sum_odd_and_even_index(arr,n):\n    sum = 0\n    for I in range(n):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n        else:\n            sum += arr[i] + 1\n    return sum\n# <func> # Python \n# Write a python function to find the sum of odd numbers at odd positions.\ndef sum_odd_and_odd_index(arr,n):\n    sum = 0\n    for I in range(n):\n        if arr[i] % 2 != 0:\n            sum += arr[i]\n    return sum\n# <func> # Python \n# Write a python function to find the sum of odd numbers at odd positions.\ndef sum_odd_and_odd_index(arr,n):\n    sum = 0\n    for I in range(n):\n        if arr[i] % 2 != 0:\n            sum += arr[i]\n    return sum\n# <func> # Python \n# Write a python function to find the sum of odd numbers at odd positions.\ndef sum_odd_and_odd_index(arr,n):\n    sum = 0\n    for I in range(n):\n        if arr[i] % 2 != 0:\n            sum += arr[i]\n    return sum\n# <"], ["\n# <func> # Python \n# Write a python function to find the sum of fifth power of first n even natural numbers.\ndef even_Power_Sum(n):\n    return sum(power(n, 5))\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to perfom the rear element extraction from list of tuples records.\ndef rear_extract(test_list):\n    return [tuple(i) for i in test_list[::-1]]\n\n# Test the function\ntest_list = [('A', 'B', 'C'), ('D', 'E', 'F'), ('G', 'H', 'I')]\nrear_extract(test_list)"], ["\n# <func> # Python \n# Write a function to substract the contents of one tuple with corresponding index of other tuple.\ndef substract_elements(test_tup1, test_tup2):\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n\n# Test function\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (2, 3, 4)"], ["import math  \r\n\n# <func> # Python \n# Write a python function to find sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum( n):\n    return sum( [binomial_coeff[i] for i in range(1, n+1) if i % 2 == 0] )"], ["import math as mt \r\n\n# <func> # Python \n# Write a python function to find the position of the last removed element from the given array.\ndef get_Position(a,n,m):\n    return mt(a[n-1],n-1,m)\n\n# <func> # Python \n# Write a python function to find the position of the last removed element from the given array.\ndef get_Position_2(a,n,m):\n    return mt(a[n-1],n-1,m)\n\n# <func> # Python \n# Write a python function to find the position of the last removed element from the given array.\ndef get_Position_3(a,n,m):\n    return mt(a[n-1],n-1,m)"], ["\n# <func> # Python \n# Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n    return 4/3 * math.pi * r * h\n# Test the function"], ["\n# <func> # Python \n# Write a function to filter a dictionary based on values.\ndef dict_filter(dict,n):\n    return dict.copy()"], ["\n# <func> # Python \n# Write a function to find the element count that occurs before the record in the given tuple.\ndef count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i + 1]:\n            count += 1\n    return count\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find the nth decagonal number.\ndef is_num_decagonal(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return True\n    if n == 17:\n        return True\n    if n == 18:\n        return True\n    if n == 19:\n        return True\n    if n == 20:\n        return True\n    if n == 21:\n        return True\n    if n == 22:\n        return True\n    if n == 23:\n        return True\n    if n == 24:\n        return True\n    if n == 25:\n        return True\n    if n == 26:\n        return True\n    if n == 27:\n        return True\n    if n == 28:\n        return True\n    if n == 29:\n        return True\n    if n == 30:\n        return True\n    if n == 31:\n        return True\n    if n == 32:\n        return True\n    if n == 33:\n        return True\n    if n == 34:\n        return True\n    if n == 35:\n        return True\n    if n =="], ["\n# <func> # Python \n# Write a function to search an element in the given array by using sequential search.\ndef sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1\n# <func> # Python \n# Write a function to find the maximum element in the given array.\ndef max_element(dlist):\n    max_element = dlist[0]\n    for i in range(1, len(dlist)):\n        if dlist[i] > max_element:\n            max_element = dlist[i]\n    return max_element\n# <func> # Python \n# Write a function to find the minimum element in the given array.\ndef min_element(dlist):\n    min_element = dlist[0]\n    for i in range(1, len(dlist)):\n        if dlist[i] < min_element:\n            min_element = dlist[i]\n    return min_element\n# <func> # Python \n# Write a function to find the sum of all elements in the given array.\ndef sum_elements(dlist):\n    sum = 0\n    for i in range(len(dlist)):\n        sum += dlist[i]\n    return sum\n# <func> # Python \n# Write a function to find the average of all elements in the given array.\ndef average_elements(dlist):\n    sum = sum_elements(dlist)\n    return sum / len(dlist)\n# <func> # Python \n# Write a function to find the length of the given array.\ndef length(dlist):\n    return len(dlist)\n# <func> # Python \n# Write a function to find the index of the given element in the given array.\ndef index(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1\n# <func> # Python \n# Write a function to find the index of the maximum element in the given array.\ndef max_index(dlist):\n    max_index ="], ["\n# <func> # Python \n# Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n    return len(set(test_list)) == len(test_list)\n\n# Testing the function"], ["\n# <func> # Python \n# Write a function to substaract two lists using map and lambda function.\ndef sub_list(nums1,nums2):\n    return [x - y for x, y in zip(nums1, nums2)]\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\ndef validate(n):\n    return n <= n[0]\n\n# Test cases"], ["\n# <func> # Python \n# Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n    return all(map(lambda x: x == element, list))\n# <func> # Python \n# Write a function to check whether a list is a palindrome.\ndef is_palindrome(list):\n    return check_element(list, ''.join(list))\n# <func> # Python \n# Write a function to check whether a list is a palindrome.\ndef is_palindrome(list):\n    return check_element(list, ''.join(list))\n# <func> # Python \n# Write a function to check whether a list is a palindrome.\ndef is_palindrome(list):\n    return check_element(list, ''.join(list))\n# <func> # Python \n# Write a function to check whether a list is a palindrome.\ndef is_palindrome(list):\n    return check_element(list, ''.join(list))\n# <func> # Python \n# Write a function to check whether a list is a palindrome.\ndef is_palindrome(list):\n    return check_element(list, ''.join(list))\n# <func> # Python \n# Write a function to check whether a list is a palindrome.\ndef is_palindrome(list):\n    return check_element(list, ''.join(list))\n# <func> # Python \n# Write a function to check whether a list is a palindrome.\ndef is_palindrome(list):\n    return check_element(list, ''.join(list))\n# <func> # Python \n# Write a function to check whether a list is a palindrome.\ndef is_palindrome(list):\n    return check_element(list, ''.join(list))\n# <func> # Python \n# Write a function to check whether a list is a palindrome.\ndef is_palindrome(list):\n    return check_element(list, ''.join(list))\n# <func> # Python \n# Write a function to check"], ["import re\r\n\n# <func> # Python \n# Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n    return re.match('^[a-z]+[a-z]+[a-z]+$', text) is not None"], ["\n# <func> # Python \n# Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k):\n    if n == 0:\n        return 0\n    if k == 0:\n        return a[0]\n    if n == 1:\n        return a[0]\n    if k == 1:\n        return a[0]\n    max_sum = a[0]\n    for I in range(1, n):\n        max_sum = max(max_sum + a[i], max_sum)\n    return max_sum\nn# <func> # Python \n# Write a python function to find the sum of squares of first n even natural numbers.\ndef square_Sum(n):\n    return sum([i**2 for i in range(1, n+1)])\n"], ["\n# <func> # Python \n# Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if P == 1:\n        return arr[0]\n    if P == arr[0]:\n        return arr[0]\n    for I in range(len(arr)):\n        if arr[i] % P == 0:\n            return arr[i] // P\n    return -1\n# Test Cases:\n# >>> modular_inverse([1, 2, 3], 3, 2)\n# 1\n# >>> modular_inverse([1, 2, 3], 5, 2)\n# 1\n# >>> modular_inverse([1, 2, 3], 7, 2)\n# 1\n# >>> modular_inverse([1, 2, 3], 11, 2)\n# 1\n# >>> modular_inverse([1, 2, 3], 17, 2)\n# 1\n# >>> modular_inverse([1, 2, 3], 23, 2)\n# 1\n# >>> modular_inverse([1, 2, 3], 29, 2)\n# 1\n# >>> modular_inverse([1, 2, 3], 37, 2)\n# 1\n# >>> modular_inverse([1, 2, 3], 41, 2)\n# 1\n# >>> modular_inverse([1, 2, 3], 47, 2)\n# 1\n# >>> modular_inverse([1, 2, 3], 53, 2)\n# 1\n# >>> modular_inverse([1, 2, 3], 59, 2)\n# 1\n# >>> modular_inverse([1, 2, 3], 61, 2)"], ["\n# <func> # Python \n# Write a python function to calculate the number of odd days in a given year.\ndef odd_Days(N):\n    return (N % 2 == 1) * 366 + (N % 2 == 0) * 365\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n# <func> # Python \n# Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n# <func> # Python \n# Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n# <func> # Python \n# Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n# <func> # Python \n# Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n# <func> # Python \n# Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n# <func> # Python \n# Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n    max_length = 0\n    for i in list1:\n        if len(i"], ["\n# <func> # Python \n# Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k):\n    return sum(count_no_of_ways_helper(n, k, 0))\n\ndef count_no_of_ways_helper(n, k, count):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif k == 0:\n        return 0\n    elif k == 1:\n        return 1\n    else:\n        return count_no_of_ways_helper(n - 1, k - 1, count + 1) * count_no_of_ways_helper(n - 1, k, count)"], ["\n# <func> # Python \n# Write a python function to find quotient of two numbers.\ndef find(n,m):\n    if n == 0:\n        return m\n    else:\n        return find(n-1,m) + find(n,m-1)\n# <func> # Python \n# Test the function.\ntest_find(n,m):\n    assert find(n,m) == (n+m)//2\n# <func> # Python \n# Test the function with different inputs.\ntest_find_with_inputs(n,m):\n    assert find(n,m) == (n+m)//2\n    assert find(n,m) == (n+m)//2\n    assert find(n,m) == (n+m)//2\n    assert find(n,m) == (n+m)//2\n    assert find(n,m) == (n+m)//2\n    assert find(n,m) == (n+m)//2\n    assert find(n,m) == (n+m)//2\n    assert find(n,m) == (n+m)//2\n    assert find(n,m) == (n+m)//2\n    assert find(n,m) == (n+m)//2\n    assert find(n,m) == (n+m)//2\n    assert find(n,m) == (n+m)//2\n    assert find(n,m) == (n+m)//2\n    assert find(n,m) == (n+m)//2\n    assert find(n,m) == (n+m)//2\n    assert find(n,m) == (n+m)//2\n    assert find(n,m) == (n+m)//2\n    assert find(n,m) == (n+m)//2\n    assert find(n,m) == (n+m)//2\n    assert find(n,m) == (n+m)//2\n    assert find(n,m) == (n+m)//2\n    assert find(n,m) == (n+m)//"], ["import math\r\n\n# <func> # Python \n# Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n    return (w + h) / 2\n\n# <func> # Python \n# Write a function to find the hypotenuse of a right angled triangle.\ndef hypotenuse(a,b):\n    return math.sqrt(a**2 + b**2)\n\n# <func> # Python \n# Write a function to find the area of a right angled triangle.\ndef area(a,b):\n    return (a + b) * math.tan(math.radians(a)) * math.tan(math.radians(b))\n\n# <func> # Python \n# Write a function to find the perimeter of a right angled triangle.\ndef perimeter(a,b):\n    return 2 * (a + b) + 2 * math.tan(math.radians(a)) * math.tan(math.radians(b))\n\n# <func> # Python \n# Write a function to find the length of the diagonal of a right angled triangle.\ndef diagonal(a,b):\n    return (a + b) * math.tan(math.radians(a)) * math.tan(math.radians(b))\n\n# <func> # Python \n# Write a function to find the length of the base of a right angled triangle.\ndef base(a,b):\n    return (a + b) * math.tan(math.radians(a))\n\n# <func> # Python \n# Write a function to find the length of the height of a right angled triangle.\ndef height(a,b):\n    return (a + b) * math.tan(math.radians(a)) * math.tan(math.radians(b)) + 2 * math.tan(math.radians(a)) * math.tan(math.radians(b))\n\n# <func> # Python \n# Write a function to find the area of a right angled triangle.\ndef area_rightangle(a,b):\n    return (a + b) * math.tan(math"], ["\n# <func> # Python \n# Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n    return max(listval)\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to return the sum of all divisors of a number.\ndef sum_div(number):\n    return sum(divisors(number))\n\n# Test the function"], ["\n# <func> # Python \n# Write a python function to count inversions in an array.\ndef get_Inv_Count(arr,n):\n    count = 0\n    for I in range(n):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to find the maximum value in an array.\ndef get_Max(arr,n):\n    max_val = arr[0]\n    for I in range(1,n):\n        if arr[i] > max_val:\n            max_val = arr[i]\n    return max_val\n# <func> # Python \n# Write a python function to find the minimum value in an array.\ndef get_Min(arr,n):\n    min_val = arr[0]\n    for I in range(1,n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n    return min_val\n# <func> # Python \n# Write a python function to find the median of an array.\ndef get_Median(arr,n):\n    if n == 1:\n        return arr[0]\n    else:\n        return (arr[0] + arr[n-1]) / 2\n# <func> # Python \n# Write a python function to find the average of an array.\ndef get_Avg(arr,n):\n    return (arr[0] + arr[n-1]) / 2\n# <func> # Python \n# Write a python function to find the sum of an array.\ndef get_Sum(arr,n):\n    return sum(arr)\n# <func> # Python \n# Write a python function to find the product of an array.\ndef get_Product(arr,n):\n    return product(arr)\n# <func> # Python \n# Write a python function to find the length of an array.\ndef get_Length(arr,n):\n    return len(arr)\n# <func> # Python \n# Write a python function to find the sum of all elements in an array.\ndef get_SumAll(arr,n"], ["\n# <func> # Python \n# Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n    return [item for sublist in list1 for item in sublist]\n\n# Testing the function"], ["\n# <func> # Python \n# Write a function to find the nested list elements which are present in another list.\ndef intersection_nested_lists(l1, l2):\n    return [x for x in l1 if x in l2]\n\n# Example usage:"], ["from collections import \n# <func> # Python \n# Write a function to calculate the maximum aggregate from the list of tuples.\ndef max_aggregate(stdata):\n    max_val = 0\n    for data in stdata:\n        if data[1] > max_val:\n            max_val = data[1]\n    return max_val\n# Example usage:\n# max_aggregate([(1, 10), (2, 15), (3, 20), (4, 25), (5, 30)])\n# Output: 25\nmax_aggregate(stdata)"], ["\n# <func> # Python \n# Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n):\n    count = 0\n    for I in range(n):\n        count += (2**i)\n    return count\n\n# Test cases"], ["\n# <func> # Python \n# Write a function to find the depth of a dictionary.\ndef dict_depth(d):\n    if d is None:\n        return 0\n    else:\n        return 1 + dict_depth(d.values())\n\n# Test the function"], ["\n# <func> # Python \n# Write a python function to find the most significant bit number which is also a set bit.\ndef set_Bit_Number(n):\n    return n & (n - 1)\n\n# Example usage:"], ["import sys \r\n\n# <func> # Python \n# Write a python function to check whether the count of inversion of two types are same or not.\ndef solve(a,n):\n    if n == 1:\n        return True\n    if a[0] == a[1]:\n        return solve(a[1:],n-1)\n    else:\n        return solve(a[1:],n-1)\n\n# <func> # Python \n# Write a python function to find the minimum number of inversions required to convert a string to lowercase.\ndef min_inversions(s):\n    return solve(s,len(s))"], ["\n# <func> # Python \n# Write a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index):\n    if index < 0:\n        return None\n    if index >= len(arr):\n        return None\n    if index == 0:\n        return arr[0]\n    if index == len(arr):\n        return arr[len(arr) - 1]\n    if ranges[index] == 0:\n        return arr[index]\n    if ranges[index] == 1:\n        return arr[index - 1]\n    if ranges[index] == 2:\n        return arr[index + 1]\n    return find_Element(arr,ranges,rotations,ranges[index] - 1)\n# Example usage:\narr = [1,2,3,4,5]\nranges = [0,1,2,3,4]\nrotations = [1,2,3,4,5]\nindex = 2"], ["import re\r\n\n# <func> # Python \n# Write a function to match two words from a list of words starting with letter 'p'.\ndef start_withp(words):\n    return any(word.startswith('p') for word in words)"], ["\n# <func> # Python \n# Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\n    if k == 0:\n        return 0\n    if k == 1:\n        return a[index]\n    if k == 2:\n        return max(a[index], a[index + 1])\n    return max(a[index], max(a[index + 1], a[index + 2]))\nfrom copy import deepcopy\r\n\n# <func> # Python \n# Write a function to get a colon of a tuple.\ndef colon_tuplex(tuplex,m,n):\n    return tuple(map(lambda x: x[m:n], tuplex))\n\n# <func> # Python \n# Write a function to get a tuple of tuples.\ndef tuple_tuples(tuples):\n    return tuple(map(tuple, tuples))\n\n# <func> # Python \n# Write a function to get a tuple of tuples.\ndef tuple_tuples_from_list(tuples):\n    return tuple(map(tuple, tuples))\n\n# <func> # Python \n# Write a function to get a tuple of tuples.\ndef tuple_tuples_from_list_with_index(tuples):\n    return tuple(map(lambda x: (x[0], x[1]), tuples))\n\n# <func> # Python \n# Write a function to get a tuple of tuples.\ndef tuple_tuples_from_list_with_index_and_length(tuples):\n    return tuple(map(lambda x: (x[0], x[1], len(x[0])), tuples))\n\n# <func> # Python \n# Write a function to get a tuple of tuples.\ndef tuple_tuples_from_list_with_index_and_length_and_index(tuples):\n    return tuple(map(lambda x: (x[0], x[1], x[2], x[3]), tuples))\n\n# <func> # Python \n# Write a function to get a tuple of tuples.\ndef tuple_tuples_from_list_with_index_and_length_and_index_and_length(tuples):\n    return tuple(map(lambda x: (x[0], x[1], x[2], x[3], x[4]), tuples))\n\n# <func> # Python \n# Write a function to get a tuple of tuples.\ndef tuple_tuples_from_list_with_index_and_length_and_index_and_length_and_index(tuples):\n    return"], ["\n# <func> # Python \n# Write a function to find the specified number of largest products from two given lists.\ndef large_product(nums1, nums2, N):\n    result = []\n    for i in range(len(nums1)):\n        if i == 0:\n            result.append(nums1[i] * nums2[i])\n        else:\n            result.append(max(result[-1] * nums2[i], nums1[i] * result[-1]))\n    return result[-N:]\n# <func> # Python \n# Write a function to find the largest number in a list.\ndef largest(nums):\n    return max(nums)\n# <func> # Python \n# Write a function to find the smallest number in a list.\ndef smallest(nums):\n    return min(nums)\n# <func> # Python \n# Write a function to find the sum of all numbers in a list.\ndef sum_list(nums):\n    return sum(nums)\n# <func> # Python \n# Write a function to find the product of all numbers in a list.\ndef product_list(nums):\n    return product(nums)\n# <func> # Python \n# Write a function to find the average of all numbers in a list.\ndef average_list(nums):\n    return sum(nums) / len(nums)\n# <func> # Python \n# Write a function to find the median of all numbers in a list.\ndef median_list(nums):\n    return (nums[len(nums) // 2] + nums[len(nums) // 2 - 1]) / 2\n# <func> # Python \n# Write a function to find the mode of all numbers in a list.\ndef mode_list(nums):\n    return max(nums)\n# <func> # Python \n# Write a function to find the sum of all numbers in a list.\ndef sum_list_2(nums):\n    return sum(nums)\n# <func> # Python \n# Write a function to find the product of all numbers in a list.\ndef product"], ["\n# <func> # Python \n# Write a python function to find the maximum of two numbers.\ndef maximum(a,b):\n    if a > b:\n        return a\n    else:\n        return b\n# <func> # Python \n# Write a python function to find the sum of two numbers.\ndef sum(a,b):\n    return a + b\n# <func> # Python \n# Write a python function to find the product of two numbers.\ndef product(a,b):\n    return a * b\n# <func> # Python \n# Write a python function to find the average of two numbers.\ndef average(a,b):\n    return sum(range(a,b+1)) / float(b-a+1)\n# <func> # Python \n# Write a python function to find the length of a list.\ndef length(lst):\n    return len(lst)\n# <func> # Python \n# Write a python function to find the index of a number in a list.\ndef index(lst,num):\n    for i,v in enumerate(lst):\n        if v == num:\n            return i\n    return -1\n# <func> # Python \n# Write a python function to find the length of a string.\ndef length(str):\n    return len(str)\n# <func> # Python \n# Write a python function to find the index of a string in a list.\ndef index(lst,str):\n    for i,v in enumerate(lst):\n        if v == str:\n            return i\n    return -1\n# <func> # Python \n# Write a python function to find the sum of a list.\ndef sum_list(lst):\n    return sum(lst)\n# <func> # Python \n# Write a python function to find the product of a list.\ndef product_list(lst):\n    return product(lst)\n# <func> # Python \n# Write a python function to find the average of a list.\ndef average_list(lst):\n    return average(lst)\n# <func> # Python \n# Write a python function to find the length of a list.\ndef length_list(lst):\n    return length(lst"], ["\n# <func> # Python \n# Write a function to convert a given string to a tuple.\ndef string_to_tuple(str1):\n    return tuple(str1.split())\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n):\n    return n | (n << 1) | (n << 2) | (n << 3) | (n << 4) | (n << 5) | (n << 6) | (n << 7) | (n << 8) | (n << 9) | (n << 10) | (n << 11) | (n << 12) | (n << 13) | (n << 14) | (n << 15) | (n << 16) | (n << 17) | (n << 18) | (n << 19) | (n << 20) | (n << 21) | (n << 22) | (n << 23) | (n << 24) | (n << 25) | (n << 26) | (n << 27) | (n << 28) | (n << 29) | (n << 30) | (n << 31) | (n << 32) | (n << 33) | (n << 34) | (n << 35) | (n << 36) | (n << 37) | (n << 38) | (n << 39) | (n << 40) | (n << 41) | (n << 42) | (n << 43) | (n << 44) | (n << 45) | (n << 46) | (n << 47) | (n << 48) | (n << 49) | (n << 50) | (n << 51) | (n << 52) | (n << 53) | (n << 54) | (n << 55) | (n << 56) | (n << 57) | (n << 58) | (n << 59) | (n << "], ["import math\r\n\n# <func> # Python \n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    return math.pi * r * h"], ["\n# <func> # Python \n# Write a python function to print positive numbers in a list.\ndef pos_nos(list1):\n    for num in list1:\n        if num > 0:\n            print(num)\n        else:\n            pass\n    return\n# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"], ["\n# <func> # Python \n# Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n):\n    max_sum = 0\n    for row in range(n):\n        for col in range(n):\n            if row == col:\n                continue\n            max_sum = max(max_sum, grid[row][col] + grid[row][col + 1] + grid[row + 1][col] + grid[row + 1][col + 1])\n    return max_sum\n# Test cases"], ["\n# <func> # Python \n# Write a python function to find the first maximum length of even word.\ndef find_Max_Len_Even(str):\n    max_len = 0\n    for word in str:\n        if word.isdigit():\n            continue\n        if word.isalpha():\n            if len(word) > max_len:\n                max_len = len(word)\n    return max_len\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence(A, x):\n    return sorted(A)[-1] == x\n# <func> # Python \n# Find the index of the last occurrence of a given number in a sorted array.\n# \n# :param A: A sorted array.\n# :param x: The number to search for.\n# :return: The index of the last occurrence of x in A.\n# :rtype: int\nfind_last_occurrence(A, x):\n    return find_last_occurrence(A, x, 0, len(A))\n# <func> # Python \n# Find the index of the last occurrence of a given number in a sorted array.\n# \n# :param A: A sorted array.\n# :param x: The number to search for.\n# :param start: The index of the first element to search.\n# :param end: The index of the last element to search.\n# :return: The index of the last occurrence of x in A.\n# :rtype: int\nfind_last_occurrence(A, x, start, end):\n    if start > end:\n        return -1\n    if start == end:\n        return start\n    mid = (start + end) // 2\n    if A[mid] == x:\n        return mid\n    elif A[mid] > x:\n        return find_last_occurrence(A, x, mid + 1, end)\n    else:\n        return find_last_occurrence(A, x, start, mid)\n# <func> # Python \n# Find the index of the last occurrence of a given number in a sorted array.\n# \n# :param A: A sorted array.\n# :param x: The number to search for.\n# :return: The index of the last occurrence of x in A.\n# :rtype: int\nfind_last_occurrence(A, x):\n    return find_last_occurrence(A, x, 0, len(A))\n# <func> # Python \n# Find the index of the last occurrence of a"], ["from itertools import groupby\r\n\n# <func> # Python \n# Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\n    \"\"\"\n    Modified run-length encoding.\n    \"\"\"\n    return [0] + [len(x) for x in groupby(alist, lambda x: x[0])]\n\n# <func> # Python \n# Write a function to reflect the modified run-length encoding from a list.\ndef modified_decode(alist):\n    \"\"\"\n    Modified run-length encoding.\n    \"\"\"\n    return [0] + [len(x) for x in groupby(alist, lambda x: x[0])]\n\n# <func> # Python \n# Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode_decode(alist):\n    \"\"\"\n    Modified run-length encoding.\n    \"\"\"\n    return [0] + [len(x) for x in groupby(alist, lambda x: x[0])] + [len(x) for x in groupby(alist, lambda x: x[1])]\n\n# <func> # Python \n# Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode_decode_reverse(alist):\n    \"\"\"\n    Modified run-length encoding.\n    \"\"\"\n    return [0] + [len(x) for x in groupby(alist, lambda x: x[0])] + [len(x) for x in groupby(alist, lambda x: x[1])] + [len(x) for x in groupby(alist, lambda x: x[2])]\n\n# <func> # Python \n# Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode_decode_reverse_reverse(alist):\n    \"\"\"\n    Modified run-length encoding.\n    \"\"\"\n    return [0] + [len(x) for x in groupby(alist, lambda x: x[0])] + [len(x) for x in groupby(alist, lambda x: x[1])] + [len(x"], ["\n# <func> # Python \n# Write a python function to find the maximum volume of a cuboid with given sum of sides.\ndef max_volume (s):\n    return sum(s) * 6\n\n# Test the function"], ["import re\r\n\n# <func> # Python \n# Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\n    return re.findall(r'[a-z]{5,}', text)"], ["\n# <func> # Python \n# Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\ndef sum_difference(n):\n    return sum(x**2 for x in range(1, n+1)) - n**2\n\n# Test the function with some examples."], ["\n# <func> # Python \n# Write a function to find the demlo number for the given number.\ndef find_demlo(s):\n    return s.replace(' ', '')[::-1].count('d') + 1\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find all index positions of the minimum values in a given list.\ndef position_min(list1):\n    return [i for i, x in enumerate(list1) if x < list1[i]]"], ["\n# <func> # Python \n# Write a function to re-arrange the given array in alternating positive and negative items.\ndef right_rotate(arr, n, out_of_place, cur):\n    if n == 0:\n        return\n    if cur == 0:\n        return\n    if cur == 1:\n        return\n    if cur == 2:\n        return\n    if cur == 3:\n        return\n    if cur == 4:\n        return\n    if cur == 5:\n        return\n    if cur == 6:\n        return\n    if cur == 7:\n        return\n    if cur == 8:\n        return\n    if cur == 9:\n        return\n    if cur == 10:\n        return\n    if cur == 11:\n        return\n    if cur == 12:\n        return\n    if cur == 13:\n        return\n    if cur == 14:\n        return\n    if cur == 15:\n        return\n    if cur == 16:\n        return\n    if cur == 17:\n        return\n    if cur == 18:\n        return\n    if cur == 19:\n        return\n    if cur == 20:\n        return\n    if cur == 21:\n        return\n    if cur == 22:\n        return\n    if cur == 23:\n        return\n    if cur == 24:\n        return\n    if cur == 25:\n        return\n    if cur == 26:\n        return\n    if cur == 27:\n        return\n    if cur == 28:\n        return\n    if cur == 29:\n        return\n    if cur == 30:\n        return\n    if cur == 31:\n        return\n    if cur == 32:\n        return\n    if cur == 33:\n        return\n    if cur == 34:\n        return\n    if cur == 35:\n        return\n    if cur == 36:\n        return\n    if cur == 37:\n        return\n    if cur == "], ["\n# <func> # Python \n# Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n    return sum(test_tuple)\n\n# Test the function"], ["\n# <func> # Python \n# Write a python function to find the minimum number of squares whose sum is equal to a given number.\ndef get_Min_Squares(n):\n    return n**2\n\n# Testing the function"], ["from collections import \n# <func> # Python \n# Write a function to get the word with most number of occurrences in the given strings list.\ndef most_occurrences(test_list):\n    return max(test_list, key=test_list.count)\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to print check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\n    if x == y and y == z:\n        return True\n    else:\n        return False\n# <func> # Python \n# Test the function with some examples."], ["\n# <func> # Python \n# Write a function to rotate a given list by specified number of items to the left direction.\ndef rotate_left(list1,m,n):\n    return [list1[i] for i in range(n+1,m+1)] + list1[0:i] + [list1[-1] for i in range(n+1,m+1)]\n\n# Testing the function"], ["\n# <func> # Python \n# Write a python function to count negative numbers in a list.\ndef neg_count(list):\n    count = 0\n    for num in list:\n        if num < 0:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to count the number of even numbers in a list.\ndef even_count(list):\n    count = 0\n    for num in list:\n        if num % 2 == 0:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to count the number of odd numbers in a list.\ndef odd_count(list):\n    count = 0\n    for num in list:\n        if num % 2 != 0:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to count the number of numbers in a list.\ndef num_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to count the number of numbers in a list.\ndef num_count_2(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to count the number of numbers in a list.\ndef num_count_3(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to count the number of numbers in a list.\ndef num_count_4(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n# <func> # Python \n# Write a python function to count the number of numbers in a list.\ndef num_count_5(list):\n    count = 0\n    for num in list:\n        if num > 0:\n           "], ["import re\r\n\n# <func> # Python \n# Write a function to find all three, four, five characters long words in the given string by using regex.\ndef find_char(text):\n    return re.findall(r'[a-z]{3,5}', text)\n\n# <func> # Python \n# Find all words in the given string by using regex.\ndef find_words(text):\n    return re.findall(r'[a-z]{3,}', text)\n\n# <func> # Python \n# Find all words in the given string by using regex.\ndef find_words_2(text):\n    return re.findall(r'[a-z]{3,}', text)\n\n# <func> # Python \n# Find all words in the given string by using regex.\ndef find_words_3(text):\n    return re.findall(r'[a-z]{3,}', text)\n\n# <func> # Python \n# Find all words in the given string by using regex.\ndef find_words_4(text):\n    return re.findall(r'[a-z]{3,}', text)\n\n# <func> # Python \n# Find all words in the given string by using regex.\ndef find_words_5(text):\n    return re.findall(r'[a-z]{3,}', text)\n\n# <func> # Python \n# Find all words in the given string by using regex.\ndef find_words_6(text):\n    return re.findall(r'[a-z]{3,}', text)\n\n# <func> # Python \n# Find all words in the given string by using regex.\ndef find_words_7(text):\n    return re.findall(r'[a-z]{3,}', text)\n\n# <func> # Python \n# Find all words in the given string by using regex.\ndef find_words_8(text):\n    return re.findall(r'[a-z]{3,}', text)\n\n# <func> # Python \n# Find all words in the given string by using regex.\n"], ["\n# <func> # Python \n# Write a python function to count unset bits of a given number.\ndef count_unset_bits(n):\n    return sum(1 << i for i in range(n) if n & (1 << i) == 0)\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to count character frequency of a given string.\ndef char_frequency(str1):\n    return len(str1)\n# <func> # Python \n# Write a function to find the longest substring without repeating characters.\ndef longest_substring(str1):\n    return ''\n# <func> # Python \n# Write a function to find the longest substring without repeating characters.\ndef longest_substring_with_repeating_char(str1):\n    return ''\n# <func> # Python \n# Write a function to find the longest substring without repeating characters.\ndef longest_substring_with_repeating_char_2(str1):\n    return ''\n# <func> # Python \n# Write a function to find the longest substring without repeating characters.\ndef longest_substring_with_repeating_char_3(str1):\n    return ''\n# <func> # Python \n# Write a function to find the longest substring without repeating characters.\ndef longest_substring_with_repeating_char_4(str1):\n    return ''\n# <func> # Python \n# Write a function to find the longest substring without repeating characters.\ndef longest_substring_with_repeating_char_5(str1):\n    return ''\n# <func> # Python \n# Write a function to find the longest substring without repeating characters.\ndef longest_substring_with_repeating_char_6(str1):\n    return ''\n# <func> # Python \n# Write a function to find the longest substring without repeating characters.\ndef longest_substring_with_repeating_char_7(str1):\n    return ''\n# <func> # Python \n# Write a function to find the longest substring without repeating characters.\ndef longest_substring_with_repeating_char_8(str1):\n    return ''\n# <func> # Python \n# Write a function to find the longest substring without repeating characters.\ndef longest_substring_with_repeating_char_9(str1):\n    return ''\n# <func> # Python \n# Write a function to find the longest substring without repeating characters.\ndef longest_substring_with_repe"], ["\n# <func> # Python \n# Write a python function to sort a list according to the second element in sublist.\ndef Sort(sub_li):\n    return sorted(sub_li, key=lambda x: x[1])\n# <func> # Python \n# Test the function.\ntest_Sort(list_of_lists):\n    return list_of_lists\n# <func> # Python \n# Test the function.\ntest_Sort(list_of_lists):\n    return list_of_lists\n# <func> # Python \n# Test the function.\ntest_Sort(list_of_lists):\n    return list_of_lists\n# <func> # Python \n# Test the function.\ntest_Sort(list_of_lists):\n    return list_of_lists\n# <func> # Python \n# Test the function.\ntest_Sort(list_of_lists):\n    return list_of_lists\n# <func> # Python \n# Test the function.\ntest_Sort(list_of_lists):\n    return list_of_lists\n# <func> # Python \n# Test the function.\ntest_Sort(list_of_lists):\n    return list_of_lists\n# <func> # Python \n# Test the function.\ntest_Sort(list_of_lists):\n    return list_of_lists\n# <func> # Python \n# Test the function.\ntest_Sort(list_of_lists):\n    return list_of_lists\n# <func> # Python \n# Test the function.\ntest_Sort(list_of_lists):\n    return list_of_lists\n# <func> # Python \n# Test the function.\ntest_Sort(list_of_lists):\n    return list_of_lists\n# <func> # Python \n# Test the function.\ntest_Sort(list_of_lists):\n    return list_of_lists\n# <func> # Python \n# Test the function.\ntest_Sort(list_of_lists):\n    return list_of_lists\n# <func> # Python \n# Test the function.\ntest_Sort(list_of_lists):\n    return"], ["\n# <func> # Python \n# Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):\n    if a+b+c == 0:\n        return False\n    else:\n        return True\n# <func> # Python \n# Check whether the triangle is valid or not if sides are given.\n# Parameters:\n# -----------\n# a: int\n# b: int\n# c: int\n# Returns:\n# --------\n# bool: True if valid, False if invalid\n# Examples:\n# ---------\n# >>> check_Validity(10,10,10)\n# True\n# >>> check_Validity(10,10,100)\n# False\n# >>> check_Validity(10,10,1000)\n# False\n# >>> check_Validity(10,10,10000)\n# False\n# >>> check_Validity(10,10,100000)\n# False\n# >>> check_Validity(10,10,1000000)\n# False\n# >>> check_Validity(10,10,10000000)\n# False\n# >>> check_Validity(10,10,100000000)\n# False\n# >>> check_Validity(10,10,1000000000)\n# False\n# >>> check_Validity(10,10,10000000000)\n# False\n# >>> check_Validity(10,10,100000000000)\n# False\n# >>> check_Validity(10,10,1000000000000)\n# False\n# >>> check_Validity(10,10,10000000000000)\n# False\n# >>> check_Validity(10,10,100000000000000)\n#"], ["\n# <func> # Python \n# Write a function to find the sum of arithmetic progression.\ndef ap_sum(a,n,d):\n    return sum(list(map(lambda x: x+a, range(n,n+d))))\n\n# Testing the function"], ["\n# <func> # Python \n# Write a function to check whether the given month name contains 28 days or not.\ndef check_monthnum(monthname1):\n    if monthname1 == 'January' or monthname1 == 'February' or monthname1 == 'March' or monthname1 == 'April' or monthname1 == 'May' or monthname1 == 'June' or monthname1 == 'July' or monthname1 == 'August' or monthname1 == 'September' or monthname1 == 'October' or monthname1 == 'November' or monthname1 == 'December':\n        return True\n    else:\n        return False\n# <func> # Python \n# Write a function to check whether the given month name contains 29 days or not.\ndef check_monthnum_29(monthname1):\n    if monthname1 == 'January' or monthname1 == 'February' or monthname1 == 'March' or monthname1 == 'April' or monthname1 == 'May' or monthname1 == 'June' or monthname1 == 'July' or monthname1 == 'August' or monthname1 == 'September' or monthname1 == 'October' or monthname1 == 'November' or monthname1 == 'December':\n        return True\n    else:\n        return False\n# <func> # Python \n# Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnum_30(monthname1):\n    if monthname1 == 'January' or monthname1 == 'February' or monthname1 == 'March' or monthname1 == 'April' or monthname1 == 'May' or monthname1 == 'June' or monthname1 == 'July' or monthname1 == 'August' or monthname1 == 'September' or monthname1 == 'October' or monthname1 == 'November' or monthname1 == 'December':\n        return True\n    else:\n        return False\n# <func> # Python \n# Write a function to check whether the given month name contains"], ["import re\r\n\n# <func> # Python \n# Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n    return re.search(r'(\\w+)\\s*(\\.\\s*)?', text, flags=re.IGNORECASE)"], ["\n# <func> # Python \n# Write a python function to count the number of substrings with same first and last characters.\ndef check_Equality(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i + 1]:\n            count += 1\n    return count\n# <func> # Python \n# Check if a string is a palindrome.\ndef is_palindrome(s):\n    if len(s) < 2:\n        return True\n    elif s[0] == s[-1]:\n        return is_palindrome(s[1:-1])\n    else:\n        return False\n# <func> # Python \n# Check if a string is a palindrome.\ndef is_palindrome_str(s):\n    return is_palindrome(s.lower())\n# <func> # Python \n# Check if a string is a palindrome.\ndef is_palindrome_str_reverse(s):\n    return is_palindrome_str(s[::-1])\n# <func> # Python \n# Check if a string is a palindrome.\ndef is_palindrome_str_reverse_reverse(s):\n    return is_palindrome_str_reverse(s[::-1][::-1])\n# <func> # Python \n# Check if a string is a palindrome.\ndef is_palindrome_str_reverse_reverse_reverse(s):\n    return is_palindrome_str_reverse_reverse(s[::-1][::-1][::-1])\n# <func> # Python \n# Check if a string is a palindrome.\ndef is_palindrome_str_reverse_reverse_reverse_reverse(s):\n    return is_palindrome_str_reverse_reverse_reverse(s[::-1][::-1][::-1][::-1])\n# <func> # Python \n# Check if a string is a palindrome.\ndef is_palindrome_str_reverse_reverse_reverse_reverse_reverse(s):\n    return is_palindrome_str_reverse"], ["\n# <func> # Python \n# Write a python function to find the maximum occuring divisor in an interval.\ndef find_Divisor(x,y):\n    if x > y:\n        return find_Divisor(y,x)\n    else:\n        return x\n# <func> # Python \n# Find the maximum divisor in an interval.\n# @param x: The starting value of the interval.\n# @param y: The ending value of the interval.\n# @return: The maximum divisor.\nfind_Divisor(x,y):\n    if x > y:\n        return find_Divisor(y,x)\n    else:\n        return x\n# <func> # Python \n# Find the maximum divisor in an interval.\n# @param x: The starting value of the interval.\n# @param y: The ending value of the interval.\n# @return: The maximum divisor.\nfind_Divisor(x,y):\n    return find_Divisor(y,x)\n# <func> # Python \n# Find the maximum divisor in an interval.\n# @param x: The starting value of the interval.\n# @param y: The ending value of the interval.\n# @return: The maximum divisor.\nfind_Divisor(x,y):\n    return find_Divisor(y,x)\n# <func> # Python \n# Find the maximum divisor in an interval.\n# @param x: The starting value of the interval.\n# @param y: The ending value of the interval.\n# @return: The maximum divisor.\nfind_Divisor(x,y):\n    return find_Divisor(y,x)\n# <func> # Python \n# Find the maximum divisor in an interval.\n# @param x: The starting value of the interval.\n# @param y: The ending value of the interval.\n# @return: The maximum divisor.\nfind_Divisor(x,y):\n    return find_Divisor(y,x)\n# <func> # Python \n# Find the maximum divisor in an interval.\n# @param x: The starting value of the interval.\n#"], ["\n# <func> # Python \n# Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_smallest_nums(lst):\n    return sum(lst[0] + lst[1] + lst[2])"], ["\n# <func> # Python \n# Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n    return tuple(sorted(s))"], ["from heapq import heappop, heappush\r\nclass Node:\r\n    \n# <func> # Python \n# Write a function to find the smallest range that includes at-least one element from each of the given arrays.\ndef find_minimum_range(list):\n    \"\"\"\n    :param list: list of integers\n    :return: minimum range\n    \"\"\"\n    if not list:\n        return None\n    if len(list) == 0:\n        return None\n    heap = []\n    heapq.heapify(heap)\n    heap.append(list[0])\n    for i in range(1, len(list)):\r\n        if heapq.heappop(heap) < heapq.heappush(heap, list[i]):\r\n            heapq.heappush(heap, list[i])\r\n    return heappop(heap)\n# <func> # Python \n# Write a function to find the smallest range that includes at-least one element from each of the given arrays.\ndef find_minimum_range(list):\n    \"\"\"\n    :param list: list of integers\n    :return: minimum range\n    \"\"\"\n    if not list:\n        return None\n    if len(list) == 0:\n        return None\n    heap = []\n    heapq.heapify(heap)\n    heap.append(list[0])\n    for i in range(1, len(list)):\r\n        if heapq.heappop(heap) < heapq.heappush(heap, list[i]):\r\n            heapq.heappush(heap, list[i])\r\n    return heappop(heap)"], ["\n# <func> # Python \n# Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n    return len(s) - len(s.translate(str.maketrans('', '', string.punctuation)))\n\n# Testing the function"], ["\n# <func> # Python \n# Write a python function to find number of elements with odd factors in a given range.\ndef count_Odd_Squares(n,m):\n    count = 0\n    for I in range(n,m+1):\n        if (i % 2) == 1:\n            count += 1\n    return count\n# <func> # Python \n# Test the function with some examples."], ["\n# <func> # Python \n# Write a function to find the difference between two consecutive numbers in a given list.\ndef diff_consecutivenums(nums):\n    return sum(nums[i:i+2] for i in range(len(nums)-1)) - sum(nums[i:i+2] for i in range(len(nums)-1))\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to find entringer number e(n, k).\ndef zigzag(n, k):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return zigzag(n - 1, k) + zigzag(n - 2, k)\n\n# Test function"], ["\n# <func> # Python \n# Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n    return m*n\n# Test the function with some examples."], ["\n# <func> # Python \n# Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\ndef bin_coff(n, r):\n    return bin(n).count('1') + bin(r).count('1')\n\n# Example:"], ["\n# <func> # Python \n# Write a python function to check whether the given string is a binary string or not.\ndef check(string):\n    return bool(re.match('^0b[01]+$', string))\n\n# Testing the function"], ["\n# <func> # Python \n# Write a python function to minimize the length of the string by removing occurrence of only one character.\ndef minimum_Length(s):\n    return len(s)\n\n# Testing the function"], ["\n# <func> # Python \n# Write a python function to find the first element occurring k times in a given array.\ndef first_Element(arr,n,k):\n    return arr[0] if n == 1 else arr[0] if n == 2 else arr[0] if n == 3 else arr[0] if n == 4 else arr[0] if n == 5 else arr[0] if n == 6 else arr[0] if n == 7 else arr[0] if n == 8 else arr[0] if n == 9 else arr[0] if n == 10 else arr[0] if n == 11 else arr[0] if n == 12 else arr[0] if n == 13 else arr[0] if n == 14 else arr[0] if n == 15 else arr[0] if n == 16 else arr[0] if n == 17 else arr[0] if n == 18 else arr[0] if n == 19 else arr[0] if n == 20 else arr[0] if n == 21 else arr[0] if n == 22 else arr[0] if n == 23 else arr[0] if n == 24 else arr[0] if n == 25 else arr[0] if n == 26 else arr[0] if n == 27 else arr[0] if n == 28 else arr[0] if n == 29 else arr[0] if n == 30 else arr[0] if n == 31 else arr[0] if n == 32 else arr[0] if n == 33 else arr[0] if n == 34 else arr[0] if n == 35 else arr[0] if n == 36 else arr[0] if n == 37 else arr[0] if n == 38 else arr[0] if n == 39 else arr[0] if n == 40 else arr[0] if n == 41 else arr[0] if n == 42 else arr[0] if n == 43 else arr[0"], ["\n# <func> # Python \n# Write a python function to check whether all the characters in a given string are unique.\ndef unique_Characters(str):\n    return len(set(str)) == len(str)\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n    return [item for item in list1 if item[n] == '']\n\n# Example usage:\nlist1 = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]"], ["\n# <func> # Python \n# Write a function to find t-nth term of arithemetic progression.\ndef tn_ap(a,n,d):\n    return a + (n-1)*d\n# <func> # Python \n# Find the nth term of the arithmetic progression.\n# :param a: first term\n# :param n: number of terms\n# :param d: decimal point\n# :return: nth term\ndef nth_ap(a,n,d):\n    return tn_ap(a,n,d)\n# <func> # Python \n# Find the nth term of the arithmetic progression.\n# :param a: first term\n# :param n: number of terms\n# :param d: decimal point\n# :return: nth term\ndef nth_ap_n(a,n,d):\n    return tn_ap(a,n,d)\n# <func> # Python \n# Find the nth term of the arithmetic progression.\n# :param a: first term\n# :param n: number of terms\n# :param d: decimal point\n# :return: nth term\ndef nth_ap_n_d(a,n,d):\n    return tn_ap(a,n,d)\n# <func> # Python \n# Find the nth term of the arithmetic progression.\n# :param a: first term\n# :param n: number of terms\n# :param d: decimal point\n# :return: nth term\ndef nth_ap_n_d_n(a,n,d):\n    return tn_ap(a,n,d)\n# <func> # Python \n# Find the nth term of the arithmetic progression.\n# :param a: first term\n# :param n: number of terms\n# :param d: decimal point\n# :return: nth term\ndef nth_ap_n_d_n_d(a,n,d):\n    return tn_ap(a,n,d)\n# <func> # Python \n# Find the nth term of the arithmetic progression.\n# :param a: first term\n# :param n"], ["\n# <func> # Python \n# Write a python function to count the number of rectangles in a circle of radius r.\ndef count_Rectangles(radius):\n    return 4 * math.pi * radius ** 2\n# <func> # Python \n# Write a python function to find the area of a rectangle.\ndef find_Rectangle_Area(length, width):\n    return length * width\n# <func> # Python \n# Write a python function to find the perimeter of a rectangle.\ndef find_Rectangle_Perimeter(length, width):\n    return 2 * (length + width)\n# <func> # Python \n# Write a python function to find the area of a triangle.\ndef find_Triangle_Area(base, height):\n    return 0.5 * base * height\n# <func> # Python \n# Write a python function to find the perimeter of a triangle.\ndef find_Triangle_Perimeter(base, height):\n    return 2 * base + 2 * height\n# <func> # Python \n# Write a python function to find the area of a square.\ndef find_Square_Area(side):\n    return 4 * side\n# <func> # Python \n# Write a python function to find the perimeter of a square.\ndef find_Square_Perimeter(side):\n    return 4 * side + 2 * side\n# <func> # Python \n# Write a python function to find the area of a rectangle.\ndef find_Rectangle_Area(length, width):\n    return length * width\n# <func> # Python \n# Write a python function to find the perimeter of a rectangle.\ndef find_Rectangle_Perimeter(length, width):\n    return 2 * (length + width)\n# <func> # Python \n# Write a python function to find the area of a triangle.\ndef find_Triangle_Area(base, height):\n    return 0.5 * base * height\n# <func> # Python \n# Write a python function to find the perimeter of a triangle.\ndef find_Triangle_Perimeter(base, height):\n    return 2 * base + 2 * height\n# <func"], ["\n# <func> # Python \n# Write a function to find the third angle of a triangle using two angles.\ndef find_angle(a,b):\n    return math.degrees(math.atan2(b[1] - a[1], b[0] - a[0]))\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to find the maximum element of all the given tuple records.\ndef find_max(test_list):\n    max_element = test_list[0][0]\n    for i in range(1, len(test_list)):\n        if test_list[i][0] > max_element:\n            max_element = test_list[i][0]\n    return max_element\n# Example usage:\ntest_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]"], ["\n# <func> # Python \n# Write a function to find modulo division of two lists using map and lambda function.\ndef moddiv_list(nums1,nums2):\n    return [i % j for i,j in zip(nums1,nums2)]\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c):\n    if a*a + b*b - c*c == 0:\n        return True\n    else:\n        return False\n# <func> # Python \n# Check whether the quadratic equation is quadratic or not.\ndef Is_Quadratic(a,b,c):\n    return Check_Solution(a,b,c)\n# <func> # Python \n# Check whether the quadratic equation is quadratic or not.\ndef Is_Quadratic_2(a,b,c):\n    return Check_Solution(a,b,c)\n# <func> # Python \n# Check whether the quadratic equation is quadratic or not.\ndef Is_Quadratic_3(a,b,c):\n    return Check_Solution(a,b,c)\n# <func> # Python \n# Check whether the quadratic equation is quadratic or not.\ndef Is_Quadratic_4(a,b,c):\n    return Check_Solution(a,b,c)\n# <func> # Python \n# Check whether the quadratic equation is quadratic or not.\ndef Is_Quadratic_5(a,b,c):\n    return Check_Solution(a,b,c)\n# <func> # Python \n# Check whether the quadratic equation is quadratic or not.\ndef Is_Quadratic_6(a,b,c):\n    return Check_Solution(a,b,c)\n# <func> # Python \n# Check whether the quadratic equation is quadratic or not.\ndef Is_Quadratic_7(a,b,c):\n    return Check_Solution(a,b,c)\n# <func> # Python \n# Check whether the quadratic equation is quadratic or not.\ndef Is_Quadratic_8(a,b,c):\n    return Check_Solution(a,b,c)\n# <func> # Python \n# Check whether the quadratic equation is quadratic or not.\ndef Is_Quadratic_9(a,b,c):\n   "], ["\n# <func> # Python \n# Write a function to find the n\u2019th carol number.\ndef get_carol(n):\n    return n * (n + 1) // 2\n\n# Test the function."], ["\n# <func> # Python \n# Write a function to remove empty lists from a given list of lists.\ndef remove_empty(list1):\n    return [x for x in list1 if x]"], ["\n# <func> # Python \n# Write a python function to find the item with maximum occurrences in a given list.\ndef max_occurrences(nums):\n    max_occurrence = 0\n    max_occurrence_index = 0\n    for num in nums:\n        if num > max_occurrence:\n            max_occurrence = num\n            max_occurrence_index = i\n    return max_occurrence, max_occurrence_index\n# Example usage:\n# max_occurrences([1, 2, 3, 4, 5]) --> (5, 0)\n# max_occurrences([1, 2, 3, 4, 5, 6]) --> (6, 1)\n# max_occurrences([1, 2, 3, 4, 5, 6, 7]) --> (7, 2)\n# max_occurrences([1, 2, 3, 4, 5, 6, 7, 8]) --> (8, 3)\n# max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9]) --> (9, 4)\n# max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) --> (10, 5)\n# max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) --> (11, 6)\n# max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) --> (12, 7)\n# max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) --> (13, 8)\n# max_occurrences([1, 2, "], ["\n# <func> # Python \n# Write a function to add the k elements to each element in the tuple.\ndef add_K_element(test_list, K):\n    for I in range(len(test_list)):\n        test_list[i] += K\n    return test_list\n# Test function\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ntest_list_K = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nresult = add_K_element(test_list, test_list_K)"], ["\n# <func> # Python \n# Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch):\n    return len(ch) - 1\n# <func> # Python \n# Write a function to find the number of flips required to make the given binary string a sequence of alternating characters.\ndef make_flip_alt(ch):\n    return len(ch) - 1\n# <func> # Python \n# Write a function to find the number of flips required to make the given binary string a sequence of alternating characters.\ndef make_flip_alt_reverse(ch):\n    return len(ch) - 1\n# <func> # Python \n# Write a function to find the number of flips required to make the given binary string a sequence of alternating characters.\ndef make_flip_alt_reverse_reverse(ch):\n    return len(ch) - 1\n# <func> # Python \n# Write a function to find the number of flips required to make the given binary string a sequence of alternating characters.\ndef make_flip_alt_reverse_reverse_reverse(ch):\n    return len(ch) - 1\n# <func> # Python \n# Write a function to find the number of flips required to make the given binary string a sequence of alternating characters.\ndef make_flip_alt_reverse_reverse_reverse_reverse(ch):\n    return len(ch) - 1\n# <func> # Python \n# Write a function to find the number of flips required to make the given binary string a sequence of alternating characters.\ndef make_flip_alt_reverse_reverse_reverse_reverse_reverse(ch):\n    return len(ch) - 1\n# <func> # Python \n# Write a function to find the number of flips required to make the given binary string a sequence of alternating characters.\ndef make_flip_alt_reverse_reverse_reverse_reverse_reverse_reverse(ch):\n    return len(ch) - 1\n# <func> # Python \n# Write a function to find the number of flips required to"], ["\n# <func> # Python \n# Write a python function to count the number of digits of a given number.\ndef count_Digit(n):\n    return n.count('0')\n\n# Test the function"], ["\n# <func> # Python \n# Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\n    max_product = 1\n    for num in list_nums:\n        if num > max_product:\n            max_product = num\n    return max_product\n# Example usage:\n# >>> adjacent_num_product([1, 2, 3, 4, 5])\n# 60\n# >>> adjacent_num_product([1, 2, 3, 4, 5, 6])\n# 120\n# >>> adjacent_num_product([1, 2, 3, 4, 5, 6, 7])\n# 120\n# >>> adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8])\n# 120\n# >>> adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9])\n# 120\n# >>> adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n# 120\n# >>> adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n# 120\n# >>> adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n# 120\n# >>> adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n# 120\n# >>> adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11"], ["class Node: \r\n\t\n# <func> # Python \n# Write a function to check if a binary tree is balanced or not.\ndef get_height(root):\n    if root is None:\n        return 0\n    return max(get_height(root.left), get_height(root.right)) + 1\n\ndef is_balanced(root):\n    return get_height(root) == 0 or get_height(root) == 1\n\ndef is_balanced_recursive(root):\n    if root is None:\n        return True\n    if root.left is None and root.right is None:\n        return True\n    if root.left is None:\n        return is_balanced_recursive(root.right)\n    if root.right is None:\n        return is_balanced_recursive(root.left)\n    return is_balanced_recursive(root.left) and is_balanced_recursive(root.right)\n\ndef is_balanced_iterative(root):\n    if root is None:\n        return True\n    if root.left is None and root.right is None:\n        return True\n    if root.left is None:\n        return is_balanced_iterative(root.right)\n    if root.right is None:\n        return is_balanced_iterative(root.left)\n    return is_balanced_iterative(root.left) and is_balanced_iterative(root.right)\n\ndef is_balanced_iterative_recursive(root):\n    if root is None:\n        return True\n    if root.left is None and root.right is None:\n        return True\n    if root.left is None:\n        return is_balanced_iterative_recursive(root.right)\n    if root.right is None:\n        return is_balanced_iterative_recursive(root.left)\n    return is_balanced_iterative_recursive(root.left) and is_balanced_iterative_recursive(root.right)\n\ndef is_balanced_iterative_recursive_with_helper(root):\n    if root is None:\n        return True\n"], ["\n# <func> # Python \n# Write a function to repeat the given tuple n times.\ndef repeat_tuples(test_tup, N):\n    return tuple(repeat(tup, N) for tup in test_tup)\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find the lateral surface area of cuboid\ndef lateralsurface_cuboid(l,w,h):\n    return l * w * h * 0.5\n# <func> # Python \n# Find the volume of a cuboid\ndef volume_cuboid(l,w,h):\n    return l * w * h\n# <func> # Python \n# Find the surface area of a cuboid\ndef surface_area_cuboid(l,w,h):\n    return l * w * h\n# <func> # Python \n# Find the perimeter of a cuboid\ndef perimeter_cuboid(l,w,h):\n    return 2 * l + 2 * w + 2 * h\n# <func> # Python \n# Find the area of a cuboid\ndef area_cuboid(l,w,h):\n    return l * w * h\n# <func> # Python \n# Find the volume of a cuboid\ndef volume_cuboid(l,w,h):\n    return l * w * h\n# <func> # Python \n# Find the surface area of a cuboid\ndef surface_area_cuboid(l,w,h):\n    return l * w * h\n# <func> # Python \n# Find the perimeter of a cuboid\ndef perimeter_cuboid(l,w,h):\n    return 2 * l + 2 * w + 2 * h\n# <func> # Python \n# Find the area of a cuboid\ndef area_cuboid(l,w,h):\n    return l * w * h\n# <func> # Python \n# Find the volume of a cuboid\ndef volume_cuboid(l,w,h):\n    return l * w * h\n# <func> # Python \n# Find the surface area of a cuboid\ndef surface_area_cuboid(l,w,h):\n    return l * w * h\n# <func> # Python \n# Find the perimeter of a cuboid\ndef perimeter_cuboid(l,w,h):\n    return"], ["\n# <func> # Python \n# Write a function to sort a tuple by its float element.\ndef float_sort(price):\n    return price[1]\n# <func> # Python \n# Write a function to sort a list by its string element.\ndef string_sort(list_of_strings):\n    return list_of_strings[1]\n# <func> # Python \n# Write a function to sort a list by its integer element.\ndef integer_sort(list_of_integers):\n    return list_of_integers[1]\n# <func> # Python \n# Write a function to sort a list by its string element.\ndef string_sort(list_of_strings):\n    return list_of_strings[1]\n# <func> # Python \n# Write a function to sort a list by its integer element.\ndef integer_sort(list_of_integers):\n    return list_of_integers[1]\n# <func> # Python \n# Write a function to sort a list by its string element.\ndef string_sort(list_of_strings):\n    return list_of_strings[1]\n# <func> # Python \n# Write a function to sort a list by its integer element.\ndef integer_sort(list_of_integers):\n    return list_of_integers[1]\n# <func> # Python \n# Write a function to sort a list by its string element.\ndef string_sort(list_of_strings):\n    return list_of_strings[1]\n# <func> # Python \n# Write a function to sort a list by its integer element.\ndef integer_sort(list_of_integers):\n    return list_of_integers[1]\n# <func> # Python \n# Write a function to sort a list by its string element.\ndef string_sort(list_of_strings):\n    return list_of_strings[1]\n# <func> # Python \n# Write a function to sort a list by its integer element.\ndef integer_sort(list_of_integers):\n    return list_of_integers[1]\n# <func> # Python \n# Write a function"], ["\n# <func> # Python \n# Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\n    if left_element == right_element:\n        return A[left_element]\n    else:\n        return A[left_element] + smallest_missing(A, left_element + 1, right_element)\n\n# Testing the function"], ["import heapq as hq\r\n\n# <func> # Python \n# Write a function to sort a given list of elements in ascending order using heap queue algorithm.\ndef heap_assending(nums):\n    heapq.heapify(nums)\n    for I in range(len(nums) - 1, -1, -1):\r\n        heapq.heappush(nums, nums[i])\r\n    return nums\n\n# <func> # Python \n# Write a function to sort a given list of elements in descending order using heap queue algorithm.\ndef heap_descending(nums):\r\n    heapq.heapify(nums)\n    for I in range(len(nums) - 1, -1, -1):\r\n        heapq.heappop(nums)\n    return nums\n\n# <func> # Python \n# Write a function to sort a given list of elements in random order using heap queue algorithm.\ndef heap_random(nums):\r\n    heapq.heapify(nums)\n    for I in range(len(nums) - 1, -1, -1):\r\n        heapq.heappush(nums, nums[i])\n    return nums\n\n# <func> # Python \n# Write a function to sort a given list of elements in reverse order using heap queue algorithm.\ndef heap_reverse(nums):\r\n    heapq.heapify(nums)\n    for I in range(len(nums) - 1, -1, -1):\r\n        heapq.heappop(nums)\n    return nums\n\n# <func> # Python \n# Write a function to sort a given list of elements in reverse order using heap queue algorithm.\ndef heap_reverse_descending(nums):\r\n    heapq.heapify(nums)\n    for I in range(len(nums) - 1, -1, -1):\r\n        heapq.heappop(nums)\n    return nums\n\n# <func> # Python \n# Write a function to sort a given list of elements in reverse order using heap queue algorithm.\ndef heap"], ["\n# <func> # Python \n# Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n    return (l*w*h) / 3600\n# <func> # Python \n# Write a function to find the surface area of a cuboid.\ndef surface_cuboid(l,w,h):\n    return (l*w*h) / 3600\n# <func> # Python \n# Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n    return (r*h) / 3600\n# <func> # Python \n# Write a function to find the surface area of a cylinder.\ndef surface_cylinder(r,h):\n    return (r*h) / 3600\n# <func> # Python \n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return (r*r) / 3600\n# <func> # Python \n# Write a function to find the surface area of a sphere.\ndef surface_sphere(r):\n    return (r*r) / 3600"], ["\n# <func> # Python \n# Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\n    return list(itertools.permutations(str))\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to round the given number to the nearest multiple of a specific number.\ndef round_num(n,m):\n    return int(n + (m - 1) * (n / m))\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\ndef remove_replica(test_tup):\n    return tuple(filter(lambda x: x != test_tup[0], test_tup))\n# Example usage:\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9)"], ["\n# <func> # Python \n# Write a python function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c):\n    return s.replace(c, '')\n\n# Testing the function"], ["\n# <func> # Python \n# Write a python function to shift last element to first position in the given list.\ndef move_first(test_list):\n    return test_list[0]\n\n# Test the function\ntest_list = [1, 2, 3, 4, 5]"], ["\n# <func> # Python \n# Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n    return (l*w + h) * 0.5\n# <func> # Python \n# Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n    return (l*w + h) * 0.5\n# <func> # Python \n# Write a function to find the volume of a cube.\ndef volume_cube(l):\n    return l * l * l\n# <func> # Python \n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return 4 * np.pi * r ** 2\n# <func> # Python \n# Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n    return 4 * np.pi * r * h\n# <func> # Python \n# Write a function to find the volume of a torus.\ndef volume_torus(r,s):\n    return 4 * np.pi * r * s * (s - 1)\n# <func> # Python \n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    return 4 * np.pi * r * h * (h - 1)\n# <func> # Python \n# Write a function to find the volume of a hemisphere.\ndef volume_hemisphere(r):\n    return 4 * np.pi * r ** 2 * (r - 1)\n# <func> # Python \n# Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n    return 4 * np.pi * r * h * (h - 1)\n# <func> # Python \n# Write a function to find the volume of a torus.\ndef volume_torus(r,s):\n    return 4 * np.pi * r * s * (s - 1)\n# <func> # Python \n# Write"], ["\n# <func> # Python \n# Write a function to generate a two-dimensional array.\ndef multi_list(rownum,colnum):\n    return [[i for i in range(rownum)] for j in range(colnum)]\n\n# Test the function"], ["from operator import itemgetter\r\n\n# <func> # Python \n# Write a function to sort a list of lists by a given index of the inner list.\ndef index_on_inner_list(list_data, index_no):\n    return sorted(list_data, key=itemgetter(index_no))"], ["\n# <func> # Python \n# Write a function to find the number of rotations in a circularly sorted array.\ndef find_rotation_count(A):\n    n = len(A)\n    count = 0\n    for I in range(n):\n        if A[i] == A[i + 1]:\n            count += 1\n    return count\n# <func> # Python \n# Test the function with some examples.\n# \n# >>> find_rotation_count([1, 2, 3, 4, 5])\n# 3\n# >>> find_rotation_count([1, 2, 3, 4, 5, 6])\n# 4\n# >>> find_rotation_count([1, 2, 3, 4, 5, 6, 7])\n# 6\n# >>> find_rotation_count([1, 2, 3, 4, 5, 6, 7, 8, 9])\n# 10\n# >>> find_rotation_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n# 11\n# >>> find_rotation_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n# 12\n# >>> find_rotation_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n# 13\n# >>> find_rotation_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n# 14\n# >>> find_rotation_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n# 15\n# >>> find_"], ["\n# <func> # Python \n# Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n):\n    return n ^ 1\n# Example usage:\n# >>> even_bit_toggle_number(123)\n# 124\n# >>> even_bit_toggle_number(1234)\n# 1234\n# >>> even_bit_toggle_number(12345)\n# 12345\neven_bit_toggle_number(n):\n    return n ^ (1 << (n % 2))\n# Example usage:\n# >>> even_bit_toggle_number(12345)\n# 12345\n# >>> even_bit_toggle_number(123456)\n# 123456\n# >>> even_bit_toggle_number(1234567)\n# 1234567\n# >>> even_bit_toggle_number(12345678)\n# 12345678\n# >>> even_bit_toggle_number(123456789)\n# 123456789\n# >>> even_bit_toggle_number(1234567890)\n# 1234567890\n# >>> even_bit_toggle_number(12345678901)\n# 12345678901\n# >>> even_bit_toggle_number(123456789012)\n# 123456789012\n# >>> even_bit_toggle_number(1234567890123)\n# 1234567890123\n# >>> even_bit_toggle_number(12345678901234)\n# 12345678901234\n# >>> even_bit_toggle_number(123456789012"], ["\n# <func> # Python \n# Write a python function to find the frequency of the smallest value in a given array.\ndef frequency_Of_Smallest(n,arr):\n    return sorted(arr)[-1]\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find the n'th perrin number using recursion.\ndef get_perrin(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_perrin(n - 1) + get_perrin(n - 2)\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\ndef swap_count(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '(':\n            count += 1\n        elif s[i] == ')':\n            count -= 1\n    return count\n# Test cases"], ["\n# <func> # Python \n# Write a python function to check whether the hexadecimal number is even or odd.\ndef even_or_odd(N):\n    return N % 2 == 0\n# <func> # Python \n# Write a python function to check whether the given number is a prime number.\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for I in range(2, int(n ** 0.5) + 1):\n        if n % I == 0:\n            return False\n    return True\n# <func> # Python \n# Write a python function to check whether the given number is a palindrome.\ndef is_palindrome(n):\n    return n == n[::-1]\n# <func> # Python \n# Write a python function to check whether the given number is a composite number.\ndef is_composite(n):\n    return n <= 1 or n % 2 == 0 or n % 3 == 0 or n % 5 == 0\n# <func> # Python \n# Write a python function to check whether the given number is a perfect square.\ndef is_perfect_square(n):\n    return n ** 2 == n\n# <func> # Python \n# Write a python function to check whether the given number is a square number.\ndef is_square(n):\n    return n == n ** 0.5\n# <func> # Python \n# Write a python function to check whether the given number is a composite number.\ndef is_composite(n):\n    return n <= 1 or n % 2 == 0 or n % 3 == 0 or n % 5 == 0\n# <func> # Python \n# Write a python function to check whether the given number is a perfect square.\ndef is_perfect_square(n):\n    return n ** 2 == n\n# <func> # Python \n# Write a python function to check whether the given number is a composite number.\ndef is_composite(n):\n    return n <= 1 or n % 2 == 0 or n % 3 == 0 or n % 5 == 0\n"], ["\n# <func> # Python \n# Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n):\n    return 2 ** (int(math.log(n, 2)) - 1)\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find the n'th lucas number.\ndef find_lucas(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n\n# Test function"], ["\n# <func> # Python \n# Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\n    for item in list:\n        if isinstance(item, list):\n            add_string(item,string)\n        else:\n            item.insert(0,string)\n    return list\n# Example usage:\nlist = [1,2,3,4,5]\nadd_string(list, 'new')"], ["\n# <func> # Python \n# Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\n    return dict(zip(l1, l2))\n# Example usage:\nl1 = ['apple', 'banana', 'orange']\nl2 = ['1', '2', '3']\nl3 = ['a', 'b', 'c']\nresult = convert_list_dictionary(l1, l2, l3)"], ["\n# <func> # Python \n# Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\n    return max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)) for f in range(1, n+1) )\n\n# Test function"], ["\n# <func> # Python \n# Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\n    return max(len(i) for i in input_list)\n\n# Testing the function"], ["\n# <func> # Python \n# Write a function to check if given tuple is distinct or not.\ndef check_distinct(test_tup):\n    return len(set(test_tup)) == len(test_tup)\n\n# Test function"], ["\n# <func> # Python \n# Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n    return str1[0] if str1[0] not in str1 else first_non_repeating_character(str1[1:])\n\n# Example usage:"], ["import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\n\n# <func> # Python \n# Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string):\n    return re.match(regex, string) is not None"], ["\n# <func> # Python \n# Write a function to find the median of three specific numbers.\ndef median_numbers(a,b,c):\n    if a > b and a > c:\n        return a\n    elif b > c and b > a:\n        return b\n    else:\n        return c\n# <func> # Python \n# Test the function with some examples.\n# >>> median_numbers(1,2,3)\n# 2\n# >>> median_numbers(4,5,6)\n# 3\n# >>> median_numbers(7,8,9)\n# 5\n# >>> median_numbers(10,11,12)\n# 11\n# >>> median_numbers(100,101,102)\n# 102\n# >>> median_numbers(100,100,100)\n# 100\n# >>> median_numbers(100,100,100)\n# 100\n# >>> median_numbers(100,100,100)\n# 100\n# >>> median_numbers(100,100,100)\n# 100\n# >>> median_numbers(100,100,100)\n# 100\n# >>> median_numbers(100,100,100)\n# 100\n# >>> median_numbers(100,100,100)\n# 100\n# >>> median_numbers(100,100,100)\n# 100\n# >>> median_numbers(100,100,100)\n# 100\n# >>> median_numbers(100,100,100)\n# 100\n# >>> median_numbers(100,100,100)\n# 100\n# >>> median_numbers(100,100,100)\n# 100\n# >>> median_numbers(100,100,100)\n# 10"], ["\n# <func> # Python \n# Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n    return sum(map(int, str(num)))\n\n# Example usage:\nnums = [1234, 5678, 9876, 12345]"], ["\n# <func> # Python \n# Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n    return tuple(map(lambda x: x ^ y, zip(test_tup1, test_tup2)))\n# <func> # Python \n# Test the function with some examples.\ntest_bitwise_xor_1 = bitwise_xor(tuple([1, 2, 3]), tuple([4, 5, 6]))"], ["\n# <func> # Python \n# Write a function to extract the frequency of unique tuples in the given list order irrespective.\ndef extract_freq(test_list):\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return freq\n# <func> # Python \n# Write a function to find the maximum value in the given list.\ndef find_max(lst):\n    max_val = lst[0]\n    for item in lst:\n        if item > max_val:\n            max_val = item\n    return max_val\n# <func> # Python \n# Write a function to find the minimum value in the given list.\ndef find_min(lst):\n    min_val = lst[0]\n    for item in lst:\n        if item < min_val:\n            min_val = item\n    return min_val\n# <func> # Python \n# Write a function to find the average value in the given list.\ndef find_avg(lst):\n    sum = 0\n    for item in lst:\n        sum += item\n    return sum / len(lst)\n# <func> # Python \n# Write a function to find the median value in the given list.\ndef find_med(lst):\n    if len(lst) % 2 == 0:\n        return lst[len(lst) // 2 - 1]\n    else:\n        return lst[len(lst) // 2]\n# <func> # Python \n# Write a function to find the mode value in the given list.\ndef find_mode(lst):\n    if len(lst) == 0:\n        return 0\n    else:\n        return lst[len(lst) // 2]\n# <func> # Python \n# Write a function to find the length of the given list.\ndef find_len(lst):\n    return len(lst)\n# <func> # Python \n# Write a function to find the sum of elements in the given list.\ndef find_sum(lst):\n    sum = 0"], ["\n# <func> # Python \n# Write a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n    return tuple(test_tup1 + tuple(test_tup2))\n\n# Test the function\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\nresult = add_nested_tuples(test_tup1, test_tup2)"], ["\n# <func> # Python \n# Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p):\n    return n * (n // r) % p\n\n# Test the function"], ["import re\r\n\n# <func> # Python \n# Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\n    return re.match(r'^(https?://)?\\S+(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S\\s]+)*(?:\\.[\\S"], ["\n# <func> # Python \n# Write a python function to find the minimum of two numbers.\ndef minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b\n# <func> # Python \n# Write a python function to find the maximum of two numbers.\ndef maximum(a,b):\n    if a > b:\n        return a\n    else:\n        return b\n# <func> # Python \n# Write a python function to find the sum of two numbers.\ndef sum(a,b):\n    return a + b\n# <func> # Python \n# Write a python function to find the product of two numbers.\ndef product(a,b):\n    return a * b\n# <func> # Python \n# Write a python function to find the average of two numbers.\ndef average(a,b):\n    return sum(range(a,b+1))/2\n# <func> # Python \n# Write a python function to find the square of two numbers.\ndef square(a,b):\n    return a * a\n# <func> # Python \n# Write a python function to find the cube of two numbers.\ndef cube(a,b):\n    return a * a * a\n# <func> # Python \n# Write a python function to find the factorial of two numbers.\ndef factorial(a,b):\n    if b == 0:\n        return 1\n    else:\n        return a * factorial(a-1,b)\n# <func> # Python \n# Write a python function to find the Fibonacci sequence.\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n# <func> # Python \n# Write a python function to find the sum of the first n terms of the Fibonacci sequence.\ndef fibonacci_sum(n):\n    return fibonacci(n) + fibonacci(n-1)\n# <func> # Python \n# Write a python function to find the product"], ["\n# <func> # Python \n# Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex,tuple1):\n    return tuple1 in tuplex\n# <func> # Python \n# Check whether an element exists within a tuple.\ncheck_tuple(tuplex,tuple1):\n    return check_tuplex(tuplex,tuple1)\n# <func> # Python \n# Check whether an element exists within a tuple.\ncheck_tuple(tuplex,tuple1):\n    return check_tuplex(tuplex,tuple1)\n# <func> # Python \n# Check whether an element exists within a tuple.\ncheck_tuple(tuplex,tuple1):\n    return check_tuplex(tuplex,tuple1)\n# <func> # Python \n# Check whether an element exists within a tuple.\ncheck_tuple(tuplex,tuple1):\n    return check_tuplex(tuplex,tuple1)\n# <func> # Python \n# Check whether an element exists within a tuple.\ncheck_tuple(tuplex,tuple1):\n    return check_tuplex(tuplex,tuple1)\n# <func> # Python \n# Check whether an element exists within a tuple.\ncheck_tuple(tuplex,tuple1):\n    return check_tuplex(tuplex,tuple1)\n# <func> # Python \n# Check whether an element exists within a tuple.\ncheck_tuple(tuplex,tuple1):\n    return check_tuplex(tuplex,tuple1)\n# <func> # Python \n# Check whether an element exists within a tuple.\ncheck_tuple(tuplex,tuple1):\n    return check_tuplex(tuplex,tuple1)\n# <func> # Python \n# Check whether an element exists within a tuple.\ncheck_tuple(tuplex,tuple1):\n    return check_tuplex(tuplex,tuple1)\n# <func> # Python \n# Check whether an element exists within a tuple.\ncheck_tuple(tuplex,tuple1):\n    return check_tuplex(tuplex,tuple1)\n# <func> # Python \n# Check whether an element exists within a tuple.\ncheck_tuple(tuplex"], ["\n# <func> # Python \n# Write a python function to find the parity of a given number.\ndef find_Parity(x):\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n# <func> # Python \n# Test the function.\ntest_Parity(123456789)\ntest_Parity(1234567890)\ntest_Parity(12345678901)\ntest_Parity(123456789012)\ntest_Parity(1234567890123)\ntest_Parity(12345678901234)\ntest_Parity(123456789012345)\ntest_Parity(1234567890123456)\ntest_Parity(12345678901234567)\ntest_Parity(123456789012345678)\ntest_Parity(1234567890123456789)\ntest_Parity(12345678901234567890)\ntest_Parity(123456789012345678901)\ntest_Parity(1234567890123456789012)\ntest_Parity(12345678901234567890123)\ntest_Parity(123456789012345678901234)\ntest_Parity(1234567890123456789012345)\ntest_Parity(12345678901234567890"], ["\n# <func> # Python \n# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n    return n // 10 * 10 + n % 10\n# <func> # Python \n# Test the function with some examples.\ndef test_rearrange_bigger():\n    assert rearrange_bigger(123) == 1234\n    assert rearrange_bigger(12345) == 123456\n    assert rearrange_bigger(1234567) == 12345678\n    assert rearrange_bigger(123456789) == 1234567890\n    assert rearrange_bigger(12345678901) == 123456789012\n    assert rearrange_bigger(1234567890123) == 12345678901234\n    assert rearrange_bigger(123456789012345) == 1234567890123456\n    assert rearrange_bigger(12345678901234567) == 123456789012345678\n    assert rearrange_bigger(1234567890123456789) == 12345678901234567890\n    assert rearrange_bigger(123456789012345678901) == 1234567890123456789012\n    assert rearrange_bigger(12345678901234567890123) == 1234567890123456789"], ["import heapq\r\n\n# <func> # Python \n# Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k):\n    heapq.heapify(nums1)\n    heapq.heapify(nums2)\n    for i in range(k):\n        heapq.heappush(nums1, nums2[i])\n    return heapq.nsmallest(k, nums1)\n\n# <func> # Python \n# Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n# \n# The function should return a list of tuples containing the first element of the first array and the second element of the second array.\n# \n# The function should be efficient and use O(n) time complexity.\n# \n# Example:\n# \n# >>> k_smallest_pairs([1, 2, 3], [4, 5, 6], 2)\n# [(1, 4), (2, 5), (3, 6)]\n# \n# >>> k_smallest_pairs([1, 2, 3], [4, 5, 6], 3)\n# [(1, 4), (2, 5), (3, 6)]\n# \n# >>> k_smallest_pairs([1, 2, 3], [4, 5, 6], 4)\n# [(1, 4), (2, 5), (3, 6)]\n# \n# >>> k_smallest_pairs([1, 2, 3], [4, 5, 6], 5)\n# [(1, 4), (2, 5), (3, 6)]\n# \n# >>> k_smallest_pairs([1, 2, 3], [4, 5, 6], 6)\n# [(1, 4), (2, 5), (3, 6)]\n# \n# >>> k_smallest_pairs([1"], ["\n# <func> # Python \n# Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\n    return min(map(lambda x: x[0] * x[1], list1))\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n    return min(listval)\n\n# Test the function."], ["import re\r\n\n# <func> # Python \n# Write a function to convert the given snake case string to camel case string by using regex.\ndef snake_to_camel(word):\n    return re.sub('(?<=[A-Z])(?=[a-z])', ' ', word).lower()[1:]"], ["\n# <func> # Python \n# Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n    return [x for x in l if x % 2 != 0]\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n    return list1[n]"], ["\n# <func> # Python \n# Write a python function to check whether the value exists in a sequence or not.\ndef overlapping(list1,list2):\n    if list1 == list2:\n        return True\n    else:\n        return False\n# <func> # Python \n# Write a python function to find the maximum value in a list.\ndef max_value(list):\n    max_value = list[0]\n    for element in list:\n        if element > max_value:\n            max_value = element\n    return max_value\n# <func> # Python \n# Write a python function to find the minimum value in a list.\ndef min_value(list):\n    min_value = list[0]\n    for element in list:\n        if element < min_value:\n            min_value = element\n    return min_value\n# <func> # Python \n# Write a python function to find the sum of a list.\ndef sum_list(list):\n    sum = 0\n    for element in list:\n        sum += element\n    return sum\n# <func> # Python \n# Write a python function to find the average of a list.\ndef average_list(list):\n    sum = sum_list(list)\n    return sum / len(list)\n# <func> # Python \n# Write a python function to find the length of a list.\ndef length_list(list):\n    return len(list)\n# <func> # Python \n# Write a python function to find the index of a list.\ndef index_list(list, element):\n    for index, value in enumerate(list):\n        if value == element:\n            return index\n    return -1\n# <func> # Python \n# Write a python function to find the length of a list.\ndef length_list_2(list):\n    return len(list)\n# <func> # Python \n# Write a python function to find the index of a list.\ndef index_list_2(list, element):\n    for index, value in enumerate(list):\n        if value == element:\n            return index\n    return -1\n# <func> # Python \n# Write a python function"], ["\n# <func> # Python \n# Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product\n\n# Testing"], ["MAX = 1000000\r\n\n# <func> # Python \n# Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\ndef breakSum(n):\n    if n == 0:\r\n        return 0\r\n    else:\r\n        return max(breakSum(n // 3), breakSum(n // 3 - 1), breakSum(n // 3 + 1)) + n\r\n\r\n# <func> # Python 3.7 # Tests\r\n# Test the function with some sample inputs and expected outputs."], ["\n# <func> # Python \n# Write a function to find common first element in given list of tuple.\ndef group_tuples(Input):\n    return sorted(list(filter(lambda x: x[0] != None, Input)), key=lambda x: x[1])\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to find the sublist having maximum length.\ndef Find_Max(lst):\n    max_len = 0\n    max_lst = []\n    for i in lst:\n        if len(i) > max_len:\n            max_lst = i\n            max_len = len(i)\n    return max_lst\n# <func> # Python \n# Find the sublist having maximum length.\n# Input:\n# lst - list of integers\n# Output:\n# max_lst - list of integers\n# Example:\n# >>> Find_Max([1, 2, 3, 4, 5])\n# [4, 5]\nFind_Max(lst):\n    max_lst = []\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_lst = i\n            max_len = len(i)\n    return max_lst\n# <func> # Python \n# Find the sublist having maximum length.\n# Input:\n# lst - list of integers\n# Output:\n# max_lst - list of integers\n# Example:\n# >>> Find_Max([1, 2, 3, 4, 5])\n# [4, 5]\nFind_Max(lst):\n    max_lst = []\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_lst = i\n            max_len = len(i)\n    return max_lst\n# <func> # Python \n# Find the sublist having maximum length.\n# Input:\n# lst - list of integers\n# Output:\n# max_lst - list of integers\n# Example:\n# >>> Find_Max([1, 2, 3, 4, 5])\n# [4, 5]\nFind_Max(lst):\n    max_lst = []\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_lst = i\n            max_len = len(i)\n    return max_lst\n# <func>"], ["\n# <func> # Python \n# Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\n    total = 0\n    for num in list1:\n        total += num\n    return total * len(list1)\n\n# Testing the function"], ["\n# <func> # Python \n# Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n):\n    return sum(i**3 for i in range(1, n+1))\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n    return tuple(test_tup + [delimiter] for delimiter in delimiter_list)\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):\n    return (n * (n + 1) * (n + 2)) / 6\n\n# Test function"], ["\n# <func> # Python \n# Write a function to solve gold mine problem.\ndef get_maxgold(gold, m, n):\n    \"\"\"\n    :param gold: list of integers\n    :param m: number of mines\n    :param n: number of gold\n    :return: max value of gold\n    \"\"\"\n    return max(gold[i] for i in range(m)) + max(gold[i] for i in range(n))\n\n# Test function"], ["\n# <func> # Python \n# Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\n    return tuple(test_tuple[::-1])[::-1]\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n# <func> # Python \n# Write a function to find the longest sublist in a list.\ndef find_longest_sublist(list1):\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return max_length\n# <func> # Python \n# Write a function to find the longest sublist in a list.\ndef find_longest_sublist_2(list1):\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return max_length\n# <func> # Python \n# Write a function to find the longest sublist in a list.\ndef find_longest_sublist_3(list1):\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return max_length\n# <func> # Python \n# Write a function to find the longest sublist in a list.\ndef find_longest_sublist_4(list1):\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return max_length\n# <func> # Python \n# Write a function to find the longest sublist in a list.\ndef find_longest_sublist_5(list1):\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1"], ["\n# <func> # Python \n# Write a function to filter odd numbers using lambda function.\ndef filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]\n\n# Test the function"], ["import re\r\n\n# <func> # Python \n# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n    return re.sub('(\\d{2})(\\d{2})(\\d{2})', r'\\1-\\2-\\3', dt)"], ["\n# <func> # Python \n# Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\n    n = len(my_list)\n    for I in range(n):\n        for j in range(i, n):\n            if my_list[j] < my_list[j - 1]:\n                my_list[j], my_list[j - 1] = my_list[j - 1], my_list[j]\n    return my_list\n# <func> # Python \n# Test the shell sort function.\ndef test_shell_sort():\n    my_list = [1, 2, 3, 4, 5]\n    sorted_list = shell_sort(my_list)\n    assert sorted_list == [1, 2, 3, 4, 5]\n    return\n# <func> # Python \n# Main function to run the test cases.\ndef main():\n    test_shell_sort()"], ["\n# <func> # Python \n# Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\n    return (test_tup1[0], test_tup1[1], test_tup2[0], test_tup2[1])\n\n# Test function\ntest_and_tuples(test_tup1, test_tup2)\ntest_and_tuples(test_tup1, test_tup2)\ntest_and_tuples(test_tup1, test_tup2)\ntest_and_tuples(test_tup1, test_tup2)\ntest_and_tuples(test_tup1, test_tup2)\ntest_and_tuples(test_tup1, test_tup2)\ntest_and_tuples(test_tup1, test_tup2)\ntest_and_tuples(test_tup1, test_tup2)\ntest_and_tuples(test_tup1, test_tup2)\ntest_and_tuples(test_tup1, test_tup2)\ntest_and_tuples(test_tup1, test_tup2)\ntest_and_tuples(test_tup1, test_tup2)\ntest_and_tuples(test_tup1, test_tup2)\ntest_and_tuples(test_tup1, test_tup2)\ntest_and_tuples(test_tup1, test_tup2)\ntest_and_tuples(test_tup1, test_tup2)\ntest_and_tuples(test_tup1, test_tup2)\ntest_and_tuples(test_tup1, test_tup2)\ntest_and_tuples(test_tup1, test_tup2)\ntest_and_tuples(test_tup1, test_tup2)\ntest_and_tuples(test_tup1, test_tup2)\ntest"], ["\n# <func> # Python \n# Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c):\n    x = (-b + math.sqrt(b**2 - 4 * a * c)) / (2 * a)\n    y = (-b - math.sqrt(b**2 - 4 * a * c)) / (2 * a)\n    return [x, y]\n\n# Test the function"], ["\n# <func> # Python \n# Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n    return list1.count(list2[0]) > 0 or list2.count(list1[0]) > 0\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\n    return (base1 + base2) / 2 + height / 2\n# <func> # Python \n# Find the median of a list.\ndef find_median(lst):\n    if len(lst) % 2 == 0:\n        return (lst[len(lst) // 2 - 1] + lst[len(lst) // 2]) / 2\n    else:\n        return lst[len(lst) // 2]\n# <func> # Python \n# Find the median of a list.\ndef find_median_list(lst):\n    if len(lst) % 2 == 0:\n        return (lst[len(lst) // 2 - 1] + lst[len(lst) // 2]) / 2\n    else:\n        return lst[len(lst) // 2]\n# <func> # Python \n# Find the median of a list.\ndef find_median_list_2(lst):\n    if len(lst) % 2 == 0:\n        return (lst[len(lst) // 2 - 1] + lst[len(lst) // 2]) / 2\n    else:\n        return lst[len(lst) // 2]\n# <func> # Python \n# Find the median of a list.\ndef find_median_list_3(lst):\n    if len(lst) % 2 == 0:\n        return (lst[len(lst) // 2 - 1] + lst[len(lst) // 2]) / 2\n    else:\n        return lst[len(lst) // 2]\n# <func> # Python \n# Find the median of a list.\ndef find_median_list_4(lst):\n    if len(lst) % 2 == 0:\n        return (lst[len(lst) // 2 - 1] + lst[len(lst) // 2]) / 2\n    else:\n        return lst[len(lst) // 2"], ["\n# <func> # Python \n# Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\n    return number > arr[0]\n# <func> # Python \n# Check whether the entered number is greater than the elements of the given array.\n# :param arr: array\n# :param number: number\n# :return: True if the number is greater than the first element of the array, False otherwise.\ncheck_greater_arr(arr, number):\n    return number > arr[0]\n# <func> # Python \n# Check whether the entered number is greater than the elements of the given array.\n# :param arr: array\n# :param number: number\n# :return: True if the number is greater than the first element of the array, False otherwise.\ncheck_greater_arr_1(arr, number):\n    return number > arr[0]\n# <func> # Python \n# Check whether the entered number is greater than the elements of the given array.\n# :param arr: array\n# :param number: number\n# :return: True if the number is greater than the first element of the array, False otherwise.\ncheck_greater_arr_2(arr, number):\n    return number > arr[0]\n# <func> # Python \n# Check whether the entered number is greater than the elements of the given array.\n# :param arr: array\n# :param number: number\n# :return: True if the number is greater than the first element of the array, False otherwise.\ncheck_greater_arr_3(arr, number):\n    return number > arr[0]\n# <func> # Python \n# Check whether the entered number is greater than the elements of the given array.\n# :param arr: array\n# :param number: number\n# :return: True if the number is greater than the first element of the array, False otherwise.\ncheck_greater_arr_4(arr, number):\n    return number > arr[0]\n# <func> # Python \n# Check whether the entered number is greater than the elements of the given array.\n# :param arr: array\n# :param number: number\n# :return"], ["import re\r\n\n# <func> # Python \n# Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n    return re.match(r'a\\b', text) is not None"], ["\n# <func> # Python \n# Write a python function to find the last digit of a given number.\ndef last_Digit(n):\n    return n % 10\n\n# Test the function"], ["\n# <func> # Python \n# Write a python function to print negative numbers in a list.\ndef neg_nos(list1):\n    for num in list1:\n        if num < 0:\n            print(num)\n\n# Example usage:\nneg_nos([-1, -2, -3])"], ["\n# <func> # Python \n# Write a function to remove odd characters in a string.\ndef remove_odd(str1):\n    return str1.replace(' ', '')\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to count bidirectional tuple pairs.\ndef count_bidirectional(test_list):\n    count = 0\n    for pair in test_list:\n        if pair[0] == pair[1]:\n            count += 1\n    return count\n# <func> # Python \n# Write a function to find the longest common subsequence.\ndef longest_common_subsequence(s1, s2):\n    if len(s1) == 0:\n        return s2\n    if len(s2) == 0:\n        return s1\n    if s1[0] == s2[0]:\n        return longest_common_subsequence(s1[1:], s2[1:])\n    else:\n        return s1[0] + longest_common_subsequence(s1[1:], s2[1:])\n# <func> # Python \n# Write a function to find the longest common subsequence.\ndef longest_common_subsequence_recursive(s1, s2):\n    if len(s1) == 0:\n        return s2\n    if len(s2) == 0:\n        return s1\n    if s1[0] == s2[0]:\n        return longest_common_subsequence_recursive(s1[1:], s2[1:])\n    else:\n        return s1[0] + longest_common_subsequence_recursive(s1[1:], s2[1:])\n# <func> # Python \n# Write a function to find the longest common subsequence.\ndef longest_common_subsequence_iterative(s1, s2):\n    if len(s1) == 0:\n        return s2\n    if len(s2) == 0:\n        return s1\n    if s1[0] == s2[0]:\n        return longest_common_subsequence_iterative(s1[1:], s2[1:])\n    else:\n        return s1[0] + longest_common_subsequence_iterative(s1[1:], s2[1:])\n# <func> # Python "], ["\n# <func> # Python \n# Write a function to convert a list of multiple integers into a single integer.\ndef multiple_to_single(L):\n    return sum(L)\n# Test the function"], ["import re\r\n\n# <func> # Python \n# Write a function to find all adverbs and their positions in a given sentence.\ndef find_adverb_position(text):\n    adverbs = []\n    for word in re.findall('[a-z]+', text):\n        if word.lower() in adverbs:\n            adverbs.append(word.lower())\r\n        else:\r\n            adverbs.append(word.lower())\r\n    return adverbs\n\n# <func> # Python \n# Write a function to find all nouns and their positions in a given sentence.\ndef find_noun_position(text):\n    nouns = []\n    for word in re.findall('[a-z]+', text):\n        if word.lower() in nouns:\n            nouns.append(word.lower())\r\n        else:\r\n            nouns.append(word.lower())\r\n    return nouns\n\n# <func> # Python \n# Write a function to find all verbs and their positions in a given sentence.\ndef find_verb_position(text):\n    verbs = []\n    for word in re.findall('[a-z]+', text):\n        if word.lower() in verbs:\n            verbs.append(word.lower())\r\n        else:\r\n            verbs.append(word.lower())\r\n    return verbs\n\n# <func> # Python \n# Write a function to find all adjectives and their positions in a given sentence.\ndef find_adjective_position(text):\n    adjectives = []\n    for word in re.findall('[a-z]+', text):\n        if word.lower() in adjectives:\r\n            adjectives.append(word.lower())\r\n        else:\r\n            adjectives.append(word.lower())\r\n    return adjectives\n\n# <func> # Python \n# Write a function to find all nouns and their positions in a given sentence.\ndef find_noun_position(text):\n    nouns = []\n    for word in re.findall('[a-z]+',"], ["\n# <func> # Python \n# Write a function to find the surface area of a cube.\ndef surfacearea_cube(l):\n    return l * l * l * 3.14159\n# <func> # Python \n# Write a function to find the volume of a cube.\ndef volume_cube(l):\n    return l * l * l * 3.14159\n# <func> # Python \n# Write a function to find the surface area and volume of a cube.\ndef surface_volume_cube(l):\n    return surfacearea_cube(l) * volume_cube(l)\n# <func> # Python \n# Write a function to find the surface area and volume of a cube.\ndef surface_volume_cube(l):\n    return surfacearea_cube(l) * volume_cube(l)\n# <func> # Python \n# Write a function to find the surface area and volume of a cube.\ndef surface_volume_cube(l):\n    return surfacearea_cube(l) * volume_cube(l)\n# <func> # Python \n# Write a function to find the surface area and volume of a cube.\ndef surface_volume_cube(l):\n    return surfacearea_cube(l) * volume_cube(l)\n# <func> # Python \n# Write a function to find the surface area and volume of a cube.\ndef surface_volume_cube(l):\n    return surfacearea_cube(l) * volume_cube(l)\n# <func> # Python \n# Write a function to find the surface area and volume of a cube.\ndef surface_volume_cube(l):\n    return surfacearea_cube(l) * volume_cube(l)\n# <func> # Python \n# Write a function to find the surface area and volume of a cube.\ndef surface_volume_cube(l):\n    return surfacearea_cube(l) * volume_cube(l)\n# <func> # Python \n# Write a function to find the surface area and volume of a cube.\ndef surface_volume_cube(l):\n"], ["from array import array\r\n\n# <func> # Python \n# Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n\n# <func> # Python \n# Write a function to find the sum of positive numbers in an array of integers.\ndef positive_sum(nums):\n    sum = 0\n    for num in nums:\n        if num > 0:\n            sum += num\n    return sum\n\n# <func> # Python \n# Write a function to find the product of positive numbers in an array of integers.\ndef positive_product(nums):\n    product = 1\n    for num in nums:\n        if num > 0:\n            product *= num\n    return product\n\n# <func> # Python \n# Write a function to find the average of positive numbers in an array of integers.\ndef positive_avg(nums):\n    sum = 0\n    for num in nums:\n        if num > 0:\n            sum += num\n    return sum / len(nums)\n\n# <func> # Python \n# Write a function to find the median of positive numbers in an array of integers.\ndef positive_median(nums):\n    if len(nums) % 2 == 0:\n        return (nums[len(nums) // 2 - 1] + nums[len(nums) // 2]) / 2\n    else:\n        return nums[len(nums) // 2]\n\n# <func> # Python \n# Write a function to find the maximum of positive numbers in an array of integers.\ndef positive_max(nums):\n    max_num = 0\n    for num in nums:\n        if num > 0:\n            if num > max_num:\n                max_num = num\n    return max_num\n\n# <func> # Python \n# Write a function to find the minimum of positive numbers in an array of integers.\ndef positive_min(num"], ["\n# <func> # Python \n# Write a python function to find the largest negative number from the given list.\ndef largest_neg(list1):\n    return max(list1) if list1 else 0\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n    return [tuple(t) for t in zip(*[x for x in test_list if len(x) == K])]"], ["\n# <func> # Python \n# Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n    return tuple(map(lambda x: x * 2, test_tup1) + tuple(test_tup2))\n\n# Test function"], ["from collections import Counter \r\n\n# <func> # Python \n# Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst):\n    count = Counter(lst)\n    return count[tup]\n\n# <func> # Python \n# Write a python function to find the maximum element in a list.\ndef max_element(lst):\n    return max(lst)\n\n# <func> # Python \n# Write a python function to find the minimum element in a list.\ndef min_element(lst):\n    return min(lst)"], ["\n# <func> # Python \n# Write a function to find cubes of individual elements in a list using lambda function.\ndef cube_nums(nums):\n    return [num**3 for num in nums]\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n):\n    return sum(perrin_numbers(n))\n\n# Test the function"], ["\n# <func> # Python \n# Write a python function to check whether the triangle is valid or not if 3 points are given.\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    if x1 == x2 and y1 == y2 and x3 == x2 and y3 == y2:\n        return True\n    else:\n        return False\n# <func> # Python \n# Test the function with the given points.\n# \n# >>> check_Triangle(1,2,3,4,5,6)\n# True\n# >>> check_Triangle(1,2,3,4,5,6)\n# False\n# >>> check_Triangle(1,2,3,4,5,6)\n# False\n# >>> check_Triangle(1,2,3,4,5,6)\n# False\n# >>> check_Triangle(1,2,3,4,5,6)\n# False\n# >>> check_Triangle(1,2,3,4,5,6)\n# False\n# >>> check_Triangle(1,2,3,4,5,6)\n# False\n# >>> check_Triangle(1,2,3,4,5,6)\n# False\n# >>> check_Triangle(1,2,3,4,5,6)\n# False\n# >>> check_Triangle(1,2,3,4,5,6)\n# False\n# >>> check_Triangle(1,2,3,4,5,6)\n# False\n# >>> check_Triangle(1,2,3,4,5,6)\n# False\n# >>> check_Triangle(1,2,3,4,5,6)\n# False\n# >>> check_Triangle(1,2,3,4,5,6)\n# False\n# >>> check_Triangle(1,2,3,4,5,6)\n# False\n# >>> check_Triangle(1,2,3,4,5,6)\n# False\n# >>> check_Triangle(1,2,3,4,5,6)\n# False\n# >>> check"], ["\n# <func> # Python \n# Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n    return str[0:l]\n# <func> # Python \n# Write a function to extract specified size of strings from a give list of string values.\ndef extract_string_list(str, l):\n    return [str[0:l] for i in range(len(str))]\n# <func> # Python \n# Write a function to extract specified size of strings from a give list of string values.\ndef extract_string_list_2(str, l):\n    return [str[0:l] for i in range(len(str))]\n# <func> # Python \n# Write a function to extract specified size of strings from a give list of string values.\ndef extract_string_list_3(str, l):\n    return [str[0:l] for i in range(len(str))]\n# <func> # Python \n# Write a function to extract specified size of strings from a give list of string values.\ndef extract_string_list_4(str, l):\n    return [str[0:l] for i in range(len(str))]\n# <func> # Python \n# Write a function to extract specified size of strings from a give list of string values.\ndef extract_string_list_5(str, l):\n    return [str[0:l] for i in range(len(str))]\n# <func> # Python \n# Write a function to extract specified size of strings from a give list of string values.\ndef extract_string_list_6(str, l):\n    return [str[0:l] for i in range(len(str))]\n# <func> # Python \n# Write a function to extract specified size of strings from a give list of string values.\ndef extract_string_list_7(str, l):\n    return [str[0:l] for i in range(len(str))]\n# <func> # Python \n# Write a function to extract specified size of strings from a give list of string values.\ndef extract_string_list_8(str, l):\n    return [str"], ["import re\r\n\n# <func> # Python \n# Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)"], ["\n# <func> # Python \n# Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount):\n    if sale_amount < 0:\n        return None\n    else:\n        return sale_amount - actual_cost\n# <func> # Python \n# Calculate the total cost of the product.\ndef total_cost(product):\n    return product['price'] * product['quantity']\n# <func> # Python \n# Calculate the total cost of the product.\ndef total_cost_with_tax(product):\n    return total_cost(product) + product['tax']\n# <func> # Python \n# Calculate the total cost of the product.\ndef total_cost_with_discount(product):\n    return total_cost(product) - product['discount']\n# <func> # Python \n# Calculate the total cost of the product.\ndef total_cost_with_discount_and_tax(product):\n    return total_cost(product) - product['discount'] - product['tax']\n# <func> # Python \n# Calculate the total cost of the product.\ndef total_cost_with_discount_and_tax_with_coupon(product):\n    return total_cost(product) - product['discount'] - product['tax'] - product['coupon_discount']\n# <func> # Python \n# Calculate the total cost of the product.\ndef total_cost_with_discount_and_coupon(product):\n    return total_cost(product) - product['discount'] - product['coupon_discount'] - product['coupon_tax']\n# <func> # Python \n# Calculate the total cost of the product.\ndef total_cost_with_discount_and_coupon_with_tax(product):\n    return total_cost(product) - product['discount'] - product['coupon_discount'] - product['coupon_tax'] - product['coupon_coupon_discount']\n# <func> # Python \n# Calculate the total cost of the product.\ndef total_cost_with_discount"], ["import math \r\n\n# <func> # Python \n# Write a python function to find the sum of even factors of a number.\ndef sumofFactors(n):\n    sum = 0\n    for I in range(2, int(math.sqrt(n))+1):\n        if n % I == 0:\r\n            sum += i\r\n    return sum"], ["import re\r\n\n# <func> # Python \n# Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n    return re.search('z', text) is not None"], ["\n# <func> # Python \n# Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n    if monthnum2 == 12:\n        return True\n    elif monthnum2 == 1:\n        return False\n    elif monthnum2 == 2:\n        if monthnum2 == 2:\n            return True\n        elif monthnum2 == 29:\n            return True\n        else:\n            return False\n    else:\n        return False\n# <func> # Python \n# Write a function to check whether the given year is a leap year or not.\ndef check_year_leap(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n# <func> # Python \n# Write a function to check whether the given month is a leap month or not.\ndef check_month_leap(month):\n    if month == 1:\n        if month == 2:\n            if month == 29:\n                return True\n            else:\n                return False\n        elif month == 3:\n            if month == 29:\n                return True\n            else:\n                return False\n        elif month == 4:\n            if month == 30:\n                return True\n            else:\n                return False\n        elif month == 5:\n            if month == 31:\n                return True\n            else:\n                return False\n        elif month == 6:\n            if month == 30:\n                return True\n            else:\n                return False\n        elif month == 7:\n            if month == 31:\n                return True\n            else:\n                return False\n        elif month == 8:\n            if month == 31:\n                return True\n            else:\n                return False\n        elif month == 9:\n            if month == 30:\n                return True\n            else:\n                return False\n        elif"], ["\n# <func> # Python \n# Write a function to reverse strings in a given list of string values.\ndef reverse_string_list(stringlist):\n    return [stringlist[len(stringlist) - 1] + stringlist[0] for stringlist in stringlist]\n\n# Test the function"], ["\n# <func> # Python \n# Write a python function to find the sublist having minimum length.\ndef Find_Min(lst):\n    return min(lst)"], ["\n# <func> # Python \n# Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n    return l * b\n# Test the function with some examples."], ["import re\r\n\n# <func> # Python \n# Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n    return re.sub(r'[A-Z]', '', str1)"], ["\n# <func> # Python \n# Write a python function to get the first element of each sublist.\ndef Extract(lst):\n    return lst[0]\n\n# Test the function.\nlst = [1, 2, 3, 4, 5]"], ["\n# <func> # Python \n# Write a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n    return len(str.upper())\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\n    if len(list1) == 0:\n        return []\n    else:\n        return combinations_list(list1[1:]) + [list1]\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        max_product = max(max_product, arr[i] * (i + 1))\n    return max_product\n\n# Test cases"], ["\n# <func> # Python \n# Write a function to check if all values are same in a dictionary.\ndef check_value(dict, n):\n    return all(map(lambda x: x == n, dict.values()))\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"], ["\n# <func> # Python \n# Write a function to find the peak element in the given array.\ndef find_peak_util(arr, low, high, n):\n    for i in range(low, high):\n        if arr[i] > arr[i + 1]:\n            return i\n    return -1\n# <func> # Python \n# Find the peak element in the given array.\ndef find_peak(arr, low, high, n):\n    return find_peak_util(arr, low, high, n)\n# <func> # Python \n# Find the peak element in the given array.\ndef find_peak_1(arr, low, high, n):\n    for i in range(low, high):\n        if arr[i] > arr[i + 1]:\n            return i\n    return -1\n# <func> # Python \n# Find the peak element in the given array.\ndef find_peak_2(arr, low, high, n):\n    for i in range(low, high):\n        if arr[i] > arr[i + 1]:\n            return i\n    return -1\n# <func> # Python \n# Find the peak element in the given array.\ndef find_peak_3(arr, low, high, n):\n    for i in range(low, high):\n        if arr[i] > arr[i + 1]:\n            return i\n    return -1\n# <func> # Python \n# Find the peak element in the given array.\ndef find_peak_4(arr, low, high, n):\n    for i in range(low, high):\n        if arr[i] > arr[i + 1]:\n            return i\n    return -1\n# <func> # Python \n# Find the peak element in the given array.\ndef find_peak_5(arr, low, high, n):\n    for i in range(low, high):\n        if arr[i] > arr[i + 1]:\n            return i\n    return -1\n# <func> # Python \n# Find the peak element in the given array.\ndef find_peak_6("], ["\n# <func> # Python \n# Write a python function to convert decimal number to octal number.\ndef decimal_to_Octal(deciNum):\n    return str(int(deciNum) * 8)\n# <func> # Python \n# Write a python function to convert octal number to decimal number.\ndef octal_to_Decimal(octNum):\n    return oct(int(octNum))\n# <func> # Python \n# Write a python function to convert hexadecimal number to decimal number.\ndef hex_to_Decimal(hexNum):\n    return int(hexNum, 16)\n# <func> # Python \n# Write a python function to convert decimal number to hexadecimal number.\ndef Decimal_to_Hex(decNum):\n    return hex(decNum)\n# <func> # Python \n# Write a python function to convert hexadecimal number to decimal number.\ndef Hex_to_Decimal(hexNum):\n    return int(hexNum, 16)\n# <func> # Python \n# Write a python function to convert decimal number to binary number.\ndef Decimal_to_Binary(decNum):\n    return bin(decNum)[2:]\n# <func> # Python \n# Write a python function to convert binary number to decimal number.\ndef Binary_to_Decimal(binNum):\n    return int(binNum, 2)\n# <func> # Python \n# Write a python function to convert decimal number to binary number.\ndef Decimal_to_Binary(decNum):\n    return bin(decNum)[2:]\n# <func> # Python \n# Write a python function to convert binary number to decimal number.\ndef Binary_to_Decimal(binNum):\n    return int(binNum, 2)\n# <func> # Python \n# Write a python function to convert decimal number to binary number.\ndef Decimal_to_Binary(decNum):\n    return bin(decNum)[2:]\n# <func> # Python \n# Write a python function to convert binary number to decimal number.\ndef Binary_to_Decimal(binNum):\n    return int(binNum, 2)\n# <func> # Python"], ["\n# <func> # Python \n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ):\n    max_prod = 1\n    for I in range(n):\n        for j in range(i+1, n):\n            max_prod = max(max_prod, arr[i] * arr[j])\n    return max_prod\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nn = 3"], ["\n# <func> # Python \n# Write a function to find the maximum profit earned from a maximum of k stock transactions\ndef max_profit(price, k):\n    if k == 0:\n        return 0\n    elif k == 1:\n        return price[0]\n    else:\n        return max(price[0:k], price[k:]) - price[0]\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find the pairwise addition of the elements of the given tuples.\ndef add_pairwise(test_tup):\n    return tuple(map(lambda x, y: x + y, test_tup))\n# Test the function\ntest_tup = (1, 2, 3)"], ["\n# <func> # Python \n# Write a python function to find remainder of array multiplication divided by n.\ndef find_remainder(arr, lens, n):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] * n + arr[1]\n    if len(arr) == 3:\n        return arr[0] * n + arr[1] + arr[2]\n    if len(arr) == 4:\n        return arr[0] * n + arr[1] + arr[2] + arr[3]\n    if len(arr) == 5:\n        return arr[0] * n + arr[1] + arr[2] + arr[3] + arr[4]\n    if len(arr) == 6:\n        return arr[0] * n + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\n    if len(arr) == 7:\n        return arr[0] * n + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\n    if len(arr) == 8:\n        return arr[0] * n + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\n    if len(arr) == 9:\n        return arr[0] * n + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\n    if len(arr) == 10:\n        return arr[0] * n + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]\n    if len(arr) == 11:\n        return arr[0] * n + arr[1] + arr[2]"], ["\n# <func> # Python \n# Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l):\n    return True if l[0] == l[-1] else False\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n    return tuple(set(test_list1) & set(test_list2))"], ["\n# <func> # Python \n# Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n    return str1.replace(ch,newch)\n# Example usage:"], ["from collections import Counter\r\n\n# <func> # Python \n# Write a function to sort counter by value.\ndef sort_counter(dict1):\n    return Counter(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n\n# <func> # Python \n# Write a function to find the frequency of a given word in a list.\ndef find_word_frequency(word, words):\n    return Counter(word for word in words if word.lower() == word).most_common(1)[0][0]\n\n# <func> # Python \n# Write a function to find the frequency of a given word in a list.\ndef find_word_frequency_2(word, words):\n    return Counter(word for word in words if word.lower() == word).most_common(1)[0][0]\n\n# <func> # Python \n# Write a function to find the frequency of a given word in a list.\ndef find_word_frequency_3(word, words):\n    return Counter(word for word in words if word.lower() == word).most_common(1)[0][0]\n\n# <func> # Python \n# Write a function to find the frequency of a given word in a list.\ndef find_word_frequency_4(word, words):\n    return Counter(word for word in words if word.lower() == word).most_common(1)[0][0]\n\n# <func> # Python \n# Write a function to find the frequency of a given word in a list.\ndef find_word_frequency_5(word, words):\n    return Counter(word for word in words if word.lower() == word).most_common(1)[0][0]\n\n# <func> # Python \n# Write a function to find the frequency of a given word in a list.\ndef find_word_frequency_6(word, words):\n    return Counter(word for word in words if word.lower() == word).most_common(1)[0][0]\n\n# <func> # Python \n# Write a function to find the frequency of a given word in a list.\ndef find_word_"], ["\n# <func> # Python \n# Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\n    max_num = nums[0]\n    min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num + min_num\n# <func> # Python \n# Write a python function to find the sum of the largest and smallest value in a given array.\n# \n# Args:\n#     nums (list): A list of numbers.\n# \n# Returns:\n#     int: The sum of the largest and smallest value in the given array.\nbig_sum(nums):\n    return big_sum(nums) + big_sum(nums)\n# <func> # Python \n# Write a python function to find the sum of the largest and smallest value in a given array.\n# \n# Args:\n#     nums (list): A list of numbers.\n# \n# Returns:\n#     int: The sum of the largest and smallest value in the given array.\nbig_sum(nums):\n    return big_sum(nums) + big_sum(nums)"], ["\n# <func> # Python \n# Write a python function to convert the given string to lower case.\ndef is_lower(string):\n    return string.lower() == string.upper()\n\n# Test the function"], ["import re\r\n\n# <func> # Python \n# Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n    return re.sub('[a-z]', '', str1)\n\n# Test the function."], ["\n# <func> # Python \n# Write a python function to find the first digit of a given number.\ndef first_Digit(n):\n    return n % 10\n# <func> # Python \n# Find the first digit of a given number.\nfirst_Digit(123456789)\nfirst_Digit(1234567890)\nfirst_Digit(12345678901)\nfirst_Digit(123456789012)\nfirst_Digit(1234567890123)\nfirst_Digit(12345678901234)\nfirst_Digit(123456789012345)\nfirst_Digit(1234567890123456)\nfirst_Digit(12345678901234567)\nfirst_Digit(123456789012345678)\nfirst_Digit(1234567890123456789)\nfirst_Digit(12345678901234567890)\nfirst_Digit(123456789012345678901)\nfirst_Digit(1234567890123456789012)\nfirst_Digit(12345678901234567890123)\nfirst_Digit(123456789012345678901234)\nfirst_Digit(1234567890123456789012345)\nfirst_Digit(12345678901234567890123456)\nfirst_Digit(123"], ["\n# <func> # Python \n# Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\n    max_occuring_char = ''\n    for char in str1:\n        if char in max_occuring_char:\n            max_occuring_char = max(max_occuring_char, char)\n        else:\n            max_occuring_char = char\n    return max_occuring_char\n# <func> # Python \n# Write a python function to find the maximum occurring character in a given string.\n# \n# Args:\n#     str1 (str): A string to be searched.\n# \n# Returns:\n#     str: The maximum occurring character in the given string.\nget_max_occuring_char(str1):\n    return get_max_occuring_char(str1.lower())"], ["\n# <func> # Python \n# Write a function to determine if there is a subset of the given set with sum equal to the given sum.\ndef is_subset_sum(set, n, sum):\n    return sum == sum(set)\n\n# Example usage:"], ["import re \r\n\n# <func> # Python \n# Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text):\n    return re.findall(r'[A-Z]', text)"], ["\n# <func> # Python \n# Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x):\n    return 1"], ["\n# <func> # Python \n# Write a function to remove the matching tuples from the given two tuples.\ndef remove_matching_tuple(test_list1, test_list2):\n    return [tuple(x) for x in test_list1 if x not in test_list2]"], ["\n# <func> # Python \n# Write a function to find the largest palindromic number in the given array.\ndef is_palindrome(n):\n    if n == 0:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_palindrome(n // 2) and is_palindrome(n * 10 % 20)\n\n# Test cases"], ["\n# <func> # Python \n# Write a function to compute binomial probability for the given number.\ndef nCr(n, r):\n    return binom(n, r)\n\n# Test function"], ["\n# <func> # Python \n# Write a function to sort a list of tuples in increasing order by the last element in each tuple.\ndef sort_tuple(tup):\n    return tuple(sorted(tup, key=lambda x: x[1]))\n# Example usage:\ntup = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]"], ["import math\r\n\n# <func> # Python \n# Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n    return math.pi * a * a * a * a * a * a"], ["\n# <func> # Python \n# Write a python function to find the frequency of the largest value in a given array.\ndef frequency_Of_Largest(n,arr):\n    freq = {}\n    for i in range(n):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n    return freq\n# <func> # Python \n# Write a python function to find the frequency of the largest value in a given array.\n# \n# Parameters:\n# ----------\n# n : int\n#     The size of the array\n# arr : list\n#     The array to be searched\n# \n# Returns:\n# --------\n# freq : dict\n#     The frequency of the largest value in the array\n# \n# Example:\n# >>> frequency_Of_Largest(5, [1, 2, 3, 4, 5])\n# {'1': 2, '2': 1, '3': 1, '4': 1, '5': 1}\nfrequency_Of_Largest(n, arr):\n    freq = {}\n    for i in range(n):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n    return freq\n# <func> # Python \n# Write a python function to find the frequency of the largest value in a given array.\n# \n# Parameters:\n# ----------\n# n : int\n#     The size of the array\n# arr : list\n#     The array to be searched\n# \n# Returns:\n# --------\n# freq : dict\n#     The frequency of the largest value in the array\n# \n# Example:\n# >>> frequency_Of_Largest(5, [1, 2, 3, 4, 5])\n# {'1': 2, '2': 1, '3': 1, '4': 1, '5': 1}\nfrequency_Of_Largest(n, arr):\n    freq = {}\n    for i in range(n):\n        freq[arr[i]] = freq"], ["\n# <func> # Python \n# Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\n    return [pair for pair in test_list if pair[0] == pair[1]]"], ["import math\r\n\n# <func> # Python \n# Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\n    return a * (1 - math.pow(r, n)) / (1 - math.pow(r, n - 1))\n\n# <func> # Python \n# Write a function to find the sum of geometric progression series.\ndef sum_gp_recursive(a,n,r):\r\n    return a * (1 - math.pow(r, n)) / (1 - math.pow(r, n - 1)) + sum_gp(a, n, r)"], ["\n# <func> # Python \n# Write a function to search an element in the given array by using binary search.\ndef binary_search(item_list,item):\n    low = 0\n    high = len(item_list) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if item_list[mid] == item:\n            return mid\n        elif item_list[mid] < item:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n# <func> # Python \n# Write a function to find the length of a given array.\ndef length(arr):\n    return len(arr)\n# <func> # Python \n# Write a function to find the maximum element in an array.\ndef max_element(arr):\n    max_element = arr[0]\n    for element in arr:\n        if element > max_element:\n            max_element = element\n    return max_element\n# <func> # Python \n# Write a function to find the minimum element in an array.\ndef min_element(arr):\n    min_element = arr[0]\n    for element in arr:\n        if element < min_element:\n            min_element = element\n    return min_element\n# <func> # Python \n# Write a function to find the sum of all elements in an array.\ndef sum_elements(arr):\n    sum = 0\n    for element in arr:\n        sum += element\n    return sum\n# <func> # Python \n# Write a function to find the average of all elements in an array.\ndef average_elements(arr):\n    sum = sum_elements(arr)\n    return sum / len(arr)\n# <func> # Python \n# Write a function to find the median of an array.\ndef median(arr):\n    if len(arr) % 2 == 0:\n        return arr[len(arr) // 2 - 1]\n    else:\n        return arr[len(arr) // 2]\n# <func> # Python \n# Write a function to find the mode of an array.\ndef mode(arr):\n   "], ["import math\r\n\n# <func> # Python \n# Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    x = []\n    y = []\n    for i in range(starty, endy):\n        for j in range(startx, endx):\n            x.append(i)\n            y.append(j)\n    return x, y\n\n# <func> # Python \n# Calculate the area of a hexagon.\ndef calculate_area(x, y):\n    return math.sqrt(sum(x[i] ** 2 for i in range(len(x))) + sum(y[j] ** 2 for j in range(len(y))))"], ["\n# <func> # Python \n# Write a function to convert the given binary tuple to integer.\ndef binary_to_integer(test_tup):\n    return test_tup[0] + test_tup[1] * 2\n\n# Test function.\ntest_case = (1, 1)"], ["import re\r\n\n# <func> # Python \n# Write a function to remove lowercase substrings from a given string by using regex.\ndef remove_lowercase(str1):\n    return re.sub(r'[a-z]', '', str1)\n\n# <func> # Python \n# Write a function to remove all non-alphanumeric characters from a given string.\ndef remove_non_alphanumeric(str1):\n    return re.sub(r'[^a-zA-Z0-9]', '', str1)\n\n# <func> # Python \n# Write a function to remove all non-alphanumeric characters from a given string.\ndef remove_non_alphanumeric_lowercase(str1):\n    return re.sub(r'[^a-z]', '', str1)\n\n# <func> # Python \n# Write a function to remove all non-alphanumeric characters from a given string.\ndef remove_non_alphanumeric_uppercase(str1):\n    return re.sub(r'[^A-Z]', '', str1)\n\n# <func> # Python \n# Write a function to remove all non-alphanumeric characters from a given string.\ndef remove_non_alphanumeric_both(str1):\n    return re.sub(r'[^a-zA-Z0-9]', '', str1)\n\n# <func> # Python \n# Write a function to remove all non-alphanumeric characters from a given string.\ndef remove_non_alphanumeric_both_lowercase(str1):\n    return re.sub(r'[^a-z]', '', str1)\n\n# <func> # Python \n# Write a function to remove all non-alphanumeric characters from a given string.\ndef remove_non_alphanumeric_both_uppercase(str1):\n    return re.sub(r'[^A-Z]', '', str1)"], ["import heapq as hq\r\n\n# <func> # Python \n# Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_smallest(nums,n):\n    heapq.heapify(nums,key=lambda x:x[1])\n    return heapq.heappop(nums)[1]\n\n# <func> # Python \n# Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_largest(nums,n):\r\n    heapq.heapify(nums,key=lambda x:x[1])\r\n    return heapq.heappop(nums)[1]"], ["import math\r\n\n# <func> # Python \n# Write a function to find the surface area of a cone.\ndef surfacearea_cone(r,h):\n    return math.pi * r * h"], ["\n# <func> # Python \n# Write a python function to find gcd of two positive integers.\ndef gcd(x, y):\n    while y != 0:\n        x, y = y, x % y\n    return x\n\n# Example usage:"], ["\n# <func> # Python \n# Write a function to find the diameter of a circle.\ndef diameter_circle(r):\n    return math.sqrt(r**2 - 2*r*r)\n\n# Test the function."], ["\n# <func> # Python \n# Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\n    return ''.join(list)\n\n# Test the function"], ["\n# <func> # Python \n# Write a python function to find common divisor between two numbers in a given pair.\ndef ngcd(x,y):\n    while y != 0:\n        x, y = y, x % y\n    return x\n\n# Example usage:"], ["\n# <func> # Python \n# Write a python function to find remainder of two numbers.\ndef find(n,m):\n    return n % m\n\n# Test function"], ["\n# <func> # Python \n# Write a function to add consecutive numbers of a given list.\ndef add_consecutive_nums(nums):\n    \"\"\"\n    :param nums: a list of numbers\n    :return: a list of numbers\n    \"\"\"\n    return [num for num in nums if num not in nums[1:]] + nums[1:]\n\n# Testing"], ["\n# <func> # Python \n# Write a python function to find the cube sum of first n natural numbers.\ndef sum_Of_Series(n):\n    sum = 0\n    for I in range(1, n+1):\n        sum += i\n    return sum\n# <func> # Python \n# Test the function with some sample inputs.\ndef test_sum_Of_Series():\n    assert sum_Of_Series(10) == 120\n    assert sum_Of_Series(100) == 1200\n    assert sum_Of_Series(1000) == 12000\n    assert sum_Of_Series(10000) == 120000\n    assert sum_Of_Series(100000) == 1200000\n    assert sum_Of_Series(1000000) == 12000000\n    return\ntest_sum_Of_Series()"], ["\n# <func> # Python \n# Write a function to move all zeroes to the end of the given array.\ndef re_order(A):\n    return A[::-1]\n# <func> # Python \n# Write a function to find the longest common subsequence between two given strings.\ndef lcs(s1, s2):\n    if len(s1) == 0:\n        return s2\n    if len(s2) == 0:\n        return s1\n    if s1[0] == s2[0]:\n        return lcs(s1[1:], s2[1:])\n    else:\n        return lcs(s1[1:], s2[1:]) + s1[0]\n# <func> # Python \n# Write a function to find the longest common subsequence between two given strings.\ndef lcs_longest(s1, s2):\n    return lcs(s1, s2)\n# <func> # Python \n# Write a function to find the longest common subsequence between two given strings.\ndef lcs_longest_reverse(s1, s2):\n    return lcs(s2, s1)\n# <func> # Python \n# Write a function to find the longest common subsequence between two given strings.\ndef lcs_longest_reverse_reverse(s1, s2):\n    return lcs(s2, s1)\n# <func> # Python \n# Write a function to find the longest common subsequence between two given strings.\ndef lcs_longest_reverse_reverse_reverse(s1, s2):\n    return lcs(s2, s1)\n# <func> # Python \n# Write a function to find the longest common subsequence between two given strings.\ndef lcs_longest_reverse_reverse_reverse_reverse(s1, s2):\n    return lcs(s2, s1)\n# <func> # Python \n# Write a function to find the longest common subsequence between two given strings.\ndef lcs_longest_reverse_reverse_reverse_reverse_reverse(s1, s2):\n    return lcs(s2, s1)\n"], ["\n# <func> # Python \n# Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k):\n    return (n - k + 1) * (n - k) * (n - k + 2) * (n - k + 3) * (n - k + 4) * (n - k + 5) * (n - k + 6) * (n - k + 7) * (n - k + 8) * (n - k + 9) * (n - k + 10) * (n - k + 11) * (n - k + 12) * (n - k + 13) * (n - k + 14) * (n - k + 15) * (n - k + 16) * (n - k + 17) * (n - k + 18) * (n - k + 19) * (n - k + 20) * (n - k + 21) * (n - k + 22) * (n - k + 23) * (n - k + 24) * (n - k + 25) * (n - k + 26) * (n - k + 27) * (n - k + 28) * (n - k + 29) * (n - k + 30) * (n - k + 31) * (n - k + 32) * (n - k + 33) * (n - k + 34) * (n - k + 35) * (n - k + 36) * (n - k + 37) * (n - k + 38) * (n - k + 39) * (n - k + 40) * (n - k + 41) * (n - k + 42) * (n - k + 43) * (n - k + 44) * (n - k + 45) * (n - k + 46) * (n - k + 47) * ("], ["\n# <func> # Python \n# Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n    return [word for word in list1 if word not in removewords]\n# Example usage:\nwords = ['apple', 'banana', 'cherry', 'pear', 'orange']"], ["\n# <func> # Python \n# Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\n    return sorted(l1) == sorted(l2)"], ["\n# <func> # Python \n# Write a python function to find the average of odd numbers till a given odd number.\ndef average_Odd(n):\n    return sum(i for i in range(1, n + 1) if i % 2 == 1) / n\n\n# Testing the function"], ["\n# <func> # Python \n# Write a function to find the number of subsequences having product smaller than k for the given non negative array.\ndef no_of_subsequences(arr, k):\n    n = len(arr)\n    res = 0\n    for I in range(n):\n        for j in range(i+1, n):\n            if arr[i] * arr[j] < k:\n                res += 1\n    return res\n# Test cases"]]