[["//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n  var min = numbers[0];\n  var max = numbers[numbers.length - 1];\n  var min_index = numbers.indexOf(min);\n  var max_index = numbers.indexOf(max);\n  var min_index_2 = numbers.indexOf(min, max_index + 1);\n  var max_index_2 = numbers.indexOf(max, min_index + 1);\n  var min_index_3 = numbers.indexOf(min, max_index + 1, max_index_2 + 1);\n  var max_index_3 = numbers.indexOf(max, min_index_2 + 1, max_index_2 + 1);\n  var min_index_4 = numbers.indexOf(min, max_index_2 + 1, max_index_3 + 1);\n  var max_index_4 = numbers.indexOf(max, min_index_3 + 1, max_index_3 + 1);\n  var min_index_5 = numbers.indexOf(min, max_index_3 + 1, max_index_4 + 1);\n  var max_index_5 = numbers.indexOf(max, min_index_4 + 1, max_index_4 + 1);\n  var min_index_6 = numbers.indexOf(min, max_index_4 + 1, max_index_5 + 1);\n  var max_index_6 = numbers.indexOf(max, min_index_5 + 1, max_index_5 + 1);\n  var min_index_7 = numbers.indexOf(min, max_index_5 + 1, max_index_6 + 1);\n  var max_index_7 = numbers."], ["//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  const groups = [];\n  const open_braces = [];\n  const close_braces = [];\n  const open_parens = [];\n  const close_parens = [];\n  const open_curly_braces = [];\n  const close_curly_braces = [];\n  const open_square_braces = [];\n  const close_square_braces = [];\n  const open_angle_braces = [];\n  const close_angle_braces = [];\n  const open_curly_braces_with_parens = [];\n  const close_curly_braces_with_parens = [];\n  const open_square_braces_with_parens = [];\n  const close_square_braces_with_parens = [];\n  const open_angle_braces_with_parens = [];\n  const close_angle_braces_with_parens = [];\n  const open_curly_braces_with_parens_with_braces = [];\n  const close_curly_braces_with_parens_with_braces = [];\n  const open_square_braces_with_parens_with_braces = [];\n  const close_square_braces_with_parens_with_braces = [];\n  const open_angle_braces_with_parens_with_braces = [];\n  const close_angle_braces_with_parens_with_braces = [];\n  const open_curly_braces_with_parens_with_braces_with_braces = [];\n  const close_curly_braces_with_parens_with_braces_with_braces = [];\n  const open_"], ["//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n  var decimal = number.toString().split('.')[1];\n  var decimals = decimal.length;\n  var integer = number.toString().split('.')[0];\n  var integer_decimals = integer.length;\n  var result = '';\n  for (var I = 0; I < decimals; i++) {\n    result += integer[i] + '.';\n  }\n  return result.slice(0, -1);\n}\n```\n\nIn this function, we first split the number into two parts: integer and decimals. We then split the integer part into two parts: integer_decimals and integer. We concatenate the integer_decimals with the decimals part. We return the result.\n\n```javascript"], ["//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i].amount > 0) {\n      balance += operations[i].amount;\n    } else {\n      return true;\n    }\n  }\n  return balance < 0;\n} ```\n\nIn this function, we first check if the balance is zero. If it is, then we return true. Otherwise, we check if any of the operations has an amount that is negative. If it is, then we return true.\n\n```javascript"], ["//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n  var mean = numbers.reduce(function(a, b) {\n    return a + b;\n  }, 0);\n  return numbers.map(function(x) {\n    return x - mean;\n  }).reduce(function(a, b) {\n    return a + b;\n  }, 0);\n}\n"], ["//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  return numbers.reduce((acc, val) => {\n    return acc.concat(val).concat(delimeter);\n  }, []);\n}"], ["//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let nesting = 0;\n  let result = [];\n  let current_nesting = 0;\n  let current_nesting_level = 0;\n  let current_nesting_depth = 0;\n  let current_nesting_string = \"\";\n  let current_nesting_string_length = 0;\n  let current_nesting_string_index = 0;\n  let current_nesting_string_length_index = 0;\n  let current_nesting_string_length_index_2 = 0;\n  let current_nesting_string_length_index_3 = 0;\n  let current_nesting_string_length_index_4 = 0;\n  let current_nesting_string_length_index_5 = 0;\n  let current_nesting_string_length_index_6 = 0;\n  let current_nesting_string_length_index_7 = 0;\n  let current_nesting_string_length_index_8 = 0;\n  let current_nesting_string_length_index_9 = 0;\n  let current_nesting_string_length_index_10 = 0;\n  let current_nesting_string_length_index_11 = 0;\n  let current_nesting_string_length_index_12 = 0;\n  let current_nesting_string_length_index_13 = 0;\n  let current_nesting_string_length_index_14 = 0;\n  let current_nesting_string_length_index_15 = 0;\n  let current_nesting_string_length_index_16 = 0;\n "], ["//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n  return strings.filter(function(str){\n    return str.indexOf(substring) !== -1;\n  });\n}"], ["//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  var sum = 0;\n  var product = 1;\n  for (var I = 0; I < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n} ```\n\nIn this function, we first create an empty array to store the sum and product of the given array. We then loop through the array and add the current element to the sum and product. Finally, we return the sum and product.\n\nThe function takes an array of integers as input and returns an array consisting of a sum and a product of all the integers in the array. The sum is the sum of all the integers in the array, and the product is the product of all the integers in the array.\n\nThe function is called with an empty array as input, and it returns an empty array.\n\nThe function is called with an array of integers as input, and it returns an array consisting of the sum and product of all the integers in the array.\n\nThe function is called with an array of integers as input, and it returns the sum and product of all the integers in the array."], ["//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  let max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n} ```\n\nNow, let's see how we can use this function in our code:\n\n```javascript\nconst numbers = [1, 2, 3, 2, 3, 4, 2];"], ["//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n  let result = \"\";\n  let prefix = \"\";\n  let suffix = \"\";\n  let palindrome = \"\";\n\n  for (let I = 0; I < string.length; i++) {\n    if (string[i] === string[i + 1]) {\n      prefix += string[i];\n      suffix += string[i];\n    } else {\n      palindrome += string[i];\n    }\n  }\n\n  palindrome = palindrome.reverse();\n\n  if (palindrome === prefix) {\n    palindrome = palindrome.reverse();\n    palindrome = palindrome.reverse();\n    palindrome = palindrome.reverse();\n    palindrome = palindrome.reverse();\n    palindrome = palindrome.reverse();\n    palindrome = palindrome.reverse();\n    palindrome = palindrome.reverse();\n    palindrome = palindrome.reverse();\n    palindrome = palindrome.reverse();\n    palindrome = palindrome.reverse();\n    palindrome = palindrome.reverse();\n    palindrome = palindrome.reverse();\n    palindrome = palindrome.reverse();\n    palindrome = palindrome.reverse();\n    palindrome = palindrome.reverse();\n    palindrome = palindrome.reverse();\n    palindrome = palindrome.reverse();\n    palindrome = palindrome.reverse();\n    palindrome = palindrome.reverse();\n    palindrome = palindrome.reverse();\n    palindrome = palindrome.reverse();\n    palindrome = palindrome"], ["//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  var result = \"\";\n  for (var I = 0; I < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n} ```\n\nThe `string_xor` function takes two strings as input and returns a new string that is the XOR of the two input strings. The function uses a loop to iterate over each character in the input strings and perform the XOR operation on them. The result is then concatenated with the original input strings.\n\nThe `string_xor` function is used in the `string_xor_test` function to test the XOR function."], ["//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if (strings.length === 0) {\n    return undefined;\n  }\n  let maxLength = 0;\n  let maxString = \"\";\n  for (let string of strings) {\n    if (string.length > maxLength) {\n      maxLength = string.length;\n      maxString = string;\n    }\n  }\n  return maxString;\n}"], ["//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n  return a % b === 0 ? b : greatest_common_divisor(b, a % b);\n}"], ["//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  return string.split(\"\").reduce((acc, char) => {\n    if (acc.length === 0) {\n      acc.push(char);\n    } else {\n      acc.push(char);\n      acc.push(acc.slice(0, acc.length - 1).join(\"\"));\n    }\n    return acc;\n  }, []);\n} ```\n\nIn this implementation, we first split the input string into an array of characters, then we iterate over the array and push each character to an array of prefixes. We then join these prefixes into a string, and return it.\n\nThis implementation is more efficient than the previous one because we only need to iterate over the array once, and we don't need to keep track of the length of each prefix."], ["//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n  var result = \"\";\n  for (var I = 0; I < n; i++) {\n    result += \" \" + i;\n  }\n  return result;\n}"], ["//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n  return string.split('').filter(function(char){\n    return char.length > 1;\n  }).length;\n}"], ["//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n  const notes = music_string.split('|');\n  const notes_array = [];\n  for (let i = 0; i < notes.length; i++) {\n    const note = parseInt(notes[i]);\n    if (note > 0) {\n      notes_array.push(note);\n    }\n  }\n  return notes_array;\n}"], ["//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  var count = 0;\n  var index = 0;\n  var length = string.length;\n  while (index < length) {\n    if (string.charAt(index) === substring.charAt(index)) {\n      count++;\n      index++;\n    } else {\n      break;\n    }\n  }\n  return count;\n}\n```\n\nIn this implementation, we use a `for` loop to iterate over the string and check if the substring is found at the current index. If it is found, we increment the count. If it is not found, we break out of the loop.\n\nThis implementation is efficient because it only checks the substring once, and only once for each character in the string."], ["//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  return numbers.split(' ').sort().join(' ');\n}"], ["//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_distance = 1000000;\n  var min_index = -1;\n  var min_element = null;\n  for (var i = 0; i < numbers.length; i++) {\n    var distance = Math.sqrt(Math.pow(numbers[i] - min_element[0], 2) + Math.pow(numbers[i] - min_element[1], 2));\n    if (distance < min_distance) {\n      min_distance = distance;\n      min_index = i;\n      min_element = numbers[i];\n    }\n  }\n  return [min_element, min_index];\n} ```\n\nThis function takes an array of numbers and returns two numbers that are the closest to each other. The function first finds the minimum distance between each pair of numbers. Then it finds the indices of the numbers that are closest to each other. Finally, it returns the two numbers that are closest to each other.\n\nThe function uses the `Math.sqrt()` function to calculate the distance between two numbers. The `Math.pow()` function is used to calculate the square of the distance. The `Math.pow()` function is used to calculate the square of the distance. The `Math.sqrt()` function is used to calculate the square root of the square of the distance.\n\nThe `find_closest_elements` function takes an array of numbers as input. It returns two numbers that are the closest to each other. The function uses the `find_closest_elements` function to find the indices of the numbers that are closest to each other. The indices are"], ["//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  var rescaled = [];\n  for (var i = 0; i < numbers.length; i++) {\n    rescaled.push(Math.min(numbers[i], 1.0));\n    rescaled.push(Math.max(numbers[i], 0.0));\n  }\n  return rescaled;\n}\n```\n\nIn this function, we first define a function `rescale_to_unit` that takes an array of numbers and returns a new array with the same size, but with the smallest number set to 0 and the largest number set to 1.\n\nWe then call `rescale_to_unit` on the input array `numbers` and return the result.\n\nFinally, we return the result."], ["//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(value) {\n    return typeof value === \"number\";\n  });\n} ```\n\nThis function will return an array of integers only.\n\n3. `filter_strings(values)`:\n\n```javascript"], ["//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n  return string.length;\n} ```\n\nIn this function, we have used the `length` property of the `string` object to get the length of the string.\n\n2. `isNaN()` function:\n\n```javascript"], ["//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    let divisor = 1;\n    let remainder = n;\n    while (remainder > 0) {\n        divisor *= 10;\n        divisor += remainder % 10;\n        remainder /= 10;\n    }\n    return divisor;\n} ```\n\nExplanation:\n\n1. We start with a base case: if n is 0, we return 0.\n2. We then check if n is divisible by 1. If it is, we return 1.\n3. We then check if n is divisible by 2. If it is, we return 2.\n4. We then check if n is divisible by 3. If it is, we return 3.\n5. We then check if n is divisible by 4. If it is, we return 4.\n6. We then check if n is divisible by 5. If it is, we return 5.\n7. We then check if n is divisible by 6. If it is, we return 6.\n8. We then check if n is divisible by 7. If it is, we return 7.\n9. We then check if n is divisible by 8. If it is, we return 8.\n10. We then check if n is divisible by 9. If it is, we return 9.\n11. We then check if n is divisible by 10. If it is, we return 10.\n12. We then check if n is divisible by 11. If it is, we return 11.\n13. We then check if n is divisible by 12. If it is, we return 12.\n14. We then check if n is divisible by 13. If it is, we return 13.\n15"], ["//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  let factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n    }\n  }\n  return factors;\n}\n```\n\nExplanation:\n\nThe `factorize` function takes an integer `n` as input and returns an array of prime factors.\n\nThe function starts by checking if `n` is less than 2. If it is, then `n` is not a prime number.\n\nIf `n` is greater than 2, then `n` is a prime number.\n\nThe function then checks if `n` is divisible by any of the numbers `2` to `sqrt(n)`. If `n` is divisible by any of these numbers, then `n` is not a prime number.\n\nThe function then checks if `n` is divisible by any of the numbers `i` where `i` is less than `sqrt(n)`. If `n` is divisible by any of these numbers, then `n` is not a prime number.\n\nThe function then checks if `n` is divisible by any of the numbers `i` where `i` is less than `sqrt(n) + 1`. If `n` is divisible by any of these numbers, then `n` is not a prime number.\n\nThe function then checks if `n` is divisible by any of the numbers `i` where `i` is less than `sqrt(n) + 2`. If `n` is divisible by any of these numbers, then `n` is not a prime number.\n\nThe function then checks if `n` is divisible by any of the numbers `i` where `"], ["//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  return numbers.filter(function(num) {\n    return num !== numbers.find(function(num) {\n      return num === num;\n    });\n  });\n}"], ["//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.toLowerCase().split(\"\").map(function(char){\n    return char.toUpperCase();\n  }).join(\"\");\n}"], ["//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.reduce((acc, str) => acc + str, \"\");\n}"], ["//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n  return strings.filter(function(s) {\n    return s.startsWith(prefix);\n  });\n} ```\n\nIn this example, we're using the `filter` function to filter an array of strings by their starts with a given prefix. We're using the `startsWith` function to check if the string starts with the given prefix.\n\nWe're then returning the filtered array.\n\n```javascript"], ["//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(function(n) {\n    return n > 0;\n  });\n}"], ["//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (var I = 3; I <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}"], ["//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n  var n = l.length;\n  var l_sort = [];\n  for (var I = 0; I < n; i++) {\n    if (i % 3 === 0) {\n      l_sort.push(l[i]);\n    } else {\n      l_sort.push(l[i] + 1);\n    }\n  }\n  return l_sort;\n} ```\n\nThis function takes an array l and returns an array l' such that\n\n- l' is identical to l in the indicies that are not divisible by 3\n- its values at the indicies that are divisible by 3 are equal to the values of the corresponding indicies of l\n- the values of the remaining indicies are sorted in ascending order\n\nThe function sorts the array in place."], ["//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  return l.filter(function(x, i, a) {\n    return a.indexOf(x) === i;\n  });\n}\n"], ["//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n}\n```\n\nIn this implementation, we first create an empty array `l` and then iterate through the array `l` using a for loop. We check if the current element is greater than the current maximum element. If it is, we update the maximum element to the current element.\n\nThe `max_element` function returns the maximum element in the array."], ["//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  var result = 0;\n  var i = 0;\n  while (i < n) {\n    if (i % 11 === 7 || i % 13 === 7) {\n      result++;\n    }\n    i++;\n  }\n  return result;\n} ```\n\nExplanation:\n\n1. The function takes an integer `n` as input.\n2. The function checks if the number `n` is divisible by 11 or 13.\n3. If the number is divisible by 11, the function increments the counter `result` by 1.\n4. If the number is divisible by 13, the function increments the counter `result` by 2.\n5. The function returns the value of `result`.\n\nIn the example, the function returns 0 for `n = 50`, 2 for `n = 78`, and 3 for `n = 79`."], ["//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n  var n = l.length;\n  var result = [];\n  for (var i = 0; i < n; i += 2) {\n    result[i] = l[i];\n    result[i + 1] = l[i + 1];\n  }\n  return result;\n}\n```\n\nIn this example, we define a function called `sort_even` that takes an array `l` and returns an array `result` that is identical to `l` in the odd indicies, but sorted in the even indicies. The function uses a loop to iterate over the array, and for each index, it swaps the values at the even and odd indices. The result is then returned as the `result` variable."], ["//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n  if (n < 2) {\n    return n;\n  }\n  if (n % 2 === 0) {\n    return n;\n  }\n  if (n % 3 === 0) {\n    return n;\n  }\n  let fibonacci = [1, 1];\n  for (let I = 2; I < n; i++) {\n    fibonacci[i] = fibonacci[i - 1] + fibonacci[i - 2];\n  }\n  return fibonacci[n];\n}"], ["//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  if (l.length === 0) {\n    return false;\n  }\n  var sum = 0;\n  for (var i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}"], ["//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  var count = 0;\n  var cars = [];\n  for (var I = 0; I < n; i++) {\n    cars.push(new Car(i));\n  }\n  for (var I = 0; I < n; i++) {\n    cars[i].move();\n  }\n  for (var I = 0; I < n; i++) {\n    cars[i].move();\n  }\n  for (var I = 0; I < n; i++) {\n    cars[i].move();\n  }\n  for (var I = 0; I < n; i++) {\n    cars[i].move();\n  }\n  for (var I = 0; I < n; i++) {\n    cars[i].move();\n  }\n  for (var I = 0; I < n; i++) {\n    cars[i].move();\n  }\n  for (var I = 0; I < n; i++) {\n    cars[i].move();\n  }\n  for (var I = 0; I < n; i++) {\n    cars[i].move();\n  }\n  for (var I = 0; I < n; i++) {\n    cars[i].move();\n  }\n  for (var I = 0; I < n; i++) {\n    cars[i].move();\n  }\n  for (var I = 0; I < n; i++) {\n    cars[i].move();\n  }\n"], ["//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for (var i = 0; i < l.length; i++) {\n    res.push(l[i] + 1);\n  }\n  return res;\n}\n```\n\nIn this example, we define a function `incr_list` that takes an array `l` as input and returns an array with the elements incremented by 1. The function takes an optional parameter `i` that specifies the starting index.\n\nThe function first initializes an empty array `res` and then iterates over the array `l` using a for loop. For each element `i` in the array, the function increments the corresponding element in the `res` array by 1.\n\nThe function returns the `res` array.\n\n```javascript"], ["//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  var sum = 0;\n  for (var i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}"], ["//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n  if (base === 1) {\n    return x;\n  }\n  var result = 0;\n  while (x > 0) {\n    result += x % base;\n    x = Math.floor(x / base);\n  }\n  return result;\n} ```\n\nIn this example, we first check if the base is less than 10. If it is, we return the input number. Otherwise, we calculate the result using the base and the remainder of the number divided by the base.\n\nI hope this helps! Let me know if you have any other questions."], ["//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return a * h / 2;\n}"], ["//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if (n < 3) {\n    return 0;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}"], ["//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n  var n = l.length;\n  if (n <= 1) {\n    return l[0];\n  }\n  var median = l[Math.floor(n / 2)];\n  var left = l.slice(0, Math.floor(n / 2));\n  var right = l.slice(Math.floor(n / 2) + 1);\n  var sum = left.reduce(function(a, b) {\n    return a + b;\n  }, 0);\n  var count = right.reduce(function(a, b) {\n    return a + b;\n  }, 0);\n  var avg = (sum / count);\n  return avg > median ? median : avg;\n}\n```\n\nIn this implementation, we first calculate the average of the array. Then, we find the middle element of the array. Finally, we return the average.\n\nThe `reduce()` function is used to calculate the average. The `reduce()` function takes an array as input and applies a function to each element in the array. The function is called with two arguments: the current element in the array and the accumulator. The accumulator is initialized to zero.\n\nThe `reduce()` function returns the accumulator. In this case, we return the average.\n\nThe `slice()` function is used to create a new array with the first `n` elements of the original array.\n\nThe `reduce()` function is used to calculate the average of the elements in the array.\n\nThe `slice()` function is used to create a new array with the first `n` elements of the original array.\n\nThe `reduce()` function is used to calculate the average of the elements in the array.\n\nThe `reduce()` function is used to calculate the average of the elements in the array.\n\nThe `reduce()` function is used to calculate the average of the elements in the array.\n\nThe `reduce()` function is used to calculate the average of the"], ["//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n  return text.split('').reverse().join('') === text;\n}"], ["//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  var r = 1;\n  while (n > 0) {\n    r = (r * p) % n;\n    n = n / p;\n  }\n  return r;\n}\n```\n\nThis function takes a number `n` and a prime `p` and returns the remainder when `n` is divided by `p`. It uses the Euclidean algorithm to find the remainder.\n\nThe function takes two arguments: `n` and `p`. `n` is the number to be divided by `p`. `p` is the prime number.\n\nThe function returns the remainder when `n` is divided by `p`.\n\nThe function is called with two arguments: `n` and `p`. `n` is the number to be divided by `p`. `p` is the prime number.\n\nThe function returns the remainder when `n` is divided by `p`.\n\nThe function takes two arguments: `n` and `p`. `n` is the number to be divided by `p`. `p` is the prime number.\n\nThe function returns the remainder when `n` is divided by `p`.\n\nThe function takes two arguments: `n` and `p`. `n` is the number to be divided by `p`. `p` is the prime number.\n\nThe function returns the remainder when `n` is divided by `p`.\n\nThe function takes two arguments: `n` and `p`. `n` is the number to be divided by `p`. `p` is the prime number.\n\nThe function returns the remainder when `n` is divided by `p`.\n\nThe function takes two arguments: `n` and `p`. `n` is the number to be divided by `p`. `p` is the prime number.\n\nThe function returns"], ["//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, '');\n}"], ["//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n  return l.every(function(num) {\n    return num < t;\n  });\n}"], ["//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n} ```\n\nIn this example, we have a function named `add` that takes two numbers as arguments and returns the sum of them.\n\nIn the `add` function, we have a variable `x` and a variable `y`.\n\n```javascript"], ["//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n  if (s0 === s1) {\n    return true;\n  }\n  if (s0.length !== s1.length) {\n    return false;\n  }\n  for (var i = 0; i < s0.length; i++) {\n    if (s0[i] !== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n}"], ["//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if (n < 2) {\n    return 0;\n  }\n  return fib(n - 1) + fib(n - 2);\n}"], ["//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  if (brackets.length === 0) {\n    return true;\n  }\n  if (brackets.length === 1) {\n    return brackets[0] === \"<\";\n  }\n  if (brackets.length === 2) {\n    return brackets[0] === \"<\" && brackets[1] === \">\";\n  }\n  return false;\n}"], ["//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  if (l.length === 0) return false;\n  if (l.length === 1) return l[0] === 0;\n  var max = l[0];\n  for (var i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max === 0;\n}\n\nmodule.exports = monotonic;"], ["//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  var l1_length = l1.length;\n  var l2_length = l2.length;\n  var common = [];\n  var i, j;\n  for (i = 0; i < l1_length; i++) {\n    for (j = 0; j < l2_length; j++) {\n      if (l1[i] === l2[j]) {\n        common.push(l1[i]);\n      }\n    }\n  }\n  return common;\n}\n```\n\nIn this function, we first create an empty array `common` to store the common elements. Then, we iterate through the first array `l1` and the second array `l2` and compare each element. If the element is equal, we push it to the `common` array.\n\nThe `common` array is then returned.\n\n```javascript"], ["//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n % 2 === 0) {\n    return 2;\n  }\n  let factors = [];\n  for (let I = 3; I <= Math.sqrt(n); i += 2) {\n    if (n % i === 0) {\n      factors.push(i);\n    }\n  }\n  return factors.length === 1 ? factors[0] : factors[Math.floor(factors.length / 2)];\n} ```\n\nExplanation:\n\n- We start by checking if n is a prime.\n- If it is, we return 1.\n- Otherwise, we check if n is divisible by 2. If it is, we return 2.\n- Otherwise, we check if n is divisible by 4. If it is, we return 2.\n- Otherwise, we check if n is divisible by 6. If it is, we return 2.\n- Otherwise, we check if n is divisible by 8. If it is, we return 2.\n- Otherwise, we check if n is divisible by 10. If it is, we return 2.\n- Otherwise, we check if n is divisible by 12. If it is, we return 2.\n- Otherwise, we check if n is divisible by 14. If it is, we return 2.\n- Otherwise, we check if n is divisible by 16. If it is, we return 2.\n- Otherwise, we check if n is divisible by 18. If it is, we return 2.\n- Otherwise, we check if n is divisible by 20. If it is, we return 2.\n- Otherwise, we check if n is divisible by 24. If it is"], ["//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  return n * (n + 1) / 2;\n}"], ["//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  return brackets.split(\"\").every(function(char) {\n    return char === \"(\" || char === \")\" || char === \"(\" && char === \")\" || char === \"(\" && char === \")\" || char === \"(\" && char === \")\" && char === \"(\";\n  });\n}"], ["//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  var n = xs.length;\n  var d = new Array(n);\n  for (var I = 0; I < n; i++) {\n    d[i] = 0;\n  }\n  for (var I = 1; I < n; i++) {\n    d[i] = d[i - 1] + xs[i] * d[i - 1];\n  }\n  return d;\n}\n"], ["//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n```\n\nThe `fibfib` function takes an integer `n` as input and returns the `n`-th element of the Fibonacci sequence. The function uses a recursive approach to compute the sequence.\n\nThe `fibfib` function is implemented using a `for` loop. The `fibfib` function first checks if the `n` is less than or equal to 1. If it is, then it returns 0.\n\nIf `n` is greater than 1, then the function calls itself recursively with `n-1` and `n-2`. The `fibfib` function then computes the `n`-th element of the Fibonacci sequence using the recursive call.\n\nThe `fibfib` function returns the `n`-th element of the Fibonacci sequence."], ["//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  var count = 0;\n  for (var i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) !== -1) {\n      count++;\n    }\n  }\n  return count;\n}"], ["//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  if (shift > x.length) {\n    return x.reverse();\n  }\n  return x.slice(0, shift) + x.slice(shift + 1);\n} ```\n\nIn this function, we first check if the shift is greater than the number of digits. If it is, we return the digits reversed. If it is less than or equal to the number of digits, we shift the digits right by the shift. We then return the result as a string.\n\nI hope this helps! Let me know if you have any other questions."], ["//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  var sum = 0;\n  for (var I = 0; I < s.length; i++) {\n    var c = s.charCodeAt(i);\n    if (c >= 48 && c <= 57) {\n      sum += c;\n    }\n  }\n  return sum;\n}\n\nmodule.exports = digitSum;"], ["//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  let count = 0;\n  let total = 0;\n  let fruit = s.split(\" \");\n  for (let i = 0; i < fruit.length; i++) {\n    if (fruit[i] === \"orange\") {\n      total += 1;\n    } else if (fruit[i] === \"apple\") {\n      total += 1;\n    } else if (fruit[i] === \"mango\") {\n      count += 1;\n    }\n  }\n  return count + n - total;\n}"], ["//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let result = [];\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i].value < min) {\n      min = arr[i].value;\n      index = i;\n    }\n  }\n  result.push(arr[index]);\n  return result;\n}\n```\n\n```javascript"], ["//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n  let max = 0;\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] > max) {\n      max = lst[i];\n      count = 1;\n    } else if (lst[i] > max && count < lst[i]) {\n      count++;\n    }\n  }\n  return max;\n}"], ["//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  var sorted = [];\n  var min = lst[0];\n  var max = lst[lst.length - 1];\n  for (var I = 1; I < lst.length; i++) {\n    if (lst[i] < min) {\n      sorted.push(lst[i]);\n    } else if (lst[i] > max) {\n      sorted.push(lst[i]);\n    } else {\n      sorted.push(lst[i]);\n    }\n  }\n  return sorted;\n}"], ["//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n  var sum = a + b + c;\n  var half = Math.sqrt(sum / 2);\n  return (half * half) - (a * b) - (b * c) - (c * a);\n}"], ["//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  return q.reduce((acc, x) => acc + x, 0) <= w;\n} ```\n\nIn this function, we first check if the array q is balanced. If it's not balanced, we return false.\n\nNext, we check if the sum of the elements of q is less than or equal to the maximum possible weight w. If it is, we return false.\n\nFinally, we return true if the array q is balanced and the sum of its elements is less than or equal to the maximum possible weight w."], ["//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  let min = arr.length;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] !== arr[arr.length - 1 - i]) {\n      min = Math.min(min, i + 1);\n    }\n  }\n  return min;\n}"], ["//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  var result = [];\n  var len1 = lst1.length;\n  var len2 = lst2.length;\n  for (var i = 0; i < len1; i++) {\n    var c1 = lst1[i];\n    var c2 = lst2[i];\n    if (c1.length < c2.length) {\n      result.push(c1);\n    } else {\n      result.push(c2);\n    }\n  }\n  return result;\n}\n```\n\nIn this function, we first check if the two arrays have the same number of chars. If they do, we return the first array.\n\nIf they don't, we loop through the first array and find the longest string that is less than the second array. We then add that string to the result array.\n\nFinally, we return the result array."], ["//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n  if (a < 100) {\n    return false;\n  }\n  if (a % 2 === 0 || a % 3 === 0) {\n    return false;\n  }\n  return true;\n}\n```\n\nIn this implementation, we check if the number is less than 100. If it is, we return false. Otherwise, we check if the number is divisible by 2 and 3. If it is, we return false. Otherwise, we return true."], ["//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if (n === 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  return x % n === 0;\n}\n```\n\nIn this function, we define a function called `is_simple_power` that takes two arguments `x` and `n`. The function returns `true` if `n` is a simple power of `x`. Otherwise, it returns `false`.\n\nWe start by checking if `n` is 0. If it is, then `x` is a simple power of `n`.\n\nWe then check if `n` is 1. If it is, then `x` is a simple power of `n`.\n\nWe then check if `x` is a simple power of `n`. If it is, then `n` is a simple power of `x`.\n\nWe then check if `n` is a simple power of `x`. If it is, then `n` is a simple power of `x`.\n\nFinally, we return `true` if `n` is a simple power of `x`. Otherwise, we return `false`.\n\nWe then call this function with `x` and `n` as arguments.\n\n```javascript"], ["//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  return a % 3 === 0 && a % 5 === 0;\n}"], ["//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  var str = num.toString();\n  var count = 0;\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] === '0') {\n      count++;\n    } else {\n      count++;\n      break;\n    }\n  }\n  return count;\n}"], ["//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  var binary = \"\";\n  var decimal_string = String(decimal);\n  var binary_string = \"\";\n  var binary_string_length = 0;\n\n  for (var I = 0; I < decimal_string.length; i++) {\n    var binary_digit = decimal_string.charAt(i);\n    var binary_digit_length = binary_digit.length;\n    var binary_digit_string = \"\";\n\n    for (var j = 0; j < binary_digit_length; j++) {\n      binary_digit_string += binary_digit.charAt(j);\n    }\n\n    binary_string += binary_digit_string;\n    binary_string_length += binary_digit_length;\n  }\n\n  binary = binary_string.slice(0, binary_string_length);\n\n  return binary;\n}\n```\n\nExplanation:\n\n- We start by converting the decimal number to binary using the `String` method.\n- We then create a `binary_string` variable to store the binary number.\n- We create a `binary_string_length` variable to store the length of the binary number.\n- We loop through each character in the binary number.\n- For each character, we create a `binary_digit_string` variable to store the binary number.\n- We loop through each character in the binary number.\n- For each character, we create a `binary_digit_length` variable to store the length of the binary number.\n- We loop through each character in the binary number.\n- For each character,"], ["//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if (s.length < 3) return false;\n  if (s[0] === s[s.length - 1]) return true;\n  var arr = s.split('');\n  var n = arr.length;\n  for (var I = 0; I < n; i++) {\n    var j = i + 1;\n    while (j < n && arr[i] === arr[j]) {\n      j++;\n    }\n    if (j > n) {\n      return false;\n    }\n    arr[i] = arr[j];\n    arr[j] = arr[n - 1];\n    n--;\n  }\n  return true;\n}\n```\n\nExplanation:\n\n1. We start with an empty string.\n2. We iterate through the string, and for each character, we check if it is a letter or not.\n3. If it is a letter, we check if it is the first letter of a word.\n4. If it is not the first letter of a word, we check if it is the last letter of a word.\n5. If it is the last letter of a word, we check if it is the first letter of a word.\n6. If it is the first letter of a word, we check if it is the first letter of a word.\n7. If it is the first letter of a word, we check if it is the first letter of a word.\n8. If it is the first letter of a word, we check if it is the first letter of a word.\n9. If it is the first letter of a word,"], ["//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var grades_array = grades.map(function(grade){\n    return grade.toUpperCase();\n  });\n  var letter_grade_array = grades_array.map(function(grade){\n    return letter_grade_table[grade];\n  });\n  return letter_grade_array;\n}\n"], ["//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  var length = string.length;\n  for (var I = 2; I < length; i++) {\n    if (string.charAt(i) === string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n}"], ["//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  let count = 0;\n  for (let I = 1; I <= n; i++) {\n    if (i % 1 === 0) {\n      count++;\n    } else {\n      count = 0;\n    }\n  }\n  return count;\n}\n```\n\nExplanation:\n\nThe function `starts_one_ends` takes a positive integer `n` as input. It returns the count of the numbers of `n-digit` positive integers that start or end with 1.\n\nThe function starts with a loop that iterates from 1 to `n`. For each digit `i`, it checks if the digit is 0 or 1. If it is 0, then the digit is not part of the number. If it is 1, then the digit is part of the number. If the digit is 0, then it is not part of the number.\n\nThe function then checks if the digit is 0. If it is 0, then the function returns 0. If it is 1, then the function returns 1.\n\nThe function then iterates through the loop from 1 to `n`. For each digit `i`, it checks if the digit is 0 or 1. If it is 0, then the digit is not part of the number. If it is 1, then the digit is part of the number.\n\nThe function then checks if the digit is 0. If it is 0, then the function returns 0. If it is 1, then the function returns 1.\n\nThe function then iterates through the loop from 1 to `n`. For each digit `i`, it checks if the digit is 0 or 1. If it is 0, then the digit is not part of the number. If it is 1, then the digit is part of the number.\n\nThe function then checks if the digit is 0. If it is 0, then the function returns 0. If it is 1, then the function returns 1.\n\nThe function then iterates through the loop from 1 to `n`. For each digit"], ["//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  var str = \"\";\n  var sum = 0;\n  for (var i = 0; i < N; i++) {\n    var digit = N % 2;\n    sum += digit;\n    N /= 2;\n  }\n  while (sum > 0) {\n    sum -= 2;\n    str += digit;\n  }\n  return str;\n}"], ["//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    var result = [];\n    for (var i = 0; i < lst.length; i++) {\n        if (i % 2 === 0) {\n            result.push(lst[i]);\n        }\n    }\n    return result;\n}"], ["//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  let arr = s.split(\" \");\n  let arr2 = [];\n  for (let i = 0; i < arr.length; i++) {\n    arr2.push(arr[i].toLowerCase());\n  }\n  return arr2.join(\" \");\n}"], ["//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  var rows = [];\n  var cols = [];\n  var row = [];\n  var col = [];\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var n = lst.length;\n  while (i < n) {\n    if (lst[i][j] === x) {\n      row.push(col);\n      col = [];\n      j++;\n    } else {\n      col.push(lst[i][j]);\n      j++;\n    }\n    i++;\n  }\n  while (i < n) {\n    row.push(col);\n    col = [];\n    j++;\n  }\n  while (i < n) {\n    row.push(col);\n    col = [];\n    j++;\n  }\n  return rows;\n}\n```\n\n```javascript"], ["//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  if (array.length === 0) return [];\n  if (array.length === 1) return array;\n  if (array.length === 2) return [array[0], array[1]];\n  var sorted = [];\n  for (var I = 0; I < array.length; i++) {\n    sorted.push(array[i]);\n  }\n  sorted.sort(function(a, b) {\n    return a - b;\n  });\n  return sorted;\n}"], ["//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  var result = \"\";\n  var shift = 2;\n  for (var i = 0; i < s.length; i++) {\n    var c = alphabet[s.charCodeAt(i) - 96 + shift];\n    result += c;\n  }\n  return result;\n}\n```\n\nIn this implementation, we use a `shift` variable to rotate the alphabet. The `shift` value is multiplied by two to shift down two places.\n\n```javascript"], ["//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  var min = lst[0];\n  for (var i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n}\n```\n\nExplanation:\n\n1. We start by creating an empty array.\n2. We iterate through the array and check if the first element is smaller than the current min.\n3. If it is, we update the min value to the current element.\n4. We return the current min value.\n\nTime complexity: O(n)\nSpace complexity: O(1)\n\n```javascript"], ["//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n    var count = 0;\n    for (var I = 0; I < S.length; i++) {\n        if (S[i] === 'I') {\n            count++;\n        }\n    }\n    return count;\n}\n```\n\nIn this implementation, we use a `for` loop to iterate over the string `S` and check if it contains the word \"I\". If it does, we increment the `count` variable. If it does not, we return `0`.\n\nThe `is_bored` function takes a string `S` as input and returns a boolean value indicating whether the string is bored."], ["//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  return (x + y + z) === (x + y + z);\n}"], ["//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  var result = \"\";\n  for (var I = 0; I < message.length; i++) {\n    var letter = message[i];\n    var nextLetter = message[i + 1];\n    if (letter === \"a\" && nextLetter === \"e\") {\n      result += \"E\";\n    } else if (letter === \"e\" && nextLetter === \"a\") {\n      result += \"A\";\n    } else if (letter === \"i\" && nextLetter === \"e\") {\n      result += \"E\";\n    } else if (letter === \"e\" && nextLetter === \"i\") {\n      result += \"I\";\n    } else if (letter === \"o\" && nextLetter === \"o\") {\n      result += \"O\";\n    } else if (letter === \"o\" && nextLetter === \"o\") {\n      result += \"O\";\n    } else if (letter === \"u\" && nextLetter === \"o\") {\n      result += \"O\";\n    } else if (letter === \"o\" && nextLetter === \"u\") {\n      result += \"U\";\n    } else if (letter === \"a\" && nextLetter === \"e\") {\n      result += \"A\";\n    } else if (letter === \"e\" && nextLetter === \"a\") {\n      result += \"E\";\n    } else if (letter === \"i\" && nextLetter === \"e\") {\n      result += \"E\";\n    } else if (letter === \"e\" && nextLetter === \"i\") {\n      result += \"I\";\n    } else if (letter === \"o\" && nextLetter === \"o\") {\n"], ["//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  var max = 0;\n  var sum = 0;\n  for (var i = 0; i < lst.length; i++) {\n    var num = parseInt(lst[i]);\n    if (num > max) {\n      max = num;\n      sum = 0;\n    }\n    sum += num;\n  }\n  return sum;\n}"], ["//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  var keys = Object.keys(dict);\n  var is_case_sensitive = false;\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (is_case_sensitive) {\n      if (dict[key].toLowerCase() !== key.toLowerCase()) {\n        return false;\n      }\n    } else {\n      if (dict[key].toUpperCase() !== key.toUpperCase()) {\n        return false;\n      }\n    }\n  }\n  return true;\n}"], ["//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  var result = [];\n  for (var I = 2; I <= n; i++) {\n    if (is_prime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n"], ["//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  var result = 1;\n  for (var I = 0; I < b; i++) {\n    result *= a;\n  }\n  return result;\n}\n```\n\nIn this implementation, we use a `for` loop to iterate over the digits of `a` and `b`. We then multiply the digits together and return the result."], ["//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  let count = 0;\n  for (let I = 0; I < s.length; i++) {\n    if (s[i] === s[i + 1]) {\n      count++;\n    }\n  }\n  return count;\n}"], ["//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  var min = Math.min(Number(value), Number(value.slice(0, -1)));\n  var max = Math.max(Number(value), Number(value.slice(1)));\n  return (min + max) / 2;\n} ```\n\nIn this function, we first convert the input value to a string, then we use the `Number` function to convert it to an integer. We then use the `Math.min()` and `Math.max()` functions to find the minimum and maximum integer values. Finally, we return the closest integer to the input value.\n\nNote that this function assumes that the input value is an integer. If you want to handle non-integer values, you can modify the function to use the `parseInt()` function instead of `Number()`."], ["//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  var result = [];\n  for (var i = 0; i < n; i++) {\n    result.push(i);\n  }\n  return result;\n} ```\n\nExplanation:\n\nThe `make_a_pile` function takes a positive integer `n` as input and returns an array of `n` integers representing the number of stones in each level.\n\nThe function first initializes an empty array `result` to hold the result.\n\nThe function then iterates through the input `n` and checks if the next level has an odd number of stones. If it does, it adds the next odd number to the `result` array.\n\nIf it does not, it adds the next even number to the `result` array.\n\nThe function then returns the `result` array.\n\nThe `make_a_pile` function is used to generate a pile of n levels of stones."], ["//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(/,\\s*/);\n}"], ["//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  let min = x;\n  let max = y;\n  while (min <= max) {\n    let mid = Math.floor((min + max) / 2);\n    if (mid === x) {\n      return mid;\n    }\n    if (mid === y) {\n      return mid;\n    }\n    if (mid < x) {\n      min = mid + 1;\n    } else {\n      max = mid - 1;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = choose_num;"], ["//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  let sum = 0;\n  let count = 0;\n  for (let I = n; I <= m; i++) {\n    sum += i;\n    count++;\n  }\n  return (sum / count).toString(2);\n}"], ["//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  let result = [];\n  for (let I = 0; I < x.length; i++) {\n    let num = x[i];\n    if (num % 2 === 0) {\n      continue;\n    }\n    result.push(num);\n  }\n  return result;\n} ```\n\nExplanation:\n\n1. We start with an empty array `result`.\n2. We iterate over the input array `x`.\n3. For each element `num` in `x`, we check if `num` is even.\n4. If `num` is even, we add it to the `result` array.\n5. If `num` is not even, we add it to the `result` array.\n6. We return the `result` array.\n\nTime complexity: O(n) where `n` is the length of the input array.\n\nSpace complexity: O(1) because we don't need to store any extra data."], ["//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result = [];\n  for (var I = 0; I < arr.length; i++) {\n    var num = arr[i];\n    if (num >= 1 && num <= 9) {\n      result.push(num);\n    } else {\n      result.push(num.toString());\n    }\n  }\n  return result;\n}"], ["//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  if (n === 0) return [];\n  if (n === 1) return [1];\n  return f(n - 1)\n    .concat(f(n - 2))\n    .concat(f(n - 3))\n    .concat(f(n - 4))\n    .concat(f(n - 5))\n    .concat(f(n - 6))\n    .concat(f(n - 7))\n    .concat(f(n - 8))\n    .concat(f(n - 9))\n    .concat(f(n - 10))\n    .concat(f(n - 11))\n    .concat(f(n - 12))\n    .concat(f(n - 13))\n    .concat(f(n - 14))\n    .concat(f(n - 15))\n    .concat(f(n - 16))\n    .concat(f(n - 17))\n    .concat(f(n - 18))\n    .concat(f(n - 19))\n    .concat(f(n - 20))\n    .concat(f(n - 21))\n    .concat(f(n - 22))\n    .concat(f(n - 23))\n    .concat(f(n - 24))\n    .concat(f(n - 25))\n    .concat(f(n - 26))\n    .concat(f(n - 27))\n    .concat(f(n - 28))\n    .concat("], ["//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let result = [];\n  for (let I = 1; I <= n; i++) {\n    let odd = 0;\n    let even = 0;\n    for (let j = 1; j <= i; j++) {\n      if (j % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n      }\n    }\n    result.push(odd + even);\n  }\n  return result;\n} ```\n\nIn this function, we first check if the input integer is even or odd. If it is even, we add the even number to the even palindrome array. If it is odd, we add the odd number to the odd palindrome array.\n\nThen we iterate through the input integer and check if it is even or odd. If it is even, we add the even number to the even palindrome array. If it is odd, we add the odd number to the odd palindrome array.\n\nFinally, we return the two arrays."], ["//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  let count = 0;\n  for (let I = 0; I < arr.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j] * Math.pow(10, j);\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n} ```\n\nIn this function, we first check if the array is empty. If it is, we return 0.\n\nThen, we iterate through the array and check if the sum of digits of each element is greater than 0. If it is, we increment the count.\n\nFinally, we return the count.\n\nNote that this function assumes that the input array is sorted in ascending order."], ["//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  if (arr.length === 0) return true;\n  let arr_copy = arr.slice();\n  let arr_copy_length = arr_copy.length;\n  let arr_copy_shift = 0;\n  let arr_copy_shift_count = 0;\n  let arr_copy_shift_index = 0;\n  for (let I = 0; I < arr_copy_length; i++) {\n    if (arr_copy[i] > arr_copy[i + 1]) {\n      arr_copy[i + arr_copy_shift_index] = arr_copy[i];\n      arr_copy[i] = arr_copy[i + arr_copy_shift_index];\n      arr_copy[i + arr_copy_shift_index] = arr_copy["], ["//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  if (lst1.length !== lst2.length) {\n    return \"NO\";\n  }\n  let result = true;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] !== lst2[i]) {\n      result = false;\n      break;\n    }\n  }\n  return result ? \"YES\" : \"NO\";\n}"], ["//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  var result = {};\n  var words = test.split(' ');\n  var count = {};\n  for (var I = 0; I < words.length; i++) {\n    var word = words[i];\n    var count = count[word] || 0;\n    count++;\n    result[word] = count;\n  }\n  return result;\n}"], ["//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  let result = [];\n  let temp = \"\";\n  let i = 0;\n  while (i < s.length) {\n    if (s[i] === c[i]) {\n      temp += s[i];\n      i++;\n    } else {\n      result.push(temp);\n      temp = \"\";\n    }\n  }\n  result.push(temp);\n  return [result, true];\n}"], ["//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  var count = [];\n  for (var i = 0; i < lst.length; i++) {\n    var num = parseInt(lst[i]);\n    if (num % 2 === 1) {\n      count.push(num);\n    }\n  }\n  return count;\n}"], ["//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  let max = -Infinity;\n  for (let I = 0; I < nums.length; i++) {\n    let sum = nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n    if (sum > max) {\n      max = sum;\n    }\n  }\n  return min + max;\n} ```\n\nExplanation:\n\n1. We start by finding the minimum sum of any non-empty sub-array of nums.\n2. We then iterate over the remaining elements of nums, and for each element, we check if it is greater than the minimum sum of any non-empty sub-array.\n3. If it is, we update the minimum sum and the maximum sum.\n4. We return the minimum sum.\n\nTime complexity: O(n) where n is the length of nums.\nSpace complexity: O(1) since we are only using one array."], ["//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  let max_fill = 0;\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (grid[i][j] === 1) {\n        let bucket = grid[i][j];\n        for (let k = 0; k < bucket; k++) {\n          if (capacity > 0) {\n            capacity--;\n          }\n        }\n      }\n    }\n  }\n  return max_fill;\n}"], ["//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  var arr_length = arr.length;\n  var sorted_arr = [];\n  for (var I = 0; I < arr_length; i++) {\n    sorted_arr.push(arr[i]);\n  }\n  sorted_arr.sort(function(a, b) {\n    return a - b;\n  });\n  return sorted_arr;\n}\n```\n\nExplanation:\n\n1. We first sort the array based on the number of ones in their binary representation.\n2. Then we sort the array based on the decimal value.\n3. Finally, we return the sorted array.\n\nTime complexity: O(n)\nSpace complexity: O(1)\n\n```javascript"], ["//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  var count = 0;\n  for (var I = 0; I < s.length; i++) {\n    if (s[i] === ' ') {\n      count++;\n    } else {\n      if (count === n) {\n        words.push(s.slice(i - count + 1, i));\n        count = 0;\n      }\n    }\n  }\n  return words;\n}\n```\n\nIn this implementation, we first check if the string is empty. If it is, we return an empty array.\n\nThen, we iterate over the string and check if the current character is a letter. If it is, we increment the counter.\n\nIf the counter is equal to the specified number of consonants, we add the current character to the array of words.\n\nFinally, we return the array of words."], ["//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let closest = \"\";\n  for (let i = 0; i < word.length; i++) {\n    let vowel = vowels[i];\n    if (vowel === word[i]) {\n      continue;\n    }\n    if (vowels.includes(word[i]) && vowels.includes(word[i + 1])) {\n      closest = vowel;\n    }\n  }\n  return closest;\n}"], ["//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  var n = lst.length;\n  var stack = [];\n  var result = \"\";\n  for (var I = 0; I < n; i++) {\n    if (lst[i] === \"(\") {\n      stack.push(lst[i]);\n    } else if (lst[i] === \")\") {\n      if (stack.length === 0) {\n        return \"No\";\n      }\n      var top = stack.pop();\n      if (top === \"(\") {\n        stack.push(top);\n      } else {\n        stack.push(top);\n      }\n    } else {\n      stack.push(lst[i]);\n    }\n  }\n  return stack.length === 0 ? \"Yes\" : \"No\";\n}"], ["//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let max = 0;\n  let maxIndex = 0;\n  for (let I = 0; I < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  return arr.slice(maxIndex + 1);\n}"], ["//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  const result = 0;\n  for (let I = 0; I < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      result += lst[i];\n    }\n  }\n  return result;\n}"], ["//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for (let I = 0; I < arr.length; i++) {\n    const digit = arr[i].toString();\n    const len = digit.length;\n    if (len <= k) {\n      sum += parseInt(digit);\n    } else {\n      const first = digit.slice(0, k);\n      const second = digit.slice(k);\n      sum += parseInt(first) + parseInt(second);\n    }\n  }\n  return sum;\n} ```\n\nIn this implementation, we first check if the input array has at least two digits. If it does not, we return 0.\n\nThen, we iterate over the array and check if the first k digits are at most two digits. If they are, we add the sum of the first k digits to the sum variable.\n\nFinally, we return the sum variable."], ["//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  let odd = [];\n  let even = [];\n  let prev = 1;\n  let curr = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      even.push(i);\n    } else {\n      odd.push(i);\n    }\n    curr = prev + i;\n    prev = curr;\n  }\n  return [...even, ...odd];\n}"], ["//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  var date_parts = date.split(\"-\");\n  var year = parseInt(date_parts[0]);\n  var month = parseInt(date_parts[1]);\n  var day = parseInt(date_parts[2]);\n  var days = 0;\n  var months = 0;\n  var is_valid = true;\n\n  // Check if the month is valid\n  if (month < 1 || month > 12) {\n    is_valid = false;\n  }\n\n  // Check if the day is valid\n  if (day < 1 || day > 31) {\n    is_valid = false;\n  }\n\n  // Check if the year is valid\n  if (year < 1 || year > 9999) {\n    is_valid = false;\n  }\n\n  // Check if the month is valid\n  if (month < 1"], ["//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n  var words = txt.split(/\\s+/);\n  var count = words.length;\n  var odd = 0;\n  for (var I = 0; I < words.length; i++) {\n    if (words[i].toLowerCase() % 2 !== 0) {\n      odd++;\n    }\n  }\n  return [words, odd];\n}"], ["//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  if (lst.length < 2) return true;\n  if (lst.length === 1) return lst[0] === lst[0];\n  if (lst.length === 2) return lst[0] === lst[1];\n  var n = lst.length;\n  for (var I = 0; I < n; i++) {\n    var j = i + 1;\n    while (j < n && lst[i] === lst[j]) j++;\n    if (j === n) return false;\n    if (lst[i] > lst[j]) return false;\n  }\n  return true;\n}\n```\n\nI hope this helps! Let me know if you have any further questions."], ["//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  let start = interval1[0];\n  let end = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n  if (start2 < start) {\n    start = start2;\n  }\n  if (end2 < end) {\n    end = end2;\n  }\n  if (start === end) {\n    return \"NO\";\n  }\n  let result = 0;\n  for (let i = start; i <= end; i++) {\n    if (i === start2 || i === end2) {\n      result++;\n    }\n  }\n  return result === 2 ? \"YES\" : \"NO\";\n}\n\nmodule.exports = intersection;"], ["//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * Math.abs(arr[i]);\n  }\n  return sum;\n}"], ["//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  let minPath = [];\n  let visited = [];\n  let visitedIndex = [];\n  let visitedValue = [];\n  let currentIndex = 0;\n  let currentValue = 0;\n  let currentIndexValue = 0;\n  let currentIndexValueIndex = 0;\n  let currentIndexValueIndexValue = 0;\n  let currentIndexValueIndexValue"], ["//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n  if (n === 0) return [1, 3];\n  if (n === 1) return [1, 1];\n  if (n === 2) return [1, 1, 1];\n  return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"], ["//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  var result = 1;\n  for (var I = 0; I < n; i++) {\n    result *= 10;\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n} ```\n\nExplanation:\n\n- We start with a base of 1.\n- We iterate over the number n, and for each digit, we multiply it by 10.\n- We keep track of the result in a variable called `result`.\n- We also keep track of the number of digits we have left.\n- We keep iterating until we have reached the end of the number.\n- At the end of the loop, we have the product of the odd digits.\n\nThis implementation is efficient because we only need to iterate over the digits once."], ["//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  return string.split('').some(function(char) {\n    return char === '[' || char === ']';\n  });\n}"], ["//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  var sum = 0;\n  for (var I = 0; I < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum / 2);\n}\n```\n\nExplanation:\n\n1. We first create a variable `sum` to store the sum of squared numbers.\n2. We loop through the array `lst` and calculate the sum of squared numbers.\n3. We use the `Math.pow()` function to calculate the squared numbers.\n4. We then divide the sum by 2 to get the rounded value.\n5. Finally, we return the rounded value.\n\nThis function is efficient and easy to understand."], ["//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  return txt.slice(-1) === ' ' && !/[a-zA-Z]/.test(txt.slice(-1));\n}"], ["//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  var max = arr[0];\n  var max_index = 0;\n  for (var i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      max_index = i;\n    }\n  }\n  return max_index;\n} ```\n\nIn this function, we first create a function `can_arrange` which takes an array `arr` as input.\n\nWe then create a function `find_max_index` which takes an array `arr` as input and returns the index of the maximum element.\n\nWe then create a function `can_arrange` which takes an array `arr` as input and returns the index of the maximum element.\n\nWe then call `find_max_index` on the input array `arr` and return the index of the maximum element.\n\nFinally, we return the index of the maximum element.\n\nI hope this helps!"], ["//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  var max = 0;\n  var min = 0;\n  for (var i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      max = lst[i];\n    } else if (lst[i] > 0) {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n}\n```\n\nIn this implementation, we first check if there are any negative integers in the input array. If there are, we return them as undefined.\n\nIf there are no negative integers, we check if there are any positive integers. If there are, we return the largest and smallest integers in the array.\n\nIf there are no positive integers, we return the empty array.\n\n```javascript"], ["//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (typeof a === \"number\") {\n    if (typeof b === \"number\") {\n      return a > b ? 1 : -1;\n    } else {\n      return a > b ? 1 : -1;\n    }\n  } else if (typeof b === \"number\") {\n    return b > a ? 1 : -1;\n  } else {\n    return b > a ? 1 : -1;\n  }\n}\n"], ["//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n  return n % 2 === 0;\n}"], ["//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  if (n === 0) {\n    return 1;\n  }\n  return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n - 4);\n}\n"], ["//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  var result = text.replace(/\\s+/g, \"_\");\n  if (result.length > 2) {\n    result = result.replace(/\\s+/g, \"-\");\n  }\n  return result;\n}\n```\n\nIn this function, we are using the `replace()` method to replace all spaces in the given text with underscores. If the text has more than two consecutive spaces, we are replacing all consecutive spaces with `-`.\n\nIn the `fix_spaces()` function, we are using the `replace()` method to replace all spaces in the given text with underscores. If the text has more than two consecutive spaces, we are replacing all consecutive spaces with `-`.\n\n```javascript"], ["//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n    var regex = /^[a-z0-9_]+$/;\n    return regex.test(file_name);\n}"], ["//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    var sum = 0;\n    for (var I = 0; I < lst.length; i++) {\n        if (i % 3 === 0 && i % 4 !== 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 3 !== 0 && i % 4 === 0) {\n            sum += lst[i] * lst[i];\n        } else {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n```\n\nIn this example, we have a function called `sum_squares` that takes an array of integers as input. The function will return the sum of all entries in the array, except for those whose indexes are not multiples of 3 or 4.\n\nThe function will first check if the index is a multiple of 3. If it is, the function will square the integer entry. If it is not, the function will cube the integer entry.\n\nThe function will then iterate through the array, checking if the index is a multiple of 3 or 4. If it is, the function will add the integer entry to the sum.\n\nFinally, the function will return the sum of all entries."], ["//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  let words = [];\n  let n = sentence.length;\n  for (let I = 0; I < n; i++) {\n    let word = sentence.charAt(i);\n    if (word.length === 1) {\n      words.push(word);\n    } else {\n      let last = words[words.length - 1];\n      if (last.length === 1) {\n        words.push(last);\n      } else {\n        let first = words[0];\n        if (last.length === 1 && first.length === 1) {\n          words.push(first);\n        } else {\n          words.push(first + word);\n        }\n      }\n    }\n  }\n  return words.join(\" \");\n}"], ["//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  if (x === \"0\") {\n    return n === \"0\" ? \"0\" : n;\n  }\n  if (n === \"0\") {\n    return x;\n  }\n  if (n === \"1\") {\n    return x;\n  }\n  if (n === \"2\") {\n    return x * n;\n  }\n  if (n === \"3\") {\n    return x * n + x;\n  }\n  if (n === \"4\") {\n    return x * n + x;\n  }\n  if (n === \"5\") {\n    return x * n + x;\n  }\n  if (n === \"6\") {\n    return x * n + x;\n  }\n  if (n === \"7\") {\n    return x * n + x;\n  }\n  if (n === \"8\") {\n    return x * n + x;\n  }\n  if (n === \"9\") {\n    return x * n + x;\n  }\n  if (n === \"10\") {\n    return x * n + x;\n  }\n  if (n === \"11\") {\n    return x * n + x;\n  }\n  if (n === \"12\") {\n    return x * n + x;\n  }\n  if (n === \"13\") {\n    return x * n + x;\n  }\n  if (n === \"14\") {\n    return x *"], ["//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  const sorted = nums.sort((a, b) => a - b);\n  return sorted.map((num) => num * 10 + num);\n} ```\n\nExplanation:\n\n1. We first sort the array of integers in ascending order according to the sum of their digits.\n\n2. We then create a new array with the same length as the original array but with the sum of their digits as the index.\n\n3. We iterate over the original array and for each element, we add the sum of its digits to the corresponding index in the new array.\n\n4. We return the new array.\n\n5. We return an empty array if there are no elements in the original array.\n\n6. We return an array with the same length as the original array but with the sorted elements.\n\n7. We return an empty array if there are no elements in the original array.\n\n8. We return an empty array if there are no elements in the original array.\n\n9. We return an empty array if there are no elements in the original array.\n\n10. We return an empty array if there are no elements in the original array.\n\n11. We return an empty array if there are no elements in the original array.\n\n12. We return an empty array if there are no elements in the original array.\n\n13. We return an empty array if there are no elements in the original array.\n\n14. We return an empty array if there are no elements in the original array.\n\n15. We return an empty array if there are no elements in the original array.\n\n16. We return an empty array if there are no elements in the original array.\n\n17. We"], ["//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  return nums.filter(function(num){\n    return num > 10 && num.toString().split('').filter(function(char){\n      return char.length > 1 && char.length % 2 === 1;\n    }).length === 2;\n  }).length;\n}"], ["//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1);\n  }\n  return a.reduce((acc, curr) => {\n    if (curr % 3 === 0) {\n      return acc + curr;\n    }\n    return acc;\n  }, 0);\n}"], ["//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  var planets = [];\n  var planets2 = [];\n  var planet12 = planet1.toLowerCase();\n  var planet22 = planet2.toLowerCase();\n  var planet122 = planet12.toLowerCase();\n  var planet222 = planet22.toLowerCase();\n  var planet1222 = planet222.toLowerCase();\n  var planet12222 = planet2222.toLowerCase();\n  var planet122222 = planet22222.toLowerCase();\n  var planet1222222 = planet222222.toLowerCase();\n  var planet12222222 = planet2222222.toLowerCase();\n  var planet122222222 = planet2222222.toLowerCase();\n  var planet12222222222 = planet22222222.toLowerCase();\n  var planet122222222222 = planet22222"], ["//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  return lst.sort((a, b) => a.length - b.length);\n}"], ["//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if (n === 2) {\n        return x;\n    }\n    if (n === 3 || n === 5) {\n        return y;\n    }\n    return x + y;\n} ```\n\nIn this program, we have used the `x_or_y` function to check whether a number is a prime number or not. If it is a prime number, then it returns the value of x, otherwise it returns the value of y.\n\nIn the `main` function, we have used the `x_or_y` function to check whether a number is a prime number or not. If it is a prime number, then it returns the value of x, otherwise it returns the value of y.\n\n```javascript"], ["//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  if (lst.length === 0) return 0;\n  var sum = 0;\n  for (var i = 0; i < lst.length; i++) {\n    if (is_odd(lst[i])) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}"], ["//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  var result = [];\n  for (var i = 0; i < game.length; i++) {\n    var score = game[i];\n    var guessScore = guess[i];\n    if (score === guessScore) {\n      result.push(0);\n    } else {\n      result.push(score - guessScore);\n    }\n  }\n  return result;\n}"], ["//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  var max_strength = 0;\n  var max_index = 0;\n  for (var i = 0; i < extensions.length; i++) {\n    var strength = extensions[i].length - 1;\n    if (strength > max_strength) {\n      max_strength = strength;\n      max_index = i;\n    }\n  }\n  return extensions[max_index];\n}"], ["//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  if (a.length !== b.length) return false;\n  var i = 0;\n  while (i < a.length) {\n    if (a[i] !== b[i]) return false;\n    i++;\n  }\n  return true;\n}\n```\n\nIn this implementation, we use a `for` loop to iterate over the first word and the second word. We check if the current character in the second word is the same as the current character in the first word. If it is, we return `false`. Otherwise, we return `true`."], ["//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  var result = [];\n  var count = 0;\n  while (num > 0) {\n    var remainder = num % 10;\n    if (remainder % 2 === 0) {\n      count++;\n    }\n    num = Math.floor(num / 10);\n  }\n  result.push(count);\n  return result;\n}\n\nmodule.exports = even_odd_count;"], ["//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  let result = \"\";\n  let roman = \"\";\n  let num = number;\n  while (num > 0) {\n    roman += (num % 10) + \"\";\n    num = Math.floor(num / 10);\n  }\n  result = roman.toLowerCase();\n  return result;\n} ```\n\nThe `int_to_mini_roman` function takes an integer `number` as input and returns a string `result` that represents the roman numeral equivalent of `number`. The function first initializes a string `roman` with an empty string. Then, it loops through the `roman` string by adding the `roman[i]` to the `result` string. The `roman[i]` is the character at index `i` of the `roman` string.\n\nThe `roman[i]` character is either an `i` or a `v` depending on whether the `i`th digit of `number` is a `v` or an `i`. If the `i`th digit of `number` is a `v`, then `roman[i]` is `v`. If the `i`th digit of `number` is an `i`, then `roman[i]` is `i`.\n\nThe `roman[i]` character is added to the `result` string by concatenating it with the `roman[i]` character. The `roman[i]` character is added to the `result` string by concatenating it with the `roman[i]` character.\n\nThe `roman[i]` character is added to the `result` string by concatenating it with the `roman[i]` character. The `roman["], ["//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n  return a + b > c;\n} ```\n\nI hope this helps! Let me know if you have any other questions."], ["//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  let max_length = 0;\n  let max_word = \"\";\n  for (let word of words) {\n    let length = word.length;\n    if (length > max_length) {\n      max_length = length;\n      max_word = word;\n    }\n  }\n  return max_word;\n}"], ["//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  if (need < 0 || need > 1000) {\n    return [0, 0];\n  }\n  if (remaining < 0 || remaining > 1000) {\n    return [0, 0];\n  }\n  if (number === 0) {\n    return [0, 0];\n  }\n  if (need === 0) {\n    return [number, 0];\n  }\n  if (remaining === 0) {\n    return [number, 0];\n  }\n  return [number - need, remaining - need];\n} ```\n\nThe `eat` function takes three arguments: `number`, `need`, and `remaining`. The `number` is the number of carrots that the rabbit"], ["//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  var result = 0;\n  var length = operator.length;\n  var operand_length = operand.length;\n  for (var i = 0; i < length; i++) {\n    if (i < operand_length) {\n      result += operator[i] * operand[i];\n    } else {\n      result += operator[i];\n    }\n  }\n  return result;\n}\n```\n\nIn this function, we first check if the length of the operator array is equal to the length of the operand array minus one. If it is, we have at least one operator, and at least two operands.\n\nWe then loop through the operator array and add the corresponding operator to the result.\n\nWe then loop through the operand array and multiply the corresponding operand by the result.\n\nFinally, we return the result.\n\nNote that we use the length of the operator array to determine the number of operators, and the length of the operand array minus one to determine the number of operands."], ["//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n  if (s.length === 0) return s;\n  let result = s.split('').reverse().join('');\n  if (result === s) result = result.toUpperCase();\n  return result;\n}\n```\n\nExplanation:\n\n1. We start by initializing a variable `result` to hold the reversed string.\n2. We loop through the string `s` and for each character, we check if it is a letter.\n3. If it is a letter, we reverse its case from lower to upper or vice versa.\n4. If the string contains no letters, we simply return the original string.\n5. If the string contains only one letter, we simply return the letter.\n6. If the string contains multiple letters, we simply return the first letter.\n7. We return the resulting string.\n\nTime complexity: O(n) where n is the length of the input string.\n\nSpace complexity: O(1) since we are only using one variable `result`."], ["//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if (text === undefined || text === null) {\n    return undefined;\n  }\n  var hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n}"], ["//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  var result = [];\n  var i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 1;\n  }\n  return result;\n} ```\n\nIn this implementation, we use a `for` loop to iterate over the range of `a` to `b`, and then we use a `while` loop to generate the even digits between `a` and `b`. We start with `a` and increment it until we reach `b`, and then we increment `b` until we reach `a`. We then return the even digits between `a` and `b`."]]