[["# <func> # Shell\n#!/bin/bash\n# Check if in given list of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> $(has_close_elements \"1.0 2.0 3.0\" \"0.5\")\n# \"false\"\n# >>> $(has_close_elements \"1.0 2.8 3.0 4.0 5.0 2.0\" \"0.3\")\n# \"true\"\n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n    local list=$1\n    local threshold=$2\n    local i\n    for i in $(seq 1 $#); do\n        local element=$(echo \"$list\" | awk '{print $i}')\n        local element_value=$(echo \"$list\" | awk '{print $i}')\n        if [[ \"$element_value\" -lt \"$element\" ]]; then\n            return 0\n        fi\n    done\n    return 1"], ["# <func> # Shell\n#!/bin/bash\n# Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n# separate those group into separate strings and return the list of those.\n# Separate groups are balanced (each open brace is properly closed) and not nested within each other\n# Ignore any spaces in the input string.\n# >>> $(separate_paren_groups \"( ) (( )) (( )( ))\")\n# ['\"()\"', '\"(())\"', '\"(()())\"']\n#\n# $1 is a string\nseparate_paren_groups() {\n    local input=$1\n    local result=()\n    local open_braces=()\n    local close_braces=()\n    local open_braces_count=0\n    local close_braces_count=0\n    local open_braces_index=0\n    local close_braces_index=0\n    local open_braces_count_index=0\n    local close_braces_count_index=0\n    local open_braces_count_index_2=0\n    local close_braces_count_index_2=0\n    local open_braces_index_2=0\n    local close_braces_index_2=0\n    local open_braces_count_index_3=0\n    local close_braces_count_index_3=0\n    local open_braces_index_3=0\n    local close_braces_index_3=0\n    local open_braces_count_index_4=0\n    local close_braces_count_index_4=0\n    local open_braces_index_4=0\n    local close_braces_index_4=0\n    local open_braces_count_index_5=0\n    local close_braces_count_index_5=0\n    local open_braces_index_5=0\n    local close_braces_index_5=0\n    local open_braces_count_index_6=0\n    local close_braces_count_index_6=0\n    local open_braces_index_6=0\n    local close"], ["# <func> # Shell\n#!/bin/bash\n# Given a positive floating point number, it can be decomposed into\n# and integer part (largest integer smaller than given number) and decimals\n# (leftover part always smaller than 1).\n# Return the decimal part of the number.\n# >>> $(truncate_number \"3.5\")\n# \"0.5\"\n#\n# $1 is a floating point\ntruncate_number() {\n    local num=\"$1\"\n    local decimals=0\n    local integer=0\n    local decimal_part=0\n\n    while [ \"$num\" -ge 10 ]\n    do\n        decimal_part=$(echo \"$num\" | tr \".\" \" \")\n        integer=$(echo \"$num\" | tr \".\" \" \")\n        num=$((num - integer))\n        decimals=$((decimals + 1))\n    done\n\n    echo \"$decimal_part\""], ["# <func> # Shell\n#!/bin/bash\n# You're given a list of deposit and withdrawal operations on a bank account that starts with\n# zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n# at that point function should return true. Otherwise it should return false.\n# >>> $(below_zero \"1 2 3\")\n# \"false\"\n# >>> $(below_zero \"1 2 -4 5\")\n# \"true\"\n#\n# $1 is a space-separated list\nbelow_zero() {\n    local list=\"$1\"\n    local balance=0\n    for op in \"$list\"; do\n        case \"$op\" in\n            \"+\"|\"-\")\n                balance=$((balance + \"$2\"))\n                ;;\n            \"*\"|\"/\"|\"%\"|\"^\")\n                balance=$((balance * \"$2\"))\n                ;;\n            \"=\")\n                balance=$((balance + \"$3\"))\n                ;;\n            \">\")\n                balance=$((balance - \"$2\"))\n                ;;\n            \"<\")\n                balance=$((balance + \"$2\"))\n                ;;\n            \">=\")\n                balance=$((balance - \"$2\"))\n                ;;\n            \"<=\")\n                balance=$((balance + \"$2\"))\n                ;;\n            \"==\")\n                balance=$((balance + \"$3\"))\n                ;;\n            \"!=\")\n                balance=$((balance - \"$2\"))\n                ;;\n            \"&\")\n                balance=$((balance + \"$3\"))\n                ;;\n            \"|\")\n                balance=$((balance - \"$2\"))\n                ;;\n            \"&=\")\n                balance=$((balance + \"$3\"))\n                ;;\n            \"|=\")\n                balance=$((balance - \"$2\"))\n                ;;\n            \"&=\")\n                balance=$((balance + \"$3\"))\n                ;;\n            \"|=\")\n                balance=$((balance - \"$2\"))\n                ;;\n            \"&=\")\n                balance=$((balance + \"$3\"))\n                ;;\n            \"|=\")\n                balance=$((balance - \"$2\"))\n                ;;\n            \"&=\")"], ["# <func> # Shell\n#!/bin/bash\n# For a given list of input numbers, calculate Mean Absolute Deviation\n# around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute difference between each\n# element and a centerpoint (mean in this case):\n# MAD = average | x - x_mean |\n# >>> $(mean_absolute_deviation \"1.0 2.0 3.0 4.0\")\n# \"1.0\"\n#\n# $1 is a space-separated list\nmean_absolute_deviation() {\n    local input=$1\n    local mean=$2\n    local std=$3\n    local mean_abs_deviation\n\n    mean_abs_deviation=$(echo \"$input\" | tr ' ' '\\n' | sort -n | tail -n 1)\n    mean_abs_deviation=$(echo \"$mean_abs_deviation\" | tr ' ' '\\n' | sort -n | tail -n 1)\n    mean_abs_deviation=$(echo \"$mean_abs_deviation\" | tr ' ' '\\n' | sort -n | tail -n 1)\n    mean_abs_deviation=$(echo \"$mean_abs_deviation\" | tr ' ' '\\n' | sort -n | tail -n 1)\n    mean_abs_deviation=$(echo \"$mean_abs_deviation\" | tr ' ' '\\n' | sort -n | tail -n 1)\n    mean_abs_deviation=$(echo \"$mean_abs_deviation\" | tr ' ' '\\n' | sort -n | tail -n 1)\n    mean_abs_deviation=$(echo \"$mean_abs_deviation\" | tr ' ' '\\n' | sort -n | tail -n 1)\n    mean_abs_deviation=$(echo \"$mean_abs_deviation\" | tr ' ' '\\n' | sort -n | tail -n 1)\n    mean_abs_deviation=$(echo \"$mean_abs_deviation\" | tr ' ' '\\n' | sort -n | tail -n 1)\n    mean_abs_deviation=$(echo \"$mean_abs_deviation\" | tr ' ' '\\n' | sort -n |"], ["# <func> # Shell\n#!/bin/bash\n# Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n# >>> $(intersperse \"\" \"4\")\n# []\n# >>> $(intersperse \"1 2 3\" \"4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"4\"', '\"3\"']\n#\n# $1 is a space-separated list\n# $2 is an integer\nintersperse() {\n    local delimeter=\"$1\"\n    shift\n    local list=\"$*\"\n    local delimeter_index\n    local delimeter_length\n    local result\n    local i\n\n    delimeter_index=$(echo \"$list\" | cut -d \" \" -f 1)\n    delimeter_length=$(echo \"$list\" | cut -d \" \" -f 2)\n\n    result=$(echo \"$list\" | sed -n \"${delimeter_index}p\" | tr -d \" \")\n    result=\"${result// /${delimeter}}\"\n\n    for I in $(seq 1 \"$delimeter_length\"); do\n        result+=\"${result#*${delimeter}}\"\n    done\n\n    result+=\"${result#*${delimeter}}\"\n\n    echo \"$result\""], ["# <func> # Shell\n#!/bin/bash\n# Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n# For each of the group, output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"(()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1 is a string\nparse_nested_parens() {\n    local level\n    local result\n    local level_str\n    local level_str_len\n    local level_str_end\n    local level_str_start\n    local level_str_end_pos\n    local level_str_end_pos_end\n    local level_str_end_pos_end_str\n    local level_str_end_pos_end_str_len\n    local level_str_end_pos_end_str_len_end\n    local level_str_end_pos_end_str_len_end_str\n    local level_str_end_pos_end_str_len_end_str_len\n    local level_str_end_pos_end_str_len_end_str_len_end\n    local level_str_end_pos_end_str_len_end_str_len_end_str\n    local level_str_end_pos_end_str_len_end_str_len_end_str_len_end\n    local level_str_end_pos_end_str_len_end_str_len_end_str_len_end_str\n    local level_str_end_pos_end_str_len_end_str_len_end_str_len_end_str_len_end\n    local level_str_end_pos_end_str_len_end_str_len_end_str_len_end_str_len_end_str_len_end\n    local level_str_end_pos_end_str_len_end_str_len_end_str_len_end_str_len_end_str_len"], ["# <func> # Shell\n#!/bin/bash\n# For a given list of integers, return a list consisting of a sum and a product of all the integers in a list.\n# Empty sum should be equal to 0 and empty product should be equal to 1.\n# >>> $(sum_product \"\")\n# ['\"0\"', '\"1\"']\n# >>> $(sum_product \"1 2 3 4\")\n# ['\"10\"', '\"24\"']\n#\n# $1 is a space-separated list\nsum_product() {\n    local list=\"$1\"\n    local sum=0\n    local prod=1\n    for I in \"${list[@]}\"; do\n        ((prod *= i))\n        ((sum += i))\n    done\n    echo \"$sum\"\n    echo \"$prod\""], ["# <func> # Shell\n#!/bin/bash\n# From a given list of integers, generate a list of rolling maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"', '\"4\"']\n#\n# $1 is a space-separated list\nrolling_max() {\n    local max_list\n    max_list=$(echo \"$1\" | tr ' ' '\\n')\n    local max_index\n    max_index=$(echo \"$max_list\" | tail -n 1)\n    local max_value\n    max_value=$(echo \"$max_list\" | head -n 1)\n    echo \"$max_value\""], ["# <func> # Shell\n#!/bin/bash\n# Find the shortest palindrome that begins with a supplied string.\n# Algorithm idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n# - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n# >>> $(make_palindrome \"\")\n# \"\"\n# >>> $(make_palindrome \"cat\")\n# \"catac\"\n# >>> $(make_palindrome \"cata\")\n# \"catac\"\n#\n# $1 is a string\nmake_palindrome() {\n    local str=\"$1\"\n    local palindrome_prefix=\"\"\n    local palindrome_suffix=\"\"\n    local palindrome_length\n    local palindrome_reverse\n\n    # Find the longest postfix of supplied string that is a palindrome.\n    while IFS= read -r line; do\n        palindrome_prefix=\"${line:0:1}\"\n        palindrome_suffix=\"${line:1:1}\"\n        palindrome_length=\"${#palindrome_prefix}\"\n        palindrome_reverse=\"${palindrome_suffix:1:1}\"\n        palindrome_reverse=\"${palindrome_reverse:1:1}\"\n        palindrome_reverse=\"${palindrome_reverse:1:1}\"\n        palindrome_reverse=\"${palindrome_reverse:1:1}\"\n        palindrome_reverse=\"${palindrome_reverse:1:1}\"\n        palindrome_reverse=\"${palindrome_reverse:1:1}\"\n        palindrome_reverse=\"${palindrome_reverse:1:1}\"\n        palindrome_reverse=\"${palindrome_reverse:1:1}\"\n        palindrome_reverse=\"${palindrome_reverse:1:1}\"\n        palindrome_reverse=\"${palindrome_reverse:1:1}\"\n        palindrome_reverse=\"${palindrome_reverse:1:1}\"\n        palindrome_reverse=\"${palindrome_reverse:1:1}\"\n        palindrome_reverse=\"${palindrome_reverse:1:1}\"\n        palindrome_reverse=\"${"], ["# <func> # Shell\n#!/bin/bash\n# Input are two strings a and b consisting only of 1s and 0s.\n# Perform binary XOR on these inputs and return result also as a string.\n# >>> $(string_xor \"010\" \"110\")\n# \"100\"\n#\n# $1 is a string\n# $2 is a string\nstring_xor() {\n    local a=$1\n    local b=$2\n    local result\n    result=$(echo \"$a\" | tr '01' '10')\n    result=$(echo \"$b\" | tr '01' '10')\n    echo \"$result\""], ["# <func> # Shell\n#!/bin/bash\n# Out of list of strings, return the longest one. Return the first one in case of multiple\n# strings of the same length. Return None in case the input list is empty.\n# >>> $(longest \"\")\n# \"None\"\n# >>> $(longest \"a b c\")\n# \"a\"\n# >>> $(longest \"a bb ccc\")\n# \"ccc\"\n#\n# $1 is a space-separated list\nlongest() {\n    local I=0\n    local L=0\n    while I < ${#1}\n    do\n        L=${L}\n        I=$((i+1))\n    done\n    I=0\n    L=0\n    while I < ${#1}\n    do\n        L=${L}\n        I=$((i+1))\n    done\n    I=0\n    L=0\n    while I < ${#1}\n    do\n        L=${L}\n        I=$((i+1))\n    done\n    I=0\n    L=0\n    while I < ${#1}\n    do\n        L=${L}\n        I=$((i+1))\n    done\n    I=0\n    L=0\n    while I < ${#1}\n    do\n        L=${L}\n        I=$((i+1))\n    done\n    I=0\n    L=0\n    while I < ${#1}\n    do\n        L=${L}\n        I=$((i+1))\n    done\n    I=0\n    L=0\n    while I < ${#1}\n    do\n        L=${L}\n        I=$((i+1))\n    done\n    I=0\n    L=0\n    while I < ${#1}\n    do\n        L=${L}\n        I=$((i+1))\n    done\n    I=0\n    L=0\n    while I < ${#1}\n    do\n        L=${L}\n        I=$((i+1))\n    done\n    I=0\n    L=0\n    while I < ${#1}\n    do\n        L=${L}\n        I=$(("], ["# <func> # Shell\n#!/bin/bash\n# Return a greatest common divisor of two integers a and b\n# >>> $(greatest_common_divisor \"3\" \"5\")\n# \"1\"\n# >>> $(greatest_common_divisor \"25\" \"15\")\n# \"5\"\n#\n# $1 is an integer\n# $2 is an integer\ngreatest_common_divisor() {\n    local a=$1 b=$2\n    local gcd\n    gcd=1\n    while [ $a -ne 0 ]\n    do\n        gcd=$((gcd * a % b))\n        ((a = b))\n    done\n    echo $gcd"], ["# <func> # Shell\n#!/bin/bash\n# Return list of all prefixes from shortest to longest of the input string\n# >>> $(all_prefixes \"abc\")\n# ['\"a\"', '\"ab\"', '\"abc\"']\n#\n# $1 is a string\nall_prefixes() {\n    local prefix\n    for prefix in \"$@\"; do\n        echo \"$prefix\"\n    done"], ["# <func> # Shell\n#!/bin/bash\n# Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n# >>> $(string_sequence \"0\")\n# \"0\"\n# >>> $(string_sequence \"5\")\n# \"0 1 2 3 4 5\"\n#\n# $1 is an integer\nstring_sequence() {\n    local n=\"$1\"\n    shift\n    local str=\"\"\n    for ((i=0; i<$n; i++)); do\n        str=\"$str $1\"\n    done\n    echo \"$str\""], ["# <func> # Shell\n#!/bin/bash\n# Given a string, find out how many distinct characters (regardless of case) does it consist of\n# >>> $(count_distinct_characters \"xyzXYZ\")\n# \"3\"\n# >>> $(count_distinct_characters \"Jerry\")\n# \"4\"\n#\n# $1 is a string\ncount_distinct_characters() {\n  local string=\"$1\"\n  local count=0\n  for char in $string; do\n    if [[ \"$char\" == \"$(echo \"$char\" | tr '[:upper:]' '[:lower:]')\" ]]; then\n      count=$((count + 1))\n    fi\n  done\n  echo \"$count\""], ["# <func> # Shell\n#!/bin/bash\n# Input to this function is a string representing musical notes in a special ASCII format.\n# Your task is to parse this string and return list of integers corresponding to how many beats does each\n# not last.\n# Here is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o| .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"', '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\nparse_music() {\n  local input=$1\n  local output=()\n  local i\n  for ((i=0; i<${#input[@]}; i++)); do\n    if [[ $input[i] == \"o\" ]]; then\n      output+=(\"${i+1}\")\n    elif [[ $input[i] == \"o|\" ]]; then\n      output+=(\"${i+1}:${i+2}\")\n    elif [[ $input[i] == \".\" ]]; then\n      output+=(\"${i+1}:${i+2}:${i+3}\")\n    else\n      output+=(\"${i+1}:${i+2}:${i+3}:${i+4}\")\n    fi\n  done\n  return \"${output[@]}\""], ["# <func> # Shell\n#!/bin/bash\n# Find how many times a given substring can be found in the original string. Count overlaping cases.\n# >>> $(how_many_times \"\" \"a\")\n# \"0\"\n# >>> $(how_many_times \"aaa\" \"a\")\n# \"3\"\n# >>> $(how_many_times \"aaaa\" \"aa\")\n# \"3\"\n#\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    local string=$1\n    local substring=$2\n    local count=0\n    local index=0\n    while read -r line; do\n        if [[ $line =~ $substring ]]; then\n            count=$((count + 1))\n        fi\n        index=$((index + 1))\n    done <<< \"$string\"\n    echo \"$count\""], ["# <func> # Shell\n#!/bin/bash\n# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n# Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to largest\n# >>> $(sort_numbers \"three one five\")\n# \"one three five\"\n#\n# $1 is a string\nsort_numbers() {\n    local nums=\"$1\"\n    local sorted_nums\n    sorted_nums=$(echo \"$nums\" | tr ' ' '\\n')\n    local sorted_nums_len=$(echo \"$sorted_nums\" | wc -l)\n    local sorted_nums_str\n    sorted_nums_str=$(echo \"$sorted_nums\" | tr '\\n' ' ')\n    local sorted_nums_str_len=$(echo \"$sorted_nums_str\" | wc -l)\n    local sorted_nums_str_len_minus_one=$(echo \"$sorted_nums_str_len\" | awk '{print $1-1}')\n    local sorted_nums_str_len_minus_one_minus_two=$(echo \"$sorted_nums_str_len_minus_one\" | awk '{print $1-2}')\n    local sorted_nums_str_len_minus_one_minus_two_minus_three=$(echo \"$sorted_nums_str_len_minus_one\" | awk '{print $1-3}')\n    local sorted_nums_str_len_minus_one_minus_two_minus_three_minus_four=$(echo \"$sorted_nums_str_len_minus_one\" | awk '{print $1-4}')\n    local sorted_nums_str_len_minus_one_minus_two_minus_three_minus_four_minus_five=$(echo \"$sorted_nums_str_len_minus_one\" | awk '{print $1-5}')\n    local sorted_nums_str_len_minus_one_minus_two_minus_three_minus_four_minus_five_minus_six"], ["# <func> # Shell\n#!/bin/bash\n# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\n# >>> $(find_closest_elements \"1.0 2.0 3.0 4.0 5.0 2.2\")\n# ['\"2.0\"', '\"2.2\"']\n# >>> $(find_closest_elements \"1.0 2.0 3.0 4.0 5.0 2.0\")\n# ['\"2.0\"', '\"2.0\"']\n#\n# $1 is a space-separated list\nfind_closest_elements() {\n    local list=\"$1\"\n    local closest_index\n    local closest_element\n    local closest_distance\n    local closest_element_index\n    local closest_element_distance\n    local closest_element_index_2\n    local closest_element_distance_2\n    local closest_element_index_3\n    local closest_element_distance_3\n    local closest_element_index_4\n    local closest_element_distance_4\n    local closest_element_index_5\n    local closest_element_distance_5\n    local closest_element_index_6\n    local closest_element_distance_6\n    local closest_element_index_7\n    local closest_element_distance_7\n    local closest_element_index_8\n    local closest_element_distance_8\n    local closest_element_index_9\n    local closest_element_distance_9\n    local closest_element_index_10\n    local closest_element_distance_10\n    local closest_element_index_11\n    local closest_element_distance_11\n    local closest_element_index_12\n    local closest_element_distance_12\n    local closest_element_index_13\n    local closest_element_distance_13\n    local closest_element_index_14\n    local closest_element_distance_14\n    local closest_element_index_15\n    local closest_element_distance_15\n   "], ["# <func> # Shell\n#!/bin/bash\n# Given list of numbers (of at least two elements), apply a linear transform to that list,\n# such that the smallest number will become 0 and the largest will become 1\n# >>> $(rescale_to_unit \"1.0 2.0 3.0 4.0 5.0\")\n# ['\"0.0\"', '\"0.25\"', '\"0.5\"', '\"0.75\"', '\"1.0\"']\n#\n# $1 is a space-separated list\nrescale_to_unit() {\n    local nums=$1\n    local unit=$2\n    local min=$3\n    local max=$4\n    local result\n\n    result=$(echo \"$nums\" | sed -e \"s/^[[:space:]]*//\" -e \"s/[[:space:]]*$//\")\n    result=$(echo \"$result\" | sed -e \"s/^[[:space:]]*//\" -e \"s/[[:space:]]*$//\")\n    result=$(echo \"$result\" | sed -e \"s/^[[:space:]]*//\" -e \"s/[[:space:]]*$//\")\n    result=$(echo \"$result\" | sed -e \"s/^[[:space:]]*//\" -e \"s/[[:space:]]*$//\")\n    result=$(echo \"$result\" | sed -e \"s/^[[:space:]]*//\" -e \"s/[[:space:]]*$//\")\n    result=$(echo \"$result\" | sed -e \"s/^[[:space:]]*//\" -e \"s/[[:space:]]*$//\")\n    result=$(echo \"$result\" | sed -e \"s/^[[:space:]]*//\" -e \"s/[[:space:]]*$//\")\n\n    result=$(echo \"$result\" | sed -e \"s/^[[:space:]]*//\" -e \"s/[[:space:]]*$//\")\n    result=$(echo \"$result\" | sed -e \"s/^[[:space:]]*//\" -e \"s/[[:space:]]*$//\")\n    result=$("], ["# <func> # Shell\n#!/bin/bash\n# Filter given list of any shthon values only for integers\n# >>> $(filter_integers \"a 3.14 5\")\n# ['\"5\"']\n# >>> $(filter_integers \"1 2 3 abc  \")\n# ['\"1\"', '\"2\"', '\"3\"']\n#\n# $1 is a space-separated list\nfilter_integers() {\n    local list=\"$1\"\n    local filtered_list\n    filtered_list=$(echo \"$list\" | tr ' ' '\\n')\n    echo \"$filtered_list\""], ["# <func> # Shell\n#!/bin/bash\n# Return length of given string\n# >>> $(strlen \"\")\n# \"0\"\n# >>> $(strlen \"abc\")\n# \"3\"\n#\n# $1 is a string\nstrlen() {\n    local str=\"$1\"\n    if [[ -z \"$str\" ]]; then\n        return 0\n    fi\n    local len=0\n    for ((i=0; i<$#str; i++)); do\n        len=$((len+1))\n    done\n    return $len"], ["# <func> # Shell\n#!/bin/bash\n# For a given number n, find the largest number that divides n evenly, smaller than n\n# >>> $(largest_divisor \"15\")\n# \"5\"\n#\n# $1 is an integer\nlargest_divisor() {\n    local n=$1\n    local divisor\n    divisor=$(echo \"$n\" | awk '{print $1}')\n    if [ \"$divisor\" -le \"$n\" ]; then\n        divisor=$n\n    fi\n    for ((i=2; i<=sqrt($divisor); i++)); do\n        if [ \"$divisor\" -div $i ]; then\n            divisor=$i\n            break\n        fi\n    done\n    echo \"$divisor\""], ["# <func> # Shell\n#!/bin/bash\n# Return list of prime factors of given integer in the order from smallest to largest.\n# Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n# Input number should be equal to the product of all factors\n# >>> $(factorize \"8\")\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\nfactorize() {\n    local num=$1\n    local factors=()\n    local count=0\n    local factor\n    for ((i=2; i<=sqrt($num); i++)); do\n        if ((i <= $num / $i)); then\n            factor=$(printf \"%d\\n\" \"$i\")\n            if ((count == 0)); then\n                factors[count]=$factor\n                count=0\n            else\n                factors[count]=$factor\n                count=$((count + 1))\n            fi\n        fi\n    done\n    printf \"%s\\n\" \"${factors[@]}\""], ["# <func> # Shell\n#!/bin/bash\n# From a list of integers, remove all elements that occur more than once.\n# Keep order of elements left the same as in the input.\n# >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n# $1 is a space-separated list\nremove_duplicates() {\n    local list=$1\n    local result=()\n    for I in \"${list[@]}\"; do\n        if [[ -n \"${result[*]}\" ]]; then\n            result=(\"${result[@]}\" \"${i}\")\n        else\n            result=(\"${i}\")\n        fi\n    done\n    echo \"${result[@]}\""], ["# <func> # Shell\n#!/bin/bash\n# For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n# >>> $(flip_case \"Hello\")\n# \"hELLO\"\n#\n# $1 is a string\nflip_case() {\n  local str=\"$1\"\n  echo \"${str//[[:lower:]]/[[:upper:]]}\""], ["# <func> # Shell\n#!/bin/bash\n# Concatenate list of strings into a single string\n# >>> $(concatenate \"\")\n# \"\"\n# >>> $(concatenate \"a b c\")\n# \"abc\"\n#\n# $1 is a space-separated list\nconcatenate() {\n    local list=\"$1\"\n    echo \"${list// / }\""], ["# <func> # Shell\n#!/bin/bash\n# Return only positive numbers in the list.\n# >>> $(get_positive \"-1 2 -4 5 6\")\n# ['\"2\"', '\"5\"', '\"6\"']\n# >>> $(get_positive \"5 3 -5 2 -3 3 9 0 123 1 -10\")\n# ['\"5\"', '\"3\"', '\"2\"', '\"3\"', '\"9\"', '\"123\"', '\"1\"']\n#\n# $1 is a space-separated list\nget_positive() {\n  local list=\"$1\"\n  local result=()\n  for item in $list; do\n    if [[ \"$item\" =~ ^[+-]?[0-9]+$ ]]; then\n      result+=(\"$item\")\n    fi\n  done\n  echo \"${result[@]}\""], ["# <func> # Shell\n#!/bin/bash\n# Return true if a given number is prime, and false otherwise.\n# >>> $(is_prime \"6\")\n# \"false\"\n# >>> $(is_prime \"101\")\n# \"true\"\n# >>> $(is_prime \"11\")\n# \"true\"\n# >>> $(is_prime \"13441\")\n# \"true\"\n# >>> $(is_prime \"61\")\n# \"true\"\n# >>> $(is_prime \"4\")\n# \"false\"\n# >>> $(is_prime \"1\")\n# \"false\"\n#\n# $1 is an integer\nis_prime() {\n    local num=$1\n    if [ $num -eq 0 ] || [ $num -eq 1 ] || [ $num -eq 2 ] || [ $num -eq 3 ] || [ $num -eq 4 ] || [ $num -eq 5 ] || [ $num -eq 6 ] || [ $num -eq 7 ] || [ $num -eq 8 ] || [ $num -eq 9 ] || [ $num -eq 10 ] || [ $num -eq 11 ] || [ $num -eq 12 ] || [ $num -eq 13 ] || [ $num -eq 14 ] || [ $num -eq 15 ] || [ $num -eq 16 ] || [ $num -eq 17 ] || [ $num -eq 18 ] || [ $num -eq 19 ] || [ $num -eq 20 ] || [ $num -eq 21 ] || [ $num -eq 22 ] || [ $num -eq 23 ] || [ $num -eq 24 ] || [ $num -eq 25 ] || [ $num -eq 26 ] || [ $num -eq 27 ] || [ $num -eq 28 ] || [ $num -eq 29 ] || [ $num -eq 30 ] || [ $num -eq 31 ] || [ $num -eq 32 ] || [ $num -eq 33 ] || [ $num -eq 34 ] || [ $num -eq "], ["# <func> # Shell\n#!/bin/bash\n# This function takes a list l and returns a list l' such that\n# l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n# to the values of the corresponding indicies of l, but sorted.\n# >>> $(sort_third \"1 2 3\")\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> $(sort_third \"5 6 3 4 8 9 2\")\n# ['\"2\"', '\"6\"', '\"3\"', '\"4\"', '\"8\"', '\"9\"', '\"5\"']\n#\n# $1 is a space-separated list\nsort_third() {\n    local l=$1\n    local l'\n    local i\n    local j\n    local k\n    local l_len\n    local l_i\n    local l_j\n    local l_k\n    local l_l\n    local l_l_i\n    local l_l_j\n    local l_l_k\n    local l_l_l\n    local l_l_l_i\n    local l_l_l_j\n    local l_l_l_k\n    local l_l_l_l\n    local l_l_l_l_i\n    local l_l_l_l_j\n    local l_l_l_l_k\n    local l_l_l_l_l_i\n    local l_l_l_l_k\n    local l_l_l_l_k_i\n    local l_l_l_l_k_j\n    local l_l_l_l_k_j_i\n    local l_l_l_l_k_j_i_i\n    local l_l_l_l_k_j_i_i_i\n    local l_l_l_l_k_j_i_i_i_i\n    local l_l_l_l_k_j_i_i_i_i_i\n    local l_l_l_l_k_j_"], ["# <func> # Shell\n#!/bin/bash\n# Return sorted unique elements in a list\n# >>> $(unique \"5 3 5 2 3 3 9 0 123\")\n# ['\"0\"', '\"2\"', '\"3\"', '\"5\"', '\"9\"', '\"123\"']\n#\n# $1 is a space-separated list\nunique() {\n    local list=\"$1\"\n    local sorted_list\n    sorted_list=$(echo \"$list\" | sort -V | uniq)\n    echo \"$sorted_list\""], ["# <func> # Shell\n#!/bin/bash\n# Return maximum element in the list.\n# >>> $(max_element \"1 2 3\")\n# \"3\"\n# >>> $(max_element \"5 3 -5 2 -3 3 9 0 123 1 -10\")\n# \"123\"\n#\n# $1 is a space-separated list\nmax_element() {\n    local list=\"$1\"\n    local max\n    for ((i=0; i<${#list[@]}; i++)); do\n        max=${list[$i]}\n        if [[ $max -gt $max ]]; then\n            max=$max\n        fi\n    done\n    echo \"$max\""], ["# <func> # Shell\n#!/bin/bash\n# Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n# >>> $(fizz_buzz \"50\")\n# \"0\"\n# >>> $(fizz_buzz \"78\")\n# \"2\"\n# >>> $(fizz_buzz \"79\")\n# \"3\"\n#\n# $1 is an integer\nfizz_buzz() {\n    local n=\"$1\"\n    local fizz=\"\"\n    local buzz=\"\"\n    for I in $(seq 1 $n); do\n        if [ $i -eq 7 ]; then\n            fizz=\"$fizz\"\n        elif [ $i -eq 13 ]; then\n            buzz=\"$buzz\"\n        fi\n    done\n    echo \"$fizz\"\n    echo \"$buzz\""], ["# <func> # Shell\n#!/bin/bash\n# This function takes a list l and returns a list l' such that\n# l' is identical to l in the odd indicies, while its values at the even indicies are equal\n# to the values of the even indicies of l, but sorted.\n# >>> $(sort_even \"1 2 3\")\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> $(sort_even \"5 6 3 4\")\n# ['\"3\"', '\"6\"', '\"5\"', '\"4\"']\n#\n# $1 is a space-separated list\nsort_even() {\n    local l=\"$1\"\n    local n=0\n    local l'=()\n    for I in $(seq 1 $n); do\n        local I_l=$(echo \"$l\" | awk '{print $i}')\n        if [[ \"$i_l\" -eq \"$i\" ]]; then\n            l'[n+1]=$i_l\n        else\n            l'[n+1]=$i_l; n=$((n+1))\n        fi\n    done\n    echo \"${l'[n+1]'}\""], ["# <func> # Shell\n#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n# \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib() {\n    local n\n    n=$1\n    if [ $n -eq 0 ] || [ $n -eq 1 ]; then\n        echo \"Error: $n is not a number\"\n        return 1\n    fi\n    if [ $n -eq 2 ]; then\n        echo \"Error: $n is not a number\"\n        return 1\n    fi\n    local fibonacci_num\n    fibonacci_num=$(( n - 1 ))\n    fibonacci_num=$(( fibonacci_num + 1 ))\n    fibonacci_num=$(( fibonacci_num + 1 ))\n    fibonacci_num=$(( fibonacci_num + 1 ))\n    fibonacci_num=$(( fibonacci_num + 1 ))\n    fibonacci_num=$(( fibonacci_num + 1 ))\n    fibonacci_num=$(( fibonacci_num + 1 ))\n    fibonacci_num=$(( fibonacci_num + 1 ))\n    fibonacci_num=$(( fibonacci_num + 1 ))\n    fibonacci_num=$(( fibonacci_num + 1 ))\n    fibonacci_num=$(( fibonacci_num + 1 ))\n    fibonacci_num=$(( fibonacci_num + 1 ))\n    fibonacci_num=$(( fibonacci_num + 1 ))\n    fibonacci_num=$(( fibonacci_num + 1 ))\n    fibonacci_num=$(( fibonacci_num + 1 ))\n"], ["# <func> # Shell\n#!/bin/bash\n# triples_sum_to_zero takes a list of integers as an input.\n# it returns true if there are three distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> $(triples_sum_to_zero \"1 3 5 0\")\n# \"false\"\n# >>> $(triples_sum_to_zero \"1 3 -2 1\")\n# \"true\"\n# >>> $(triples_sum_to_zero \"1 2 3 7\")\n# \"false\"\n# >>> $(triples_sum_to_zero \"2 4 -5 3 9 7\")\n# \"true\"\n# >>> $(triples_sum_to_zero \"1\")\n# \"false\"\n#\n# $1 is a space-separated list\ntriples_sum_to_zero() {\n    local list=\"$1\"\n    local sum\n    local result\n    local count\n    local i\n\n    # check if the list is empty\n    if [[ -z \"$list\" ]]; then\n        return \"false\"\n    fi\n\n    # initialize the sum to zero\n    sum=0\n\n    # iterate over the list\n    for ((i=0; i<${#list[@]}; i++)); do\n        # check if the current element is a sum of the previous two elements\n        if [[ \"$list[i]\" -eq \"$list[i-1]\" && \"$list[i]\" -eq \"$list[i+1]\" ]]; then\n            # if the current element is a sum of the previous two elements,\n            # add it to the sum\n            sum+=\"$list[i]\"\n        else\n            # if the current element is not a sum of the previous two elements,\n            # subtract it from the sum\n            sum-=\"$list[i]\"\n        fi\n    done\n\n    # check if the sum is zero\n    result=false\n    if [[ \"$sum\" -eq 0 ]]; then\n        result=true\n    fi\n\n    return \"$result\""], ["# <func> # Shell\n#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long line.\n# n cars are driving left to right;  simultaneously, a different set of n cars\n# are driving right to left.   The two sets of cars start out being very far from\n# each other.  All cars move in the same speed.  Two cars are said to collide\n# when a car that's moving left to right hits a car that's moving right to left.\n# However, the cars are infinitely sturdy and strong; as a result, they continue moving\n# in their trajectory as if they did not collide.\n# This function outputs the number of such collisions.\n#\n# $1 is an integer\ncar_race_collision() {\n  for ((i=1; i<=$1; i++)); do\n    for ((j=1; j<=$1; j++)); do\n      if ((i+j<=$1)); then\n        echo \"Collision detected at $((i+j))\"\n        return 1\n      fi\n    done\n  done\n  return 0"], ["# <func> # Shell\n#!/bin/bash\n# Return list with elements incremented by 1.\n# >>> $(incr_list \"1 2 3\")\n# ['\"2\"', '\"3\"', '\"4\"']\n# >>> $(incr_list \"5 3 5 2 3 3 9 0 123\")\n# ['\"6\"', '\"4\"', '\"6\"', '\"3\"', '\"4\"', '\"4\"', '\"10\"', '\"1\"', '\"124\"']\n#\n# $1 is a space-separated list\nincr_list() {\n  local list=$1\n  local i=0\n  while [[ $i -lt ${#list} ]]; do\n    echo \"${list:i:1}\"\n    ((i++))\n  done"], ["# <func> # Shell\n#!/bin/bash\n# pairs_sum_to_zero takes a list of integers as an input.\n# it returns true if there are two distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> $(pairs_sum_to_zero \"1 3 5 0\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"1 3 -2 1\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"1 2 3 7\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"2 4 -5 3 5 7\")\n# \"true\"\n# >>> $(pairs_sum_to_zero \"1\")\n# \"false\"\n#\n# $1 is a space-separated list\npairs_sum_to_zero() {\n  local list=\"$1\"\n  local sum\n  local count\n  local result\n\n  count=0\n  sum=0\n  for ((i=0; i<${#list[@]}; i++)); do\n    if ((count == 0)); then\n      sum=$((sum + list[i]))\n    else\n      sum=$((sum + list[i] - sum))\n    fi\n    count=$((count + 1))\n  done\n\n  result=false\n  if ((count == 2)); then\n    result=true\n  fi\n\n  return $result"], ["# <func> # Shell\n#!/bin/bash\n# Change numerical base of input number x to base.\n# return string representation after the conversion.\n# base numbers are less than 10.\n# >>> $(change_base \"8\" \"3\")\n# \"22\"\n# >>> $(change_base \"8\" \"2\")\n# \"1000\"\n# >>> $(change_base \"7\" \"2\")\n# \"111\"\n#\n# $1 is an integer\n# $2 is an integer\nchange_base() {\n    local base=$1\n    shift\n    local str\n    str=$(printf \"%s\" \"$1\" | bc -l)\n    printf \"%s\" \"$str\" | bc -l | sed \"s/^[0-9]*\\([0-9]*\\)\\([0-9]*\\).*/\\1\\2/g\""], ["# <func> # Shell\n#!/bin/bash\n# Given length of a side and high return area for a triangle.\n# >>> $(triangle_area \"5\" \"3\")\n# \"7.5\"\n#\n# $1 is an integer\n# $2 is an integer\ntriangle_area() {\n  local side=$1\n  local height=$2\n  local area\n\n  area=$(echo \"scale=2; sqrt(${side} * (${height} - 1))\" | bc)\n  echo \"$area\""], ["# <func> # Shell\n#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>> $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\nfib4() {\n    local n=$1\n    local prev=$2\n    local res\n\n    if [ $n -eq 0 ]; then\n        res=$prev\n    elif [ $n -eq 1 ]; then\n        res=$prev\n    elif [ $n -eq 2 ]; then\n        res=$prev+$prev\n    elif [ $n -eq 3 ]; then\n        res=$prev+$prev+$prev\n    elif [ $n -eq 4 ]; then\n        res=$prev+$prev+$prev+$prev\n    fi\n\n    echo $res"], ["# <func> # Shell\n#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n#\n# $1 is a space-separated list\nmedian() {\n    local list=\"$1\"\n    local n\n    n=$(echo \"$list\" | wc -l)\n    if [ $n -eq 0 ]; then\n        echo \"Error: list is empty.\"\n        return 1\n    fi\n    local median\n    median=$(echo \"$list\" | awk '{print $n/2}')\n    echo \"$median\""], ["# <func> # Shell\n#!/bin/bash\n# Checks if given string is a palindrome\n# >>> $(is_palindrome \"\")\n# \"true\"\n# >>> $(is_palindrome \"aba\")\n# \"true\"\n# >>> $(is_palindrome \"aaaaa\")\n# \"true\"\n# >>> $(is_palindrome \"zbcd\")\n# \"false\"\n#\n# $1 is a string\nis_palindrome() {\n  local str=$1\n  local reverse_str=$(echo \"$str\" | rev)\n  [[ \"$reverse_str\" == \"$str\" ]]"], ["# <func> # Shell\n#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n  local n=$1\n  local p=$2\n  local result\n  result=$(($n % $p))\n  echo $result"], ["# <func> # Shell\n#!/bin/bash\n# remove_vowels is a function that takes string and returns string without vowels.\n# >>> $(remove_vowels \"\")\n# \"\"\n# >>> $(remove_vowels \"abcdef\")\n# \"bcdf\"\n# >>> $(remove_vowels \"aaaaa\")\n# \"\"\n# >>> $(remove_vowels \"aaBAA\")\n# \"B\"\n# >>> $(remove_vowels \"zbcd\")\n# \"zbcd\"\n#\n# $1 is a string\nremove_vowels() {\n  local string=$1\n  local vowels=\"aeiouAEIOU\"\n  local vowel_count=0\n  local vowel_index=0\n  local vowel_string=\"\"\n  for ((i=0; i<${#string}; i++)); do\n    if [[ ${string:i:1} == ${vowels:i:1} ]]; then\n      vowel_index=$((vowel_index+1))\n      vowel_string=\"${vowel_string}${string:i:1}${vowels:i:1}\"\n    else\n      vowel_string=\"${vowel_string}${string:i:1}\"\n    fi\n  done\n  echo \"${vowel_string}\""], ["# <func> # Shell\n#!/bin/bash\n# Return true if all numbers in the list l are below threshold t.\n# >>> $(below_threshold \"1 2 4 10\" \"100\")\n# \"true\"\n# >>> $(below_threshold \"1 20 4 10\" \"5\")\n# \"false\"\n#\n# $1 is a space-separated list\n# $2 is an integer\nbelow_threshold() {\n    local l=$1\n    local t=$2\n    local i=0\n    for ((i=0; i<${#l}; i++)); do\n        if [ \"${l[i]}\" -lt \"${t}\" ]; then\n            return 0\n        fi\n    done\n    return 1"], ["# <func> # Shell\n#!/bin/bash\n# Add two numbers x and y\n# >>> $(add \"2\" \"3\")\n# \"5\"\n# >>> $(add \"5\" \"7\")\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\nadd() {\n  local x=\"$1\"\n  local y=\"$2\"\n  echo \"$x + $y\""], ["# <func> # Shell\n#!/bin/bash\n# Check if two words have the same characters.\n# >>> $(same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n# \"true\"\n# >>> $(same_chars \"abcd\" \"dddddddabc\")\n# \"true\"\n# >>> $(same_chars \"dddddddabc\" \"abcd\")\n# \"true\"\n# >>> $(same_chars \"eabcd\" \"dddddddabc\")\n# \"false\"\n# >>> $(same_chars \"abcd\" \"dddddddabce\")\n# \"false\"\n# >>> $(same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n# \"false\"\n#\n# $1 is a string\n# $2 is a string\nsame_chars() {\n    local string1 string2\n    string1=$1\n    string2=$2\n    local count=0\n    while [[ $count -lt 2 ]]; do\n        ((count++))\n        if [[ $string1 == $string2 ]]; then\n            return 0\n        fi\n        string1=$(echo $string1 | tr 'A-Z' 'a-z')\n        string2=$(echo $string2 | tr 'A-Z' 'a-z')\n    done\n    return 1"], ["# <func> # Shell\n#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an integer\nfib() {\n    local n=\"$1\"\n    if [ $n -lt 2 ]; then\n        echo \"Error: Fibonacci number must be greater than 1\"\n        return 1\n    fi\n    echo \"$n\""], ["# <func> # Shell\n#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n#\n# $1 is a string\ncorrect_bracketing() {\n  local brackets=$1\n  local result=false\n  for I in $(echo \"$1\" | tr '>' '<'); do\n    if [[ \"$(echo \"$1\" | tr '<' '>' | tr '>' '<')\" == \"$i\" ]]; then\n      result=true\n      break\n    fi\n  done\n  echo \"$result\""], ["# <func> # Shell\n#!/bin/bash\n# Return true is list elements are monotonically increasing or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n#\n# $1 is a space-separated list\nmonotonic() {\n    local list=\"$1\"\n    local i\n    for i in $(seq 1 $#); do\n        local value=$(echo \"$list\" | tr ' ' '\\n' | grep -oE \"$(echo \"$list\" | tr ' ' '\\n' | grep -oE \"$(echo \"$list\" | tr ' ' '\\n' | grep -oE \"$(echo \"$list\" | tr ' ' '\\n' | grep -oE \"$(echo \"$list\" | tr ' ' '\\n' | grep -oE \"$(echo \"$list\" | tr ' ' '\\n' | grep -oE \"$(echo \"$list\" | tr ' ' '\\n' | grep -oE \"$(echo \"$list\" | tr ' ' '\\n' | grep -oE \"$(echo \"$list\" | tr ' ' '\\n' | grep -oE \"$(echo \"$list\" | tr ' ' '\\n' | grep -oE \"$(echo \"$list\" | tr ' ' '\\n' | grep -oE \"$(echo \"$list\" | tr ' ' '\\n' | grep -oE \"$(echo \"$list\" | tr ' ' '\\n' | grep -oE \"$(echo \"$list\" | tr ' ' '\\n' | grep -oE \"$(echo \"$list\" | tr ' ' '\\n' | grep -oE \"$(echo \"$list\" | tr ' ' '\\n' | grep -oE \"$(echo \"$list\" | tr ' ' '\\n' | grep -oE \"$(echo \"$list\" | tr ' ' '\\n' | grep -oE \"$(echo \"$list\" | tr ' ' '\\n' | grep -oE \"$(echo \"$list\" | tr ' ' '\\n' | grep -oE \"$(echo \"$list\" | tr '"], ["# <func> # Shell\n#!/bin/bash\n# Return sorted unique common elements for two lists.\n# >>> $(common \"1 4 3 34 653 2 5\" \"5 7 1 5 9 653 121\")\n# ['\"1\"', '\"5\"', '\"653\"']\n# >>> $(common \"5 3 2 8\" \"3 2\")\n# ['\"2\"', '\"3\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncommon() {\n  local list1 list2\n  list1=$1\n  list2=$2\n  local common_list\n  common_list=$(sort -u <<< \"$(echo \"$list1\" | tr ' ' '\\n' | sed 's/ /,/g' | tr '\\n' ','))\n  local common_list_2\n  common_list_2=$(sort -u <<< \"$(echo \"$list2\" | tr ' ' '\\n' | sed 's/ /,/g' | tr '\\n' ','))\n  local common_list_3\n  common_list_3=$(echo \"$common_list\" | tr ',' '\\n')\n  local common_list_4\n  common_list_4=$(echo \"$common_list_2\" | tr ',' '\\n')\n  local common_list_5\n  common_list_5=$(echo \"$common_list_3\" | tr ',' '\\n')\n  local common_list_6\n  common_list_6=$(echo \"$common_list_4\" | tr ',' '\\n')\n  local common_list_7\n  common_list_7=$(echo \"$common_list_5\" | tr ',' '\\n')\n  local common_list_8\n  common_list_8=$(echo \"$common_list_6\" | tr ',' '\\n')\n  local common_list_9\n  common_list_9=$(echo \"$common_list_7\" | tr ',' '\\n')\n  local common_list_10\n  common_list_10=$(echo \"$common_list_8\" | tr ',' '\\n')\n"], ["# <func> # Shell\n#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local n=\"$1\"\n    local max_factor=0\n    for ((i=2; i<$(($n-1)); i++)); do\n        if [ $n -eq $i ]; then\n            max_factor=$i\n            break\n        fi\n    done\n    echo \"$max_factor\""], ["# <func> # Shell\n#!/bin/bash\n# sum_to_n is a function that sums numbers from 1 to n.\n# >>> $(sum_to_n \"30\")\n# \"465\"\n# >>> $(sum_to_n \"100\")\n# \"5050\"\n# >>> $(sum_to_n \"5\")\n# \"15\"\n# >>> $(sum_to_n \"10\")\n# \"55\"\n# >>> $(sum_to_n \"1\")\n# \"1\"\n#\n# $1 is an integer\nsum_to_n() {\n    local n=\"$1\"\n    echo \"$n\""], ["# <func> # Shell\n#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n#\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local result\n    result=true\n    for I in $(echo $brackets | tr '(' '[') | tr ')' ']'); do\n        if [[ $i == $brackets ]]; then\n            result=false\n            break\n        fi\n    done\n    return $result"], ["# <func> # Shell\n#!/bin/bash\n# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2] * x^2 + ....\n# Return derivative of this polynomial in the same form.\n# >>> $(derivative \"3 1 2 4 5\")\n# ['\"1\"', '\"4\"', '\"12\"', '\"20\"']\n# >>> $(derivative \"1 2 3\")\n# ['\"2\"', '\"6\"']\n#\n# $1 is a space-separated list\nderivative() {\n  local xs\n  local result\n  local i\n  local j\n  local k\n  local n\n  local n1\n  local n2\n  local n3\n  local n4\n  local n5\n  local n6\n  local n7\n  local n8\n  local n9\n  local n10\n  local n11\n  local n12\n  local n13\n  local n14\n  local n15\n  local n16\n  local n17\n  local n18\n  local n19\n  local n20\n  local n21\n  local n22\n  local n23\n  local n24\n  local n25\n  local n26\n  local n27\n  local n28\n  local n29\n  local n30\n  local n31\n  local n32\n  local n33\n  local n34\n  local n35\n  local n36\n  local n37\n  local n38\n  local n39\n  local n40\n  local n41\n  local n42\n  local n43\n  local n44\n  local n45\n  local n46\n  local n47\n  local n48\n  local n49\n  local n50\n  local n51\n  local n52\n  local n53\n  local n54\n  local n55\n  local n56\n  local n57\n  local n58\n  local n59\n"], ["# <func> # Shell\n#!/bin/bash\n# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n# >>> $(fibfib \"1\")\n# \"0\"\n# >>> $(fibfib \"5\")\n# \"4\"\n# >>> $(fibfib \"8\")\n# \"24\"\n#\n# $1 is an integer\nfibfib() {\n    local n=\"$1\"\n    local result\n    result=$(echo \"$n\" | tr '0' '1')\n    result=$(echo \"$result\" | tr '1' '0')\n    result=$(echo \"$result\" | tr '0' '1')\n    result=$(echo \"$result\" | tr '1' '0')\n    result=$(echo \"$result\" | tr '0' '1')\n    result=$(echo \"$result\" | tr '1' '0')\n    result=$(echo \"$result\" | tr '0' '1')\n    result=$(echo \"$result\" | tr '1' '0')\n    result=$(echo \"$result\" | tr '0' '1')\n    result=$(echo \"$result\" | tr '1' '0')\n    result=$(echo \"$result\" | tr '0' '1')\n    result=$(echo \"$result\" | tr '1' '0')\n    result=$(echo \"$result\" | tr '0' '1')\n    result=$(echo \"$result\" | tr '1' '0')\n    result=$(echo \"$result\" | tr '0' '1')\n    result=$(echo \"$result\" | tr '1' '0')\n    result=$(echo \"$result\" | tr '0' '1')\n    result=$(echo \"$result\" | tr '1' '0')\n    result=$(echo \"$result\" | tr '0' '1"], ["# <func> # Shell\n#!/bin/bash\n# Write a function vowels_count which takes a string representing\n# a word as input and returns the number of vowels in the string.\n# Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is at the end of the given word.\n# Example:\n# >>> $(vowels_count \"abcde\")\n# \"2\"\n# >>> $(vowels_count \"ACEDY\")\n# \"3\"\n#\n# $1 is a string\nvowels_count() {\n    local word=\"$1\"\n    local vowels=0\n    for ((i=0; i<${#word}; i++)); do\n        if [[ $word[$i] == 'a' || $word[$i] == 'e' || $word[$i] == 'i' || $word[$i] == 'o' || $word[$i] == 'u' ]]; then\n            vowels=$((vowels+1))\n        fi\n    done\n    echo \"$vowels\""], ["# <func> # Shell\n#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits right by shift\n# and return the result as a string.\n# If shift > number of digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\ncircular_shift() {\n  local shift=$1\n  shift=$2\n  local digits=$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\n  local reversed=$(echo \"$digits\" | tr '[:lower:]' '[:upper:]')\n  echo \"$reversed\""], ["# <func> # Shell\n#!/bin/bash\n# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> $(digitSum \"\")\n# \"0\"\n# >>> $(digitSum \"abAB\")\n# \"131\"\n# >>> $(digitSum \"abcCd\")\n# \"67\"\n# >>> $(digitSum \"helloE\")\n# \"69\"\n# >>> $(digitSum \"woArBld\")\n# \"131\"\n# >>> $(digitSum \"aAaaaXa\")\n# \"153\"\n#\n# $1 is a string\ndigitSum() {\n  local str=\"$1\"\n  local sum=0\n  for ((i=0; i<${#str}; i++)); do\n    sum=$((sum+${str:$i:1}))\n  done\n  echo $sum"], ["# <func> # Shell\n#!/bin/bash\n# In this task, you will be given a string that represents a number of apples and oranges \n# that are distributed in a basket of fruit this basket contains \n# apples, oranges, and mango fruits. Given the string that represents the total number of \n# the oranges and apples and an integer that represent the total number of the fruits \n# in the basket return the number of the mango fruits in the basket.\n# for examble:\n# >>> $(fruit_distribution \"5 apples and 6 oranges\" \"19\")\n# \"8\"\n# >>> $(fruit_distribution \"0 apples and 1 oranges\" \"3\")\n# \"2\"\n# >>> $(fruit_distribution \"2 apples and 3 oranges\" \"100\")\n# \"95\"\n# >>> $(fruit_distribution \"100 apples and 1 oranges\" \"120\")\n# \"19\"\n#\n# $1 is a string\n# $2 is an integer\nfruit_distribution() {\n    local total_oranges_apples_mangoes\n    local total_fruits_in_basket\n    local total_fruits_in_basket_mangoes\n    local total_fruits_in_basket_oranges\n    local total_fruits_in_basket_mangoes_and_oranges\n    local total_fruits_in_basket_mangoes_and_oranges_and_apples\n    local total_fruits_in_basket_mangoes_and_oranges_and_apples_and_oranges\n    local total_fruits_in_basket_mangoes_and_oranges_and_apples_and_oranges_and_and_apples\n    local total_fruits_in_basket_mangoes_and_oranges_and_apples_and_oranges_and_and_apples_and_and_oranges\n    local total_fruits_in_basket_mangoes_and_oranges_and_apples_and_oranges_and_and_apples"], ["# <func> # Shell\n#!/bin/bash\n# \"Given an array representing a branch of a tree that has non-negative integer nodes\n# your task is to pluck one of the nodes and return it.\n# The plucked node should be the node with the smallest even value.\n# If multiple nodes with the same smallest even value are found return the node that has smallest index.\n# The plucked node should be returned in a list, [ smalest_value, its index ],\n# If there are no even values or the given array is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 3:\n# >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n# so we will choose the first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n    local nodes\n    local smallest_value\n    local index\n    local -a result\n\n    nodes=($1)\n    smallest_value=${nodes[0]}\n    index=${nodes[1]}\n\n    result=()\n    for ((i=index+1; i<nodes.length; i++)); do\n        if ((nodes[i] < smallest_value)); then\n            smallest_value=${nodes[i]}\n            index=${i}\n        fi\n    done\n\n    result[0]=\"${smallest_value}\"\n    result[1]=\"${index}\""], ["# <func> # Shell\n#!/bin/bash\n# You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n# zero, and has a frequency greater than or equal to the value of the integer itself. \n# The frequency of an integer is the number of times it appears in the list.\n# If no such a value exist, return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n# $1 is a space-separated list\nsearch() {\n    local list=\"$1\"\n    local max_freq=0\n    local max_num=0\n    local max_num_freq=0\n    for num in \"${list[@]}\"; do\n        if [ \"$num\" -gt \"$max_num\" ]; then\n            max_num=$num\n            max_num_freq=$max_freq\n        fi\n    done\n    if [ \"$max_num_freq\" -gt \"$max_freq\" ]; then\n        max_freq=$max_num_freq\n        max_num=$max_num\n    fi\n    echo \"$max_num\""], ["# <func> # Shell\n#!/bin/bash\n# Given list of integers, return list in strange order.\n# Strange sorting, is when you start with the minimum value,\n# then maximum of the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n    local list=\"$1\"\n    local min_val\n    local max_val\n    local min_val_str\n    local max_val_str\n    local min_val_str_len\n    local max_val_str_len\n    local min_val_str_index\n    local max_val_str_index\n    local min_val_str_end\n    local max_val_str_end\n    local min_val_str_start\n    local max_val_str_start\n    local min_val_str_end_index\n    local max_val_str_end_index\n    local min_val_str_start_index\n    local max_val_str_start_index\n    local min_val_str_end_len\n    local max_val_str_end_len\n    local min_val_str_start_len\n    local max_val_str_start_len\n    local min_val_str_end_index_len\n    local max_val_str_end_index_len\n    local min_val_str_start_index_len\n    local max_val_str_start_index_len\n    local min_val_str_end_len_index\n    local max_val_str_end_len_index\n    local min_val_str_start_len_index\n    local max_val_str_start_len_index\n    local min_val_str_end_index_len_"], ["# <func> # Shell\n#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return the area of\n# the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any two sides is greater \n# than the third side.\n# Example:\n# >>> $(triangle_area \"3\" \"4\" \"5\")\n# \"6.0\"\n# >>> $(triangle_area \"1\" \"2\" \"10\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\ntriangle_area() {\n    local side1=$1 side2=$2 side3=$3\n    local side1_sum=$((side1 + side2 + side3))\n    local side1_length=$((side1_sum / 2))\n    local side2_length=$((side2_sum / 2))\n    local side3_length=$((side3_sum / 2))\n    local area=$((side1_length * side2_length * side3_length))\n    echo \"$area\""], ["# <func> # Shell\n#!/bin/bash\n# Write a function that returns true if the object q will fly, and false otherwise.\n# The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>> $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\")\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible weight, and it's balanced.\n#\n# $1 is a space-separated list\n# $2 is an integer\nwill_it_fly() {\n  local q\n  local w\n  local balanced\n  local max_weight\n\n  q=\"$1\"\n  w=\"$2\"\n\n  balanced=false\n  max_weight=0\n\n  # check if the list is balanced\n  for I in $(seq 1 $w)\n  do\n    balanced=true\n    for j in $(seq 1 $i)\n    do\n      if [[ \"$q\" =~ ^[[:space:]]+$ ]]\n      then\n        balanced=false\n        break\n      fi\n    done\n  done\n\n  # check if the list is balanced\n  if [[ \"$balanced\" == true ]]\n  then\n    max_weight=$w\n  fi\n\n  # check if the sum of the elements is less than or equal the maximum possible weight\n  if [[ \"$max_weight\" -lt \"$w\" ]]\n  then\n    balanced=false\n  fi\n\n  return $balanced"], ["# <func> # Shell\n#!/bin/bash\n# Given an array arr of integers, find the minimum number of elements that\n# need to be changed to make the array palindromic. A palindromic array is an array that\n# is read the same backwards and forwards. In one change, you can change one element to any other element.\n# For example:\n# >>> $(smallest_change \"1 2 3 5 4 7 9 6\")\n# \"4\"\n# >>> $(smallest_change \"1 2 3 4 3 2 2\")\n# \"1\"\n# >>> $(smallest_change \"1 2 3 2 1\")\n# \"0\"\n#\n# $1 is a space-separated list\nsmallest_change() {\n    local arr=$1\n    local n=0\n    for I in \"${arr[@]}\"; do\n        n=$((n+1))\n        if [[ $n -eq 1 ]]; then\n            echo \"1\"\n        elif [[ $n -eq 2 ]]; then\n            echo \"2\"\n        elif [[ $n -eq 3 ]]; then\n            echo \"3\"\n        elif [[ $n -eq 4 ]]; then\n            echo \"4\"\n        elif [[ $n -eq 5 ]]; then\n            echo \"5\"\n        elif [[ $n -eq 6 ]]; then\n            echo \"6\"\n        elif [[ $n -eq 7 ]]; then\n            echo \"7\"\n        elif [[ $n -eq 8 ]]; then\n            echo \"8\"\n        elif [[ $n -eq 9 ]]; then\n            echo \"9\"\n        elif [[ $n -eq 10 ]]; then\n            echo \"10\"\n        elif [[ $n -eq 11 ]]; then\n            echo \"11\"\n        elif [[ $n -eq 12 ]]; then\n            echo \"12\"\n        elif [[ $n -eq 13 ]]; then\n            echo \"13\"\n        elif [[ $n -eq 14 ]]; then\n            echo \"14\"\n        elif [[ $n -eq 15 ]]; then\n            echo"], ["# <func> # Shell\n#!/bin/bash\n# Write a function that accepts two lists of strings and returns the list that has \n# total number of chars in the all strings of the list less than the other list.\n# if the two lists have the same number of chars, return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n# >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntotal_match() {\n  local list1=$1\n  local list2=$2\n  local result=()\n  for I in \"${!list1[@]}\"; do\n    local char1=$(echo \"${list1[$i]}\" | tr '[:upper:]' '[:lower:]')\n    local char2=$(echo \"${list2[$i]}\" | tr '[:upper:]' '[:lower:]')\n    if [[ \"${char1}\" == \"${char2}\" ]]; then\n      result+=(\"${list1[$i]}\")\n    else\n      result+=(\"${list2[$i]}\")\n    fi\n  done\n  echo \"${result[@]}\""], ["# <func> # Shell\n#!/bin/bash\n# Write a function that returns true if the given number is the multiplication of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100. \n# Example:\n# >>> $(is_multiply_prime \"30\")\n# \"true\"\n# 30 = 2 * 3 * 5\n#\n# $1 is an integer\nis_multiply_prime() {\n    local num=$1\n    local is_prime\n    is_prime=$(is_prime_number \"$num\")\n    if [ \"$is_prime\" == \"true\" ]; then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi"], ["# <func> # Shell\n#!/bin/bash\n# Your task is to write a function that returns true if a number x is a simple\n# power of n and false in other cases.\n# x is a simple power of n if n**int=x\n# For example:\n# >>> $(is_simple_power \"1\" \"4\")\n# \"true\"\n# >>> $(is_simple_power \"2\" \"2\")\n# \"true\"\n# >>> $(is_simple_power \"8\" \"2\")\n# \"true\"\n# >>> $(is_simple_power \"3\" \"2\")\n# \"false\"\n# >>> $(is_simple_power \"3\" \"1\")\n# \"false\"\n# >>> $(is_simple_power \"5\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n# $2 is an integer\nis_simple_power() {\n  local n=$1\n  local x=$2\n  local result\n\n  if [[ $n == 0 ]]; then\n    result=\"false\"\n  else\n    result=\"true\"\n  fi\n\n  if [[ $x == 0 ]]; then\n    result=\"false\"\n  else\n    result=\"true\"\n  fi\n\n  echo \"$result\""], ["# <func> # Shell\n#!/bin/bash\n# Write a function that takes an integer a and returns true \n# if this ingeger is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n# >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>> $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n    local b=1\n    while [ $b -lt $a ]; do\n        b=$((b * 3))\n    done\n    echo \"$b\""], ["# <func> # Shell\n#!/bin/bash\n# You have been tasked to write a function that receives \n# a hexadecimal number as a string and counts the number of hexadecimal \n# digits that are primes (prime number, or a prime, is a natural number \n# greater than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\n#\n# $1 is a string\nhex_key() {\n    local key=\"$1\"\n    local count=0\n    for I in $(seq 0 $((256 - 1))); do\n        if [ \"$key\" = \"$(hex \"$(echo -n \"$i\" | tr 'A-F' 'a-f'))\")\" ]; then\n            count=$((count + 1))\n        fi\n    done\n    echo \"$count\""], ["# <func> # Shell\n#!/bin/bash\n# You will be given a number in decimal form and your task is to convert it to\n# binary format. The function should return a string, with each character representing a binary\n# number. Each character in the string will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n# The extra characters are there to help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an integer\ndecimal_to_binary() {\n    local decimal=$1\n    local binary=\"\"\n    local i\n    for ((i=0; i<$decimal; i++)); do\n        binary=\"${binary}${binary:0:1}${binary:1:1}${binary:2:1}${binary:3:1}${binary:4:1}${binary:5:1}${binary:6:1}${binary:7:1}${binary:8:1}${binary:9:1}${binary:10:1}${binary:11:1}${binary:12:1}${binary:13:1}${binary:14:1}${binary:15:1}\"\n    done\n    echo \"$binary\""], ["# <func> # Shell\n#!/bin/bash\n# You are given a string s.\n# Your task is to check if the string is hapsh or not.\n# A string is hapsh if its length is at least 3 and every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy \"a\")\n# \"false\"\n# >>> $(is_happy \"aa\")\n# \"false\"\n# >>> $(is_happy \"abcd\")\n# \"true\"\n# >>> $(is_happy \"aabb\")\n# \"false\"\n# >>> $(is_happy \"adb\")\n# \"true\"\n# >>> $(is_happy \"xyy\")\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local string=$1\n    local length=${#string}\n    local first_letter=${string:0:1}\n    local second_letter=${string:1:1}\n    local third_letter=${string:2:1}\n    local first_letter_count=0\n    local second_letter_count=0\n    local third_letter_count=0\n    local first_letter_index=0\n    local second_letter_index=0\n    local third_letter_index=0\n    local first_letter_index_2=0\n    local second_letter_index_2=0\n    local third_letter_index_2=0\n    local first_letter_count_2=0\n    local second_letter_count_2=0\n    local third_letter_count_2=0\n    local first_letter_index_3=0\n    local second_letter_index_3=0\n    local third_letter_index_3=0\n    local first_letter_count_3=0\n    local second_letter_count_3=0\n    local third_letter_count_3=0\n    local first_letter_index_4=0\n    local second_letter_index_4=0\n    local third_letter_index_4=0\n    local first_letter_count_4=0\n    local second_letter_count_4=0\n    local third_letter_count_4"], ["# <func> # Shell\n#!/bin/bash\n# It is the last week of the semester and the teacher has to give the grades\n# to students. The teacher has been making her own algorithm for grading.\n# The only problem is, she has lost the code she used for grading.\n# She has given you a list of GPAs for some students and you have to write \n# a function that can output a list of letter grades using the following table:\n# GPA       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7                B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7                C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n# >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n    local grade=$1\n    local letter_grade\n    letter_grade=\"$(echo \"$grade\" | tr '[:upper:]' '[:lower:]')\"\n    echo \"$letter_grade\""], ["# <func> # Shell\n#!/bin/bash\n# Write a function that takes a string and returns true if the string\n# length is a prime number or false otherwise\n# Examples\n# >>> $(prime_length \"Hello\")\n# \"true\"\n# >>> $(prime_length \"abcdcba\")\n# \"true\"\n# >>> $(prime_length \"kittens\")\n# \"true\"\n# >>> $(prime_length \"orange\")\n# \"false\"\n#\n# $1 is a string\nprime_length() {\n    local string=$1\n    local length=0\n    for ((i=2; i<${#string}; i++)); do\n        if [[ $string == $i*$i ]]; then\n            length=$((length+1))\n        fi\n    done\n    echo \"$length\""], ["# <func> # Shell\n#!/bin/bash\n# Given a positive integer n, return the count of the numbers of n-digit\n# positive integers that start or end with 1.\n#\n# $1 is an integer\nstarts_one_ends() {\n    local n=$1\n    local start_end_count=0\n    for ((i=1; i<=n; i++)); do\n        if [[ $i -eq 1 ]]; then\n            start_end_count=$((start_end_count+1))\n        elif [[ $i -eq $n ]]; then\n            start_end_count=$((start_end_count+1))\n        fi\n    done\n    echo $start_end_count"], ["# <func> # Shell\n#!/bin/bash\n# Given a positive integer N, return the total sum of its digits in binary.\n# Example\n# >>> $(solve \"1000\")\n# \"1\"\n# >>> $(solve \"150\")\n# \"110\"\n# >>> $(solve \"147\")\n# \"1100\"\n# Variables:\n# @N integer\n# Constraints: 0 \u2264 N \u2264 10000.\n# Output:\n# a string of binary number\n#\n# $1 is an integer\nsolve() {\n    local N=$1\n    local sum=0\n    for ((i=0; i<$N; i++)); do\n        sum+=$((2**i))\n    done\n    echo \"$sum\""], ["# <func> # Shell\n#!/bin/bash\n# Given a non-empty list of integers lst. add the even elements that are at odd indices..\n# Examples:\n# >>> $(add \"4 2 6 7\")\n# \"2\"\n#\n# $1 is a space-separated list\nadd() {\n    local lst=\"$1\"\n    local even\n    even=0\n    for I in $(seq 1 $#); do\n        even=$((even+1))\n        if [[ $even -eq 2 ]]; then\n            lst=\"$lst $lst\"\n        fi\n    done\n    echo \"$lst\""], ["# <func> # Shell\n#!/bin/bash\n# Write a function that takes a string and returns an ordered version of it.\n# Ordered version of string, is a string where all words (separated by space)\n# are replaced by a new word where all the characters arranged in\n# ascending order based on ascii value.\n# Note: You should keep the order of words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\nanti_shuffle() {\n  local str=$1\n  local new_str=\"\"\n  for word in $(echo \"$str\" | tr ' ' '\\n' | sed 's/ / /g' | tr '\\n' ' '); do\n    new_str+=\"$word \"\n  done\n  echo \"$new_str\""], ["# <func> # Shell\n#!/bin/bash\n# You are given a 2 dimensional data, as a nested lists,\n# which is similar to matrix, however, unlike matrices,\n# each row may contain a different number of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return list of lists, [(x1, y1), (x2, y2) ...] such that\n# each list is a coordinate - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending order.\n# Also, sort coordinates of the row by columns in descending order.\n# Examples:\n# >>> $(get_row \"1 2 3 4 5 6\\n1 2 3 4 1 6\\n1 2 3 4 5 1\" \"1\")\n# [['\"0\"', '\"0\"'], ['\"1\"', '\"4\"'], ['\"1\"', '\"0\"'], ['\"2\"', '\"5\"'], ['\"2\"', '\"0\"']]\n# >>> $(get_row \"\" \"1\")\n# []\n# >>> $(get_row \"\\n1\\n1 2 3\" \"3\")\n# [['\"2\"', '\"2\"']]\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nget_row() {\n    local lst=\"$1\"\n    local x\n    for x in $(echo \"$lst\" | tr ' ' '\\n' | awk '{print $1}'); do\n        local y\n        for y in $(echo \"$lst\" | tr ' ' '\\n' | awk '{print $2}'); do\n            echo \"${x},${y}\"\n        done\n    done"], ["# <func> # Shell\n#!/bin/bash\n# Given an array of non-negative integers, return a cosh of the given array after sorting,\n# you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n# or sort it in descending order if the sum( first index value, last index value) is even.\n# Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"', '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local arr=\"$1\"\n    local sorted_arr\n    if [[ \"$arr\" =~ ^[[:space:]]*$ ]]; then\n        sorted_arr=()\n    else\n        sorted_arr=(\"$arr\")\n    fi\n    local I\n    for I in \"${sorted_arr[@]}\"; do\n        local sum\n        sum=\"$(echo \"$i\" | awk '{print $1 + $2}')\"\n        if [[ \"$sum\" -eq \"$(echo \"$sum\" | awk '{print $1}')\" ]]; then\n            sorted_arr+=(\"$i\")\n        else\n            sorted_arr+=(\"$sum\")\n        fi\n    done\n    echo \"${sorted_arr[@]}\""], ["# <func> # Shell\n#!/bin/bash\n# Create a function encrypt that takes a string as an argument and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet should be rotated in a manner such that the letters \n# shift down by two multiplied to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    local alphabet=\"$1\"\n    local shift=$2\n    shift\n    local result=\"\"\n    for ((i=0; i<${#alphabet}; i++)); do\n        result=\"${result}${alphabet:$i:2}${shift:i:2}\"\n    done\n    echo \"${result}\""], ["# <func> # Shell\n#!/bin/bash\n# You are given a list of integers.\n# Write a function next_smallest() that returns the 2nd smallest element of the list.\n# Return None if there is no such element.\n# >>> $(next_smallest \"1 2 3 4 5\")\n# \"2\"\n# >>> $(next_smallest \"5 1 4 3 2\")\n# \"2\"\n# >>> $(next_smallest \"\")\n# \"None\"\n# >>> $(next_smallest \"1 1\")\n# \"None\"\n#\n# $1 is a space-separated list\nnext_smallest() {\n    local list=$1\n    local i=0\n    local j=1\n    local min_i=1000000000\n    local min_j=1000000000\n    local min_i_j=1000000000\n    while [ $i -lt $# ]; do\n        local num=$list[$i]\n        if [ $num -lt $min_i ]; then\n            min_i=$num\n            min_i_j=$j\n        fi\n        ((i++))\n        ((j++))\n    done\n    if [ $i -lt $# ]; then\n        local num=$list[$i]\n        if [ $num -lt $min_i_j ]; then\n            min_i_j=$num\n        fi\n    fi\n    echo $min_i_j"], ["# <func> # Shell\n#!/bin/bash\n# You'll be given a string of words, and your task is to count the number\n# of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences are delimited by '.', '?' or '!'.\n# For example:\n# >>> $(is_bored \"Hello world\")\n# \"0\"\n# >>> $(is_bored \"The sky is blue. The sun is shining. I love this weather\")\n# \"1\"\n#\n# $1 is a string\nis_bored() {\n    local word=\"$1\"\n    local boredoms=0\n    for word in \"$@\"; do\n        if [[ \"$word\" == \"I\" ]]; then\n            boredoms=$(( boredoms + 1 ))\n        fi\n    done\n    echo \"$boredoms\""], ["# <func> # Shell\n#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"-2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n# $3 is a floating point\nany_int() {\n  local num1=$1\n  local num2=$2\n  local num3=$3\n  local num4\n\n  num4=$(echo \"$num1 + $num2\" | bc)\n  num4=$(echo \"$num1 - $num2\" | bc)\n  num4=$(echo \"$num1 * $num3\" | bc)\n  num4=$(echo \"$num1 / $num3\" | bc)\n\n  if [ \"$num4\" -eq \"$num1\" ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"], ["# <func> # Shell\n#!/bin/bash\n# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> $(encode \"test\")\n# \"TGST\"\n# >>> $(encode \"This is a message\")\n# \"tHKS KS C MGSSCGG\"\n#\n# $1 is a string\nencode() {\n    local message=\"$1\"\n    local vowel_index\n    vowel_index=$(echo \"$message\" | tr '[:upper:]' '[:lower:]')\n    message=${message//$vowel_index/}\n    message=${message//$vowel_index/}\n    message=${message//$vowel_index/}\n    message=${message//$vowel_index/}\n    message=${message//$vowel_index/}\n    message=${message//$vowel_index/}\n    message=${message//$vowel_index/}\n    message=${message//$vowel_index/}\n    message=${message//$vowel_index/}\n    message=${message//$vowel_index/}\n    message=${message//$vowel_index/}\n    message=${message//$vowel_index/}\n    message=${message//$vowel_index/}\n    message=${message//$vowel_index/}\n    message=${message//$vowel_index/}\n    message=${message//$vowel_index/}\n    message=${message//$vowel_index/}\n    message=${message//$vowel_index/}\n    message=${message//$vowel_index/}\n    message=${message//$vowel_index/}\n    message=${message//$vowel_index/}\n    message=${message//$vowel_index/}\n    message=${message//$vowel_index/}\n    message=${message//$vowel_index/}\n    message=${message//$vowel_index/}\n    message=${message//"], ["# <func> # Shell\n#!/bin/bash\n# You are given a list of integers.\n# You need to find the largest prime value and return the sum of its digits.\n# Examples:\n# >>> $(skjkasdkd \"0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3\")\n# \"10\"\n# >>> $(skjkasdkd \"1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1\")\n# \"25\"\n# >>> $(skjkasdkd \"1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3\")\n# \"13\"\n# >>> $(skjkasdkd \"0 724 32 71 99 32 6 0 5 91 83 0 5 6\")\n# \"11\"\n# >>> $(skjkasdkd \"0 81 12 3 1 21\")\n# \"3\"\n# >>> $(skjkasdkd \"0 8 1 2 1 7\")\n# \"7\"\n#\n# $1 is a space-separated list\nskjkasdkd() {\n    local list=\"$1\"\n    local max_num=0\n    local sum=0\n    for num in $list; do\n        if [ \"$num\" -gt \"$max_num\" ]; then\n            max_num=$num\n        fi\n        sum+=\"$num\"\n    done\n    echo \"$sum\""], ["# <func> # Shell\n#!/bin/bash\n# Given a CSV, return true if all keys are strings in lower \n# case or all keys are strings in upper case, else return false.\n# The function should return false is the given CSV is empty.\n# Examples:\n# >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\")\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local csv_str\n    csv_str=$(cat \"$1\")\n    local csv_arr\n    csv_arr=$(echo \"$csv_str\" | tr ',' ' ')\n    local csv_arr_len\n    csv_arr_len=$(echo \"$csv_arr\" | wc -w)\n    local csv_arr_str\n    csv_arr_str=$(echo \"$csv_arr\" | tr ',' ' ')\n    local csv_arr_str_len\n    csv_arr_str_len=$(echo \"$csv_arr_str\" | wc -w)\n    if [[ \"$csv_arr_str_len\" -eq \"$csv_arr_len\" ]]; then\n        return \"true\"\n    else\n        return \"false\"\n    fi"], ["# <func> # Shell\n#!/bin/bash\n# Implement a function that takes an non-negative integer and returns an array of the first n\n# integers that are prime numbers and less than n.\n# for example:\n# >>> $(count_up_to \"5\")\n# ['\"2\"', '\"3\"']\n# >>> $(count_up_to \"11\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"']\n# >>> $(count_up_to \"0\")\n# []\n# >>> $(count_up_to \"20\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"', '\"11\"', '\"13\"', '\"17\"', '\"19\"']\n# >>> $(count_up_to \"1\")\n# []\n# >>> $(count_up_to \"18\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"', '\"11\"', '\"13\"', '\"17\"']\n#\n# $1 is an integer\ncount_up_to() {\n    local n=\"$1\"\n    local arr=()\n    for ((i=2; i<=n; i++)); do\n        if [[ $i -eq 2 || $i -eq $n ]]; then\n            continue\n        fi\n        arr+=( \"$i\" )\n    done\n    echo \"${arr[@]}\""], ["# <func> # Shell\n#!/bin/bash\n# Complete the function that takes two integers and returns \n# the product of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# >>> $(multiply \"148\" \"412\")\n# \"16\"\n# >>> $(multiply \"19\" \"28\")\n# \"72\"\n# >>> $(multiply \"2020\" \"1851\")\n# \"0\"\n# >>> $(multiply \"14\" \"-15\")\n# \"20\"\n#\n# $1 is an integer\n# $2 is an integer\nmultiply() {\n    local num1=$1\n    local num2=$2\n    local result\n    result=$(echo \"$num1\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:lower:]' '[:upper:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:lower:]' '[:upper:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:lower:]' '[:upper:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:lower:]' '[:upper:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:lower:]' '[:upper:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:lower:]' '[:upper:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:lower:]' '[:upper:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:lower:]' '[:upper:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower"], ["# <func> # Shell\n#!/bin/bash\n# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\n# >>> $(count_upper \"aBCdEf\")\n# \"1\"\n# >>> $(count_upper \"abcdefg\")\n# \"0\"\n# >>> $(count_upper \"dBBE\")\n# \"0\"\n#\n# $1 is a string\ncount_upper() {\n    local s=\"$1\"\n    local count=0\n    for ((i=0; i<${#s}; i++)); do\n        if [[ $i -eq 0 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 1 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 2 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 3 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 4 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 5 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 6 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 7 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 8 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 9 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 10 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 11 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 12 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 13 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 14 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 15 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 16 ]]; then\n           "], ["# <func> # Shell\n#!/bin/bash\n# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local num=\"$1\"\n  local closest_num\n  local closest_num_int\n  local closest_num_str\n  local closest_num_str_int\n  local closest_num_str_int_int\n  local closest_num_str_int_int_int\n\n  # Check if the number is equidistant from two integers\n  if [[ \"$num\" =~ ^[+-]?[0-9]+$ ]]; then\n    closest_num_str_int_int=\"$(echo \"$num\" | tr '[:upper:]' '[:lower:]')\"\n    closest_num_str_int_int_int=\"$(echo \"$closest_num_str_int_int\" | tr '[:upper:]' '[:lower:]')\"\n    closest_num_str_int_int_int_int=\"$(echo \"$closest_num_str_int_int_int_int\" | tr '[:upper:]' '[:lower:]')\"\n    closest_num_str_int_int_int_int_int=\"$(echo \"$closest_num_str_int_int_int_int_int\" | tr '[:upper:]' '[:lower:]')\"\n    closest_num_str_int_int_int_int_int_int_int=\"$(echo \"$closest_num_str_int_int_int_int_int_int"], ["# <func> # Shell\n#!/bin/bash\n# Given a positive integer n, you have to make a pile of n levels of stones.\n# The first level has n stones.\n# The number of stones in the next level is:\n# - the next odd number if n is odd.\n# - the next even number if n is even.\n# Return the number of stones in each level in a list, where element at index\n# i represents the number of stones in the level (i+1).\n# Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\nmake_a_pile() {\n    local n=\"$1\"\n    local result=()\n    for ((i=0; i<$n; i++)); do\n        result+=( \"$(make_a_pile \"$(($i+1))\")\" )\n    done\n    echo \"${result[@]}\""], ["# <func> # Shell\n#!/bin/bash\n# You will be given a string of words separated by commas or spaces. Your task is\n# to split the string into words and return an array of the words.\n# For example:\n# >>> $(words_string \"Hi, my name is John\")\n# ['\"Hi\"', '\"my\"', '\"name\"', '\"is\"', '\"John\"']\n# >>> $(words_string \"One, two, three, four, five, six\")\n# ['\"One\"', '\"two\"', '\"three\"', '\"four\"', '\"five\"', '\"six\"']\n#\n# $1 is a string\nwords_string() {\n    local string=\"$1\"\n    local words=()\n    while IFS= read -r word; do\n        words+=(\"$word\")\n    done < <(echo \"$string\")\n    return \"${words[@]}\""], ["# <func> # Shell\n#!/bin/bash\n# This function takes two positive numbers x and y and returns the\n# biggest even integer number that is in the range [x, y] inclusive. If \n# there's no such number, then the function should return -1.\n# For example:\n# >>> $(choose_num \"12\" \"15\")\n# \"14\"\n# >>> $(choose_num \"13\" \"12\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n    local x=$1\n    local y=$2\n    local max\n    max=$((y - x + 1))\n    local num\n    num=$((max - 1))\n    while [ $num -le 0 ]; do\n        num=$((num + x))\n    done\n    echo $num"], ["# <func> # Shell\n#!/bin/bash\n# You are given two positive integers n and m, and your task is to compute the\n# average of the integers from n through m (including n and m). \n# Round the answer to the nearest integer and convert that to binary.\n# If n is greater than m, return -1.\n# Example:\n# >>> $(rounded_avg \"1\" \"5\")\n# \"0b11\"\n# >>> $(rounded_avg \"7\" \"5\")\n# \"-1\"\n# >>> $(rounded_avg \"10\" \"20\")\n# \"0b1111\"\n# >>> $(rounded_avg \"20\" \"33\")\n# \"0b11010\"\n#\n# $1 is an integer\n# $2 is an integer\nrounded_avg() {\n  local n=$1 m=$2\n  local sum=0\n  local count=0\n  for ((i=n; i<=m; i++)); do\n    sum=$((sum+${#1}))\n    count=$((count+1))\n  done\n  local avg=0\n  if ((count == 0)); then\n    avg=$1\n  else\n    avg=$((sum/count))\n  fi\n  return $avg"], ["# <func> # Shell\n#!/bin/bash\n# Given a list of positive integers x. return a sorted list of all \n# elements that hasn't any even digit.\n# Note: Returned list should be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n    local list=\"$1\"\n    local sorted_list\n    sorted_list=$(echo \"$list\" | sort -n)\n    local i\n    for i in \"${sorted_list[@]}\"; do\n        if [[ \"$i\" =~ ^[0-9]+$ ]]; then\n            echo \"$i\"\n        fi\n    done"], ["# <func> # Shell\n#!/bin/bash\n# Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n# reverse the resulting array, and then replace each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"']\n#\n# $1 is a space-separated list\nby_length() {\n    local arr=$1\n    local len=$#\n    local i=0\n    local name\n    for ((i=0; i<$len; i++)); do\n        name=$(echo $arr | awk '{print $i}')\n        arr=$(echo $arr | awk '{print $i}')\n        arr=($arr)\n        arr[i]=${arr[i]#\"$name\"}\n    done\n    echo $arr"], ["# <func> # Shell\n#!/bin/bash\n# Implement the function f that takes n as a parameter,\n# and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n# i starts from 1.\n# the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n# Example:\n# >>> $(f \"5\")\n# ['\"1\"', '\"2\"', '\"6\"', '\"24\"', '\"15\"']\n#\n# $1 is an integer\nf() {\n    local n=$1\n    local result\n    result=$(echo \"$n\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$("], ["# <func> # Shell\n#!/bin/bash\n# Given a positive integer n, return a list that has the number of even and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n# Example 1:\n# >>> $(even_odd_palindrome \"3\")\n# ['\"1\"', '\"2\"']\n# Explanation:\n# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# >>> $(even_odd_palindrome \"12\")\n# ['\"4\"', '\"6\"']\n# Explanation:\n# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n# 1. 1 <= n <= 10^3\n# 2. returned list has the number of even and odd integer palindromes respectively.\n#\n# $1 is an integer\neven_odd_palindrome() {\n    local n=$1\n    local even_palindromes=\"\"\n    local odd_palindromes=\"\"\n    for I in $(seq 1 $n)\n    do\n        if [[ $i -eq 1 ]]; then\n            even_palindromes=\"$even_palindromes\"\n        elif [[ $i -eq $n ]]; then\n            odd_palindromes=\"$odd_palindromes\"\n        else\n            if [[ $i -eq 2 ]]; then\n                even_palindromes=\"$even_palindromes\"\n            elif [[ $i -eq 4 ]]; then\n                odd_palindromes=\"$odd_palindromes\"\n            fi\n        fi\n    done\n    echo \"$even_palindromes\"\n    echo \"$odd_palindromes\""], ["# <func> # Shell\n#!/bin/bash\n# Write a function count_nums which takes an array of integers and returns\n# the number of elements which has a sum of digits > 0.\n# If a number is negative, then its first signed digit will be negative:\n# e.g. -123 has signed digits -1, 2, and 3.\n# >>> $(count_nums \"\")\n# \"0\"\n# >>> $(count_nums \"-1 11 -11\")\n# \"1\"\n# >>> $(count_nums \"1 1 2\")\n# \"3\"\n#\n# $1 is a space-separated list\ncount_nums() {\n    local nums=\"$1\"\n    local sum=0\n    for num in $nums; do\n        sum=$((sum + $num))\n    done\n    echo \"$sum\""], ["# <func> # Shell\n#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n# numbers in the array will be randomly ordered. Your task is to determine if\n# it is possible to get an array sorted in non-decreasing order by performing \n# the following operation on the given array:\n# You are allowed to perform right shift operation any number of times.\n# One right shift operation means shifting all elements of the array by one\n# position in the right direction. The last element of the array will be moved to\n# the starting position in the array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing the above operation\n# then return true else return false.\n# If the given array is empty then return true.\n# Note: The given list is guaranteed to have unique elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n# be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"false\"\n# Explanation:It is not possible to get non-decreasing order for the given\n# array by performing any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball() {\n    local arr=\"$1\"\n    local n\n    n=${#arr[@]}\n    local shift\n    shift\n    while [[ $n -gt 0 ]]; do\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n        shift\n"], ["# <func> # Shell\n#!/bin/bash\n# In this problem, you will implement a function that takes two lists of numbers,\n# and determines whether it is possible to perform an exchange of elements\n# between them to make lst1 a list of only even numbers.\n# There is no limit on the number of exchanged elements between lst1 and lst2.\n# If it is possible to exchange elements between the lst1 and lst2 to make\n# all the elements of lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n# >>> $(exchange \"1 2 3 4\" \"1 2 3 4\")\n# \"YES\"\n# >>> $(exchange \"1 2 3 4\" \"1 5 3 4\")\n# \"NO\"\n# It is assumed that the input lists will be non-empty.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nexchange() {\n    local lst1 lst2\n    read -r -d '' lst1 <<< \"$1\"\n    read -r -d '' lst2 <<< \"$2\"\n    if [[ $lst1 == $lst2 ]]; then\n        return \"YES\"\n    else\n        return \"NO\"\n    fi"], ["# <func> # Shell\n#!/bin/bash\n# Given a string representing a space separated lowercase letters, return a CSV\n# of the letter with the most repetition and containing the corresponding count.\n# If several letters have the same occurrence, return all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"', '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local input=$1\n  local count=0\n  local letter\n  local max_count=0\n  local max_letter=\n  for letter in $(echo $input | tr ' ' '\\n'); do\n    if [ $count -lt $max_count ]; then\n      max_count=$count\n      max_letter=$letter\n    fi\n    count=$((count + 1))\n  done\n  echo \"$max_letter\""], ["# <func> # Shell\n#!/bin/bash\n# Task\n# We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n# then check if the result string is palindrome.\n# A string is called palindrome if it reads the same backward as forward.\n# You should return a list containing the result string and true/false for the check.\n# Example\n# >>> $(reverse_delete \"abcde\" \"ae\")\n# ['\"bcd\"', '\"false\"']\n# >>> $(reverse_delete \"abcdef\" \"b\")\n# ['\"acdef\"', '\"false\"']\n# >>> $(reverse_delete \"abcdedcba\" \"ab\")\n# ['\"cdedc\"', '\"true\"']\n#\n# $1 is a string\n# $2 is a string\nreverse_delete() {\n    local s=$1\n    local c=$2\n    local result\n    result=$(echo \"$s\" | tr -d \"$c\")\n    echo \"$result\""], ["# <func> # Shell\n#!/bin/bash\n# Given an array of integers nums, find the minimum sum of any non-empty sub-array\n# of nums.\n# Example\n# >>> $(minSubArraySum \"2 3 4 1 2 4\")\n# \"1\"\n# >>> $(minSubArraySum \"-1 -2 -3\")\n# \"-6\"\n#\n# $1 is a space-separated list\nminSubArraySum() {\n    local nums=$1\n    local minSum=0\n    local minIndex=0\n    local maxIndex=0\n    for ((i=0; i<${#nums[@]}; i++)); do\n        local sum=0\n        for ((j=i+1; j<${#nums[@]}; j++)); do\n            sum+=${nums[$j]}\n        done\n        if ((sum < minSum)); then\n            minSum=sum\n            minIndex=$i\n            maxIndex=$j\n        fi\n    done\n    echo \"${nums[$minIndex]:-$minSum}\""], ["# <func> # Shell\n#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents a single well,\n# and each 1 in a row represents a single unit of water.\n# Each well has a corresponding bucket that can be used to extract water from it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets to empty the wells.\n# Output the number of times you need to lower the buckets.\n# Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n    local capacity=$2\n    local n\n    n=0\n    for ((i=0; i<${#grid[@]}; i++)); do\n        for ((j=0; j<${#grid[i]}; j++)); do\n            if ((grid[i][j] == 1)); then\n                n=$((n+capacity))\n            fi\n        done\n    done\n    echo \"$n\""], ["# <func> # Shell\n#!/bin/bash\n# In this Kata, you have to sort an array of non-negative integers according to\n# number of ones in their binary representation in ascending order.\n# For similar number of ones, sort based on decimal value.\n# It must be implemented like this:\n# >>> $(sort_array \"1 5 2 3 4\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array \"-2 -3 -4 -5 -6\")\n# ['\"-6\"', '\"-5\"', '\"-4\"', '\"-3\"', '\"-2\"']\n# >>> $(sort_array \"1 0 2 3 4\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local arr=$1\n    local sorted_arr\n    local sorted_arr_str\n    local sorted_arr_str_len\n    local sorted_arr_str_pos\n    local sorted_arr_str_pos_end\n    local sorted_arr_str_pos_start\n    local sorted_arr_str_pos_end_str\n    local sorted_arr_str_pos_end_str_len\n    local sorted_arr_str_pos_end_str_pos\n    local sorted_arr_str_pos_end_str_pos_end\n    local sorted_arr_str_pos_end_str_pos_end_str\n    local sorted_arr_str_pos_end_str_pos_end_str_len\n    local sorted_arr_str_pos_end_str_pos_end_str_pos_end_str_pos\n    local sorted_arr_str_pos_end_str_pos_end_str_pos_end_str_pos_end_str_pos\n    local sorted_arr_str_pos_end_str_pos_end_str_pos_end_str_pos_end_str_pos_end_str_pos\n    local sorted_arr_str_pos_end_str_pos_end_str_pos"], ["# <func> # Shell\n#!/bin/bash\n# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\" \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words() {\n    local s=$1\n    local n=$2\n    local words=()\n    for word in $(echo \"$s\" | tr '[:upper:]' '[:lower:]'); do\n        if [[ \"$word\" =~ ^[a-z]+$ ]]; then\n            words+=(\"$word\")\n        fi\n    done\n    if [[ \"$n\" -eq 0 ]]; then\n        return\n    fi\n    for word in \"${words[@]}\"; do\n        if [[ \"$word\" =~ ^[a-z]+$ ]]; then\n            words+=(\"$word\")\n        fi\n    done\n    return \"${words[@]}\""], ["# <func> # Shell\n#!/bin/bash\n# You are given a word. Your task is to find the closest vowel that stands between \n# two consonants from the right side of the word (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n# find any vowel met the above condition. \n# You may assume that the given string contains English letter only.\n# Example:\n# >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\")\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local word=$1\n    local vowel_start=$2\n    local vowel_end=$3\n    local vowel_start_index=$4\n    local vowel_end_index=$5\n    local vowel_end_index_minus_1=$((vowel_end_index - 1))\n    local vowel_start_index_minus_1=$((vowel_start_index - 1))\n    local vowel_end_index_minus_1_minus_1=$((vowel_end_index_minus_1 - 1))\n    local vowel_start_index_minus_1_minus_1_minus_1=$((vowel_start_index_minus_1 - 1 - 1))\n    local vowel_end_index_minus_1_minus_1_minus_1_minus_1=$((vowel_end_index_minus_1 - 1 - 1 - 1))\n    local vowel_start_index_minus_1_minus_1_minus_1_minus_1_minus_1=$((vowel_start_index_minus_1 - 1 - 1 - 1 - 1))\n    local vowel_end_index_minus_1_minus_1_minus_1_minus_1_minus_1_minus_1=$((vowel_end_index_minus"], ["# <func> # Shell\n#!/bin/bash\n# You are given a list of two strings, both strings consist of open\n# parentheses '(' or close parentheses ')' only.\n# Your job is to check if it is possible to concatenate the two strings in\n# some order, that the resulting string will be good.\n# A string S is considered to be good if and only if all parentheses in S\n# are balanced. For example: the string '(())()' is good, while the string\n# '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n# Examples:\n# >>> $(match_parens \"()( )\")\n# \"Yes\"\n# >>> $(match_parens \") )\")\n# \"No\"\n#\n# $1 is a space-separated list\nmatch_parens() {\n  local str=\"$1\"\n  local open=\"$2\"\n  local close=\"$3\"\n  local result=\"\"\n  local i\n  for ((i=0; i<${#str}; i++)); do\n    if [[ \"$str\"[${i}]:=${open} ]]; then\n      result=\"${result}${str}${close}\"\n    else\n      result=\"${result}${str}\"\n    fi\n  done\n  return \"$result\""], ["# <func> # Shell\n#!/bin/bash\n# Given an array arr of integers and a positive integer k, return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n# >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length of the array will be in the range of [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=\"$1\"\n    local k=\"$2\"\n    local max_arr\n    local max_arr_len\n    local max_arr_index\n    local max_arr_value\n    local max_arr_value_len\n    local max_arr_value_index\n    local max_arr_value_index_len\n    local max_arr_value_index_len_2\n    local max_arr_value_index_len_3\n    local max_arr_value_index_len_4\n    local max_arr_value_index_len_5\n    local max_arr_value_index_len_6\n    local max_arr_value_index_len_7\n    local max_arr_value_index_len_8\n    local max_arr_value_index_len_9\n    local max_arr_value_index_len_10\n    local max_arr_value_index_len_11\n    local max_arr_value_index_len_12\n    local max_arr_value_index_len_13\n    local max_arr_value_index_len_"], ["# <func> # Shell\n#!/bin/bash\n# Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n# Examples\n# >>> $(solution \"5 8 7 1\")\n# \"12\"\n# >>> $(solution \"3 3 3 3 3\")\n# \"9\"\n# >>> $(solution \"30 13 24 321\")\n# \"0\"\n#\n# $1 is a space-separated list\nsolution() {\n    local list=$1\n    local result=0\n    for I in \"${list[@]}\"\n    do\n        if [[ $i -eq 1 ]]; then\n            result=$((result + 1))\n        else\n            result=$((result + 2))\n        fi\n    done\n    echo \"$result\""], ["# <func> # Shell\n#!/bin/bash\n# Given a non-empty array of integers arr and an integer k, return\n# the sum of the elements with at most two digits from the first k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements() {\n    local arr=\"$1\"\n    local k=\"$2\"\n    local sum=0\n    for I in $(seq 1 $k); do\n        local num=$(echo \"$arr\" | tr ' ' '\\n' | tail -n 1)\n        if [[ \"$num\" =~ ^[0-9]{2}$ ]]; then\n            sum+=\"$num\"\n        else\n            sum+=\"$num\"\n            sum+=\"0\"\n        fi\n    done\n    echo \"$sum\""], ["# <func> # Shell\n#!/bin/bash\n# Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n# The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n# as follows: start with any positive integer n. Then each term is obtained from the \n# previous term as follows: if the previous term is even, the next term is one half of \n# the previous term. If the previous term is odd, the next term is 3 times the previous\n# term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n# Note: \n# 1. Collatz(1) is [1].\n# 2. returned list sorted in increasing order.\n# For example:\n# get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n# >>> $(get_odd_collatz \"5\")\n# ['\"1\"', '\"5\"']\n#\n# $1 is an integer\nget_odd_collatz() {\n    local n=\"$1\"\n    local collatz_seq\n    collatz_seq=\"$(seq 1 $n)\"\n    local odd_nums\n    odd_nums=\"$(seq 1 $n)\"\n    local i\n    for i in \"${collatz_seq[@]}\"; do\n        if [[ $i -eq 1 ]]; then\n            odd_nums=\"$odd_nums 1\"\n        else\n            odd_nums=\"$odd_nums $i\"\n        fi\n    done\n    echo \"${odd_nums}\""], ["# <func> # Shell\n#!/bin/bash\n# You have to write a function which validates a given date string and\n# returns true if the date is valid otherwise false.\n# The date is valid if all of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n# 3. The months should not be less than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n# >>> $(valid_date \"03-11-2000\")\n# \"true\"\n# >>> $(valid_date \"15-01-2012\")\n# \"false\"\n# >>> $(valid_date \"04-0-2040\")\n# \"false\"\n# >>> $(valid_date \"06-04-2020\")\n# \"true\"\n# >>> $(valid_date \"06/04/2020\")\n# \"false\"\n#\n# $1 is a string\nvalid_date() {\n    local date=$1\n    local month=$2\n    local day=$3\n    local year=$4\n    local month_len=$5\n    local day_len=$6\n    local year_len=$7\n    local month_len_str=\"${month_len} days\"\n    local day_len_str=\"${day_len} days\"\n    local year_len_str=\"${year_len} months\"\n    local year_len_str=\"${year_len} years\"\n    local month_len_str=\"${month_len_str} days\"\n    local day_len_str=\"${day_len_str} days\"\n    local year_len_str=\"${year_len_str} months\"\n    local year_len_str=\"${year_len_str} years"], ["# <func> # Shell\n#!/bin/bash\n# Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n# should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\!\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words() {\n    local word_list=\"$1\"\n    local word_list_split\n    word_list_split=$(echo \"$word_list\" | tr ' ' '\\n')\n    local word_list_split_split\n    word_list_split_split=$(echo \"$word_list_split\" | tr ' ' '\\n')\n    local word_list_split_split_split\n    word_list_split_split_split=$(echo \"$word_list_split_split\" | tr ' ' '\\n')\n    local word_list_split_split_split_split_split\n    word_list_split_split_split_split_split_split=$(echo \"$word_list_split_split_split_split_split\" | tr ' ' '\\n')\n    local word_list_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_split_"], ["# <func> # Shell\n#!/bin/bash\n# Given a list of numbers, return whether or not they are sorted\n# in ascending order. If list has more than 1 duplicate of the same\n# number, return false. Assume no negative numbers and only integers.\n# Examples\n# >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated list\nis_sorted() {\n    local list=\"$1\"\n    local sorted_list\n    sorted_list=$(echo \"$list\" | tr ' ' '\\n')\n    local sorted_list_length=$(echo \"$sorted_list\" | wc -l)\n    local sorted_list_length_minus_one=$(echo \"$sorted_list_length\" | sed 's/^//')\n    local sorted_list_length_minus_one_minus_one=$(echo \"$sorted_list_length_minus_one\" | sed 's/^//')\n    local sorted_list_length_minus_one_minus_one_minus_one=$(echo \"$sorted_list_length_minus_one_minus_one\" | sed 's/^//')\n    local sorted_list_length_minus_one_minus_one_minus_one_minus_one=$(echo \"$sorted_list_length_minus_one_minus_one_minus_one\" | sed 's/^//')\n    local sorted_list_length_minus_one_minus_one_minus_one_minus_"], ["# <func> # Shell\n#!/bin/bash\n# You are given two intervals,\n# where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n# The given intervals are closed which means that the interval (start, end)\n# includes both start and end.\n# For each given interval, it is assumed that its start is less or equal its end.\n# Your task is to determine whether the length of intersection of these two \n# intervals is a prime number.\n# Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If the length of the intersection is a prime number, return \"YES\",\n# otherwise, return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output] samples:\n# >>> $(intersection \"1 2\" \"2 3\")\n# \"NO\"\n# >>> $(intersection \"-1 1\" \"0 4\")\n# \"NO\"\n# >>> $(intersection \"-3 -1\" \"-5 5\")\n# \"YES\"\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nintersection() {\n  local start=$1 end=$2\n  local len\n  len=$((${end} - ${start}))\n  if [[ ${len} -eq 1 ]]; then\n    return \"NO\"\n  fi\n  return \"YES\""], ["# <func> # Shell\n#!/bin/bash\n# You are given an array arr of integers and you need to return\n# sum of magnitudes of integers multiplied by product of all signs\n# of each number in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>> $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1 is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sign_sum=0\n    for I in \"${arr[@]}\"; do\n        sign_sum+=\"$((sign_sum*(-1)^i))\"\n    done\n    return $sign_sum"], ["# <func> # Shell\n#!/bin/bash\n# Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n# each cell of the grid contains a value. Every integer in the range [1, N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have to find the minimum path of length k in the grid. You can start\n# from any cell, and in each step you can move to any of the neighbor cells,\n# in other words, you can go to cells which share an edge with you current\n# cell.\n# Please note that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n# You CANNOT go off the grid.\n# A path A (of length k) is considered less than a path B (of length k) if\n# after making the ordered lists of the values on the cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically less\n# than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j] = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered list of the values on the cells that the minimum path go through.\n# Examples:    \n# >>> $(minPath \"1 2 3\\n4 5 6\\n7 8 9\" \"3\")\n# ['\"1\"', '\"2\"', '\"1\"']\n# >>> $(minPath \"5 9 3\\n4 1 6\\n7 8 2\" \"1\")\n# ['\"1\"']\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nminPath() {\n    local grid=$1\n    local k=$2\n    local path\n    path=$(awk -v k=$k -v grid=$grid 'BEGIN{print \"1\"}' | tr -d '\\n')\n    echo \"${path}\""], ["# <func> # Shell\n#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n# the last couple centuries. However, what people don't know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are given a non-negative integer number n, you have to a return a list of the \n# first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n    local n=$1\n    local result\n    result=\"$(printf \"%s\" \"${n}\")\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${"], ["# <func> # Shell\n#!/bin/bash\n# Given a positive integer n, return the product of the odd digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n# \"15\"\n#\n# $1 is an integer\ndigits() {\n    local n=\"$1\"\n    local result=0\n    for ((i=1; i<=$n; i++)); do\n        result=$(($result * 10))\n        result=$(($result + $i))\n    done\n    echo $result"], ["# <func> # Shell\n#!/bin/bash\n# Create a function that takes a string as input which contains only square brackets.\n# The function should return true if and only if there is a valid subsequence of brackets \n# where at least one bracket in the subsequence is nested.\n# >>> $(is_nested \"[[]]\")\n# \"true\"\n# >>> $(is_nested \"[]]]]]]][[[[[]\")\n# \"false\"\n# >>> $(is_nested \"[][]\")\n# \"false\"\n# >>> $(is_nested \"[]\")\n# \"false\"\n# >>> $(is_nested \"[[][]]\")\n# \"true\"\n# >>> $(is_nested \"[[]][[\")\n# \"true\"\n#\n# $1 is a string\nis_nested() {\n    local str=\"$1\"\n    local bracket_count=0\n    local bracket_index=0\n    local bracket_string=\"\"\n    local bracket_bracket=\"\"\n    local bracket_bracket_count=0\n    local bracket_bracket_index=0\n    local bracket_bracket_string=\"\"\n    local bracket_bracket_bracket=\"\"\n    local bracket_bracket_bracket_count=0\n    local bracket_bracket_bracket_index=0\n\n    while [[ \"$str\" != \"\" ]]; do\n        if [[ \"$str\" =~ ^[[:space:]]*\\\\[.*?\\\\]$ ]]; then\n            bracket_bracket=\"${str#[[:space:]]*\\\\[}\"\n            bracket_bracket_count=$((bracket_bracket_count+1))\n            bracket_bracket_index=$((bracket_bracket_index+1))\n            bracket_bracket_string=\"${bracket_bracket_string}${bracket_bracket}\"\n        else\n            bracket_bracket=\"${str#[[:space:]]*\\\\[}\"\n            bracket_bracket_count=$((bracket_bracket_count+1))\n            bracket_bracket_index=$((bracket_bracket_index+1))\n            bracket_bracket_string=\"${bracket_bracket_string}${bracket_"], ["# <func> # Shell\n#!/bin/bash\n# You are given a list of numbers.\n# You need to return the sum of squared numbers in the given list,\n# round each element in the list to the upper int(Ceiling) first.\n# Examples:\n# >>> $(lst \"1.0 2.0 3.0\")\n# \"14\"\n# >>> $(lst \"1.0 4.0 9.0\")\n# \"98\"\n# >>> $(lst \"1.0 3.0 5.0 7.0\")\n# \"84\"\n# >>> $(lst \"1.4 4.2 0.0\")\n# \"29\"\n# >>> $(lst \"-2.4 1.0 1.0\")\n# \"6\"\n#\n# $1 is a space-separated list\nsum_squares() {\n    local lst=$1\n    local int_lst\n    local int_lst_len\n    local int_lst_sum\n    local int_lst_max\n    local int_lst_min\n    local int_lst_sum_max\n    local int_lst_sum_min\n    local int_lst_sum_max_min\n    local int_lst_sum_max_min_max\n    local int_lst_sum_max_min_max_min\n    local int_lst_sum_max_min_max_min_max\n    local int_lst_sum_max_min_max_min_max_min\n    local int_lst_sum_max_min_max_min_max_min_max\n    local int_lst_sum_max_min_max_min_max_min_max_min\n    local int_lst_sum_max_min_max_min_max_min_max_min_max\n    local int_lst_sum_max_min_max_min_max_min_max_min_max_min\n    local int_lst_sum_max_min_max_min_max_min_max_min_max_min_max\n    local int_lst_sum_max_min_max_min_max_min_max_min_max_min_max"], ["# <func> # Shell\n#!/bin/bash\n# Create a function that returns true if the last character\n# of a given string is an alphabetical character and is not\n# a part of a word, and false otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n# >>> $(check_if_last_char_is_a_letter \"apple pie\")\n# \"false\"\n# >>> $(check_if_last_char_is_a_letter \"apple pi e\")\n# \"true\"\n# >>> $(check_if_last_char_is_a_letter \"apple pi e \")\n# \"false\"\n# >>> $(check_if_last_char_is_a_letter \"\")\n# \"false\"\n#\n# $1 is a string\ncheck_if_last_char_is_a_letter() {\n    local last_char\n    last_char=$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\n    if [[ \"$last_char\" =~ ^[a-z]$ ]]; then\n        return 1\n    else\n        return 0\n    fi"], ["# <func> # Shell\n#!/bin/bash\n# Create a function which returns the largest index of an element which\n# is not greater than or equal to the element immediately preceding it. If\n# no such element exists then return -1. The given array will not contain\n# duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n# >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\ncan_arrange() {\n    local arr=\"$1\"\n    local n\n    n=$(echo \"$arr\" | wc -l)\n    for ((i=0; i<$n; i++)); do\n        local j=$(echo \"$arr\" | head -n $i | tail -n 1)\n        if [[ $j -ge \"$(echo \"$arr\" | tail -n 1)\" ]]; then\n            return 0\n        fi\n    done\n    return -1"], ["# <func> # Shell\n#!/bin/bash\n# Create a function that returns a list (a, b), where 'a' is\n# the largest of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n# If there is no negative or positive integers, return them as None.\n# Examples:\n# >>> $(largest_smallest_integers \"2 4 1 3 5 7\")\n# ['\"None\"', '\"1\"']\n# >>> $(largest_smallest_integers \"\")\n# ['\"None\"', '\"None\"']\n# >>> $(largest_smallest_integers \"0\")\n# ['\"None\"', '\"None\"']\n#\n# $1 is a space-separated list\nlargest_smallest_integers() {\n    local list=\"$1\"\n    local max_int\n    local min_int\n    local max_int_str\n    local min_int_str\n    local max_int_str_len\n    local min_int_str_len\n    local max_int_str_len_str\n    local min_int_str_len_str_len\n    local max_int_str_len_str_len_str\n    local max_int_str_len_str_len_str_len\n    local max_int_str_len_str_len_str_len_str\n    local max_int_str_len_str_len_str_len_str_len\n    local max_int_str_len_str_len_str_len_str_len_str\n    local max_int_str_len_str_len_str_len_str_len_str_len\n    local max_int_str_len_str_len_str_len_str_len_str_len_str\n    local max_int_str_len_str_len_str_len_str_len_str_len_str_len_str\n    local max_int_str_len_str_len_str_len_str_len_str_len_str_len_str_len_str\n    local max_int_str_len_str_len_str_len_str_"], ["# <func> # Shell\n#!/bin/bash\n# Create a function that takes integers, floats, or strings representing\n# real numbers, and returns the larger variable in its given variable type.\n# Return None if the values are equal.\n# Note: If a real number is represented as a string, the floating point might be . or ,\n# >>> $(compare_one \"1\" \"2.5\")\n# \"2.5\"\n# >>> $(compare_one \"1\" \"2,3\")\n# \"2,3\"\n# >>> $(compare_one \"5,1\" \"6\")\n# \"6\"\n# >>> $(compare_one \"1\" \"1\")\n# \"None\"\n#\n# $1 is an argument\n# $2 is an argument\ncompare_one() {\n    local var1 var2\n    var1=$1\n    var2=$2\n    if [ \"$var1\" == \"$var2\" ]; then\n        return\n    fi\n    return \"None\""], ["# <func> # Shell\n#!/bin/bash\n# Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n# Example\n# >>> $(is_equal_to_sum_even \"4\")\n# \"false\"\n# >>> $(is_equal_to_sum_even \"6\")\n# \"false\"\n# >>> $(is_equal_to_sum_even \"8\")\n# \"true\"\n#\n# $1 is an integer\nis_equal_to_sum_even() {\n    local n=\"$1\"\n    local sum_even\n    sum_even=0\n    for ((i=2; i<=n; i++)); do\n        if ((i%2==0)); then\n            sum_even=$((sum_even+i))\n        fi\n    done\n    if ((sum_even==n)); then\n        echo \"true\"\n    else\n        echo \"false\"\n    fi"], ["# <func> # Shell\n#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial \"4\")\n# \"288\"\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    local n=\"$1\"\n    local result\n    if [ \"$n\" -lt 0 ]; then\n        echo \"Error: n must be positive.\"\n        return 1\n    fi\n    result=$(echo \"$n\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:lower:]' '[:upper:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:lower:]' '[:upper:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:lower:]' '[:upper:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:lower:]' '[:upper:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:lower:]' '[:upper:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:lower:]' '[:upper:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:lower:]' '[:upper:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:lower:]' '[:upper:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result"], ["# <func> # Shell\n#!/bin/bash\n# Given a string text, replace all spaces in it with underscores, \n# and if a string has more than 2 consecutive spaces, \n# then replace all consecutive spaces with - \n# >>> $(fix_spaces \" Example\")\n# \"Example\"\n# >>> $(fix_spaces \" Example 1\")\n# \"Example_1\"\n# >>> $(fix_spaces \" Example 2\")\n# \"_Example_2\"\n# >>> $(fix_spaces \" Example 3\")\n# \"_Example-3\"\n#\n# $1 is a string\nfix_spaces() {\n    local text=\"$1\"\n    local spaces_count=0\n    local underscores_count=0\n    local spaces_string=\"\"\n    local underscores_string=\"\"\n    for I in $(echo \"$text\" | tr ' ' '_'); do\n        if [ \"$i\" != \"$i\" ]; then\n            spaces_count=$((spaces_count + 1))\n            underscores_count=$((underscores_count + 1))\n            spaces_string=\"$spaces_string $i\"\n        else\n            underscores_string=\"$underscores_string $i\"\n        fi\n    done\n    if [ \"$spaces_count\" -gt \"1\" ]; then\n        spaces_string=\"$spaces_string -\"\n    fi\n    if [ \"$underscores_count\" -gt \"1\" ]; then\n        underscores_string=\"$underscores_string -\"\n    fi\n    echo \"$spaces_string $underscores_string\""], ["# <func> # Shell\n#!/bin/bash\n# Create a function which takes a string representing a file's name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n# A file's name is considered to be valid if and only if all the following conditions \n# are met:\n# - There should not be more than three digits ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring before the dot should not be empty, and it starts with a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n    local file_name_start=${file_name:0:1}\n    local file_name_end=${file_name:1:1}\n    local file_name_contains_dot=${file_name:${file_name_start}:${file_name_end}:-1}\n    local file_name_contains_letter=${file_name:${file_name_start}:${file_name_end}:-1}\n    local file_name_contains_letter_or_dot=${file_name:${file_name_start}:${file_name_end}:-1}\n    local file_name_contains_letter_or_dot_or_dot_dot=${file_name:${file_name_start}:${file_name_end}:-1}\n    local file_name_contains_letter_or_dot_or_dot_dot_or_dot_dot_dot=${file_name:${file_name_start}:${file_name_end}:-1}\n    if [[ ${file_name_contains_letter} == \"a\" && ${file"], ["# <func> # Shell\n#!/bin/bash\n# \"\n# This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n# multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n# change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n# Examples:\n# >>> lst\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> lst\n# []\n# >>> lst\n# ['\"-1\"', '\"-5\"', '\"2\"', '\"-1\"', '\"-5\"']\n#\n# $1 is a space-separated list\nsum_squares() {\n    local lst=\"$1\"\n    local sum=0\n    for I in \"${lst[@]}\"\n    do\n        if [[ $i -eq 0 ]] || [[ $i -eq 1 ]] || [[ $i -eq 2 ]] || [[ $i -eq 3 ]] || [[ $i -eq 4 ]]\n        then\n            sum=$((sum + $i))\n        else\n            sum=$((sum * $i))\n        fi\n    done\n    echo $sum"], ["# <func> # Shell\n#!/bin/bash\n# You are given a string representing a sentence,\n# the sentence contains some words separated by a space,\n# and you have to return a string that contains the words from the original sentence,\n# whose lengths are prime numbers,\n# the order of the words in the new string should be the same as the original one.\n# Example 1:\n# >>> $(words_in_sentence \"This is a test\")\n# \"is\"\n# Example 2:\n# >>> $(words_in_sentence \"lets go for swimming\")\n# \"go for\"\n# Constraints:\n# * 1 <= len(sentence) <= 100\n# * sentence contains only letters\n#\n# $1 is a string\nwords_in_sentence() {\n    local sentence=$1\n    local word_count=0\n    local word_list=()\n    for word in $sentence; do\n        if [[ $word =~ ^[a-zA-Z]+$ ]]; then\n            word_list+=(\"$word\")\n            word_count=$((word_count + 1))\n        fi\n    done\n    local sorted_word_list=()\n    for word in \"${word_list[@]}\"; do\n        local length=${#word}\n        if [[ $length -eq 1 ]]; then\n            sorted_word_list+=(\"$word\")\n        else\n            sorted_word_list+=(\"$word\" \"${sorted_word_list[@]%$word}\")\n        fi\n    done\n    local sorted_word_list_str=\"\"\n    for word in \"${sorted_word_list[@]}\"; do\n        sorted_word_list_str+=\"$word\"\n    done\n    echo \"$sorted_word_list_str\""], ["# <func> # Shell\n#!/bin/bash\n# Your task is to implement a function that will simplify the expression\n# x * n. The function returns true if x * n evaluates to a whole number and false\n# otherwise. Both x and n, are string representation of a fraction, and have the following format,\n# <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n# You can assume that x, and n are valid fractions, and do not have zero as denominator.\n# >>> $(simplify \"1/5\" \"5/1\")\n# \"true\"\n# >>> $(simplify \"1/6\" \"2/1\")\n# \"false\"\n# >>> $(simplify \"7/10\" \"10/2\")\n# \"false\"\n#\n# $1 is a string\n# $2 is a string\nsimplify() {\n    local x=\"$1\"\n    local n=\"$2\"\n    local result\n\n    if [[ \"$n\" =~ ^[0-9]+$ ]]; then\n        result=$(echo \"$x * $n\" | bc)\n        if [[ \"$result\" =~ ^[0-9]+$ ]]; then\n            return 0\n        else\n            return 1\n        fi\n    else\n        return 1\n    fi"], ["# <func> # Shell\n#!/bin/bash\n# Write a function which sorts the given list of integers\n# in ascending order according to the sum of their digits.\n# Note: if there are several items with similar sum of their digits,\n# order them based on their index in original list.\n# For example:\n# >>> $(order_by_points \"1 11 -1 -11 -12\")\n# ['\"-1\"', '\"-11\"', '\"1\"', '\"-12\"', '\"11\"']\n# >>> $(order_by_points \"\")\n# []\n#\n# $1 is a space-separated list\norder_by_points() {\n    local list=\"$1\"\n    local sorted_list\n    local sorted_list_index\n    local sorted_list_index_temp\n    local sorted_list_index_temp_temp\n    local sorted_list_index_temp_temp_temp\n    local sorted_list_index_temp_temp_temp_temp\n    local sorted_list_index_temp_temp_temp_temp_temp\n    local sorted_list_index_temp_temp_temp_temp_temp_temp\n    local sorted_list_index_temp_temp_temp_temp_temp_temp_temp\n    local sorted_list_index_temp_temp_temp_temp_temp_temp_temp_temp\n    local sorted_list_index_temp_temp_temp_temp_temp_temp_temp_temp_temp\n    local sorted_list_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\n    local sorted_list_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\n    local sorted_list_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\n    local sorted_list_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\n    local sorted_list_index_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\n    local sorted_list_index_temp"], ["# <func> # Shell\n#!/bin/bash\n# Write a function that takes an array of numbers as input and returns \n# the number of elements in the array that are greater than 10 and both \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# >>> $(specialFilter \"15 -73 14 -15\")\n# \"1\"\n# >>> $(specialFilter \"33 -2 -3 45 21 109\")\n# \"2\"\n#\n# $1 is a space-separated list\nspecialFilter() {\n    local nums=$1\n    local result=0\n    for num in $nums; do\n        if [[ $num -gt 10 ]]; then\n            result=$((result + 1))\n        fi\n        if [[ $num -gt 0 && $num -lt 10 ]]; then\n            result=$((result + 1))\n        fi\n        if [[ $num -gt 0 && $num -lt 10 && $num -lt 2 ]]; then\n            result=$((result + 1))\n        fi\n        if [[ $num -gt 0 && $num -lt 10 && $num -lt 2 && $num -lt 3 ]]; then\n            result=$((result + 1))\n        fi\n        if [[ $num -gt 0 && $num -lt 10 && $num -lt 2 && $num -lt 3 && $num -lt 4 ]]; then\n            result=$((result + 1))\n        fi\n        if [[ $num -gt 0 && $num -lt 10 && $num -lt 2 && $num -lt 3 && $num -lt 4 && $num -lt 5 ]]; then\n            result=$((result + 1))\n        fi\n        if [[ $num -gt 0 && $num -lt 10 && $num -lt 2 && $num -lt 3 && $num -lt 4 && $num -lt 5 && $num -lt 6 ]]; then\n            result=$((result + 1))\n        fi\n       "], ["# <func> # Shell\n#!/bin/bash\n# You are given a positive integer n. You have to create an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# >>> $(get_max_triples \"5\")\n# \"1\"\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=$1\n    local max_triples=0\n    local max_triple\n    for ((i=1; i<=$n; i++)); do\n        max_triple=$(($i * $i - $i + 1))\n        if ((max_triple > max_triples)); then\n            max_triples=$max_triple\n        fi\n    done\n    echo \"$max_triples\""], ["# <func> # Shell\n#!/bin/bash\n# There are eight planets in our solar system: the closerst to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names as strings planet1 and planet2. \n# The function should return a list containing all planets whose orbits are \n# located between the orbit of planet1 and the orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should return an empty list if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  local planet1=$1\n  local planet2=$2\n  local planet1_name\n  local planet2_name\n  local planet1_name_list\n  local planet2_name_list\n  local planet1_name_list_sorted\n  local planet2_name_list_sorted\n  local planet1_name_list_sorted_reverse\n  local planet2_name_list_sorted_reverse\n  local planet1_name_list_sorted_reverse_sorted\n  local planet2_name_list_sorted_reverse_sorted_reverse\n  local planet1_name_list_sorted_reverse_sorted_reverse_sorted\n  local planet2_name_list_sorted_reverse_sorted_reverse_sorted_reverse\n  local planet1_name_list_sorted_reverse_sorted_reverse_sorted_reverse_sorted\n  local planet1_name_list_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\n  local planet1_name_list_sorted_reverse_sorted_reverse_sorted_"], ["# <func> # Shell\n#!/bin/bash\n# Write a function that accepts a list of strings as a parameter,\n# deletes the strings that have odd lengths from it,\n# and returns the resulted list with a sorted order,\n# The list is always a list of strings and never an array of numbers,\n# and it may contain duplicates.\n# The order of the list should be ascending by length of each word, and you\n# should return the list sorted by that rule.\n# If two words have the same length, sort the list alphabetically.\n# The function should return a list of strings in sorted order.\n# You may assume that all words will have the same length.\n# For example:\n# >>> $(list_sort \"aa a aaa\")\n# ['\"aa\"']\n# >>> $(list_sort \"ab a aaa cd\")\n# ['\"ab\"', '\"cd\"']\n#\n# $1 is a space-separated list\nsorted_list_sum() {\n  local list=\"$1\"\n  local sorted_list\n  sorted_list=$(echo \"$list\" | sort -n)\n  local sorted_list_length\n  sorted_list_length=$(echo \"$sorted_list\" | wc -l)\n  local sorted_list_index\n  sorted_list_index=0\n  local sorted_list_index_length\n  sorted_list_index_length=$(echo \"$sorted_list\" | wc -l)\n  for ((i=0; i<$sorted_list_index_length; i++)); do\n    sorted_list_index=$((sorted_list_index+1))\n    sorted_list_index_length=$((sorted_list_index_length+1))\n    local sorted_list_word\n    sorted_list_word=$(echo \"$sorted_list\" | tail -n 1 | tr ' ' '\\n')\n    local sorted_list_word_length\n    sorted_list_word_length=$(echo \"$sorted_list_word\" | wc -c)\n    if ((sorted_list_word_length%2==1)); then\n      sorted_list_word_length=$(echo \"$sorted_list_word_length\" | bc)\n    fi\n    if ((sorted_list_index+1<"], ["# <func> # Shell\n#!/bin/bash\n# A simple program which should return the value of x if n is \n# a prime number and should return the value of y otherwise.\n# Examples:\n# >>> $(x_or_y \"7\" \"34\" \"12\")\n# \"34\"\n# >>> $(x_or_y \"15\" \"8\" \"5\")\n# \"5\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nx_or_y() {\n  local x y\n  x=$1\n  y=$2\n  if [ $x -eq 1 ]\n  then\n    echo \"1\"\n  elif [ $x -eq 2 ]\n  then\n    echo \"2\"\n  elif [ $x -eq 3 ]\n  then\n    echo \"3\"\n  elif [ $x -eq 5 ]\n  then\n    echo \"5\"\n  elif [ $x -eq 7 ]\n  then\n    echo \"7\"\n  elif [ $x -eq 11 ]\n  then\n    echo \"11\"\n  elif [ $x -eq 13 ]\n  then\n    echo \"13\"\n  elif [ $x -eq 17 ]\n  then\n    echo \"17\"\n  elif [ $x -eq 19 ]\n  then\n    echo \"19\"\n  elif [ $x -eq 23 ]\n  then\n    echo \"23\"\n  elif [ $x -eq 29 ]\n  then\n    echo \"29\"\n  elif [ $x -eq 31 ]\n  then\n    echo \"31\"\n  elif [ $x -eq 37 ]\n  then\n    echo \"37\"\n  elif [ $x -eq 41 ]\n  then\n    echo \"41\"\n  elif [ $x -eq 43 ]\n  then\n    echo \"43\"\n  elif [ $x -eq 47 ]\n  then\n    echo \"47\"\n  elif [ $x -eq 53 ]\n  then\n    echo \"53\"\n  elif"], ["# <func> # Shell\n#!/bin/bash\n# Given a list of numbers, return the sum of squares of the numbers\n# in the list that are odd. Ignore numbers that are negative or not integers.\n# >>> $(double_the_difference \"1 3 2 0\")\n# \"10\"\n# >>> $(double_the_difference \"-1 -2 0\")\n# \"0\"\n# >>> $(double_the_difference \"9 -2\")\n# \"81\"\n# >>> $(double_the_difference \"0\")\n# \"0\"\n# If the input list is empty, return 0.\n#\n# $1 is a space-separated list\ndouble_the_difference() {\n    local list=\"$1\"\n    local sum=0\n    for I in $(echo \"$list\" | tr ' ' '\\n'); do\n        if [[ \"$i\" -eq 0 ]]; then\n            continue\n        fi\n        sum+=\"$i\"\n    done\n    echo \"$sum\""], ["# <func> # Shell\n#!/bin/bash\n# I think we all remember that feeling when the result of some long-awaited\n# event is finally known. The feelings and thoughts you have at that moment are\n# definitely worth noting down and comparing.\n# Your task is to determine if a person correctly guessed the results of a number of matches.\n# You are given two arrays of scores and guesses of equal length, where each index shows a match. \n# Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n# the value is 0, and if not, the value is the absolute difference between the guess and the score.\n# example:\n# >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\")\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncompare() {\n    local scores=\"$1\"\n    local guesses=\"$2\"\n    local result=0\n    local i\n    for ((i=0; i<${#scores[@]}; i++)); do\n        result=$(echo \"$guesses[$i]\" | grep -E -o -P \"$(echo \"$scores[$i]\" | grep -E -o -P \"$(echo \"$guesses[$i]\" | grep -E -o -P \"$(echo \"$scores[$i]\" | grep -E -o -P \"$(echo \"$guesses[$i]\" | grep -E -o -P \"$(echo \"$scores[$i]\" | grep -E -o -P \"$(echo \"$guesses[$i]\" | grep -E -o -P \"$(echo \"$scores[$i]\" | grep -E -o -P \"$(echo \"$guesses[$i]\" | grep -E -o -P \"$(echo \"$scores[$i]\""], ["# <func> # Shell\n#!/bin/bash\n# You will be given the name of a class (a string) and a list of extensions.\n# The extensions are to be used to load additional classes to the class. The\n# strength of the extension is as follows: Let CAP be the number of the uppercase\n# letters in the extension's name, and let SM be the number of lowercase letters \n# in the extension's name, the strength is given by the fraction CAP - SM. \n# You should find the strongest extension and return a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more extensions with the same strength, you should\n# choose the one that comes first in the list.\n# For example, if you are given \"Slices\" as the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is a space-separated list\nStrongest_Extension() {\n    local class=\"$1\"\n    local extensions=\"$2\"\n    local strength\n    local strongest_extension\n    local extension_index\n\n    # Find the strongest extension\n    for extension in \"${extensions[@]}\"; do\n        extension_index=$((extension_index + 1))\n        if [[ $extension_index -eq 1 ]]; then\n            strongest_extension=$extension\n        else\n            strongest_extension=\"${strongest_extension}.${extension}\"\n        fi\n    done\n\n    # Find the extension with the highest strength\n    for extension in \"${extensions[@]}\"; do\n        strength=$((strength + 1))\n        if [[ $extension_index -eq 1 ]]; then\n            strongest_extension=\"${strongest_extension}.${extension}\"\n        else\n            strongest_extension=\"${strongest_extension"], ["# <func> # Shell\n#!/bin/bash\n# You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n# >>> $(cycpattern_check \"abcd\" \"abd\")\n# \"false\"\n# >>> $(cycpattern_check \"hello\" \"ell\")\n# \"true\"\n# >>> $(cycpattern_check \"whassup\" \"psus\")\n# \"false\"\n# >>> $(cycpattern_check \"abab\" \"baa\")\n# \"true\"\n# >>> $(cycpattern_check \"efef\" \"eeff\")\n# \"false\"\n# >>> $(cycpattern_check \"himenss\" \"simen\")\n# \"true\"\n#\n# $1 is a string\n# $2 is a string\ncycpattern_check() {\n  local word1=$1\n  local word2=$2\n  local rotations\n\n  rotations=$(echo \"$word2\" | tr 'a-z' 'A-Z')\n  if [[ \"$rotations\" == \"$word1\" ]]; then\n    return 1\n  fi\n  for ((i = 0; i < 26; i++)); do\n    rotations=$(echo \"$rotations\" | tr 'A-Z' 'a-z')\n    if [[ \"$rotations\" == \"$word1\" ]]; then\n      return 1\n    fi\n  done\n  return 0"], ["# <func> # Shell\n#!/bin/bash\n# Given an integer. return a list that has the number of even and odd digits respectively.\n# Example:\n# >>> $(even_odd_count \"-12\")\n# ['\"1\"', '\"1\"']\n# >>> $(even_odd_count \"123\")\n# ['\"1\"', '\"2\"']\n#\n# $1 is an integer\neven_odd_count() {\n    local num=$1\n    local even_odd_list=()\n    local even_odd_count=0\n    local even_odd_count_list=()\n    local even_odd_count_list_index=0\n    local even_odd_count_list_index_prev=0\n    local even_odd_count_list_index_next=0\n    local even_odd_count_list_index_prev_prev=0\n    local even_odd_count_list_index_next_next=0\n    local even_odd_count_list_index_prev_next=0\n    local even_odd_count_list_index_prev_next_next=0\n    local even_odd_count_list_index_prev_next_next_next=0\n    while [ $even_odd_count -lt 10 ]\n    do\n        even_odd_count_list+=(\"$num\")\n        even_odd_count_list_index=$((even_odd_count_list_index + 1))\n        even_odd_count_list_index_prev=$even_odd_count_list_index\n        even_odd_count_list_index_prev_prev=$even_odd_count_list_index_prev\n        even_odd_count_list_index_prev_next=$even_odd_count_list_index_prev\n        even_odd_count_list_index_prev_next_next=$even_odd_count_list_index_prev_next\n        even_odd_count_list_index_prev_next_next_next=$even_odd_count_list_index_prev_next_next\n        even_odd_count_list_index_prev_next_next_next_next=$even_odd_"], ["# <func> # Shell\n#!/bin/bash\n# Given a positive integer, obtain its roman numeral equivalent as a string,\n# and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n# >>> $(int_to_mini_roman \"19\")\n# \"xix\"\n# >>> $(int_to_mini_roman \"152\")\n# \"clii\"\n# >>> $(int_to_mini_roman \"426\")\n# \"cdxxvi\"\n#\n# $1 is an integer\nint_to_mini_roman() {\n    local num=\"$1\"\n    local min_roman=\"i\"\n    local max_roman=\"xi\"\n    local roman=\"\"\n\n    while [[ $num -gt 0 ]]; do\n        local roman_num=\"${roman//$num/}\"\n        if [[ $roman_num == \"$min_roman\" ]]; then\n            roman=\"${roman//$min_roman/}\"\n            roman=\"${roman//$max_roman/}\"\n            roman=\"${roman//$min_roman/}\"\n            roman=\"${roman//$max_roman/}\"\n            roman=\"${roman//$min_roman/}\"\n            roman=\"${roman//$max_roman/}\"\n            roman=\"${roman//$min_roman/}\"\n            roman=\"${roman//$max_roman/}\"\n            roman=\"${roman//$min_roman/}\"\n            roman=\"${roman//$max_roman/}\"\n            roman=\"${roman//$min_roman/}\"\n            roman=\"${roman//$max_roman/}\"\n            roman=\"${roman//$min_roman/}\"\n            roman=\"${roman//$max_roman/}\"\n            roman=\"${roman//$min_roman/}\"\n            roman=\"${roman//$max_roman/}\"\n            roman=\"${roman//$min_roman/}\"\n            roman=\"${roman//$max_roman/}\"\n            roman=\"${roman//$min_roman/}\"\n            roman=\"${roman//$max_roman/"], ["# <func> # Shell\n#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return true if the three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# >>> $(right_angle_triangle \"3\" \"4\" \"5\")\n# \"true\"\n# >>> $(right_angle_triangle \"1\" \"2\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nright_angle_triangle() {\n  local a=$1\n  local b=$2\n  local c=$3\n  local angle\n  angle=$(echo \"scale=2; sqrt($c*$c - $b*$b - $a*$a) / 2\" | bc)\n  echo \"$angle\""], ["# <func> # Shell\n#!/bin/bash\n# Write a function that accepts a list of strings.\n# The list contains different words. Return the word with maximum number\n# of unique characters. If multiple strings have maximum number of unique\n# characters, return the one which comes first in lexicographical order.\n# >>> $(find_max \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated list\nfind_max() {\n    local max_num=0\n    local max_str=\"\"\n    for word in \"$@\"; do\n        local num_chars=$(echo \"$word\" | wc -c)\n        if [ \"$num_chars\" -gt \"$max_num\" ]; then\n            max_num=$num_chars\n            max_str=\"$word\"\n        fi\n    done\n    echo \"$max_str\""], ["# <func> # Shell\n#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain number of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n# you should return an array of [ total number of eaten carrots after your meals,\n# the number of carrots left after your meals ]\n# if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n# >>> $(eat \"5\" \"6\" \"10\")\n# ['\"11\"', '\"4\"']\n# >>> $(eat \"4\" \"8\" \"9\")\n# ['\"12\"', '\"1\"']\n# >>> $(eat \"1\" \"10\" \"10\")\n# ['\"11\"', '\"0\"']\n# >>> $(eat \"2\" \"11\" \"5\")\n# ['\"7\"', '\"0\"']\n# Variables:\n# @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n# the number of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    local number=$1\n    local need=$2\n    local remaining=$3\n    local result\n\n    result=(\"$number\")\n    result[0]=$((result[0] + need))\n    result[1]=$((result[1] - remaining))\n\n    echo \"${result[0]}\"\n    echo \"${result[1]}\""], ["# <func> # Shell\n#!/bin/bash\n# Given two lists operator, and operand. The first list has basic algebra operations, and \n# the second list is a list of integers. Use the two given lists to build the algebric \n# expression and return the evaluation of this expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is equal to the length of operand list minus one.\n# Operand is a list of of non-negative integers.\n# Operator list has at least one operator, and operand list has at least two operands.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ndo_algebra() {\n    local operator=$1\n    shift\n    local operand=$2\n    shift\n    local result\n    result=0\n    case \"$operator\" in\n        +)\n            result=$((operand + result))\n            ;;\n        -)\n            result=$((operand - result))\n            ;;\n        *)\n            result=$((operand * result))\n            ;;\n    esac\n    echo \"$result\""], ["# <func> # Shell\n#!/bin/bash\n# You are given a string s.\n# if s[i] is a letter, reverse its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string contains no letters, reverse the string.\n# The function should return the resulted string.\n# Examples\n# >>> $(solve \"1234\")\n# \"4321\"\n# >>> $(solve \"ab\")\n# \"AB\"\n# >>> $(solve \"#a@C\")\n# \"#A@c\"\n#\n# $1 is a string\nsolve() {\n    local s=$1\n    local reverse_s\n    reverse_s=$(echo \"$s\" | tr '[:lower:]' '[:upper:]')\n    if [[ \"$reverse_s\" == \"$s\" ]]; then\n        echo \"$reverse_s\"\n    else\n        echo \"$reverse_s\" | tr '[:upper:]' '[:lower:]'\n    fi"], ["# <func> # Shell\n#!/bin/bash\n# Given a string 'text', return its md5 hash equivalent string.\n# If 'text' is an empty string, return None.\n# >>> $(string_to_md5 \"Hello world\")\n# \"3e25960a79dbc69b674cd4ec67a72c62\"\n#\n# $1 is a string\nstring_to_md5() {\n    local text=\"$1\"\n    if [ -z \"$text\" ]; then\n        return\n    fi\n    echo md5sum \"$text\""], ["# <func> # Shell\n#!/bin/bash\n# Given two positive integers a and b, return the even digits between a\n# and b, in ascending order.\n# For example:\n# >>> $(generate_integers \"2\" \"8\")\n# ['\"2\"', '\"4\"', '\"6\"', '\"8\"']\n# >>> $(generate_integers \"8\" \"2\")\n# ['\"2\"', '\"4\"', '\"6\"', '\"8\"']\n# >>> $(generate_integers \"10\" \"14\")\n# []\n#\n# $1 is an integer\n# $2 is an integer\ngenerate_integers() {\n    local a=$1 b=$2\n    local result=()\n    local i=0\n    while [ $i -lt $b ]; do\n        result[$i]=\"$((i+1))\"\n        i=$((i+2))\n    done\n    local j=0\n    while [ $j -lt $a ]; do\n        result[$j]=\"$((j+1))\"\n        j=$((j+2))\n    done\n    echo \"${result[@]}\""]]