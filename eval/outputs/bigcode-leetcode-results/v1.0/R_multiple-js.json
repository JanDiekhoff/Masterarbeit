[["// <func> // JavaScript\n//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers, threshold){\n  var min = Math.min.apply(Math, numbers);\n  var max = Math.max.apply(Math, numbers);\n  return (Math.abs(min - max) < threshold);\n}"], ["// <func> // JavaScript\n//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n  const groups = [];\n  let current_group = \"\";\n  let current_open_bracket = \"\";\n  let current_close_bracket = \"\";\n  let current_open_bracket_index = 0;\n  let current_close_bracket_index = 0;\n  for (let I = 0; I < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char === \"(\") {\n      current_open_bracket_index++;\n    } else if (char === \")\") {\n      current_close_bracket_index++;\n      if (current_open_bracket_index === 0 && current_close_bracket_index === 0) {\n        groups.push(current_group);\n        current_group = \"\";\n        current_open_bracket = \"\";\n        current_close_bracket = \"\";\n      } else if (current_open_bracket_index === 0 && current_close_bracket_index === 0) {\n        current_group += current_open_bracket;\n        current_open_bracket = \"\";\n        current_close_bracket = \"\";\n      } else {\n        current_group += current_open_bracket + char;\n        current_open_bracket = \"\";\n        current_close_bracket = \"\";\n      }\n    } else if (char === \"(\") {\n      current_open_bracket_index++;\n    } else if (char === \")\") {\n      current_close_bracket_index++;\n    }\n  }\n  return groups;\n}\n```\n\nIn this function, we first separate the input string"], ["// <func> // JavaScript\n//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number){\n  return number.toFixed(0);\n}"], ["// <func> // JavaScript\n//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations){\n  var balance = 0;\n  for (var i = 0; i < operations.length; i++) {\n    if (operations[i].amount > 0) {\n      balance += operations[i].amount;\n    } else {\n      return false;\n    }\n  }\n  return balance < 0;\n}\n```\n\nIn this case, we're using the `below_zero` function to check if the balance of the account falls below zero.\n\n```javascript"], ["// <func> // JavaScript\n//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers){\n  var mean = numbers.reduce(function(acc, num) {\n    return acc + num;\n  }, 0);\n  return Math.sqrt(numbers.reduce(function(acc, num) {\n    return acc + Math.pow(num - mean, 2);\n  }, 0));\n}\n"], ["// <func> // JavaScript\n//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers, delimeter){\n  return numbers.reduce((acc, val, index) => {\n    return acc.concat(Array.from({ length: delimeter - 1 }, (_, i) => val)).concat(Array.from({ length: delimeter }, (_, i) => val))\n  }, [])\n}\n```\n\nIn this example, we are using the `reduce` function to iterate over the input array and concatenate the elements of the array with a specified delimiter. We are then returning the concatenated array.\n\n```javascript"], ["// <func> // JavaScript\n//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var parens = [];\n  var nesting = 0;\n  var depth = 0;\n  var max_nesting = 0;\n  var max_nesting_depth = 0;\n  var max_nesting_string = \"\";\n\n  for (var i = 0; i < paren_string.length; i++) {\n    var char = paren_string[i];\n    if (char === \"(\") {\n      parens.push(nesting++);\n    } else if (char === \")\") {\n      parens.pop();\n      if (nesting > max_nesting) {\n        max_nesting = nesting;\n        max_nesting_depth = max_nesting_depth + 1;\n        max_nesting_string = max_nesting_string + \"(\" + max_nesting_depth + \")\";\n      }\n      nesting--;\n    }\n  }\n\n  return [parens, max_nesting, max_nesting_depth, max_nesting_string];\n}\n```\n\nThis function takes a string representing a nested set of parentheses, and returns a tuple of the maximum nesting depth, the maximum nesting level, the number of nested parentheses, and the string representing the nested parentheses.\n\nThe function first checks if the string is empty, and if so, returns an empty tuple.\n\nThen, it iterates over the string, and for each character, checks if it is a parenthesis. If it is, it adds the nesting level to the maximum nesting level, and increments the nesting level. If it is not a parenthesis, it checks if it is a space. If it is, it increments the nesting level. If it is"], ["// <func> // JavaScript\n//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings, substring){\n  return strings.filter(function(str){\n    return str.indexOf(substring) !== -1;\n  });\n}"], ["// <func> // JavaScript\n//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n  var sum = 0;\n  var product = 1;\n  for (var I = 0; I < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n}"], ["// <func> // JavaScript\n//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  var max = numbers[0];\n  for (var I = 1; I < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return max;\n}\n"], ["// <func> // JavaScript\n//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string){\n  var palindrome = string.split(\"\").reverse().join(\"\");\n  return palindrome.slice(0, -1) + palindrome.slice(-1);\n}"], ["// <func> // JavaScript\n//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a, b){\n  var result = \"\";\n  for (var i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n}\n"], ["// <func> // JavaScript\n//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings){\n  if (strings.length === 0) return undefined;\n  if (strings.length === 1) return strings[0];\n  var max = 0;\n  var maxIndex = 0;\n  for (var i = 0; i < strings.length; i++) {\n    var length = strings[i].length;\n    if (length > max) {\n      max = length;\n      maxIndex = i;\n    }\n  }\n  return strings[maxIndex];\n}"], ["// <func> // JavaScript\n//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a, b){\n  if (b === 0) {\n    return a;\n  }\n  return greatest_common_divisor(b, a % b);\n}\n"], ["// <func> // JavaScript\n//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n  var prefixes = [];\n  var current_prefix = \"\";\n  var current_length = 0;\n  var current_string = string;\n\n  while (current_string.length > 0) {\n    var next_prefix = \"\";\n    var next_length = 0;\n\n    for (var I = 0; I < current_string.length; i++) {\n      var char = current_string[i];\n\n      if (char === current_prefix[current_length]) {\n        next_length++;\n      } else {\n        next_prefix = char;\n        next_length = 1;\n      }\n    }\n\n    prefixes.push(current_prefix);\n    current_prefix = next_prefix;\n    current_length = next_length;\n    current_string = current_string.slice(1);\n  }\n\n  prefixes.push(current_prefix);\n  return prefixes;\n}\n"], ["// <func> // JavaScript\n//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n){\n    return Array.apply(null, Array(n)).map(function (_, i) {\n        return i + 1;\n    }).join(\" \");\n}"], ["// <func> // JavaScript\n//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n    var count = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string[i] !== string[i].toLowerCase()) {\n            count++;\n        }\n    }\n    return count;\n}"], ["// <func> // JavaScript\n//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n    var notes = [];\n    var beat_count = 0;\n    var current_note = \"\";\n    var current_beat = 0;\n    var current_note_length = 0;\n    var current_beat_length = 0;\n    var current_note_index = 0;\n    var current_beat_index = 0;\n    var current_note_index_2 = 0;\n    var current_beat_index_2 = 0;\n    var current_note_index_3 = 0;\n    var current_beat_index_3 = 0;\n    var current_note_index_4 = 0;\n    var current_beat_index_4 = 0;\n    var current_note_index_5 = 0;\n    var current_beat_index_5 = 0;\n    var current_note_index_6 = 0;\n    var current_beat_index_6 = 0;\n    var current_note_index_7 = 0;\n    var current_beat_index_7 = 0;\n    var current_note_index_8 = 0;\n    var current_beat_index_8 = 0;\n    var current_note_index_9 = 0;\n    var current_beat_index_9 = 0;\n    var current_note_index_10 = 0;\n    var current_be"], ["// <func> // JavaScript\n//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string, substring){\n  var count = 0;\n  var index = 0;\n  var len = string.length;\n  while (index < len) {\n    if (string.charAt(index) === substring) {\n      count++;\n      index++;\n    } else {\n      index++;\n    }\n  }\n  return count;\n}\n```\n\nIn this example, we define a function called `how_many_times` that takes two arguments: the original string `string` and a substring `substring`. The function returns the number of times the substring appears in the original string.\n\nThe function first checks if the substring is empty, in which case it returns 0.\n\nThen, it checks if the substring is not in the original string. If it is, it increments the count.\n\nFinally, it checks if the substring is in the original string. If it is, it increments the count.\n\nThe function returns the count of the number of times the substring appears in the original string.\n\nThis function can be used to count the number of times a substring appears in a string."], ["// <func> // JavaScript\n//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers){\n  var sorted = \"\";\n  for (var I = 0; I < numbers.length; i++) {\n    sorted += numbers[i] + \" \";\n  }\n  return sorted;\n}"], ["// <func> // JavaScript\n//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers){\n  var min_distance = Number.MAX_VALUE;\n  var min_index = -1;\n  var max_index = -1;\n  for (var i = 0; i < numbers.length; i++) {\n    var distance = Math.sqrt(Math.pow(numbers[i] - min_distance, 2) + Math.pow(max_distance - numbers[i] - min_distance, 2));\n    if (distance < min_distance) {\n      min_distance = distance;\n      min_index = i;\n    }\n    if (distance > max_distance) {\n      max_distance = distance;\n      max_index = i;\n    }\n  }\n  return [numbers[min_index], numbers[max_index]];\n}\n```\n\nIn this function, we first find the minimum and maximum values of the supplied array of numbers. We then find the index of the minimum and maximum values, and return the two numbers that are closest to each other.\n\nThe `find_closest_elements` function is called with an array of numbers, and returns two numbers that are the closest to each other. The `find_closest_elements` function is used to find the two numbers that are closest to each other in the array of numbers.\n\nThe `find_closest_elements` function takes two numbers as arguments. The first number is the minimum value in the array, and the second number is the maximum value in the array. The function returns the two numbers that are closest to each other.\n\nThe `find_closest_elements"], ["// <func> // JavaScript\n//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers){\n  var rescaled = [];\n  for (var I = 0; I < numbers.length; i++) {\n    var value = numbers[i];\n    if (value < 0) {\n      value = 0;\n    } else if (value > 1) {\n      value = 1;\n    }\n    rescaled.push(value);\n  }\n  return rescaled;\n}\n"], ["// <func> // JavaScript\n//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values){\n  return values.filter(function(value) {\n    return typeof value === \"number\";\n  });\n}\n"], ["// <func> // JavaScript\n//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string){\n  return string.length;\n} ```\n\nIn this example, we are using the `strlen` function to get the length of a string.\n\n2. Using `Object.keys`\n\n```javascript"], ["// <func> // JavaScript\n//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n){\n  return Math.floor(Math.sqrt(n));\n}\n"], ["// <func> // JavaScript\n//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n  var factors = [];\n  var i = 0;\n  while (i < n) {\n    if (n % i === 0) {\n      factors.push(i);\n    }\n    i++;\n  }\n  return factors;\n}\n```\n\nIn this example, we have a function `factorize` that takes a number `n` as input and returns an array of factors. The function first checks if `n` is even, and if it is, it returns an empty array. If `n` is odd, it calls itself recursively with `n / 2` as the argument. The function then checks if `n` is divisible by any of the factors of `n / 2`, and if it is, it returns that factor. If it is not divisible by any of the factors, it returns an empty array. The function then returns the array of factors.\n\nThe function is called with `n` as input, and the output is an array of factors. The function returns an empty array if `n` is even, and an array of factors if `n` is odd."], ["// <func> // JavaScript\n//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n  return numbers.filter(function(num) {\n    return num !== numbers.indexOf(num);\n  });\n}\n"], ["// <func> // JavaScript\n//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string){\n  return string.toLowerCase().split(\"\").map(function(char){\n    return char.toUpperCase();\n  }).join(\"\");\n}"], ["// <func> // JavaScript\n//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings){\n  return strings.join(\"\");\n}\n"], ["// <func> // JavaScript\n//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings, prefix){\n  return strings.filter(function(s) {\n    return s.startsWith(prefix);\n  });\n}"], ["// <func> // JavaScript\n//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n  return l.filter(function(x) { return x > 0; });\n}\n"], ["// <func> // JavaScript\n//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n  if (n <= 1)\n    return false;\n  if (n % 2 === 0)\n    return false;\n  for (var I = 3; I <= Math.sqrt(n); i += 2)\n    if (n % i === 0)\n      return false;\n  return true;\n}\n"], ["// <func> // JavaScript\n//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l){\n    var l_copy = l.slice();\n    var l_copy_sorted = [];\n    for (var i = 0; i < l_copy.length; i++) {\n        if (i % 3 === 0) {\n            l_copy_sorted.push(l_copy[i]);\n        } else {\n            l_copy_sorted.push(l_copy[i] + 1);\n        }\n    }\n    return l_copy_sorted;\n}"], ["// <func> // JavaScript\n//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l){\n  return l.filter(function(e, i, a) {\n    return a.indexOf(e) === i;\n  });\n}\n"], ["// <func> // JavaScript\n//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l){\n  var max = l[0];\n  for (var i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n}\n"], ["// <func> // JavaScript\n//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  var result = 0;\n  for (var i = 1; i <= n; i++) {\n    if (i % 11 === 7 || i % 13 === 7) {\n      result++;\n    }\n  }\n  return result;\n}\n```\n\nIn this example, we define a function `fizz_buzz` that takes an integer `n` as input and returns the number of times the digit 7 appears in integers less than `n` which are divisible by `11` or `13`. We then call this function with `n` equal to `50` and `78` and `79`. The result is `2` since `78` is divisible by `11` and `79` is divisible by `13`."], ["// <func> // JavaScript\n//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l){\n  var n = l.length;\n  var l_even = [];\n  for (var I = 0; I < n; i++) {\n    if (i % 2 === 0) {\n      l_even.push(l[i]);\n    } else {\n      l_even.push(l[i + 1]);\n    }\n  }\n  return l_even;\n}\n"], ["// <func> // JavaScript\n//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n  if (n < 2) {\n    return n;\n  }\n  if (n % 2 === 0) {\n    return 0;\n  }\n  if (n % 3 === 0) {\n    return 0;\n  }\n  var fib = 0;\n  var prev = 0;\n  var next = 1;\n  for (var I = 2; I <= n; i++) {\n    fib = prev + next;\n    prev = next;\n    next = fib;\n  }\n  return fib;\n}\n"], ["// <func> // JavaScript\n//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l){\n  var sum = 0;\n  for (var i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n"], ["// <func> // JavaScript\n//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n){\n  var collision_count = 0;\n  var cars = [];\n  for (var I = 0; I < n; i++) {\n    cars.push(new Car(i));\n  }\n  for (var I = 0; I < n; i++) {\n    for (var j = 0; j < n; j++) {\n      if (cars[i].move(cars[j].speed)) {\n        collision_count++;\n      }\n    }\n  }\n  return collision_count;\n}\n```\n\nIn this example, we have a function called `car_race_collision` that takes an array of `Car` objects as input and outputs the number of collisions. The function first initializes an array called `cars` to contain `n` cars. Then, for each `i` in the range `0` to `n-1`, it initializes a `Car` object called `cars[i]` with the `i`th index of the `cars` array. Finally, the function calls `car_race_collision` with `cars` as input and returns the number of collisions.\n\nThe `car_race_collision` function uses the `for` loop to iterate over the `cars` array. For each `i` in the range `0` to `n-1`, it initializes a `Car` object called `cars[i]` with the `i`th index of the `cars` array. The `cars[i].move(cars["], ["// <func> // JavaScript\n//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var n = l.length;\n  var r = new Array(n);\n  for (var i = 0; i < n; i++) {\n    r[i] = l[i] + 1;\n  }\n  return r;\n}\n"], ["// <func> // JavaScript\n//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l){\n  var sum = 0;\n  for (var i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n}\n"], ["// <func> // JavaScript\n//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x, base){\n  var result = \"\";\n  var n = x;\n  while (n > 0) {\n    result += n % base;\n    n = Math.floor(n / base);\n  }\n  return result;\n}\n"], ["// <func> // JavaScript\n//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a, h){\n  return (a * h) / 2;\n} //Expected output: 7.5\n"], ["// <func> // JavaScript\n//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n){\n  if (n < 0) {\n    return 0;\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n```\n\nExplanation:\n\n1. We start with the base cases: fib4(0) = 0, fib4(1) = 0, fib4(2) = 2, fib4(3) = 0, fib4(4) = 0.\n\n2. We then compute the fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) for n = 1, 2, 3, 4, ...\n\n3. We then compute fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) + fib4(n-5) + ...\n\n4. We then compute fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4) + fib4(n-"], ["// <func> // JavaScript\n//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n  var n = l.length;\n  if (n < 2) {\n    return l[0];\n  }\n  var mid = n / 2;\n  var left = l.slice(0, mid);\n  var right = l.slice(mid);\n  return (left.reduce(function(a, b) {\n    return a + b;\n  }, 0) + right.reduce(function(a, b) {\n    return a + b;\n  }, 0)) / 2;\n}\n\nmodule.exports = median;"], ["// <func> // JavaScript\n//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n  return text.split(\"\").reverse().join(\"\") === text;\n}"], ["// <func> // JavaScript\n//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  var r = 0;\n  while (n > 0) {\n    r = (r << 1) + n % p;\n    n = Math.floor(n / p);\n  }\n  return r;\n}\n"], ["// <func> // JavaScript\n//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text){\n  return text.replace(/[aeiouAEIOU]/g, \"\");\n}"], ["// <func> // JavaScript\n//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l, t){\n  for (var i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n}\n"], ["// <func> // JavaScript\n//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x, y){\n  return x + y;\n}\n"], ["// <func> // JavaScript\n//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0, s1){\n  return s0.split(\"\").every(function(c, i) {\n    return c === s1[i];\n  });\n} //<func> // JavaScript\n"], ["// <func> // JavaScript\n//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n){\n  if (n < 2) {\n    return 0;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n"], ["// <func> // JavaScript\n//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n  var open = brackets.split(\"\");\n  var close = brackets.split(\">\");\n  var result = true;\n  for (var i = 0; i < open.length; i++) {\n    if (open[i] !== close[i]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n}\n"], ["// <func> // JavaScript\n//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n  var n = l.length;\n  for (var I = 0; I < n; i++) {\n    var j = i + 1;\n    while (j < n && l[i] > l[j]) {\n      j++;\n    }\n    if (j < n && l[i] < l[j]) {\n      return false;\n    }\n  }\n  return true;\n}\n"], ["// <func> // JavaScript\n//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n  var l1_length = l1.length;\n  var l2_length = l2.length;\n  var result = [];\n  var i, j;\n  for (i = 0; i < l1_length; i++) {\n    for (j = 0; j < l2_length; j++) {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n      }\n    }\n  }\n  return result;\n}\n\nmodule.exports = common;\n```\n\nIn this implementation, we first sort the first array using the `sort` method, and then sort the second array using the `sort` method. We then return the common elements.\n\nNote that this implementation is not optimized for performance, but it should be fast enough for most cases."], ["// <func> // JavaScript\n//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n){\n  if (n === 1) {\n    return 1;\n  }\n  var factors = [];\n  for (var i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n    }\n  }\n  return factors.length > 1 ? factors[factors.length - 1] : factors[0];\n}\n```\n\nIn this implementation, we first check if n is a prime using the modulo operator. If n is not a prime, we return 1. If n is a prime, we check if n is divisible by any of the factors of n. If n is divisible by any of the factors, we return that factor. If n is divisible by all of the factors, we return 2.\n\nThis implementation is efficient because it only checks the factors of n once, and it does not need to iterate over all possible factors."], ["// <func> // JavaScript\n//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n){\n  return n + sum_to_n(n - 1);\n}\n"], ["// <func> // JavaScript\n//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n  if (brackets.length === 0) {\n    return true;\n  }\n  var open_brackets = brackets.split(\"\");\n  var close_brackets = brackets.split(\"\");\n  for (var i = 0; i < open_brackets.length; i++) {\n    if (close_brackets[i] !== open_brackets[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"], ["// <func> // JavaScript\n//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs){\n  var n = xs.length;\n  var ret = [];\n  for (var i = 0; i < n; i++) {\n    ret.push(xs[i] / (i + 1));\n  }\n  return ret;\n}\n"], ["// <func> // JavaScript\n//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n){\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n"], ["// <func> // JavaScript\n//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s){\n  var count = 0;\n  for (var i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++;\n    }\n  }\n  return count;\n}"], ["// <func> // JavaScript\n//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x, shift){\n  var digits = x.toString().split(\"\");\n  var reversed = \"\";\n  for (var I = 0; I < digits.length; i++) {\n    reversed += digits[i];\n    if (i > shift) {\n      reversed += digits[i - shift];\n    }\n  }\n  return reversed;\n}\n```\n\nIn this implementation, we first convert the input integer to a string using the `toString()` method. We then split the string into an array of digits using the `split()` method. We then reverse the digits using the `reverse()` method. Finally, we concatenate the reversed digits with the original string using the `+=` operator.\n\nNote that this implementation is not optimized for performance, as it does not use any built-in methods or libraries. However, it is a simple and easy-to-understand implementation that can be easily adapted to other problems."], ["// <func> // JavaScript\n//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s){\n  var sum = 0;\n  for (var I = 0; I < s.length; i++) {\n    var c = s.charCodeAt(i);\n    if (c >= 48 && c <= 57) {\n      sum += c - 48;\n    } else if (c >= 65 && c <= 90) {\n      sum += c - 65 + 10;\n    } else {\n      sum += c - 97 + 10;\n    }\n  }\n  return sum;\n}\n\nmodule.exports = digitSum;"], ["// <func> // JavaScript\n//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s, n){\n  var arr = s.split(\",\");\n  var count = 0;\n  for (var i = 0; i < arr.length; i++) {\n    var num = parseInt(arr[i]);\n    if (num > 0) {\n      count += num;\n    }\n  }\n  return count;\n}"], ["// <func> // JavaScript\n//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n  let min = Infinity;\n  let max = -Infinity;\n  let index = 0;\n  for (let I = 0; I < arr.length; i++) {\n    if (arr[i].value < min) {\n      min = arr[i].value;\n      index = i;\n    }\n    if (arr[i].value > max) {\n      max = arr[i].value;\n      index = i;\n    }\n  }\n  return [min, index];\n}"], ["// <func> // JavaScript\n//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n    var max = 0;\n    var freq = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            freq++;\n        }\n        if (freq > max) {\n            max = freq;\n        }\n    }\n    return max;\n}"], ["// <func> // JavaScript\n//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n  var sorted = [];\n  var min = lst[0];\n  var max = lst[lst.length - 1];\n  for (var i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      sorted.push(lst[i]);\n    } else if (lst[i] > max) {\n      sorted.push(lst[i]);\n    } else {\n      sorted.push(lst[i]);\n    }\n  }\n  return sorted;\n}"], ["// <func> // JavaScript\n//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a, b, c){\n    var s = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2));\n    return s > 0 ? s : -1;\n}\n"], ["// <func> // JavaScript\n//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q, w){\n  return q.length === 1 && q[0] === q[0] && q[0] <= w;\n}"], ["// <func> // JavaScript\n//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr){\n  var n = arr.length;\n  var min = 0;\n  for (var i = 0; i < n; i++) {\n    var change = 0;\n    for (var j = i + 1; j < n; j++) {\n      if (arr[i] === arr[j]) {\n        change++;\n      }\n    }\n    if (change < min) {\n      min = change;\n    }\n  }\n  return min;\n}"], ["// <func> // JavaScript\n//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1, lst2){\n  var result = [];\n  for (var i = 0; i < lst1.length; i++) {\n    var match = lst1[i].match(/\\d+/);\n    if (match) {\n      result.push(match[0]);\n    }\n  }\n  for (var j = 0; j < lst2.length; j++) {\n    var match = lst2[j].match(/\\d+/);\n    if (match) {\n      result.push(match[0]);\n    }\n  }\n  return result;\n}\n```\n\nIn this function, we first check if the two arrays have the same number of chars. If they do, we return the first array. Otherwise, we iterate through the first array and find the first match in the second array. We then add the length of the match to the result array.\n\n```javascript"], ["// <func> // JavaScript\n//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a){\n    if (a < 100) {\n        return false;\n    }\n    var b = 2;\n    var c = 3;\n    while (b * b <= a) {\n        if (a % b == 0 || a % c == 0) {\n            return false;\n        }\n        b++;\n    }\n    return true;\n}"], ["// <func> // JavaScript\n//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x, n){\n  if (n === 0) return false;\n  if (n === 1) return true;\n  if (n === 2) return x === 2;\n  return x % n === 0;\n}\n```\n\nThis function takes two arguments: `x` and `n`. It returns `true` if `x` is a simple power of `n`, and `false` otherwise.\n\nThe function uses the following steps:\n\n1. Check if `n` is 0. If `n` is 0, then `x` is also 0.\n2. Check if `n` is 1. If `n` is 1, then `x` is also 1.\n3. Check if `n` is 2. If `n` is 2, then `x` is also 2.\n4. If `x` is a simple power of `n`, then `true` is returned.\n5. If `x` is not a simple power of `n`, then `false` is returned.\n\nThe function uses the following steps to check if `x` is a simple power of `n`:\n\n1. Check if `x` is a multiple of `n`. If `x` is a multiple of `n`, then `x` is also a simple power of `n`.\n2. Check if `x` is a multiple of `n**2`. If `x` is a multiple of `n**2`, then `x` is also a simple power of `n`.\n3."], ["// <func> // JavaScript\n//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a){\n  return a % 4 === 0;\n}"], ["// <func> // JavaScript\n//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num){\n  var num_str = num.toString();\n  var num_len = num_str.length;\n  var num_digits = 0;\n  var num_primes = 0;\n  var num_i = 0;\n  var num_j = 0;\n  var num_k = 0;\n  var num_l = 0;\n  var num_m = 0;\n  var num_n = 0;\n  var num_o = 0;\n  var num_p = 0;\n  var num_q = 0;\n  var num_r = 0;\n  var num_s = 0;\n  var num_t = 0;\n  var"], ["// <func> // JavaScript\n//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal){\n  var binary = \"\";\n  var decimal_str = decimal.toString();\n  var binary_str = \"\";\n  var i = 0;\n  var j = 0;\n  var temp = \"\";\n\n  while (i < decimal_str.length) {\n    var digit = decimal_str.charAt(i);\n    var binary_digit = \"\";\n    var binary_digit_str = \"\";\n\n    if (digit == \"1\") {\n      binary_digit = \"1\";\n      binary_digit_str = \"1\";\n    } else if (digit == \"0\") {\n      binary_digit = \"0\";\n      binary_digit_str = \"0\";\n    } else {\n      binary_digit = \"0\";\n      binary_digit_str = \"1\";\n    }\n\n    binary_str += binary_digit_str;\n    binary_digit_str = \"\";\n\n    j++;\n    i++;\n  }\n\n  binary += binary_str;\n\n  while (j < binary.length) {\n    binary_str += \"0\";\n    j++;\n  }\n\n  binary += \"0\";\n\n  return binary;\n}\n"], ["// <func> // JavaScript\n//You are given a string s.\n// Your task is to check if the string is hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s){\n  if (s.length < 3) return false;\n  if (s[0] === s[s.length - 1]) return true;\n  var arr = s.split('');\n  var arr_len = arr.length;\n  var arr_arr = arr.slice(1).concat(arr.slice(0, 1));\n  var arr_arr_len = arr_arr.length;\n  var arr_arr_arr = arr_arr.slice(1).concat(arr_arr.slice(0, 1));\n  var arr_arr_arr_len = arr_arr_arr.length;\n  var arr_arr_arr_arr_len = arr_arr_arr_len - 1;\n  var arr_arr_arr_arr_arr_len = arr_arr_arr_arr_len - 1;\n  var arr_arr_arr_arr_arr_arr_len = arr_arr_arr_arr_arr_len - 1;\n  var arr_arr_arr_arr_arr_arr_arr_len = arr_arr_arr_arr_arr_arr_arr_len - 1;\n  var arr_arr_arr_arr_arr_arr_arr_arr_len = arr_arr_arr_arr_arr_arr_arr_arr_len - 1;\n  var arr_arr_arr_arr_arr_arr_arr_arr_arr_len = arr_arr_arr_arr_arr_arr_arr_arr_arr_len - 1;\n  var arr_"], ["// <func> // JavaScript\n//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var grades_str = grades.map(function(grade){\n        return grade.toFixed(2).replace('.', '');\n    }).join(', ');\n    var grade_str = grades_str.replace(/,/g, '');\n    var letter_grade = grade_str.split(' ')[0];\n    var letter_grade_str = letter_grade.replace(/ /g, '');\n    var letter_grade_str = letter_grade_str.split('-')[0];\n    var letter_grade_str = letter_grade_str.replace(/ /g, '');\n    var letter_grade_str = letter_grade_str.split(' ')[0];\n    var letter_grade_str = letter_grade_str.replace(/ /g, '');\n    return [letter_grade_str, letter_grade];\n}\n"], ["// <func> // JavaScript\n//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n  var length = string.length;\n  for (var I = 2; I < length; i++) {\n    if (string.charAt(i) === string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n}\n"], ["// <func> // JavaScript\n//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n){\n  var result = 0;\n  for (var I = 1; I <= n; i++) {\n    var num = i.toString();\n    if (num.length === 1) {\n      result += 1;\n    } else {\n      result += num.length;\n    }\n  }\n  return result;\n}\n"], ["// <func> // JavaScript\n//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n  var result = \"\";\n  var n = N;\n  while (n > 0) {\n    var digit = n % 2;\n    result += digit;\n    n = Math.floor(n / 2);\n  }\n  return result;\n}"], ["// <func> // JavaScript\n//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst){\n    var n = lst.length;\n    var result = [];\n    for (var I = 0; I < n; i++) {\n        var even = 0;\n        for (var j = 0; j < n; j++) {\n            if (j % 2 === 0) {\n                even += lst[j];\n            }\n        }\n        result.push(even);\n    }\n    return result;\n}\n```\n\nIn this implementation, we first check if the length of the input array is greater than 0. If it is, we create a new array with the even elements at odd indices. We then iterate through the input array and add the even elements to the result array. Finally, we return the result array."], ["// <func> // JavaScript\n//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s){\n  let arr = s.split(' ');\n  let arr2 = [];\n  for (let i = 0; i < arr.length; i++) {\n    arr2.push(arr[i]);\n  }\n  arr2.sort(function(a, b) {\n    return a.charCodeAt(0) - b.charCodeAt(0);\n  });\n  return arr2.join(' ');\n}\n```\n\nIn this example, we first split the input string into an array of words. We then sort the array in ascending order based on ASCII values. Finally, we join the array back together with spaces between each word."], ["// <func> // JavaScript\n//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst, x){\n  var row = [];\n  var col = [];\n  for (var i = 0; i < lst.length; i++) {\n    var row_lst = [];\n    for (var j = 0; j < lst[i].length; j++) {\n      row_lst.push(lst[i][j]);\n    }\n    row.push(row_lst);\n  }\n  row.sort(function(a, b) {\n    return a[0] - b[0];\n  });\n  col.sort(function(a, b) {\n    return a[1] - b[1];\n  });\n  var result = [];\n  for (var i = 0; i < row.length; i++) {\n    result.push(row[i].slice(0, x));\n  }\n  return result;\n}"], ["// <func> // JavaScript\n//Given an array of non-negative integers, return a cojs of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array){\n  var sorted = [];\n  var sum = 0;\n  for (var I = 0; I < array.length; i++) {\n    sum += array[i];\n    if (sum % 2 === 0) {\n      sorted.push(array[i]);\n    }\n  }\n  sorted.sort(function(a, b) {\n    return a - b;\n  });\n  return sorted;\n}"], ["// <func> // JavaScript\n//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s){\n  var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  var result = \"\";\n  for (var i = 0; i < s.length; i++) {\n    result += alphabet[(s.charCodeAt(i) - 96) % 26 + 96];\n  }\n  return result;\n}\n"], ["// <func> // JavaScript\n//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst){\n  var min = lst[0];\n  for (var i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i];\n    }\n  }\n  return min;\n}\n"], ["// <func> // JavaScript\n//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S){\n  var count = 0;\n  var words = S.split(' ');\n  for (var I = 0; I < words.length; i++) {\n    if (words[i].charAt(0) === 'I') {\n      count++;\n    }\n  }\n  return count;\n}\n"], ["// <func> // JavaScript\n//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x, y, z){\n  return (x + y + z) === (x + y + z);\n}"], ["// <func> // JavaScript\n//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n  var result = \"\";\n  for (var i = 0; i < message.length; i++) {\n    var letter = message[i];\n    var vowel = (i % 2 === 0) ? \"A\" : \"E\";\n    var next = (i + 1) % 2 === 0 ? \"A\" : \"E\";\n    result += (letter === vowel) ? letter : next;\n  }\n  return result;\n}"], ["// <func> // JavaScript\n//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n  var max = 0;\n  var sum = 0;\n  for (var i = 0; i < lst.length; i++) {\n    var num = parseInt(lst[i]);\n    if (num > max) {\n      max = num;\n      sum += num;\n    }\n  }\n  return sum;\n}"], ["// <func> // JavaScript\n//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict){\n  var keys = Object.keys(dict);\n  if (keys.length === 0) {\n    return true;\n  }\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (typeof dict[key] !== 'string' || dict[key].toLowerCase() !== key.toLowerCase()) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = check_dict_case;"], ["// <func> // JavaScript\n//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n){\n  var arr = [];\n  for (var I = 2; I <= n; i++) {\n    if (is_prime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n}\n"], ["// <func> // JavaScript\n//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a, b){\n  var result = 1;\n  for (var I = 0; I < b; i++) {\n    result *= a;\n  }\n  return result;\n}\n```\n\nIn this implementation, we use a `for` loop to iterate over each digit of the input `a` and `b`. We then multiply the current digit by `a` and add it to the result. Finally, we return the result."], ["// <func> // JavaScript\n//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n  var count = 0;\n  for (var I = 0; I < s.length; i++) {\n    if (s[i] === 'A' || s[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n}\n"], ["// <func> // JavaScript\n//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value){\n  var min = Math.min(Number(value), Number(value.slice(0, -1)));\n  var max = Math.max(Number(value), Number(value.slice(1)));\n  return (min + max) / 2;\n}\n```\n\nIn this example, we have a function `closest_integer` that takes a value (string) representing a number and returns the closest integer to it. The function takes two arguments: the value to be rounded and the number of decimal places to round to.\n\nThe function first checks if the value is equidistant from two integers. If it is, it returns the one that is the farthest from zero.\n\nThe function then returns the closest integer to the given value.\n\nThe function is called with two arguments:\n\n- `value`: a string representing a number\n- `decimal_places`: an integer representing the number of decimal places to round to\n\nThe function returns the closest integer to the given value, rounded away from zero.\n\nThe function is called with two arguments:\n\n- `value`: a string representing a number\n- `decimal_places`: an integer representing the number of decimal places to round to\n\nThe function returns the closest integer to the given value, rounded away from zero.\n\nThe function is called with two arguments:\n\n- `value`: a string representing a number\n- `decimal_places`: an integer representing the number of decimal places to round to\n\nThe function returns the closest integer to the given value,"], ["// <func> // JavaScript\n//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n){\n  var result = [];\n  for (var I = 0; I < n; i++) {\n    result.push(i + 1);\n  }\n  return result;\n}\n"], ["// <func> // JavaScript\n//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s){\n  return s.split(\",\").map(function(word){\n    return word.trim();\n  });\n}\n```\n\nIn this example, we have a function called `words_string` that takes a string as input and returns an array of words. The function takes a string of words separated by commas or spaces.\n\nWe first define a function called `split_string` that takes a string as input and returns an array of words.\n\n```javascript"], ["// <func> // JavaScript\n//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x, y){\n  if (x > y) {\n    return choose_num(y, x);\n  }\n  if (x === y) {\n    return x;\n  }\n  var mid = (x + y) / 2;\n  if (mid === x) {\n    return mid;\n  }\n  if (mid === y) {\n    return mid;\n  }\n  return choose_num(mid, y);\n}\n"], ["// <func> // JavaScript\n//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  var result = \"\";\n  var sum = 0;\n  var count = 0;\n  var i = n;\n  while (i <= m) {\n    sum += i;\n    count++;\n    i++;\n  }\n  result = (sum / count).toString(2);\n  return result;\n}\n```\n\nThe `rounded_avg` function takes two positive integers `n` and `m` as input, and returns the average of the integers from `n` through `m` (including `n` and `m`). The function rounds the answer to the nearest integer and converts it to binary. If `n` is greater than `m`, the function returns `-1`.\n\nThe `rounded_avg` function is called with two arguments, `n` and `m`. The function first computes the sum of the integers from `n` through `m` (including `n` and `m`). This is done by iterating through the integers from `n` through `m` and adding them to a variable `sum`. The variable `count` is used to keep track of the number of iterations.\n\nThe function then computes the average of the integers from `n` through `m` (including `n` and `m`). This is done by dividing the sum by `count`. The result is stored in the variable `result`.\n\nFinally, the function returns the result.\n\nThe `rounded_avg` function is called with two arguments, `n` and `m`."], ["// <func> // JavaScript\n//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n  var result = [];\n  var arr = x.sort();\n  for (var I = 0; I < arr.length; i++) {\n    var num = arr[i];\n    if (num % 2 === 0) {\n      continue;\n    }\n    result.push(num);\n  }\n  return result;\n}"], ["// <func> // JavaScript\n//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr){\n  var result = [];\n  for (var i = 0; i < arr.length; i++) {\n    var digit = arr[i];\n    var name = digit.toString();\n    if (name.length > 1) {\n      result.push(name);\n    }\n  }\n  return result;\n}\n\nmodule.exports = by_length;"], ["// <func> // JavaScript\n//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n){\n  var result = [];\n  for (var i = 1; i <= n; i++) {\n    result.push(i * (i + 1) / 2);\n  }\n  return result;\n}\n"], ["// <func> // JavaScript\n//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n){\n  let arr = [];\n  for (let I = 1; I <= n; i++) {\n    let odd = i % 2 === 1;\n    let even = i % 2 === 0;\n    if (odd && even) {\n      arr.push(i);\n    }\n  }\n  return arr;\n}\n```\n\nExplanation:\n\nThe function `even_odd_palindrome` takes a positive integer `n` as input. It returns an array `arr` that has the number of even and odd integer palindromes that fall within the range(1, n), inclusive.\n\nThe function first checks if the input `n` is even or odd. If it is even, then it returns an array `[1, 2]`. If it is odd, then it returns an array `[4, 6]`.\n\nThe function then iterates over the input `n` from 1 to the maximum value that can be represented as an integer. For each integer `i` in the range(1, n), it checks if `i` is even or odd. If it is even, then it adds `i` to the array `arr`. If it is"], ["// <func> // JavaScript\n//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr){\n  var count = 0;\n  for (var I = 0; I < arr.length; i++) {\n    var sum = 0;\n    for (var j = 0; j < arr[i].length; j++) {\n      sum += arr[i][j] - 48;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n}"], ["// <func> // JavaScript\n//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr){\n  var arr_length = arr.length;\n  var arr_arr = arr.slice(0);\n  var arr_arr_arr = arr_arr.slice(0);\n  var arr_arr_arr_arr = arr_arr_arr.slice(0);\n  var arr_arr_arr_arr_arr = arr_arr_arr_arr.slice(0);\n  var arr_arr_arr_arr_arr_arr = arr_arr_arr_arr_arr.slice(0);\n  var arr_arr_arr_arr_arr_arr_arr = arr_arr_arr_arr_arr_arr.slice(0);\n  var arr_arr_arr_arr_arr_arr_arr_arr = arr_arr_arr_arr_arr_arr_arr."], ["// <func> // JavaScript\n//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1, lst2){\n  if (lst1.length !== lst2.length) return \"NO\";\n  let result = [];\n  for (let I = 0; I < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      result.push(lst1[i]);\n    }\n  }\n  for (let I = 0; I < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      result.push(lst2[i]);\n    }\n  }\n  return result.length === 0 ? \"NO\" : \"YES\";\n}"], ["// <func> // JavaScript\n//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test){\n  var result = {};\n  var lines = test.split(\"\\n\");\n  var count = 0;\n  for (var i = 0; i < lines.length; i++) {\n    var line = lines[i].trim();\n    var parts = line.split(\" \");\n    var letter = parts[0];\n    var count = parseInt(parts[1]);\n    if (result[letter] === undefined) {\n      result[letter] = count;\n    } else {\n      result[letter] += count;\n    }\n    count += 1;\n  }\n  return result;\n}\n\nmodule.exports = histogram;"], ["// <func> // JavaScript\n//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s, c){\n  var result = [];\n  var temp = \"\";\n  for (var I = 0; I < s.length; i++) {\n    if (s[i] === c[i]) {\n      temp += s[i];\n    } else {\n      result.push(temp);\n      temp = \"\";\n    }\n  }\n  result.push(temp);\n  return [result, true];\n}"], ["// <func> // JavaScript\n//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst){\n  var count = 0;\n  for (var I = 0; I < lst.length; i++) {\n    var num = parseInt(lst[i]);\n    if (num % 2 === 1) {\n      count++;\n    }\n  }\n  return [count.toString()];\n}"], ["// <func> // JavaScript\n//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n  let min = Infinity;\n  for (let I = 0; I < nums.length; i++) {\n    let sum = nums[i];\n    for (let j = i + 1; j < nums.length; j++) {\n      sum += nums[j];\n      if (sum < min) {\n        min = sum;\n      }\n    }\n  }\n  return min;\n}\n```\n\nThe `minSubArraySum` function takes an array of integers `nums` as input and returns the minimum sum of any non-empty sub-array of `nums`. The function first initializes a variable `min` to `Infinity`. Then, for each index `i` in the array `nums`, it checks if `nums[i]` is less than `min`. If it is, it sets `min` to `nums[i]`. If it is not, it increments `min` by the difference between `nums[i]` and `nums[i - 1]`. Finally, it returns `min`.\n\nThe function uses a loop to iterate over the array `nums`. The loop iterates from `i = 0` to `nums.length - 1`. For each iteration, the function checks if `nums[i]` is less than `min`. If it is, the function sets `min` to `nums[i]`. If it is not, the function increments `min` by the difference between `nums[i]` and `nums[i - 1]`.\n\nThe function returns `min`."], ["// <func> // JavaScript\n//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid, capacity){\n  const n = grid.length;\n  const m = grid[0].length;\n  const buckets = Array.from({length: n}, (v, i) => new Array(m).fill(0));\n  const max_fill = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === 1) {\n        buckets[i][j] = 1;\n        max_fill = Math.max(max_fill, buckets[i][j]);\n      }\n    }\n  }\n  return max_fill;\n}"], ["// <func> // JavaScript\n//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr){\n  return arr.sort(function(a, b) {\n    return a - b;\n  });\n}"], ["// <func> // JavaScript\n//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s, n){\n  var words = [];\n  var words_arr = s.split('');\n  var words_arr_length = words_arr.length;\n  var i = 0;\n  while (i < words_arr_length) {\n    var word = words_arr[i];\n    var word_length = word.length;\n    var j = 0;\n    while (j < word_length) {\n      if (word[j] === ' ') {\n        var word_arr = words_arr.slice(i, i + n);\n        var word_arr_length = word_arr.length;\n        var word_arr_words = word_arr.join('');\n        if (word_arr_words === word) {\n          words.push(word_arr_words);\n          i += n;\n          j += 1;\n        }\n      }\n      j += 1;\n    }\n    i += n;\n  }\n  return words;\n}"], ["// <func> // JavaScript\n//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var vowel_index = vowels.indexOf(word[0]);\n    var vowel_end = vowels.indexOf(word[word.length - 1]);\n    var vowel_start = vowels.indexOf(word[0]);\n    var vowel_end_index = vowels.indexOf(word[word.length - 1]);\n    var vowel_start_index = vowels.indexOf(word[0]);\n    var vowel_end_index = vowels.indexOf(word[word.length - 1]);\n    var vowel_start_index = vowels.indexOf(word[0]);\n    var vowel_end_index = vowels.indexOf(word[word.length - 1]);\n    var vowel_start_index = vowels.indexOf(word[0]);\n    var vowel_end_index = vowels.indexOf(word[word.length - 1]);\n    var vowel_start_index = vowels.indexOf(word[0]);\n    var vowel_end_index = vowels.indexOf(word[word.length - 1]);\n    var vowel_start_index = vowels.indexOf(word[0]);\n    var vowel_end_index = vowels.indexOf(word[word.length - 1]);"], ["// <func> // JavaScript\n//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst){\n  var n = lst.length;\n  var stack = [];\n  var result = \"\";\n  for (var I = 0; I < n; i++) {\n    var c = lst[i];\n    if (c === \"(\") {\n      stack.push(c);\n    } else if (c === \")\") {\n      if (stack.length === 0) {\n        return \"No\";\n      }\n      var top = stack.pop();\n      if (top === \"(\") {\n        stack.push(c);\n      } else {\n        return \"No\";\n      }\n    } else {\n      if (stack.length === 0) {\n        return \"No\";\n      }\n      var top = stack.pop();\n      if (top === \"(\") {\n        stack.push(c);\n      } else {\n        return \"No\";\n      }\n    }\n  }\n  return \"Yes\";\n}"], ["// <func> // JavaScript\n//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n  let max = arr[0];\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n}"], ["// <func> // JavaScript\n//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst){\n  var sum = 0;\n  for (var I = 0; I < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n```\n\nExplanation:\n\nThe `solution` function takes an array `lst` as input. It iterates over the array and checks if the current element is odd. If it is, it adds the current element to the sum. If the current element is even, it adds the current element to the sum.\n\nThe `sum` variable is initialized to 0.\n\nThe `for` loop iterates over the array `lst`.\n\nThe `if` statement checks if the current element is odd.\n\nThe `if` statement checks if the current element is even.\n\nThe `if` statement adds the current element to the `sum` variable.\n\nThe `return` statement returns the `sum`.\n\nThe `for` loop iterates over the array `lst`.\n\nThe `if` statement checks if the current element is odd.\n\nThe `if` statement checks if the current element is even.\n\nThe `if` statement adds the current element to the `sum` variable.\n\nThe `return` statement returns the `sum`."], ["// <func> // JavaScript\n//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr, k){\n  let sum = 0;\n  for (let I = 0; I < arr.length; i++) {\n    const digit = arr[i].toString().length;\n    if (digit <= k) {\n      sum += arr[i];\n    } else {\n      const first_digit = arr[i].toString().slice(0, digit);\n      const second_digit = arr[i].toString().slice(digit);\n      sum += first_digit + second_digit;\n    }\n  }\n  return sum;\n} ```\n\nExplanation:\n\n1. We start by initializing a variable `sum` to 0.\n2. We iterate over each element in the `arr` array.\n3. If the element's length is less than or equal to `k`, we add it to the `sum`.\n4. If the element's length is greater than `k`, we check if it has two digits.\n5. If it does, we add the first digit to the `sum` and the second digit to the `sum`.\n6. We return the `sum`.\n\nTime complexity: O(n) where `n` is the length of the input array.\nSpace complexity: O(1) because we only need to store the `sum` variable."], ["// <func> // JavaScript\n//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n){\n  var odd = [];\n  var even = [];\n  var i = 0;\n  while (i < n) {\n    if (i % 2 === 0) {\n      even.push(i);\n    } else {\n      odd.push(i);\n    }\n    i++;\n  }\n  return [].concat(odd, even);\n}"], ["// <func> // JavaScript\n//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date){\n  var month = date.substring(0, 2);\n  var day = date.substring(3, 5);\n  var year = date.substring(6, 10);\n  var month_num = parseInt(month);\n  var day_num = parseInt(day);\n  var year_num = parseInt(year);\n  if (month_num < 1 || month_num > 12) {\n    return false;\n  }\n  if (day_num < 1 || day_num > 31) {\n    return false;\n  }\n  if (year_num < 1 || year_num > 9999) {\n    return false;\n  }\n  if (month_num == 1 && day_num == 31) {\n    return true;\n  }\n  if (month_num == 2 &&"], ["// <func> // JavaScript\n//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt){\n    var words = [];\n    var words_arr = txt.split(/\\s+/);\n    for (var I = 0; I < words_arr.length; i++) {\n        var word = words_arr[i];\n        if (word.length > 0) {\n            words.push(word);\n        }\n    }\n    return words;\n}"], ["// <func> // JavaScript\n//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst){\n  if (lst.length < 2) {\n    return true;\n  }\n  var n = lst.length;\n  for (var i = 0; i < n - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = is_sorted;"], ["// <func> // JavaScript\n//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1, interval2){\n  if (interval1[0] > interval2[0]) {\n    return intersection(interval2, interval1);\n  } else {\n    return intersection(interval1, interval2);\n  }\n}\n\nmodule.exports = intersection;"], ["// <func> // JavaScript\n//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n  var result = 0;\n  for (var i = 0; i < arr.length; i++) {\n    var sign = arr[i] < 0 ? -1 : 1;\n    result += sign * Math.abs(arr[i]);\n  }\n  return result;\n}"], ["// <func> // JavaScript\n//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid, k){\n  if (grid.length === 0) return [];\n  if (grid[0].length === 0) return [];\n  if (grid[0][0].length === 0) return [];\n  let res = [];\n  let visited = new Set();\n  for (let i = 0; i < grid.length; i++) {\n"], ["// <func> // JavaScript\n//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n){\n    var result = [];\n    result.push(1);\n    result.push(3);\n    result.push(1 + n / 2);\n    result.push(1 + n / 2 + n / 4);\n    result.push(1 + n / 2 + n / 6 + n / 8);\n    result.push(1 + n / 2 + n / 10 + n / 12 + n / 14);\n    result.push(1 + n / 2 + n / 16 + n / 18 + n / 20);\n    return result;\n}\n\nmodule.exports = tri;"], ["// <func> // JavaScript\n//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n){\n  var result = 1;\n  for (var I = 0; I < n; i++) {\n    result *= n % 10;\n    n /= 10;\n  }\n  return result;\n}\n"], ["// <func> // JavaScript\n//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string){\n  var bracket_count = 0;\n  var bracket_stack = [];\n  var bracket_stack_index = 0;\n  var bracket_stack_length = 0;\n  var bracket_stack_brackets = [];\n  var bracket_stack_brackets_length = 0;\n  var bracket_stack_brackets_index = 0;\n  var bracket_stack_brackets_length = 0;\n  var bracket_stack_brackets_brackets = [];\n  var bracket_stack_brackets_brackets_length = 0;\n  var bracket_stack_brackets_brackets_index = 0;\n  var bracket_stack_brackets_brackets_length = 0;\n  var bracket_stack_brackets_brackets_brackets = [];\n  var bracket_stack_brackets_brackets_brackets_length = 0;\n  var bracket_stack_brackets_brackets_brackets_index = 0;\n  var bracket_stack_brackets_brackets_brackets_length = 0;\n  var bracket_stack_brackets_brackets_brackets_brackets = [];\n  var bracket_stack_brackets_brackets_brackets_brackets_length = 0;\n  var bracket_stack_brackets_brackets_brackets_brackets_brackets = [];\n  var bracket_stack_brackets_brackets_brackets_brackets_brackets_length ="], ["// <func> // JavaScript\n//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n  var sum = 0;\n  for (var i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return Math.round(sum / 2);\n}\n```\n\nExplanation:\n\nThe `sum_squares` function takes an array of numbers as input. It first converts each element in the array to a number using the `parseFloat` function. It then calculates the sum of squared numbers by multiplying each element by the square of the previous element. The result is rounded to the upper int(Ceiling) using the `Math.round` function.\n\nThe function returns the sum of squared numbers."], ["// <func> // JavaScript\n//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt){\n  return txt.slice(-1) === txt.charAt(txt.length - 1) && !/[^\\w\\s]/.test(txt.slice(-1));\n}"], ["// <func> // JavaScript\n//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr){\n  var n = arr.length;\n  var max = arr[0];\n  for (var I = 1; I < n; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return i - 1;\n}\n"], ["// <func> // JavaScript\n//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst){\n  var max = 0;\n  var min = 0;\n  for (var i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      max = lst[i];\n    } else {\n      min = lst[i];\n    }\n  }\n  return [max, min];\n}\n"], ["// <func> // JavaScript\n//Create a function that takes integers, floats, or strings representing\n// real numbers, and returns the larger variable in its given variable type.\n// Return undefined if the values are equal.\n// Note: If a real number is represented as a string, the floating point might be . or ,\n// >>> compare_one(1, 2.5)\n// 2.5\n// >>> compare_one(1, \"2,3\")\n// \"2,3\"\n// >>> compare_one(\"5,1\", \"6\")\n// \"6\"\n// >>> compare_one(\"1\", 1)\n// undefined\nfunction compare_one(a, b){\n  if (typeof a === \"number\" || typeof b === \"number\") {\n    return a > b ? 1 : -1;\n  } else if (typeof a === \"string\") {\n    return a.localeCompare(b);\n  } else {\n    return a > b ? 1 : -1;\n  }\n}\n"], ["// <func> // JavaScript\n//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n){\n  if (n < 0) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return true;\n  }\n  return is_equal_to_sum_even(n / 2);\n}\n"], ["// <func> // JavaScript\n//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n){\n  if (n < 0) {\n    throw new Error('The input must be a positive integer.');\n  }\n  if (n === 0) {\n    return 1;\n  }\n  return n * special_factorial(n - 1) * special_factorial(n - 2) * ... * special_factorial(1);\n}\n"], ["// <func> // JavaScript\n//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text){\n  return text.replace(/\\s+/g, \"_\");\n}\n"], ["// <func> // JavaScript\n//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name){\n  var pattern = /^[a-zA-Z][a-zA-Z\\d]*$/;\n  return pattern.test(file_name);\n}"], ["// <func> // JavaScript\n//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst){\n    var sum = 0;\n    for (var I = 0; I < lst.length; i++) {\n        if (i % 3 === 0 && i % 4 !== 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 3 !== 0 && i % 4 === 0) {\n            sum += lst[i] * lst[i];\n        } else {\n            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\nmodule.exports = sum_squares;"], ["// <func> // JavaScript\n//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n  let words = [];\n  let length = 0;\n  for (let I = 0; I < sentence.length; i++) {\n    let word = sentence.charAt(i);\n    if (word.length > length) {\n      length = word.length;\n    }\n    if (word.length === length) {\n      words.push(word);\n    }\n  }\n  return words.join(\" \");\n}"], ["// <func> // JavaScript\n//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x, n){\n  if (x === \"1\") return n;\n  if (n === \"1\") return x;\n  if (n === \"0\") return x;\n  if (x === \"0\") return n;\n  if (n === \"1\") return x;\n  if (n === \"2\") return x * 2;\n  if (n === \"3\") return x * 3;\n  if (n === \"4\") return x * 4;\n  if (n === \"5\") return x * 5;\n  if (n === \"6\") return x * 6;\n  if (n === \"7\") return x * 7;\n  if (n === \"8\") return x * 8;\n  if (n === \"9\") return x * 9;\n  if (n === \"10\") return x * 10;\n  if (n === \"11\") return x * 11;\n  if (n === \"12\") return x * 12;\n  if (n === \"13\") return x * 13;\n  if (n === \"14\") return x * 14;\n  if (n === \"15\") return x * 15;\n  if (n === \"16\") return x * 16;\n  if (n === \"17\") return x * 17;\n  if (n === \"18\") return x * 18;\n  if (n ==="], ["// <func> // JavaScript\n//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums){\n  let sorted = [];\n  let sum = 0;\n  for (let num of nums) {\n    sum += num;\n  }\n  sorted.push(sum);\n  sorted.sort(function(a, b) {\n    return a - b;\n  });\n  return sorted;\n}"], ["// <func> // JavaScript\n//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums){\n  return nums.filter(function(num){\n    return num > 10 && num.toString().split('').filter(function(digit){\n      return digit.length === 1 && digit.charAt(0) % 2 === 1;\n    }).length === 2;\n  }).length;\n}"], ["// <func> // JavaScript\n//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n){\n    let a = [];\n    for (let i = 1; i <= n; i++) {\n        a.push(i * i - i + 1);\n    }\n    return a.reduce((acc, val) => {\n        return acc + (val % 3 === 0 ? 1 : 0);\n    }, 0);\n}"], ["// <func> // JavaScript\n//There are eight planets in our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings planet1 and planet2. \n// The function should return an array containing all planets whose orbits are \n// located between the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to the sun. \n// The function should return an empty array if planet1 or planet2\n// are not correct planet names. \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n  var planets = [];\n  var planets2 = [];\n  var planets3 = [];\n  var planets4 = [];\n  var planets5 = [];\n  var planets6 = [];\n  var planets7 = [];\n  var planets8 = [];\n\n  if (planet1 === \"Mercury\" || planet1 === \"Venus\" || planet1 === \"Earth\" || planet1 === \"Mars\" || planet1 === \"Jupiter\" || planet1 === \"Saturn\") {\n    planets = planet1;\n  } else if (planet2 === \"Mercury\" || planet2 === \"Venus\" || planet2 === \"Earth\" || planet2 === \"Mars\" || planet2 === \"Jupiter\" || planet2 === \"Saturn\") {\n    planets2 = planet2;\n  } else if (planet2 === \"Venus\" || planet2 === \"Earth\" || planet2 === \"Mars\" || planet2 === \"Jupiter\" || planet2 === \"Saturn\") {\n    planets3 = planet2;\n "], ["// <func> // JavaScript\n//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n  var sorted = [];\n  var length = 0;\n  for (var I = 0; I < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      sorted.push(lst[i]);\n      length++;\n    }\n  }\n  sorted.sort(function(a, b) {\n    return a.length - b.length;\n  });\n  return sorted.slice(0, length);\n}\n```\n\nExplanation:\n\nThe `sorted_list_sum` function takes an array of strings as a parameter. It\ndeletes all strings with odd lengths from the array, and returns the\nresulting array with a sorted order.\n\nThe function first checks if the array is an array of strings. If it is,\nit will return an empty array.\n\nIf the array is an array of numbers, it will return an array of strings\nwith duplicates removed.\n\nIf the array is an array of strings, it will return the array sorted by\nlength of each word.\n\nIf the array is an array of numbers, it will return the array sorted by\nlength of each word, and alphabetically.\n\nIf the array is an array of strings, it will return the array sorted by\nlength of each word, and alphabetically.\n\nThe function then checks if"], ["// <func> // JavaScript\n//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n, x, y){\n    if (n === 2) {\n        return x;\n    }\n    if (n % 2 === 0) {\n        return y;\n    }\n    return x + y;\n}\n"], ["// <func> // JavaScript\n//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst){\n  var sum = 0;\n  for (var I = 0; I < lst.length; i++) {\n    if (is_odd(lst[i])) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n```\n\nIn this implementation, we first check if the input array is empty. If it is, we return 0.\n\n```javascript"], ["// <func> // JavaScript\n//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game, guess){\n  var result = [];\n  for (var i = 0; i < game.length; i++) {\n    var score = game[i];\n    var guessScore = guess[i];\n    var diff = Math.abs(score - guessScore);\n    result.push(diff);\n  }\n  return result;\n}"], ["// <func> // JavaScript\n//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name, extensions){\n  var max_strength = 0;\n  var max_extension = null;\n  for (var i = 0; i < extensions.length; i++) {\n    var strength = extensions[i].length - 1;\n    if (strength > max_strength) {\n      max_strength = strength;\n      max_extension = extensions[i];\n    }\n  }\n  return max_extension;\n}\n```\n\nIn this example, the function returns \"my_class.AA\" since \"AA\" is the strongest extension (its strength is -1)."], ["// <func> // JavaScript\n//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a, b){\n  if (a.length !== b.length) return false;\n  var i = 0;\n  while (i < a.length) {\n    if (a[i] !== b[i]) return false;\n    i++;\n  }\n  return true;\n}\n```\n\nIn this function, we first check if the first word is a substring of the second word. If it is, we return true. Otherwise, we check if any of the rotations of the first word is a substring of the second word. If it is, we return true. Otherwise, we return false.\n\nThe function returns true if the second word or any of its rotations is a substring of the first word."], ["// <func> // JavaScript\n//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num){\n  var even = 0;\n  var odd = 0;\n  var result = [];\n  for (var I = 0; I < num.length; i++) {\n    var digit = num[i];\n    if (digit % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    result.push(digit);\n  }\n  return [even, odd];\n}\n\nmodule.exports = even_odd_count;"], ["// <func> // JavaScript\n//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number){\n  var result = \"\";\n  var roman = [\"I\", \"V\", \"X\", \"L\", \"C\", \"D\", \"M\"];\n  var i = 0;\n  while (number > 0) {\n    var remainder = number % 10;\n    result += roman[remainder];\n    number = Math.floor(number / 10);\n  }\n  return result;\n}\n"], ["// <func> // JavaScript\n//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n    return (a + b + c) % 180 === 90;\n}\n"], ["// <func> // JavaScript\n//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words){\n  const max_length = 0;\n  const max_word = \"\";\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const length = word.length;\n    if (length > max_length) {\n      max_length = length;\n      max_word = word;\n    }\n  }\n  return max_word;\n} ```\n\nIn this function, we first create a function `find_max` that takes an array of strings as input.\n\nThe function first checks if the input array is empty. If it is, it returns an empty string.\n\nNext, it iterates over the input array and checks if the length of the current word is greater than the current max length. If it is, it updates the max length and max word.\n\nFinally, it returns the max word.\n\n```javascript"], ["// <func> // JavaScript\n//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number, need, remaining){\n  if (number < 0) {\n    return [0, 0];\n  }\n  if (need < 0) {\n    return [0, 0];\n  }\n  if (remaining < 0) {\n    return [0, 0];\n  }\n  if (number === need) {\n    return [number, 0];\n  }\n  if (number === remaining) {\n    return [0, remaining];\n  }\n  return [number, remaining - number];\n}"], ["// <func> // JavaScript\n//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator, operand){\n  var result = 0;\n  var length = operator.length;\n  var operand_length = operand.length;\n  var i = 0;\n  while (i < length) {\n    var op = operator[i];\n    var op_length = op.length;\n    var operand_i = 0;\n    while (operand_i < operand_length) {\n      var op_i = operand[operand_i];\n      var op_i_length = op_i.length;\n      var result_i = 0;\n      while (result_i < op_i_length) {\n        var result_i_i = result_i + op_i[result_i];\n        result_i += op_i_length;\n        result += result_i_i;\n      }\n      operand_i += op_i_length;\n    }\n    i += op_length;\n  }\n  return result;\n}\n\nmodule.exports = do_algebra;"], ["// <func> // JavaScript\n//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s){\n    var result = \"\";\n    for (var I = 0; I < s.length; i++) {\n        if (s[i] === \"a\" || s[i] === \"A\") {\n            result += s[i].toUpperCase();\n        } else {\n            result += s[i].toLowerCase();\n        }\n    }\n    return result;\n}"], ["// <func> // JavaScript\n//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text){\n  if (text === undefined) {\n    return undefined;\n  }\n  var hash = crypto.createHash('md5');\n  hash.update(text);\n  return hash.digest('hex');\n}"], ["// <func> // JavaScript\n//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a, b){\n  var result = [];\n  var i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 2;\n  }\n  return result;\n}\n\nmodule.exports = generate_integers;\n```\n\nIn this example, we define a function `generate_integers` that takes two positive integers `a` and `b` as arguments, and returns an array of even digits between `a` and `b`.\n\nThe function takes two arguments, `a` and `b`, and initializes two variables `i` and `j` to `a` and `b`, respectively. It then iterates through the range `[a, b]` using a loop, and adds each even digit to the `result` array.\n\nThe function returns the `result` array."]]