[["#!/bin/bash\n# Check if in given list of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> $(has_close_elements \"1.0 2.0 3.0\" \"0.5\")\n# \"false\"\n# >>> $(has_close_elements \"1.0 2.8 3.0 4.0 5.0 2.0\" \"0.3\")\n# \"true\"\n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n    local list=$1\n    local threshold=$2\n    local closest_index\n    local closest_value\n    local closest_distance\n    local closest_index_string\n    local closest_value_string\n    local closest_distance_string\n    local closest_index_string_array\n    local closest_value_string_array\n    local closest_distance_string_array\n    local closest_index_string_array_array\n    local closest_value_string_array_array\n    local closest_distance_string_array_array\n    local closest_index_string_array_array_array\n\n    # Split the list into an array of strings\n    local list_string_array\n    local list_string_array_array\n    list_string_array=($list)\n    list_string_array_array=(${list_string_array[@]})\n\n    # Loop through each element in the list\n    for I in \"${list_string_array[@]}\"\n    do\n        # Split the element into an array of strings\n        local element_string_array\n        element_string_array=(${i})\n\n        # Loop through each element in the array\n        for j in \"${element_string_array[@]}\"\n        do\n            # Split the element into an array of strings\n            local element_string_array_array\n            element_string_array_array=(${j})\n\n            # Loop through each element in the array\n            for k in \"${element_string_array_array[@]}\"\n            do\n                # Split the element into an array of strings\n                local element_string_array_array_array\n                element_string_array_"], ["#!/bin/bash\n# Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n# separate those group into separate strings and return the list of those.\n# Separate groups are balanced (each open brace is properly closed) and not nested within each other\n# Ignore any spaces in the input string.\n# >>> $(separate_paren_groups \"( ) (( )) (( )( ))\")\n# ['\"()\"', '\"(())\"', '\"(()())\"']\n#\n# $1 is a string\nseparate_paren_groups() {\n    local input=\"$1\"\n    local result=()\n    local open_braces=()\n    local close_braces=()\n    local open_braces_count=0\n    local close_braces_count=0\n    local open_braces_index=0\n    local close_braces_index=0\n    local open_braces_index_last=0\n    local close_braces_index_last=0\n    local open_braces_index_last_last=0\n    local close_braces_index_last_last=0\n    local open_braces_index_last_last_last=0\n    local open_braces_index_last_last_last_last=0\n    local open_braces_index_last_last_last_last_last=0\n    local open_braces_index_last_last_last_last_last_last=0\n    local open_braces_index_last_last_last_last_last_last_last=0\n    while IFS= read -r line; do\n        if [[ $line =~ ^\"( )\" ]]; then\n            open_braces_index_last_last=$((open_braces_index_last+1))\n            open_braces_index_last_last_last=$((open_braces_index_last_last+1))\n            open_braces_index_last_last_last_last=$((open_braces_index_last_last_last+1))\n            open_braces_index_last_last_last_last_last=$((open_braces_index_last_last"], ["#!/bin/bash\n# Given a positive floating point number, it can be decomposed into\n# and integer part (largest integer smaller than given number) and decimals\n# (leftover part always smaller than 1).\n# Return the decimal part of the number.\n# >>> $(truncate_number \"3.5\")\n# \"0.5\"\n#\n# $1 is a floating point\ntruncate_number() {\n    local num=\"$1\"\n    local int_part=\"$2\"\n    local dec_part=\"$3\"\n    local dec_part_len=\"$#dec_part\"\n\n    if [ \"$dec_part_len\" -eq 0 ]; then\n        return 0\n    fi\n\n    local int_part_len=\"$#int_part\"\n    local dec_part_len=\"$#dec_part\"\n\n    if [ \"$dec_part_len\" -gt \"$int_part_len\" ]; then\n        return 0\n    fi\n\n    local int_part_str=\"$(echo \"$int_part\" | tr ' ' '.' | tr -d '0')\"\n    local dec_part_str=\"$(echo \"$dec_part\" | tr ' ' '.' | tr -d '0')\"\n\n    local int_part_int=\"$(echo \"$int_part_str\" | tr '.' '0')\"\n    local dec_part_int=\"$(echo \"$dec_part_str\" | tr '.' '0')\"\n\n    local int_part_int_len=\"$#int_part_str\"\n    local dec_part_int_len=\"$#dec_part_str\"\n\n    local int_part_int_str=\"$(echo \"$int_part_int\" | tr '.' '0')\"\n    local dec_part_int_str=\"$(echo \"$dec_part_int\" | tr '.' '0')\"\n\n    local int_part_int_str_len=\"$#int_part_int_str\"\n    local dec_part_int_str_len=\"$#dec_part_int_str\"\n\n    local int_part_int_str_int=\"$(echo \"$int_part_int_str\" | tr '.' '0')\"\n"], ["#!/bin/bash\n# You're given a list of deposit and withdrawal operations on a bank account that starts with\n# zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n# at that point function should return true. Otherwise it should return false.\n# >>> $(below_zero \"1 2 3\")\n# \"false\"\n# >>> $(below_zero \"1 2 -4 5\")\n# \"true\"\n#\n# $1 is a space-separated list\nbelow_zero() {\n    local list=\"$1\"\n    local balance=0\n    for op in \"$list\"; do\n        case \"$op\" in\n            \"+\"|\"-\")\n                balance=$(($balance + \"$2\"))\n                ;;\n            \"*\"|\"/\"|\"/\"-\")\n                balance=$(($balance * \"$2\"))\n                ;;\n            \"=\"|\"<|>\")\n                balance=$(($balance - \"$2\"))\n                ;;\n            \"=\"|\"<|>\"))\n                balance=$(($balance + \"$2\"))\n                ;;\n            \"=\"|\"<|>\"))\n                balance=$(($balance - \"$2\"))\n                ;;\n            \"=\"|\"<|>\"))\n                balance=$(($balance - \"$2\"))\n                ;;\n            \"=\"|\"<|>\"))\n                balance=$(($balance + \"$2\"))\n                ;;\n            \"=\"|\"<|>\"))\n                balance=$(($balance - \"$2\"))\n                ;;\n            \"=\"|\"<|>\"))\n                balance=$(($balance + \"$2\"))\n                ;;\n            \"=\"|\"<|>\"))\n                balance=$(($balance - \"$2\"))\n                ;;\n            \"=\"|\"<|>\"))\n                balance=$(($balance + \"$2\"))\n                ;;\n            \"=\"|\"<|>\"))\n                balance=$(($balance - \"$2\"))\n                ;;\n            \"=\"|\"<|>\"))\n                balance=$(($balance + \"$2\"))\n                ;;\n            \"=\"|\"<|>\"))\n                balance=$(($balance - \"$2\"))\n                ;;\n            \"=\"|\"<|>\"))\n                balance=$(($balance + \"$2\"))"], ["#!/bin/bash\n# For a given list of input numbers, calculate Mean Absolute Deviation\n# around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute difference between each\n# element and a centerpoint (mean in this case):\n# MAD = average | x - x_mean |\n# >>> $(mean_absolute_deviation \"1.0 2.0 3.0 4.0\")\n# \"1.0\"\n#\n# $1 is a space-separated list\nmean_absolute_deviation() {\n    local input=$1\n    local mean=$2\n    local abs_deviation\n    abs_deviation=$(echo \"$input\" | tr ' ' '\\n' | sort | uniq -c | awk '{print $2}')\n    abs_deviation=$(echo \"$abs_deviation\" | tr ' ' '\\n' | sort | uniq -c | awk '{print $2}')\n    abs_deviation=$(echo \"$abs_deviation\" | tr ' ' '\\n' | sort | uniq -c | awk '{print $2}')\n    abs_deviation=$(echo \"$abs_deviation\" | tr ' ' '\\n' | sort | uniq -c | awk '{print $2}')\n    abs_deviation=$(echo \"$abs_deviation\" | tr ' ' '\\n' | sort | uniq -c | awk '{print $2}')\n    abs_deviation=$(echo \"$abs_deviation\" | tr ' ' '\\n' | sort | uniq -c | awk '{print $2}')\n    abs_deviation=$(echo \"$abs_deviation\" | tr ' ' '\\n' | sort | uniq -c | awk '{print $2}')\n    abs_deviation=$(echo \"$abs_deviation\" | tr ' ' '\\n' | sort | uniq -c | awk '{print $2}')\n    abs_deviation=$(echo \"$abs_deviation\" | tr ' ' '\\n' | sort | uniq -c | awk '{print $2}')\n    abs_deviation=$(echo \"$abs_deviation\" | tr ' ' '\\n' | sort | uniq -c | awk '{print $2}')"], ["#!/bin/bash\n# Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n# >>> $(intersperse \"\" \"4\")\n# []\n# >>> $(intersperse \"1 2 3\" \"4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"4\"', '\"3\"']\n#\n# $1 is a space-separated list\n# $2 is an integer\nintersperse() {\n  local delimeter=\"$1\"\n  shift\n  local nums=\"$*\"\n  local nums_str\n  nums_str=$(echo \"$nums\" | tr ' ' '\\n')\n  echo \"$nums_str\" | sed -e \"s/^[[:space:]]*//\" -e \"s/[[:space:]]*$//\" -e \"s/[[:space:]]$//\" | sed -e \"s/[[:space:]]*[[:space:]]*$//\" -e \"s/[[:space:]]*$//\" | sed -e \"s/[[:space:]]*[[:space:]]*$//\" -e \"s/[[:space:]]*$//\" | sed -e \"s/[[:space:]]*$//\""], ["#!/bin/bash\n# Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n# For each of the group, output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"(()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1 is a string\nparse_nested_parens() {\n    local input=\"$1\"\n    local max_depth=0\n    local depth=0\n    local result=()\n    for ((i=0; i<${#input}; i++)); do\n        if [[ \"$input\" =~ ^((?:[^()]|\\\\\\\\)*)\\\\\\\\([^()]|\\\\\\\\)*$ ]]; then\n            local depth_str=${BASH_REMATCH[1]}\n            local depth=${BASH_REMATCH[2]}\n            local depth_int=${BASH_REMATCH[3]}\n            if [[ \"$depth_int\" -lt \"$max_depth\" ]]; then\n                max_depth=$depth_int\n            fi\n            result+=( \"${depth_str//\\\\\\\\/}\" )\n            depth=$depth_int\n        else\n            result+=( \"$input\" )\n        fi\n    done\n    return \"${result[@]}\""], ["#!/bin/bash\n# For a given list of integers, return a list consisting of a sum and a product of all the integers in a list.\n# Empty sum should be equal to 0 and empty product should be equal to 1.\n# >>> $(sum_product \"\")\n# ['\"0\"', '\"1\"']\n# >>> $(sum_product \"1 2 3 4\")\n# ['\"10\"', '\"24\"']\n#\n# $1 is a space-separated list\nsum_product() {\n  local list=\"$1\"\n  local sum\n  local product\n  local i\n  for ((i=0; i<${#list[@]}; i++)); do\n    sum=$(echo \"$list\" | tr ' ' '\\n' | grep -v \"^$\")\n    product=$(echo \"$list\" | tr ' ' '\\n' | grep -v \"^$\")\n    if [[ \"$sum\" == \"$product\" ]]; then\n      echo \"$sum\"\n    else\n      echo \"$sum\"\n      echo \"$product\"\n    fi\n  done"], ["#!/bin/bash\n# From a given list of integers, generate a list of rolling maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"', '\"4\"']\n#\n# $1 is a space-separated list\nrolling_max() {\n  local max_list\n  max_list=\"$(echo \"$1\" | tr ' ' '\\n')\"\n  local max_index\n  max_index=\"$(echo \"$max_list\" | tail -n 1)\"\n  local max_value\n  max_value=\"$(echo \"$max_list\" | tail -n 2)\"\n  echo \"$max_value\""], ["#!/bin/bash\n# Find the shortest palindrome that begins with a supplied string.\n# Algorithm idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n# - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n# >>> $(make_palindrome \"\")\n# \"\"\n# >>> $(make_palindrome \"cat\")\n# \"catac\"\n# >>> $(make_palindrome \"cata\")\n# \"catac\"\n#\n# $1 is a string\nmake_palindrome() {\n  local string=\"$1\"\n  local prefix=\"\"\n  local suffix=\"\"\n  local palindrome=\"\"\n\n  # Find the longest postfix of supplied string that is a palindrome.\n  while [[ $string =~ ^[[:space:]]*[[:alnum:]]+$ ]]; do\n    prefix=\"$prefix$string\"\n    string=\"${string#*[[:space:]]}\"\n  done\n\n  # Find the longest prefix that is a palindrome.\n  while [[ $string =~ ^[[:space:]]*[[:alnum:]]+$ ]]; do\n    suffix=\"$suffix$string\"\n    string=\"${string#*[[:space:]]}\"\n  done\n\n  # Append the prefix and suffix to the end of the string.\n  palindrome=\"$prefix$suffix\""], ["#!/bin/bash\n# Input are two strings a and b consisting only of 1s and 0s.\n# Perform binary XOR on these inputs and return result also as a string.\n# >>> $(string_xor \"010\" \"110\")\n# \"100\"\n#\n# $1 is a string\n# $2 is a string\nstring_xor() {\n  local a=$1\n  local b=$2\n  local result\n  result=$(echo \"$a\" | tr '01' '10')\n  result=$(echo \"$b\" | tr '01' '10')\n  echo \"$result\""], ["#!/bin/bash\n# Out of list of strings, return the longest one. Return the first one in case of multiple\n# strings of the same length. Return None in case the input list is empty.\n# >>> $(longest \"\")\n# \"None\"\n# >>> $(longest \"a b c\")\n# \"a\"\n# >>> $(longest \"a bb ccc\")\n# \"ccc\"\n#\n# $1 is a space-separated list\nlongest() {\n  local list=\"$1\"\n  local max_len=0\n  local longest_str=\"\"\n  for str in $list; do\n    if [[ $str == *\" \" ]]; then\n      max_len=$((max_len + length($str)))\n    else\n      max_len=$((max_len + length($str)))\n      longest_str=\"$str\"\n    fi\n  done\n  if [[ $max_len -gt $max_len ]]; then\n    max_len=$max_len\n    longest_str=\"$longest_str\"\n  fi\n  echo \"$longest_str\""], ["#!/bin/bash\n# Return a greatest common divisor of two integers a and b\n# >>> $(greatest_common_divisor \"3\" \"5\")\n# \"1\"\n# >>> $(greatest_common_divisor \"25\" \"15\")\n# \"5\"\n#\n# $1 is an integer\n# $2 is an integer\ngreatest_common_divisor() {\n  local a=$1\n  local b=$2\n  local result=0\n  while [ $a -gt 0 ]\n  do\n    result=$((result * $a % $b))\n    a=$((a / $b))\n  done\n  echo $result"], ["#!/bin/bash\n# Return list of all prefixes from shortest to longest of the input string\n# >>> $(all_prefixes \"abc\")\n# ['\"a\"', '\"ab\"', '\"abc\"']\n#\n# $1 is a string\nall_prefixes() {\n    local shortest longest\n    shortest=$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\n    longest=$(echo \"$1\" | tr '[:lower:]' '[:upper:]')\n    echo \"${shortest}\"\n    echo \"${longest}\""], ["#!/bin/bash\n# Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n# >>> $(string_sequence \"0\")\n# \"0\"\n# >>> $(string_sequence \"5\")\n# \"0 1 2 3 4 5\"\n#\n# $1 is an integer\nstring_sequence() {\n    local n=\"$1\"\n    shift\n    local string\n    for ((i=0; i<=$n; i++)); do\n        string=\"${string}${i}\"\n    done\n    echo \"${string}\""], ["#!/bin/bash\n# Given a string, find out how many distinct characters (regardless of case) does it consist of\n# >>> $(count_distinct_characters \"xyzXYZ\")\n# \"3\"\n# >>> $(count_distinct_characters \"Jerry\")\n# \"4\"\n#\n# $1 is a string\ncount_distinct_characters() {\n    local string=\"$1\"\n    local count=0\n    for char in $(echo \"$string\" | tr '[:upper:]' '[:lower:]'); do\n        ((count++))\n    done\n    echo \"$count\""], ["#!/bin/bash\n# Input to this function is a string representing musical notes in a special ASCII format.\n# Your task is to parse this string and return list of integers corresponding to how many beats does each\n# not last.\n# Here is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o| .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"', '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\nparse_music() {\n  local input=$1\n  local output=()\n  local i=0\n  while read -r line; do\n    if [[ $line =~ ^[o|o|.|]$ ]]; then\n      output+=(\"${line//[o|o|.|]/}\")\n    else\n      output+=(\"${line//[o|o|.|]/}\")\n    fi\n    ((i++))\n  done <<< \"$input\"\n  return \"${output[@]}\""], ["#!/bin/bash\n# Find how many times a given substring can be found in the original string. Count overlaping cases.\n# >>> $(how_many_times \"\" \"a\")\n# \"0\"\n# >>> $(how_many_times \"aaa\" \"a\")\n# \"3\"\n# >>> $(how_many_times \"aaaa\" \"aa\")\n# \"3\"\n#\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    local string=\"$1\"\n    local substring=\"$2\"\n    local count=0\n    local i=0\n    while I < length \"$string\"; do\n        if [[ \"$string\" =~ $substring ]]; then\n            count=$((count + 1))\n        fi\n        ((i++))\n    done\n    echo \"$count\""], ["#!/bin/bash\n# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n# Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to largest\n# >>> $(sort_numbers \"three one five\")\n# \"one three five\"\n#\n# $1 is a string\nsort_numbers() {\n    local input=$1\n    local sorted_input\n    sorted_input=$(echo \"$input\" | tr ' ' '\\n')\n    echo \"$sorted_input\""], ["#!/bin/bash\n# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\n# >>> $(find_closest_elements \"1.0 2.0 3.0 4.0 5.0 2.2\")\n# ['\"2.0\"', '\"2.2\"']\n# >>> $(find_closest_elements \"1.0 2.0 3.0 4.0 5.0 2.0\")\n# ['\"2.0\"', '\"2.0\"']\n#\n# $1 is a space-separated list\nfind_closest_elements() {\n    local list=\"$1\"\n    local closest_one\n    local closest_two\n    local closest_one_index\n    local closest_two_index\n    local closest_one_value\n    local closest_two_value\n    local closest_one_string\n    local closest_two_string\n    local closest_one_string_index\n    local closest_two_string_index\n    local closest_one_string_value\n    local closest_two_string_value\n    local closest_one_string_index_value\n    local closest_two_string_index_value\n    local closest_one_string_value_index\n    local closest_two_string_index_value_index\n    local closest_one_string_value_index_value\n    local closest_two_string_index_value_index\n    local closest_one_string_value_index_value_index\n    local closest_one_string_value_index_value_index_value\n    local closest_one_string_value_index_value_index_value_index\n    local closest_one_string_value_index_value_index_value_index_value\n    local closest_one_string_value_index_value_index_value_index_value_index\n    local closest_one_string_value_index_value_index_value_index_value_index_value\n    local closest_one_string_value_index_value_index_value_index_value_index_value_index\n    local closest_"], ["#!/bin/bash\n# Given list of numbers (of at least two elements), apply a linear transform to that list,\n# such that the smallest number will become 0 and the largest will become 1\n# >>> $(rescale_to_unit \"1.0 2.0 3.0 4.0 5.0\")\n# ['\"0.0\"', '\"0.25\"', '\"0.5\"', '\"0.75\"', '\"1.0\"']\n#\n# $1 is a space-separated list\nrescale_to_unit() {\n    local list=\"$1\"\n    local min_num=\"$2\"\n    local max_num=\"$3\"\n    local step=\"$4\"\n\n    local min_num_str\n    local max_num_str\n    local step_str\n\n    min_num_str=\"$(echo \"$min_num\" | tr ' ' '.' | tr -d 'e')\"\n    max_num_str=\"$(echo \"$max_num\" | tr ' ' '.' | tr -d 'e')\"\n    step_str=\"$(echo \"$step\" | tr ' ' '.' | tr -d 'e')\"\n\n    local min_num_int\n    local max_num_int\n    local step_int\n\n    min_num_int=\"$(echo \"$min_num_str\" | tr -d 'e')\"\n    max_num_int=\"$(echo \"$max_num_str\" | tr -d 'e')\"\n    step_int=\"$(echo \"$step_str\" | tr -d 'e')\"\n\n    local min_num_float\n    local max_num_float\n    local step_float\n\n    min_num_float=\"$(echo \"$min_num_int\" | tr -d 'e')\"\n    max_num_float=\"$(echo \"$max_num_int\" | tr -d 'e')\"\n    step_float=\"$(echo \"$step_int\" | tr -d 'e')\"\n\n    local min_num_str_float\n    local max_num_str_float\n    local step_str_float\n\n    min_num_str_float=\"$(echo \"$min_num_str\""], ["#!/bin/bash\n# Filter given list of any shthon values only for integers\n# >>> $(filter_integers \"a 3.14 5\")\n# ['\"5\"']\n# >>> $(filter_integers \"1 2 3 abc  \")\n# ['\"1\"', '\"2\"', '\"3\"']\n#\n# $1 is a space-separated list\nfilter_integers() {\n  local list=\"$1\"\n  local filtered_list\n  filtered_list=$(echo \"$list\" | tr ' ' '\\n')\n  echo \"$filtered_list\""], ["#!/bin/bash\n# Return length of given string\n# >>> $(strlen \"\")\n# \"0\"\n# >>> $(strlen \"abc\")\n# \"3\"\n#\n# $1 is a string\nstrlen() {\n  local str=\"$1\"\n  echo \"$str\" | wc -c"], ["#!/bin/bash\n# For a given number n, find the largest number that divides n evenly, smaller than n\n# >>> $(largest_divisor \"15\")\n# \"5\"\n#\n# $1 is an integer\nlargest_divisor() {\n    local n=$1\n    local largest_divisor\n    largest_divisor=0\n    for ((i=1; i<=n; i++)); do\n        if ((i%$n == 0)); then\n            largest_divisor=$i\n            break\n        fi\n    done\n    echo $largest_divisor"], ["#!/bin/bash\n# Return list of prime factors of given integer in the order from smallest to largest.\n# Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n# Input number should be equal to the product of all factors\n# >>> $(factorize \"8\")\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\nfactorize() {\n    local num=$1\n    local factors=()\n    local factor\n    for ((i=2; i<=sqrt($num); i++)); do\n        if ((i*i <= num)); then\n            factor=$(echo \"$num\" | tr '[:upper:]' '[:lower:]')\n            if ((i == 2 || i == 3 || i == 5 || i == 7 || i == 11 || i == 13 || i == 17 || i == 19 || i == 23 || i == 29 || i == 31 || i == 37 || i == 41 || i == 43 || i == 47 || i == 53 || i == 59 || i == 61 || i == 67 || i == 71 || i == 73 || i == 79 || i == 83 || i == 89 || i == 97 || i == 101 || i == 103 || i == 107 || i == 113 || i == 127 || i == 131 || i == 137 || i == 141 || i == 147 || i == 151 || i == 157 || i == 161 || i == 163 || i == 167 || i == 173 || i == 179 || i == 181 || i == 191 || i == 193 || i == 197 || i == 211 || i == 213"], ["#!/bin/bash\n# From a list of integers, remove all elements that occur more than once.\n# Keep order of elements left the same as in the input.\n# >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n# $1 is a space-separated list\nremove_duplicates() {\n    local input=$1\n    local output=()\n    for I in $input; do\n        if [[ -n \"$output\" ]]; then\n            output=(\"${output[@]}\" \"$i\")\n        else\n            output=(\"$i\")\n        fi\n    done\n    echo \"${output[@]}\""], ["#!/bin/bash\n# For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n# >>> $(flip_case \"Hello\")\n# \"hELLO\"\n#\n# $1 is a string\nflip_case() {\n    local string=\"$1\"\n    echo \"${string//[[:lower:]]/[[:upper:]]}\""], ["#!/bin/bash\n# Concatenate list of strings into a single string\n# >>> $(concatenate \"\")\n# \"\"\n# >>> $(concatenate \"a b c\")\n# \"abc\"\n#\n# $1 is a space-separated list\nconcatenate() {\n    local list=\"$1\"\n    echo \"${list// / }\""], ["#!/bin/bash\n# Return only positive numbers in the list.\n# >>> $(get_positive \"-1 2 -4 5 6\")\n# ['\"2\"', '\"5\"', '\"6\"']\n# >>> $(get_positive \"5 3 -5 2 -3 3 9 0 123 1 -10\")\n# ['\"5\"', '\"3\"', '\"2\"', '\"3\"', '\"9\"', '\"123\"', '\"1\"']\n#\n# $1 is a space-separated list\nget_positive() {\n  local list=$1\n  local result=()\n  for item in $list; do\n    if [[ $item =~ ^[+-]?[0-9]+$ ]]; then\n      result+=($item)\n    fi\n  done\n  echo \"${result[@]}\""], ["#!/bin/bash\n# Return true if a given number is prime, and false otherwise.\n# >>> $(is_prime \"6\")\n# \"false\"\n# >>> $(is_prime \"101\")\n# \"true\"\n# >>> $(is_prime \"11\")\n# \"true\"\n# >>> $(is_prime \"13441\")\n# \"true\"\n# >>> $(is_prime \"61\")\n# \"true\"\n# >>> $(is_prime \"4\")\n# \"false\"\n# >>> $(is_prime \"1\")\n# \"false\"\n#\n# $1 is an integer\nis_prime() {\n    local num=$1\n    if [ $num -eq 0 ] || [ $num -eq 1 ] || [ $num -eq 2 ] || [ $num -eq 3 ] || [ $num -eq 4 ] || [ $num -eq 5 ] || [ $num -eq 6 ] || [ $num -eq 7 ] || [ $num -eq 8 ] || [ $num -eq 9 ] || [ $num -eq 10 ] || [ $num -eq 11 ] || [ $num -eq 12 ] || [ $num -eq 13 ] || [ $num -eq 14 ] || [ $num -eq 15 ] || [ $num -eq 16 ] || [ $num -eq 17 ] || [ $num -eq 18 ] || [ $num -eq 19 ] || [ $num -eq 20 ] || [ $num -eq 21 ] || [ $num -eq 22 ] || [ $num -eq 23 ] || [ $num -eq 24 ] || [ $num -eq 25 ] || [ $num -eq 26 ] || [ $num -eq 27 ] || [ $num -eq 28 ] || [ $num -eq 29 ] || [ $num -eq 30 ] || [ $num -eq 31 ] || [ $num -eq 32 ] || [ $num -eq 33 ] || [ $num -eq 34 ] || [ $num -eq 35 ] || [ $num -eq"], ["#!/bin/bash\n# This function takes a list l and returns a list l' such that\n# l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n# to the values of the corresponding indicies of l, but sorted.\n# >>> $(sort_third \"1 2 3\")\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> $(sort_third \"5 6 3 4 8 9 2\")\n# ['\"2\"', '\"6\"', '\"3\"', '\"4\"', '\"8\"', '\"9\"', '\"5\"']\n#\n# $1 is a space-separated list\nsort_third() {\n    local l=\"$1\"\n    local l'\n    local i\n    local j\n    local k\n    local l_i\n    local l_j\n    local l_k\n    local l_i_j\n    local l_i_k\n    local l_i_j_k\n    local l_i_j_k_l\n    local l_i_j_k_l_i_j\n    local l_i_j_k_l_i_j_k\n    local l_i_j_k_l_i_j_k_l\n    local l_i_j_k_l_i_j_k_l_i_j\n    local l_i_j_k_l_i_j_k_l_i_j_k_l\n    local l_i_j_k_l_i_j_k_l_i_j_k_l_i_j\n    local l_i_j_k_l_i_j_k_l_i_j_k_l_i_j_k_l\n    local l_i_j_k_l_i_j_k_l_i_j_k_l_i_j_k_l_i_j\n    local l_i_j_k_l_i_j_k_l_i_j_k_l_i_j_k_l_i_j_k_l_"], ["#!/bin/bash\n# Return sorted unique elements in a list\n# >>> $(unique \"5 3 5 2 3 3 9 0 123\")\n# ['\"0\"', '\"2\"', '\"3\"', '\"5\"', '\"9\"', '\"123\"']\n#\n# $1 is a space-separated list\nunique() {\n    local list=\"$1\"\n    local sorted_list\n    sorted_list=$(echo \"$list\" | sort -u)\n    echo \"$sorted_list\""], ["#!/bin/bash\n# Return maximum element in the list.\n# >>> $(max_element \"1 2 3\")\n# \"3\"\n# >>> $(max_element \"5 3 -5 2 -3 3 9 0 123 1 -10\")\n# \"123\"\n#\n# $1 is a space-separated list\nmax_element() {\n    local list=\"$1\"\n    local max\n    local max_index\n    local max_value\n    local max_value_index\n    local max_value_index_2\n    local max_value_index_3\n    local max_value_index_4\n    local max_value_index_5\n    local max_value_index_6\n    local max_value_index_7\n    local max_value_index_8\n    local max_value_index_9\n    local max_value_index_10\n    local max_value_index_11\n    local max_value_index_12\n    local max_value_index_13\n    local max_value_index_14\n    local max_value_index_15\n    local max_value_index_16\n    local max_value_index_17\n    local max_value_index_18\n    local max_value_index_19\n    local max_value_index_20\n    local max_value_index_21\n    local max_value_index_22\n    local max_value_index_23\n    local max_value_index_24\n    local max_value_index_25\n    local max_value_index_26\n    local max_value_index_27\n    local max_value_index_28\n    local max_value_index_29\n    local max_value_index_30\n    local max_value_index_31\n    local max_value_index_32\n    local max_value_index_33\n    local max_value_index_34\n    local max_value_index_35\n    local max_value_index_36\n    local max_value_index_37\n"], ["#!/bin/bash\n# Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n# >>> $(fizz_buzz \"50\")\n# \"0\"\n# >>> $(fizz_buzz \"78\")\n# \"2\"\n# >>> $(fizz_buzz \"79\")\n# \"3\"\n#\n# $1 is an integer\nfizz_buzz() {\n  local n=$1\n  local fizz_buzz_count=0\n  local fizz_buzz_count_2=0\n  local fizz_buzz_count_3=0\n  local fizz_buzz_count_4=0\n  local fizz_buzz_count_5=0\n  local fizz_buzz_count_6=0\n  local fizz_buzz_count_7=0\n  local fizz_buzz_count_8=0\n  local fizz_buzz_count_9=0\n  local fizz_buzz_count_10=0\n  local fizz_buzz_count_11=0\n  local fizz_buzz_count_12=0\n  local fizz_buzz_count_13=0\n  local fizz_buzz_count_14=0\n  local fizz_buzz_count_15=0\n  local fizz_buzz_count_16=0\n  local fizz_buzz_count_17=0\n  local fizz_buzz_count_18=0\n  local fizz_buzz_count_19=0\n  local fizz_buzz_count_20=0\n  local fizz_buzz_count_21=0\n  local fizz_buzz_count_22=0\n  local fizz_buzz_count_23=0\n  local fizz_buzz_count_24=0\n  local fizz_buzz_count_25=0\n  local fizz_buzz_count_26=0\n  local fizz_buzz_count_27=0\n  local fizz_"], ["#!/bin/bash\n# This function takes a list l and returns a list l' such that\n# l' is identical to l in the odd indicies, while its values at the even indicies are equal\n# to the values of the even indicies of l, but sorted.\n# >>> $(sort_even \"1 2 3\")\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> $(sort_even \"5 6 3 4\")\n# ['\"3\"', '\"6\"', '\"5\"', '\"4\"']\n#\n# $1 is a space-separated list\nsort_even() {\n    local l=$1\n    local l'\n    local I\n    I=0\n    while I < ${#l[@]}\n    do\n        l'[$i]=\"${l[$i]}\"\n        I=$((i+1))\n    done\n    I=0\n    while I < ${#l[@]}\n    do\n        l'[$i]=\"${l[$i]}\"\n        I=$((i+1))\n    done\n    I=0\n    while I < ${#l[@]}\n    do\n        l'[$i]=\"${l[$i]}\"\n        I=$((i+1))\n    done\n    I=0\n    while I < ${#l[@]}\n    do\n        l'[$i]=\"${l[$i]}\"\n        I=$((i+1))\n    done\n    I=0\n    while I < ${#l[@]}\n    do\n        l'[$i]=\"${l[$i]}\"\n        I=$((i+1))\n    done\n    I=0\n    while I < ${#l[@]}\n    do\n        l'[$i]=\"${l[$i]}\"\n        I=$((i+1))\n    done\n    I=0\n    while I < ${#l[@]}\n    do\n        l'[$i]=\"${l[$i]}\"\n        I=$((i+1))\n    done\n    I=0\n    while I < ${#l[@]}\n    do\n        l'[$i]=\"${l[$i]}\"\n        I=$((i+1))\n    done\n    I=0\n    while I"], ["#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n# \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib() {\n  local n=\"$1\"\n  local fib\n  fib=0\n  while [ $n -gt 0 ]; do\n    fib=$(( fib + n % 2 ))\n    n=$(( n / 2 ))\n  done\n  echo $fib"], ["#!/bin/bash\n# triples_sum_to_zero takes a list of integers as an input.\n# it returns true if there are three distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> $(triples_sum_to_zero \"1 3 5 0\")\n# \"false\"\n# >>> $(triples_sum_to_zero \"1 3 -2 1\")\n# \"true\"\n# >>> $(triples_sum_to_zero \"1 2 3 7\")\n# \"false\"\n# >>> $(triples_sum_to_zero \"2 4 -5 3 9 7\")\n# \"true\"\n# >>> $(triples_sum_to_zero \"1\")\n# \"false\"\n#\n# $1 is a space-separated list\ntriples_sum_to_zero() {\n  local list=\"$1\"\n  local sum\n  local result\n\n  if [[ -z \"$list\" ]]; then\n    echo \"Error: list is empty\"\n    return 1\n  fi\n\n  sum=0\n  result=false\n\n  for I in \"${list[@]}\"; do\n    sum+=\"$i\"\n  done\n\n  if [[ \"$sum\" -eq 0 ]]; then\n    result=true\n  else\n    result=false\n  fi\n\n  return \"$result\""], ["#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long line.\n# n cars are driving left to right;  simultaneously, a different set of n cars\n# are driving right to left.   The two sets of cars start out being very far from\n# each other.  All cars move in the same speed.  Two cars are said to collide\n# when a car that's moving left to right hits a car that's moving right to left.\n# However, the cars are infinitely sturdy and strong; as a result, they continue moving\n# in their trajectory as if they did not collide.\n# This function outputs the number of such collisions.\n#\n# $1 is an integer\ncar_race_collision() {\n    local n=$1\n    local cars\n    cars=$(seq 1 $n)\n    for ((i=0; i<$n; i++)); do\n        cars[$i]=$((i+1))\n    done\n    for ((i=0; i<$n; i++)); do\n        cars[$i]=$((i+1))\n    done\n    for ((i=0; i<$n; i++)); do\n        cars[$i]=$((i+1))\n    done\n    for ((i=0; i<$n; i++)); do\n        cars[$i]=$((i+1))\n    done\n    for ((i=0; i<$n; i++)); do\n        cars[$i]=$((i+1))\n    done\n    for ((i=0; i<$n; i++)); do\n        cars[$i]=$((i+1))\n    done\n    for ((i=0; i<$n; i++)); do\n        cars[$i]=$((i+1))\n    done\n    for ((i=0; i<$n; i++)); do\n        cars[$i]=$((i+1))\n    done\n    for ((i=0; i<$n; i++)); do\n        cars[$i]=$((i+1))\n    done\n    for ((i=0; i<$n; i++)); do\n        cars[$i]=$((i+1))\n    done\n   "], ["#!/bin/bash\n# Return list with elements incremented by 1.\n# >>> $(incr_list \"1 2 3\")\n# ['\"2\"', '\"3\"', '\"4\"']\n# >>> $(incr_list \"5 3 5 2 3 3 9 0 123\")\n# ['\"6\"', '\"4\"', '\"6\"', '\"3\"', '\"4\"', '\"4\"', '\"10\"', '\"1\"', '\"124\"']\n#\n# $1 is a space-separated list\nincr_list() {\n    local list=$1\n    local i=1\n    while read -r line; do\n        echo \"${line}\"\n        ((i++))\n    done <<< \"$list\""], ["#!/bin/bash\n# pairs_sum_to_zero takes a list of integers as an input.\n# it returns true if there are two distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> $(pairs_sum_to_zero \"1 3 5 0\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"1 3 -2 1\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"1 2 3 7\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"2 4 -5 3 5 7\")\n# \"true\"\n# >>> $(pairs_sum_to_zero \"1\")\n# \"false\"\n#\n# $1 is a space-separated list\npairs_sum_to_zero() {\n  local list=\"$1\"\n  local sum\n  local count=0\n  for I in $(seq 1 1000000); do\n    sum=$(echo \"$list\" | tr ' ' '\\n' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '^$' | grep -v '"], ["#!/bin/bash\n# Change numerical base of input number x to base.\n# return string representation after the conversion.\n# base numbers are less than 10.\n# >>> $(change_base \"8\" \"3\")\n# \"22\"\n# >>> $(change_base \"8\" \"2\")\n# \"1000\"\n# >>> $(change_base \"7\" \"2\")\n# \"111\"\n#\n# $1 is an integer\n# $2 is an integer\nchange_base() {\n    local base=$1\n    shift\n    local num=$(echo \"$@\" | tr '[:upper:]' '[:lower:]')\n    echo \"$num\" | tr '[:upper:]' '[:lower:]' | sed \"s/^[0-9]*//\" | tr '[:lower:]' '[:upper:]' | tr '[:upper:]' '[:lower:]' | tr '[:lower:]' '[:upper:]'"], ["#!/bin/bash\n# Given length of a side and high return area for a triangle.\n# >>> $(triangle_area \"5\" \"3\")\n# \"7.5\"\n#\n# $1 is an integer\n# $2 is an integer\ntriangle_area() {\n  local side=$1\n  local height=$2\n  local area\n\n  area=$(echo \"scale=2; $side * $height / 2\" | bc)\n\n  echo \"$area\""], ["#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>> $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\nfib4() {\n    local n=\"$1\"\n    local result\n    result=\"$(echo \"$n\" | tr '[:upper:]' '[:lower:]')\"\n    result=\"${result:0:1}\"\n    result=\"${result:1:1}\"\n    result=\"${result:2:1}\"\n    result=\"${result:3:1}\"\n    result=\"${result:4:1}\"\n    result=\"${result:5:1}\"\n    result=\"${result:6:1}\"\n    result=\"${result:7:1}\"\n    result=\"${result:8:1}\"\n    result=\"${result:9:1}\"\n    result=\"${result:10:1}\"\n    result=\"${result:11:1}\"\n    result=\"${result:12:1}\"\n    result=\"${result:13:1}\"\n    result=\"${result:14:1}\"\n    result=\"${result:15:1}\"\n    result=\"${result:16:1}\"\n    result=\"${result:17:1}\"\n    result=\"${result:18:1}\"\n    result=\"${result:19:1}\"\n    result=\"${result:20:1}\"\n    result=\"${result:21:1}\"\n    result=\"${result:22:1}\"\n    result=\"${result:23:1}\"\n    result=\"${result:24:1}\"\n    result=\"${result:25:1}\"\n    result"], ["#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n#\n# $1 is a space-separated list\nmedian() {\n  local l=\"$1\"\n  local n\n  n=0\n  while read -r line; do\n    n=$((n + 1))\n    if [ $n -eq 1 ]; then\n      echo \"$line\"\n    else\n      echo \"$((n / 2))\"\n    fi\n  done <<< \"$l\""], ["#!/bin/bash\n# Checks if given string is a palindrome\n# >>> $(is_palindrome \"\")\n# \"true\"\n# >>> $(is_palindrome \"aba\")\n# \"true\"\n# >>> $(is_palindrome \"aaaaa\")\n# \"true\"\n# >>> $(is_palindrome \"zbcd\")\n# \"false\"\n#\n# $1 is a string\nis_palindrome() {\n  local string=\"$1\"\n  local length=${#string}\n  local is_palindrome=false\n  for ((i=0; i<length-1; i++)); do\n    if [[ $string[$i] == $string[$i+1] ]]; then\n      is_palindrome=true\n      break\n    fi\n  done\n  return $is_palindrome"], ["#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n  local n=$1\n  shift\n  local p=$2\n  local r\n\n  r=1\n  while [ $n -gt 0 ]; do\n    r=$(( r * p % $n ))\n    n=$(( n / p ))\n  done\n  echo $r"], ["#!/bin/bash\n# remove_vowels is a function that takes string and returns string without vowels.\n# >>> $(remove_vowels \"\")\n# \"\"\n# >>> $(remove_vowels \"abcdef\")\n# \"bcdf\"\n# >>> $(remove_vowels \"aaaaa\")\n# \"\"\n# >>> $(remove_vowels \"aaBAA\")\n# \"B\"\n# >>> $(remove_vowels \"zbcd\")\n# \"zbcd\"\n#\n# $1 is a string\nremove_vowels() {\n  local string=$1\n  local vowels=\"aeiouAEIOU\"\n  local vowel_count=0\n  for char in $string; do\n    if [[ $char == $vowels ]]; then\n      vowel_count=$((vowel_count+1))\n    fi\n  done\n  echo \"$string\" | sed -e \"s/^[aeiouAEIOU]/ /g\" | sed -e \"s/[aeiouAEIOU]$/ /g\""], ["#!/bin/bash\n# Return true if all numbers in the list l are below threshold t.\n# >>> $(below_threshold \"1 2 4 10\" \"100\")\n# \"true\"\n# >>> $(below_threshold \"1 20 4 10\" \"5\")\n# \"false\"\n#\n# $1 is a space-separated list\n# $2 is an integer\nbelow_threshold() {\n  local l=$1\n  shift\n  local t=$1\n  shift\n  local result\n  result=\"$(echo \"$l\" | tr ' ' '\\n')\"\n  result=$(echo \"$result\" | tr -d '\\n')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo \"$result\" | tr -d ' ')\n  result=$(echo"], ["#!/bin/bash\n# Add two numbers x and y\n# >>> $(add \"2\" \"3\")\n# \"5\"\n# >>> $(add \"5\" \"7\")\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\nadd() {\n  local x=\"$1\"\n  local y=\"$2\"\n  echo \"$x + $y\""], ["#!/bin/bash\n# Check if two words have the same characters.\n# >>> $(same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n# \"true\"\n# >>> $(same_chars \"abcd\" \"dddddddabc\")\n# \"true\"\n# >>> $(same_chars \"dddddddabc\" \"abcd\")\n# \"true\"\n# >>> $(same_chars \"eabcd\" \"dddddddabc\")\n# \"false\"\n# >>> $(same_chars \"abcd\" \"dddddddabce\")\n# \"false\"\n# >>> $(same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n# \"false\"\n#\n# $1 is a string\n# $2 is a string\nsame_chars() {\n  local word1=$1\n  local word2=$2\n  local word1_len=${#word1}\n  local word2_len=${#word2}\n  local word1_chars=$(echo \"${word1}\" | tr '[:upper:]' '[:lower:]')\n  local word2_chars=$(echo \"${word2}\" | tr '[:upper:]' '[:lower:]')\n  local word1_chars_len=${#word1_chars}\n  local word2_chars_len=${#word2_chars}\n  local word1_chars_matched=0\n  local word2_chars_matched=0\n  for ((i=0; i<${word1_chars_len}; i++)); do\n    if [[ \"${word1_chars:i:1}\" == \"${word2_chars:i:1}\" ]]; then\n      word1_chars_matched=$((word1_chars_matched+1))\n    fi\n  done\n  for ((i=0; i<${word2_chars_len}; i++)); do\n    if [[ \"${word2_chars:i:1}\" == \"${word1_chars:i:1}\" ]]; then\n      word2_chars_matched=$((word2_chars_matched+1))\n    fi\n"], ["#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an integer\nfib() {\n  local n=$1\n  local result=0\n  for ((i=0; i<$n; i++)); do\n    result=$((result+1))\n  done\n  echo $result"], ["#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n#\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local result=true\n    for I in $(echo $brackets | sed -e 's/<\\//</g' -e 's/>\\/>/>/g' -e 's/<\\//</g' -e 's/>\\/>/>/g' -e 's/<\\//</g' -e 's/>\\/>/>/g' -e 's/<\\//</g' -e 's/>\\/>/>/g' -e 's/<\\//</g' -e 's/>\\/>/>/g' -e 's/<\\//</g' -e 's/>\\/>/>/g' -e 's/<\\//</g' -e 's/>\\/>/>/g' -e 's/<\\//</g' -e 's/>\\/>/>/g' -e 's/<\\//</g' -e 's/>\\/>/>/g' -e 's/<\\//</g' -e 's/>\\/>/>/g' -e 's/<\\//</g' -e 's/>\\/>/>/g' -e 's/<\\//</g' -e 's/>\\/>/>/g' -e 's/<\\//</g' -e 's/>\\/>/>/g' -e 's/<\\//</g' -e 's/>\\/>/>/g' -e 's/<\\//</g' -e 's/>\\/>/>/g' -e 's/<\\//</g' -e 's/>\\/>/>/g' -e 's/<\\//</g' -e 's"], ["#!/bin/bash\n# Return true is list elements are monotonically increasing or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n#\n# $1 is a space-separated list\nmonotonic() {\n    local list=\"$1\"\n    local result\n\n    result=true\n    for element in $list; do\n        if [[ \"$element\" -gt \"$result\" ]]; then\n            result=$element\n        fi\n    done\n\n    return $result"], ["#!/bin/bash\n# Return sorted unique common elements for two lists.\n# >>> $(common \"1 4 3 34 653 2 5\" \"5 7 1 5 9 653 121\")\n# ['\"1\"', '\"5\"', '\"653\"']\n# >>> $(common \"5 3 2 8\" \"3 2\")\n# ['\"2\"', '\"3\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncommon() {\n    local list1 list2\n    list1=$1\n    list2=$2\n    local common_list\n    common_list=$(echo \"$list1\" | tr ' ' '\\n' | sort | uniq)\n    local common_list_size\n    common_list_size=$(echo \"$common_list\" | wc -l)\n    local common_list_index\n    common_list_index=$(echo \"$common_list\" | head -n 1)\n    local common_list_element\n    common_list_element=$(echo \"$common_list\" | tail -n 1)\n    echo \"$common_list_element\""], ["#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n    local n=\"$1\"\n    local max_factor=1\n    for ((i=2; i<=sqrt($n); i++)); do\n        if ((n % i == 0)); then\n            max_factor=$i\n            break\n        fi\n    done\n    echo \"$max_factor\""], ["#!/bin/bash\n# sum_to_n is a function that sums numbers from 1 to n.\n# >>> $(sum_to_n \"30\")\n# \"465\"\n# >>> $(sum_to_n \"100\")\n# \"5050\"\n# >>> $(sum_to_n \"5\")\n# \"15\"\n# >>> $(sum_to_n \"10\")\n# \"55\"\n# >>> $(sum_to_n \"1\")\n# \"1\"\n#\n# $1 is an integer\nsum_to_n() {\n  local n=\"$1\"\n  local sum=0\n  for ((i=1; i<=n; i++)); do\n    sum=$((sum+i))\n  done\n  echo $sum"], ["#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n#\n# $1 is a string\ncorrect_bracketing() {\n    local brackets=$1\n    local result=false\n    for I in $(echo $1 | sed 's/\\([^\\)]*\\)/\\1/g'); do\n        if [[ $i =~ ^[^\\)]*$ ]]; then\n            result=true\n            break\n        fi\n    done\n    return $result"], ["#!/bin/bash\n# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2] * x^2 + ....\n# Return derivative of this polynomial in the same form.\n# >>> $(derivative \"3 1 2 4 5\")\n# ['\"1\"', '\"4\"', '\"12\"', '\"20\"']\n# >>> $(derivative \"1 2 3\")\n# ['\"2\"', '\"6\"']\n#\n# $1 is a space-separated list\nderivative() {\n  local xs\n  xs=\"$(echo \"$1\" | tr ' ' '\\n')\"\n  local n\n  n=\"${#xs[@]}\"\n  local result\n  result=\"$(echo \"$xs\" | sed 's/^[[:space:]]*//')\"\n  result=\"${result//[[:space:]]/}\"\n  result=\"${result//[[:space:]]/}\"\n  result=\"${result//[[:space:]]/}\"\n  result=\"${result//[[:space:]]/}\"\n  result=\"${result//[[:space:]]/}\"\n  result=\"${result//[[:space:]]/}\"\n  result=\"${result//[[:space:]]/}\"\n  result=\"${result//[[:space:]]/}\"\n  result=\"${result//[[:space:]]/}\"\n  result=\"${result//[[:space:]]/}\"\n  result=\"${result//[[:space:]]/}\"\n  result=\"${result//[[:space:]]/}\"\n  result=\"${result//[[:space:]]/}\"\n  result=\"${result//[[:space:]]/}\"\n  result=\"${result//[[:space:]]/}\"\n  result=\"${result//[[:space:]]/}\"\n  result=\"${result//[[:space:]]/}\"\n  result=\"${result//[[:space:]]/}\"\n  result=\"${result//[[:space:]]/}\"\n  result=\"${result//[[:space:]]/}\"\n  result=\"${result//[[:space:]]/}\"\n  result=\"${result//[[:space:]]/}\"\n  result=\"${result//[[:space:]]/}\"\n  result=\"${result//[[:space:]]/}\"\n  result=\"${result"], ["#!/bin/bash\n# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n# >>> $(fibfib \"1\")\n# \"0\"\n# >>> $(fibfib \"5\")\n# \"4\"\n# >>> $(fibfib \"8\")\n# \"24\"\n#\n# $1 is an integer\nfibfib() {\n    local n=\"$1\"\n    local fibfib\n    fibfib=()\n    for ((i=0; i<$n; i++)); do\n        fibfib[i]=$(( fibfib[i-1] + fibfib[i-2] + fibfib[i-3] ))\n    done\n    echo \"${fibfib[0]}\""], ["#!/bin/bash\n# Write a function vowels_count which takes a string representing\n# a word as input and returns the number of vowels in the string.\n# Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is at the end of the given word.\n# Example:\n# >>> $(vowels_count \"abcde\")\n# \"2\"\n# >>> $(vowels_count \"ACEDY\")\n# \"3\"\n#\n# $1 is a string\nvowels_count() {\n    local word=\"$1\"\n    local vowels=\"aeiouy\"\n    local count=0\n    for vowel in \"${vowels[@]}\"; do\n        if [[ \"$word\" =~ ^$vowel$ ]]; then\n            count=$((count + 1))\n        fi\n    done\n    echo \"$count\""], ["#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits right by shift\n# and return the result as a string.\n# If shift > number of digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\ncircular_shift() {\n    local shift=$1\n    shift=$2\n    local digits=$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\n    local reversed=$(echo \"$digits\" | tr '[:lower:]' '[:upper:]')\n    echo \"$reversed\""], ["#!/bin/bash\n# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> $(digitSum \"\")\n# \"0\"\n# >>> $(digitSum \"abAB\")\n# \"131\"\n# >>> $(digitSum \"abcCd\")\n# \"67\"\n# >>> $(digitSum \"helloE\")\n# \"69\"\n# >>> $(digitSum \"woArBld\")\n# \"131\"\n# >>> $(digitSum \"aAaaaXa\")\n# \"153\"\n#\n# $1 is a string\ndigitSum() {\n  local input=\"$1\"\n  local sum=0\n  for I in $(echo \"$input\" | tr '[:upper:]' '[:lower:]'); do\n    sum+=\"$i\"\n  done\n  echo \"$sum\""], ["#!/bin/bash\n# In this task, you will be given a string that represents a number of apples and oranges \n# that are distributed in a basket of fruit this basket contains \n# apples, oranges, and mango fruits. Given the string that represents the total number of \n# the oranges and apples and an integer that represent the total number of the fruits \n# in the basket return the number of the mango fruits in the basket.\n# for examble:\n# >>> $(fruit_distribution \"5 apples and 6 oranges\" \"19\")\n# \"8\"\n# >>> $(fruit_distribution \"0 apples and 1 oranges\" \"3\")\n# \"2\"\n# >>> $(fruit_distribution \"2 apples and 3 oranges\" \"100\")\n# \"95\"\n# >>> $(fruit_distribution \"100 apples and 1 oranges\" \"120\")\n# \"19\"\n#\n# $1 is a string\n# $2 is an integer\nfruit_distribution() {\n  local total_oranges=$1\n  local total_apples=$2\n  local mango_fruits=0\n  local apples=0\n  local oranges=0\n  local i=0\n  while I < $2; do\n    local fruit=$((i++))\n    local apples_count=$(echo \"$total_apples\" | awk '{print $1-$fruit}')\n    local oranges_count=$(echo \"$total_oranges\" | awk '{print $1-$fruit}')\n    local mango_fruits_count=$(echo \"$total_oranges\" | awk '{print $1-$fruit}')\n    if [[ $apples_count -eq 0 ]]; then\n      mango_fruits_count=$((mango_fruits_count + apples_count))\n    fi\n    if [[ $oranges_count -eq 0 ]]; then\n      mango_fruits_count=$((mango_fruits_count + oranges_count))\n    fi\n    if [[ $mango_fruits_count -eq 0 ]]; then\n      mango_fruits_count=$((mango"], ["#!/bin/bash\n# \"Given an array representing a branch of a tree that has non-negative integer nodes\n# your task is to pluck one of the nodes and return it.\n# The plucked node should be the node with the smallest even value.\n# If multiple nodes with the same smallest even value are found return the node that has smallest index.\n# The plucked node should be returned in a list, [ smalest_value, its index ],\n# If there are no even values or the given array is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 3:\n# >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n# so we will choose the first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n    local nodes\n    nodes=$(echo \"$1\" | tr ' ' '\\n')\n    local smallest_value\n    smallest_value=$(echo \"$nodes\" | tr ' ' '\\n' | tail -n 1)\n    local index\n    index=$(echo \"$nodes\" | tr ' ' '\\n' | tail -n 1 | awk '{print $1}')\n    echo \"$index\"\n    echo \"$smallest_value\""], ["#!/bin/bash\n# You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n# zero, and has a frequency greater than or equal to the value of the integer itself. \n# The frequency of an integer is the number of times it appears in the list.\n# If no such a value exist, return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n# $1 is a space-separated list\nsearch() {\n    local list=$1\n    local max\n    local count\n    local max_count\n    local max_count_str\n    local max_count_int\n    local max_count_int_str\n    local max_count_int_str_int\n    local max_count_int_str_int_str\n    local max_count_int_str_int_str_int\n    local max_count_int_str_int_str_int_str\n    local max_count_int_str_int_str_int_str_int\n    local max_count_int_str_int_str_int_str_int_str\n    local max_count_int_str_int_str_int_str_int_str_int\n    local max_count_int_str_int_str_int_str_int_str_int_str\n    local max_count_int_str_int_str_int_str_int_str_int_str_int\n    local max_count_int_str_int_str_int_str_int_str_int_str_int_str\n    local max_count_int_str_int_str_int_str_int_str_int_str_int_str_int\n    local max_count_int_str_int_str_int_str_int_str_int_str_int_str_int_str\n    local max_count_int_str_int_str_"], ["#!/bin/bash\n# Given list of integers, return list in strange order.\n# Strange sorting, is when you start with the minimum value,\n# then maximum of the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local list=\"$1\"\n  local min_value\n  local max_value\n  local min_index\n  local max_index\n  local min_string\n  local max_string\n  local min_string_index\n  local max_string_index\n  local min_string_value\n  local max_string_value\n  local min_string_value_index\n  local max_string_value_index\n  local min_string_value_index_index\n  local max_string_value_index_index\n  local min_string_value_index_index_index\n  local max_string_value_index_index_index_index\n  local min_string_value_index_index_index_index_index\n  local min_string_value_index_index_index_index_index_index\n  local min_string_value_index_index_index_index_index_index_index\n  local min_string_value_index_index_index_index_index_index_index_index\n  local min_string_value_index_index_index_index_index_index_index_index_index\n  local min_string_value_index_index_index_index_index_index_index_index_index_index\n  local min_string_value_index_index_index_index_index_index_index_index_index_index_index_index_index\n\n  # Get the min and max values\n  min_value=$(echo \"$list\" | tr ' ' '\\n"], ["#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return the area of\n# the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any two sides is greater \n# than the third side.\n# Example:\n# >>> $(triangle_area \"3\" \"4\" \"5\")\n# \"6.0\"\n# >>> $(triangle_area \"1\" \"2\" \"10\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\ntriangle_area() {\n  local side1=$1 side2=$2 side3=$3\n  local side1_sum=$((side1 + side2 + side3))\n  local side1_length=$(printf \"%.2f\" \"$side1_sum\")\n  local side2_length=$(printf \"%.2f\" \"$side2_sum\")\n  local side3_length=$(printf \"%.2f\" \"$side3_sum\")\n  local area=$(printf \"%.2f\" \"$(($side1_length + $side2_length + $side3_length))\")\n  if [[ $area -lt 0 ]]; then\n    return -1\n  fi\n  return $area"], ["#!/bin/bash\n# Write a function that returns true if the object q will fly, and false otherwise.\n# The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>> $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\")\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible weight, and it's balanced.\n#\n# $1 is a space-separated list\n# $2 is an integer\nwill_it_fly() {\n  local q=$1\n  local w=$2\n  local balanced\n  local weight\n  local max_weight\n  local max_balanced\n  local max_balanced_weight\n  local max_balanced_weight_str\n  local max_balanced_weight_int\n  local max_balanced_weight_int_str\n  local max_balanced_weight_int_str_len\n  local max_balanced_weight_int_str_len_str\n  local max_balanced_weight_int_str_len_str_len\n  local max_balanced_weight_int_str_len_str_len_str\n  local max_balanced_weight_int_str_len_str_len_str_len\n  local max_balanced_weight_int_str_len_str_len_str_len_str_len\n  local max_balanced_weight_int_str_len_str_len_str_len_str_len_str_len\n  local max"], ["#!/bin/bash\n# Given an array arr of integers, find the minimum number of elements that\n# need to be changed to make the array palindromic. A palindromic array is an array that\n# is read the same backwards and forwards. In one change, you can change one element to any other element.\n# For example:\n# >>> $(smallest_change \"1 2 3 5 4 7 9 6\")\n# \"4\"\n# >>> $(smallest_change \"1 2 3 4 3 2 2\")\n# \"1\"\n# >>> $(smallest_change \"1 2 3 2 1\")\n# \"0\"\n#\n# $1 is a space-separated list\nsmallest_change() {\n    local arr=$1\n    local n\n    n=0\n    for ((i=0; i<${#arr[@]}; i++)); do\n        if [[ $arr[i] -eq $arr[i+1] ]]; then\n            n=$((n+1))\n        fi\n    done\n    echo $n"], ["#!/bin/bash\n# Write a function that accepts two lists of strings and returns the list that has \n# total number of chars in the all strings of the list less than the other list.\n# if the two lists have the same number of chars, return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n# >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntotal_match() {\n    local list1=$1\n    local list2=$2\n    local result=()\n    for I in \"${!list1[@]}\"; do\n        local char1=$(echo \"${list1[$i]}\" | tr '[:upper:]' '[:lower:]')\n        local char2=$(echo \"${list2[$i]}\" | tr '[:upper:]' '[:lower:]')\n        if [[ ${char1} == ${char2} ]]; then\n            result+=(\"${list1[$i]}\")\n        else\n            result+=(\"${list2[$i]}\")\n        fi\n    done\n    return \"${result[@]}\""], ["#!/bin/bash\n# Write a function that returns true if the given number is the multiplication of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100. \n# Example:\n# >>> $(is_multiply_prime \"30\")\n# \"true\"\n# 30 = 2 * 3 * 5\n#\n# $1 is an integer\nis_multiply_prime() {\n  local num=$1\n  local num_2=$2\n  local num_3=$3\n  local num_4=$4\n  local num_5=$5\n  local num_6=$6\n  local num_7=$7\n  local num_8=$8\n  local num_9=$9\n  local num_10=$10\n\n  if [ \"$num_2\" -eq 0 ]; then\n    return 1\n  fi\n\n  if [ \"$num_3\" -eq 0 ]; then\n    return 1\n  fi\n\n  if [ \"$num_4\" -eq 0 ]; then\n    return 1\n  fi\n\n  if [ \"$num_5\" -eq 0 ]; then\n    return 1\n  fi\n\n  if [ \"$num_6\" -eq 0 ]; then\n    return 1\n  fi\n\n  if [ \"$num_7\" -eq 0 ]; then\n    return 1\n  fi\n\n  if [ \"$num_8\" -eq 0 ]; then\n    return 1\n  fi\n\n  if [ \"$num_9\" -eq 0 ]; then\n    return 1\n  fi\n\n  if [ \"$num_10\" -eq 0 ]; then\n    return 1\n  fi\n\n  return 0"], ["#!/bin/bash\n# Your task is to write a function that returns true if a number x is a simple\n# power of n and false in other cases.\n# x is a simple power of n if n**int=x\n# For example:\n# >>> $(is_simple_power \"1\" \"4\")\n# \"true\"\n# >>> $(is_simple_power \"2\" \"2\")\n# \"true\"\n# >>> $(is_simple_power \"8\" \"2\")\n# \"true\"\n# >>> $(is_simple_power \"3\" \"2\")\n# \"false\"\n# >>> $(is_simple_power \"3\" \"1\")\n# \"false\"\n# >>> $(is_simple_power \"5\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n# $2 is an integer\nis_simple_power() {\n  local n=$1\n  local x=$2\n  local result\n\n  if [ \"$n\" -eq \"$x\" ]; then\n    result=true\n  else\n    result=false\n  fi\n  return $result"], ["#!/bin/bash\n# Write a function that takes an integer a and returns true \n# if this ingeger is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n# >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>> $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n  local a=$1\n  local result=$(($a * $a * $a))\n  echo \"$result\""], ["#!/bin/bash\n# You have been tasked to write a function that receives \n# a hexadecimal number as a string and counts the number of hexadecimal \n# digits that are primes (prime number, or a prime, is a natural number \n# greater than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\n#\n# $1 is a string\nhex_key() {\n    local key=\"$1\"\n    local num_digits=0\n    local num_digits_primes=0\n    local num_digits_not_primes=0\n    local num_digits_not_primes_primes=0\n    local num_digits_not_primes_not_primes=0\n    local num_digits_not_primes_not_primes_primes=0\n    local num_digits_not_primes_not_primes_not_primes=0\n    local num_digits_not_primes_not_primes_not_primes_primes=0\n    local"], ["#!/bin/bash\n# You will be given a number in decimal form and your task is to convert it to\n# binary format. The function should return a string, with each character representing a binary\n# number. Each character in the string will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n# The extra characters are there to help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an integer\ndecimal_to_binary() {\n  local decimal=$1\n  local binary=\"\"\n  local i=0\n  while [ $i -lt $decimal ]; do\n    binary=\"${binary}${binary:0:1}${binary:1:1}${binary:2:1}${binary:3:1}${binary:4:1}${binary:5:1}${binary:6:1}${binary:7:1}${binary:8:1}${binary:9:1}${binary:10:1}${binary:11:1}${binary:12:1}${binary:13:1}${binary:14:1}${binary:15:1}\"\n    i=$((i+1))\n  done\n  echo \"${binary}\""], ["#!/bin/bash\n# You are given a string s.\n# Your task is to check if the string is hapsh or not.\n# A string is hapsh if its length is at least 3 and every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy \"a\")\n# \"false\"\n# >>> $(is_happy \"aa\")\n# \"false\"\n# >>> $(is_happy \"abcd\")\n# \"true\"\n# >>> $(is_happy \"aabb\")\n# \"false\"\n# >>> $(is_happy \"adb\")\n# \"true\"\n# >>> $(is_happy \"xyy\")\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n    local s=$1\n    local n=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n_i=0\n    local n_j=0\n    local n_k=0\n    local n_l=0\n    local n_m=0\n    local n_n_i=0\n    local n_n_j=0\n    local n_n_k=0\n    local n_n_l=0\n    local n_n_m=0\n    local n_n_n_i=0\n    local n_n_n_j=0\n    local n_n_n_k=0\n    local n_n_n_l=0\n    local n_n_n_m=0\n    local n_n_n_n_i=0\n    local n_n_n_n_j=0\n    local n_n_n_n_k=0\n    local n_n_n_n_l=0\n    local n_n_n_n_m=0\n    local n_n_n_n_n_i=0\n    local n_n_n_n_n_j=0\n    local n_n_n_n_n_k=0\n    local n_n_n_n_n_l=0\n    local n_n_n_n"], ["#!/bin/bash\n# It is the last week of the semester and the teacher has to give the grades\n# to students. The teacher has been making her own algorithm for grading.\n# The only problem is, she has lost the code she used for grading.\n# She has given you a list of GPAs for some students and you have to write \n# a function that can output a list of letter grades using the following table:\n# GPA       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7                B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7                C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n# >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n    local grade=$1\n    local letter_grade\n    letter_grade=\"$(echo \"$grade\" | tr '[:upper:]' '[:lower:]')\"\n    echo \"$letter_grade\""], ["#!/bin/bash\n# Write a function that takes a string and returns true if the string\n# length is a prime number or false otherwise\n# Examples\n# >>> $(prime_length \"Hello\")\n# \"true\"\n# >>> $(prime_length \"abcdcba\")\n# \"true\"\n# >>> $(prime_length \"kittens\")\n# \"true\"\n# >>> $(prime_length \"orange\")\n# \"false\"\n#\n# $1 is a string\nprime_length() {\n  local str=$1\n  local len=$(echo \"$str\" | wc -c)\n  if [ $len -eq 1 ]; then\n    echo \"true\"\n  else\n    echo \"false\"\n  fi"], ["#!/bin/bash\n# Given a positive integer n, return the count of the numbers of n-digit\n# positive integers that start or end with 1.\n#\n# $1 is an integer\nstarts_one_ends() {\n    local n=\"$1\"\n    local result=0\n    for ((i=1; i<=n; i++)); do\n        result+=$(echo \"$n-$i\" | tr '01' '123456789')\n    done\n    echo \"$result\""], ["#!/bin/bash\n# Given a positive integer N, return the total sum of its digits in binary.\n# Example\n# >>> $(solve \"1000\")\n# \"1\"\n# >>> $(solve \"150\")\n# \"110\"\n# >>> $(solve \"147\")\n# \"1100\"\n# Variables:\n# @N integer\n# Constraints: 0 \u2264 N \u2264 10000.\n# Output:\n# a string of binary number\n#\n# $1 is an integer\nsolve() {\n    local n=$1\n    local sum=0\n    for ((i=0; i<$n; i++)); do\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)\n        sum=$(echo \"$sum\" | bc)"], ["#!/bin/bash\n# Given a non-empty list of integers lst. add the even elements that are at odd indices..\n# Examples:\n# >>> $(add \"4 2 6 7\")\n# \"2\"\n#\n# $1 is a space-separated list\nadd() {\n  local lst=$1\n  local even=0\n  for I in $(seq 1 $#); do\n    local num=$(echo \"$lst\" | awk '{print $i}')\n    if [ $num -eq 2 ]; then\n      even=$((even+1))\n    fi\n    echo \"$num\"\n  done\n  echo \"$even\""], ["#!/bin/bash\n# Write a function that takes a string and returns an ordered version of it.\n# Ordered version of string, is a string where all words (separated by space)\n# are replaced by a new word where all the characters arranged in\n# ascending order based on ascii value.\n# Note: You should keep the order of words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\nanti_shuffle() {\n  local word_list\n  word_list=$(echo \"$1\" | tr ' ' '\\n' | sort -n | uniq)\n  echo \"${word_list[*]}\""], ["#!/bin/bash\n# You are given a 2 dimensional data, as a nested lists,\n# which is similar to matrix, however, unlike matrices,\n# each row may contain a different number of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return list of lists, [(x1, y1), (x2, y2) ...] such that\n# each list is a coordinate - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending order.\n# Also, sort coordinates of the row by columns in descending order.\n# Examples:\n# >>> $(get_row \"1 2 3 4 5 6\\n1 2 3 4 1 6\\n1 2 3 4 5 1\" \"1\")\n# [['\"0\"', '\"0\"'], ['\"1\"', '\"4\"'], ['\"1\"', '\"0\"'], ['\"2\"', '\"5\"'], ['\"2\"', '\"0\"']]\n# >>> $(get_row \"\" \"1\")\n# []\n# >>> $(get_row \"\\n1\\n1 2 3\" \"3\")\n# [['\"2\"', '\"2\"']]\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nget_row() {\n    local lst=\"$1\"\n    local x\n    for x in $(echo \"$lst\" | sed -e 's/ /,/g' -e 's/ /,/g' -e 's/ /,/g' -e 's/ /,/g' -e 's/ /,/g' -e 's/ /,/g' -e 's/ /,/g' -e 's/ /,/g' -e 's/ /,/g' -e 's/ /,/g' -e 's/ /,/g' -e 's/ /,/g' -e 's/ /,/g' -e 's/ /,/g' -e 's/ /,/g' -e 's/ /,/g' -e 's/ /,/g' -e '"], ["#!/bin/bash\n# Given an array of non-negative integers, return a cosh of the given array after sorting,\n# you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n# or sort it in descending order if the sum( first index value, last index value) is even.\n# Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"', '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local arr=\"$1\"\n  local sorted_arr\n  sorted_arr=$(echo \"$arr\" | sort -n)\n  echo \"${sorted_arr}\""], ["#!/bin/bash\n# Create a function encrypt that takes a string as an argument and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet should be rotated in a manner such that the letters \n# shift down by two multiplied to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  local alphabet=\"$1\"\n  local shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n"], ["#!/bin/bash\n# You are given a list of integers.\n# Write a function next_smallest() that returns the 2nd smallest element of the list.\n# Return None if there is no such element.\n# >>> $(next_smallest \"1 2 3 4 5\")\n# \"2\"\n# >>> $(next_smallest \"5 1 4 3 2\")\n# \"2\"\n# >>> $(next_smallest \"\")\n# \"None\"\n# >>> $(next_smallest \"1 1\")\n# \"None\"\n#\n# $1 is a space-separated list\nnext_smallest() {\n    local list=$1\n    local n=0\n    local min=\n    for I in $list; do\n        ((n++))\n        if [ $n -eq 1 ]; then\n            min=$i\n        else\n            if [ $i -lt $min ]; then\n                min=$i\n            fi\n        fi\n    done\n    echo $min"], ["#!/bin/bash\n# You'll be given a string of words, and your task is to count the number\n# of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences are delimited by '.', '?' or '!'.\n# For example:\n# >>> $(is_bored \"Hello world\")\n# \"0\"\n# >>> $(is_bored \"The sky is blue. The sun is shining. I love this weather\")\n# \"1\"\n#\n# $1 is a string\nis_bored() {\n  local line\n  for line in \"$@\"; do\n    if [[ $line =~ ^[.?!]$ ]]; then\n      return 0\n    fi\n  done\n  return 1"], ["#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"-2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n# $3 is a floating point\nany_int() {\n  local num1=$1\n  local num2=$2\n  local num3=$3\n  local num4=$4\n  local num5=$5\n  local num6=$6\n  local num7=$7\n  local num8=$8\n  local num9=$9\n  local num10=$10\n  local num11=$11\n  local num12=$12\n  local num13=$13\n  local num14=$14\n  local num15=$15\n  local num16=$16\n  local num17=$17\n  local num18=$18\n  local num19=$19\n  local num20=$20\n  local num21=$21\n  local num22=$22\n  local num23=$23\n  local num24=$24\n  local num25=$25\n  local num26=$26\n  local num27=$27\n  local num28=$28\n  local num29=$29\n  local num30=$30\n  local num31=$31\n  local num32=$32\n  local num33=$33\n  local num34=$34\n  local num35=$35\n  local num36=$36\n  local num37=$37\n  local num38=$38\n  local num39=$39\n  local num4"], ["#!/bin/bash\n# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> $(encode \"test\")\n# \"TGST\"\n# >>> $(encode \"This is a message\")\n# \"tHKS KS C MGSSCGG\"\n#\n# $1 is a string\nencode() {\n    local message=\"$1\"\n    local vowel=\"aeiouAEIOU\"\n    local vowel_index=0\n    local vowel_index_2=0\n    local vowel_index_3=0\n    local vowel_index_4=0\n    local vowel_index_5=0\n    local vowel_index_6=0\n    local vowel_index_7=0\n    local vowel_index_8=0\n    local vowel_index_9=0\n    local vowel_index_10=0\n    local vowel_index_11=0\n    local vowel_index_12=0\n    local vowel_index_13=0\n    local vowel_index_14=0\n    local vowel_index_15=0\n    local vowel_index_16=0\n    local vowel_index_17=0\n    local vowel_index_18=0\n    local vowel_index_19=0\n    local vowel_index_20=0\n    local vowel_index_21=0\n    local vowel_index_22=0\n    local vowel_index_23=0\n    local vowel_index_24=0\n    local vowel_index_25=0\n    local vowel_index_26=0\n    local vowel_index_27=0\n    local vowel_index_28=0\n    local vowel_index_29=0\n    local vowel_index_30=0\n    local vowel_index_"], ["#!/bin/bash\n# You are given a list of integers.\n# You need to find the largest prime value and return the sum of its digits.\n# Examples:\n# >>> $(skjkasdkd \"0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3\")\n# \"10\"\n# >>> $(skjkasdkd \"1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1\")\n# \"25\"\n# >>> $(skjkasdkd \"1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3\")\n# \"13\"\n# >>> $(skjkasdkd \"0 724 32 71 99 32 6 0 5 91 83 0 5 6\")\n# \"11\"\n# >>> $(skjkasdkd \"0 81 12 3 1 21\")\n# \"3\"\n# >>> $(skjkasdkd \"0 8 1 2 1 7\")\n# \"7\"\n#\n# $1 is a space-separated list\nskjkasdkd() {\n    local list=\"$1\"\n    local max_num=0\n    local sum=0\n    for num in $list; do\n        if [ \"$num\" -gt \"$max_num\" ]; then\n            max_num=$num\n        fi\n        sum+=\"$num\"\n    done\n    echo \"$sum\""], ["#!/bin/bash\n# Given a CSV, return true if all keys are strings in lower \n# case or all keys are strings in upper case, else return false.\n# The function should return false is the given CSV is empty.\n# Examples:\n# >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\")\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n  local csv=$1\n  local case_sensitive=false\n  if [[ $# -eq 2 ]]; then\n    case_sensitive=$2\n  fi\n  local keys\n  keys=$(echo $csv | sed 's/^\"//' | sed 's/^,//')\n  local keys_lower\n  keys_lower=$(echo $keys | tr '[:upper:]' '[:lower:]')\n  local keys_upper\n  keys_upper=$(echo $keys | tr '[:lower:]' '[:upper:]')\n  local keys_lower_case\n  keys_lower_case=$(echo $keys | tr '[:upper:]' '[:lower:]')\n  local keys_upper_case\n  keys_upper_case=$(echo $keys | tr '[:lower:]' '[:upper:]')\n  local keys_lower_case_upper\n  keys_lower_case_upper=$(echo $keys | tr '[:lower:]' '[:upper:]')\n  local keys_lower_case_upper_case\n  keys_lower_case_upper_case=$(echo $keys | tr '[:lower:]' '[:upper:]')\n  local keys_lower_case_upper_case_lower\n  keys_lower_case_upper_case_lower=$(echo $keys | tr"], ["#!/bin/bash\n# Implement a function that takes an non-negative integer and returns an array of the first n\n# integers that are prime numbers and less than n.\n# for example:\n# >>> $(count_up_to \"5\")\n# ['\"2\"', '\"3\"']\n# >>> $(count_up_to \"11\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"']\n# >>> $(count_up_to \"0\")\n# []\n# >>> $(count_up_to \"20\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"', '\"11\"', '\"13\"', '\"17\"', '\"19\"']\n# >>> $(count_up_to \"1\")\n# []\n# >>> $(count_up_to \"18\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"', '\"11\"', '\"13\"', '\"17\"']\n#\n# $1 is an integer\ncount_up_to() {\n    local n=$1\n    local arr=()\n    for ((i=2; i<=n; i++)); do\n        if [[ $i -eq $n ]]; then\n            arr+=(\"$i\")\n        fi\n    done\n    echo \"${arr[@]}\""], ["#!/bin/bash\n# Complete the function that takes two integers and returns \n# the product of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# >>> $(multiply \"148\" \"412\")\n# \"16\"\n# >>> $(multiply \"19\" \"28\")\n# \"72\"\n# >>> $(multiply \"2020\" \"1851\")\n# \"0\"\n# >>> $(multiply \"14\" \"-15\")\n# \"20\"\n#\n# $1 is an integer\n# $2 is an integer\nmultiply() {\n    local num1=$1\n    local num2=$2\n    local result\n\n    result=$(echo \"$num1\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:lower:]' '[:upper:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:lower:]' '[:upper:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:lower:]' '[:upper:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:lower:]' '[:upper:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:lower:]' '[:upper:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:lower:]' '[:upper:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:lower:]' '[:upper:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$result\" | tr '[:lower:]' '[:upper:]')\n    result=$(echo \"$result\" | tr '[:upper:]' '[:lower:]')\n    result=$(echo \"$"], ["#!/bin/bash\n# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\n# >>> $(count_upper \"aBCdEf\")\n# \"1\"\n# >>> $(count_upper \"abcdefg\")\n# \"0\"\n# >>> $(count_upper \"dBBE\")\n# \"0\"\n#\n# $1 is a string\ncount_upper() {\n    local s=\"$1\"\n    local count=0\n    for ((i=0; i<${#s}; i++)); do\n        if [[ $i -eq 0 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 1 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 2 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 3 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 4 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 5 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 6 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 7 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 8 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 9 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 10 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 11 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 12 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 13 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 14 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 15 ]]; then\n            count=$((count+1))\n        elif [[ $i -eq 16 ]]; then\n            count=$((count+1))\n       "], ["#!/bin/bash\n# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local num=\"$1\"\n  local closest_num\n  local closest_num_int\n  local closest_num_str\n\n  # Check if the number is equidistant from two integers\n  if [[ \"$num\" -eq \"$num\" ]]; then\n    closest_num_int=$(echo \"$num\" | awk '{print $1}')\n    closest_num_str=$(echo \"$num\" | awk '{print $2}')\n    closest_num=$(echo \"$closest_num_int\" | bc)\n    closest_num_str=$(echo \"$closest_num_str\" | bc)\n    closest_num=$(echo \"$closest_num_str\" | bc)\n  else\n    closest_num=$(echo \"$num\" | bc)\n  fi\n\n  # Round away from zero\n  closest_num_int=$(echo \"$closest_num\" | bc)\n  closest_num_str=$(echo \"$closest_num\" | bc)\n  closest_num=$(echo \"$closest_num_int\" | bc)\n\n  return \"$closest_num\""], ["#!/bin/bash\n# Given a positive integer n, you have to make a pile of n levels of stones.\n# The first level has n stones.\n# The number of stones in the next level is:\n# - the next odd number if n is odd.\n# - the next even number if n is even.\n# Return the number of stones in each level in a list, where element at index\n# i represents the number of stones in the level (i+1).\n# Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local result=()\n  for ((i=0; i<$n; i++)); do\n    result+=( \"$(echo \"$i+1\" | bc -l)\" )\n  done\n  echo \"${result[@]}\""], ["#!/bin/bash\n# You will be given a string of words separated by commas or spaces. Your task is\n# to split the string into words and return an array of the words.\n# For example:\n# >>> $(words_string \"Hi, my name is John\")\n# ['\"Hi\"', '\"my\"', '\"name\"', '\"is\"', '\"John\"']\n# >>> $(words_string \"One, two, three, four, five, six\")\n# ['\"One\"', '\"two\"', '\"three\"', '\"four\"', '\"five\"', '\"six\"']\n#\n# $1 is a string\nwords_string() {\n    local word_string=\"$1\"\n    local word_array=()\n    while IFS= read -r word; do\n        word_array+=(\"$word\")\n    done <<< \"$word_string\"\n    return \"${word_array[@]}\""], ["#!/bin/bash\n# This function takes two positive numbers x and y and returns the\n# biggest even integer number that is in the range [x, y] inclusive. If \n# there's no such number, then the function should return -1.\n# For example:\n# >>> $(choose_num \"12\" \"15\")\n# \"14\"\n# >>> $(choose_num \"13\" \"12\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n  local x y\n  x=$1\n  y=$2\n  local max\n  max=$((y - x + 1))\n  local num\n  num=$((max + 1))\n  while ((num <= 0)); do\n    num=$((num - 2))\n  done\n  echo \"$num\""], ["#!/bin/bash\n# You are given two positive integers n and m, and your task is to compute the\n# average of the integers from n through m (including n and m). \n# Round the answer to the nearest integer and convert that to binary.\n# If n is greater than m, return -1.\n# Example:\n# >>> $(rounded_avg \"1\" \"5\")\n# \"0b11\"\n# >>> $(rounded_avg \"7\" \"5\")\n# \"-1\"\n# >>> $(rounded_avg \"10\" \"20\")\n# \"0b1111\"\n# >>> $(rounded_avg \"20\" \"33\")\n# \"0b11010\"\n#\n# $1 is an integer\n# $2 is an integer\nrounded_avg() {\n    local n=$1\n    local m=$2\n    local avg\n    avg=0\n    for ((i=n; i<=m; i++)); do\n        avg=$((avg+${i}))\n    done\n    avg=$((avg/2))\n    return $avg"], ["#!/bin/bash\n# Given a list of positive integers x. return a sorted list of all \n# elements that hasn't any even digit.\n# Note: Returned list should be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local list=\"$1\"\n  local result=()\n  for I in \"${list[@]}\"; do\n    if [[ $i =~ ^[0-9]+$ ]]; then\n      result+=(\"$i\")\n    fi\n  done\n  sort -u \"${result[@]}\""], ["#!/bin/bash\n# Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n# reverse the resulting array, and then replace each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"']\n#\n# $1 is a space-separated list\nby_length() {\n  local arr=\"$1\"\n  local i\n  local len\n  local name\n  local arr_len\n  local arr_name\n  local arr_name_len\n  local arr_name_arr\n  local arr_name_arr_len\n  local arr_name_arr_name\n  local arr_name_arr_name_len\n  local arr_name_arr_name_arr\n  local arr_name_arr_name_arr_len\n  local arr_name_arr_name_arr_name_arr\n  local arr_name_arr_name_arr_name_arr_len\n  local arr_name_arr_name_arr_name_arr_name_arr\n  local arr_name_arr_name_arr_name_arr_name_arr_len\n  local arr_name_arr_name_arr_name_arr_name_arr_name_arr\n  local arr_name_arr_name_arr_name_arr_name_arr_name_arr_len\n\n  arr_len=${#arr[@]}\n  arr_name=${arr[0]}\n  arr_name_len=${#arr_name[@]}\n\n  arr_name_arr_len=${arr_name_len}\n  arr_name_"], ["#!/bin/bash\n# Implement the function f that takes n as a parameter,\n# and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n# i starts from 1.\n# the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n# Example:\n# >>> $(f \"5\")\n# ['\"1\"', '\"2\"', '\"6\"', '\"24\"', '\"15\"']\n#\n# $1 is an integer\nf() {\n  local n=\"$1\"\n  local result=()\n  for ((i=1; i<=n; i++)); do\n    result+=(\"$i\")\n  done\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result+=(\"$n\")\n  result"], ["#!/bin/bash\n# Given a positive integer n, return a list that has the number of even and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n# Example 1:\n# >>> $(even_odd_palindrome \"3\")\n# ['\"1\"', '\"2\"']\n# Explanation:\n# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# >>> $(even_odd_palindrome \"12\")\n# ['\"4\"', '\"6\"']\n# Explanation:\n# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n# 1. 1 <= n <= 10^3\n# 2. returned list has the number of even and odd integer palindromes respectively.\n#\n# $1 is an integer\neven_odd_palindrome() {\n    local n=$1\n    local even_palindromes=\"\"\n    local odd_palindromes=\"\"\n    for ((i=1; i<=n; i++)); do\n        if [[ $i -eq 1 ]]; then\n            even_palindromes=\"$even_palindromes\"\n        elif [[ $i -eq 2 ]]; then\n            odd_palindromes=\"$odd_palindromes\"\n        else\n            if [[ $i -eq 2 ]]; then\n                even_palindromes=\"$even_palindromes\"\n            else\n                odd_palindromes=\"$odd_palindromes\"\n            fi\n        fi\n    done\n    echo \"$even_palindromes\"\n    echo \"$odd_palindromes\""], ["#!/bin/bash\n# Write a function count_nums which takes an array of integers and returns\n# the number of elements which has a sum of digits > 0.\n# If a number is negative, then its first signed digit will be negative:\n# e.g. -123 has signed digits -1, 2, and 3.\n# >>> $(count_nums \"\")\n# \"0\"\n# >>> $(count_nums \"-1 11 -11\")\n# \"1\"\n# >>> $(count_nums \"1 1 2\")\n# \"3\"\n#\n# $1 is a space-separated list\ncount_nums() {\n    local nums=\"$1\"\n    local sum=0\n    for num in $nums; do\n        sum+=$num\n    done\n    echo \"$sum\""], ["#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n# numbers in the array will be randomly ordered. Your task is to determine if\n# it is possible to get an array sorted in non-decreasing order by performing \n# the following operation on the given array:\n# You are allowed to perform right shift operation any number of times.\n# One right shift operation means shifting all elements of the array by one\n# position in the right direction. The last element of the array will be moved to\n# the starting position in the array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing the above operation\n# then return true else return false.\n# If the given array is empty then return true.\n# Note: The given list is guaranteed to have unique elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n# be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"false\"\n# Explanation:It is not possible to get non-decreasing order for the given\n# array by performing any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball() {\n  local arr=$1\n  shift\n  local n=$1\n  shift\n  local arr_copy\n  local arr_copy_copy\n  local arr_copy_copy_copy\n  local arr_copy_copy_copy_copy\n  local arr_copy_copy_copy_copy_copy\n  local arr_copy_copy_copy_copy_copy_copy\n  local arr_copy_copy_copy_copy_copy_copy_copy\n  local arr_copy_copy_copy_copy_copy_copy_copy_copy\n  local arr_copy_copy_copy_copy_copy_copy_copy_copy_copy\n  local arr_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\n  local arr_copy_"], ["#!/bin/bash\n# In this problem, you will implement a function that takes two lists of numbers,\n# and determines whether it is possible to perform an exchange of elements\n# between them to make lst1 a list of only even numbers.\n# There is no limit on the number of exchanged elements between lst1 and lst2.\n# If it is possible to exchange elements between the lst1 and lst2 to make\n# all the elements of lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n# >>> $(exchange \"1 2 3 4\" \"1 2 3 4\")\n# \"YES\"\n# >>> $(exchange \"1 2 3 4\" \"1 5 3 4\")\n# \"NO\"\n# It is assumed that the input lists will be non-empty.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nexchange() {\n    local lst1 lst2\n    read -r -d '' lst1 <<< \"$1\"\n    read -r -d '' lst2 <<< \"$2\"\n    if [[ \"$lst1\" == \"$lst2\" ]]; then\n        echo \"YES\"\n    else\n        echo \"NO\"\n    fi"], ["#!/bin/bash\n# Given a string representing a space separated lowercase letters, return a CSV\n# of the letter with the most repetition and containing the corresponding count.\n# If several letters have the same occurrence, return all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"', '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local string=\"$1\"\n  local max_occurrence=0\n  local count=0\n  local letter\n  local -a result\n\n  for letter in $(echo \"$string\" | tr 'a-z' 'A-Z'); do\n    if [[ -n \"$max_occurrence\" ]]; then\n      if [[ \"$letter\" == \"$max_occurrence\" ]]; then\n        result[count]=\"$count\"\n      else\n        result[count]=\"$max_occurrence\"\n      fi\n    else\n      result[count]=\"$letter\"\n    fi\n    max_occurrence=\"$letter\"\n    count=\"$((count+1))\"\n  done\n\n  return \"${result[@]}\""], ["#!/bin/bash\n# Task\n# We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n# then check if the result string is palindrome.\n# A string is called palindrome if it reads the same backward as forward.\n# You should return a list containing the result string and true/false for the check.\n# Example\n# >>> $(reverse_delete \"abcde\" \"ae\")\n# ['\"bcd\"', '\"false\"']\n# >>> $(reverse_delete \"abcdef\" \"b\")\n# ['\"acdef\"', '\"false\"']\n# >>> $(reverse_delete \"abcdedcba\" \"ab\")\n# ['\"cdedc\"', '\"true\"']\n#\n# $1 is a string\n# $2 is a string\nreverse_delete() {\n    local s=$1\n    local c=$2\n    local result\n    result=$(echo \"$s\" | tr 'a-z' 'A-Z')\n    result=$(echo \"$result\" | tr 'a-z' 'A-Z')\n    result=$(echo \"$result\" | tr 'a-z' 'A-Z')\n    result=$(echo \"$result\" | tr 'a-z' 'A-Z')\n    result=$(echo \"$result\" | tr 'a-z' 'A-Z')\n    result=$(echo \"$result\" | tr 'a-z' 'A-Z')\n    result=$(echo \"$result\" | tr 'a-z' 'A-Z')\n    result=$(echo \"$result\" | tr 'a-z' 'A-Z')\n    result=$(echo \"$result\" | tr 'a-z' 'A-Z')\n    result=$(echo \"$result\" | tr 'a-z' 'A-Z')\n    result=$(echo \"$result\" | tr 'a-z' 'A-Z')\n    result=$(echo \"$result\" | tr 'a-z' 'A-Z')\n    result=$(echo \"$result\" | tr 'a-z' 'A-Z')\n    result=$(echo \"$result\" | tr 'a-z' 'A-Z')\n    result=$(echo \"$result\" | tr 'a-z' 'A-Z')\n   "], ["#!/bin/bash\n# Given an array of integers nums, find the minimum sum of any non-empty sub-array\n# of nums.\n# Example\n# >>> $(minSubArraySum \"2 3 4 1 2 4\")\n# \"1\"\n# >>> $(minSubArraySum \"-1 -2 -3\")\n# \"-6\"\n#\n# $1 is a space-separated list\nminSubArraySum() {\n    local nums=\"$1\"\n    local min_sum=0\n    local min_num\n    local min_num_len\n    local min_sum_len\n    local min_sum_num\n    local min_sum_num_len\n    local min_sum_num_len_max\n    local min_sum_num_len_min\n    local min_sum_num_len_min_max\n    local min_sum_num_len_min_max_max\n    local min_sum_num_len_min_max_max_max\n    local min_sum_num_len_min_max_max_max_max\n    local min_sum_num_len_min_max_max_max_max_max\n    local min_sum_num_len_min_max_max_max_max_max_max\n    local min_sum_num_len_min_max_max_max_max_max_max_max\n    local min_sum_num_len_min_max_max_max_max_max_max_max_max\n    local min_sum_num_len_min_max_max_max_max_max_max_max_max_max\n    local min_sum_num_len_min_max_max_max_max_max_max_max_max_max_max\n    local min_sum_num_len_min_max_max_max_max_max_max_max_max_max_max_max_max\n    local min_sum_num_len_min_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\n    local min_sum_num_len_min_max_max_max_max_max"], ["#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents a single well,\n# and each 1 in a row represents a single unit of water.\n# Each well has a corresponding bucket that can be used to extract water from it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets to empty the wells.\n# Output the number of times you need to lower the buckets.\n# Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nmax_fill() {\n    local grid=$1\n    local capacity=$2\n    local n\n    n=0\n    for ((i=0; i<${#grid[@]}; i++)); do\n        for ((j=0; j<${#grid[i]}; j++)); do\n            if [[ $grid[i][j] -eq 1 ]]; then\n                n=$((n+1))\n            fi\n        done\n    done\n    echo \"$n\""], ["#!/bin/bash\n# In this Kata, you have to sort an array of non-negative integers according to\n# number of ones in their binary representation in ascending order.\n# For similar number of ones, sort based on decimal value.\n# It must be implemented like this:\n# >>> $(sort_array \"1 5 2 3 4\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array \"-2 -3 -4 -5 -6\")\n# ['\"-6\"', '\"-5\"', '\"-4\"', '\"-3\"', '\"-2\"']\n# >>> $(sort_array \"1 0 2 3 4\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local arr=$1\n  local sorted_arr\n  sorted_arr=$(echo \"$arr\" | tr ' ' '\\n' | sort -nr | head -n 1)\n  echo \"$sorted_arr\""], ["#!/bin/bash\n# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\" \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words() {\n    local word_list=\"\"\n    local word=\"\"\n    local n=0\n    local i=0\n    while IFS= read -r word; do\n        ((n++))\n        if ((n == $2)); then\n            word_list=\"${word_list} ${word}\"\n        fi\n    done < <(echo \"$1\")\n    echo \"${word_list}\""], ["#!/bin/bash\n# You are given a word. Your task is to find the closest vowel that stands between \n# two consonants from the right side of the word (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n# find any vowel met the above condition. \n# You may assume that the given string contains English letter only.\n# Example:\n# >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\")\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local word=\"$1\"\n    local vowel_start_index=\"$2\"\n    local vowel_end_index=\"$3\"\n    local vowel_end_index_minus_1=\"$vowel_end_index-1\"\n    local vowel_end_index_minus_2=\"$vowel_end_index-2\"\n    local vowel_end_index_minus_3=\"$vowel_end_index-3\"\n    local vowel_end_index_minus_4=\"$vowel_end_index-4\"\n    local vowel_end_index_minus_5=\"$vowel_end_index-5\"\n    local vowel_end_index_minus_6=\"$vowel_end_index-6\"\n    local vowel_end_index_minus_7=\"$vowel_end_index-7\"\n    local vowel_end_index_minus_8=\"$vowel_end_index-8\"\n    local vowel_end_index_minus_9=\"$vowel_end_index-9\"\n    local vowel_end_index_minus_10=\"$vowel_end_index-10\"\n    local vowel_end_index_minus_11=\"$vowel_end_index-11\"\n    local vowel_end_index_minus_12=\"$vowel_end_index-12\"\n    local vowel_end_index"], ["#!/bin/bash\n# You are given a list of two strings, both strings consist of open\n# parentheses '(' or close parentheses ')' only.\n# Your job is to check if it is possible to concatenate the two strings in\n# some order, that the resulting string will be good.\n# A string S is considered to be good if and only if all parentheses in S\n# are balanced. For example: the string '(())()' is good, while the string\n# '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n# Examples:\n# >>> $(match_parens \"()( )\")\n# \"Yes\"\n# >>> $(match_parens \") )\")\n# \"No\"\n#\n# $1 is a space-separated list\nmatch_parens() {\n  local str=\"$1\"\n  local open=\"$2\"\n  local close=\"$3\"\n  local result=\"\"\n\n  if [[ \"$open\" == \"(\" ]]; then\n    result=\"$result$str\"\n    result=\"$result$(match_parens \"$str\" \"$close\")\"\n  else\n    result=\"$result$str\"\n  fi\n\n  result=\"$result$close\"\n\n  return 0"], ["#!/bin/bash\n# Given an array arr of integers and a positive integer k, return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n# >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length of the array will be in the range of [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nmaximum() {\n    local arr=\"$1\"\n    local k=\"$2\"\n    local max_arr\n    local max_k\n    local max_arr_str\n    local max_k_str\n    local max_arr_str_len\n    local max_k_str_len\n    local max_arr_str_index\n    local max_k_str_index\n    local max_arr_str_value\n    local max_k_str_value\n    local max_arr_str_value_len\n    local max_k_str_value_len\n    local max_arr_str_value_index\n    local max_k_str_value_index\n    local max_arr_str_value_len_index\n    local max_k_str_value_len_index\n    local max_arr_str_value_len_index_value\n    local max_k_str_value_len_index_value\n    local max_arr_str_value_len_index_value_index\n    local max_k_str_value_len_index_value_index_value\n    local max_arr_str_value_len_index_value_index_value_index"], ["#!/bin/bash\n# Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n# Examples\n# >>> $(solution \"5 8 7 1\")\n# \"12\"\n# >>> $(solution \"3 3 3 3 3\")\n# \"9\"\n# >>> $(solution \"30 13 24 321\")\n# \"0\"\n#\n# $1 is a space-separated list\nsolution() {\n    local list=\"$1\"\n    local sum=0\n    for I in $(seq 1 $#); do\n        local num=$(echo \"$list\" | awk -v I=$i '{print $i}')\n        if [[ \"$num\" -eq 0 ]]; then\n            continue\n        fi\n        sum+=$num\n    done\n    echo \"$sum\""], ["#!/bin/bash\n# Given a non-empty array of integers arr and an integer k, return\n# the sum of the elements with at most two digits from the first k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements() {\n    local arr=\"$1\"\n    local k=\"$2\"\n    local sum=0\n    for I in $(seq 1 $k); do\n        local num=$(echo \"$arr\" | awk '{print $i}')\n        if [[ $num -lt 10 ]]; then\n            sum=$((sum + $num))\n        else\n            sum=$((sum + $num * 10))\n        fi\n    done\n    echo \"$sum\""], ["#!/bin/bash\n# Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n# The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n# as follows: start with any positive integer n. Then each term is obtained from the \n# previous term as follows: if the previous term is even, the next term is one half of \n# the previous term. If the previous term is odd, the next term is 3 times the previous\n# term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n# Note: \n# 1. Collatz(1) is [1].\n# 2. returned list sorted in increasing order.\n# For example:\n# get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n# >>> $(get_odd_collatz \"5\")\n# ['\"1\"', '\"5\"']\n#\n# $1 is an integer\nget_odd_collatz() {\n    local n=\"$1\"\n    local collatz_seq\n    collatz_seq=$(get_odd_collatz_seq \"$n\")\n    echo \"${collatz_seq[@]}\""], ["#!/bin/bash\n# You have to write a function which validates a given date string and\n# returns true if the date is valid otherwise false.\n# The date is valid if all of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n# 3. The months should not be less than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n# >>> $(valid_date \"03-11-2000\")\n# \"true\"\n# >>> $(valid_date \"15-01-2012\")\n# \"false\"\n# >>> $(valid_date \"04-0-2040\")\n# \"false\"\n# >>> $(valid_date \"06-04-2020\")\n# \"true\"\n# >>> $(valid_date \"06/04/2020\")\n# \"false\"\n#\n# $1 is a string\nvalid_date() {\n  local date=$1\n  local month=$(echo \"$date\" | cut -d '-' -f 1)\n  local day=$(echo \"$date\" | cut -d '-' -f 2)\n  local year=$(echo \"$date\" | cut -d '-' -f 3)\n  local month_num=$(echo \"$month\" | grep -oE '[1-9]')\n  local day_num=$(echo \"$day\" | grep -oE '[1-9]')\n  local year_num=$(echo \"$year\" | grep -oE '[0-9]{4}')\n  if [ \"$month_num\" -lt 1 -o \"$month_num\" -gt 12 ]; then\n    return \"false\"\n  fi\n  if [ \"$day_num\" -lt"], ["#!/bin/bash\n# Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n# should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\!\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words() {\n    local text=$1\n    local words=()\n    local i=0\n    while read -r line; do\n        words+=(\"$line\")\n        ((i++))\n    done < <(echo \"$text\")\n    echo \"${words[@]}\""], ["#!/bin/bash\n# Given a list of numbers, return whether or not they are sorted\n# in ascending order. If list has more than 1 duplicate of the same\n# number, return false. Assume no negative numbers and only integers.\n# Examples\n# >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated list\nis_sorted() {\n  local list=\"$1\"\n  local sorted_list\n  sorted_list=$(echo \"$list\" | tr ' ' '\\n')\n  local sorted_list_length=$(echo \"$sorted_list\" | wc -l)\n  local sorted_list_index\n  for sorted_list_index in $(seq 1 $sorted_list_length); do\n    local sorted_list_element=$(echo \"$sorted_list\" | head -n \"$(($sorted_list_index - 1))\" | tail -n 1)\n    if [[ \"$sorted_list_element\" == \"$(echo \"$list\" | tail -n 1)\" ]]; then\n      return 1\n    else\n      return 0\n    fi\n  done\n  return 0"], ["#!/bin/bash\n# You are given two intervals,\n# where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n# The given intervals are closed which means that the interval (start, end)\n# includes both start and end.\n# For each given interval, it is assumed that its start is less or equal its end.\n# Your task is to determine whether the length of intersection of these two \n# intervals is a prime number.\n# Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If the length of the intersection is a prime number, return \"YES\",\n# otherwise, return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output] samples:\n# >>> $(intersection \"1 2\" \"2 3\")\n# \"NO\"\n# >>> $(intersection \"-1 1\" \"0 4\")\n# \"NO\"\n# >>> $(intersection \"-3 -1\" \"-5 5\")\n# \"YES\"\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nintersection() {\n    local start end\n    start=$1\n    end=$2\n    if [[ \"$start\" -lt \"$end\" ]]; then\n        return \"NO\"\n    fi\n    local i\n    for i in $(seq \"$start\" \"$end\"); do\n        if [[ \"$i\" -lt \"$start\" ]]; then\n            return \"NO\"\n        fi\n        if [[ \"$i\" -lt \"$end\" ]]; then\n            return \"NO\"\n        fi\n    done\n    return \"YES\""], ["#!/bin/bash\n# You are given an array arr of integers and you need to return\n# sum of magnitudes of integers multiplied by product of all signs\n# of each number in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>> $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1 is a space-separated list\nprod_signs() {\n    local arr=\"$1\"\n    local sum=0\n    for I in \"${arr[@]}\"; do\n        local sign\n        if [[ $i == 0 ]]; then\n            sign=\"1\"\n        elif [[ $i == -1 ]]; then\n            sign=\"-1\"\n        elif [[ $i == 1 ]]; then\n            sign=\"0\"\n        else\n            sign=\"-1\"\n        fi\n        sum+=\"$sign\"\n    done\n    echo \"$sum\""], ["#!/bin/bash\n# Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n# each cell of the grid contains a value. Every integer in the range [1, N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have to find the minimum path of length k in the grid. You can start\n# from any cell, and in each step you can move to any of the neighbor cells,\n# in other words, you can go to cells which share an edge with you current\n# cell.\n# Please note that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n# You CANNOT go off the grid.\n# A path A (of length k) is considered less than a path B (of length k) if\n# after making the ordered lists of the values on the cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically less\n# than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j] = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered list of the values on the cells that the minimum path go through.\n# Examples:    \n# >>> $(minPath \"1 2 3\\n4 5 6\\n7 8 9\" \"3\")\n# ['\"1\"', '\"2\"', '\"1\"']\n# >>> $(minPath \"5 9 3\\n4 1 6\\n7 8 2\" \"1\")\n# ['\"1\"']\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nminPath() {\n    local I=1\n    local j=2\n    local min_path=\"\"\n    local max_path=\"\"\n    while [[ $# -gt 1 ]]; do\n        local value=$1\n        shift\n        if [[ $value -lt 1 || $value -gt $# ]];"], ["#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n# the last couple centuries. However, what people don't know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are given a non-negative integer number n, you have to a return a list of the \n# first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n    local n=$1\n    local result=()\n    for ((i=1; i<=n; i++)); do\n        result[i]=$((i+1))\n    done\n    return"], ["#!/bin/bash\n# Given a positive integer n, return the product of the odd digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n# \"15\"\n#\n# $1 is an integer\ndigits() {\n  local n=\"$1\"\n  local result=0\n  for ((i=1; i<=n; i++)); do\n    result=$((result * 10 + $i))\n  done\n  echo $result"], ["#!/bin/bash\n# Create a function that takes a string as input which contains only square brackets.\n# The function should return true if and only if there is a valid subsequence of brackets \n# where at least one bracket in the subsequence is nested.\n# >>> $(is_nested \"[[]]\")\n# \"true\"\n# >>> $(is_nested \"[]]]]]]][[[[[]\")\n# \"false\"\n# >>> $(is_nested \"[][]\")\n# \"false\"\n# >>> $(is_nested \"[]\")\n# \"false\"\n# >>> $(is_nested \"[[][]]\")\n# \"true\"\n# >>> $(is_nested \"[[]][[\")\n# \"true\"\n#\n# $1 is a string\nis_nested() {\n    local str=\"$1\"\n    local bracket_count=0\n    local bracket_index=0\n    local bracket_string=\"\"\n    local bracket_bracket=\"\"\n    local bracket_bracket_count=0\n    local bracket_bracket_string=\"\"\n    local bracket_bracket_index=0\n    local bracket_bracket_index_count=0\n    local bracket_bracket_index_count_max=0\n    local bracket_bracket_index_count_min=0\n    local bracket_bracket_index_count_min_max=0\n    local bracket_bracket_index_count_max_min=0\n    local bracket_bracket_index_count_min_max_min_max=0\n    local bracket_bracket_index_count_min_max_min_max_min=0\n    local bracket_bracket_index_count_min_max_min_max_min_max=0\n    local bracket_bracket_index_count_min_max_min_max_min_max_min_max=0\n    local bracket_bracket_index_count_min_max_min_max_min_max_min_max_min_max=0\n    local bracket_bracket_index_count_min_max_min_max_min_max_min_max_min_max_min_max=0\n    local bra"], ["#!/bin/bash\n# You are given a list of numbers.\n# You need to return the sum of squared numbers in the given list,\n# round each element in the list to the upper int(Ceiling) first.\n# Examples:\n# >>> $(lst \"1.0 2.0 3.0\")\n# \"14\"\n# >>> $(lst \"1.0 4.0 9.0\")\n# \"98\"\n# >>> $(lst \"1.0 3.0 5.0 7.0\")\n# \"84\"\n# >>> $(lst \"1.4 4.2 0.0\")\n# \"29\"\n# >>> $(lst \"-2.4 1.0 1.0\")\n# \"6\"\n#\n# $1 is a space-separated list\nsum_squares() {\n    local lst=$1\n    local ceiling=$(expr $1 - 1)\n    local sum=0\n    for num in $lst; do\n        sum+=$num*$num\n    done\n    echo \"$sum\" | bc -l"], ["#!/bin/bash\n# Create a function that returns true if the last character\n# of a given string is an alphabetical character and is not\n# a part of a word, and false otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n# >>> $(check_if_last_char_is_a_letter \"apple pie\")\n# \"false\"\n# >>> $(check_if_last_char_is_a_letter \"apple pi e\")\n# \"true\"\n# >>> $(check_if_last_char_is_a_letter \"apple pi e \")\n# \"false\"\n# >>> $(check_if_last_char_is_a_letter \"\")\n# \"false\"\n#\n# $1 is a string\ncheck_if_last_char_is_a_letter() {\n  local last_char\n  last_char=$(echo \"$1\" | tr -d '[:space:]')\n  return $(echo \"$last_char\" | grep -q '[a-zA-Z]')"], ["#!/bin/bash\n# Create a function which returns the largest index of an element which\n# is not greater than or equal to the element immediately preceding it. If\n# no such element exists then return -1. The given array will not contain\n# duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n# >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\ncan_arrange() {\n  local arr=\"$1\"\n  local max_idx=0\n  local max_idx_prev=0\n  for I in \"${arr[@]}\"; do\n    if [[ $i -lt $max_idx_prev ]]; then\n      max_idx=$i\n      max_idx_prev=$i\n    fi\n  done\n  return $max_idx"], ["#!/bin/bash\n# Create a function that returns a list (a, b), where 'a' is\n# the largest of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n# If there is no negative or positive integers, return them as None.\n# Examples:\n# >>> $(largest_smallest_integers \"2 4 1 3 5 7\")\n# ['\"None\"', '\"1\"']\n# >>> $(largest_smallest_integers \"\")\n# ['\"None\"', '\"None\"']\n# >>> $(largest_smallest_integers \"0\")\n# ['\"None\"', '\"None\"']\n#\n# $1 is a space-separated list\nlargest_smallest_integers() {\n  local largest_list smallest_list\n  largest_list=\"$(echo \"$1\" | tr -d ' ' | tr -d '\\n')\"\n  smallest_list=\"$(echo \"$2\" | tr -d ' ' | tr -d '\\n')\"\n  if [[ \"$largest_list\" == \"$smallest_list\" ]]; then\n    return\n  fi\n  echo \"$largest_list\""], ["#!/bin/bash\n# Create a function that takes integers, floats, or strings representing\n# real numbers, and returns the larger variable in its given variable type.\n# Return None if the values are equal.\n# Note: If a real number is represented as a string, the floating point might be . or ,\n# >>> $(compare_one \"1\" \"2.5\")\n# \"2.5\"\n# >>> $(compare_one \"1\" \"2,3\")\n# \"2,3\"\n# >>> $(compare_one \"5,1\" \"6\")\n# \"6\"\n# >>> $(compare_one \"1\" \"1\")\n# \"None\"\n#\n# $1 is an argument\n# $2 is an argument\ncompare_one() {\n    local var1 var2\n    var1=$1\n    var2=$2\n    if [[ $var1 == $var2 ]]; then\n        return\n    fi\n    if [[ $var1 == \"float\" ]]; then\n        return $(float_compare \"$var1\" \"$var2\")\n    elif [[ $var1 == \"int\" ]]; then\n        return $(int_compare \"$var1\" \"$var2\")\n    else\n        return $(string_compare \"$var1\" \"$var2\")\n    fi"], ["#!/bin/bash\n# Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n# Example\n# >>> $(is_equal_to_sum_even \"4\")\n# \"false\"\n# >>> $(is_equal_to_sum_even \"6\")\n# \"false\"\n# >>> $(is_equal_to_sum_even \"8\")\n# \"true\"\n#\n# $1 is an integer\nis_equal_to_sum_even() {\n    local n=\"$1\"\n    local sum_even\n    sum_even=0\n    for I in $(seq 1 $n); do\n        if [[ $i -eq 1 ]]; then\n            sum_even=$((sum_even + $i))\n        else\n            sum_even=$((sum_even + $i + 2))\n        fi\n    done\n    echo \"$sum_even\""], ["#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial \"4\")\n# \"288\"\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    local n=\"$1\"\n    local factorial\n    factorial=\"$(printf \"%d\\n\" \"$n\")\"\n    echo \"$factorial\""], ["#!/bin/bash\n# Given a string text, replace all spaces in it with underscores, \n# and if a string has more than 2 consecutive spaces, \n# then replace all consecutive spaces with - \n# >>> $(fix_spaces \" Example\")\n# \"Example\"\n# >>> $(fix_spaces \" Example 1\")\n# \"Example_1\"\n# >>> $(fix_spaces \" Example 2\")\n# \"_Example_2\"\n# >>> $(fix_spaces \" Example 3\")\n# \"_Example-3\"\n#\n# $1 is a string\nfix_spaces() {\n    local text=$1\n    local spaces_count=0\n    for word in $(echo \"$text\" | tr ' ' '_'); do\n        spaces_count=$((spaces_count + 1))\n        if [[ $spaces_count -gt 2 ]]; then\n            word=\"${word// /-}\"\n        fi\n    done\n    echo \"$word\""], ["#!/bin/bash\n# Create a function which takes a string representing a file's name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n# A file's name is considered to be valid if and only if all the following conditions \n# are met:\n# - There should not be more than three digits ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring before the dot should not be empty, and it starts with a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n    local file_name=$1\n    local file_name_len=${#file_name}\n    local file_name_start=${file_name:0:1}\n    local file_name_end=${file_name:1:1}\n    local file_name_after_dot=${file_name:${file_name_start}:-1}\n    local file_name_contains_dot=false\n    local file_name_contains_letter=false\n    local file_name_contains_letter_start=${file_name_contains_letter:0:1}\n    local file_name_contains_letter_end=${file_name_contains_letter:1:1}\n    local file_name_contains_letter_after_dot=${file_name_contains_letter:${file_name_end}:-1}\n    local file_name_contains_letter_after_dot_start=${file_name_contains_letter_after_dot:0:1}\n    local file_name_contains_letter_after_dot_end=${file_name_contains_letter_after_dot:1:1}\n    if [[ $file_name_len -lt 3 ]]; then\n        return \"No\""], ["#!/bin/bash\n# \"\n# This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n# multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n# change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n# Examples:\n# >>> lst\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> lst\n# []\n# >>> lst\n# ['\"-1\"', '\"-5\"', '\"2\"', '\"-1\"', '\"-5\"']\n#\n# $1 is a space-separated list\nsum_squares() {\n  local lst=\"$1\"\n  local sum=0\n  for I in \"${lst[@]}\"\n  do\n    if [[ $i -eq 0 ]]\n    then\n      sum=$((sum + $i))\n    elif [[ $i -eq 1 ]]\n    then\n      sum=$((sum + $i * $i))\n    elif [[ $i -eq 2 ]]\n    then\n      sum=$((sum + $i * $i * $i))\n    else\n      sum=$((sum + $i * $i * $i * $i))\n    fi\n  done\n  echo $sum"], ["#!/bin/bash\n# You are given a string representing a sentence,\n# the sentence contains some words separated by a space,\n# and you have to return a string that contains the words from the original sentence,\n# whose lengths are prime numbers,\n# the order of the words in the new string should be the same as the original one.\n# Example 1:\n# >>> $(words_in_sentence \"This is a test\")\n# \"is\"\n# Example 2:\n# >>> $(words_in_sentence \"lets go for swimming\")\n# \"go for\"\n# Constraints:\n# * 1 <= len(sentence) <= 100\n# * sentence contains only letters\n#\n# $1 is a string\nwords_in_sentence() {\n  local sentence=\"$1\"\n  local words=\"\"\n  local I\n  for I in $(seq 1 $#); do\n    words=\"$words $sentence[${i}]:\"\n  done\n  echo \"$words\""], ["#!/bin/bash\n# Your task is to implement a function that will simplify the expression\n# x * n. The function returns true if x * n evaluates to a whole number and false\n# otherwise. Both x and n, are string representation of a fraction, and have the following format,\n# <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n# You can assume that x, and n are valid fractions, and do not have zero as denominator.\n# >>> $(simplify \"1/5\" \"5/1\")\n# \"true\"\n# >>> $(simplify \"1/6\" \"2/1\")\n# \"false\"\n# >>> $(simplify \"7/10\" \"10/2\")\n# \"false\"\n#\n# $1 is a string\n# $2 is a string\nsimplify() {\n  local x=\"$1\"\n  local n=\"$2\"\n  local result\n  result=false\n  if [[ \"$x\" == \"1\" ]]; then\n    result=true\n  elif [[ \"$x\" == \"2\" ]]; then\n    result=true\n  elif [[ \"$x\" == \"3\" ]]; then\n    result=true\n  elif [[ \"$x\" == \"4\" ]]; then\n    result=true\n  elif [[ \"$x\" == \"5\" ]]; then\n    result=true\n  elif [[ \"$x\" == \"6\" ]]; then\n    result=true\n  elif [[ \"$x\" == \"7\" ]]; then\n    result=true\n  elif [[ \"$x\" == \"8\" ]]; then\n    result=true\n  elif [[ \"$x\" == \"9\" ]]; then\n    result=true\n  elif [[ \"$x\" == \"10\" ]]; then\n    result=true\n  elif [[ \"$x\" == \"11\" ]]; then\n    result=true\n  elif [[ \"$x\" == \"12\" ]]; then\n    result=true\n  elif [[ \"$x\" == \"13\" ]]; then\n    result=true\n  elif [[ \"$x\" == \"14\" ]]; then\n    result=true\n  elif [[ \"$x\" == \"15\" ]]; then\n    result"], ["#!/bin/bash\n# Write a function which sorts the given list of integers\n# in ascending order according to the sum of their digits.\n# Note: if there are several items with similar sum of their digits,\n# order them based on their index in original list.\n# For example:\n# >>> $(order_by_points \"1 11 -1 -11 -12\")\n# ['\"-1\"', '\"-11\"', '\"1\"', '\"-12\"', '\"11\"']\n# >>> $(order_by_points \"\")\n# []\n#\n# $1 is a space-separated list\norder_by_points() {\n    local list=\"$1\"\n    local sorted_list\n    local sorted_list_index\n    local sorted_list_length\n    local sorted_list_string\n    local sorted_list_string_length\n    local sorted_list_string_index\n    local sorted_list_string_length_index\n    local sorted_list_string_length_index_2\n    local sorted_list_string_index_2\n    local sorted_list_string_length_index_3\n    local sorted_list_string_index_3\n    local sorted_list_string_length_index_4\n    local sorted_list_string_index_4\n    local sorted_list_string_length_index_5\n    local sorted_list_string_index_5\n    local sorted_list_string_length_index_6\n    local sorted_list_string_index_6\n    local sorted_list_string_length_index_7\n    local sorted_list_string_index_7\n    local sorted_list_string_length_index_8\n    local sorted_list_string_index_8\n    local sorted_list_string_length_index_9\n    local sorted_list_string_index_9\n    local sorted_list_string_length_index_10\n    local sorted_list_string_index_10\n    local sorted_list_string_length_index_11\n    local sorted_list_string_index_11\n    local sorted_list_string_length_index_12\n    local sorted_list_string_index_12\n"], ["#!/bin/bash\n# Write a function that takes an array of numbers as input and returns \n# the number of elements in the array that are greater than 10 and both \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# >>> $(specialFilter \"15 -73 14 -15\")\n# \"1\"\n# >>> $(specialFilter \"33 -2 -3 45 21 109\")\n# \"2\"\n#\n# $1 is a space-separated list\nspecialFilter() {\n    local input=$1\n    local result=0\n    for I in $input; do\n        if [[ $i -gt 10 ]]; then\n            result=$((result + 1))\n        fi\n        if [[ $i -gt 10 && $i -lt 20 ]]; then\n            result=$((result + 1))\n        fi\n        if [[ $i -gt 10 && $i -lt 20 && $i -lt 30 ]]; then\n            result=$((result + 1))\n        fi\n    done\n    echo \"$result\""], ["#!/bin/bash\n# You are given a positive integer n. You have to create an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# >>> $(get_max_triples \"5\")\n# \"1\"\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n    local n=\"$1\"\n    local a=()\n    for ((i=1; i<=n; i++)); do\n        a+=(\"$i\")\n    done\n    local max=0\n    for ((i=1; i<=n; i++)); do\n        if ((i+1)%3==0 || ((i+1)%3==1)); then\n            max=$(($max+${a[i]}+${a[i+1]}+${a[i+2]}+${a[i+3]}+${a[i+4]}+${a[i+5]}+${a[i+6]}+${a[i+7]}+${a[i+8]}+${a[i+9]}+${a[i+10]}+${a[i+11]}+${a[i+12]}+${a[i+13]}+${a[i+14]}+${a[i+15]}+${a[i+16]}+${a[i+17]}+${a[i+18]}+${a[i+19]}+${a[i+20]}+${a[i+21]}+${a[i+22]}+${a[i+23]}+${a[i+24]}+${a[i+25]"], ["#!/bin/bash\n# There are eight planets in our solar system: the closerst to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names as strings planet1 and planet2. \n# The function should return a list containing all planets whose orbits are \n# located between the orbit of planet1 and the orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should return an empty list if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  local planet1=$1\n  local planet2=$2\n  local planet1_name=$(echo \"$planet1\" | tr '[:upper:]' '[:lower:]')\n  local planet2_name=$(echo \"$planet2\" | tr '[:upper:]' '[:lower:]')\n  local planet1_name_lowercase=$(echo \"$planet1_name\" | tr '[:upper:]' '[:lower:]')\n  local planet2_name_lowercase=$(echo \"$planet2_name\" | tr '[:upper:]' '[:lower:]')\n  local planet1_name_uppercase=$(echo \"$planet1_name\" | tr '[:lower:]' '[:upper:]')\n  local planet2_name_uppercase=$(echo \"$planet2_name\" | tr '[:lower:]' '[:upper:]')\n  local planet1_name_lowercase_uppercase=$(echo \"$planet1_name_lowercase\" | tr '[:upper:]' '[:lower:]')\n  local planet2_name_lowercase_uppercase=$(echo \"$"], ["#!/bin/bash\n# Write a function that accepts a list of strings as a parameter,\n# deletes the strings that have odd lengths from it,\n# and returns the resulted list with a sorted order,\n# The list is always a list of strings and never an array of numbers,\n# and it may contain duplicates.\n# The order of the list should be ascending by length of each word, and you\n# should return the list sorted by that rule.\n# If two words have the same length, sort the list alphabetically.\n# The function should return a list of strings in sorted order.\n# You may assume that all words will have the same length.\n# For example:\n# >>> $(list_sort \"aa a aaa\")\n# ['\"aa\"']\n# >>> $(list_sort \"ab a aaa cd\")\n# ['\"ab\"', '\"cd\"']\n#\n# $1 is a space-separated list\nsorted_list_sum() {\n  local list=\"$1\"\n  local sorted_list\n  sorted_list=$(echo \"$list\" | sort -n | uniq)\n  echo \"${sorted_list}\""], ["#!/bin/bash\n# A simple program which should return the value of x if n is \n# a prime number and should return the value of y otherwise.\n# Examples:\n# >>> $(x_or_y \"7\" \"34\" \"12\")\n# \"34\"\n# >>> $(x_or_y \"15\" \"8\" \"5\")\n# \"5\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nx_or_y() {\n  local x y\n  read -r x y <<< \"$1\"\n  if [ \"$2\" -eq 1 ] && [ \"$3\" -eq 1 ]; then\n    echo \"$x\"\n  else\n    echo \"$y\"\n  fi"], ["#!/bin/bash\n# Given a list of numbers, return the sum of squares of the numbers\n# in the list that are odd. Ignore numbers that are negative or not integers.\n# >>> $(double_the_difference \"1 3 2 0\")\n# \"10\"\n# >>> $(double_the_difference \"-1 -2 0\")\n# \"0\"\n# >>> $(double_the_difference \"9 -2\")\n# \"81\"\n# >>> $(double_the_difference \"0\")\n# \"0\"\n# If the input list is empty, return 0.\n#\n# $1 is a space-separated list\ndouble_the_difference() {\n  local list=\"$1\"\n  local sum=0\n  for I in \"${list[@]}\"\n  do\n    if [[ \"$i\" -eq 0 ]]\n    then\n      continue\n    fi\n    sum+=\"$i\"\n  done\n  echo \"$sum\""], ["#!/bin/bash\n# I think we all remember that feeling when the result of some long-awaited\n# event is finally known. The feelings and thoughts you have at that moment are\n# definitely worth noting down and comparing.\n# Your task is to determine if a person correctly guessed the results of a number of matches.\n# You are given two arrays of scores and guesses of equal length, where each index shows a match. \n# Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n# the value is 0, and if not, the value is the absolute difference between the guess and the score.\n# example:\n# >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\")\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncompare() {\n    local scores=\"$1\"\n    local guesses=\"$2\"\n    local result=0\n    local i\n    for ((i=0; i<${#scores[@]}; i++)); do\n        if [[ \"${scores[$i]}\" -eq \"${guesses[$i]}\" ]]; then\n            result=$((result + 0))\n        else\n            result=$((result + 1))\n        fi\n    done\n    return $result"], ["#!/bin/bash\n# You will be given the name of a class (a string) and a list of extensions.\n# The extensions are to be used to load additional classes to the class. The\n# strength of the extension is as follows: Let CAP be the number of the uppercase\n# letters in the extension's name, and let SM be the number of lowercase letters \n# in the extension's name, the strength is given by the fraction CAP - SM. \n# You should find the strongest extension and return a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more extensions with the same strength, you should\n# choose the one that comes first in the list.\n# For example, if you are given \"Slices\" as the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is a space-separated list\nStrongest_Extension() {\n    local class=\"$1\"\n    local extensions=\"$2\"\n    local strength\n    local strongest_extension\n    local best_extension\n    local best_extension_strength\n    local best_extension_name\n\n    for extension in $extensions; do\n        if [[ $extension == $class ]]; then\n            strength=$(echo \"$extension\" | tr '[:upper:]' '[:lower:]')\n            if [[ $strength -gt $best_extension_strength ]]; then\n                best_extension_strength=$strength\n                best_extension_name=$(echo \"$extension\" | tr '[:upper:]' '[:lower:]')\n                best_extension=$(echo \"$extension\" | tr '[:upper:]' '[:lower:]')\n            fi\n        fi\n    done\n\n    if [[ $best_extension_strength -gt 0 ]]; then\n        return \"$"], ["#!/bin/bash\n# You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n# >>> $(cycpattern_check \"abcd\" \"abd\")\n# \"false\"\n# >>> $(cycpattern_check \"hello\" \"ell\")\n# \"true\"\n# >>> $(cycpattern_check \"whassup\" \"psus\")\n# \"false\"\n# >>> $(cycpattern_check \"abab\" \"baa\")\n# \"true\"\n# >>> $(cycpattern_check \"efef\" \"eeff\")\n# \"false\"\n# >>> $(cycpattern_check \"himenss\" \"simen\")\n# \"true\"\n#\n# $1 is a string\n# $2 is a string\ncycpattern_check() {\n    local first_word=$1\n    local second_word=$2\n    local rotations=()\n    for I in $(seq 1 10); do\n        rotations+=( $(echo \"$first_word\" | tr 'a-z' 'A-Z') $i)\n    done\n    for I in $(seq 1 10); do\n        rotations+=( $(echo \"$second_word\" | tr 'a-z' 'A-Z') $i)\n    done\n    for I in $(seq 1 10); do\n        if [[ \"$rotations\" == \"$second_word\"* ]]; then\n            return 1\n        fi\n    done\n    return 0"], ["#!/bin/bash\n# Given an integer. return a list that has the number of even and odd digits respectively.\n# Example:\n# >>> $(even_odd_count \"-12\")\n# ['\"1\"', '\"1\"']\n# >>> $(even_odd_count \"123\")\n# ['\"1\"', '\"2\"']\n#\n# $1 is an integer\neven_odd_count() {\n  local num=\"$1\"\n  local even_odd_list=()\n  local even_odd_count=0\n  while [[ $num -ge 0 ]]; do\n    local even_odd_count_num=$(echo \"$num\" | awk '{print $1}')\n    local even_odd_count_str=$(echo \"$even_odd_count_num\" | awk '{print $1}')\n    local even_odd_count_str_split=$(echo \"$even_odd_count_str\" | awk '{print $2}')\n    local even_odd_count_str_split_split=$(echo \"$even_odd_count_str_split\" | awk '{print $2}')\n    local even_odd_count_str_split_split_split=$(echo \"$even_odd_count_str_split_split\" | awk '{print $2}')\n    local even_odd_count_str_split_split_split_split=$(echo \"$even_odd_count_str_split_split_split\" | awk '{print $2}')\n    local even_odd_count_str_split_split_split_split_split=$(echo \"$even_odd_count_str_split_split_split_split_split\" | awk '{print $2}')\n    local even_odd_count_str_split_split_split_split_split_split_split=$(echo \"$even_odd_count_str_split_split_split_split_split_split_split\" | awk '{print $2}')\n    local even_odd_count_str_split_split_split_split_split_split_split_split_split=$(echo \"$even_odd_count_str_split_split_split_split_split_split_split_split_split_split\" | awk '{print $2}')\n    local even"], ["#!/bin/bash\n# Given a positive integer, obtain its roman numeral equivalent as a string,\n# and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n# >>> $(int_to_mini_roman \"19\")\n# \"xix\"\n# >>> $(int_to_mini_roman \"152\")\n# \"clii\"\n# >>> $(int_to_mini_roman \"426\")\n# \"cdxxvi\"\n#\n# $1 is an integer\nint_to_mini_roman() {\n  local num=\"$1\"\n  local min_roman=\"I\"\n  local max_roman=\"X\"\n  local roman=\"\"\n\n  if [ \"$num\" -lt 10 ]; then\n    min_roman=\"$min_roman$num\"\n  else\n    max_roman=\"$max_roman$num\"\n  fi\n\n  for I in $(seq 1 $num); do\n    roman=\"$roman$min_roman$i\"\n  done\n\n  echo \"$roman\""], ["#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return true if the three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# >>> $(right_angle_triangle \"3\" \"4\" \"5\")\n# \"true\"\n# >>> $(right_angle_triangle \"1\" \"2\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nright_angle_triangle() {\n  local side1=$1\n  local side2=$2\n  local side3=$3\n  local side1_angle=$((side1 * 180 / 3))\n  local side2_angle=$((side2 * 180 / 3))\n  local side3_angle=$((side3 * 180 / 3))\n  local side1_angle_diff=$((side1_angle - side2_angle))\n  local side2_angle_diff=$((side2_angle - side3_angle))\n  local side3_angle_diff=$((side3_angle - side1_angle))\n  local side1_angle_diff_squared=$((side1_angle_diff * side1_angle_diff))\n  local side2_angle_diff_squared=$((side2_angle_diff * side2_angle_diff))\n  local side3_angle_diff_squared=$((side3_angle_diff * side3_angle_diff))\n  local side1_angle_squared=$((side1_angle * side1_angle))\n  local side2_angle_squared=$((side2_angle * side2_angle))\n  local side3_angle_squared=$((side3_angle * side3_angle))\n  local side1_squared=$((side1_angle_squared + side2_angle_squared + side3_angle_squared))\n  local side2_squared=$((side2_angle_squared + side3_angle_squared))\n  local side3_squared=$((side3_"], ["#!/bin/bash\n# Write a function that accepts a list of strings.\n# The list contains different words. Return the word with maximum number\n# of unique characters. If multiple strings have maximum number of unique\n# characters, return the one which comes first in lexicographical order.\n# >>> $(find_max \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated list\nfind_max() {\n  local list=$1\n  local max_len=0\n  local max_char=0\n  local max_str=\"\"\n  for word in $list; do\n    local len=$(echo \"$word\" | wc -c)\n    if [ $len -gt $max_len ]; then\n      max_len=$len\n      max_char=$word\n      max_str=\"$word\"\n    fi\n  done\n  echo \"$max_str\""], ["#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain number of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n# you should return an array of [ total number of eaten carrots after your meals,\n# the number of carrots left after your meals ]\n# if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n# >>> $(eat \"5\" \"6\" \"10\")\n# ['\"11\"', '\"4\"']\n# >>> $(eat \"4\" \"8\" \"9\")\n# ['\"12\"', '\"1\"']\n# >>> $(eat \"1\" \"10\" \"10\")\n# ['\"11\"', '\"0\"']\n# >>> $(eat \"2\" \"11\" \"5\")\n# ['\"7\"', '\"0\"']\n# Variables:\n# @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n# the number of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number=$1\n  local need=$2\n  local remaining=$3\n  local total_needed=0\n  local total_eaten=0\n  local total_remaining=0\n  local total_eaten_carrots=0\n  local total_remaining_carrots=0\n  local total_needed_carrots=0\n  local total_eaten_carrots_left=0\n  local total_remaining_carrots_left=0\n  local total_needed_carrots_left=0\n  local total_eaten_car"], ["#!/bin/bash\n# Given two lists operator, and operand. The first list has basic algebra operations, and \n# the second list is a list of integers. Use the two given lists to build the algebric \n# expression and return the evaluation of this expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is equal to the length of operand list minus one.\n# Operand is a list of of non-negative integers.\n# Operator list has at least one operator, and operand list has at least two operands.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ndo_algebra() {\n    local operator=$1\n    shift\n    local operand=$1\n    shift\n    local result\n    result=\"$(echo \"$operand\" | tr '[:upper:]' '[:lower:]')\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${result// /}\"\n    result=\"${"], ["#!/bin/bash\n# You are given a string s.\n# if s[i] is a letter, reverse its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string contains no letters, reverse the string.\n# The function should return the resulted string.\n# Examples\n# >>> $(solve \"1234\")\n# \"4321\"\n# >>> $(solve \"ab\")\n# \"AB\"\n# >>> $(solve \"#a@C\")\n# \"#A@c\"\n#\n# $1 is a string\nsolve() {\n  local str=$1\n  local result=\"\"\n  for ((i=0; i<${#str}; i++)); do\n    if [[ ${str:i:1} == [a-z] ]]; then\n      result+=\"$(echo \"${str:i:1}\" | tr '[:lower:]' '[:upper:]')\"\n    else\n      result+=\"$(echo \"${str:i:1}\" | tr '[:upper:]' '[:lower:]')\"\n    fi\n  done\n  echo \"${result}\""], ["#!/bin/bash\n# Given a string 'text', return its md5 hash equivalent string.\n# If 'text' is an empty string, return None.\n# >>> $(string_to_md5 \"Hello world\")\n# \"3e25960a79dbc69b674cd4ec67a72c62\"\n#\n# $1 is a string\nstring_to_md5() {\n  local text=\"$1\"\n  if [[ -z \"$text\" ]]; then\n    return\n  fi\n  echo md5sum \"$text\""], ["#!/bin/bash\n# Given two positive integers a and b, return the even digits between a\n# and b, in ascending order.\n# For example:\n# >>> $(generate_integers \"2\" \"8\")\n# ['\"2\"', '\"4\"', '\"6\"', '\"8\"']\n# >>> $(generate_integers \"8\" \"2\")\n# ['\"2\"', '\"4\"', '\"6\"', '\"8\"']\n# >>> $(generate_integers \"10\" \"14\")\n# []\n#\n# $1 is an integer\n# $2 is an integer\ngenerate_integers() {\n  local a=$1\n  local b=$2\n  local result=()\n  local i\n  for ((i=a; i<=b; i++)); do\n    result+=(\"${i}\")\n  done\n  return ${#result[@]}"]]