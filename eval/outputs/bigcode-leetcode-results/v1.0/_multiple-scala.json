[["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if in given list of numbers, are any two numbers closer to each other than\n    // given threshold.\n    // >>> hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    // (false)\n    // >>> hasCloseElements((List[Float](1.0f.toFloat, 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n    // (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float) : Boolean = {\n        val sortedNumbers = numbers.sorted\n        var i = 0\n        var j = 0\n        while (i < sortedNumbers.length && j < sortedNumbers.length) {\n            if (sortedNumbers(i) - sortedNumbers(j) > threshold) {\n                i += 1\n            } else if (sortedNumbers(i) - sortedNumbers(j) < -threshold) {\n                j += 1\n            } else {\n                return false\n            }\n        }\n        true"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        val groups = paren_string.split(\"\\\\(\").toList\n        val result = groups.map(group => {\n            val open_braces = group.split(\"\\\\(\").toList\n            val close_braces = group.split(\"\\\\)\").toList\n            val result_list = open_braces.map(open_brace => {\n                val close_braces_list = close_braces.filter(close_brace => open_brace == close_brace)\n                val result_list_list = close_braces_list.map(close_brace => {\n                    val result_list = open_brace + close_brace\n                    result_list\n                })\n                result_list :: result_list_list\n            })\n            result_list\n        })\n        result"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive floating point number, it can be decomposed into\n    // and integer part (largest integer smaller than given number) and decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal part of the number.\n    // >>> truncateNumber((3.5f))\n    // (0.5f)\n    def truncateNumber(number : Float) : Float = {\n        val decimal = number.toInt\n        val integer = decimal / 10\n        val decimalRemainder = decimal % 10\n        if (integer == 0) {\n            decimalRemainder\n        } else {\n            decimalRemainder + integer\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You're given a list of deposit and withdrawal operations on a bank account that starts with\n    // zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    // at that point function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations : List[Long]) : Boolean = {\n        val account = operations.head\n        val balance = account.toLong\n        val operationsList = operations.tail\n        val operationsListSize = operationsList.size\n        if (balance == 0) {\n            operationsList.headOption.exists(_.toLong > 0)\n        } else {\n            operationsList.headOption.exists(_.toLong < 0)\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def meanAbsoluteDeviation(numbers : List[Float]) : Float = {\n        val mean = numbers.sum / numbers.length\n        numbers.map(x => x - mean).sum / numbers.length"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    // (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n        val list = numbers.toList\n        val result = new mutable.ListBuffer[Long]()\n        var i = 0\n        while (i < list.length) {\n            result += list(i)\n            i += 1\n        }\n        result += delimeter\n        result.reverse"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"(()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] = {\n        val parens = paren_string.split(\"\\\\s+\")\n        val nested_parens = mutable.ListBuffer.empty[Long]\n        for (paren <- parens) {\n            val depth = 1\n            while (paren.startsWith(\"(\")) {\n                depth += 1\n                paren = paren.drop(1)\n            }\n            nested_parens += depth\n        }\n        nested_parens.toList"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Filter an input list of strings only for ones that contain given substring\n    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\")), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings : List[String], substring : String) : List[String] = {\n        val filteredStrings = strings.filter(_.contains(substring))\n        filteredStrings.toList"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l, (acc, num) => acc + num)\n        val product = numbers.foldLeft(1l, (acc, num) => acc * num)\n        (sum, product)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // From a given list of integers, generate a list of rolling maximum element found until given moment\n    // in the sequence.\n    // >>> rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong)))\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))\n    def rollingMax(numbers : List[Long]) : List[Long] = {\n        var max = numbers(0)\n        var maxIndex = 0\n        var maxValue = numbers(0)\n        var maxValueIndex = 0\n        for (i <- numbers.indices) {\n            val current = numbers(i)\n            if (current > maxValue) {\n                maxValue = current\n                maxIndex = i\n                maxValueIndex = maxIndex\n            }\n            if (current > max) {\n                max = current\n                maxIndex = i\n                maxValue = current\n                maxValueIndex = maxIndex\n            }\n        }\n        List(max, maxValue, maxValueIndex)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Find the shortest palindrome that begins with a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n    // - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string : String) : String = {\n        val longestPostfix = findLongestPostfix(string)\n        val prefix = string.reverse\n        val suffix = prefix.reverse\n        val palindrome = prefix + suffix\n        palindrome.reverse"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    def stringXor(a : String, b : String) : String = {\n        val aArr = a.split(\"\")\n        val bArr = b.split(\"\")\n        var result = \"\"\n        for (i <- 0 until aArr.length) {\n            result = result + (aArr(i) + bArr(i) - 1)\n        }\n        result"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Out of list of strings, return the longest one. Return the first one in case of multiple\n    // strings of the same length. Return None in case the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // Some(\"a\")\n    // >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // Some(\"ccc\")\n    def longest(strings : List[String]) : Option[String] = {\n        val sortedStrings = strings.sorted\n        sortedStrings.length match {\n            case 0 => None\n            case 1 => Some(sortedStrings(0))\n            case _ => Some(sortedStrings(sortedStrings.length - 1))\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        val gcd = scala.math.max(a, b)\n        if (a == b) gcd else gcd % a"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of all prefixes from shortest to longest of the input string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\", \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n        val prefixes = new mutable.HashSet[String]()\n        string.split(\"\").foreach(prefixes += _)\n        prefixes.toList"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long) : String = {\n        val s = new StringBuilder\n        for (i <- 0 until n) {\n            s.append(i.toString)\n            s.append(\" \")\n        }\n        s.toString"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n    def countDistinctCharacters(string : String) : Long = {\n        val count = mutable.HashMap[Char, Long]()\n        string.foreach(c => count.update(c, count.getOrElse(c, 0L) + 1L))\n        count.values.sum"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_lines = music_string.split(\"\\\\|\")\n        val notes = music_lines.map(_.toLowerCase.split(\"\\\\|\"))\n        val notes_list = notes.map(_.map(_.toLong))\n        notes_list"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string : String, substring : String) : Long = {\n        var count = 0\n        var i = 0\n        while (i < string.length) {\n            var j = 0\n            while (j < substring.length) {\n                if (string(i) == substring(j)) {\n                    count += 1\n                    j += 1\n                } else {\n                    break\n                }\n            }\n            i += 1\n        }\n        count"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"one three five\")\n    def sortNumbers(numbers : String) : String = {\n        val sorted = numbers.split(\",\").map(_.toInt).sortWith(_ > _).reverse.mkString(\",\")\n        sorted"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n    // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n    // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float, Float] = {\n        val sortedNumbers = numbers.sorted\n        val min = sortedNumbers.min\n        val max = sortedNumbers.max\n        val (minX, minY) = (min, min)\n        val (maxX, maxY) = (max, max)\n        val (minX, maxY) = (minX, maxY)\n        val (minX, maxY) = (minX, maxY)\n        val (minX, maxY) = (minX, maxY)\n        val (minX, maxY) = (minX, maxY)\n        val (minX, maxY) = (minX, maxY)\n        val (minX, maxY) = (minX, maxY)\n        val (minX, maxY) = (minX, maxY)\n        val (minX, maxY) = (minX, maxY)\n        val (minX, maxY) = (minX, maxY)\n        val (minX, maxY) = (minX, maxY)\n        val (minX, maxY) = (minX, maxY)\n        val ("], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given list of numbers (of at least two elements), apply a linear transform to that list,\n    // such that the smallest number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat)))\n    // (List[Float](0.0f.toFloat, 0.25f.toFloat, 0.5f.toFloat, 0.75f.toFloat, 1.0f.toFloat))\n    def rescaleToUnit(numbers : List[Float]) : List[Float] = {\n        val min = numbers.min\n        val max = numbers.max\n        val scale = max - min\n        numbers.map(_.toFloat / scale)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Filter given list of any scalathon values only for integers\n    // >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values : List[Any]) : List[Long] = {\n        val filtered = values.filter(_.isInstanceOf[Long])\n        filtered.map(_.asInstanceOf[Long])"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n    // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string : String) : Long = {\n        val str = string.toLowerCase\n        str.length"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given number n, find the largest number that divides n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n : Long) : Long = {\n        val max = n\n        var i = 1\n        while (i <= max / 2) {\n            if (i * i <= max) {\n                val remainder = max / i\n                if (remainder % i == 0) {\n                    return i\n                }\n            }\n            i += 1\n        }\n        max"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = mutable.ListBuffer[Long]()\n        var i = 1\n        while (i <= n) {\n            if (i % n == 0) {\n                factors += i\n                i = i / n\n            } else {\n                i += 1\n            }\n        }\n        factors.toList"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // From a list of integers, remove all elements that occur more than once.\n    // Keep order of elements left the same as in the input.\n    // >>> removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 3l.toLong, 4l.toLong))\n    def removeDuplicates(numbers : List[Long]) : List[Long] = {\n        val sorted = numbers.sorted\n        if (sorted.length == 1) sorted.head\n        else {\n            val result = sorted.filterNot(_.equals(sorted(sorted.length - 1)))\n            result.toList\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    def flipCase(string : String) : String = {\n        val result = string.toLowerCase\n        result.replaceAll(\"[a-z]\", \"[\" + result.toUpperCase + \"]\")"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n        val sb = new StringBuilder\n        strings.foreach(sb.append(_))\n        sb.toString"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Filter an input list of strings only for ones that start with a given prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\")), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings : List[String], prefix : String) : List[String] = {\n        val prefixList = List(prefix)\n        strings.filter(_.startsWith(prefixList: _*))"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return only positive numbers in the list.\n    // >>> getPositive((List[Long](-1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\n    // (List[Long](2l.toLong, 5l.toLong, 6l.toLong))\n    // >>> getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))\n    def getPositive(l : List[Long]) : List[Long] = {\n        l.filterNot(_ < 0)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return true if a given number is prime, and false otherwise.\n    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n : Long) : Boolean = {\n        if (n == 1) false\n        else if (n % 2 == 0) false\n        else if (n > 1 && n % 2 == 0) true\n        else isPrime(n / 2)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // This function takes a list l and returns a list l' such that\n    // l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    // to the values of the corresponding indicies of l, but sorted.\n    // >>> sortThird((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    // >>> sortThird((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 2l.toLong)))\n    // (List[Long](2l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 5l.toLong))\n    def sortThird(l : List[Long]) : List[Long] = {\n        val sorted = l.sortWith((a, b) => a % 3 == b % 3)\n        sorted.sortWith((a, b) => a % 3 == b % 3)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n        val sorted = l.sorted\n        sorted.toList"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l : List[Long]) : Long = {\n        var max = l(0)\n        for (i <- 1 to l.length - 1) {\n            if (l(i) > max) {\n                max = l(i)\n            }\n        }\n        max"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n    def fizzBuzz(n : Long) : Long = {\n        val fizz = 1l\n        val buzz = 2l\n        val fizzBuzz = 3l\n        val fizzBuzzCount = mutable.HashMap[Long, Long]()\n        val fizzBuzzCount2 = mutable.HashMap[Long, Long]()\n        val fizzBuzzCount3 = mutable.HashMap[Long, Long]()\n        val fizzBuzzCount4 = mutable.HashMap[Long, Long]()\n        val fizzBuzzCount5 = mutable.HashMap[Long, Long]()\n        val fizzBuzzCount6 = mutable.HashMap[Long, Long]()\n        val fizzBuzzCount7 = mutable.HashMap[Long, Long]()\n        val fizzBuzzCount8 = mutable.HashMap[Long, Long]()\n        val fizzBuzzCount9 = mutable.HashMap[Long, Long]()\n        val fizzBuzzCount10 = mutable.HashMap[Long, Long]()\n        val fizzBuzzCount11 = mutable.HashMap[Long, Long]()\n        val fizzBuzzCount12 = mutable.HashMap[Long, Long]()\n        val fizzBuzzCount13 = mutable.HashMap[Long, Long]()\n        val fizzBuzzCount14 = mutable.HashMap[Long, Long]()\n        val fizzBuzzCount15 = mutable.HashMap[Long, Long]()\n        val fizzBuzzCount16 = mutable.HashMap[Long, Long]()\n        val fizzBuzzCount17 = mutable.HashMap[Long, Long]()\n        val fizzBuzzCount18 = mutable.HashMap[Long, Long]()\n        val fizzBuzzCount"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // This function takes a list l and returns a list l' such that\n    // l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    // to the values of the even indicies of l, but sorted.\n    // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong, 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val sorted = l.sortWith((a, b) => a > b)\n        sorted.filter(_ % 2 == 1).map(_ -> sorted.head)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    // >>> primeFib((1l))\n    // (2l)\n    // >>> primeFib((2l))\n    // (3l)\n    // >>> primeFib((3l))\n    // (5l)\n    // >>> primeFib((4l))\n    // (13l)\n    // >>> primeFib((5l))\n    // (89l)\n    def primeFib(n : Long) : Long = {\n        if (n < 2) {\n            throw new Exception(\"n must be greater than 2\")\n        }\n        val fib = (1l, 1l)\n        var i = 2l\n        while (i <= n) {\n            fib = (fib._1 + fib._2, fib._1)\n            i += 1l\n        }\n        fib._1"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // triples_sum_to_zero takes a list of integers as an input.\n    // it returns true if there are three distinct elements in the list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> triplesSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (true)\n    // >>> triplesSumToZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> triplesSumToZero((List[Long](2l.toLong, 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong)))\n    // (true)\n    // >>> triplesSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val n = l.length\n        if (n < 3) {\n            return false\n        }\n        val sum = l.sum\n        if (sum == 0) {\n            return true\n        }\n        val sum2 = sum - 2 * l(n - 2)\n        if (sum2 == 0) {\n            return true\n        }\n        val sum3 = sum2 - 3 * l(n - 3)\n        if (sum3 == 0) {\n            return true\n        }\n        val sum4 = sum3 - 4 * l(n - 4)\n        if (sum4 == 0) {\n            return true\n        }\n        val sum5 = sum4 - 5 * l(n - 5)\n        if (sum5 == 0) {\n            return true\n        }\n        val"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = List.fill(n)(new Car)\n        var collisions = 0L\n        while (collisions < n) {\n            val left = cars(0)\n            val right = cars(1)\n            val leftSpeed = left.speed\n            val rightSpeed = right.speed\n            if (leftSpeed > rightSpeed) {\n                left.moveRight\n                collisions += 1\n            } else {\n                right.moveLeft\n                collisions += 1\n            }\n        }\n        collisions"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList(l : List[Long]) : List[Long] = {\n        val n = l.size\n        val res = new Array[Long](n)\n        var i = 0\n        while (i < n) {\n            res(i) = l(i)\n            i += 1\n        }\n        res"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it returns true if there are two distinct elements in the list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong, 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n    // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l : List[Long]) : Boolean = {\n        val n = l.size\n        if (n == 2) {\n            val a = l(0) + l(1)\n            val b = l(1) + l(2)\n            if (a == b) true else false\n        } else {\n            false\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Change numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\")\n    def changeBase(x : Long, base : Long) : String = {\n        val result = new StringBuilder\n        var i = 0\n        while (i < x.toInt) {\n            result.append(base.toInt - 1 - i % base)\n            i += 1\n        }\n        result.toString"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given length of a side and high return area for a triangle.\n    // >>> triangleArea((5l), (3l))\n    // (7.5f)\n    def triangleArea(a : Long, h : Long) : Float = {\n        val a_h = a * h\n        val a_h_2 = a_h * a_h\n        val a_h_3 = a_h_2 * a_h\n        val a_h_4 = a_h_3 * a_h\n        val a_h_5 = a_h_4 * a_h\n        val a_h_6 = a_h_5 * a_h\n        val a_h_7 = a_h_6 * a_h\n        val a_h_8 = a_h_7 * a_h\n        val a_h_9 = a_h_8 * a_h\n        val a_h_10 = a_h_9 * a_h\n        val a_h_11 = a_h_10 * a_h\n        val a_h_12 = a_h_11 * a_h\n        val a_h_13 = a_h_12 * a_h\n        val a_h_14 = a_h_13 * a_h\n        val a_h_15 = a_h_14 * a_h\n        val a_h_16 = a_h_15 * a_h\n        val a_h_17 = a_h_16 * a_h\n        val a_h_18 = a_h_17 * a_h\n        val a_h_19 = a_h_18 * a_h\n        val a_h_20 = a_h_19 * a_h\n        val a_h_21 = a_h_20 * a_h\n        val a_h_22 = a_h_21 * a_h\n        val a_h_23 = a_h_22 * a_h\n        val a_h"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>> fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        val a = 0\n        val b = 1\n        val c = 0\n        var i = 2\n        while (i <= n) {\n            val temp = a\n            a = b\n            b = c\n            c = temp + b\n            i += 1\n        }\n        c"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        val n = l.size\n        if (n == 0) {\n            throw new Exception(\"List is empty\")\n        }\n        if (n == 1) {\n            l(0)\n        } else {\n            val mid = (n / 2).toFloat\n            val left = l.slice(0, mid)\n            val right = l.slice(mid + 1, n)\n            val sum = left.sum + right.sum\n            if (sum % 2 == 0) {\n                left(0)\n            } else {\n                right(0)\n            }\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Checks if given string is a palindrome\n    // >>> isPalindrome((\"\"))\n    // (true)\n    // >>> isPalindrome((\"aba\"))\n    // (true)\n    // >>> isPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> isPalindrome((\"zbcd\"))\n    // (false)\n    def isPalindrome(text : String) : Boolean = {\n        val reversed = text.reverse\n        return text == reversed"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long) : Long = {\n        val nl = n.toLong\n        val pn = p.toLong\n        var res = 1\n        while (res * nl < pn) {\n            res = (res * nl) % pn\n        }\n        res"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    def removeVowels(text : String) : String = {\n        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val result = text.replaceAll(\"[\\\\p{L}\\\\p{N}]\", \"\")\n        result.replaceAll(\"[\\\\p{L}\\\\p{N}\\\\p{M}]\", \"\")"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return true if all numbers in the list l are below threshold t.\n    // >>> belowThreshold((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)), (100l))\n    // (true)\n    // >>> belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (5l))\n    // (false)\n    def belowThreshold(l : List[Long], t : Long) : Boolean = {\n        val n = l.size\n        if (n == 0) false\n        else {\n            val nl = l.toList\n            val nt = nl.take(n - 1).toList\n            val nt2 = nt.take(n - 1).toList\n            val nt3 = nt2.take(n - 1).toList\n            val nt4 = nt3.take(n - 1).toList\n            val nt5 = nt4.take(n - 1).toList\n            val nt6 = nt5.take(n - 1).toList\n            val nt7 = nt6.take(n - 1).toList\n            val nt8 = nt7.take(n - 1).toList\n            val nt9 = nt8.take(n - 1).toList\n            val nt10 = nt9.take(n - 1).toList\n            val nt11 = nt10.take(n - 1).toList\n            val nt12 = nt11.take(n - 1).toList\n            val nt13 = nt12.take(n - 1).toList\n            val nt14 = nt13.take(n - 1).toList\n            val nt15 = nt14.take(n - 1).toList\n            val nt16 = nt15."], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long = {\n        val x_int = x.toInt\n        val y_int = y.toInt\n        x_int + y_int"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        val s0Arr = s0.toArray\n        val s1Arr = s1.toArray\n        val len = s0Arr.length\n        val len1 = s1Arr.length\n        if (len != len1) return false\n        var i = 0\n        while (i < len) {\n            if (s0Arr(i) != s1Arr(i)) return false\n            i += 1\n        }\n        true"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def fib(n : Long) : Long = {\n        if (n < 2) {\n            n\n        } else {\n            fib(n - 1) + fib(n - 2)\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean = {\n        val openBrackets = brackets.split(\"\").filter(_.isDigit)\n        val closeBrackets = brackets.split(\"\").filter(_.isDigit)\n        val openBracketCount = openBrackets.length\n        val closeBracketCount = closeBrackets.length\n        if (openBracketCount != closeBracketCount) {\n            return false\n        }\n        val openBracketIndex = openBrackets.indexOf(\"(\")\n        val closeBracketIndex = closeBrackets.indexOf(\")\")\n        if (openBracketIndex == -1 || closeBracketIndex == -1) {\n            return false\n        }\n        openBracketIndex == closeBracketIndex"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long]) : Boolean = {\n        val n = l.size\n        var i = 0\n        while (i < n) {\n            if (l(i) > l(i + 1)) {\n                return false\n            }\n            i += 1\n        }\n        true"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n    // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 : List[Long]) : List[Long] = {\n        val l1l2 = l1.zip(l2)\n        val sorted = l1l2.sortBy(_._1)\n        sorted.map(_._2)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n    // >>> largestPrimeFactor((2048l))\n    // (2l)\n    def largestPrimeFactor(n : Long) : Long = {\n        var p = 2\n        while (p * p <= n) {\n            if (n % p == 0) {\n                return p\n            }\n            p += 1\n        }\n        throw new Exception(\"n is not a prime\")"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // sum_to_n is a function that sums numbers from 1 to n.\n    // >>> sumToN((30l))\n    // (465l)\n    // >>> sumToN((100l))\n    // (5050l)\n    // >>> sumToN((5l))\n    // (15l)\n    // >>> sumToN((10l))\n    // (55l)\n    // >>> sumToN((1l))\n    // (1l)\n    def sumToN(n : Long) : Long = {\n        var sum = 0L\n        while (n > 0) {\n            sum += n % 10\n            n /= 10\n        }\n        sum"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\")(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean = {\n        val openBrackets = brackets.split(\"\\\\(\").toList\n        val closeBrackets = brackets.split(\"\\\\)\").toList\n        val result = openBrackets.forall(closeBrackets.contains)\n        result"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long] = {\n        val n = xs.size\n        val res = List.fill(n-1)(0l.toLong)\n        res(0) = 1l.toLong\n        for (i <- 1 to n-1) {\n            res(i) = xs(i-1) * res(i-2)\n        }\n        res(n-1) = xs(n-1)\n        res"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n    def fibfib(n : Long) : Long = {\n        if (n == 0) 0l\n        else fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function vowels_count which takes a string representing\n    // a word as input and returns the number of vowels in the string.\n    // Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    // vowel, but only when it is at the end of the given word.\n    // Example:\n    // >>> vowelsCount((\"abcde\"))\n    // (2l)\n    // >>> vowelsCount((\"ACEDY\"))\n    // (3l)\n    def vowelsCount(s : String) : Long = {\n        val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val count = s.filter(vowels.contains(_)).length\n        count"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = Array.fill(x.toInt)(0)\n        var i = 0\n        while (i < x.toInt) {\n            digits(i) = (digits(i) + shift) % 10\n            i += 1\n        }\n        digits.reverse.mkString(\"\")"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Task\n    // Write a function that takes a string as input and returns the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n    // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String) : Long = {\n        val upper = s.toList.map(_.toUpper).filter(_.isDigit).map(_.toInt).toList\n        upper.sum"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // In this task, you will be given a string that represents a number of apples and oranges \n    // that are distributed in a basket of fruit this basket contains \n    // apples, oranges, and mango fruits. Given the string that represents the total number of \n    // the oranges and apples and an integer that represent the total number of the fruits \n    // in the basket return the number of the mango fruits in the basket.\n    // for examble:\n    // >>> fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    // >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n    // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    // (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val fruit = s.split(\",\").map(_.toInt)\n        val apples = fruit(0)\n        val oranges = fruit(1)\n        val mango = fruit(2)\n        val fruits = fruit(3)\n        val total = apples + oranges + mango + fruits\n        val mangoFruits = total - fruits\n        mangoFruits"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // \"Given a list representing a branch of a tree that has non-negative integer nodes\n    // your task is to pluck one of the nodes and return it.\n    // The plucked node should be the node with the smallest even value.\n    // If multiple nodes with the same smallest even value are found return the node that has smallest index.\n    // The plucked node should be returned in a list, [ smalest_value, its index ],\n    // If there are no even values or the given list is empty, return [].\n    // Example 1:\n    // >>> pluck((List[Long](4l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 1l.toLong))\n    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> pluck((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 1l.toLong))\n    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n    // >>> pluck((List[Long]()))\n    // (List[Long]())\n    // Example 4:\n    // >>> pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong, 2l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n    // so we will choose the first zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    def pluck(arr : List[Long]) : List[Long] = {\n        val sortedArr = arr.sort"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    // zero, and has a frequency greater than or equal to the value of the integer itself. \n    // The frequency of an integer is the number of times it appears in the list.\n    // If no such a value exist, return -1.\n    // Examples:\n    // >>> search((List[Long](4l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong)))\n    // (2l)\n    // >>> search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 4l.toLong)))\n    // (3l)\n    // >>> search((List[Long](5l.toLong, 5l.toLong, 4l.toLong, 4l.toLong, 4l.toLong)))\n    // (-1l)\n    def search(lst : List[Long]) : Long = {\n        var max = 0\n        var maxFreq = 0\n        lst.foreach(i => {\n            if (i > max) {\n                max = i\n                maxFreq = i\n            }\n        })\n        maxFreq"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given list of integers, return list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n    def strangeSortList(lst : List[Long]) : List[Long] = {\n        val sorted = lst.sortWith((a, b) => a.compareTo(b) > 0)\n        sorted.reverse"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n        val a_b = a * b\n        val a_c = a * c\n        val b_c = b * c\n        val a_b_c = a_b * b_c\n        val a_c_b = a_c * b\n        val a_b_c_a_c_b_c = a_b_c * a_c_b\n        val a_b_c_a_c_b_c_a_c_b_c = a_b_c_a_c_b_c * a_c_b_c\n        val a_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        val n = q.size\n        if (n == 0) false\n        else {\n            val sum = q.map(_.toLong).sum\n            if (sum > w) false\n            else {\n                val balanced = q.map(_.toLong).sorted.take(n).forall(_ <= sum)\n                balanced\n            }\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list arr of integers, find the minimum number of elements that\n    // need to be changed to make the list palindromic. A palindromic list is a list that\n    // is read the same backwards and forwards. In one change, you can change one element to any other element.\n    // For example:\n    // >>> smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 6l.toLong)))\n    // (4l)\n    // >>> smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 2l.toLong)))\n    // (1l)\n    // >>> smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 1l.toLong)))\n    // (0l)\n    def smallestChange(arr : List[Long]) : Long = {\n        val n = arr.length\n        var min = arr(0)\n        var max = arr(n - 1)\n        for (i <- 1 until n) {\n            if (arr(i) < min) {\n                min = arr(i)\n            }\n            if (arr(i) > max) {\n                max = arr(i)\n            }\n        }\n        min + max"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts two lists of strings and returns the list that has \n    // total number of chars in the all strings of the list less than the other list.\n    // if the two lists have the same number of chars, return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()), (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\", \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] = {\n        val lst1_len = lst1.length\n        val lst2_len = lst2.length\n        val lst1_lst = lst1.toList\n        val lst2_lst = lst2.toList\n        val lst1_lst_len = lst1_lst.length\n        val lst2_lst_len = lst2_lst.length\n        val lst1_lst_len_minus_lst2_lst_len = lst1_lst_len - lst2_lst_len\n        val lst1_lst_len_minus_lst2_lst_len_minus_1 = lst1_lst_len_minus_lst2_lst_len - 1\n        val lst2_lst_len_minus_lst1_lst_len = lst2_lst_len - lst"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    // (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean = {\n        val b = 2\n        val c = 3\n        var d = 5\n        while (d <= a) {\n            if (a % d == 0) {\n                return false\n            }\n            if (a % b == 0) {\n                return false\n            }\n            if (a % c == 0) {\n                return false\n            }\n            d = d + 2\n        }\n        return true"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> isSimplePower((1l), (4l))\n    // (true)\n    // >>> isSimplePower((2l), (2l))\n    // (true)\n    // >>> isSimplePower((8l), (2l))\n    // (true)\n    // >>> isSimplePower((3l), (2l))\n    // (false)\n    // >>> isSimplePower((3l), (1l))\n    // (false)\n    // >>> isSimplePower((5l), (3l))\n    // (false)\n    def isSimplePower(x : Long, n : Long) : Boolean = {\n        val n1 = n.toInt\n        val n2 = x.toInt\n        if (n1 == 0) {\n            return false\n        }\n        if (n2 == 0) {\n            return false\n        }\n        if (n1 == 1) {\n            return true\n        }\n        if (n2 == 1) {\n            return true\n        }\n        if (n1 == 2) {\n            return n2 == 1\n        }\n        if (n2 == 2) {\n            return n1 == 1\n        }\n        if (n1 == 3) {\n            return n2 == 1\n        }\n        if (n1 == 4) {\n            return n2 == 1\n        }\n        if (n1 == 5) {\n            return n2 == 1\n        }\n        if (n1 == 6) {\n            return n2 == 1\n        }\n        if (n1 == 7) {\n            return n2 == 1\n        }\n        if (n1 == 8) {\n            return n2 == 1\n        }\n        if (n1 == 9) {\n            return n2 == 1\n        }\n        if (n"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a : Long) : Boolean = {\n        val b = a.toInt\n        return b * b * b == a"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val numArr = num.toList.map(_.toInt)\n        val numArr2 = numArr.filter(i => i > 0 && i <= 9)\n        val numArr3 = numArr2.filter(i => i % 2 == 0)\n        val numArr4 = numArr3.filter(i => i % 3 == 0)\n        val numArr5 = numArr4.filter(i => i % 5 == 0)\n        val numArr6 = numArr5."], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a number in decimal form and your task is to convert it to\n    // binary format. The function should return a string, with each character representing a binary\n    // number. Each character in the string will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    // The extra characters are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\")\n    def decimalToBinary(decimal : Long) : String = {\n        val binary = \"\"\n        val decimalDigits = decimal.toInt\n        val binaryDigits = decimalDigits.toBinaryString\n        binary = binaryDigits.reverse.mkString(\"\")\n        binary = binary.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse."], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a string s.\n    // Your task is to check if the string is hapscala or not.\n    // A string is hapscala if its length is at least 3 and every 3 consecutive letters are distinct\n    // For example:\n    // >>> isHappy((\"a\"))\n    // (false)\n    // >>> isHappy((\"aa\"))\n    // (false)\n    // >>> isHappy((\"abcd\"))\n    // (true)\n    // >>> isHappy((\"aabb\"))\n    // (false)\n    // >>> isHappy((\"adb\"))\n    // (true)\n    // >>> isHappy((\"xyy\"))\n    // (false)\n    def isHappy(s : String) : Boolean = {\n        var count = 0\n        var isHappy = true\n        var current = s\n        while (isHappy) {\n            val next = current.takeRight(2)\n            if (next.length == 3) {\n                if (next.zip(next.tail).forall(x => x._1 != x._2)) {\n                    count += 1\n                } else {\n                    isHappy = false\n                }\n            } else {\n                count += 1\n            }\n            current = next\n        }\n        count == 0"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        grades.map(g => {\n            val letter = scala.math.floor(g * 100.0 / 4.0).toInt.toString\n            if (letter.length == 1) {\n                letter + \"A\"\n            } else if (letter.length == 2) {\n                letter + \"A+\"\n            } else if (letter.length == 3) {\n                letter + \"A\"\n            } else if (letter.length == 4) {\n                letter + \"A+\"\n            } else {\n                letter + \"A-\"\n            }\n"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a string and returns true if the string\n    // length is a prime number or false otherwise\n    // Examples\n    // >>> primeLength((\"Hello\"))\n    // (true)\n    // >>> primeLength((\"abcdcba\"))\n    // (true)\n    // >>> primeLength((\"kittens\"))\n    // (true)\n    // >>> primeLength((\"orange\"))\n    // (false)\n    def primeLength(string : String) : Boolean = {\n        val length = string.length\n        var i = 0\n        while (i < length) {\n            if (i % 2 == 0) {\n                return false\n            }\n            i += 1\n        }\n        true"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the count of the numbers of n-digit\n    // positive integers that start or end with 1.\n    def startsOneEnds(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < n) {\n            if (i % 10 == 1) {\n                count += 1\n            } else {\n                count += 0\n            }\n            i += 1\n        }\n        count"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> solve((1000l))\n    // (\"1\")\n    // >>> solve((150l))\n    // (\"110\")\n    // >>> solve((147l))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    def solve(N : Long) : String = {\n        val digits = List.range(0, 10)\n        val result = List.range(0, 10)\n        var sum = 0\n        var i = 0\n        while (i < N) {\n            val digit = N - i\n            result(i) = digit.toInt\n            sum += digit\n            i += 1\n        }\n        result.reverse.mkString(\"\")"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty list of integers lst. add the even elements that are at odd indices..\n    // Examples:\n    // >>> add((List[Long](4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong)))\n    // (2l)\n    def add(lst : List[Long]) : Long = {\n        val even = lst.filter(_ % 2 == 0)\n        even.foldLeft(0l)((acc, x) => acc + x)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a string and returns an ordered version of it.\n    // Ordered version of string, is a string where all words (separated by space)\n    // are replaced by a new word where all the characters arranged in\n    // ascending order based on ascii value.\n    // Note: You should keep the order of words and blank spaces in the sentence.\n    // For example:\n    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n        val words = s.split(\" \")\n        val sortedWords = words.sorted\n        val newWords = new Array[String](sortedWords.length)\n        for (i <- 0 until sortedWords.length) {\n            newWords(i) = sortedWords(i).replaceAll(\" \", \"\")\n        }\n        new String(newWords)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    // which is similar to matrix, however, unlike matrices,\n    // each row may contain a different number of columns.\n    // Given lst, and integer x, find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    // Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates of the row by columns in descending order.\n    // Examples:\n    // >>> getRow((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l))\n    // (List[Tuple2[Long, Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))\n    // >>> getRow((List[List[Long]]()), (1l))\n    // (List[Tuple2[Long, Long]]())\n    // >>> getRow((List[List[Long]](List[Long](), List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong))), (3l))\n    // (List[Tuple2[Long, Long]]((2l, 2l)))\n    def getRow(lst : List[List[Long]], x : Long) : List[Tuple2[Long, Long]] = {"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of non-negative integers, return a coscala of the given list after sorting,\n    // you will sort the given list in ascending order if the sum( first index value, last index value) is odd,\n    // or sort it in descending order if the sum( first index value, last index value) is even.\n    // Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> sortArray((List[Long]()))\n    // (List[Long]())\n    // >>> sortArray((List[Long](5l.toLong)))\n    // (List[Long](5l.toLong))\n    // >>> sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    // >>> sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong)))\n    // (List[Long](6l.toLong, 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))\n    def sortArray(array : List[Long]) : List[Long] = {\n        val sortedArray = array.sortWith((a, b) => a.compareTo(b) match {\n            case 1 => b\n            case -1 => a\n            case 0 => a\n        })\n        sortedArray"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\".toList\n        val rotated = (0 until s.length).map(i => (s(i) - 'a').toInt + 2 * i)\n        val encrypted = rotated.map(alphabet(_, 2)).mkString\n        encrypted"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // Write a function next_smallest() that returns the 2nd smallest element of the list.\n    // Return None if there is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n    // Some(2l)\n    // >>> nextSmallest((List[Long](5l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // Some(2l)\n    // >>> nextSmallest((List[Long]()))\n    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n    // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n        lst.sortWith((a, b) => a.compareTo(b) < 0) match {\n            case (a, b) => Some(a)\n            case _ => None\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S : String) : Long = {\n        val words = S.split(\"\\\\.|\\\\?|!\")\n        val count = words.count(_.startsWith(\"I\"))\n        count"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that takes 3 numbers.\n    // Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l, 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    // >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n        val xi = x.toInt\n        val yi = y.toInt\n        val zi = z.toInt\n        (xi == yi && xi == zi) || (xi == zi && xi == yi)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String) : String = {\n        val vowels = List('A', 'E', 'I', 'O', 'U')\n        val vowelIndex = vowels.zipWithIndex.map { case (vowel, index) => (index + vowel.toInt) % 2 }\n        val vowelsInMessage = message.split(\"\").map(_.toLowerCase).filter(vowels.contains(_)).map(_.toUpperCase)\n        val vowelsInMessage2 = vowelsInMessage.map(_.replaceAll(\"[aeiou]\", \"\"))\n        val vowelsInMessage2Index = vowelsInMessage2.zipWithIndex.map { case (vowel, index) => (index + vowel.toInt) % 2 }\n        val vowelsInMessage2Index2 = vowelsInMessage2Index.map(_.toUpperCase)\n        val vowelsInMessage2Index22 = vowelsInMessage2Index2.map(_.replaceAll(\"[aeiou]\", \"\"))\n        val vowelsInMessage2Index222 = vowelsInMessage2Index22.map(_.replaceAll(\"[aeiou]\", \"\"))\n        val vowelsInMessage2Index2222 = vowelsInMessage2Index222.map(_.replaceAll(\"[aeiou]\", \"\"))\n        val vowelsInMessage2Index22222 = vowelsInMessage2Index2222.map(_.replaceAll(\"[aeiou]\","], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a map, return true if all keys are strings in lower \n    // case or all keys are strings in upper case, else return false.\n    // The function should return false is the given map is empty.\n    // Examples:\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String]) : Boolean = {\n        val keys = dict.keys\n        if (keys.size == 0) {\n            return true\n        }\n        val lowerCaseKeys = keys.map(_.toLowerCase)\n        val upperCaseKeys = keys.map(_.toUpperCase)\n        if (lowerCaseKeys.size == 0) {\n            return false\n        }\n        if (upperCaseKeys.size == 0) {\n            return true\n        }\n        val keysSet = lowerCaseKeys.toSet ++ upperCaseKeys.toSet\n        return keysSet.forall(dict.contains(_))"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Implement a function that takes an non-negative integer and returns a list of the first n\n    // integers that are prime numbers and less than n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong, 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def countUpTo(n : Long) : List[Long] = {\n        val list = mutable.ListBuffer[Long]()\n        var count = 0\n        while (count < n) {\n            val num = scala.math.pow(count, 2)\n            if (num <= n) {\n                list += num\n                count += 1\n            }\n        }\n        list.toList"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        val a_digits = a.toString.toList\n        val b_digits = b.toString.toList\n        val result = 0\n        var i = 0\n        while (i < a_digits.length && i < b_digits.length) {\n            val a_digit = a_digits(i)\n            val b_digit = b_digits(i)\n            if (a_digit.isDigit && b_digit.isDigit) {\n                result += a_digit * b_digit\n                i += 1\n            } else if (a_digit.isDigit) {\n                result += a_digit * b_digit\n                i += 1\n            } else {\n                result += a_digit * b_digit\n                i += 1\n            }\n        }\n        result"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string s, count the number of uppercase vowels in even indices.\n    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    // >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        var count = 0\n        var i = 0\n        while (i < s.length) {\n            if (s(i) == 'A' || s(i) == 'a') {\n                count += 1\n            }\n            i += 1\n        }\n        count"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    def closestInteger(value : String) : Long = {\n        val num = value.toLong\n        val min = Long.MinValue\n        val max = Long.MaxValue\n        val min_max = (min, max)\n        val min_num = min_max._1\n        val max_num = min_max._2\n        val num_min = min_num\n        val num_max = max_num\n        val num_min_diff = num_max - num_min\n        val num_max_diff = max_num - num_min\n        val num_min_diff_inv = scala.math.pow(num_min_diff, 2)\n        val num_max_diff_inv = scala.math.pow(num_max_diff, 2)\n        val num_min_diff_inv = scala.math.pow(num_min_diff_inv, 2)\n        val num_max_diff_inv = scala.math.pow(num_max_diff_inv, 2)\n        val num_min_diff_inv_min = scala.math.pow(num_min_diff_inv, 2)\n        val num_max_diff_inv_min = scala.math.pow(num_max_diff_inv, 2)\n        val num_min_diff_inv_max = scala.math.pow("], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val stack = mutable.Stack[Long]()\n        val result = mutable.ListBuffer[Long]()\n        var i = 0\n        while (i < n) {\n            stack.push(i)\n            i += 2\n        }\n        while (stack.nonEmpty) {\n            result += stack.pop()\n        }\n        result.reverse"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n        val words = s.split(\",\")\n        words.map(_.trim)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // This function takes two positive numbers x and y and returns the\n    // biggest even integer number that is in the range [x, y] inclusive. If \n    // there's no such number, then the function should return -1.\n    // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l), (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n        val n = (x + y) / 2\n        if (n % 2 == 0) {\n            n\n        } else {\n            chooseNum(x, n)\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given two positive integers n and m, and your task is to compute the\n    // average of the integers from n through m (including n and m). \n    // Round the answer to the nearest integer and convert that to binary.\n    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l), (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    // >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l), (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String, Long] = {\n        val nl = n.toString\n        val ml = m.toString\n        if (nl.length > ml.length) {\n            val nl = nl.substring(0, ml.length)\n            val ml = ml.substring(0, nl.length)\n            if (nl.length == 0) {\n                Right(s\"0b$ml\")\n            } else {\n                Right(s\"0b$nl\")\n            }\n        } else {\n            Right(s\"0b$ml\")\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of positive integers x. return a sorted list of all \n    // elements that hasn't any even digit.\n    // Note: Returned list should be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong, 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n        val sorted = x.sorted\n        val result = mutable.ListBuffer.empty[Long]\n        for (i <- sorted.indices) {\n            if (i % 2 == 0) {\n                result += sorted(i)\n            }\n        }\n        result.toList"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val sortedArr = arr.sorted\n        val result = sortedArr.map(i => if (i % 10 == 0) \"\" else i.toString)\n        result.reverse"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n    def f(n : Long) : List[Long] = {\n        val result = List.fill(n)(0l)\n        result(0) = 1l\n        result(1) = 1l\n        for (i <- 2 to n) {\n            result(i) = result(i - 1) * i\n        }\n        result"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome(n : Long) : Tuple2[Long, Long] = {\n        val evenOdd = (1 to n).filter(_ % 2 == 0).map(i => (i, i)).toMap\n        (evenOdd.size, evenOdd.size)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function count_nums which takes a list of integers and returns\n    // the number of elements which has a sum of digits > 0.\n    // If a number is negative, then its first signed digit will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    // (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- arr) {\n            if (i > 0) {\n                sum += i.toLong\n            }\n        }\n        sum"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    // numbers in the list will be randomly ordered. Your task is to determine if\n    // it is possible to get a list sorted in non-decreasing order by performing \n    // the following operation on the given list:\n    // You are allowed to perform right shift operation any number of times.\n    // One right shift operation means shifting all elements of the list by one\n    // position in the right direction. The last element of the list will be moved to\n    // the starting position in the list i.e. 0th index. \n    // If it is possible to obtain the sorted list by performing the above operation\n    // then return true else return false.\n    // If the given list is empty then return true.\n    // Note: The given list is guaranteed to have unique elements.\n    // For Example:\n    // >>> moveOneBall((List[Long](3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong, 2l.toLong)))\n    // (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing order can\n    // be achieved for the given list.\n    // >>> moveOneBall((List[Long](3l.toLong, 5l.toLong, 4l.toLong, 1l.toLong, 2l.toLong)))\n    // (false)\n    // Explanation:It is not possible to get non-decreasing order for the given\n    // list by performing any number of right shift operations.\n    def moveOneBall(arr : List[Long]) : Boolean = {\n        val arr1 = arr.map(_.toLong)\n        val arr2 = arr1.map(_.toLong)\n        val arr3 = arr2.map(_.toLong)\n        val arr4 = arr3.map(_.toLong)\n        val arr5 = arr4.map(_.toLong)\n        val arr6 = arr5.map(_.toLong)\n        val"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // In this problem, you will implement a function that takes two lists of numbers,\n    // and determines whether it is possible to perform an exchange of elements\n    // between them to make lst1 a list of only even numbers.\n    // There is no limit on the number of exchanged elements between lst1 and lst2.\n    // If it is possible to exchange elements between the lst1 and lst2 to make\n    // all the elements of lst1 to be even, return \"YES\".\n    // Otherwise, return \"NO\".\n    // For example:\n    // >>> exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (\"YES\")\n    // >>> exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 5l.toLong, 3l.toLong, 4l.toLong)))\n    // (\"NO\")\n    // It is assumed that the input lists will be non-empty.\n    def exchange(lst1 : List[Long], lst2 : List[Long]) : String = {\n        val lst1_length = lst1.length\n        val lst2_length = lst2.length\n        val lst1_even = lst1.filter(_ % 2 == 0)\n        val lst2_even = lst2.filter(_ % 2 == 0)\n        val lst1_even_length = lst1_even.length\n        val lst2_even_length = lst2_even.length\n        if (lst1_length == lst2_length && lst1_even.length == lst2_even.length) {\n            val lst1_even_index = lst1_even.indexWhere(_ % 2 == 0)\n            val lst2_even_index = lst2_even.indexWhere(_ % 2 == 0)\n            if (lst1_"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string representing a space separated lowercase letters, return a map\n    // of the letter with the most repetition and containing the corresponding count.\n    // If several letters have the same occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>> histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String) : Map[String,Long] = {\n        val map = mutable.HashMap[String,Long]()\n        test.split(\"\\\\s+\").foreach(word => {\n            val count = map.getOrElse(word, 0L)\n            map += (word -> count + 1)\n        })\n        map"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Task\n    // We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    // then check if the result string is palindrome.\n    // A string is called palindrome if it reads the same backward as forward.\n    // You should return a tuple containing the result string and true/false for the check.\n    // Example\n    // >>> reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>> reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>> reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n        val sArr = s.toArray\n        val cArr = c.toArray\n        var result = \"\"\n        var isPalindrome = true\n        var i = 0\n        var j = 0\n        while (i < sArr.length && j < cArr.length) {\n            if (sArr(i) == cArr(j)) {\n                result += sArr(i)\n                i += 1\n                j += 1\n            } else {\n                result += sArr(i)\n                i += 1\n            }\n        }\n        if (i == sArr.length) {\n            result += sArr(i)\n            result += cArr(j)\n            result += \" \"\n            result += \"true\"\n        } else {\n            result += sArr(i)\n            result += cArr(j)\n            result += \" \"\n            result += \"false\"\n        }\n        Tuple2(result, isPalindrome)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of strings, where each string consists of only digits, return a list.\n    // Each element i of the output should be \"the number of odd elements in the\n    // string i of the input.\" where all the i's should be replaced by the number\n    // of odd digits in the i'th string of the input.\n    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n        val count = lst.map(_.count(_.isDigit))\n        val oddCount = count.filter(_ % 2 == 1).map(_ + \" odd\")\n        oddCount.filter(_ % 2 == 1).map(_ + \" even\")"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers nums, find the minimum sum of any non-empty sub-list\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    // >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    // (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val numsList = nums.toList\n        var minSum = Long.MaxValue\n        var minIndex = -1\n        for (i <- numsList.indices) {\n            val num = numsList(i)\n            if (numsList(i) > 0) {\n                val sum = num - numsList(i)\n                if (minSum > sum) {\n                    minSum = sum\n                    minIndex = i\n                }\n            }\n        }\n        minSum"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a rectangular grid of wells. Each row represents a single well,\n    // and each 1 in a row represents a single unit of water.\n    // Each well has a corresponding bucket that can be used to extract water from it, \n    // and all buckets have the same capacity.\n    // Your task is to use the buckets to empty the wells.\n    // Output the number of times you need to lower the buckets.\n    // Example 1:\n    // >>> maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\n    // (6l)\n    // Example 2:\n    // >>> maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (2l))\n    // (5l)\n    // Example 3:\n    // >>> maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\n    // (0l)\n    // Constraints:\n    // * all wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]], capacity : Long) : Long = {"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // In this Kata, you have to sort a list of non-negative integers according to\n    // number of ones in their binary representation in ascending order.\n    // For similar number of ones, sort based on decimal value.\n    // It must be implemented like this:\n    // >>> sortArray((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    // >>> sortArray((List[Long](-2l.toLong, -3l.toLong, -4l.toLong, -5l.toLong, -6l.toLong)))\n    // (List[Long](-6l.toLong, -5l.toLong, -4l.toLong, -3l.toLong, -2l.toLong))\n    // >>> sortArray((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))\n    def sortArray(arr : List[Long]) : List[Long] = {\n        val sortedArr = arr.sortBy(_.toLong)\n        sortedArr.reverse"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns a list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s : String, n : Long) : List[String] = {\n        val words = mutable.ListBuffer[String]()\n        val wordsList = s.split(\"\").toList\n        for (i <- 0 until n) {\n            if (wordsList(i) == \"\") {\n                words.clear()\n                return words.toList\n            }\n            val word = wordsList(i)\n            if (word.length == n) {\n                words.append(word)\n            }\n        }\n        words.toList"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a word. Your task is to find the closest vowel that stands between \n    // two consonants from the right side of the word (case sensitive).\n    // Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    // find any vowel met the above condition. \n    // You may assume that the given string contains English letter only.\n    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n    // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n    def getClosestVowel(word : String) : String = {\n        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val vowelsMap = vowels.toMap\n        val vowelsSet = vowels.toSet\n        val vowelsSetSize = vowelsSet.size\n        val vowelsSetIndex = vowelsSet.indices\n        val vowelsSetIndexMap = vowelsSetIndex.toMap\n        val vowelsSetIndexMapSize = vowelsSetIndexMap.size\n        val vowelsSetIndexMapIndex = vowelsSetIndexMap.indices\n        val vowelsSetIndexMapIndexMap = vowelsSetIndexMapIndex.toMap\n        val vowelsSetIndexMapSize = vowelsSetIndexMapIndexMap.size\n        val vowelsSetIndexMapIndexMapSize = vowelsSetIndexMapIndexMap.size\n        val vowelsSetIndexMap = vowelsSetIndexMap.toMap\n        val vowelsSetIndexMapSize = vowelsSetIndexMap.size\n        val vowelsSetIndexMapSize = vowelsSetIndexMap.size\n        val vowelsSetIndexMap = vowelsSetIndexMap.toMap\n        val vowelsSetIndexMapSize = vowelsSetIndexMap"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of two strings, both strings consist of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your job is to check if it is possible to concatenate the two strings in\n    // some order, that the resulting string will be good.\n    // A string S is considered to be good if and only if all parentheses in S\n    // are balanced. For example: the string '(())()' is good, while the string\n    // '())' is not.\n    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n    // Examples:\n    // >>> matchParens((List[String](\"()(\", \")\")))\n    // (\"Yes\")\n    // >>> matchParens((List[String](\")\", \")\")))\n    // (\"No\")\n    def matchParens(lst : List[String]) : String = {\n        val lst1 = lst.filter(_.isInstanceOf[String])\n        val lst2 = lst1.map(_.asInstanceOf[String])\n        val lst3 = lst2.map(_.replaceAll(\"\\\\(\", \"\\\\\\\\(\").replaceAll(\"\\\\)\", \"\\\\\\\\)\").replaceAll(\"\\\\)\", \"\\\\\\\\)\").replaceAll(\"\\\\(\", \"\\\\\\\\(\").replaceAll(\"\\\\)\", \"\\\\\\\\)\").replaceAll(\"\\\\)\", \"\\\\\\\\)\").replaceAll(\"\\\\(\", \"\\\\\\\\(\").replaceAll(\"\\\\)\", \"\\\\\\\\)\").replaceAll(\"\\\\(\", \"\\\\\\\\(\").replaceAll(\"\\\\)\", \"\\\\\\\\)\").replaceAll(\"\\\\(\", \"\\\\\\\\(\").replaceAll(\"\\\\)\", \"\\\\\\\\)\").replaceAll(\"\\\\(\", \"\\\\\\\\(\").replaceAll(\"\\\\)\", \"\\\\\\\\)\").replaceAll(\"\\\\(\", \"\\\\\\\\(\").replaceAll(\"\\\\)\", \"\\\\\\\\)\").replaceAll(\"\\\\(\", \"\\\\\\\\(\").replaceAll(\"\\\\)\", \"\\\\\\\\)\").replaceAll(\"\\\\(\", \"\\\\\\\\(\").replaceAll(\"\\\\)\", \"\\\\\\\\)\").replaceAll(\"\\\\(\", \"\\\\\\\\(\").replaceAll(\"\\\\)\", \"\\\\\\\\)\").replaceAll(\"\\\\(\", \"\\\\\\\\(\").replaceAll(\"\\\\)\", \"\\\\"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list arr of integers and a positive integer k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n    // Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the list will be in the range of [1, 1000].\n    // 2. The elements in the list will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr : List[Long], k : Long) : List[Long] = {\n        val arrList = arr.toList\n        val max = arrList.max\n        val maxIndex = arrList.indexWhere(x => x == max)\n        val maxList = arrList.slice(0, maxIndex)\n        val maxListSorted = maxList.sortWith(_ > k)\n        maxListSorted.reverse"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong, 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst : List[Long]) : Long = {\n        val sorted = lst.sorted\n        val odd = sorted.filter(x => x % 2 == 1)\n        val even = sorted.filter(x => x % 2 == 0)\n        even.foldLeft(0l)((acc, x) => acc + x)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty list of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val arrList = arr.toList\n        val arrListLength = arrList.length\n        val kList = scala.collection.mutable.ListBuffer.empty[Long]\n        kList.add(k)\n        var sum = 0L\n        for (i <- 0 until arrListLength) {\n            val arrElement = arrList(i)\n            if (arrElement < 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    // as follows: start with any positive integer n. Then each term is obtained from the \n    // previous term as follows: if the previous term is even, the next term is one half of \n    // the previous term. If the previous term is odd, the next term is 3 times the previous\n    // term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1) is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) : List[Long] = {\n        val collatz = List.fill(n)(n)\n        val odd = collatz.filter(_ % 2 == 1)\n        odd.sort"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        val dateArr = date.split(\"-\")\n        if (dateArr.length != 3) {\n            return false\n        }\n        val year = dateArr(0).toInt\n        val month = dateArr(1).toInt\n        val day = dateArr(2).toInt\n        val isValid = (year >= 1900 && year <= 2099) && (month >= 1 && month <= 12) && (day >= 1 && day <= 31)\n        return isValid"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    // should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def splitWords(txt : String) : Either[List[String], Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length == 0) Left(0)\n        else if (words.length == 1) Right(1)\n        else if (words.length == 2) Right(2)\n        else if (words.length == 3) Right(3)\n        else Right(words.length)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of numbers, return whether or not they are sorted\n    // in ascending order. If list has more than 1 duplicate of the same\n    // number, return false. Assume no negative numbers and only integers.\n    // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n    def isSorted(lst : List[Long]) : Boolean = {"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given two intervals,\n    // where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    // The given intervals are closed which means that the interval (start, end)\n    // includes both start and end.\n    // For each given interval, it is assumed that its start is less or equal its end.\n    // Your task is to determine whether the length of intersection of these two \n    // intervals is a prime number.\n    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    // which its length is 1, which not a prime number.\n    // If the length of the intersection is a prime number, return \"YES\",\n    // otherwise, return \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    // [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n    // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long, Long]) : String = {\n        val start = interval1._1\n        val end = interval1._2\n        val start2 = interval2._1\n        val end2 = interval2._2\n        if (start2 < start) {\n            val diff = end2 - start2\n            if (diff % 2 == 0) {\n                return \"NO\"\n            } else {\n                return \"YES\"\n            }\n        } else {\n            return \"NO\"\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list arr of integers and you need to return\n    // sum of magnitudes of integers multiplied by product of all signs\n    // of each number in the list, represented by 1, -1 or 0.\n    // Note: return None for empty arr.\n    // Example:\n    // >>> prodSigns((List[Long](1l.toLong, 2l.toLong, 2l.toLong, -4l.toLong)))\n    // Some(9l)\n    // >>> prodSigns((List[Long](0l.toLong, 1l.toLong)))\n    // Some(0l)\n    // >>> prodSigns((List[Long]()))\n    // None\n    def prodSigns(arr : List[Long]) : Option[Long] = {\n        if (arr.isEmpty) None\n        else {\n            val sum = arr.map(x => x * signOf(x)).sum\n            val product = arr.map(x => x * signOf(x)).product\n            Some(sum + product)\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    // each cell of the grid contains a value. Every integer in the range [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n    // You have to find the minimum path of length k in the grid. You can start\n    // from any cell, and in each step you can move to any of the neighbor cells,\n    // in other words, you can go to cells which share an edge with you current\n    // cell.\n    // Please note that a path of length k means visiting exactly k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n    // A path A (of length k) is considered less than a path B (of length k) if\n    // after making the ordered lists of the values on the cells that A and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    // than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is unique.\n    // Return an ordered list of the values on the cells that the minimum path go through.\n    // Examples:    \n    // >>> minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong))), (3l))\n    // (List[Long](1l.toLong, 2l.toLong, 1l.toLong))\n    // >>> minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong), List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 2l.toLong))), (1l))\n    // (List[Long](1l.toLong))\n    def minPath(grid : List[List[Long]], k : Long) : List[Long] = {"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n        if (n == 0) List(1l.toLong) else {\n            val a = tri(n - 1)\n            val b = tri(n - 2)\n            val c = tri(n - 3)\n            List(a + b + c)\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        var sum = 0l\n        var i = n\n        while (i > 0) {\n            sum += (i % 10l) * (i / 10l)\n            i /= 10l\n        }\n        sum"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that takes a string as input which contains only square brackets.\n    // The function should return true if and only if there is a valid subsequence of brackets \n    // where at least one bracket in the subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n    // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"[][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    // >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n    // (true)\n    def isNested(string : String) : Boolean = {\n        val brackets = string.split(\"\\\\[\\\\]\\\\]\")\n        val bracketsLength = brackets.length\n        if (bracketsLength == 0) {\n            return false\n        }\n        val bracketsNested = brackets.map(_.split(\"\\\\[\\\\]\\\\]\"))\n        val bracketsNestedLength = bracketsNested.length\n        if (bracketsNestedLength == 0) {\n            return false\n        }\n        val bracketsNestedMap = bracketsNested.map(_.map(_.split(\"\\\\[\\\\]\\\\]\"))).toMap\n        val bracketsNestedMapLength = bracketsNestedMap.length\n        if (bracketsNestedMapLength == 0) {\n            return false\n        }\n        val bracketsNestedMapLength2 = bracketsNestedMap.map(_.map(_.map(_.split(\"\\\\[\\\\]\\\\]\"))).toMap).length\n        if (bracketsNestedMapLength2 == 0) {\n            return false\n        }\n        val bracketsNestedMapLength3 = bracketsNestedMap.map(_.map(_.map(_.map(_.split(\"\\\\[\\\\]\\\\]\"))).toMap)).length\n        if (bracketsNestedMapLength3 == 0) {\n            return false\n        }\n        val bracketsNestedMapLength4 = bracketsNestedMap."], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of numbers.\n    // You need to return the sum of squared numbers in the given list,\n    // round each element in the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat)))\n    // (14l)\n    // >>> lst((List[Float](1.0f.toFloat, 4.0f.toFloat, 9.0f.toFloat)))\n    // (98l)\n    // >>> lst((List[Float](1.0f.toFloat, 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat)))\n    // (84l)\n    // >>> lst((List[Float](1.4f.toFloat, 4.2f.toFloat, 0.0f.toFloat)))\n    // (29l)\n    // >>> lst((List[Float](-2.4f.toFloat, 1.0f.toFloat, 1.0f.toFloat)))\n    // (6l)\n    def sumSquares(lst : List[Float]) : Long = {\n        lst.map(_.toFloat).map(f => f * f).sum"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar = txt.charAt(txt.length - 1)\n        val isLetter = lastChar.isLetter\n        val isWord = lastChar.isLetter && !lastChar.isDigit\n        isLetter && !isWord"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long]) : Long = {\n        val arrList = arr.toList\n        var max = arrList.head\n        var maxIndex = 0\n        for (i <- 1 to arrList.size) {\n            if (arrList(i) > max) {\n                max = arrList(i)\n                maxIndex = i\n            }\n        }\n        maxIndex"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    // the largest of negative integers, and 'b' is the smallest\n    // of positive integers in a list.\n    // If there is no negative or positive integers, return them as None.\n    // Examples:\n    // >>> largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (Some(None), Some(1l))\n    // >>> largestSmallestIntegers((List[Long]()))\n    // (Some(None), Some(None))\n    // >>> largestSmallestIntegers((List[Long](0l.toLong)))\n    // (Some(None), Some(None))\n    def largestSmallestIntegers(lst : List[Long]) : Tuple2[Option[Long], Option[Long]] = {\n        val max = lst.max\n        val min = lst.min\n        if (max == min) {\n            val largest = max\n            val smallest = min\n            (Some(largest), Some(smallest))\n        } else {\n            val largest = max\n            val smallest = min\n            (Some(largest), Some(smallest))\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>> isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) : Boolean = {\n        val sum = n.toDouble\n        val sumEven = sum.toInt\n        val sumEvenSum = sumEven.sum\n        val sumEvenSum2 = sumEvenSum.toInt\n        val sumEvenSum3 = sumEvenSum2.toInt\n        val sumEvenSum4 = sumEvenSum3.toInt\n        val sumEvenSum5 = sumEvenSum4.toInt\n        val sumEvenSum6 = sumEvenSum5.toInt\n        val sumEvenSum7 = sumEvenSum6.toInt\n        val sumEvenSum8 = sumEvenSum7.toInt\n        val sumEvenSum9 = sumEvenSum8.toInt\n        val sumEvenSum10 = sumEvenSum9.toInt\n        val sumEvenSum11 = sumEvenSum10.toInt\n        val sumEvenSum12 = sumEvenSum11.toInt\n        val sumEvenSum13 = sumEvenSum12.toInt\n        val sumEvenSum14 = sumEvenSum13.toInt\n        val sumEvenSum15 = sumEvenSum14.toInt\n        val sumEvenSum16 = sumEvenSum15.toInt\n        val sumEvenSum17 = sumEvenSum16.toInt\n        val sumEvenSum18 = sumEvenSum17.toInt\n        val sumEvenSum19 = sumEvenSum18.toInt\n        val sumEvenSum20 = sumEvenSum19.toInt\n        val sumEvenSum21 = sumE"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        val n_int = n.toInt\n        if (n_int < 0) {\n            throw new IllegalArgumentException(\"Negative integer is not allowed\")\n        }\n        val n_int_pow = n_int.pow(2)\n        val n_int_pow_2 = n_int_pow.pow(2)\n        val n_int_pow_3 = n_int_pow_2.pow(3)\n        val n_int_pow_4 = n_int_pow_3.pow(4)\n        val n_int_pow_5 = n_int_pow_4.pow(5)\n        val n_int_pow_6 = n_int_pow_5.pow(6)\n        val n_int_pow_7 = n_int_pow_6.pow(7)\n        val n_int_pow_8 = n_int_pow_7.pow(8)\n        val n_int_pow_9 = n_int_pow_8.pow(9)\n        val n_int_pow_10 = n_int_pow_9.pow(10)\n        val n_int_pow_11 = n_int_pow_10.pow(11)\n        val n_int_pow_12 = n_int_pow_11.pow(12)\n        val n_int_pow_13 = n_int_pow_12.pow(13)\n        val n_int_pow_14 = n_int_pow_13.pow(14)\n       "], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        val words = text.split(\" \")\n        val result = words.map(_.replaceAll(\"\\\\s+\", \"_\"))\n        result.mkString(\"_\")"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function which takes a string representing a file's name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    // A file's name is considered to be valid if and only if all the following conditions \n    // are met:\n    // - There should not be more than three digits ('0'-'9') in the file's name.\n    // - The file's name contains exactly one dot '.'\n    // - The substring before the dot should not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name : String) : String = {\n        val file_name_length = file_name.length\n        val file_name_before_dot = file_name.substring(0, file_name_length - 1)\n        val file_name_after_dot = file_name.substring(file_name_length - 1)\n        val file_name_before_dot_and_after_dot = file_name_before_dot + \".\" + file_name_after_dot\n        val file_name_before_dot_and_after_dot_and_letter = file_name_before_dot_and_after_dot.replaceAll(\"[^a-zA-Z]\", \"\")\n        val file_name_before_dot_and_after_dot_and_letter_length = file_name_before_dot_and_after_dot_and_letter.length\n        val file_name_before_dot_and_after_dot_and_letter_is_valid = file_name_before_dot_and_after_dot_and_letter_length == 1\n        val file_name_before_dot_and_after_dot_and"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // \"\n    // This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    // multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    // change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong, 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n    def sumSquares(lst : List[Long]) : Long = {\n        val sum = 0L\n        lst.foreach(i => {\n            if (i % 3 == 0 && i % 4 != 0) {\n                sum += i * i\n            } else {\n                sum += i * i\n            }\n        })\n        sum"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence : String) : String = {\n        val words = sentence.split(\" \")\n        val sortedWords = words.sorted\n        val length = sortedWords.length\n        val result = \"\"\n        for (i <- 0 until length) {\n            val word = sortedWords(i)\n            val lengthOfWord = word.length\n            if (lengthOfWord % 2 == 0) {\n                result += word\n            }\n        }\n        result"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Your task is to implement a function that will simplify the expression\n    // x * n. The function returns true if x * n evaluates to a whole number and false\n    // otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    // <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n    // You can assume that x, and n are valid fractions, and do not have zero as denominator.\n    // >>> simplify((\"1/5\"), (\"5/1\"))\n    // (true)\n    // >>> simplify((\"1/6\"), (\"2/1\"))\n    // (false)\n    // >>> simplify((\"7/10\"), (\"10/2\"))\n    // (false)\n    def simplify(x : String, n : String) : Boolean = {\n        val (numerator, denominator) = x.split(\"/\").map(_.trim).toList.map(_.toDouble).toList.sortWith(_ > _).reverse\n        if (numerator == 0) {\n            if (denominator == 1) {\n                true\n            } else {\n                false\n            }\n        } else {\n            if (denominator == 1) {\n                numerator == 1\n            } else {\n                numerator / denominator == 1\n            }\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which sorts the given list of integers\n    // in ascending order according to the sum of their digits.\n    // Note: if there are several items with similar sum of their digits,\n    // order them based on their index in original list.\n    // For example:\n    // >>> orderByPoints((List[Long](1l.toLong, 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong)))\n    // (List[Long](-1l.toLong, -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))\n    // >>> orderByPoints((List[Long]()))\n    // (List[Long]())\n    def orderByPoints(nums : List[Long]) : List[Long] = {\n        val sorted = nums.sortBy(_.sumOfDigits)\n        sorted.map(_.toLong)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list of numbers as input and returns \n    // the number of elements in the list that are greater than 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong, -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n    def specialFilter(nums : List[Long]) : Long = {\n        val filter = new mutable.HashSet[Long]()\n        nums.foreach(filter.add)\n        filter.filter(_.isEven).size"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a positive integer n. You have to create an integer list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long = {\n        val a = List.fill(n)(0)\n        a(0) = 1\n        a(1) = 3\n        a(2) = 7\n        a(3) = 13\n        a(4) = 21\n        a(5) = 25\n        a(6) = 31\n        a(7) = 37\n        a(8) = 43\n        a(9) = 49\n        a(10) = 55\n        a(11) = 61\n        a(12) = 67\n        a(13) = 73\n        a(14) = 79\n        a(15) = 85\n        a(16) = 91\n        a(17) = 97\n        a(18) = 103\n        a(19) = 109\n        a(20) = 115\n        a(21) = 121\n        a(22) = 127\n        a(23) = 133\n        a(24) = 139\n        a(25) = 145"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planet1 = planet1.toUpperCase\n        val planet2 = planet2.toUpperCase\n        val planet1_planet2 = planet1 + planet2\n        val planet1_planet2_list = planet1_planet2.split(\",\")\n        val planet1_planet2_list_sorted = planet1_planet2_list.sortBy(_.toInt)\n        val planet1_planet2_list_sorted_list = planet1_planet2_list_sorted.toList\n        val planet1_planet2_list_sorted_list_sorted = planet1_planet2_list_sorted_list.sortBy(_.toInt)\n        val planet1_planet2_list_sorted_list_sorted_list = planet1_planet2_list_sorted_list_sorted.toList\n        val planet1_"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings as a parameter,\n    // deletes the strings that have odd lengths from it,\n    // and returns the resulted list with a sorted order,\n    // The list is always a list of strings and never a list of numbers,\n    // and it may contain duplicates.\n    // The order of the list should be ascending by length of each word, and you\n    // should return the list sorted by that rule.\n    // If two words have the same length, sort the list alphabetically.\n    // The function should return a list of strings in sorted order.\n    // You may assume that all words will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def sortedListSum(lst : List[String]) : List[String] = {\n        val sortedList = lst.sortBy(_.length)\n        sortedList.map(_.reverse)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // A simple program which should return the value of x if n is \n    // a prime number and should return the value of y otherwise.\n    // Examples:\n    // >>> xOrY((7l), (34l), (12l))\n    // (34l)\n    // >>> xOrY((15l), (8l), (5l))\n    // (5l)\n    def xOrY(n : Long, x : Long, y : Long) : Long = {\n        if (n == 1) x else y"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of numbers, return the sum of squares of the numbers\n    // in the list that are odd. Ignore numbers that are negative or not integers.\n    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong, 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong, -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong, -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst : List[Float]) : Long = {\n        val sum = lst.foldLeft(0l)((acc, x) => acc + x * x)\n        sum % 2 == 1l ? sum : 0l"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // I think we all remember that feeling when the result of some long-awaited\n    // event is finally known. The feelings and thoughts you have at that moment are\n    // definitely worth noting down and comparing.\n    // Your task is to determine if a person correctly guessed the results of a number of matches.\n    // You are given two lists of scores and guesses of equal length, where each index shows a match. \n    // Return a list of the same length denoting how far off each guess was. If they have guessed correctly,\n    // the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong, 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n        val gameList = game.toList\n        val guessList = guess.toList\n        val scoreList ="], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given the name of a class (a string) and a list of extensions.\n    // The extensions are to be used to load additional classes to the class. The\n    // strength of the extension is as follows: Let CAP be the number of the uppercase\n    // letters in the extension's name, and let SM be the number of lowercase letters \n    // in the extension's name, the strength is given by the fraction CAP - SM. \n    // You should find the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n    // If there are two or more extensions with the same strength, you should\n    // choose the one that comes first in the list.\n    // For example, if you are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name : String, extensions : List[String]) : String = {\n        val sorted_extensions = extensions.sortBy(_.length)\n        val max_strength = sorted_extensions.maxBy(_.length)\n        val max_strength_index = sorted_extensions.indexWhere(_.length == max_strength)\n        val max_strength_extension = sorted_extensions(max_strength_index)\n        class_name + max_strength_extension"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    // >>> cycpatternCheck((\"abcd\"), (\"abd\"))\n    // (false)\n    // >>> cycpatternCheck((\"hello\"), (\"ell\"))\n    // (true)\n    // >>> cycpatternCheck((\"whassup\"), (\"psus\"))\n    // (false)\n    // >>> cycpatternCheck((\"abab\"), (\"baa\"))\n    // (true)\n    // >>> cycpatternCheck((\"efef\"), (\"eeff\"))\n    // (false)\n    // >>> cycpatternCheck((\"himenss\"), (\"simen\"))\n    // (true)\n    def cycpatternCheck(a : String, b : String) : Boolean = {\n        val a_length = a.length\n        val b_length = b.length\n        if (a_length == 0) {\n            return false\n        }\n        if (b_length == 0) {\n            return true\n        }\n        val a_char = a.charAt(0)\n        val b_char = b.charAt(0)\n        if (a_char == b_char) {\n            cycpatternCheck(a.substring(1), b.substring(1))\n        } else {\n            val a_rot = a.substring(1)\n            val b_rot = b.substring(1)\n            cycpatternCheck(a_rot, b_rot)\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an integer. return a tuple that has the number of even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n    // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num : Long) : Tuple2[Long, Long] = {\n        val even = num % 2 == 0\n        val odd = !even\n        (even, odd)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer, obtain its roman numeral equivalent as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <= 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n        val roman = Array(\"I\", \"V\", \"X\", \"L\", \"C\", \"D\", \"M\")\n        var result = \"\"\n        var i = 0\n        while (i < number) {\n            result += roman(i % 10)\n            i += 1\n        }\n        result"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return true if the three\n    // sides form a right-angled triangle, false otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l), (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    // (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        val a_b = a * b\n        val a_c = a * c\n        val b_c = b * c\n        val a_b_c = a_b * b_c\n        val a_c_b = a_c * b\n        val a_b_c_a_c_b_c = a_b_c * a_c_b\n        val a_b_c_a_c_b_c_a_c_b_c = a_b_c_a_c_b_c * a_c_b\n        val a_b_c_a_c_b_c_a_c_b_c_a_c_b_c = a_b_c_a_c_b_c_a_c_b_c * a_c_b\n        val a_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c = a_b_c_a_c_b_c_a_c_b_c_a_c_b_c * a_c_b\n        val a_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c_b_c = a_b_c_a_c_b_c_a_c_b_c_a_c_b_c_a_c"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        val sortedWords = words.sorted\n        val max = sortedWords.maxBy(_.length)\n        max.length"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    // but now you need to eat more carrots to complete the day's meals.\n    // you should return a list of [ total number of eaten carrots after your meals,\n    // the number of carrots left after your meals ]\n    // if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    // Example:\n    // >>> eat((5l), (6l), (10l))\n    // (List[Long](11l.toLong, 4l.toLong))\n    // >>> eat((4l), (8l), (9l))\n    // (List[Long](12l.toLong, 1l.toLong))\n    // >>> eat((1l), (10l), (10l))\n    // (List[Long](11l.toLong, 0l.toLong))\n    // >>> eat((2l), (11l), (5l))\n    // (List[Long](7l.toLong, 0l.toLong))\n    // Variables:\n    // @number : integer\n    // the number of carrots that you have eaten.\n    // @need : integer\n    // the number of carrots that you need to eat.\n    // @remaining : integer\n    // the number of remaining carrots thet exist in stock\n    // Constrain:\n    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining <= 1000\n    // Have fun :)\n    def eat(number : Long, need : Long, remaining : Long) : List[Long] = {\n        if (number < 0 || need < 0 || remaining < 0) {\n            throw new IllegalArgumentException(\"Invalid input\")\n        }\n        val total = need - number\n        val left = remaining - total\n        if (left == 0) {\n           "], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given two lists operator, and operand. The first list has basic algebra operations, and \n    // the second list is a list of integers. Use the two given lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator list is equal to the length of operand list minus one.\n    // Operand is a list of of non-negative integers.\n    // Operator list has at least one operator, and operand list has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long]) : Long = {\n        val result = 0\n        for (i <- 0 until op.length - 1) {\n            val op1 = op(i)\n            val op2 = operand(i)\n            val op1_op2 = op1.toInt + op2.toInt\n            val op1_op2_result = op1_op2 match {\n                case 0 => 0\n                case _ => op1_op2_result = op1_op2_result % 10\n            }\n            result += op1_op2_result\n        }\n        result"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n    // If the string contains no letters, reverse the string.\n    // The function should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>> solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n        val reversed = s.reverse\n        if (reversed.contains('a') || reversed.contains('A')) {\n            reversed.reverse\n        } else {\n            reversed\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // Some(\"3e25960a79dbc69b674cd4ec67a72c62\")\n    def stringToMd5(text : String) : Option[String] = {\n        val md5 = java.security.MessageDigest.getInstance(\"MD5\")\n        val bytes = text.getBytes(\"UTF-8\")\n        val hash = md5.digest(bytes)\n        Some(new String(hash, \"UTF-8\"))"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given two positive integers a and b, return the even digits between a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l), (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val a_ = a.toLong\n        val b_ = b.toLong\n        val result = mutable.ListBuffer[Long]()\n        while (a_ < b_) {\n            val even = a_ % 2 == 0\n            if (even) {\n                result += a_\n            }\n            a_ = a_ / 2\n        }\n        result.toList"]]