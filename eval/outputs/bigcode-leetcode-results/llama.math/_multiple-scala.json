[["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if in given list of numbers, are any two numbers closer to each other than\n    // given threshold.\n    // >>> hasCloseElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat)), (0.5f))\n    // (false)\n    // >>> hasCloseElements((List[Float](1.0f.toFloat, 2.8f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)), (0.3f))\n    // (true)\n    def hasCloseElements(numbers : List[Float], threshold : Float) : Boolean = {\n        var count = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var n = numbers.length\n        while (i < n) {\n            while (j < n && numbers(i) <= numbers(j) && numbers(j) <= numbers(k) && numbers(k) <= numbers(i)) {\n                if (numbers(i) <= numbers(j) && numbers(j) <= numbers(k) && numbers(k) <= numbers(i)) {\n                    count += 1\n                }\n                j += 1\n            }\n            while (k < n && numbers(k) <= numbers(i)) {\n                count += 1\n                k += 1\n            }\n            if (count >= threshold) {\n                return true\n            }\n            i += 1\n        }\n        false"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    // separate those group into separate strings and return the list of those.\n    // Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    // Ignore any spaces in the input string.\n    // >>> separateParenGroups((\"( ) (( )) (( )( ))\"))\n    // (List[String](\"()\", \"(())\", \"(()())\"))\n    def separateParenGroups(paren_string : String) : List[String] = {\n        val groups = paren_string.split(\"\\\\( *\\\\) *\\\\(( *\\\\) *\\\\(( *\\\\) *\\\\))\")\n        val result = groups.map(_.split(\"\\\\( *\\\\) *\\\\(( *\\\\) *\\\\))\"))\n        result.map(_.map(_.trim)).toList"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive floating point number, it can be decomposed into\n    // and integer part (largest integer smaller than given number) and decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal part of the number.\n    // >>> truncateNumber((3.5f))\n    // (0.5f)\n    def truncateNumber(number : Float) : Float = {\n        val integerPart = number.toInt\n        val decimalPart = number - integerPart\n        decimalPart"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You're given a list of deposit and withdrawal operations on a bank account that starts with\n    // zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    // at that point function should return true. Otherwise it should return false.\n    // >>> belowZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (false)\n    // >>> belowZero((List[Long](1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong)))\n    // (true)\n    def belowZero(operations : List[Long]) : Boolean = {\n        var balance = 0l\n        for (op <- operations) {\n            balance += op\n            if (balance < 0l) {\n                return true\n            }\n        }\n        return false"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of input numbers, calculate Mean Absolute Deviation\n    // around the mean of this dataset.\n    // Mean Absolute Deviation is the average absolute difference between each\n    // element and a centerpoint (mean in this case):\n    // MAD = average | x - x_mean |\n    // >>> meanAbsoluteDeviation((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat)))\n    // (1.0f)\n    def meanAbsoluteDeviation(numbers : List[Float]) : Float = {\n        val mean = numbers.sum / numbers.length\n        val deviation = numbers.map(x => x - mean).sum\n        deviation"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    // (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n        var i = 0\n        var result = List[Long]()\n        while (i < numbers.length) {\n            result = result :+ numbers(i)\n            if (i + 1 < numbers.length) {\n                result = result :+ delimeter\n            }\n            i += 1\n        }\n        result"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    // For each of the group, output the deepest level of nesting of parentheses.\n    // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n    // >>> parseNestedParens((\"(()()) ((())) () ((())()())\"))\n    // (List[Long](2l.toLong, 3l.toLong, 1l.toLong, 3l.toLong))\n    def parseNestedParens(paren_string : String) : List[Long] = {\n        var stack = List[Long]()\n        var current_level = 0\n        var current_group = \"\"\n        var current_paren = \"\"\n        var current_open = \"\"\n        var current_close = \"\"\n        var current_nested_paren = \"\"\n        var current_nested_group = \"\"\n        var current_nested_paren_level = 0\n        var current_nested_group_level = 0\n        var current_nested_paren_open = \"\"\n        var current_nested_paren_close = \"\"\n        var current_nested_paren_nested_paren = \"\"\n        var current_nested_paren_nested_group = \"\"\n        var current_nested_paren_nested_paren_nested_paren = \"\"\n        var current_nested_paren_nested_group_nested_paren = \"\"\n        var current_nested_paren_nested_group_nested_paren_nested_paren = \"\"\n        var current_nested_paren_nested_group_nested_paren_nested_paren_nested_paren = \"\"\n        var current_nested_paren_nested_group_nested_paren_nested_paren_nested_paren_nested_paren = \"\"\n        var current_nested_paren_nested_group_nested_paren_nested_paren_nested_paren_nested_paren_nested_paren = \"\"\n        var current_nested_paren_nested_group_nested_paren_nested_paren_"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Filter an input list of strings only for ones that contain given substring\n    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\")), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings : List[String], substring : String) : List[String] = {\n        val substrings = strings.filter(_.contains(substring))\n        substrings"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    // Empty sum should be equal to 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long]) : Tuple2[Long, Long] = {\n        val sum = numbers.sum\n        val product = numbers.product\n        (sum, product)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // From a given list of integers, generate a list of rolling maximum element found until given moment\n    // in the sequence.\n    // >>> rollingMax((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong)))\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))\n    def rollingMax(numbers : List[Long]) : List[Long] = {\n        var max = numbers(0)\n        var i = 1\n        while (i < numbers.length) {\n            if (numbers(i) > max) {\n                max = numbers(i)\n            }\n            i += 1\n        }\n        numbers(numbers.length - 1)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Find the shortest palindrome that begins with a supplied string.\n    // Algorithm idea is simple:\n    // - Find the longest postfix of supplied string that is a palindrome.\n    // - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    // >>> makePalindrome((\"\"))\n    // (\"\")\n    // >>> makePalindrome((\"cat\"))\n    // (\"catac\")\n    // >>> makePalindrome((\"cata\"))\n    // (\"catac\")\n    def makePalindrome(string : String) : String = {\n        var prefix = \"\"\n        var suffix = \"\"\n        var i = 0\n        while (i < string.length) {\n            if (string(i) == string(string.length - 1)) {\n                suffix += string(i)\n                i += 1\n            } else {\n                prefix += string(i)\n                i += 1\n            }\n        }\n        if (prefix == string) {\n            suffix += string.reverse\n        } else {\n            suffix += string\n        }\n        suffix"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform binary XOR on these inputs and return result also as a string.\n    // >>> stringXor((\"010\"), (\"110\"))\n    // (\"100\")\n    def stringXor(a : String, b : String) : String = {\n        val aBit = a.count(x => x == '1')\n        val bBit = b.count(x => x == '1')\n        val aXor = a.zip(b).map(x => x._1 ^ x._2)\n        aXor.reduceByKey(_ + _)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Out of list of strings, return the longest one. Return the first one in case of multiple\n    // strings of the same length. Return None in case the input list is empty.\n    // >>> longest((List[String]()))\n    // None\n    // >>> longest((List[String](\"a\", \"b\", \"c\")))\n    // Some(\"a\")\n    // >>> longest((List[String](\"a\", \"bb\", \"ccc\")))\n    // Some(\"ccc\")\n    def longest(strings : List[String]) : Option[String] = {\n        if (strings.isEmpty) None\n        else {\n            val maxLen = strings.maxBy(_._2)._2\n            val maxStr = strings.head\n            if (strings.length == 1) Some(maxStr)\n            else {\n                val maxLen = strings.maxBy(_._2)._2\n                val maxStr = strings.head\n                if (strings.length == 2) Some(maxStr)\n                else {\n                    val maxLen = strings.maxBy(_._2)._2\n                    val maxStr = strings.head\n                    if (strings.length == 3) Some(maxStr)\n                    else None\n                }\n            }\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l), (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n        val gcd = a.gcd(b)\n        gcd"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of all prefixes from shortest to longest of the input string\n    // >>> allPrefixes((\"abc\"))\n    // (List[String](\"a\", \"ab\", \"abc\"))\n    def allPrefixes(string : String) : List[String] = {\n        val prefixes = string.split(\"\").toList\n        prefixes.reverse"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    // >>> stringSequence((0l))\n    // (\"0\")\n    // >>> stringSequence((5l))\n    // (\"0 1 2 3 4 5\")\n    def stringSequence(n : Long) : String = {\n        val nums = (0 to n).toSeq.map(i => (i * 10).toString)\n        nums.mkString(\" \")"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string, find out how many distinct characters (regardless of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"))\n    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n    def countDistinctCharacters(string : String) : Long = {\n        val chars = string.toCharArray\n        val distinctChars = chars.filter(c => c.isLetter || c.isDigit)\n        distinctChars.count(_.isLetter) + distinctChars.count(_.isDigit)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input to this function is a string representing musical notes in a special ASCII format.\n    // Your task is to parse this string and return list of integers corresponding to how many beats does each\n    // not last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n    // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n    // >>> parseMusic((\"o o| .| o| o| .| .| .| .| o o\"))\n    // (List[Long](4l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 4l.toLong))\n    def parseMusic(music_string : String) : List[Long] = {\n        val music_string_as_list = music_string.split(\"\\\\|\")\n        val music_string_as_list_without_quarter_notes = music_string_as_list.filter(_.nonEmpty)\n        music_string_as_list_without_quarter_notes.map(_.toLong)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Find how many times a given substring can be found in the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    def howManyTimes(string : String, substring : String) : Long = {\n        var count = 0\n        var i = 0\n        var j = 0\n        while (i < string.length && j < substring.length) {\n            if (string(i) == substring(j)) {\n                count += 1\n            }\n            i += 1\n            j += 1\n        }\n        count"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"one three five\")\n    def sortNumbers(numbers : String) : String = {\n        val sortedNumbers = numbers.split(\"\").map(_.toInt).sorted\n        sortedNumbers.mkString(\" \")"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    // other and return them in order (smaller number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n    // ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n    // ((2.0f, 2.0f))\n    def findClosestElements(numbers : List[Float]) : Tuple2[Float, Float] = {\n        val sortedNumbers = numbers.sorted\n        val closestElements = sortedNumbers.takeWhile(_.abs > 1.0f.toFloat)\n        val closestElementsTuple = closestElements.zip(sortedNumbers.tail.reverse).map(_.toFloat)\n        (closestElementsTuple.head, closestElementsTuple.tail.reverse)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given list of numbers (of at least two elements), apply a linear transform to that list,\n    // such that the smallest number will become 0 and the largest will become 1\n    // >>> rescaleToUnit((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat)))\n    // (List[Float](0.0f.toFloat, 0.25f.toFloat, 0.5f.toFloat, 0.75f.toFloat, 1.0f.toFloat))\n    def rescaleToUnit(numbers : List[Float]) : List[Float] = {\n      val rescaled = numbers.map(x => x * 2.0f.toFloat).toList\n      rescaled.sortBy(-_._2)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Filter given list of any scalathon values only for integers\n    // >>> filterIntegers((List[Any](\"a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n    // >>> filterIntegers((List[Any](1l, 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    def filterIntegers(values : List[Any]) : List[Long] = {\n      if (values.isEmpty) List.empty[Long]\n      else values.filter(v => v.isInstanceOf[Long])"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n    // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string : String) : Long = {\n        val length = string.length\n        if (length == 0) 0\n        else length"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given number n, find the largest number that divides n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n : Long) : Long = {\n        val (divisor, remainder) = n.mod(1)\n        if (divisor == 1) {\n            n\n        } else {\n            val (divisor, remainder) = n.mod(divisor)\n            if (divisor == 1) {\n                n\n            } else {\n                val (divisor, remainder) = n.mod(divisor)\n                if (divisor == 1) {\n                    n\n                } else {\n                    val (divisor, remainder) = n.mod(divisor)\n                    if (divisor == 1) {\n                        n\n                    } else {\n                        val (divisor, remainder) = n.mod(divisor)\n                        if (divisor == 1) {\n                            n\n                        } else {\n                            val (divisor, remainder) = n.mod(divisor)\n                            if (divisor == 1) {\n                                n\n                            } else {\n                                val (divisor, remainder) = n.mod(divisor)\n                                if (divisor == 1) {\n                                    n\n                                } else {\n                                    val (divisor, remainder) = n.mod(divisor)\n                                    if (divisor == 1) {\n                                        n\n                                    } else {\n                                        val (divisor, remainder) = n.mod(divisor)\n                                        if (divisor == 1) {\n                                            n\n                                        } else {\n                                            val (divisor, remainder) = n.mod(divisor)\n                                            if (divisor == 1) {\n                                                n\n                                            } else {\n                                                val"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list of prime factors of given integer in the order from smallest to largest.\n    // Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    // Input number should be equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong, 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong, 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong, 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n        val factors = mutable.Map.empty[Long, Long]\n        val i = 1\n        while (i * i <= n) {\n            if (n % i == 0) {\n                factors += (n / i) -> i\n            }\n            i += 1\n        }\n        factors.toList"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // From a list of integers, remove all elements that occur more than once.\n    // Keep order of elements left the same as in the input.\n    // >>> removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 3l.toLong, 4l.toLong))\n    def removeDuplicates(numbers : List[Long]) : List[Long] = {\n        var seen = Map[Long, Boolean]()\n        var result = List[Long]()\n        for (number <- numbers) {\n            if (seen.contains(number)) {\n                result = result :+ number\n            } else {\n                seen += number => true\n            }\n        }\n        result"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\")\n    def flipCase(string : String) : String = {\n        val lowercase = string.toLowerCase\n        val uppercase = lowercase.toUpperCase\n        uppercase.replaceAll(\"[a-z]\", \"\").toUpperCase"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Concatenate list of strings into a single string\n    // >>> concatenate((List[String]()))\n    // (\"\")\n    // >>> concatenate((List[String](\"a\", \"b\", \"c\")))\n    // (\"abc\")\n    def concatenate(strings : List[String]) : String = {\n        val result = \"\"\n        strings.foreach(s => result += s)\n        result"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Filter an input list of strings only for ones that start with a given prefix.\n    // >>> filterByPrefix((List[String]()), (\"a\"))\n    // (List[String]())\n    // >>> filterByPrefix((List[String](\"abc\", \"bcd\", \"cde\", \"array\")), (\"a\"))\n    // (List[String](\"abc\", \"array\"))\n    def filterByPrefix(strings : List[String], prefix : String) : List[String] = {\n        val filteredStrings = strings.filter(_.startsWith(prefix))\n        filteredStrings"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return only positive numbers in the list.\n    // >>> getPositive((List[Long](-1l.toLong, 2l.toLong, -4l.toLong, 5l.toLong, 6l.toLong)))\n    // (List[Long](2l.toLong, 5l.toLong, 6l.toLong))\n    // >>> getPositive((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (List[Long](5l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 9l.toLong, 123l.toLong, 1l.toLong))\n    def getPositive(l : List[Long]) : List[Long] = {\n        val positive = l.filter(l.toLong > 0)\n        positive.toList"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return true if a given number is prime, and false otherwise.\n    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    // (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    def isPrime(n : Long) : Boolean = {\n        if (n <= 1l) {\n            false\n        } else if (n <= 3l) {\n            true\n        } else if (n % 2l == 0l) {\n            false\n        } else if (n % 3l == 0l) {\n            false\n        } else {\n            var i = 5l\n            while (i * i <= n) {\n                if (n % i == 0l) {\n                    false\n                } else {\n                    i += 6l\n                }\n            }\n            true\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // This function takes a list l and returns a list l' such that\n    // l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    // to the values of the corresponding indicies of l, but sorted.\n    // >>> sortThird((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    // >>> sortThird((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 2l.toLong)))\n    // (List[Long](2l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 8l.toLong, 9l.toLong, 5l.toLong))\n    def sortThird(l : List[Long]) : List[Long] = {\n        val l' = l.copy(toIndex = l.toIndex % 3)\n        l'.sortWith(_.toLong % 3 == 0)\n        l'.sortWith(_.toLong % 3 == 1)\n        l'.sortWith(_.toLong % 3 == 2)\n        l'.sortWith(_.toLong % 3 == 3)\n        l'.sortWith(_.toLong % 3 == 4)\n        l'.sortWith(_.toLong % 3 == 5)\n        l'.sortWith(_.toLong % 3 == 6)\n        l'.sortWith(_.toLong % 3 == 7)\n        l'.sortWith(_.toLong % 3 == 8)\n        l'.sortWith(_.toLong % 3 == 9)\n        l'.sortWith(_.toLong % 3 == 10)\n        l'.sortWith(_.toLong % 3 == 11)\n"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return sorted unique elements in a list\n    // >>> unique((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](0l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))\n    def unique(l : List[Long]) : List[Long] = {\n        val seen = mutable.Map[Long, Boolean]()\n        val result = mutable.ListBuffer[Long]()\n        for (i <- l) {\n            if (!seen.contains(i)) {\n                seen += i\n                result += i\n            }\n        }\n        result"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return maximum element in the list.\n    // >>> maxElement((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (3l)\n    // >>> maxElement((List[Long](5l.toLong, 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong, 1l.toLong, -10l.toLong)))\n    // (123l)\n    def maxElement(l : List[Long]) : Long = {\n        var max = 0\n        for (i <- l) {\n            if (i > max) {\n                max = i\n            }\n        }\n        max"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    // >>> fizzBuzz((50l))\n    // (0l)\n    // >>> fizzBuzz((78l))\n    // (2l)\n    // >>> fizzBuzz((79l))\n    // (3l)\n    def fizzBuzz(n : Long) : Long = {\n        val count = 0\n        for (i <- 1 to n) {\n            if (i % 11 == 0 || i % 13 == 0) {\n                count += 1\n            }\n        }\n        count"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // This function takes a list l and returns a list l' such that\n    // l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    // to the values of the even indicies of l, but sorted.\n    // >>> sortEven((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong))\n    // >>> sortEven((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](3l.toLong, 6l.toLong, 5l.toLong, 4l.toLong))\n    def sortEven(l : List[Long]) : List[Long] = {\n        val odd = l.filter(i => i % 2 == 1)\n        val even = l.filter(i => i % 2 == 0)\n        val oddSorted = odd.sortBy(_ % 2)\n        val evenSorted = even.sortBy(_ % 2)\n        oddSorted ++= evenSorted\n        oddSorted"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    // >>> primeFib((1l))\n    // (2l)\n    // >>> primeFib((2l))\n    // (3l)\n    // >>> primeFib((3l))\n    // (5l)\n    // >>> primeFib((4l))\n    // (13l)\n    // >>> primeFib((5l))\n    // (89l)\n    def primeFib(n : Long) : Long = {\n        val fib = fib(n)\n        val prime = prime(fib)\n        prime"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // triples_sum_to_zero takes a list of integers as an input.\n    // it returns true if there are three distinct elements in the list that\n    // sum to zero, and false otherwise.\n    // >>> triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> triplesSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (true)\n    // >>> triplesSumToZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> triplesSumToZero((List[Long](2l.toLong, 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong)))\n    // (true)\n    // >>> triplesSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def triplesSumToZero(l : List[Long]) : Boolean = {\n        val n = l.length\n        var sum = 0\n        for (i <- 0 until n) {\n            sum += l(i)\n        }\n        sum == 0"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Imagine a road that's a perfectly straight infinitely long line.\n    // n cars are driving left to right;  simultaneously, a different set of n cars\n    // are driving right to left.   The two sets of cars start out being very far from\n    // each other.  All cars move in the same speed.  Two cars are said to collide\n    // when a car that's moving left to right hits a car that's moving right to left.\n    // However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    // in their trajectory as if they did not collide.\n    // This function outputs the number of such collisions.\n    def carRaceCollision(n : Long) : Long = {\n        val cars = Array.fill(n)(new Car())\n        val carsLeft = Array.fill(n)(new Car())\n        val carsRight = Array.fill(n)(new Car())\n        val carsLeftLeft = Array.fill(n)(new Car())\n        val carsRightRight = Array.fill(n)(new Car())\n        val carsLeftRight = Array.fill(n)(new Car())\n        val carsLeftLeftLeft = Array.fill(n)(new Car())\n        val carsRightRightRight = Array.fill(n)(new Car())\n        val carsLeftRightRight = Array.fill(n)(new Car())\n        for (i <- 0 until n) {\n            carsLeftLeft = carsLeft\n            carsLeftRight = carsLeft\n            carsLeftLeftLeft = carsLeftLeft\n            carsLeftRightRight = carsLeftRight\n            carsRightRightRight = carsRightRight\n            carsRightLeftLeft = carsRightLeft\n            carsLeftLeftLeft = carsLeftLeft\n            carsLeftRightRight = carsLeftRight\n            carsRightLeftLeft = carsRightLeft\n            carsRightRightRight = carsRightRight\n            carsLeftLeftLeft = carsLeftLeft\n            carsLeftRightRight = carsLeftRight\n            carsRightLeftLeft = carsRightLeft\n            carsRightRightRight = carsRightRight\n            carsLeftLeftLeft = carsLeftLeft\n            carsLeftRightRight = carsLeftRight\n            carsRightLeftLeft = carsRightLeft\n"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return list with elements incremented by 1.\n    // >>> incrList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong, 4l.toLong))\n    // >>> incrList((List[Long](5l.toLong, 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong)))\n    // (List[Long](6l.toLong, 4l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong, 124l.toLong))\n    def incrList(l : List[Long]) : List[Long] = {\n        l.map(x => x + 1).toList"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n    // it returns true if there are two distinct elements in the list that\n    // sum to zero, and false otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong, 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong, 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n    // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l : List[Long]) : Boolean = {\n        var i = 0\n        var j = 0\n        var k = 0\n        var sum = 0\n        var n = l.length\n        while (i < n) {\n            sum += l(i)\n            i += 1\n        }\n        while (j < n) {\n            sum += l(j)\n            j += 1\n        }\n        while (k < n) {\n            sum += l(k)\n            k += 1\n        }\n        if (sum == 0) {\n            return true\n        }\n        return false"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Change numerical base of input number x to base.\n    // return string representation after the conversion.\n    // base numbers are less than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l), (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\")\n    def changeBase(x : Long, base : Long) : String = {\n        val digits = new Array[Long](x.bitCount)\n        var i = 0\n        while (i < x.bitCount) {\n            digits(i) = x.bit(i)\n            i += 1\n        }\n        val result = new StringBuilder\n        for (i <- 0 until digits.length) {\n            result.append(digits(i))\n        }\n        result.append(base)\n        result.append(\" \")\n        result.append(x.toString)\n        result.toString"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given length of a side and high return area for a triangle.\n    // >>> triangleArea((5l), (3l))\n    // (7.5f)\n    def triangleArea(a : Long, h : Long) : Float = {\n        val area = (a * h) / 2\n        area"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>> fib4((5l))\n    // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>> fib4((7l))\n    // (14l)\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 0\n        else if (n == 2) 2\n        else fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return median of elements in the list l.\n    // >>> median((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // 3l\n    // >>> median((List[Long](-10l.toLong, 4l.toLong, 6l.toLong, 1000l.toLong, 10l.toLong, 20l.toLong)))\n    // (15.0f)\n    def median(l : List[Long]) : Float = {\n        val sortedList = l.sorted\n        val length = sortedList.length\n        val mid = length / 2\n        if (length % 2 == 0) {\n            val midValue = sortedList(mid)\n            val leftValue = sortedList(mid - 1)\n            val rightValue = sortedList(mid + 1)\n            if (midValue < rightValue) {\n                return (midValue + midValue / 2.0f) / 2.0f\n            } else {\n                return (midValue + midValue / 2.0f) / 2.0f\n            }\n        } else {\n            val midValue = sortedList(mid)\n            return midValue\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Checks if given string is a palindrome\n    // >>> isPalindrome((\"\"))\n    // (true)\n    // >>> isPalindrome((\"aba\"))\n    // (true)\n    // >>> isPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> isPalindrome((\"zbcd\"))\n    // (false)\n    def isPalindrome(text : String) : Boolean = {\n        var i = 0\n        var j = 0\n        while (i < text.length && j < text.length) {\n            if (text(i) != text(j)) {\n                return false\n            }\n            i += 1\n            j += 1\n        }\n        return true"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l), (5l))\n    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>> modp((0l), (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n    // >>> modp((100l), (101l))\n    // (1l)\n    def modp(n : Long, p : Long) : Long = {\n        val a = (n % p)\n        if (a == 0) {\n            a\n        } else {\n            a * (p - 1)\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // remove_vowels is a function that takes string and returns string without vowels.\n    // >>> removeVowels((\"\"))\n    // (\"\")\n    // >>> removeVowels((\"abcdef\"))\n    // (\"bcdf\")\n    // >>> removeVowels((\"aaaaa\"))\n    // (\"\")\n    // >>> removeVowels((\"aaBAA\"))\n    // (\"B\")\n    // >>> removeVowels((\"zbcd\"))\n    // (\"zbcd\")\n    def removeVowels(text : String) : String = {\n        var vowels = \"aeiou\"\n        var text = text.toLowerCase\n        var result = \"\"\n        var i = 0\n        while (i < text.length) {\n            if (text(i) == vowels.charAt(0)) {\n                text = text.substring(0, i) + text.substring(i + 1)\n            } else if (text(i) == vowels.charAt(1)) {\n                text = text.substring(0, i) + text.substring(i + 1)\n            } else if (text(i) == vowels.charAt(2)) {\n                text = text.substring(0, i) + text.substring(i + 1)\n            } else if (text(i) == vowels.charAt(3)) {\n                text = text.substring(0, i) + text.substring(i + 1)\n            } else if (text(i) == vowels.charAt(4)) {\n                text = text.substring(0, i) + text.substring(i + 1)\n            } else {\n                result = result + text(i)\n            }\n            i += 1\n        }\n        result"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return true if all numbers in the list l are below threshold t.\n    // >>> belowThreshold((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 10l.toLong)), (100l))\n    // (true)\n    // >>> belowThreshold((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)), (5l))\n    // (false)\n    def belowThreshold(l : List[Long], t : Long) : Boolean = {\n        val lLen = l.length\n        for (i <- 0 until lLen) {\n            if (l(i) > t) {\n                return false\n            }\n        }\n        true"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Add two numbers x and y\n    // >>> add((2l), (3l))\n    // (5l)\n    // >>> add((5l), (7l))\n    // (12l)\n    def add(x : Long, y : Long) : Long = {\n        val z = x + y\n        z"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Check if two words have the same characters.\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> sameChars((\"abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> sameChars((\"dddddddabc\"), (\"abcd\"))\n    // (true)\n    // >>> sameChars((\"eabcd\"), (\"dddddddabc\"))\n    // (false)\n    // >>> sameChars((\"abcd\"), (\"dddddddabce\"))\n    // (false)\n    // >>> sameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    // (false)\n    def sameChars(s0 : String, s1 : String) : Boolean = {\n        val s0Chars = s0.toCharArray\n        val s1Chars = s1.toCharArray\n        val s0Map = Map(s0Chars.indices.toList.toMap)\n        val s1Map = Map(s1Chars.indices.toList.toMap)\n        for (i <- s0Map.keys) {\n            for (j <- s1Map.keys) {\n                if (s0Map(i) != s1Map(j)) {\n                    return false\n                }\n            }\n        }\n        true"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n    // (55l)\n    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n    def fib(n : Long) : Long = {\n        var a = 1\n        var b = 1\n        var i = 0\n        while (i < n) {\n            a = a + b\n            b = a\n            i = i + 1\n        }\n        a"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"<\"))\n    // (false)\n    // >>> correctBracketing((\"<>\"))\n    // (true)\n    // >>> correctBracketing((\"<<><>>\"))\n    // (true)\n    // >>> correctBracketing((\"><<>\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean = {\n        var stack = Stack[String]()\n        for (bracket <- brackets) {\n            if (bracket == \"<\") {\n                stack.push(bracket)\n            } else if (bracket == \">\") {\n                stack.pop()\n            } else if (bracket == \"(\") {\n                stack.push(bracket)\n            } else if (bracket == \")\") {\n                stack.pop()\n            } else if (bracket == \"[\" || bracket == \"]\" || bracket == \"{\" || bracket == \"}\" || bracket == \"|\") {\n                stack.push(bracket)\n            } else if (bracket == \"|\") {\n                stack.pop()\n            }\n        }\n        if (stack.isEmpty) {\n            return false\n        } else {\n            return true\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return true is list elements are monotonically increasing or decreasing.\n    // >>> monotonic((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 20l.toLong)))\n    // (true)\n    // >>> monotonic((List[Long](1l.toLong, 20l.toLong, 4l.toLong, 10l.toLong)))\n    // (false)\n    // >>> monotonic((List[Long](4l.toLong, 1l.toLong, 0l.toLong, -10l.toLong)))\n    // (true)\n    def monotonic(l : List[Long]) : Boolean = {\n        val sorted = l.sortBy(_._2)\n        sorted.head == l.head"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return sorted unique common elements for two lists.\n    // >>> common((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 34l.toLong, 653l.toLong, 2l.toLong, 5l.toLong)), (List[Long](5l.toLong, 7l.toLong, 1l.toLong, 5l.toLong, 9l.toLong, 653l.toLong, 121l.toLong)))\n    // (List[Long](1l.toLong, 5l.toLong, 653l.toLong))\n    // >>> common((List[Long](5l.toLong, 3l.toLong, 2l.toLong, 8l.toLong)), (List[Long](3l.toLong, 2l.toLong)))\n    // (List[Long](2l.toLong, 3l.toLong))\n    def common(l1 : List[Long], l2 : List[Long]) : List[Long] = {\n        val l1_sorted = l1.sorted\n        val l2_sorted = l2.sorted\n        val l1_unique = l1_sorted.toSet\n        val l2_unique = l2_sorted.toSet\n        val l1_common = l1_unique.intersect(l2_unique)\n        l1_sorted.toList.sorted.toList.intersect(l1_common)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    // >>> largestPrimeFactor((13195l))\n    // (29l)\n    // >>> largestPrimeFactor((2048l))\n    // (2l)\n    def largestPrimeFactor(n : Long) : Long = {\n        val (primeFactors, primeFactor) = n.factorize\n        primeFactors.max"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // sum_to_n is a function that sums numbers from 1 to n.\n    // >>> sumToN((30l))\n    // (465l)\n    // >>> sumToN((100l))\n    // (5050l)\n    // >>> sumToN((5l))\n    // (15l)\n    // >>> sumToN((10l))\n    // (55l)\n    // >>> sumToN((1l))\n    // (1l)\n    def sumToN(n : Long) : Long = {\n        val sum = 0\n        for (i <- 1 to n) {\n            sum += i\n        }\n        sum"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return true if every opening bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"(\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n    // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\")(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean = {\n        val brackets = brackets.replaceAll(\"\\\\([\\\\s\\\\S]*\\\\)\", \"\").replaceAll(\"\\\\)([\\\\s\\\\S]*\\\\)\")\n        val brackets = brackets.replaceAll(\"\\\\)([\\\\s\\\\S]*\\\\)\").replaceAll(\"\\\\)([\\\\s\\\\S]*\\\\)\")\n        val brackets = brackets.replaceAll(\"\\\\)([\\\\s\\\\S]*\\\\)\").replaceAll(\"\\\\)([\\\\s\\\\S]*\\\\)\")\n        val brackets = brackets.replaceAll(\"\\\\)([\\\\s\\\\S]*\\\\)\").replaceAll(\"\\\\)([\\\\s\\\\S]*\\\\)\")\n        val brackets = brackets.replaceAll(\"\\\\)([\\\\s\\\\S]*\\\\)\").replaceAll(\"\\\\)([\\\\s\\\\S]*\\\\)\")\n        val brackets = brackets.replaceAll(\"\\\\)([\\\\s\\\\S]*\\\\)\").replaceAll(\"\\\\)([\\\\s\\\\S]*\\\\)\")\n        val brackets = brackets.replaceAll(\"\\\\)([\\\\s\\\\S]*\\\\)\").replaceAll(\"\\\\)([\\\\s\\\\S]*\\\\)\")\n        val brackets = brackets.replaceAll(\"\\\\)([\\\\s\\\\S]*\\\\)\").replaceAll(\"\\\\)([\\\\s\\\\S]*\\\\)\")\n        val brackets = brackets.replaceAll(\"\\\\)([\\\\s\\\\S]*\\\\)\").replaceAll(\"\\\\)([\\\\s\\\\S]*\\\\)\")\n        val brackets = brackets.replaceAll(\"\\\\)([\\\\s\\\\S]*\\\\)\").replaceAll(\"\\\\)([\\\\s\\\\S]*\\\\)\")\n        val brackets = brackets.replaceAll(\"\\\\)([\\\\s\\\\S]*\\\\)\").replaceAll(\"\\\\)([\\\\s\\\\S]*\\\\"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // xs represent coefficients of a polynomial.\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // Return derivative of this polynomial in the same form.\n    // >>> derivative((List[Long](3l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 12l.toLong, 20l.toLong))\n    // >>> derivative((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 6l.toLong))\n    def derivative(xs : List[Long]) : List[Long] = {\n        xs.map(x => x.toLong).toList"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    // fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n    def fibfib(n : Long) : Long = {\n        if (n <= 0) 0\n        else fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function vowels_count which takes a string representing\n    // a word as input and returns the number of vowels in the string.\n    // Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    // vowel, but only when it is at the end of the given word.\n    // Example:\n    // >>> vowelsCount((\"abcde\"))\n    // (2l)\n    // >>> vowelsCount((\"ACEDY\"))\n    // (3l)\n    def vowelsCount(s : String) : Long = {\n        val vowels = List(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val count = vowels.count(_ in s)\n        count"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Circular shift the digits of the integer x, shift the digits right by shift\n    // and return the result as a string.\n    // If shift > number of digits, return digits reversed.\n    // >>> circularShift((12l), (1l))\n    // (\"21\")\n    // >>> circularShift((12l), (2l))\n    // (\"12\")\n    def circularShift(x : Long, shift : Long) : String = {\n        val digits = x.toString.split(\"\").map(_.toInt).toArray\n        val shiftedDigits = digits.map(_.shiftRight(shift)).toArray\n        if (shift > digits.length) {\n            shiftedDigits.reverse\n        } else {\n            shiftedDigits\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Task\n    // Write a function that takes a string as input and returns the sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n    // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n    // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String) : Long = {\n        val sum = 0\n        for (i <- 0 until s.length) {\n            if (s(i).isDigit) {\n                sum += (s(i).toInt)\n            }\n        }\n        sum"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // In this task, you will be given a string that represents a number of apples and oranges \n    // that are distributed in a basket of fruit this basket contains \n    // apples, oranges, and mango fruits. Given the string that represents the total number of \n    // the oranges and apples and an integer that represent the total number of the fruits \n    // in the basket return the number of the mango fruits in the basket.\n    // for examble:\n    // >>> fruitDistribution((\"5 apples and 6 oranges\"), (19l))\n    // (8l)\n    // >>> fruitDistribution((\"0 apples and 1 oranges\"), (3l))\n    // (2l)\n    // >>> fruitDistribution((\"2 apples and 3 oranges\"), (100l))\n    // (95l)\n    // >>> fruitDistribution((\"100 apples and 1 oranges\"), (120l))\n    // (19l)\n    def fruitDistribution(s : String, n : Long) : Long = {\n        val apples = s.split(\" \").map(_.toInt).sum\n        val oranges = s.split(\" \").map(_.toInt).sum\n        val mangoes = s.split(\" \").map(_.toInt).sum\n        val totalApples = apples + oranges\n        val totalOranges = oranges + mangoes\n        val totalFruits = totalApples + totalOranges\n        val totalMangoes = totalApples + totalOranges - mangoes\n        totalFruits - totalMangoes"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // \"Given a list representing a branch of a tree that has non-negative integer nodes\n    // your task is to pluck one of the nodes and return it.\n    // The plucked node should be the node with the smallest even value.\n    // If multiple nodes with the same smallest even value are found return the node that has smallest index.\n    // The plucked node should be returned in a list, [ smalest_value, its index ],\n    // If there are no even values or the given list is empty, return [].\n    // Example 1:\n    // >>> pluck((List[Long](4l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 1l.toLong))\n    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> pluck((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[Long](2l.toLong, 1l.toLong))\n    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n    // >>> pluck((List[Long]()))\n    // (List[Long]())\n    // Example 4:\n    // >>> pluck((List[Long](5l.toLong, 0l.toLong, 3l.toLong, 0l.toLong, 4l.toLong, 2l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n    // so we will choose the first zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n    def pluck(arr : List[Long]) : List[Long] = {\n        var smallest_value : Long ="], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    // zero, and has a frequency greater than or equal to the value of the integer itself. \n    // The frequency of an integer is the number of times it appears in the list.\n    // If no such a value exist, return -1.\n    // Examples:\n    // >>> search((List[Long](4l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong)))\n    // (2l)\n    // >>> search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 4l.toLong)))\n    // (3l)\n    // >>> search((List[Long](5l.toLong, 5l.toLong, 4l.toLong, 4l.toLong, 4l.toLong)))\n    // (-1l)\n    def search(lst : List[Long]) : Long = {\n        var max = -1\n        var maxFreq = 0\n        for (i <- lst) {\n            if (i > 0) {\n                if (i > max) {\n                    max = i\n                    maxFreq = 1\n                } else if (maxFreq < i) {\n                    maxFreq += 1\n                } else {\n                    maxFreq = 1\n                }\n            }\n        }\n        if (maxFreq == 0) {\n            -1\n        } else {\n            max\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given list of integers, return list in strange order.\n    // Strange sorting, is when you start with the minimum value,\n    // then maximum of the remaining integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))\n    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n    def strangeSortList(lst : List[Long]) : List[Long] = {\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b = 0\n        var c = 0\n        var d = 0\n        var e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return the area of\n    // the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    // Otherwise return -1\n    // Three sides make a valid triangle when the sum of any two sides is greater \n    // than the third side.\n    // Example:\n    // >>> triangleArea((3l), (4l), (5l))\n    // (6.0f)\n    // >>> triangleArea((1l), (2l), (10l))\n    // -1l\n    def triangleArea(a : Long, b : Long, c : Long) : Float = {\n        if (a == 0 || b == 0 || c == 0) {\n            -1l\n        } else if (a == b || a == c || b == c) {\n            -1l\n        } else {\n            (a + b + c) / 2.0\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that returns true if the object q will fly, and false otherwise.\n    // The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)), (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight, and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    // (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n    def willItFly(q : List[Long], w : Long) : Boolean = {\n        val sum = q.sum\n        val weight = sum / w\n        if (weight > w) {\n            return false\n        } else if (weight < 1) {\n            return false\n        } else if (sum < 0) {\n            return false\n        } else if (sum % 2 == 0) {\n            return false\n        } else {\n            return true\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list arr of integers, find the minimum number of elements that\n    // need to be changed to make the list palindromic. A palindromic list is a list that\n    // is read the same backwards and forwards. In one change, you can change one element to any other element.\n    // For example:\n    // >>> smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 6l.toLong)))\n    // (4l)\n    // >>> smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 2l.toLong)))\n    // (1l)\n    // >>> smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong, 1l.toLong)))\n    // (0l)\n    def smallestChange(arr : List[Long]) : Long = {\n        var min = 0\n        var i = 0\n        var j = 0\n        var change = 0\n        while (i < arr.length && j < arr.length) {\n            if (arr(i) != arr(j)) {\n                if (arr(i) < arr(j)) {\n                    min = i\n                    i += 1\n                } else {\n                    min = j\n                    j += 1\n                }\n                change = 1\n            } else {\n                change = 0\n            }\n        }\n        if (change == 0) {\n            min = arr.length - 1\n        }\n        min"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts two lists of strings and returns the list that has \n    // total number of chars in the all strings of the list less than the other list.\n    // if the two lists have the same number of chars, return the first list.\n    // Examples\n    // >>> totalMatch((List[String]()), (List[String]()))\n    // (List[String]())\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\", \"Hi\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"))\n    // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"4\", \"5\")))\n    // (List[String](\"4\"))\n    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String] = {\n        lst1.foldLeft(lst2)(_ + _)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is less then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    // (true)\n    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean = {\n        var prime = 3\n        var isPrime = true\n        while (isPrime) {\n            if (a % prime == 0) {\n                isPrime = false\n            }\n            prime += 2\n        }\n        isPrime"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Your task is to write a function that returns true if a number x is a simple\n    // power of n and false in other cases.\n    // x is a simple power of n if n**int=x\n    // For example:\n    // >>> isSimplePower((1l), (4l))\n    // (true)\n    // >>> isSimplePower((2l), (2l))\n    // (true)\n    // >>> isSimplePower((8l), (2l))\n    // (true)\n    // >>> isSimplePower((3l), (2l))\n    // (false)\n    // >>> isSimplePower((3l), (1l))\n    // (false)\n    // >>> isSimplePower((5l), (3l))\n    // (false)\n    def isSimplePower(x : Long, n : Long) : Boolean = {\n        if (n == 1l) {\n            x == 1l\n        } else if (n == 2l) {\n            x == 1l\n        } else if (n == 3l) {\n            x == 1l\n        } else if (n == 4l) {\n            x == 1l\n        } else if (n == 5l) {\n            x == 1l\n        } else if (n == 6l) {\n            x == 1l\n        } else if (n == 7l) {\n            x == 1l\n        } else if (n == 8l) {\n            x == 1l\n        } else if (n == 9l) {\n            x == 1l\n        } else if (n == 10l) {\n            x == 1l\n        } else if (n == 11l) {\n            x == 1l\n        } else if (n == 12l) {\n            x == 1l\n        } else if (n == 13l) {\n            x == 1l\n        } else if (n == 14l) {\n            x == 1l\n        } else if (n == 15l"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes an integer a and returns true \n    // if this ingeger is a cube of some integer number.\n    // Note: you may assume the input is always valid.\n    // Examples:\n    // >>> iscube((1l))\n    // (true)\n    // >>> iscube((2l))\n    // (false)\n    // >>> iscube((-1l))\n    // (true)\n    // >>> iscube((64l))\n    // (true)\n    // >>> iscube((0l))\n    // (true)\n    // >>> iscube((180l))\n    // (false)\n    def iscube(a : Long) : Boolean = {\n        if (a == 0l) return false\n        if (a == 1l) return true\n        if (a == 2l) return true\n        if (a == 3l) return true\n        if (a == 4l) return true\n        if (a == 5l) return true\n        if (a == 6l) return true\n        if (a == 7l) return true\n        if (a == 8l) return true\n        if (a == 9l) return true\n        if (a == 10l) return true\n        if (a == 11l) return true\n        if (a == 12l) return true\n        if (a == 13l) return true\n        if (a == 14l) return true\n        if (a == 15l) return true\n        if (a == 16l) return true\n        if (a == 17l) return true\n        if (a == 18l) return true\n        if (a == 19l) return true\n        if (a == 20l) return true\n        if (a == 21l) return true\n        if (a == 22l) return true\n        if (a == 23l) return true\n        if (a == 24l) return true\n        if (a == "], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have been tasked to write a function that receives \n    // a hexadecimal number as a string and counts the number of hexadecimal \n    // digits that are primes (prime number, or a prime, is a natural number \n    // greater than 1 that is not a product of two smaller natural numbers).\n    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>> hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n        val hexDigits = \"0123456789ABCDEF\"\n        val hexDigitsList = hexDigits.split(\"\")\n        val hexDigitsListLength = hexDigitsList.length\n        val hexDigitsListLength2 = hexDigitsList.length\n        val hexDigitsListLength3 = hexDigitsList.length\n        val hexDigitsListLength4 = hexDigitsList.length\n        val hexDigitsListLength5 = hexDigitsList.length\n        val hexDigits"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a number in decimal form and your task is to convert it to\n    // binary format. The function should return a string, with each character representing a binary\n    // number. Each character in the string will be '0' or '1'.\n    // There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    // The extra characters are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\")\n    def decimalToBinary(decimal : Long) : String = {\n        val binary = decimal.toString.split(\"\").map(_.toBinaryString).mkString(\"\")\n        binary.take(binary.length - 2) ++ \"db\""], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a string s.\n    // Your task is to check if the string is hapscala or not.\n    // A string is hapscala if its length is at least 3 and every 3 consecutive letters are distinct\n    // For example:\n    // >>> isHappy((\"a\"))\n    // (false)\n    // >>> isHappy((\"aa\"))\n    // (false)\n    // >>> isHappy((\"abcd\"))\n    // (true)\n    // >>> isHappy((\"aabb\"))\n    // (false)\n    // >>> isHappy((\"adb\"))\n    // (true)\n    // >>> isHappy((\"xyy\"))\n    // (false)\n    def isHappy(s : String) : Boolean = {\n        val n = s.length\n        if (n < 3) {\n            return false\n        }\n        var i = 0\n        var j = 0\n        while (i < n && j < n) {\n            if (s(i) == s(j)) {\n                i += 1\n                j += 1\n            } else if (s(i) == s(j)) {\n                i += 1\n            } else if (s(i) == s(j)) {\n                j += 1\n            } else {\n                return false\n            }\n        }\n        i == n && j == n"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // It is the last week of the semester and the teacher has to give the grades\n    // to students. The teacher has been making her own algorithm for grading.\n    // The only problem is, she has lost the code she used for grading.\n    // She has given you a list of GPAs for some students and you have to write \n    // a function that can output a list of letter grades using the following table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7                A \n    // > 3.3                A- \n    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3                B-\n    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7                D \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n    // >>> gradeEquation((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat)))\n    // (List[String](\"A+\", \"B\", \"C-\", \"C\", \"A-\"))\n    def numericalLetterGrade(grades : List[Float]) : List[String] = {\n        // This function takes a list of GPAs and returns a list of letter grades\n        // using the following table:\n        // GPA       |    Letter grade\n        // 4.0                A+\n        // > 3.7                A \n        // > 3.3                A- \n        // > 3.0                B+\n        // > 2.7                B \n        // > 2.3                B-\n        // > 2.0                C+\n        // > 1.7                C\n        // > 1.3                C-\n       "], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a string and returns true if the string\n    // length is a prime number or false otherwise\n    // Examples\n    // >>> primeLength((\"Hello\"))\n    // (true)\n    // >>> primeLength((\"abcdcba\"))\n    // (true)\n    // >>> primeLength((\"kittens\"))\n    // (true)\n    // >>> primeLength((\"orange\"))\n    // (false)\n    def primeLength(string : String) : Boolean = {\n        if (string.length == 0) {\n            false\n        } else if (string.length == 1) {\n            true\n        } else if (string.length == 2) {\n            true\n        } else if (string.length == 3) {\n            true\n        } else if (string.length == 4) {\n            true\n        } else if (string.length == 5) {\n            true\n        } else if (string.length == 6) {\n            true\n        } else if (string.length == 7) {\n            true\n        } else if (string.length == 8) {\n            true\n        } else if (string.length == 9) {\n            true\n        } else if (string.length == 10) {\n            true\n        } else if (string.length == 11) {\n            true\n        } else if (string.length == 12) {\n            true\n        } else if (string.length == 13) {\n            true\n        } else if (string.length == 14) {\n            true\n        } else if (string.length == 15) {\n            true\n        } else if (string.length == 16) {\n            true\n        } else if (string.length == 17) {\n            true\n        } else if (string.length == 18) {\n            true\n        } else if (string.length == 19) {\n            true\n        } else if (string.length == 20) {\n            true\n        } else if (string.length == 2"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the count of the numbers of n-digit\n    // positive integers that start or end with 1.\n    def startsOneEnds(n : Long) : Long = {\n        var count = 0\n        var i = 1\n        while (i <= n) {\n            if (i % 10 == 1) {\n                count += 1\n            }\n            i += 1\n        }\n        count"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer N, return the total sum of its digits in binary.\n    // Example\n    // >>> solve((1000l))\n    // (\"1\")\n    // >>> solve((150l))\n    // (\"110\")\n    // >>> solve((147l))\n    // (\"1100\")\n    // Variables:\n    // @N integer\n    // Constraints: 0 \u2264 N \u2264 10000.\n    // Output:\n    // a string of binary number\n    def solve(N : Long) : String = {\n        var sum = 0\n        var i = 0\n        while (N > 0) {\n            var digit = N % 10\n            sum += digit\n            N /= 10\n        }\n        sum"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty list of integers lst. add the even elements that are at odd indices..\n    // Examples:\n    // >>> add((List[Long](4l.toLong, 2l.toLong, 6l.toLong, 7l.toLong)))\n    // (2l)\n    def add(lst : List[Long]) : Long = {\n        var even = List[Long]()\n        var odd = List[Long]()\n        for (i <- lst.indices) {\n            if (i % 2 == 0) {\n                even += lst(i)\n            } else {\n                odd += lst(i)\n            }\n        }\n        even.mkString(\",\").toLong"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a string and returns an ordered version of it.\n    // Ordered version of string, is a string where all words (separated by space)\n    // are replaced by a new word where all the characters arranged in\n    // ascending order based on ascii value.\n    // Note: You should keep the order of words and blank spaces in the sentence.\n    // For example:\n    // >>> antiShuffle((\"Hi\"))\n    // (\"Hi\")\n    // >>> antiShuffle((\"hello\"))\n    // (\"ehllo\")\n    // >>> antiShuffle((\"Hello World!!!\"))\n    // (\"Hello !!!Wdlor\")\n    def antiShuffle(s : String) : String = {\n        val words = s.split(\" \")\n        val newWords = words.map(_.toLowerCase).sorted\n        newWords.mkString(\" \")"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n    // which is similar to matrix, however, unlike matrices,\n    // each row may contain a different number of columns.\n    // Given lst, and integer x, find integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    // each tuple is a coordinate - (row, columns), starting with 0.\n    // Sort coordinates initially by rows in ascending order.\n    // Also, sort coordinates of the row by columns in descending order.\n    // Examples:\n    // >>> getRow((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 6l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))), (1l))\n    // (List[Tuple2[Long, Long]]((0l, 0l), (1l, 4l), (1l, 0l), (2l, 5l), (2l, 0l)))\n    // >>> getRow((List[List[Long]]()), (1l))\n    // (List[Tuple2[Long, Long]]())\n    // >>> getRow((List[List[Long]](List[Long](), List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong))), (3l))\n    // (List[Tuple2[Long, Long]]((2l, 2l)))\n    def getRow(lst : List[List[Long]], x : Long) : List[Tuple2[Long, Long]] = {"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of non-negative integers, return a coscala of the given list after sorting,\n    // you will sort the given list in ascending order if the sum( first index value, last index value) is odd,\n    // or sort it in descending order if the sum( first index value, last index value) is even.\n    // Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> sortArray((List[Long]()))\n    // (List[Long]())\n    // >>> sortArray((List[Long](5l.toLong)))\n    // (List[Long](5l.toLong))\n    // >>> sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    // >>> sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong)))\n    // (List[Long](6l.toLong, 5l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))\n    def sortArray(array : List[Long]) : List[Long] = {\n        val sortedArray = array.sortBy(_._1)\n        sortedArray.reverse"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function encrypt that takes a string as an argument and\n    // returns a string encrypted with the alphabet being rotated. \n    // The alphabet should be rotated in a manner such that the letters \n    // shift down by two multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n    // (\"ix\")\n    def encrypt(s : String) : String = {\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        val rotatedAlphabet = alphabet.map(_.charAt(1))\n        val rotatedString = s.map(_.charAt(0)).mkString(\"\")\n        rotatedString.map(rotatedAlphabet.map(_.toChar)).mkString(\"\")"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // Write a function next_smallest() that returns the 2nd smallest element of the list.\n    // Return None if there is no such element.\n    // >>> nextSmallest((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n    // Some(2l)\n    // >>> nextSmallest((List[Long](5l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 2l.toLong)))\n    // Some(2l)\n    // >>> nextSmallest((List[Long]()))\n    // None\n    // >>> nextSmallest((List[Long](1l.toLong, 1l.toLong)))\n    // None\n    def nextSmallest(lst : List[Long]) : Option[Long] = {\n        if (lst.isEmpty) {\n            None\n        } else {\n            val min = lst.min\n            val nextSmallest = lst.head\n            if (nextSmallest.isDefined) {\n                nextSmallest.get\n            } else {\n                Some(min)\n            }\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You'll be given a string of words, and your task is to count the number\n    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    // >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S : String) : Long = {\n        val words = S.split(\"\\\\s+\")\n        val boredom = words.filter(_.startsWith(\"I\")).length\n        boredom"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that takes 3 numbers.\n    // Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    // Returns false in any other cases.\n    // Examples\n    // >>> anyInt(5l, 2l, 7l)\n    // (true)\n    // >>> anyInt(3l, 2l, 2l)\n    // (false)\n    // >>> anyInt(3l, -2l, 1l)\n    // (true)\n    // >>> anyInt((3.6f), (-2.2f), 2l)\n    // (false)\n    def anyInt(x : Float, y : Float, z : Float) : Boolean = {\n        // Create a mutable list of integers.\n        val intList = mutable.ListBuffer.empty[Int]\n        // Create a mutable list of floats.\n        val floatList = mutable.ListBuffer.empty[Float]\n        // Create a mutable list of integers.\n        val intList2 = mutable.ListBuffer.empty[Int]\n        // Create a mutable list of floats.\n        val floatList2 = mutable.ListBuffer.empty[Float]\n        // Create a mutable list of integers.\n        val intList3 = mutable.ListBuffer.empty[Int]\n        // Create a mutable list of floats.\n        val floatList3 = mutable.ListBuffer.empty[Float]\n        // Create a mutable list of integers.\n        val intList4 = mutable.ListBuffer.empty[Int]\n        // Create a mutable list of floats.\n        val floatList4 = mutable.ListBuffer.empty[Float]\n        // Create a mutable list of integers.\n        val intList5 = mutable.ListBuffer.empty[Int]\n        // Create a mutable list of floats.\n        val floatList5 = mutable.ListBuffer.empty[Float]\n        // Create a mutable list of integers.\n        val intList6 = mutable.ListBuffer.empty[Int]\n        // Create a mutable list of floats.\n        val floatList6 = mutable.ListBuffer.empty[Float]\n        //"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a message, and encodes in such a \n    // way that it swaps case of all letters, replaces all vowels in \n    // the message with the letter that appears 2 places ahead of that \n    // vowel in the english alphabet. \n    // Assume only letters. \n    // Examples:\n    // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    def encode(message : String) : String = {\n        val vowels = \"aeiouAEIOU\"\n        val message = message.toLowerCase\n        val message = message.replaceAll(\"[aeiouAEIOU]\", vowels.head)\n        val message = message.replaceAll(\"[aeiouAEIOU]\", vowels.tail)\n        val message = message.replaceAll(\"[aeiouAEIOU]\", vowels.tail)\n        val message = message.replaceAll(\"[aeiouAEIOU]\", vowels.tail)\n        val message = message.replaceAll(\"[aeiouAEIOU]\", vowels.tail)\n        val message = message.replaceAll(\"[aeiouAEIOU]\", vowels.tail)\n        val message = message.replaceAll(\"[aeiouAEIOU]\", vowels.tail)\n        val message = message.replaceAll(\"[aeiouAEIOU]\", vowels.tail)\n        val message = message.replaceAll(\"[aeiouAEIOU]\", vowels.tail)\n        val message = message.replaceAll(\"[aeiouAEIOU]\", vowels.tail)\n        val message = message.replaceAll(\"[aeiouAEIOU]\", vowels.tail)\n        val message = message.replaceAll(\"[aeiouAEIOU]\", vowels.tail)\n        val message = message.replaceAll(\"[aeiouAEIOU]\", vowels.tail)\n        val message"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of integers.\n    // You need to find the largest prime value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong, 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    // (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a map, return true if all keys are strings in lower \n    // case or all keys are strings in upper case, else return false.\n    // The function should return false is the given map is empty.\n    // Examples:\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String]) : Boolean = {\n        val keys = dict.keys.toSet\n        keys.exists(_.isUpperCase) && keys.exists(_.isLowerCase)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Implement a function that takes an non-negative integer and returns a list of the first n\n    // integers that are prime numbers and less than n.\n    // for example:\n    // >>> countUpTo((5l))\n    // (List[Long](2l.toLong, 3l.toLong))\n    // >>> countUpTo((11l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))\n    // >>> countUpTo((0l))\n    // (List[Long]())\n    // >>> countUpTo((20l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong, 19l.toLong))\n    // >>> countUpTo((1l))\n    // (List[Long]())\n    // >>> countUpTo((18l))\n    // (List[Long](2l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))\n    def countUpTo(n : Long) : List[Long] = {\n        val count = List.empty[Long]\n        var i = 2\n        while (i <= n) {\n            if (isPrime(i)) {\n                count = i :: count\n            }\n            i += 1\n        }\n        count"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Complete the function that takes two integers and returns \n    // the product of their unit digits.\n    // Assume the input is always valid.\n    // Examples:\n    // >>> multiply((148l), (412l))\n    // (16l)\n    // >>> multiply((19l), (28l))\n    // (72l)\n    // >>> multiply((2020l), (1851l))\n    // (0l)\n    // >>> multiply((14l), (-15l))\n    // (20l)\n    def multiply(a : Long, b : Long) : Long = {\n        if (a == 0 || b == 0) {\n            return 0\n        }\n        else if (a == 1) {\n            return b\n        }\n        else if (b == 1) {\n            return a\n        }\n        else {\n            return a * b\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string s, count the number of uppercase vowels in even indices.\n    // For example:\n    // >>> countUpper((\"aBCdEf\"))\n    // (1l)\n    // >>> countUpper((\"abcdefg\"))\n    // (0l)\n    // >>> countUpper((\"dBBE\"))\n    // (0l)\n    def countUpper(s : String) : Long = {\n        val vowels = s.toSet.filter(_.isUpper)\n        vowels.count(_.isUpper)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that takes a value (string) representing a number\n    // and returns the closest integer to it. If the number is equidistant\n    // from two integers, round it away from zero.\n    // Examples\n    // >>> closestInteger((\"10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"))\n    // (15l)\n    // Note:\n    // Rounding away from zero means that if the given number is equidistant\n    // from two integers, the one you should return is the one that is the\n    // farthest from zero. For example closest_integer(\"14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n    def closestInteger(value : String) : Long = {\n        // Create a mutable map of the integers from 0 to 1000000000\n        val map = mutable.Map.empty[Long, Long]\n        // Create a mutable map of the integers from 0 to 1000000000\n        val map2 = mutable.Map.empty[Long, Long]\n        // Create a mutable map of the integers from 0 to 1000000000\n        val map3 = mutable.Map.empty[Long, Long]\n        // Create a mutable map of the integers from 0 to 1000000000\n        val map4 = mutable.Map.empty[Long, Long]\n        // Create a mutable map of the integers from 0 to 1000000000\n        val map5 = mutable.Map.empty[Long, Long]\n        // Create a mutable map of the integers from 0 to 1000000000\n        val map6 = mutable.Map.empty[Long, Long]\n        // Create a mutable map of the integers from 0 to 1000000000\n        val map7 = mutable.Map.empty[Long, Long]\n        // Create a mutable map of the integers from 0 to 1"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, you have to make a pile of n levels of stones.\n    // The first level has n stones.\n    // The number of stones in the next level is:\n    // - the next odd number if n is odd.\n    // - the next even number if n is even.\n    // Return the number of stones in each level in a list, where element at index\n    // i represents the number of stones in the level (i+1).\n    // Examples:\n    // >>> makeAPile((3l))\n    // (List[Long](3l.toLong, 5l.toLong, 7l.toLong))\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = List(n)\n        var i = 0\n        while (i < n) {\n            val odd = if (i % 2 == 0) n + 1 else n\n            val even = if (i % 2 == 0) n + 1 else n\n            pile = pile :+ odd\n            i += 1\n        }\n        pile"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given a string of words separated by commas or spaces. Your task is\n    // to split the string into words and return a list of the words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    // >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s : String) : List[String] = {\n      s.split(\",\").map(_.strip(\" \"))"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // This function takes two positive numbers x and y and returns the\n    // biggest even integer number that is in the range [x, y] inclusive. If \n    // there's no such number, then the function should return -1.\n    // For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l), (12l))\n    // (-1l)\n    def chooseNum(x : Long, y : Long) : Long = {\n        val x_to_y = x / y\n        if (x_to_y > 1) {\n            val x_to_y_prime = x_to_y.toInt\n            val y_to_x = y / x_to_y\n            if (y_to_x > 1) {\n                val y_to_x_prime = y_to_x.toInt\n                val x_to_y_prime_prime = x_to_y_prime.toInt\n                val x_to_y_prime_prime_prime = x_to_y_prime_prime.toInt\n                if (x_to_y_prime_prime_prime > 1) {\n                    val x_to_y_prime_prime_prime_prime = x_to_y_prime_prime_prime.toInt\n                    val x_to_y_prime_prime_prime_prime_prime = x_to_y_prime_prime_prime_prime.toInt\n                    if (x_to_y_prime_prime_prime_prime_prime > 1) {\n                        val x_to_y_prime_prime_prime_prime_prime_prime = x_to_y_prime_prime_prime_prime_prime.toInt\n                        val x_to_y_prime_prime_prime_prime_prime_prime_prime = x_to_y_prime_prime_prime_prime_prime_prime.toInt\n                        if (x_to_y_prime_prime_prime_prime_prime_prime_prime_prime_"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given two positive integers n and m, and your task is to compute the\n    // average of the integers from n through m (including n and m). \n    // Round the answer to the nearest integer and convert that to binary.\n    // If n is greater than m, return -1.\n    // Example:\n    // >>> roundedAvg((1l), (5l))\n    // \"0b11\"\n    // >>> roundedAvg((7l), (5l))\n    // -1l\n    // >>> roundedAvg((10l), (20l))\n    // \"0b1111\"\n    // >>> roundedAvg((20l), (33l))\n    // \"0b11010\"\n    def roundedAvg(n : Long, m : Long) : Either[String, Long] = {\n        val avg = (n + m) / 2\n        if (avg > m) -1 else avg"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of positive integers x. return a sorted list of all \n    // elements that hasn't any even digit.\n    // Note: Returned list should be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong, 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x : List[Long]) : List[Long] = {\n        val digits = List(1, 2, 3, 4, 5, 6, 7, 8, 9)\n        val result = List.empty[Long]\n        for (i <- x.indices) {\n            val digit = x(i)\n            if (digit.toString.contains(digits.mkString(\"\")) && !digits.contains(digit)) {\n                result = result :+ digit\n            }\n        }\n        result"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers, sort the integers that are between 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    // >>> byLength((List[Long](2l.toLong, 1l.toLong, 1l.toLong, 4l.toLong, 5l.toLong, 8l.toLong, 2l.toLong, 3l.toLong)))\n    // (List[String](\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"))\n    // If the list is empty, return an empty list:\n    // >>> byLength((List[Long]()))\n    // (List[String]())\n    // If the list has any strange number ignore it:\n    // >>> byLength((List[Long](1l.toLong, -1l.toLong, 55l.toLong)))\n    // (List[String](\"One\"))\n    def byLength(arr : List[Long]) : List[String] = {\n        val sorted = arr.sorted\n        val reversed = sorted.reverse\n        val digits = arr.map(_.toString).toList.map(_.toChar)\n        val name = digits.map(_.toChar).toList.map(_.toString)\n        val result = name.map(_.toUpperCase).toList\n        result.reverse"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Implement the function f that takes n as a parameter,\n    // and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n    // i starts from 1.\n    // the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    // >>> f((5l))\n    // (List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))\n    def f(n : Long) : List[Long] = {\n        val factors = scala.collection.mutable.ListBuffer.empty[Long]\n        for (i <- 1 until n) {\n            if (i % 2 == 0) {\n                factors += i\n            } else {\n                factors += i + factors.head\n            }\n        }\n        factors.toList"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return a tuple that has the number of even and odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd integer palindromes respectively.\n    def evenOddPalindrome(n : Long) : Tuple2[Long, Long] = {\n        val palindromes = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 11)\n        val oddPalindromes = palindromes.filter(_.toString.startsWith(\"11\")).toList\n        val evenPalindromes = palindromes.filter(_.toString.startsWith(\"11\")).toList\n        val oddPalindromes.zip(evenPalindromes).toTuple"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function count_nums which takes a list of integers and returns\n    // the number of elements which has a sum of digits > 0.\n    // If a number is negative, then its first signed digit will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    // >>> countNums((List[Long]()))\n    // (0l)\n    // >>> countNums((List[Long](-1l.toLong, 11l.toLong, -11l.toLong)))\n    // (1l)\n    // >>> countNums((List[Long](1l.toLong, 1l.toLong, 2l.toLong)))\n    // (3l)\n    def countNums(arr : List[Long]) : Long = {\n        var count = 0\n        for (i <- arr.indices) {\n            var sum = 0\n            var digit = arr(i)\n            while (digit != 0) {\n                sum += digit\n                digit = digit % 10\n            }\n            if (sum > 0) {\n                count += 1\n            }\n        }\n        count"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // We have a list 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    // numbers in the list will be randomly ordered. Your task is to determine if\n    // it is possible to get a list sorted in non-decreasing order by performing \n    // the following operation on the given list:\n    // You are allowed to perform right shift operation any number of times.\n    // One right shift operation means shifting all elements of the list by one\n    // position in the right direction. The last element of the list will be moved to\n    // the starting position in the list i.e. 0th index. \n    // If it is possible to obtain the sorted list by performing the above operation\n    // then return true else return false.\n    // If the given list is empty then return true.\n    // Note: The given list is guaranteed to have unique elements.\n    // For Example:\n    // >>> moveOneBall((List[Long](3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong, 2l.toLong)))\n    // (true)\n    // Explanation: By performin 2 right shift operations, non-decreasing order can\n    // be achieved for the given list.\n    // >>> moveOneBall((List[Long](3l.toLong, 5l.toLong, 4l.toLong, 1l.toLong, 2l.toLong)))\n    // (false)\n    // Explanation:It is not possible to get non-decreasing order for the given\n    // list by performing any number of right shift operations.\n    def moveOneBall(arr : List[Long]) : Boolean = {\n        val n = arr.length\n        if(n == 0) return true\n        if(n == 1) return arr(0) < arr(1)\n        if(n == 2) return arr(0) < arr(1) && arr(1) < arr(2)\n        if(n == 3) return arr(0) < arr(1) && arr(1) <"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // In this problem, you will implement a function that takes two lists of numbers,\n    // and determines whether it is possible to perform an exchange of elements\n    // between them to make lst1 a list of only even numbers.\n    // There is no limit on the number of exchanged elements between lst1 and lst2.\n    // If it is possible to exchange elements between the lst1 and lst2 to make\n    // all the elements of lst1 to be even, return \"YES\".\n    // Otherwise, return \"NO\".\n    // For example:\n    // >>> exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (\"YES\")\n    // >>> exchange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (List[Long](1l.toLong, 5l.toLong, 3l.toLong, 4l.toLong)))\n    // (\"NO\")\n    // It is assumed that the input lists will be non-empty.\n    def exchange(lst1 : List[Long], lst2 : List[Long]) : String = {\n        val even = lst1.filter(_.toLong % 2 == 0)\n        if (even.length == 0) {\n            \"NO\"\n        } else if (lst1.length == 1) {\n            \"YES\"\n        } else {\n            \"NO\"\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string representing a space separated lowercase letters, return a map\n    // of the letter with the most repetition and containing the corresponding count.\n    // If several letters have the same occurrence, return all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"a b c a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>> histogram((\"\"))\n    // (Map[String,Long]())\n    def histogram(test : String) : Map[String,Long] = {\n        val map = mutable.Map.empty[String, Long]\n        test.split(\" \").foreach {\n            case \"a\" => map += (\"a\", 1)\n            case \"b\" => map += (\"b\", 1)\n            case \"c\" => map += (\"c\", 1)\n            case \"a\" => map += (\"a\", 1)\n            case \"b\" => map += (\"b\", 1)\n            case \"c\" => map += (\"c\", 1)\n            case _ => throw new IllegalArgumentException(\"Invalid word\")\n        }\n        map"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Task\n    // We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    // then check if the result string is palindrome.\n    // A string is called palindrome if it reads the same backward as forward.\n    // You should return a tuple containing the result string and true/false for the check.\n    // Example\n    // >>> reverseDelete((\"abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>> reverseDelete((\"abcdef\"), (\"b\"))\n    // ((\"acdef\", false))\n    // >>> reverseDelete((\"abcdedcba\"), (\"ab\"))\n    // ((\"cdedc\", true))\n    def reverseDelete(s : String, c : String) : Tuple2[String, Boolean] = {\n        val result = s.replaceAll(\"\\\\b\" + c + \"\\\\b\", \"\")\n        val check = result == s\n        (result, check)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of strings, where each string consists of only digits, return a list.\n    // Each element i of the output should be \"the number of odd elements in the\n    // string i of the input.\" where all the i's should be replaced by the number\n    // of odd digits in the i'th string of the input.\n    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n        lst.map(_.count(_.isDigit) match {\n            case true => \"the number of odd elements \" + (if (lst.length % 2 == 0) \"n the str\" else \"n the strnput.\") + \" in the str\"\n            case false => \"the number of odd elements \" + (if (lst.length % 2 == 0) \"n the str\" else \"n the strnput.\") + \" in the str\"\n        }).mkString(\", \")"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of integers nums, find the minimum sum of any non-empty sub-list\n    // of nums.\n    // Example\n    // >>> minSubArraySum((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong, 2l.toLong, 4l.toLong)))\n    // (1l)\n    // >>> minSubArraySum((List[Long](-1l.toLong, -2l.toLong, -3l.toLong)))\n    // (-6l)\n    def minSubArraySum(nums : List[Long]) : Long = {\n        val n = nums.length\n        val sum = 0\n        val max = nums.max\n        for (i <- 0 until n) {\n            sum += nums(i)\n            if (sum > max) {\n                max = sum\n            }\n        }\n        sum"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a rectangular grid of wells. Each row represents a single well,\n    // and each 1 in a row represents a single unit of water.\n    // Each well has a corresponding bucket that can be used to extract water from it, \n    // and all buckets have the same capacity.\n    // Your task is to use the buckets to empty the wells.\n    // Output the number of times you need to lower the buckets.\n    // Example 1:\n    // >>> maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 0l.toLong), List[Long](0l.toLong, 1l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (1l))\n    // (6l)\n    // Example 2:\n    // >>> maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong), List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong), List[Long](0l.toLong, 1l.toLong, 1l.toLong, 1l.toLong))), (2l))\n    // (5l)\n    // Example 3:\n    // >>> maxFill((List[List[Long]](List[Long](0l.toLong, 0l.toLong, 0l.toLong), List[Long](0l.toLong, 0l.toLong, 0l.toLong))), (5l))\n    // (0l)\n    // Constraints:\n    // * all wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    def maxFill(grid : List[List[Long]], capacity : Long) : Long = {"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // In this Kata, you have to sort a list of non-negative integers according to\n    // number of ones in their binary representation in ascending order.\n    // For similar number of ones, sort based on decimal value.\n    // It must be implemented like this:\n    // >>> sortArray((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))\n    // >>> sortArray((List[Long](-2l.toLong, -3l.toLong, -4l.toLong, -5l.toLong, -6l.toLong)))\n    // (List[Long](-6l.toLong, -5l.toLong, -4l.toLong, -3l.toLong, -2l.toLong))\n    // >>> sortArray((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))\n    def sortArray(arr : List[Long]) : List[Long] = {\n        // This is the base case.\n        if (arr.length == 0) {\n            arr\n        } else {\n            // This is the recursive case.\n            val sorted = arr.sortBy(_.toLong)\n            sorted.reverse\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string s and a natural number n, you have been tasked to implement \n    // a function that returns a list of all words from string s that contain exactly \n    // n consonants, in order these words appear in the string s.\n    // If the string s is empty then the function should return an empty list.\n    // Note: you may assume the input string contains only letters and spaces.\n    // Examples:\n    // >>> selectWords((\"Mary had a little lamb\"), (4l))\n    // (List[String](\"little\"))\n    // >>> selectWords((\"Mary had a little lamb\"), (3l))\n    // (List[String](\"Mary\", \"lamb\"))\n    // >>> selectWords((\"simple white space\"), (2l))\n    // (List[String]())\n    // >>> selectWords((\"Hello world\"), (4l))\n    // (List[String](\"world\"))\n    // >>> selectWords((\"Uncle sam\"), (3l))\n    // (List[String](\"Uncle\"))\n    def selectWords(s : String, n : Long) : List[String] = {\n        val words = s.split(\" \")\n        val result = words.filter(_.length == n)\n        result.sortBy(_.length)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a word. Your task is to find the closest vowel that stands between \n    // two consonants from the right side of the word (case sensitive).\n    // Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    // find any vowel met the above condition. \n    // You may assume that the given string contains English letter only.\n    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n    // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n    def getClosestVowel(word : String) : String = {\n        val vowels = word.toSet.filter(_.isVowel).toList\n        val closestVowel = vowels.head\n        if (closestVowel.isVowel) {\n            val vowelPosition = vowels.indexOf(closestVowel)\n            if (vowelPosition == 0) {\n                \"\"\n            } else if (vowelPosition == vowels.length - 1) {\n                \"\"\n            } else {\n                vowelPosition\n            }\n        } else {\n            \"\"\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of two strings, both strings consist of open\n    // parentheses '(' or close parentheses ')' only.\n    // Your job is to check if it is possible to concatenate the two strings in\n    // some order, that the resulting string will be good.\n    // A string S is considered to be good if and only if all parentheses in S\n    // are balanced. For example: the string '(())()' is good, while the string\n    // '())' is not.\n    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n    // Examples:\n    // >>> matchParens((List[String](\"()(\", \")\")))\n    // (\"Yes\")\n    // >>> matchParens((List[String](\")\", \")\")))\n    // (\"No\")\n    def matchParens(lst : List[String]) : String = {\n        val openParenCount = lst.count(x => x.contains(\"(\"))\n        val closeParenCount = lst.count(x => x.contains(\")\"))\n        if (openParenCount == 0 && closeParenCount == 0) \"Yes\" else \"No\""], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list arr of integers and a positive integer k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n    // Example 1:\n    // >>> maximum((List[Long](-3l.toLong, -4l.toLong, 5l.toLong)), (3l))\n    // (List[Long](-4l.toLong, -3l.toLong, 5l.toLong))\n    // Example 2:\n    // >>> maximum((List[Long](4l.toLong, -4l.toLong, 4l.toLong)), (2l))\n    // (List[Long](4l.toLong, 4l.toLong))\n    // Example 3:\n    // >>> maximum((List[Long](-3l.toLong, 2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -2l.toLong, 1l.toLong)), (1l))\n    // (List[Long](2l.toLong))\n    // Note:\n    // 1. The length of the list will be in the range of [1, 1000].\n    // 2. The elements in the list will be in the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    def maximum(arr : List[Long], k : Long) : List[Long] = {\n        val sortedArr = arr.sorted\n        val sortedArrLen = sortedArr.length\n        val sortedArrList = new Array[Long](sortedArrLen)\n        var i = 0\n        var j = 0\n        var max = sortedArr.max\n        while (i < sortedArrLen) {\n            if (sortedArrList(i) < max) {\n                sortedArrList(i) = sortedArrList(j)\n                sortedArrList(j) = sortedArrList(i)\n                j += 1\n            } else if (sortedArrList(i) == max) {\n                sortedArrList(j) = sorted"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    // Examples\n    // >>> solution((List[Long](5l.toLong, 8l.toLong, 7l.toLong, 1l.toLong)))\n    // (12l)\n    // >>> solution((List[Long](3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong)))\n    // (9l)\n    // >>> solution((List[Long](30l.toLong, 13l.toLong, 24l.toLong, 321l.toLong)))\n    // (0l)\n    def solution(lst : List[Long]) : Long = {\n        val odd = lst.filter(x => x % 2 == 1).toSeq.sum\n        odd"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a non-empty list of integers arr and an integer k, return\n    // the sum of the elements with at most two digits from the first k elements of arr.\n    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l))\n    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1 <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n        val sum = arr.reduceLeft((a, b) => a + b)\n        sum + k"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    // The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    // as follows: start with any positive integer n. Then each term is obtained from the \n    // previous term as follows: if the previous term is even, the next term is one half of \n    // the previous term. If the previous term is odd, the next term is 3 times the previous\n    // term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n    // Note: \n    // 1. Collatz(1) is [1].\n    // 2. returned list sorted in increasing order.\n    // For example:\n    // get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    // >>> getOddCollatz((5l))\n    // (List[Long](1l.toLong, 5l.toLong))\n    def getOddCollatz(n : Long) : List[Long] = {\n        val odds = get_odd_collatz(n)\n        odds.sorted"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You have to write a function which validates a given date string and\n    // returns true if the date is valid otherwise false.\n    // The date is valid if all of the following rules are satisfied:\n    // 1. The date string is not empty.\n    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    // 3. The months should not be less than 1 or higher than 12.\n    // 4. The date should be in the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    // (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    def validDate(date : String) : Boolean = {\n        // Your code here"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    // should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    // Examples\n    // >>> splitWords((\"Hello world!\"))\n    // List[String](\"Hello\", \"world!\")\n    // >>> splitWords((\"Hello,world!\"))\n    // List[String](\"Hello\", \"world!\")\n    // >>> splitWords((\"abcdef\"))\n    // 3l\n    def splitWords(txt : String) : Either[List[String], Long] = {\n        val words = txt.split(\" \")\n        if (words.isEmpty)\n            Right(0)\n        else\n            words.map(_.toLower).filter(_.isDigit).map(_.toChar).filter(_.isUpper).map(_.toLower).filter(_.isDigit).map(_.toChar).filter(_.isUpper).map(_.toLower).filter(_.isDigit).map(_.toChar).filter(_.isUpper).map(_.toLower).filter(_.isDigit).map(_.toChar).filter(_.isUpper).map(_.toLower).filter(_.isDigit).map(_.toChar).filter(_.isUpper).map(_.toLower).filter(_.isDigit).map(_.toChar).filter(_.isUpper).map(_.toLower).filter(_.isDigit).map(_.toChar).filter(_.isUpper).map(_.toLower).filter(_.isDigit).map(_.toChar).filter(_.isUpper).map(_.toLower).filter(_.isDigit).map(_.toChar).filter(_.isUpper).map(_.toLower).filter(_.isDigit).map(_.toChar).filter(_.isUpper).map(_.toLower).filter(_.isDigit).map(_.toChar).filter(_.isUpper).map"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of numbers, return whether or not they are sorted\n    // in ascending order. If list has more than 1 duplicate of the same\n    // number, return false. Assume no negative numbers and only integers.\n    // Examples\n    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n    def isSorted(lst : List[Long]) : Boolean = {"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given two intervals,\n    // where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    // The given intervals are closed which means that the interval (start, end)\n    // includes both start and end.\n    // For each given interval, it is assumed that its start is less or equal its end.\n    // Your task is to determine whether the length of intersection of these two \n    // intervals is a prime number.\n    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    // which its length is 1, which not a prime number.\n    // If the length of the intersection is a prime number, return \"YES\",\n    // otherwise, return \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    // [input/output] samples:\n    // >>> intersection(((1l, 2l)), ((2l, 3l)))\n    // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l, 4l)))\n    // (\"NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n    // (\"YES\")\n    def intersection(interval1 : Tuple2[Long, Long], interval2 : Tuple2[Long, Long]) : String = {\n        val start1 = interval1._1\n        val end1 = interval1._2\n        val start2 = interval2._1\n        val end2 = interval2._2\n        val length = end2 - start1\n        if (length == 0) {\n            \"NO\"\n        } else if (length == 1) {\n            \"YES\"\n        } else {\n            \"NO\"\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list arr of integers and you need to return\n    // sum of magnitudes of integers multiplied by product of all signs\n    // of each number in the list, represented by 1, -1 or 0.\n    // Note: return None for empty arr.\n    // Example:\n    // >>> prodSigns((List[Long](1l.toLong, 2l.toLong, 2l.toLong, -4l.toLong)))\n    // Some(9l)\n    // >>> prodSigns((List[Long](0l.toLong, 1l.toLong)))\n    // Some(0l)\n    // >>> prodSigns((List[Long]()))\n    // None\n    def prodSigns(arr : List[Long]) : Option[Long] = {\n        val sum = arr.foldLeft(0l)((acc, num) => acc + num * sign(num))\n        sum.getOrElse(0l)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    // each cell of the grid contains a value. Every integer in the range [1, N * N]\n    // inclusive appears exactly once on the cells of the grid.\n    // You have to find the minimum path of length k in the grid. You can start\n    // from any cell, and in each step you can move to any of the neighbor cells,\n    // in other words, you can go to cells which share an edge with you current\n    // cell.\n    // Please note that a path of length k means visiting exactly k cells (not\n    // necessarily distinct).\n    // You CANNOT go off the grid.\n    // A path A (of length k) is considered less than a path B (of length k) if\n    // after making the ordered lists of the values on the cells that A and B go\n    // through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    // than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    // such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    // lst_A[j] = lst_B[j].\n    // It is guaranteed that the answer is unique.\n    // Return an ordered list of the values on the cells that the minimum path go through.\n    // Examples:    \n    // >>> minPath((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong))), (3l))\n    // (List[Long](1l.toLong, 2l.toLong, 1l.toLong))\n    // >>> minPath((List[List[Long]](List[Long](5l.toLong, 9l.toLong, 3l.toLong), List[Long](4l.toLong, 1l.toLong, 6l.toLong), List[Long](7l.toLong, 8l.toLong, 2l.toLong))), (1l))\n    // (List[Long](1l.toLong))\n    def minPath(grid : List[List[Long]], k : Long) : List[Long] = {"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    // the last couple centuries. However, what people don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> tri((3l))\n    // (List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong))\n    def tri(n : Long) : List[Long] = {\n      val a = 1l\n      val b = 3l\n      val c = 2l\n      val triList = List(a, b, c)\n      if (n % 2 == 0) {\n        val triList = triList :+ (a + b + c)\n      } else {\n        val triList = triList :+ (a + b + c + a + b + c + a + b + c)\n      }\n      triList"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer n, return the product of the odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n    // >>> digits((235l))\n    // (15l)\n    def digits(n : Long) : Long = {\n        val digits = n.toLong.toSeq.map(_.toInt).toSeq\n        if (digits.length % 2 == 0) 0 else digits.length"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that takes a string as input which contains only square brackets.\n    // The function should return true if and only if there is a valid subsequence of brackets \n    // where at least one bracket in the subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n    // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"[][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    // >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack = mutable.Stack[String]()\n        var current = \"\"\n        for (i <- string.indices) {\n            if (string(i) == \"[\" || string(i) == \"]\") {\n                stack.push(string(i))\n            } else {\n                if (stack.isEmpty) {\n                    return false\n                } else {\n                    current = stack.pop\n                }\n            }\n        }\n        stack.isEmpty"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a list of numbers.\n    // You need to return the sum of squared numbers in the given list,\n    // round each element in the list to the upper int(Ceiling) first.\n    // Examples:\n    // >>> lst((List[Float](1.0f.toFloat, 2.0f.toFloat, 3.0f.toFloat)))\n    // (14l)\n    // >>> lst((List[Float](1.0f.toFloat, 4.0f.toFloat, 9.0f.toFloat)))\n    // (98l)\n    // >>> lst((List[Float](1.0f.toFloat, 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat)))\n    // (84l)\n    // >>> lst((List[Float](1.4f.toFloat, 4.2f.toFloat, 0.0f.toFloat)))\n    // (29l)\n    // >>> lst((List[Float](-2.4f.toFloat, 1.0f.toFloat, 1.0f.toFloat)))\n    // (6l)\n    def sumSquares(lst : List[Float]) : Long = {\n        val sum = lst.sum\n        sum.toLong"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns true if the last character\n    // of a given string is an alphabetical character and is not\n    // a part of a word, and false otherwise.\n    // Note: \"word\" is a group of characters separated by space.\n    // Examples:\n    // >>> checkIfLastCharIsALetter((\"apple pie\"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"apple pi e\"))\n    // (true)\n    // >>> checkIfLastCharIsALetter((\"apple pi e \"))\n    // (false)\n    // >>> checkIfLastCharIsALetter((\"\"))\n    // (false)\n    def checkIfLastCharIsALetter(txt : String) : Boolean = {\n        val lastChar = txt.last\n        if (lastChar.isLetter) {\n            if (txt.contains(lastChar)) {\n                return false\n            }\n        }\n        return true"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function which returns the largest index of an element which\n    // is not greater than or equal to the element immediately preceding it. If\n    // no such element exists then return -1. The given list will not contain\n    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong, 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long]) : Long = {\n        var i = 0\n        var j = arr.length - 1\n        while (i < j) {\n            if (arr(i) > arr(j)) {\n                i += 1\n            } else {\n                j -= 1\n            }\n        }\n        if (i == j) -1"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function that returns a tuple (a, b), where 'a' is\n    // the largest of negative integers, and 'b' is the smallest\n    // of positive integers in a list.\n    // If there is no negative or positive integers, return them as None.\n    // Examples:\n    // >>> largestSmallestIntegers((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (Some(None), Some(1l))\n    // >>> largestSmallestIntegers((List[Long]()))\n    // (Some(None), Some(None))\n    // >>> largestSmallestIntegers((List[Long](0l.toLong)))\n    // (Some(None), Some(None))\n    def largestSmallestIntegers(lst : List[Long]) : Tuple2[Option[Long], Option[Long]] = {\n        val max = lst.maxBy(_._1)\n        val min = lst.minBy(_._1)\n        if (lst.isEmpty) None\n        else (Some(max), Some(min))"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    // Example\n    // >>> isEqualToSumEven((4l))\n    // (false)\n    // >>> isEqualToSumEven((6l))\n    // (false)\n    // >>> isEqualToSumEven((8l))\n    // (true)\n    def isEqualToSumEven(n : Long) : Boolean = {\n        val sum = n.toLong\n        val evenSum = sum.toLong.filter(_.isEven).toLong\n        if (evenSum.length == 4) {\n            true\n        } else {\n            false\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n    // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive an integer as input and should return the special\n    // factorial of this integer.\n    def specialFactorial(n : Long) : Long = {\n        val brazilianFactorial = n.pow(n.toInt)\n        val brazilianFactorialMod2 = brazilianFactorial % 2\n        val brazilianFactorialMod4 = brazilianFactorial % 4\n        val brazilianFactorialMod8 = brazilianFactorial % 8\n        val brazilianFactorialMod16 = brazilianFactorial % 16\n        val brazilianFactorialMod32 = brazilianFactorial % 32\n        val brazilianFactorialMod64 = brazilianFactorial % 64\n        val brazilianFactorialMod128 = brazilianFactorial % 128\n        val brazilianFactorialMod256 = brazilianFactorial % 256\n        val brazilianFactorialMod512 = brazilianFactorial % 512\n        val brazilianFactorialMod1024 = brazilianFactorial % 1024\n        val brazilianFactorialMod2048 = brazilianFactorial % 2048\n        val brazilianFactorialMod4096 = brazilianFactorial % 4096\n        val brazilianFactorialMod8192 = brazilianFactorial % 8192\n        val brazilianFactorialMod16384 = brazilianFactorial % 16384\n        val brazilianFactorialMod"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string text, replace all spaces in it with underscores, \n    // and if a string has more than 2 consecutive spaces, \n    // then replace all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n    // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\" Example 3\"))\n    // (\"_Example-3\")\n    def fixSpaces(text : String) : String = {\n        val textList = text.split(\" \")\n        val newTextList = textList.map(_.replaceAll(\" \", \"_\").mkString(\"_\"))\n        newTextList.mkString(\"_\")"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Create a function which takes a string representing a file's name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    // A file's name is considered to be valid if and only if all the following conditions \n    // are met:\n    // - There should not be more than three digits ('0'-'9') in the file's name.\n    // - The file's name contains exactly one dot '.'\n    // - The substring before the dot should not be empty, and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\")\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name : String) : String = {\n        val file_name_parts = file_name.split(\"\\\\.\")\n        val file_name_parts_length = file_name_parts.length\n        val digit_count = file_name_parts.filter(_.isDigit).count\n        val dot_count = file_name_parts.filter(_.isDigit).count\n        val letter_count = file_name_parts.filter(_.isLetter).count\n        val file_name_parts_without_dot = file_name_parts.filterNot(_.isDigit)\n        val file_name_parts_without_letter = file_name_parts.filterNot(_.isLetter)\n        val file_name_parts_without_digit = file_name_parts.filterNot(_.isDigit)\n        val file_name_parts_without_letter_and_digit = file_name_parts.filterNot(_.isLetterAndDigit)\n        val file_name_parts_without_letter_and_digit_and_dot = file_name_parts.filterNot(_.isLetterAndDigitAndDigit)\n        val"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // \"\n    // This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    // multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    // change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    // Examples:\n    // >>> lst\n    // List[Long](1l.toLong, 2l.toLong, 3l.toLong)\n    // >>> lst\n    // List[Long]()\n    // >>> lst\n    // List[Long](-1l.toLong, -5l.toLong, 2l.toLong, -1l.toLong, -5l.toLong)\n    def sumSquares(lst : List[Long]) : Long = {\n        lst.forall {\n            case x: Long =>\n                if (x % 3 == 0) {\n                    x * x\n                } else if (x % 4 == 0) {\n                    x * x\n                } else {\n                    x\n                }\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a string representing a sentence,\n    // the sentence contains some words separated by a space,\n    // and you have to return a string that contains the words from the original sentence,\n    // whose lengths are prime numbers,\n    // the order of the words in the new string should be the same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence : String) : String = {\n        val words = sentence.split(\" \")\n        val primeNumbers = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 3"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Your task is to implement a function that will simplify the expression\n    // x * n. The function returns true if x * n evaluates to a whole number and false\n    // otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    // <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n    // You can assume that x, and n are valid fractions, and do not have zero as denominator.\n    // >>> simplify((\"1/5\"), (\"5/1\"))\n    // (true)\n    // >>> simplify((\"1/6\"), (\"2/1\"))\n    // (false)\n    // >>> simplify((\"7/10\"), (\"10/2\"))\n    // (false)\n    def simplify(x : String, n : String) : Boolean = {\n        // Your code goes here"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which sorts the given list of integers\n    // in ascending order according to the sum of their digits.\n    // Note: if there are several items with similar sum of their digits,\n    // order them based on their index in original list.\n    // For example:\n    // >>> orderByPoints((List[Long](1l.toLong, 11l.toLong, -1l.toLong, -11l.toLong, -12l.toLong)))\n    // (List[Long](-1l.toLong, -11l.toLong, 1l.toLong, -12l.toLong, 11l.toLong))\n    // >>> orderByPoints((List[Long]()))\n    // (List[Long]())\n    def orderByPoints(nums : List[Long]) : List[Long] = {\n        nums.sortBy(_.sum)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes a list of numbers as input and returns \n    // the number of elements in the list that are greater than 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For example:\n    // >>> specialFilter((List[Long](15l.toLong, -73l.toLong, 14l.toLong, -15l.toLong)))\n    // (1l)\n    // >>> specialFilter((List[Long](33l.toLong, -2l.toLong, -3l.toLong, 45l.toLong, 21l.toLong, 109l.toLong)))\n    // (2l)\n    def specialFilter(nums : List[Long]) : Long = {\n        val oddDigits = nums.filter(_.last == 1 && _.first % 2 == 1)\n        val oddDigitsLength = oddDigits.length\n        if (oddDigitsLength == 0) 0 else oddDigitsLength"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a positive integer n. You have to create an integer list a of length n.\n    // For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation: \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n    def getMaxTriples(n : Long) : Long = {\n        val a = Array.fill(n)(0)\n        for (i <- 1 to n) {\n            a(i) = i * i - i + 1\n        }\n        val count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                for (k <- j + 1 until n) {\n                    if (a(i) + a(j) + a(k) == 0l) {\n                        count += 1\n                    }\n                }\n            }\n        }\n        count"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // There are eight planets in our solar system: the closerst to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet names as strings planet1 and planet2. \n    // The function should return a tuple containing all planets whose orbits are \n    // located between the orbit of planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun. \n    // The function should return an empty tuple if planet1 or planet2\n    // are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"), (\"Neptune\"))\n    // (List[String](\"Saturn\", \"Uranus\"))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (List[String](\"Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))\n    def bf(planet1 : String, planet2 : String) : List[String] = {\n        val planets = List(planet1, planet2)\n        val planetsSorted = planets.sorted\n        val planetsSortedTuple = planetsSorted.zipWithIndex.toList\n        planetsSortedTuple.filter(_.toLower == \"earth\")"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings as a parameter,\n    // deletes the strings that have odd lengths from it,\n    // and returns the resulted list with a sorted order,\n    // The list is always a list of strings and never a list of numbers,\n    // and it may contain duplicates.\n    // The order of the list should be ascending by length of each word, and you\n    // should return the list sorted by that rule.\n    // If two words have the same length, sort the list alphabetically.\n    // The function should return a list of strings in sorted order.\n    // You may assume that all words will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def sortedListSum(lst : List[String]) : List[String] = {\n        lst.sortBy(_.length).reverse"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // A simple program which should return the value of x if n is \n    // a prime number and should return the value of y otherwise.\n    // Examples:\n    // >>> xOrY((7l), (34l), (12l))\n    // (34l)\n    // >>> xOrY((15l), (8l), (5l))\n    // (5l)\n    def xOrY(n : Long, x : Long, y : Long) : Long = {\n        if (n.isPrime) {\n            if (x == 0) {\n                y\n            } else {\n                x\n            }\n        } else {\n            y\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a list of numbers, return the sum of squares of the numbers\n    // in the list that are odd. Ignore numbers that are negative or not integers.\n    // >>> doubleTheDifference((List[Float](1l.toLong, 3l.toLong, 2l.toLong, 0l.toLong)))\n    // (10l)\n    // >>> doubleTheDifference((List[Float](-1l.toLong, -2l.toLong, 0l.toLong)))\n    // (0l)\n    // >>> doubleTheDifference((List[Float](9l.toLong, -2l.toLong)))\n    // (81l)\n    // >>> doubleTheDifference((List[Float](0l.toLong)))\n    // (0l)\n    // If the input list is empty, return 0.\n    def doubleTheDifference(lst : List[Float]) : Long = {\n        if (lst.isEmpty) 0\n        else {\n            var sum = 0\n            for (i <- lst.indices) {\n                if (lst(i) % 2 == 1) {\n                    sum += lst(i) * lst(i)\n                }\n            }\n            sum\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // I think we all remember that feeling when the result of some long-awaited\n    // event is finally known. The feelings and thoughts you have at that moment are\n    // definitely worth noting down and comparing.\n    // Your task is to determine if a person correctly guessed the results of a number of matches.\n    // You are given two lists of scores and guesses of equal length, where each index shows a match. \n    // Return a list of the same length denoting how far off each guess was. If they have guessed correctly,\n    // the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    // example:\n    // >>> compare((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 2l.toLong, -2l.toLong)))\n    // (List[Long](0l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 3l.toLong, 3l.toLong))\n    // >>> compare((List[Long](0l.toLong, 5l.toLong, 0l.toLong, 0l.toLong, 0l.toLong, 4l.toLong)), (List[Long](4l.toLong, 1l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, -2l.toLong)))\n    // (List[Long](4l.toLong, 4l.toLong, 1l.toLong, 0l.toLong, 0l.toLong, 6l.toLong))\n    def compare(game : List[Long], guess : List[Long]) : List[Long] = {\n        val guesses = guess.toList\n        val scores = game.toList\n        val guesses.sort"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You will be given the name of a class (a string) and a list of extensions.\n    // The extensions are to be used to load additional classes to the class. The\n    // strength of the extension is as follows: Let CAP be the number of the uppercase\n    // letters in the extension's name, and let SM be the number of lowercase letters \n    // in the extension's name, the strength is given by the fraction CAP - SM. \n    // You should find the strongest extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n    // If there are two or more extensions with the same strength, you should\n    // choose the one that comes first in the list.\n    // For example, if you are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name : String, extensions : List[String]) : String = {\n        val class_name_str = class_name.toLowerCase\n        val extensions_str = extensions.map(_.toLowerCase).mkString(\" \")\n        val class_name_str_length = class_name_str.length\n        val extensions_str_length = extensions_str.length\n        val class_name_str_strength = class_name_str.length - class_name_str_length\n        val extensions_str_strength = extensions_str.length - extensions_str_length\n        val class_name_str_strength_str = class_name_str_strength.toInt\n        val extensions_str_strength_str = extensions_str_strength.toInt\n       "], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n    // >>> cycpatternCheck((\"abcd\"), (\"abd\"))\n    // (false)\n    // >>> cycpatternCheck((\"hello\"), (\"ell\"))\n    // (true)\n    // >>> cycpatternCheck((\"whassup\"), (\"psus\"))\n    // (false)\n    // >>> cycpatternCheck((\"abab\"), (\"baa\"))\n    // (true)\n    // >>> cycpatternCheck((\"efef\"), (\"eeff\"))\n    // (false)\n    // >>> cycpatternCheck((\"himenss\"), (\"simen\"))\n    // (true)\n    def cycpatternCheck(a : String, b : String) : Boolean = {\n        val a_list = a.toList\n        val b_list = b.toList\n        if (a_list.length != b_list.length) {\n            return false\n        }\n        for (i <- 0 until a_list.length) {\n            if (a_list(i) != b_list(i)) {\n                return false\n            }\n        }\n        return true"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given an integer. return a tuple that has the number of even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n    // ((1l, 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num : Long) : Tuple2[Long, Long] = {\n        val digits = num.toString.toList.map(_.toString).toMap\n        val even = digits.filter(_.isEven).length\n        val odd = digits.filter(_.isOdd).length\n        (even, odd)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a positive integer, obtain its roman numeral equivalent as a string,\n    // and return it in lowercase.\n    // Restrictions: 1 <= num <= 1000\n    // Examples:\n    // >>> intToMiniRoman((19l))\n    // (\"xix\")\n    // >>> intToMiniRoman((152l))\n    // (\"clii\")\n    // >>> intToMiniRoman((426l))\n    // (\"cdxxvi\")\n    def intToMiniRoman(number : Long) : String = {\n        val romanNumerals = List(\n            \"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"xii\", \"x\", \"xiii\", \"xii\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x\", \"x"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given the lengths of the three sides of a triangle. Return true if the three\n    // sides form a right-angled triangle, false otherwise.\n    // A right-angled triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l), (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    // (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean = {\n        // Calculate the length of the third side.\n        val d = Math.sqrt(Math.pow(c, 2) + Math.pow(a, 2) - 2 * c * a * Math.cos(Math.PI * (b / 2))).toLong\n        // Check if the third side is greater than the sum of the other two sides.\n        if (d > (a + b + c)) {\n            return false\n        }\n        // Check if the third side is less than the sum of the other two sides.\n        if (d < (a + b + c)) {\n            return false\n        }\n        // If all conditions are met, return true.\n        true"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that accepts a list of strings.\n    // The list contains different words. Return the word with maximum number\n    // of unique characters. If multiple strings have maximum number of unique\n    // characters, return the one which comes first in lexicographical order.\n    // >>> findMax((List[String](\"name\", \"of\", \"string\")))\n    // (\"string\")\n    // >>> findMax((List[String](\"name\", \"enam\", \"game\")))\n    // (\"enam\")\n    // >>> findMax((List[String](\"aaaaaaa\", \"bb\", \"cc\")))\n    // (\"aaaaaaa\")\n    def findMax(words : List[String]) : String = {\n        words.foldLeft(List[String](\"\") :+ \"\") {\n            case (acc, word) =>\n                acc.foldLeft(word) {\n                    case (acc, char) =>\n                        acc.count(_.isLetter) + 1\n                    case (acc, _) =>\n                        acc\n                }\n        }"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    // but now you need to eat more carrots to complete the day's meals.\n    // you should return a list of [ total number of eaten carrots after your meals,\n    // the number of carrots left after your meals ]\n    // if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    // Example:\n    // >>> eat((5l), (6l), (10l))\n    // (List[Long](11l.toLong, 4l.toLong))\n    // >>> eat((4l), (8l), (9l))\n    // (List[Long](12l.toLong, 1l.toLong))\n    // >>> eat((1l), (10l), (10l))\n    // (List[Long](11l.toLong, 0l.toLong))\n    // >>> eat((2l), (11l), (5l))\n    // (List[Long](7l.toLong, 0l.toLong))\n    // Variables:\n    // @number : integer\n    // the number of carrots that you have eaten.\n    // @need : integer\n    // the number of carrots that you need to eat.\n    // @remaining : integer\n    // the number of remaining carrots thet exist in stock\n    // Constrain:\n    // * 0 <= number <= 1000\n    // * 0 <= need <= 1000\n    // * 0 <= remaining <= 1000\n    // Have fun :)\n    def eat(number : Long, need : Long, remaining : Long) : List[Long] = {\n        val totalCarrots = number + need\n        val remainingCarrots = remaining - totalCarrots\n        if (remainingCarrots == 0) {\n            val remainingCarrots = remainingCarrots.toLong\n            val remainingCarrots = remaining"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given two lists operator, and operand. The first list has basic algebra operations, and \n    // the second list is a list of integers. Use the two given lists to build the algebric \n    // expression and return the evaluation of this expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator list is equal to the length of operand list minus one.\n    // Operand is a list of of non-negative integers.\n    // Operator list has at least one operator, and operand list has at least two operands.\n    def doAlgebra(op : List[String], operand : List[Long]) : Long = {\n        val result = 0\n        for (i <- 0 until op.length) {\n            val op = op(i)\n            val operand = operand(i)\n            if (op == \"+\" || op == \"-\") {\n                result += operand\n            } else if (op == \"*\") {\n                result *= operand\n            } else if (op == \"/\") {\n                result /= operand\n            } else if (op == \"**\") {\n                result = result * operand\n            } else if (op == \"//\") {\n                result = result / operand\n            }\n        }\n        result"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n    // If the string contains no letters, reverse the string.\n    // The function should return the resulted string.\n    // Examples\n    // >>> solve((\"1234\"))\n    // (\"4321\")\n    // >>> solve((\"ab\"))\n    // (\"AB\")\n    // >>> solve((\"#a@C\"))\n    // (\"#A@c\")\n    def solve(s : String) : String = {\n        val letters = s.toLowerCase.toSet\n        val result = s.toLowerCase.toSet.reverse.toSet\n        if (letters.nonEmpty) result.toSet.reverse\n        else s"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n    // If 'text' is an empty string, return None.\n    // >>> stringToMd5((\"Hello world\"))\n    // Some(\"3e25960a79dbc69b674cd4ec67a72c62\")\n    def stringToMd5(text : String) : Option[String] = {\n        val md5 = MD5.md5(text)\n        if (md5.isEmpty) None\n        else Some(md5.get)"], ["import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Given two positive integers a and b, return the even digits between a\n    // and b, in ascending order.\n    // For example:\n    // >>> generateIntegers((2l), (8l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((8l), (2l))\n    // (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))\n    // >>> generateIntegers((10l), (14l))\n    // (List[Long]())\n    def generateIntegers(a : Long, b : Long) : List[Long] = {\n        val digits = List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n        val aRange = a.toInt\n        val bRange = b.toInt\n        val aRangeIntegers = aRange.toInt\n        val bRangeIntegers = bRange.toInt\n        val aRangeIntegersList = digits.take(aRangeIntegers)\n        val bRangeIntegersList = digits.take(bRangeIntegers)\n        val aRangeIntegersList = aRangeIntegersList.sortBy(_._1)\n        val bRangeIntegersList = bRangeIntegersList.sortBy(_._1)\n        val aRangeIntegersList = aRangeIntegersList.takeWhile(_._1 % 2 == 0)\n        val bRangeIntegersList = bRangeIntegersList.takeWhile(_._1 % 2 == 0)\n        val aRangeIntegersList = aRangeIntegersList.toList\n        val bRangeIntegersList = bRangeIntegersList.toList\n        val aRangeIntegersList = aRangeIntegersList.toList\n        val bRangeIntegersList = bRangeIntegersList.toList\n       "]]