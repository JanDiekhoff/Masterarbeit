[["//Check if in given array of numbers, are any two numbers closer to each other than\n// given threshold.\n// >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n// false\n// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n// true\nfunction has_close_elements(numbers: number[], threshold: number): boolean {\n    const sorted = numbers.sort((a, b) => a - b);\n    return sorted.every(x => x <= threshold);\n}\n"], ["//Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n// separate those group into separate strings and return the array of those.\n// Separate groups are balanced (each open brace is properly closed) and not nested within each other\n// Ignore any spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\", \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string: string): string[] {\n    let groups: string[] = [];\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] == '(') {\n            groups.push('(');\n        } else if (paren_string[i] == ')') {\n            if (groups.length > 0) {\n                groups.pop();\n            }\n        } else if (paren_string[i] == ')' && groups.length > 0) {\n            groups.pop();\n        }\n    }\n    return groups;\n}\n"], ["//Given a positive floating point number, it can be decomposed into\n// and integer part (largest integer smaller than given number) and decimals\n// (leftover part always smaller than 1).\n// Return the decimal part of the number.\n// >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number): number {\n    const decimals: number = 0;\n    const integer: number = number;\n    while (integer > 0) {\n        decimals += integer % 1;\n        integer /= 10;\n    }\n    return decimals;\n}\n"], ["//You're given an array of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// false\n// >>> below_zero([1, 2, -4, 5])\n// true\nfunction below_zero(operations: number[]): boolean {\nconst total = operations.reduce((total, operation) => total + operation, 0);\nreturn total < 0;\n}\n"], ["//For a given array of input numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n// Mean Absolute Deviation is the average absolute difference between each\n// element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation(numbers: number[]): number {\n    const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    return numbers.reduce((a, b) => Math.abs(b - mean), 0) / numbers.length;\n}\n\n"], ["//Insert a number 'delimeter' between every two consecutive elements of input array `numbers'\n// >>> intersperse([], 4)\n// []\n// >>> intersperse([1, 2, 3], 4)\n// [1, 4, 2, 4, 3]\nfunction intersperse(numbers: number[], delimeter: number): number[] {\nif (numbers.length === 0) {\nreturn [];\n}\nif (numbers.length === 1) {\nreturn [delimeter];\n}\nreturn numbers.map(number =>\n[numbers.length > 1 ? delimeter : number]\n.concat(numbers.slice(0, -1))\n.concat(numbers.slice(1))\n);\n}"], ["//Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n// For each of the group, output the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: string): number[] {\n    let result: number[] = [];\n    let current_level: number = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] === '(') {\n            current_level++;\n        } else if (paren_string[i] === ')') {\n            if (current_level > 0) {\n                result.push(current_level);\n            }\n            current_level = 0;\n        }\n    }\n    result.push(current_level);\n    return result;\n}\n"], ["//Filter an input array of strings only for ones that contain given substring\n// >>> filter_by_substring([], \"a\")\n// []\n// >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"bacd\", \"array\"]\nfunction filter_by_substring(strings: string[], substring: string): string[] {\n    let result: string[] = [];\n    for (let i = 0; i < strings.length; i++) {\n        if (strings[i].includes(substring)) {\n            result.push(strings[i]);\n        }\n    }\n    return result;\n}\n"], ["//For a given array of integers, return an array consisting of a sum and a product of all the integers in an array.\n// Empty sum should be equal to 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n// >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers: number[]): [number, number] {\n    if (numbers.length === 0) {\n        return [0, 1];\n    }\n    let sum = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n}\n\n"], ["//From a given array of integers, generate an array of rolling maximum element found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]): number[] {\n    let max = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n    return [max];\n}\n\n"], ["//Find the shortest palindrome that begins with a supplied string.\n// Algorithm idea is simple:\n// - Find the longest postfix of supplied string that is a palindrome.\n// - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\")\n// \"catac\"\nfunction make_palindrome(string: string): string {\nconst prefix = string.split('').reverse().join('');\nconst suffix = string.split('').reverse().join('');\nconst palindrome = prefix + suffix;\nreturn palindrome.split('').reverse().join('');\n}\n"], ["//Input are two strings a and b consisting only of 1s and 0s.\n// Perform binary XOR on these inputs and return result also as a string.\n// >>> string_xor(\"010\", \"110\")\n// \"100\"\nfunction string_xor(a: string, b: string): string {\nconst result = \"\";\nfor (let i = 0; i < a.length; i++) {\nif (a[i] === b[i]) {\nresult += a[i];\n} else {\nresult += \"0\";\n}\n}\nreturn result;\n}\n\n\n# Python 3, 108 bytes\n\ndef f(a,b):\nreturn \"\".join(a[i]^b[i]for i in range(len(a)))\n\n\nTry it online!\n\n# Python 3, 108 bytes\n\ndef f(a,b):\nreturn \"\".join(a[i]^b[i]for i in range(len(a)))\n\n\nTry it online!\n\n# Python 3, 108 bytes\n\ndef f(a,b):\nreturn \"\".join(a[i]^b[i]for i in range(len(a)))\n\n\nTry it online!\n\n# Python 3, 108 bytes\n\ndef f(a,b):\nreturn \"\".join(a[i]^b[i]for i in range(len(a)))\n\n\nTry it online!\n\n# Python 3, 108 bytes\n\ndef f(a,b):\nreturn \"\".join(a[i]^b[i]for i in range(len(a)))\n\n\nTry it online!\n\n# Python 3, 108 bytes\n\ndef f(a,b):\nreturn \"\".join(a[i]^b[i]for i in range(len(a)))\n\n\nTry it online!\n\n# Python 3, 108 bytes\n\ndef f(a,b):\nreturn \"\".join(a[i]^b[i]for i in range(len(a)))\n\n\nTry it online!\n\n# Python 3"], ["//Out of array of strings, return the longest one. Return the first one in case of multiple\n// strings of the same length. Return undefined in case the input array is empty.\n// >>> longest([])\n// undefined\n// >>> longest([\"a\", \"b\", \"c\"])\n// \"a\"\n// >>> longest([\"a\", \"bb\", \"ccc\"])\n// \"ccc\"\nfunction longest(strings: string[]): string | undefined {\n    if (strings.length === 0) {\n        return undefined;\n    }\n    let maxLength = 0;\n    for (let i = 0; i < strings.length; i++) {\n        if (strings[i].length > maxLength) {\n            maxLength = strings[i].length;\n        }\n    }\n    return strings[maxLength];\n}\n"], ["//Return a greatest common divisor of two integers a and b\n// >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25, 15)\n// 5\nfunction greatest_common_divisor(a: number, b: number): number {\n    if (a < 0) {\n        a = -a;\n    }\n    if (b < 0) {\n        b = -b;\n    }\n    if (a < b) {\n        return greatest_common_divisor(b, a);\n    }\n    return greatest_common_divisor(a, b);\n}\n"], ["//Return array of all prefixes from shortest to longest of the input string\n// >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string: string): string[] {\nconst prefixes = [];\nfor (let i = 0; i < string.length; i++) {\nconst char = string[i];\nif (char.length > 0) {\nconst prefix = string.substring(0, i);\nif (prefix.length > 0) {\nprefixes.push(prefix);\n} else {\nprefixes.push(char);\n}\n}\n}\nreturn prefixes;\n}\n"], ["//Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunction string_sequence(n: number): string {\n    let s: string = \"\";\n    for (let i: number = 0; i < n; i++) {\n        s += \" \";\n    }\n    return s;\n}\n\n"], ["//Given a string, find out how many distinct characters (regardless of case) does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>> count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string: string): number {\nconst char_set: Set<char> = new Set();\nfor (let i = 0; i < string.length; i++) {\nchar_set.add(string[i]);\n}\nreturn char_set.size;\n}\n"], ["//Input to this function is a string representing musical notes in a special ASCII format.\n// Your task is to parse this string and return array of integers corresponding to how many beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string: string): number[] {\nconst music_array = music_string.split(' ');\nconst beats = [];\nfor (let i = 0; i < music_array.length; i++) {\nconst music_element = music_array[i];\nif (music_element.match(/\\d+/)) {\nbeats.push(parseInt(music_element.replace('o', '0').replace('|', '1'), 10));\n} else if (music_element.match(/\\w+/)) {\nbeats.push(parseInt(music_element.replace('o', '0').replace('|', '1'), 10));\n} else {\nbeats.push(parseInt(music_element, 10));\n}\n}\nreturn beats;\n}\n\n"], ["//Find how many times a given substring can be found in the original string. Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string: string, substring: string): number {\n    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string.charAt(i) === substring.charAt(0)) {\n            count++;\n        }\n    }\n    return count;\n}\n"], ["//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction sort_numbers(numbers: string): string {\nconst sorted = numbers.split('').sort().join('');\nreturn sorted;\n}\n\n"], ["//From a supplied array of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// [2.0, 2.2]\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// [2.0, 2.0]\nfunction find_closest_elements(numbers: number[]): [number, number] {\n    let min_distance = Infinity;\n    let min_number = Infinity;\n    let max_distance = Infinity;\n    let max_number = Infinity;\n    for (let i = 0; i < numbers.length; i++) {\n        let distance = Math.abs(numbers[i] - min_number);\n        if (distance < min_distance) {\n            min_distance = distance;\n            min_number = numbers[i];\n        } else if (distance < min_distance && distance < max_distance) {\n            max_distance = distance;\n            max_number = numbers[i];\n        }\n    }\n    return [min_number, max_number];\n}\n"], ["//Given array of numbers (of at least two elements), apply a linear transform to that array,\n// such that the smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit(numbers: number[]): number[] {\nconst min = Math.min(...numbers);\nconst max = Math.max(...numbers);\nconst rescaled = [];\nfor (let i = 0; i < numbers.length; i++) {\nrescaled[i] = (numbers[i] - min) / (max - min);\n}\nreturn rescaled;\n}\n\n\n"], ["//Filter given array of any tsthon values only for integers\n// >>> filter_integers([\"a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1, 2, 3]\nfunction filter_integers(values: any[]): number[] {\n    const result = [];\n    for (const value of values) {\n        if (typeof value === \"number\") {\n            result.push(value);\n        }\n    }\n    return result;\n}\n"], ["//Return length of given string\n// >>> strlen(\"\")\n// 0\n// >>> strlen(\"abc\")\n// 3\nfunction strlen(string: string): number {\n    if string.length === 0 {\n        return 0;\n    }\n    return string.length;\n}\n\n"], ["//For a given number n, find the largest number that divides n evenly, smaller than n\n// >>> largest_divisor(15)\n// 5\nfunction largest_divisor(n: number): number {\n    if (n < 1) {\n        throw new Error('Invalid input');\n    }\n    if (n % 2 == 0) {\n        return 2;\n    }\n    for (let i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return 3;\n}\n"], ["//Return array of prime factors of given integer in the order from smallest to largest.\n// Each of the factors should be arrayed number of times corresponding to how many times it appeares in factorization.\n// Input number should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number): number[] {\nconst factors = [];\nwhile (n > 1) {\nconst i = Math.floor(Math.sqrt(n));\nif (n % i === 0) {\nconst j = n / i;\nif (j !== i) {\nfactors.push(i);\nfactors.push(j);\nn = n / i;\n}\n}\n}\nreturn factors;\n}\n"], ["//From an array of integers, remove all elements that occur more than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers: number[]): number[] {\n    const seen: Set<number> = new Set();\n    const result: number[] = [];\n    for (const number of numbers) {\n        if (!seen.has(number)) {\n            result.push(number);\n            seen.add(number);\n        }\n    }\n    return result;\n}\n"], ["//For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n// >>> flip_case(\"Hello\")\n// \"hELLO\"\nfunction flip_case(string: string): string {\n    var result: string;\n    for (var i: integer = 0; i < string.length; i++) {\n        result += string[i].toUpperCase();\n    }\n    return result;\n}\n"], ["//Concatenate array of strings into a single string\n// >>> concatenate([])\n// \"\"\n// >>> concatenate([\"a\", \"b\", \"c\"])\n// \"abc\"\nfunction concatenate(strings: string[]): string {\n    return strings.join('');\n}\n"], ["//Filter an input array of strings only for ones that start with a given prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings: string[], prefix: string): string[] {\nconst index = strings.findIndex(s => s.startsWith(prefix));\nif (index !== -1) {\nconst result = strings.slice(0, index)\n.concat(strings.slice(index + prefix.length))\n.filter(s => s.startsWith(prefix));\nreturn result;\n}\nreturn [];\n}\n\n"], ["//Return only positive numbers in the array.\n// >>> get_positive([-1, 2, -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l: number[]): number[] {\n    let result = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n\n"], ["//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number): boolean {\n    if (n <= 1) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n"], ["//This function takes an array l and returns an array l' such that\n// l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n// >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n// [2, 6, 3, 4, 8, 9, 5]\nfunction sort_third(l: number[]): number[] {\nlet result: number[] = [];\nfor (let i = 0; i < l.length; i += 3) {\nresult.push(l[i]);\nresult.push(l[i + 1]);\nresult.push(l[i + 2]);\n}\nreturn result;\n}\n\n"], ["//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l: number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n        if (result.indexOf(l[i]) === -1) {\n            result.push(l[i]);\n        }\n    }\n    return result;\n}\n\n"], ["//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n// 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction max_element(l: number[]): number {\n    let max = l[0];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n}\n"], ["//Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n// 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\nif (n % 15 === 0) {\nreturn \"FizzBuzz\";\n}\nif (n % 5 === 0) {\nreturn \"Fizz\";\n}\nif (n % 3 === 0) {\nreturn \"Buzz\";\n}\nreturn n;\n}\n"], ["//This function takes an array l and returns an array l' such that\n// l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction sort_even(l: number[]): number[] {\nlet even: number[] = [];\nlet odd: number[] = [];\nfor (let i = 0; i < l.length; i += 2) {\nif (l[i] % 2 === 0) {\neven.push(l[i]);\nodd.push(l[i + 1]);\n} else {\neven.push(l[i + 1]);\nodd.push(l[i]);\n}\n}\nreturn even.concat(odd);\n}\n\n"], ["//prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n// 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n: number): number {\n    if (n <= 1) {\n        return n;\n    }\n    let fib: number[] = [1, 2];\n    for (let i = 3; i < n; i++) {\n        fib.push(fib[i - 1] + fib[i - 2]);\n    }\n    return fib[n - 1];\n}\n"], ["//triples_sum_to_zero takes an array of integers as an input.\n// it returns true if there are three distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> triples_sum_to_zero([1, 3, -2, 1])\n// true\n// >>> triples_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// true\n// >>> triples_sum_to_zero([1])\n// false\nfunction triples_sum_to_zero(l: number[]): boolean {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    return sum === 0;\n}\n\n"], ["//Imagine a road that's a perfectly straight infinitely long line.\n// n cars are driving left to right;  simultaneously, a different set of n cars\n// are driving right to left.   The two sets of cars start out being very far from\n// each other.  All cars move in the same speed.  Two cars are said to collide\n// when a car that's moving left to right hits a car that's moving right to left.\n// However, the cars are infinitely sturdy and strong; as a result, they continue moving\n// in their trajectory as if they did not collide.\n// This function outputs the number of such collisions.\nfunction car_race_collision(n: number): number {\n    let left_cars: number = 0;\n    let right_cars: number = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 2 === 0) {\n            left_cars += 1;\n        } else {\n            right_cars += 1;\n        }\n    }\n    return left_cars + right_cars;\n}\n"], ["//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l: number[]): number[] {\n    let result = [];\n    for (let i = 0; i < l.length; i++) {\n        result.push(l[i] + 1);\n    }\n    return result;\n}\n\n"], ["//pairs_sum_to_zero takes an array of integers as an input.\n// it returns true if there are two distinct elements in the array that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// false\n// >>> pairs_sum_to_zero([1, 3, -2, 1])\n// false\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// false\n// >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// true\n// >>> pairs_sum_to_zero([1])\n// false\nfunction pairs_sum_to_zero(l: number[]): boolean {\n    let sum: number = 0;\n    for (let i: number = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    return sum === 0;\n}\n\n"], ["//Change numerical base of input number x to base.\n// return string representation after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8, 3)\n// \"22\"\n// >>> change_base(8, 2)\n// \"1000\"\n// >>> change_base(7, 2)\n// \"111\"\nfunction change_base(x: number, base: number): string {\nconst digits = x.toString().split('');\nconst result = '';\nfor (let i = 0; i < digits.length; i++) {\nresult += digits[i] * base;\n}\nreturn result;\n}\n\n\n"], ["//Given length of a side and high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfunction triangle_area(a: number, h: number): number {\nconst x = a / 2;\nconst y = h / 2;\nconst r = Math.sqrt(x * x + y * y);\nreturn Math.PI * r * r;\n}\n"], ["//The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\nfunction fib4(n: number): number {\n    if (n <= 0) {\n        return 0;\n    }\n    if (n <= 3) {\n        return 0;\n    }\n    const fib4 = 0;\n    const fib5 = 0;\n    const fib6 = 0;\n    for (let i = 0; i < n; i++) {\n        fib4 += fib5;\n        fib5 += fib4;\n        fib6 += fib4;\n        fib4 = fib5;\n        fib5 = fib6;\n    }\n    return fib4;\n}\n"], ["//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l: number[]): number {\n    if (l.length % 2 === 0) {\n        let mid = (l[l.length / 2] + l[l.length / 2 - 1]) / 2;\n        return mid;\n    }\n    else {\n        return l[Math.floor(l.length / 2)];\n    }\n}\n"], ["//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n// true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n// true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text: string): boolean {\n  const reversed = text.split(\"\").reverse().join(\"\");\n  return text === reversed;\n}\n"], ["//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n: number, p: number): number {\n  if (n % p === 0) {\n    return p;\n  }\n  return mod(n, p);\n}\n"], ["//remove_vowels is a function that takes string and returns string without vowels.\n// >>> remove_vowels(\"\")\n// \"\"\n// >>> remove_vowels(\"abcdef\")\n// \"bcdf\"\n// >>> remove_vowels(\"aaaaa\")\n// \"\"\n// >>> remove_vowels(\"aaBAA\")\n// \"B\"\n// >>> remove_vowels(\"zbcd\")\n// \"zbcd\"\nfunction remove_vowels(text: string): string {\n    let vowels = \"aeiou\";\n    let result = \"\";\n    for (let i = 0; i < text.length; i++) {\n        if (text[i] !== vowels[0]) {\n            result += text[i];\n        }\n    }\n    return result;\n}\n"], ["//Return true if all numbers in the array l are below threshold t.\n// >>> below_threshold([1, 2, 4, 10], 100)\n// true\n// >>> below_threshold([1, 20, 4, 10], 5)\n// false\nfunction below_threshold(l: number[], t: number): boolean {\n    let n = l.length;\n    for (let i = 0; i < n; i++) {\n        if (l[i] < t) {\n            return false;\n        }\n    }\n    return true;\n}\n"], ["//Add two numbers x and y\n// >>> add(2, 3)\n// 5\n// >>> add(5, 7)\n// 12\nfunction add(x: number, y: number): number {\n    return x + y;\n}\n"], ["//Check if two words have the same characters.\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\n// true\n// >>> same_chars(\"abcd\", \"dddddddabc\")\n// true\n// >>> same_chars(\"dddddddabc\", \"abcd\")\n// true\n// >>> same_chars(\"eabcd\", \"dddddddabc\")\n// false\n// >>> same_chars(\"abcd\", \"dddddddabce\")\n// false\n// >>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\n// false\nfunction same_chars(s0: string, s1: string): boolean {\n    if (s0.length !== s1.length) {\n        return false;\n    }\n    var i, j, diff;\n    for (i = 0; i < s0.length; i++) {\n        if (s0[i] !== s1[i]) {\n            diff = s0[i] - s1[i];\n            if (diff !== 0) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n"], ["//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n <= 1) {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n"], ["//brackets is a string of \"<\" and \">\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"<<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets: string): boolean {\n  let open_brackets: string[] = brackets.split('');\n  let closed_brackets: string[] = [];\n\n  for (let i = 0; i < open_brackets.length; i++) {\n    if (open_brackets[i] === '(') {\n      closed_brackets.push(')');\n    } else if (open_brackets[i] === '[') {\n      closed_brackets.push(']');\n    } else if (open_brackets[i] === '{' && closed_brackets.length > 0) {\n      closed_brackets.push('}');\n    } else if (open_brackets[i] === '|' && closed_brackets.length > 0) {\n      closed_brackets.push('|');\n    }\n  }\n\n  return closed_brackets.length === open_brackets.length;\n}\n"], ["//Return true is array elements are monotonically increasing or decreasing.\n// >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n// >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l: number[]): boolean {\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    let l = l.length;\n    let result = true;\n    while (i < l.length) {\n        if (l[i] < l[j]) {\n            if (k < l.length) {\n                result = false;\n                break;\n            }\n            k = i;\n        }\n        else if (l[i] > l[j]) {\n            if (k < l.length) {\n                result = false;\n                break;\n            }\n            k = j;\n        }\n        else {\n            i++;\n            j++;\n        }\n    }\n    return result;\n}\n"], ["//Return sorted unique common elements for two arrays.\n// >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5, 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1: number[], l2: number[]): number[] {\n    let result = [];\n    for (let i = 0; i < l1.length; i++) {\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n            }\n        }\n    }\n    return result;\n}\n"], ["//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nfunction largest_prime_factor(n: number): number {\nconst primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 467, 479, 487, 49"], ["//sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n// 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n// 55\n// >>> sum_to_n(1)\n// 1\nfunction sum_to_n(n: number): number {\n    if (n === 0) {\n        return 0;\n    }\n    return n + sum_to_n(n - 1);\n}\n"], ["//brackets is a string of \"(\" and \")\".\n// return true if every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\")\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"(()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets: string): boolean {\n    let open_brackets = new Set();\n    let close_brackets = new Set();\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === '(') {\n            open_brackets.add(i);\n        } else if (brackets[i] === ')') {\n            if (open_brackets.has(i - 1)) {\n                return false;\n            }\n            open_brackets.delete(i - 1);\n        }\n    }\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === '(') {\n            close_brackets.add(i);\n        } else if (brackets[i] === ')') {\n            if (close_brackets.has(i - 1)) {\n                return false;\n            }\n            close_brackets.delete(i - 1);\n        }\n    }\n    return true;\n}\n```"], ["//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nfunction derivative(xs: number[]): number[] {\n    let result = [];\n    for (let i = 0; i < xs.length; i++) {\n        result.push(xs[i] * i);\n    }\n    return result;\n}\n"], ["//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n// >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction fibfib(n: number): number {\nreturn n > 0 ? fibfib(n-1) + fibfib(n-2) + fibfib(n-3) : 0;\n}\n\n\nA: I'm not sure if this is the best way to do it, but it's a start.\n\n"], ["//Write a function vowels_count which takes a string representing\n// a word as input and returns the number of vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n// 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s: string): number {\nconst vowels = ['a', 'e', 'i', 'o', 'u'];\nconst count = 0;\nfor (let i = 0; i < s.length; i++) {\nif (s[i] === vowels[0]) {\ncount++;\n}\nif (s[i] === vowels[1]) {\ncount++;\n}\nif (s[i] === vowels[2]) {\ncount++;\n}\nif (s[i] === vowels[3]) {\ncount++;\n}\nif (s[i] === vowels[4]) {\ncount++;\n}\n}\nreturn count;\n}\n"], ["//Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12, 2)\n// \"12\"\nfunction circular_shift(x: number, shift: number): string {\nif (shift > x.length) {\nreturn x.slice(0, -shift).join(\"\");\n}\nreturn x.slice(0, -shift).reverse().join(\"\");\n}\n\n\n"], ["//Task\n// Write a function that takes a string as input and returns the sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n// >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>> digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s: string): number {\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s.charCodeAt(i) >= 48 && s.charCodeAt(i) <= 57) {\n            sum += s.charCodeAt(i);\n        }\n    }\n    return sum;\n}\n"], ["//In this task, you will be given a string that represents a number of apples and oranges \n// that are distributed in a basket of fruit this basket contains \n// apples, oranges, and mango fruits. Given the string that represents the total number of \n// the oranges and apples and an integer that represent the total number of the fruits \n// in the basket return the number of the mango fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction fruit_distribution(s: string, n: number): number {\n    const fruit_count = [0, 0, 0];\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === \"a\") {\n            fruit_count[0]++;\n        } else if (s[i] === \"o\") {\n            fruit_count[1]++;\n        } else if (s[i] === \"m\") {\n            fruit_count[2]++;\n        }\n    }\n    return fruit_count.reduce((a, b) => a + b, 0);\n}\n"], ["//\"Given an array representing a branch of a tree that has non-negative integer nodes\n// your task is to pluck one of the nodes and return it.\n// The plucked node should be the node with the smallest even value.\n// If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// The plucked node should be returned in an array, [ smalest_value, its index ],\n// If there are no even values or the given array is empty, return [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there are two zeros,\n// so we will choose the first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction pluck(arr: number[]): number[] {\nconst even_values = arr.filter(x => x % 2 === 0);\nconst smallest_even_value = even_values.reduce((a, b) => a < b ? a : b, 0);\nconst smallest_index = even_values.findIndex(x => x % 2 === 0);\nreturn [smallest_even_value, smallest_index];\n}\n"], ["//You are given a non-empty array of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the array.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst: number[]): number {\n    let count: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            count++;\n        }\n    }\n    if (count > 0) {\n        return count;\n    }\n    return -1;\n}\n"], ["//Given array of integers, return array in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n// [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>> strange_sort_list([])\n// []\nfunction strange_sort_list(lst: number[]): number[] {\n    const min = lst.reduce((a, b) => a < b, 1);\n    const max = lst.reduce((a, b) => a > b, 1);\n    const result = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n            result.push(lst[i]);\n            min = lst[i];\n        } else if (lst[i] > max) {\n            result.push(lst[i]);\n            max = lst[i];\n        } else {\n            result.push(lst[i]);\n        }\n    }\n    return result;\n}\n"], ["//Given the lengths of the three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3, 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a: number, b: number, c: number): number {\n    if (a + b > c && b + c > a && c + a > b) {\n        return (a + b + c) / 2;\n    }\n    return -1;\n}\n"], ["//Write a function that returns true if the object q will fly, and false otherwise.\n// The object q will fly if it's balanced (it is a palindromic array) and the sum of its elements is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly([1, 2], 5)\n// false\n// # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// >>> will_it_fly([3, 2, 3], 1)\n// false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// >>> will_it_fly([3, 2, 3], 9)\n// true\n// # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// >>> will_it_fly([3], 5)\n// true\n// # 3 is less than the maximum possible weight, and it's balanced.\nfunction will_it_fly(q: number[], w: number): boolean {\n    let sum: number = 0;\n    for (let i: number = 0; i < q.length; i++) {\n        sum += q[i];\n    }\n    return sum <= w;\n}\n"], ["//Given an array arr of integers, find the minimum number of elements that\n// need to be changed to make the array palindromic. A palindromic array is an array that\n// is read the same backwards and forwards. In one change, you can change one element to any other element.\n// For example:\n// >>> smallest_change([1, 2, 3, 5, 4, 7, 9, 6])\n// 4\n// >>> smallest_change([1, 2, 3, 4, 3, 2, 2])\n// 1\n// >>> smallest_change([1, 2, 3, 2, 1])\n// 0\nfunction smallest_change(arr: number[]): number {\nconst n = arr.length;\nif (n === 0) return 0;\nconst min_change = Infinity;\nfor (let i = 0; i < n; i++) {\nconst min_change_after_swap = Infinity;\nfor (let j = 0; j < n; j++) {\nif (i !== j) {\nconst min_change_after_swap = min(min_change_after_swap,\narr[j] - arr[i] + min_change);\n}\n}\nmin_change = Math.min(min_change, min_change_after_swap);\n}\nreturn min_change;\n}\n"], ["//Write a function that accepts two arrays of strings and returns the array that has \n// total number of chars in the all strings of the array less than the other array.\n// if the two arrays have the same number of chars, return the first array.\n// Examples\n// >>> total_match([], [])\n// []\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n// [\"hI\", \"Hi\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n// [\"hi\", \"admin\"]\n// >>> total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n// [\"hI\", \"hi\", \"hi\"]\n// >>> total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n// [\"4\"]\nfunction total_match(lst1: string[], lst2: string[]): string[] {\n    let len1 = lst1.length;\n    let len2 = lst2.length;\n    if (len1 == len2) {\n        return lst1;\n    }\n    let len3 = Math.min(len1, len2);\n    let result = [];\n    for (let i = 0; i < len3; i++) {\n        let j = i + 1;\n        while (j < len1 && lst1[i] == lst1[j]) {\n            j++;\n        }\n        while (j < len2 && lst2[i] == lst2[j]) {\n            j++;\n        }\n        if (j == len1 || j == len2) {\n            result.push(lst1[i]);\n        }\n    }\n    return result;\n}\n"], ["//Write a function that returns true if the given number is the multiplication of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\nfunction is_multiply_prime(a: number): boolean {\n  if (a < 100) {\n    return true;\n  }\n  for (let i = 2; i * i <= a; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n}\n"], ["//Your task is to write a function that returns true if a number x is a simple\n// power of n and false in other cases.\n// x is a simple power of n if n**int=x\n// For example:\n// >>> is_simple_power(1, 4)\n// true\n// >>> is_simple_power(2, 2)\n// true\n// >>> is_simple_power(8, 2)\n// true\n// >>> is_simple_power(3, 2)\n// false\n// >>> is_simple_power(3, 1)\n// false\n// >>> is_simple_power(5, 3)\n// false\nfunction is_simple_power(x: number, n: number): boolean {\n  if (n === 1) {\n    return x === 1;\n  }\n  if (n === 2) {\n    return x === 1;\n  }\n  if (n === 3) {\n    return x === 1;\n  }\n  if (n === 4) {\n    return x === 1;\n  }\n  if (n === 5) {\n    return x === 1;\n  }\n  if (n === 6) {\n    return x === 1;\n  }\n  if (n === 7) {\n    return x === 1;\n  }\n  if (n === 8) {\n    return x === 1;\n  }\n  if (n === 9) {\n    return x === 1;\n  }\n  if (n === 10) {\n    return x === 1;\n  }\n  if (n === 11) {\n    return x === 1;\n  }\n  if (n === 12) {\n    return x === 1;\n  }\n  if (n === 13) {\n    return x === 1;\n  }\n  if (n === 14) {\n    return x === 1;\n  }\n  if (n === 15) {\n    return x === 1;\n  }\n  if (n === 16) {\n    return x === 1;\n "], ["//Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube(a: number): boolean {\n    if (a < 0) {\n        return false;\n    }\n    if (a % 2 == 0) {\n        return true;\n    }\n    return false;\n}\n\n"], ["//You have been tasked to write a function that receives \n// a hexadecimal number as a string and counts the number of hexadecimal \n// digits that are primes (prime number, or a prime, is a natural number \n// greater than 1 that is not a product of two smaller natural numbers).\n// Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F are always uppercase.\n// Examples:\n// >>> hex_key(\"AB\")\n// 1\n// >>> hex_key(\"1077E\")\n// 2\n// >>> hex_key(\"ABED1A33\")\n// 4\n// >>> hex_key(\"123456789ABCDEF0\")\n// 6\n// >>> hex_key(\"2020\")\n// 2\nfunction hex_key(num: string): number {\n    const num_array = num.split('');\n    const num_array_length = num_array.length;\n    const num_array_map = {};\n    for (let i = 0; i < num_array_length; i++) {\n        const num_digit = num_array[i];\n        if (num_digit.charCodeAt(0) >= 48 && num_digit.charCodeAt(0) <= 57) {\n            if (num_digit.charCodeAt(0) === 48) {\n                num_array_map[num_digit] = 1;\n            } else if (num_digit.charCodeAt(0) === 57) {\n                num_array_map["], ["//You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nfunction decimal_to_binary(decimal: number): string {\nconst binary: string = '';\nwhile (decimal > 0) {\nbinary += '0' + (decimal % 2).toString(2);\ndecimal = Math.floor(decimal / 2);\n}\nreturn binary;\n}\n\n\n# 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["//You are given a string s.\n// Your task is to check if the string is hapts or not.\n// A string is hapts if its length is at least 3 and every 3 consecutive letters are distinct\n// For example:\n// >>> is_happy(\"a\")\n// false\n// >>> is_happy(\"aa\")\n// false\n// >>> is_happy(\"abcd\")\n// true\n// >>> is_happy(\"aabb\")\n// false\n// >>> is_happy(\"adb\")\n// true\n// >>> is_happy(\"xyy\")\n// false\nfunction is_happy(s: string): boolean {\n    let length = s.length;\n    if (length < 3) {\n        return false;\n    }\n    let distinct = true;\n    for (let i = 0; i < length; i++) {\n        if (s[i] === s[i + 1]) {\n            distinct = false;\n            break;\n        }\n    }\n    return distinct;\n}\n"], ["//It is the last week of the semester and the teacher has to give the grades\n// to students. The teacher has been making her own algorithm for grading.\n// The only problem is, she has lost the code she used for grading.\n// She has given you an array of GPAs for some students and you have to write \n// a function that can output an array of letter grades using the following table:\n// GPA       |    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n// > 1.3                C-\n// > 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades: number[]): string[] {\n  const gpa_to_letter_grade = {\n    4.0: 'A+',\n    3.7: 'A',\n    3.3: 'A-',\n    3.0: 'B+',\n    2.7: 'B',\n    2.3: 'B-',\n    2.0: 'C+',\n    1.7: 'C',\n    1.3: 'C-',\n    1.0: 'D+',\n    0.7: 'D',\n    0.0: 'D-',\n    0.0: 'E'\n  };\n  const gpa_to_letter_grade_array = gpa_to_letter_grade.map(gpa => gpa_to_letter_grade[gpa]);\n  const gpa_to_letter_grade_array_sorted = gpa_to_letter_grade_array.sort();\n  const"], ["//Write a function that takes a string and returns true if the string\n// length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string: string): boolean {\n    let length: number = string.length;\n    for (let i: number = 0; i < length; i++) {\n        if (string.charAt(i) === string.charAt(length - 1)) {\n            return false;\n        }\n    }\n    return true;\n}\n"], ["//Given a positive integer n, return the count of the numbers of n-digit\n// positive integers that start or end with 1.\nfunction starts_one_ends(n: number): number {\nconst result: number[] = [];\nfor (let i = 1; i <= n; i++) {\nif (i % 2 === 0 || i % 3 === 0) {\ncontinue;\n}\nif (i % 2 === 1 || i % 3 === 1) {\nresult.push(i);\n}\n}\nreturn result;\n}\n"], ["//Given a positive integer N, return the total sum of its digits in binary.\n// Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>> solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N: number): string {\nconst num = N.toString(2);\nconst binary = num.split('').map(x => x.toString(2));\nconst result = '';\nfor (let i = 0; i < binary.length; i++) {\nif (binary[i] !== '') {\nresult += binary[i];\n}\n}\nreturn result;\n}\n\n\n"], ["//Given a non-empty array of integers lst. add the even elements that are at odd indices..\n// Examples:\n// >>> add([4, 2, 6, 7])\n// 2\nfunction add(lst: number[]): number {\n    let even = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 == 0) {\n            even += lst[i];\n        }\n    }\n    return even;\n}\n"], ["//Write a function that takes a string and returns an ordered version of it.\n// Ordered version of string, is a string where all words (separated by space)\n// are replaced by a new word where all the characters arranged in\n// ascending order based on ascii value.\n// Note: You should keep the order of words and blank spaces in the sentence.\n// For example:\n// >>> anti_shuffle(\"Hi\")\n// \"Hi\"\n// >>> anti_shuffle(\"hello\")\n// \"ehllo\"\n// >>> anti_shuffle(\"Hello World!!!\")\n// \"Hello !!!Wdlor\"\nfunction anti_shuffle(s: string): string {\n    const words = s.split(' ');\n    const new_words = [];\n    for (let i = 0; i < words.length; i++) {\n        const word = words[i];\n        const sorted_word = word.split('').sort().join('');\n        new_words.push(sorted_word);\n    }\n    return new_words.join(' ');\n}\n"], ["//You are given a 2 dimensional data, as a nested arrays,\n// which is similar to matrix, however, unlike matrices,\n// each row may contain a different number of columns.\n// Given lst, and integer x, find integers x in the array,\n// and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates of the row by columns in descending order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([], 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst: number[][], x: number): [number, number][] {\n    const row: number[] = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (i === x) {\n            row.push(lst[x - 1]);\n        } else {\n            row.push(lst[i]);\n        }\n    }\n    return row;\n}\n"], ["//Given an array of non-negative integers, return a cots of the given array after sorting,\n// you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n// or sort it in descending order if the sum( first index value, last index value) is even.\n// Note:\n// * don't change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n// [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2, 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array: number[]): number[] {\nconst sum_first_index = array.reduce((a, b) => a + b, 0);\nconst sum_last_index = array.reduce((a, b) => a + b, 0);\nif (sum_first_index % 2 === 0) {\narray.sort((a, b) => b - a);\n} else {\narray.sort((a, b) => a - b);\n}\nreturn array;\n}\n"], ["//Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"et\")\n// \"ix\"\nfunction encrypt(s: string): string {\n    let shift = 2;\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let char = s[i];\n        if (char >= 'a' && char <= 'z') {\n            result += char.charCodeAt(0) + shift;\n        }\n    }\n    return result;\n}\n\n"], ["//You are given an array of integers.\n// Write a function next_smallest() that returns the 2nd smallest element of the array.\n// Return undefined if there is no such element.\n// >>> next_smallest([1, 2, 3, 4, 5])\n// 2\n// >>> next_smallest([5, 1, 4, 3, 2])\n// 2\n// >>> next_smallest([])\n// undefined\n// >>> next_smallest([1, 1])\n// undefined\nfunction next_smallest(lst: number[]): number | undefined {\n    if (lst.length === 0) {\n        return undefined;\n    }\n    let min = lst[0];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n    }\n    return min;\n}\n\n"], ["//You'll be given a string of words, and your task is to count the number\n// of boredoms. A boredom is a sentence that starts with the word \"I\".\n// Sentences are delimited by '.', '?' or '!'.\n// For example:\n// >>> is_bored(\"Hello world\")\n// 0\n// >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n// 1\nfunction is_bored(S: string): number {\n    let i = 0;\n    while (i < S.length) {\n        if (S[i] == 'I') {\n            i++;\n        }\n        if (S[i] == '.') {\n            i++;\n        }\n        if (S[i] == '?') {\n            i++;\n        }\n        if (S[i] == '!') {\n            i++;\n        }\n    }\n    return i;\n}\n"], ["//Create a function that takes 3 numbers.\n// Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n// true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n// >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number, z: number): boolean {\n    if (x === y || x === z || y === z) {\n        return true;\n    }\n    return false;\n}\n"], ["//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message: string): string {\n    const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    const letters = message.split(\"\");\n    for (let i = 0; i < letters.length; i++) {\n        if (vowels.includes(letters[i])) {\n            const vowelIndex = letters.indexOf(\"a\");\n            const vowelLetter = vowels[vowelIndex];\n            const nextVowelIndex = vowelIndex + 1;\n            const nextVowelLetter = vowels[nextVowelIndex];\n            if (nextVowelLetter == \"e\") {\n                letters[i] = vowelLetter;\n            } else if (nextVowelLetter == \"o\") {\n                letters[i] = vowelLetter;\n            } else if (nextVowelLetter == \"u\") {\n                letters[i] = vowelLetter;\n            }\n        }\n    }\n    return letters.join(\"\");\n}\n"], ["//You are given an array of integers.\n// You need to find the largest prime value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n// >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n// 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0, 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (isPrime(lst[i])) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"], ["//Given an object, return true if all keys are strings in lower \n// case or all keys are strings in upper case, else return false.\n// The function should return false is the given object is empty.\n// Examples:\n// >>> check_dict_case({\"a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunction check_dict_case(dict: {[key: string]: string}): boolean {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (key in dict) {\n    if (dict[key].length === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n"], ["//Implement a function that takes an non-negative integer and returns an array of the first n\n// integers that are prime numbers and less than n.\n// for example:\n// >>> count_up_to(5)\n// [2, 3]\n// >>> count_up_to(11)\n// [2, 3, 5, 7]\n// >>> count_up_to(0)\n// []\n// >>> count_up_to(20)\n// [2, 3, 5, 7, 11, 13, 17, 19]\n// >>> count_up_to(1)\n// []\n// >>> count_up_to(18)\n// [2, 3, 5, 7, 11, 13, 17]\nfunction count_up_to(n: number): number[] {\nconst result = [];\nfor (let i = 1; i <= n; i++) {\nif (n % i === 0) {\nresult.push(i);\n}\n}\nreturn result;\n}\n"], ["//Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunction multiply(a: number, b: number): number {\n    if (a < 0 || b < 0) {\n        throw new Error(\"Invalid input\");\n    }\n    if (a === 0 || b === 0) {\n        return 0;\n    }\n    if (a === 1 || b === 1) {\n        return 1;\n    }\n    if (a === 2 || b === 2) {\n        return 4;\n    }\n    if (a === 3 || b === 3) {\n        return 9;\n    }\n    if (a === 4 || b === 4) {\n        return 16;\n    }\n    if (a === 5 || b === 5) {\n        return 25;\n    }\n    if (a === 6 || b === 6) {\n        return 36;\n    }\n    if (a === 7 || b === 7) {\n        return 49;\n    }\n    if (a === 8 || b === 8) {\n        return 64;\n    }\n    if (a === 9 || b === 9) {\n        return 81;\n    }\n    throw new Error(\"Invalid input\");\n}\n"], ["//Given a string s, count the number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\")\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s: string): number {\nconst lower_count = s.split('').filter(c => c.toLowerCase()).length;\nconst upper_count = s.split('').filter(c => c.toUpperCase()).length;\nreturn lower_count + upper_count;\n}\n"], ["//Create a function that takes a value (string) representing a number\n// and returns the closest integer to it. If the number is equidistant\n// from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away from zero means that if the given number is equidistant\n// from two integers, the one you should return is the one that is the\n// farthest from zero. For example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\") should return -15.\nfunction closest_integer(value: string): number {\nconst num_digits = 2;\nconst num_str = value.toString();\nconst num_int = parseInt(num_str, 10);\nconst num_abs = Math.abs(num_int);\nconst num_abs_diff = num_abs - num_abs % num_digits;\nif (num_abs_diff === 0) {\nreturn num_int;\n}\nconst num_abs_diff_abs = Math.abs(num_abs_diff);\nconst num_abs_diff_abs_diff = num_abs_diff_abs - num_abs_diff_abs % num_digits;\nif (num_abs_diff_abs_diff === 0) {\nreturn num_int;\n}\nreturn num_int + num_abs_diff;\n}\n\n\n"], ["//Given a positive integer n, you have to make a pile of n levels of stones.\n// The first level has n stones.\n// The number of stones in the next level is:\n// - the next odd number if n is odd.\n// - the next even number if n is even.\n// Return the number of stones in each level in an array, where element at index\n// i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n// [3, 5, 7]\nfunction make_a_pile(n: number): number[] {\nreturn [n, n + 1, n + 2];\n}\n\n\n# 2.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1"], ["//You will be given a string of words separated by commas or spaces. Your task is\n// to split the string into words and return an array of the words.\n// For example:\n// >>> words_string(\"Hi, my name is John\")\n// [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n// >>> words_string(\"One, two, three, four, five, six\")\n// [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s: string): string[] {\n    const words: string[] = s.split(' ');\n    return words;\n}\n"], ["//This function takes two positive numbers x and y and returns the\n// biggest even integer number that is in the range [x, y] inclusive. If \n// there's no such number, then the function should return -1.\n// For example:\n// >>> choose_num(12, 15)\n// 14\n// >>> choose_num(13, 12)\n// -1\nfunction choose_num(x: number, y: number): number {\n    if (x > y) {\n        return -1;\n    }\n    let num = x;\n    while (num <= y) {\n        if (num % 2 === 0) {\n            num++;\n        }\n    }\n    return num;\n}\n\n"], ["//You are given two positive integers n and m, and your task is to compute the\n// average of the integers from n through m (including n and m). \n// Round the answer to the nearest integer and convert that to binary.\n// If n is greater than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>> rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number): string| number {\n    let result: string = \"\";\n    while (n <= m) {\n        result += (n % 2) + \"1\";\n        n += 2;\n    }\n    return result;\n}\n"], ["//Given an array of positive integers x. return a sorted array of all \n// elements that hasn't any even digit.\n// Note: Returned array should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x: number[]): number[] {\n    const unique: number[] = [];\n    for (let i = 0; i < x.length; i++) {\n        if (x[i] % 2 === 0) {\n            unique.push(x[i]);\n        }\n    }\n    return unique;\n}\n"], ["//Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting array, and then replace each digit by its corresponding name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n// [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n// >>> by_length([])\n// []\n// If the array has any strange number ignore it:\n// >>> by_length([1, -1, 55])\n// [\"One\"]\nfunction by_length(arr: number[]): string[] {\n    if (arr.length === 0) {\n        return [];\n    }\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (i === 0) {\n            result.push(arr[i]);\n        } else {\n            result.push(arr[i].toString());\n        }\n    }\n    return result;\n}\n"], ["//Implement the function f that takes n as a parameter,\n// and returns an array of size n, such that the value of the element at index i is the factorial of i if i is even\n// or the sum of numbers from 1 to i otherwise.\n// i starts from 1.\n// the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n// Example:\n// >>> f(5)\n// [1, 2, 6, 24, 15]\nfunction f(n: number): number[] {\nif (n < 1) {\nreturn [];\n}\nif (n === 1) {\nreturn [1];\n}\nif (n === 2) {\nreturn [1, 1];\n}\nif (n === 3) {\nreturn [1, 2, 1];\n}\nif (n === 4) {\nreturn [1, 2, 3, 1];\n}\nif (n === 5) {\nreturn [1, 2, 3, 4, 1];\n}\nif (n === 6) {\nreturn [1, 2, 3, 4, 5, 1];\n}\nif (n === 7) {\nreturn [1, 2, 3, 4, 5, 6, 1];\n}\nif (n === 8) {\nreturn [1, 2, 3, 4, 5, 6, 7, 1];\n}\nif (n === 9) {\nreturn [1, 2, 3, 4, 5, 6, 7, 8, 1];\n}\nif (n === 10) {\nreturn [1, 2, 3, 4, 5, 6, 7, 8, 9, 1];\n}\nif (n === 11) {\nreturn [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1];\n}\nif (n === 12) {\nreturn [1, 2, "], ["//Given a positive integer n, return an array that has the number of even and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n// Example 1:\n// >>> even_odd_palindrome(3)\n// [1, 2]\n// Explanation:\n// Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n// >>> even_odd_palindrome(12)\n// [4, 6]\n// Explanation:\n// Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n// 1. 1 <= n <= 10^3\n// 2. returned array has the number of even and odd integer palindromes respectively.\nfunction even_odd_palindrome(n: number): [number, number] {\nconst even = [];\nconst odd = [];\nfor (let i = 1; i <= n; i++) {\nif (i % 2 === 0) {\neven.push(i);\n} else {\nodd.push(i);\n}\n}\nreturn [even, odd];\n}\n"], ["//Write a function count_nums which takes an array of integers and returns\n// the number of elements which has a sum of digits > 0.\n// If a number is negative, then its first signed digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\n// 0\n// >>> count_nums([-1, 11, -11])\n// 1\n// >>> count_nums([1, 1, 2])\n// 3\nfunction count_nums(arr: number[]): number {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let digit = arr[i];\n        if (digit > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n"], ["//We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n// numbers in the array will be randomly ordered. Your task is to determine if\n// it is possible to get an array sorted in non-decreasing order by performing \n// the following operation on the given array:\n// You are allowed to perform right shift operation any number of times.\n// One right shift operation means shifting all elements of the array by one\n// position in the right direction. The last element of the array will be moved to\n// the starting position in the array i.e. 0th index. \n// If it is possible to obtain the sorted array by performing the above operation\n// then return true else return false.\n// If the given array is empty then return true.\n// Note: The given array is guaranteed to have unique elements.\n// For Example:\n// >>> move_one_ball([3, 4, 5, 1, 2])\n// true\n// Explanation: By performin 2 right shift operations, non-decreasing order can\n// be achieved for the given array.\n// >>> move_one_ball([3, 5, 4, 1, 2])\n// false\n// Explanation:It is not possible to get non-decreasing order for the given\n// array by performing any number of right shift operations.\nfunction move_one_ball(arr: number[]): boolean {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > arr[i + 1]) {\n            count++;\n        }\n    }\n    if (count == 0) {\n        return true;\n    }\n    return false;\n}\n"], ["//In this problem, you will implement a function that takes two arrays of numbers,\n// and determines whether it is possible to perform an exchange of elements\n// between them to make lst1 an array of only even numbers.\n// There is no limit on the number of exchanged elements between lst1 and lst2.\n// If it is possible to exchange elements between the lst1 and lst2 to make\n// all the elements of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n// >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be non-empty.\nfunction exchange(lst1: number[], lst2: number[]): string {\n    let even: number[] = [];\n    for (let i: number = 0; i < lst1.length; i++) {\n        if (lst1[i] % 2 === 0) {\n            even.push(lst1[i]);\n        }\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n        if (lst2[i] % 2 === 0) {\n            even.push(lst2[i]);\n        }\n    }\n    if (even.length === 0) {\n        return \"NO\";\n    }\n    let result: string = \"\";\n    for (let i: number = 0; i < even.length; i++) {\n        result += even[i];\n    }\n    return result;\n}\n"], ["//Given a string representing a space separated lowercase letters, return an object\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram(\"a b c\")\n// {\"a\": 1, \"b\": 1, \"c\": 1}\n// >>> histogram(\"a b b a\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"a b c a b\")\n// {\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b a\")\n// {\"b\": 4}\n// >>> histogram(\"\")\n// {}\nfunction histogram(test: string): {[key: string]: number} {\nconst words = test.split(\" \");\nconst counts = {};\nfor (const word of words) {\nconst word = word.trim();\nif (word.length > 0) {\nconst wordCount = counts[word];\nif (wordCount === undefined) {\ncounts[word] = 1;\n} else {\ncounts[word] += 1;\n}\n}\n}\nreturn counts;\n}\n\n\n"], ["//Task\n// We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n// then check if the result string is palindrome.\n// A string is called palindrome if it reads the same backward as forward.\n// You should return an array containing the result string and true/false for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\", false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>> reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s: string, c: string): [string, boolean] {\n    let result: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === c) {\n            result += s.substring(i, s.length - 1);\n            s.length -= 1;\n        }\n    }\n    return [result, s.length === 0];\n}\n\n"], ["//Given an array of strings, where each string consists of only digits, return an array.\n// Each element i of the output should be \"the number of odd elements in the\n// string i of the input.\" where all the i's should be replaced by the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([\"1234567\"])\n// [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n// >>> odd_count([\"3\", \"11111111\"])\n// [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\nfunction odd_count(lst: string[]): string[] {\n    let odd_count = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length % 2 !== 0) {\n            odd_count.push(i + \"n the str\" + lst[i] + \" of the input.\");\n        }\n    }\n    return odd_count;\n}\n"], ["//Given an array of integers nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n// 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums: number[]): number {\n  const min_sum = Infinity;\n  const max_sum = 0;\n  for (const num of nums) {\n    const min_sum = Math.min(min_sum + num, max_sum + num);\n    max_sum = Math.max(max_sum, min_sum);\n  }\n  return max_sum;\n}\n"], ["//You are given a rectangular grid of wells. Each row represents a single well,\n// and each 1 in a row represents a single unit of water.\n// Each well has a corresponding bucket that can be used to extract water from it, \n// and all buckets have the same capacity.\n// Your task is to use the buckets to empty the wells.\n// Output the number of times you need to lower the buckets.\n// Example 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n// Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity <= 10\nfunction max_fill(grid: number[][], capacity: number): number {\n    const n = grid.length;\n    const m = grid[0].length;\n    const buckets = Array.from({ length: n }, () => Array(m).fill(0));\n    const water = Array.from({ length: n }, () => Array(m).fill(0));\n    const res = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                buckets[i][j] = capacity;\n            } else {\n                buckets[i][j] = 0;\n            }\n        }"], ["//In this Kata, you have to sort an array of non-negative integers according to\n// number of ones in their binary representation in ascending order.\n// For similar number of ones, sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4])\n// [1, 2, 3, 4, 5]\n// >>> sort_array([-2, -3, -4, -5, -6])\n// [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4])\n// [0, 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n    if (arr.length === 0) {\n        return arr;\n    }\n    if (arr.length === 1) {\n        return arr;\n    }\n    const mid = Math.floor(arr.length / 2);\n    const left = arr.slice(0, mid);\n    const right = arr.slice(mid);\n    sort_array(left);\n    sort_array(right);\n    return arr.concat(left, right);\n}\n\n"], ["//Given a string s and a natural number n, you have been tasked to implement \n// a function that returns an array of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty array.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s: string, n: number): string[] {\n    const words = s.split(' ').filter(word => word.length >= n).map(word => word.trim());\n    if (words.length === 0) {\n        return [];\n    }\n    return words.sort().reverse().map(word => word.trim());\n}\n"], ["//You are given a word. Your task is to find the closest vowel that stands between \n// two consonants from the right side of the word (case sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n// find any vowel met the above condition. \n// You may assume that the given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word: string): string {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    let closest_vowel = '';\n    for (let i = 0; i < word.length; i++) {\n        if (word[i] >= 'a' && word[i] <= 'z') {\n            continue;\n        }\n        if (word[i] >= 'A' && word[i] <= 'Z') {\n            continue;\n        }\n        if (vowels.includes(word[i])) {\n            closest_vowel = word[i];\n            break;\n        }\n    }\n    return closest_vowel;\n}\n"], ["//You are given an array of two strings, both strings consist of open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check if it is possible to concatenate the two strings in\n// some order, that the resulting string will be good.\n// A string S is considered to be good if and only if all parentheses in S\n// are balanced. For example: the string '(())()' is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n// Examples:\n// >>> match_parens([\"()(\", \")\"])\n// \"Yes\"\n// >>> match_parens([\")\", \")\"])\n// \"No\"\nfunction match_parens(lst: string[]): string {\n    let result: string = \"\";\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] == '(') {\n            result += '(';\n        } else if (lst[i] == ')') {\n            result += ')' ;\n        } else {\n            result += lst[i];\n        }\n    }\n    return result;\n}\n"], ["//Given an array arr of integers and a positive integer k, return a sorted array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\nconst max = arr[0];\nfor (let i = 1; i < k; i++) {\nif (arr[i] > max) {\nmax = arr[i];\n}\n}\nreturn [max];\n}\n\n"], ["//Given a non-empty array of integers, return the sum of all of the odd elements that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n// >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\nfunction solution(lst: number[]): number {\nreturn Math.max(...lst);\n}\n"], ["//Given a non-empty array of integers arr and an integer k, return\n// the sum of the elements with at most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction add_elements(arr: number[], k: number): number {\nconst prefix = arr.reduce((acc, curr) => acc + curr, 0);\nconst suffix = arr.reduce((acc, curr) => acc + curr, 0);\nconst result = prefix + k + suffix;\nreturn result;\n}\n\n\n"], ["//Given a positive integer n, return a sorted array that has the odd numbers in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n// as follows: start with any positive integer n. Then each term is obtained from the \n// previous term as follows: if the previous term is even, the next term is one half of \n// the previous term. If the previous term is odd, the next term is 3 times the previous\n// term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned array sorted in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// >>> get_odd_collatz(5)\n// [1, 5]\nfunction get_odd_collatz(n: number): number[] {\n    const odd_collatz = [1];\n    while (odd_collatz.length < n) {\n        const odd_collatz_next = odd_collatz[odd_collatz.length - 1] * 2 + 1;\n        odd_collatz.push(odd_collatz_next);\n    }\n    return odd_collatz;\n}\n"], ["//You have to write a function which validates a given date string and\n// returns true if the date is valid otherwise false.\n// The date is valid if all of the following rules are satisfied:\n// 1. The date string is not empty.\n// 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months should not be less than 1 or higher than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// >>> valid_date(\"03-11-2000\")\n// true\n// >>> valid_date(\"15-01-2012\")\n// false\n// >>> valid_date(\"04-0-2040\")\n// false\n// >>> valid_date(\"06-04-2020\")\n// true\n// >>> valid_date(\"06/04/2020\")\n// false\nfunction valid_date(date: string): boolean {\n    let days = date.split('-').length;\n    let months = date.split('-').length;\n    if (days < 1 || days > 31 || months < 1 || months > 12) {\n        return false;\n    }\n    let day = date.split('-').slice(0, 1);\n    let month = date.split('-').slice(1, 2);\n    if (day.length !== 1 || month.length !== 1) {\n        return false;\n    }\n    let year = date.split('-').slice(2, 3);\n    if (year.length !== 1) {\n        return false;\n    }\n    let month_number = parseInt(month[0]);\n    let day_number = parseInt(day[0]);\n    let year_number = parseInt(year[0]);\n    if"], ["//Given a string of words, return an array of words split on whitespace, if no whitespaces exists in the text you\n// should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n// >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n// 3\nfunction split_words(txt: string): string[]| number {\n    const words: string[] = txt.split(' ');\n    const odd_count: number = words.reduce((a, b) => a + b.length % 2, 0);\n    return words.filter(word => word.length % 2);\n}\n"], ["//Given an array of numbers, return whether or not they are sorted\n// in ascending order. If array has more than 1 duplicate of the same\n// number, return false. Assume no negative numbers and only integers.\n// Examples\n// >>> is_sorted([5])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5])\n// false\n// >>> is_sorted([1, 2, 3, 4, 5, 6])\n// true\n// >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n// false\n// >>> is_sorted([1, 2, 2, 3, 3, 4])\n// true\n// >>> is_sorted([1, 2, 2, 2, 3, 4])\n// false\nfunction is_sorted(lst: number[]): boolean {\n    if (lst.length === 0) {\n        return true;\n    }\n    let first = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < first) {\n            return false;\n        }\n        first = lst[i];\n    }\n    return true;\n}\n"], ["//You are given two intervals,\n// where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals are closed which means that the interval (start, end)\n// includes both start and end.\n// For each given interval, it is assumed that its start is less or equal its end.\n// Your task is to determine whether the length of intersection of these two \n// intervals is a prime number.\n// Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n// If the length of the intersection is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>> intersection([1, 2], [2, 3])\n// \"NO\"\n// >>> intersection([-1, 1], [0, 4])\n// \"NO\"\n// >>> intersection([-3, -1], [-5, 5])\n// \"YES\"\nfunction intersection(interval1: [number, number], interval2: [number, number]): string {\n    let start1 = interval1[0];\n    let end1 = interval1[1];\n    let start2 = interval2[0];\n    let end2 = interval2[1];\n    let length = end2 - start1;\n    if (length < 0) {\n        return \"NO\";\n    }\n    let result = \"\";\n    for (let i = start1; i <= end1; i++) {\n        if (i <= start2 || end2 <= i) {\n            result += i;\n        }\n    }\n    return result;\n}\n"], ["//You are given an array arr of integers and you need to return\n// sum of magnitudes of integers multiplied by product of all signs\n// of each number in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr: number[]): number | undefined {\n    if (arr.length === 0) {\n        return undefined;\n    }\n    let product = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            product *= 1;\n        } else if (arr[i] < 0) {\n            product *= -1;\n        } else {\n            product *= 0;\n        }\n    }\n    return product;\n}\n"], ["//Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have to find the minimum path of length k in the grid. You can start\n// from any cell, and in each step you can move to any of the neighbor cells,\n// in other words, you can go to cells which share an edge with you current\n// cell.\n// Please note that a path of length k means visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered less than a path B (of length k) if\n// after making the ordered arrays of the values on the cells that A and B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered array of the values on the cells that the minimum path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n// [1]\nfunction minPath(grid: number[][], k: number): number[] {\n    if (grid.length === 0) {\n        return [];\n    }\n    if (grid[0].length === 0) {\n        return [grid[0][0]];\n    }\n    let min_val = grid[0][0];\n    let min_path = [grid[0][0]];\n    for ("], ["//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return an array of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1, 3, 2, 8]\nfunction tri(n: number): number[] {\n  if (n == 0) {\n    return [];\n  }\n  if (n == 1) {\n    return [1];\n  }\n  if (n == 2) {\n    return [1, 2];\n  }\n  const result: number[] = [];\n  for (let i = 0; i < n; i++) {\n    result.push(tri(i) + tri(i + 1) + tri(i + 2));\n  }\n  return result;\n}\n"], ["//Given a positive integer n, return the product of the odd digits.\n// Return 0 if all digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n// 0\n// >>> digits(235)\n// 15\nfunction digits(n: number): number {\n    if (n === 0) {\n        return 0;\n    }\n    let res = 0;\n    for (let i = 1; i <= n; i++) {\n        res += i % 10;\n    }\n    return res;\n}\n"], ["//Create a function that takes a string as input which contains only square brackets.\n// The function should return true if and only if there is a valid subsequence of brackets \n// where at least one bracket in the subsequence is nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\")\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n// false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n// true\nfunction is_nested(string: string): boolean {\n    let stack: Stack<string> = new Stack<string>();\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[' || string[i] === ']') {\n            stack.push(string[i]);\n        } else if (string[i] === ']') {\n            if (stack.isEmpty()) {\n                return false;\n            }\n            stack.pop();\n        } else if (string[i] === '[' || string[i] === ']') {\n            stack.push(string[i]);\n        }\n    }\n    return stack.isEmpty();\n}\n\n"], ["//You are given an array of numbers.\n// You need to return the sum of squared numbers in the given array,\n// round each element in the array to the upper int(Ceiling) first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0, 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n// 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.pow(lst[i], 2);\n    }\n    return Math.ceil(sum);\n}\n\nconsole.log(sum_squares([1.0, 2.0, 3.0])); // 14\nconsole.log(sum_squares([1.0, 4.0, 9.0])); // 98\nconsole.log(sum_squares([1.0, 3.0, 5.0, 7.0])); // 84\nconsole.log(sum_squares([1.4, 4.2, 0.0])); // 29\nconsole.log(sum_squares([-2.4, 1.0, 1.0])); // 6\n"], ["//Create a function that returns true if the last character\n// of a given string is an alphabetical character and is not\n// a part of a word, and false otherwise.\n// Note: \"word\" is a group of characters separated by space.\n// Examples:\n// >>> check_if_last_char_is_a_letter(\"apple pie\")\n// false\n// >>> check_if_last_char_is_a_letter(\"apple pi e\")\n// true\n// >>> check_if_last_char_is_a_letter(\"apple pi e \")\n// false\n// >>> check_if_last_char_is_a_letter(\"\")\n// false\nfunction check_if_last_char_is_a_letter(txt: string): boolean {\n    let last_char: string = txt.split(' ')[txt.length - 1];\n    return last_char.toUpperCase() !== txt.toUpperCase();\n}\n\n"], ["//Create a function which returns the largest index of an element which\n// is not greater than or equal to the element immediately preceding it. If\n// no such element exists then return -1. The given array will not contain\n// duplicate values.\n// Examples:\n// >>> can_arrange([1, 2, 4, 3, 5])\n// 3\n// >>> can_arrange([1, 2, 3])\n// -1\nfunction can_arrange(arr: number[]): number {\n    if (arr.length === 0) {\n        return -1;\n    }\n    let left = 0;\n    let right = arr.length - 1;\n    while (left < right) {\n        if (arr[left] < arr[right]) {\n            arr[left++] = arr[right++];\n        } else {\n            arr[left++] = arr[right--];\n        }\n    }\n    return left;\n}\n"], ["//Create a function that returns an array (a, b), where 'a' is\n// the largest of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n// If there is no negative or positive integers, return them as undefined.\n// Examples:\n// >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>> largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n// [undefined, undefined]\nfunction largest_smallest_integers(lst: number[]): [number | undefined, number | undefined] {\n    if (lst.length === 0) {\n        return [undefined, undefined];\n    }\n    let min = lst[0];\n    let max = lst[lst.length - 1];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min = lst[i];\n        }\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return [min, max];\n}\n"], ["//Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n// Example\n// >>> is_equal_to_sum_even(4)\n// false\n// >>> is_equal_to_sum_even(6)\n// false\n// >>> is_equal_to_sum_even(8)\n// true\nfunction is_equal_to_sum_even(n: number): boolean {\nreturn n % 2 === 0;\n}\n"], ["//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n// 288\n// The function will receive an integer as input and should return the special\n// factorial of this integer.\nfunction special_factorial(n: number): number {\nif (n < 0) {\nthrow new Error('special_factorial: n must be a positive integer');\n}\nif (n === 0) {\nreturn 1;\n}\nreturn n * special_factorial(n - 1);\n}\n"], ["//Given a string text, replace all spaces in it with underscores, \n// and if a string has more than 2 consecutive spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\" Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text: string): string {\n    let spaces: number = text.split(' ').length - 1;\n    let result: string = text;\n    for (let i = 0; i < spaces; i++) {\n        result = result.replace(/\\s/g, '-');\n    }\n    return result;\n}\n"], ["//Create a function which takes a string representing a file's name, and returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n// A file's name is considered to be valid if and only if all the following conditions \n// are met:\n// - There should not be more than three digits ('0'-'9') in the file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring before the dot should not be empty, and it starts with a letter from \n// the latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\nfunction file_name_check(file_name: string): string {\n    const regex = /^[a-zA-Z0-9\\.\\-\\_]+$/;\n    if (file_name.match(regex)) {\n        const name = file_name.split('.').pop();\n        if (name.length === 0 || name.startsWith('.')) {\n            return \"No\";\n        }\n        if (name.match(/[a-zA-Z0-9\\.\\-\\_]+/)) {\n            return \"Yes\";\n        }\n    }\n    return \"No\";\n}\n"], ["//\"\n// This function will take an array of integers. For all entries in the array, the function shall square the integer entry if its index is a \n// multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n// change the entries in the array whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// []\n// >>> lst\n// [-1, -5, 2, -1, -5]\nfunction sum_squares(lst: number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0 || i % 4 !== 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n"], ["//You are given a string representing a sentence,\n// the sentence contains some words separated by a space,\n// and you have to return a string that contains the words from the original sentence,\n// whose lengths are prime numbers,\n// the order of the words in the new string should be the same as the original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence: string): string {\nconst words = sentence.split(' ');\nconst primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 317, 323, 337, 347, 349, 353, 359, 367, 37"], ["//Your task is to implement a function that will simplify the expression\n// x * n. The function returns true if x * n evaluates to a whole number and false\n// otherwise. Both x and n, are string representation of a fraction, and have the following format,\n// <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n// >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\")\n// false\nfunction simplify(x: string, n: string): boolean {\n    let numerator = parseInt(x.split(\"/\").join(\"\"));\n    let denominator = parseInt(n.split(\"/\").join(\"\"));\n    if (numerator % denominator === 0) {\n        return true;\n    }\n    return false;\n}\n"], ["//Write a function which sorts the given array of integers\n// in ascending order according to the sum of their digits.\n// Note: if there are several items with similar sum of their digits,\n// order them based on their index in original array.\n// For example:\n// >>> order_by_points([1, 11, -1, -11, -12])\n// [-1, -11, 1, -12, 11]\n// >>> order_by_points([])\n// []\nfunction order_by_points(nums: number[]): number[] {\nconst sum_of_digits: number[] = [];\nfor (const num of nums) {\nsum_of_digits.push(num.toString().split('').reduce((a, b) => a + b, 0));\n}\nconst sorted_sum_of_digits: number[] = sum_of_digits.sort((a, b) => a - b);\nconst sorted_nums: number[] = nums.map(num => {\nreturn num.toString().split('').map((digit) => digit * sorted_sum_of_digits.indexOf(digit)).join('');\n});\nreturn sorted_nums;\n}\n\n"], ["//Write a function that takes an array of numbers as input and returns \n// the number of elements in the array that are greater than 10 and both \n// first and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// >>> specialFilter([15, -73, 14, -15])\n// 1\n// >>> specialFilter([33, -2, -3, 45, 21, 109])\n// 2\nfunction specialFilter(nums: number[]): number {\n    const oddDigits = nums.filter(num => num % 2 !== 0);\n    const oddDigitsLength = oddDigits.length;\n    const firstDigitOdd = oddDigits[0];\n    const lastDigitOdd = oddDigits[oddDigitsLength - 1];\n    return oddDigitsLength === 1 || oddDigitsLength === oddDigits.length - 1;\n}\n"], ["//You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>> get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunction get_max_triples(n: number): number {\n    const a: number[] = [1, 3, 7, 13, 21];\n    let max_triples = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] % 3 == 0) {\n                    max_triples = Math.max(max_triples, 1);\n                }\n            }\n        }\n    }\n    return max_triples;\n}\n"], ["//Write a function that accepts an array of strings as a parameter,\n// deletes the strings that have odd lengths from it,\n// and returns the resulted array with a sorted order,\n// The array is always an array of strings and never an array of numbers,\n// and it may contain duplicates.\n// The order of the array should be ascending by length of each word, and you\n// should return the array sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n// The function should return an array of strings in sorted order.\n// You may assume that all words will have the same length.\n// For example:\n// >>> list_sort([\"aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst: string[]): string[] {\n    const sum = lst.reduce((a, b) => a + b, 0);\n    const sorted = lst.sort((a, b) => a - b);\n    return sorted.map(x => sum + x);\n}\n"], ["//A simple program which should return the value of x if n is \n// a prime number and should return the value of y otherwise.\n// Examples:\n// >>> x_or_y(7, 34, 12)\n// 34\n// >>> x_or_y(15, 8, 5)\n// 5\nfunction x_or_y(n: number, x: number, y: number): number {\n    if (n % x === 0) {\n        return x;\n    }\n    if (n % y === 0) {\n        return y;\n    }\n    return n;\n}\n"], ["//Given an array of numbers, return the sum of squares of the numbers\n// in the array that are odd. Ignore numbers that are negative or not integers.\n// >>> double_the_difference([1, 3, 2, 0])\n// 10\n// >>> double_the_difference([-1, -2, 0])\n// 0\n// >>> double_the_difference([9, -2])\n// 81\n// >>> double_the_difference([0])\n// 0\n// If the input array is empty, return 0.\nfunction double_the_difference(lst: number[]): number {\n    if (lst.length === 0) {\n        return 0;\n    }\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.floor(lst[i] / 2);\n    }\n    return sum;\n}\n"], ["//I think we all remember that feeling when the result of some long-awaited\n// event is finally known. The feelings and thoughts you have at that moment are\n// definitely worth noting down and comparing.\n// Your task is to determine if a person correctly guessed the results of a number of matches.\n// You are given two arrays of scores and guesses of equal length, where each index shows a match. \n// Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n// the value is 0, and if not, the value is the absolute difference between the guess and the score.\n// example:\n// >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n// [0, 0, 0, 0, 3, 3]\n// >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n// [4, 4, 1, 0, 0, 6]\nfunction compare(game: number[], guess: number[]): number[] {\n    const result = game.map((score, index) => {\n        if (index === guess.length) {\n            return 0;\n        }\n        const guessScore = guess[index];\n        const scoreScore = score[index];\n        return Math.abs(scoreScore - guessScore);\n    });\n    return result.map((score, index) => {\n        return result.indexOf(0) === index ? 0 : result[index] = Math.abs(score - game[index]);\n    });\n}\n"], ["//You will be given the name of a class (a string) and an array of extensions.\n// The extensions are to be used to load additional classes to the class. The\n// strength of the extension is as follows: Let CAP be the number of the uppercase\n// letters in the extension's name, and let SM be the number of lowercase letters \n// in the extension's name, the strength is given by the fraction CAP - SM. \n// You should find the strongest extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n// If there are two or more extensions with the same strength, you should\n// choose the one that comes first in the array.\n// For example, if you are given \"Slices\" as the class and an array of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"])\n// \"my_class.AA\"\nfunction Strongest_Extension(class_name: string, extensions: string[]): string {\n    let class_name_uppercase = class_name.toUpperCase();\n    let class_name_lowercase = class_name.toLowerCase();\n    let class_name_str = class_name_uppercase + class_name_lowercase;\n    let extensions_str = extensions.map(e => e.toUpperCase()).join(' ');\n    let extensions_str_lowercase = extensions_str.toLowerCase();\n    let extensions_str_str = extensions_str_lowercase.split(' ').join('');\n    let extensions_str_str_str = extensions_str_str.split(' ').join('');\n    let extensions_str_str_str_str = extensions_str_str_str.split(' ').join('');\n    let extensions_str_str_str_str_str = extensions_str_str_str_str.split(' ').join('');"], ["//You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\", \"abd\")\n// false\n// >>> cycpattern_check(\"hello\", \"ell\")\n// true\n// >>> cycpattern_check(\"whassup\", \"psus\")\n// false\n// >>> cycpattern_check(\"abab\", \"baa\")\n// true\n// >>> cycpattern_check(\"efef\", \"eeff\")\n// false\n// >>> cycpattern_check(\"himenss\", \"simen\")\n// true\nfunction cycpattern_check(a: string, b: string): boolean {\n    let pattern: string = b.split('').reverse().join('');\n    let result: boolean = false;\n    for (let i = 0; i < a.length; i++) {\n        if (a.includes(pattern[i])) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n}\n"], ["//Given an integer. return an array that has the number of even and odd digits respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n// [1, 2]\nfunction even_odd_count(num: number): [number, number] {\n    let count = [0, 0];\n    for (let i = 0; i < num; i++) {\n        if (num % 2 === 0) {\n            count[0]++;\n        } else {\n            count[1]++;\n        }\n    }\n    return [count[0] - count[1], count[1] - count[0]];\n}\n```\n\n"], ["//Given a positive integer, obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunction int_to_mini_roman(number: number): string {\nconst roman_values = {\n1: \"i\",\n2: \"ii\",\n3: \"iii\",\n4: \"iv\",\n5: \"v\",\n6: \"vi\",\n7: \"vii\",\n8: \"viii\",\n9: \"ix\",\n10: \"x\",\n11: \"xi\",\n12: \"xii\",\n13: \"xiii\",\n14: \"xiv\",\n15: \"xv\",\n16: \"xvi\",\n17: \"xvii\",\n18: \"xviii\",\n19: \"xix\",\n20: \"xx\",\n21: \"xxi\",\n22: \"xxii\",\n23: \"xxiii\",\n24: \"xxiv\",\n25: \"xxv\",\n26: \"xxvi\",\n27: \"xxvii\",\n28: \"xxviii\",\n29: \"xxix\",\n30: \"xxx\",\n31: \"xxxi\",\n32: \"xxxii\",\n33: \"xxxiii\",\n34: \"xxxiv\",\n35: \"xxxv\",\n36: \"xxxvi\",\n37: \"xxxvii\",\n38: \"xxxviii\",\n39: \"xxxix\",\n40: \"xl\",\n41: \"xli\",\n42: \"xlii\",\n43: \"xliii\",\n44: \"xliv\",\n45: \"xlv\",\n46: \"xlvi\",\n47: \"xlvii\",\n48: \""], ["//Given the lengths of the three sides of a triangle. Return true if the three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled triangle is a triangle in which one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1, 2, 3)\n// false\nfunction right_angle_triangle(a: number, b: number, c: number): boolean {\n    if (a === b || b === c || a === c) {\n        return false;\n    }\n    let s = (a + b + c) / 2;\n    return (s - a) * (s - b) * (s - c) >= 0;\n}\n\n\n"], ["//Write a function that accepts an array of strings.\n// The array contains different words. Return the word with maximum number\n// of unique characters. If multiple strings have maximum number of unique\n// characters, return the one which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\", \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n// \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction find_max(words: string[]): string {\n    let max_count = 0;\n    let max_word = '';\n    for (let i = 0; i < words.length; i++) {\n        let count = words[i].split('').reduce((a, b) => a + b.length, 0);\n        if (count > max_count) {\n            max_count = count;\n            max_word = words[i];\n        } else if (count == max_count && words[i].localeCompare(max_word) > 0) {\n            max_word = words[i];\n        }\n    }\n    return max_word;\n}\n"], ["//You're a hungry rabbit, and you already have eaten a certain number of carrots,\n// but now you need to eat more carrots to complete the day's meals.\n// you should return an array of [ total number of eaten carrots after your meals,\n// the number of carrots left after your meals ]\n// if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6, 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11, 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the number of carrots that you have eaten.\n// @need : integer\n// the number of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number: number, need: number, remaining: number): number[] {"], ["//Given two arrays operator, and operand. The first array has basic algebra operations, and \n// the second array is an array of integers. Use the two given arrays to build the algebric \n// expression and return the evaluation of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator array is equal to the length of operand array minus one.\n// Operand is an array of of non-negative integers.\n// Operator array has at least one operator, and operand array has at least two operands.\nfunction do_algebra(operator: string[], operand: number[]): number {\n    if (operator.length < 1 || operand.length < 2) {\n        throw new Error('Invalid input');\n    }\n    const result = 0;\n    for (let i = 0; i < operator.length; i++) {\n        const op = operator[i];\n        const op_val = operand[i];\n        if (op == '+') {\n            result += op_val;\n        } else if (op == '-') {\n            result -= op_val;\n        } else if (op == '*') {\n            result *= op_val;\n        } else if (op == '//') {\n            result = result * op_val;\n        } else if (op == '**') {\n            result = result * result * op_val;\n        }\n    }\n    return result;\n}\n"], ["//You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>> solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve(s: string): string {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 'a' || s[i] === 'b' || s[i] === 'c') {\n            result += s[i].charCodeAt() > 97 ? 'A' : 'B';\n        } else {\n            result += s[i];\n        }\n    }\n    if (s.length === 0) {\n        result += \"1234\";\n    } else {\n        result += \"4321\";\n    }\n    return result;\n}\n"], ["//Given a string 'text', return its md5 hash equivalent string.\n// If 'text' is an empty string, return undefined.\n// >>> string_to_md5(\"Hello world\")\n// \"3e25960a79dbc69b674cd4ec67a72c62\"\nfunction string_to_md5(text: string): string | undefined {\n  if (text === \"\") {\n    return undefined;\n  }\n\n  const md5 = crypto.createHash(\"md5\");\n  md5.update(text);\n  return md5.digest();\n}\n\n"], ["//Given two positive integers a and b, return the even digits between a\n// and b, in ascending order.\n// For example:\n// >>> generate_integers(2, 8)\n// [2, 4, 6, 8]\n// >>> generate_integers(8, 2)\n// [2, 4, 6, 8]\n// >>> generate_integers(10, 14)\n// []\nfunction generate_integers(a: number, b: number): number[] {\n    const result: number[] = [];\n    for (let i = a; i <= b; i++) {\n        result.push(i);\n    }\n    return result;\n}\n\n"]]