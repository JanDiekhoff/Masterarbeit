[["from typing import List\n\n\n\n# <func> # Python \n#      Check if in given list of numbers, are any two numbers closer to each other than\n#     given threshold.\n#     >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n#     False\n#     >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n#     True\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return False\n    return True\n\n\n"], ["from typing import List\n\n\n\n# <func> # Python \n#      Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n#     separate those group into separate strings and return the list of those.\n#     Separate groups are balanced (each open brace is properly closed) and not nested within each other\n#     Ignore any spaces in the input string.\n#     >>> separate_paren_groups('( ) (( )) (( )( ))')\n#     ['()', '(())', '(()())']\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    for group in paren_string.split(' '):\n        if group == '':\n            groups.append('')\n        else:\n            groups.append(group)\n    return groups\n\n\n"], ["# <func> # Python \n#      Given a positive floating point number, it can be decomposed into\n#     and integer part (largest integer smaller than given number) and decimals\n#     (leftover part always smaller than 1).\n#     Return the decimal part of the number.\n#     >>> truncate_number(3.5)\n#     0.5\ndef truncate_number(number: float) -> float:\n    \"\"\"Return the decimal part of the number.\"\"\"\n    return number - int(number)\n"], ["from typing import List\n\n\n\n# <func> # Python \n#      You're given a list of deposit and withdrawal operations on a bank account that starts with\n#     zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n#     at that point function should return True. Otherwise it should return False.\n#     >>> below_zero([1, 2, 3])\n#     False\n#     >>> below_zero([1, 2, -4, 5])\n#     True\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\n\n"], ["from typing import List\n\n\n\n# <func> # Python \n#      For a given list of input numbers, calculate Mean Absolute Deviation\n#     around the mean of this dataset.\n#     Mean Absolute Deviation is the average absolute difference between each\n#     element and a centerpoint (mean in this case):    MAD = average | x - x_mean |\n#     >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n#     1.0\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate Mean Absolute Deviation around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    # TODO: Implement Mean Absolute Deviation\n    pass\n\n"], ["from typing import List\n\n\n\n# <func> # Python \n#      Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n#     >>> intersperse([], 4)\n#     []\n#     >>> intersperse([1, 2, 3], 4)\n#     [1, 4, 2, 4, 3]\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    return [numbers[i] + delimeter + numbers[i + 1] for i in range(len(numbers) - 1)]\n\n\n"], ["from typing import List\n\n\n\n# <func> # Python \n#      Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n#     For each of the group, output the deepest level of nesting of parentheses.\n#     E.g. (()()) has maximum two levels of nesting while ((())) has three.\n#     >>> parse_nested_parens('(()()) ((())) () ((())()())')\n#     [2, 3, 1, 3]\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(len(stack) - 1)\n        elif char == ')':\n            if stack[-1] == 0:\n                stack.pop()\n            else:\n                stack.append(len(stack) - 1)\n    return stack\n\n\n"], ["from typing import List\n\n\n\n# <func> # Python \n#      Filter an input list of strings only for ones that contain given substring\n#     >>> filter_by_substring([], 'a')\n#     []\n#     >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n#     ['abc', 'bacd', 'array']\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n\n\n"], ["from typing import List, Tuple\n\n\n\n# <func> # Python \n#      For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n#     Empty sum should be equal to 0 and empty product should be equal to 1.\n#     >>> sum_product([])\n#     (0, 1)\n#     >>> sum_product([1, 2, 3, 4])\n#     (10, 24)\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        return (numbers[0] + numbers[1], numbers[0] * numbers[1])\n\n"], ["from typing import List, Tuple\n\n\n\n# <func> # Python \n#      From a given list of integers, generate a list of rolling maximum element found until given moment\n#     in the sequence.\n#     >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n#     [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_val = 0\n    max_index = 0\n    for index, num in enumerate(numbers):\n        if num > max_val:\n            max_val = num\n            max_index = index\n        elif num == max_val:\n            max_index = index\n    return [max_val] + [numbers[max_index + 1:]]\n\n\n"], ["# <func> # Python \n#      Test if given string is a palindrome \n#     return string == string[::-1]\ndef is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\n"], ["from typing import List\n\n\n\n# <func> # Python \n#      Input are two strings a and b consisting only of 1s and 0s.\n#     Perform binary XOR on these inputs and return result also as a string.\n#     >>> string_xor('010', '110')\n#     '100'\ndef string_xor(a: str, b: str) -> str:\n    return ''.join(map(lambda x: '1' if x == '0' else '0', a ^ b))\n\n\n"], ["from typing import List, Optional\n\n\n\n# <func> # Python \n#      Out of list of strings, return the longest one. Return the first one in case of multiple\n#     strings of the same length. Return None in case the input list is empty.\n#     >>> longest([])\n#     >>> longest(['a', 'b', 'c'])\n#     'a'\n#     >>> longest(['a', 'bb', 'ccc'])\n#     'ccc'\ndef longest(strings: List[str]) -> Optional[str]:\n    if len(strings) == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\n\n"], ["# <func> # Python \n#      Return a greatest common divisor of two integers a and b\n#     >>> greatest_common_divisor(3, 5)\n#     1\n#     >>> greatest_common_divisor(25, 15)\n#     5\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n\n"], ["from typing import List\n\n\n\n# <func> # Python \n#      Return list of all prefixes from shortest to longest of the input string\n#     >>> all_prefixes('abc')\n#     ['a', 'ab', 'abc']\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            prefixes.append(string[i:j])\n    return prefixes\n\n\n"], ["# <func> # Python \n#      Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n#     >>> string_sequence(0)\n#     '0'\n#     >>> string_sequence(5)\n#     '0 1 2 3 4 5'\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n))\n\n\n"], ["# <func> # Python \n#      Given a string, find out how many distinct characters (regardless of case) does it consist of\n#     >>> count_distinct_characters('xyzXYZ')\n#     3\n#     >>> count_distinct_characters('Jerry')\n#     4\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # TODO: Write your code here\n    pass\n"], ["from typing import List\n\n\n\n# <func> # Python \n#      Input to this function is a string representing musical notes in a special ASCII format.\n#     Your task is to parse this string and return list of integers corresponding to how many beats does each\n#     not last.\n#     Here is a legend:    'o' - whole note, lasts four beats\n#     'o|' - half note, lasts two beats\n#     '.|' - quater note, lasts one beat\n#     >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n#     [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\ndef parse_music(music_string: str) -> List[int]:\n    music_string = music_string.replace('o|', '').replace('.|', '').replace('o', '').replace('|', '')\n    music_string = music_string.replace('o', '').replace('.|', '').replace('o|', '').replace('|', '')\n    music_string = music_string.replace('o', '').replace('.|', '').replace('o|', '').replace('|', '')\n    music_string = music_string.replace('o', '').replace('.|', '').replace('o|', '').replace('|', '')\n    music_string = music_string.replace('o', '').replace('.|', '').replace('o|', '').replace('|', '')\n    music_string = music_string.replace('o', '').replace('.|', '').replace('o|', '').replace('|', '')\n    music_string = music_string.replace('o', '').replace('.|', '').replace('o|', '').replace('|', '')\n    music_string = music_string.replace('o', '').replace('.|', '').replace('o|', '').replace('|', '')\n    music_string = music_string.replace('o', '').replace('.|', '').replace('o|', '').replace('|', '')\n    music_string = music_string"], ["# <func> # Python \n#      Find how many times a given substring can be found in the original string. Count overlaping cases.\n#     >>> how_many_times('', 'a')\n#     0\n#     >>> how_many_times('aaa', 'a')\n#     3\n#     >>> how_many_times('aaaa', 'aa')\n#     3\ndef how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["from typing import List\n\n\n\n# <func> # Python \n#      Input is a space-delimited string of numberals from 'zero' to 'nine'.\n#     Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n#     Return the string with numbers sorted from smallest to largest\n#     >>> sort_numbers('three one five')\n#     'one three five'\ndef sort_numbers(numbers: str) -> str:\n    numbers = numbers.split()\n    numbers.sort(key=int)\n    return ''.join(numbers)\n\n\n"], ["from typing import List, Tuple\n\n\n\n# <func> # Python \n#      From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n#     other and return them in order (smaller number, larger number).\n#     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n#     (2.0, 2.2)\n#     >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n#     (2.0, 2.0)\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # 1.0, 2.0, 3.0, 4.0, 5.0, 2.2\n    # 2.0, 2.2, 3.0, 4.0, 5.0, 2.0\n    # 2.0, 2.2, 3.0, 4.0, 5.0, 2.0\n    # 2.0, 2.2, 3.0, 4.0, 5.0, 2.0\n    # 2.0, 2.2, 3.0, 4.0, 5.0, 2.0\n    # 2.0, 2.2, 3.0, 4.0, 5.0, 2.0\n    # 2.0, 2.2, 3.0, 4.0, 5.0, 2.0\n    # 2.0, 2.2, 3.0, 4.0, 5.0, 2.0\n    # 2.0, 2.2, 3.0, 4.0, 5.0, 2.0\n    # 2.0, 2.2, 3.0, 4.0, 5.0, 2.0\n"], ["from typing import List\n\n\n\n# <func> # Python \n#      Given list of numbers (of at least two elements), apply a linear transform to that list,\n#     such that the smallest number will become 0 and the largest will become 1\n#     >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n#     [0.0, 0.25, 0.5, 0.75, 1.0]\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == 0:\n        min_num = 1\n    if max_num == 1:\n        max_num = 2\n    return [min_num, max_num] + numbers\n\n\n"], ["from typing import List, Any\n\n\n\n# <func> # Python \n#      Filter given list of any python values only for integers\n#     >>> filter_integers(['a', 3.14, 5])\n#     [5]\n#     >>> filter_integers([1, 2, 3, 'abc', {}, []])\n#     [1, 2, 3]\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n\n\n"], ["# <func> # Python \n#      Return length of given string\n#     >>> strlen('')\n#     0\n#     >>> strlen('abc')\n#     3\ndef strlen(string: str) -> int:\n    return len(string)\n"], ["# <func> # Python \n#      For a given number n, find the largest number that divides n evenly, smaller than n\n#     >>> largest_divisor(15)\n#     5\ndef largest_divisor(n: int) -> int:\n    \"\"\"\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    # TODO: Write your code here\n    pass\n"], ["from typing import List\n\n\n\n# <func> # Python \n#      Return list of prime factors of given integer in the order from smallest to largest.\n#     Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n#     Input number should be equal to the product of all factors\n#     >>> factorize(8)\n#     [2, 2, 2]\n#     >>> factorize(25)\n#     [5, 5]\n#     >>> factorize(70)\n#     [2, 5, 7]\ndef factorize(n: int) -> List[int]:\n    factors = []\n    while n > 1:\n        while n % 2 == 0:\n            factors.append(2)\n            n //= 2\n        n = n // 2\n        while n > 1:\n            while n % 5 == 0:\n                factors.append(5)\n                n //= 5\n            n = n // 5\n        while n > 1:\n            while n % 7 == 0:\n                factors.append(7)\n                n //= 7\n            n = n // 7\n        while n > 1:\n            while n % 11 == 0:\n                factors.append(11)\n                n //= 11\n            n = n // 11\n        while n > 1:\n            while n % 13 == 0:\n                factors.append(13)\n                n //= 13\n            n = n // 13\n        while n > 1:\n            while n % 17 == 0:\n                factors.append(17)\n                n //= 17\n            n = n // 17\n        while n > 1:\n            while n % 19 == 0:\n                factors.append(19)\n                n //= 19\n            n = n // 19\n        while n > 1:\n            while n % 31 == 0:\n                factors.append(31)\n                n //= 31\n            n = n // 31\n"], ["from typing import List\n\n\n\n# <func> # Python \n#      From a list of integers, remove all elements that occur more than once.\n#     Keep order of elements left the same as in the input.\n#     >>> remove_duplicates([1, 2, 3, 2, 4])\n#     [1, 3, 4]\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return [number for number in numbers if len(set(number)) == len(numbers)]\n\n\n"], ["# <func> # Python \n#      For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n#     >>> flip_case('Hello')\n#     'hELLO'\ndef flip_case(string: str) -> str:\n    return ''.join(c.lower() if c.islower() else c.upper() for c in string)\n\n"], ["from typing import List\n\n\n\n# <func> # Python \n#      Concatenate list of strings into a single string\n#     >>> concatenate([])\n#     ''\n#     >>> concatenate(['a', 'b', 'c'])\n#     'abc'\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n\n\n"], ["from typing import List\n\n\n\n# <func> # Python \n#      Filter an input list of strings only for ones that start with a given prefix.\n#     >>> filter_by_prefix([], 'a')\n#     []\n#     >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n#     ['abc', 'array']\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n\n\n"], ["# <func> # Python \n#     Return only positive numbers in the list.\n#     >>> get_positive([-1, 2, -4, 5, 6])\n#     [2, 5, 6]\n#     >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n#     [5, 3, 2, 3, 9, 123, 1]\ndef get_positive(l: list):\n    return [x for x in l if x > 0]\n\n"], ["# <func> # Python \n#     Return true if a given number is prime, and false otherwise.\n#     >>> is_prime(6)\n#     False\n#     >>> is_prime(101)\n#     True\n#     >>> is_prime(11)\n#     True\n#     >>> is_prime(13441)\n#     True\n#     >>> is_prime(61)\n#     True\n#     >>> is_prime(4)\n#     False\n#     >>> is_prime(1)\n#     False\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\n\n"], ["import math\n\n\n\n# <func> # Python \n#     Evaluates polynomial with coefficients xs at point x.\n#     return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n#     return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\n"], ["# <func> # Python \n#     This function takes a list l and returns a list l' such that\n#     l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n#     to the values of the corresponding indicies of l, but sorted.\n#     >>> sort_third([1, 2, 3])\n#     [1, 2, 3]\n#     >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n#     [2, 6, 3, 4, 8, 9, 5]\ndef sort_third(l: list):\n    # TODO: Write your solution here\n    return l\n\n"], ["# <func> # Python \n#     Return sorted unique elements in a list\n#     >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n#     [0, 2, 3, 5, 9, 123]\ndef unique(l: list):\n    return sorted(list(set(l)))\n\n\n"], ["# <func> # Python \n#     Return maximum element in the list.\n#     >>> max_element([1, 2, 3])\n#     3\n#     >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n#     123\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n"], ["# <func> # Python \n#     Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n#     >>> fizz_buzz(50)\n#     0\n#     >>> fizz_buzz(78)\n#     2\n#     >>> fizz_buzz(79)\n#     3\ndef fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += 1\n    return count\n"], ["# <func> # Python \n#     This function takes a list l and returns a list l' such that\n#     l' is identical to l in the odd indicies, while its values at the even indicies are equal\n#     to the values of the even indicies of l, but sorted.\n#     >>> sort_even([1, 2, 3])\n#     [1, 2, 3]\n#     >>> sort_even([5, 6, 3, 4])\n#     [3, 6, 5, 4]\ndef sort_even(l: list):\n    l = sorted(l, key=lambda x: x % 2)\n    return [x for x in l if x % 2 == 0] + [x for x in l if x % 2 != 0]\n\n"], ["# <func> # Python \n#     returns encoded string by cycling groups of three characters.\n#     # split string to groups. Each of length 3.\n#     groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n#     # cycle elements in each group. Unless group has fewer elements than 3.\n#     groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n#     return \"\".join(groups)\ndef encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n"], ["# <func> # Python \n#     prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n#     >>> prime_fib(1)\n#     2\n#     >>> prime_fib(2)\n#     3\n#     >>> prime_fib(3)\n#     5\n#     >>> prime_fib(4)\n#     13\n#     >>> prime_fib(5)\n#     89\ndef prime_fib(n: int):\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    fib_list = [2, 3]\n    for i in range(3, n + 1):\n        fib_list.append(fib_list[i - 1] + fib_list[i - 2])\n    return fib_list[n - 1]\n\n\n"], ["# <func> # Python \n#     triples_sum_to_zero takes a list of integers as an input.\n#     it returns True if there are three distinct elements in the list that\n#     sum to zero, and False otherwise.\n#     >>> triples_sum_to_zero([1, 3, 5, 0])\n#     False\n#     >>> triples_sum_to_zero([1, 3, -2, 1])\n#     True\n#     >>> triples_sum_to_zero([1, 2, 3, 7])\n#     False\n#     >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n#     True\n#     >>> triples_sum_to_zero([1])\n#     False\ndef triples_sum_to_zero(l: list):\n    if len(l) == 0:\n        return True\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"], ["# <func> # Python \n#     Imagine a road that's a perfectly straight infinitely long line.\n#     n cars are driving left to right;  simultaneously, a different set of n cars\n#     are driving right to left.   The two sets of cars start out being very far from\n#     each other.  All cars move in the same speed.  Two cars are said to collide\n#     when a car that's moving left to right hits a car that's moving right to left.\n#     However, the cars are infinitely sturdy and strong; as a result, they continue moving\n#     in their trajectory as if they did not collide.\n#     This function outputs the number of such collisions.\ndef car_race_collision(n: int):\n    cars = [0 for _ in range(n)]\n    cars[0] = 1\n    for i in range(1, n):\n        cars[i] = cars[i - 1] + 1\n    cars[n - 1] = cars[n - 2] + 1\n    for i in range(n - 2, -1, -1):\n        cars[i] = cars[i + 1] + 1\n    return cars[n - 1]\n\n"], ["# <func> # Python \n#     Return list with elements incremented by 1.\n#     >>> incr_list([1, 2, 3])\n#     [2, 3, 4]\n#     >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n#     [6, 4, 6, 3, 4, 4, 10, 1, 124]\ndef incr_list(l: list):\n    return [x + 1 for x in l]\n"], ["# <func> # Python \n#     pairs_sum_to_zero takes a list of integers as an input.\n#     it returns True if there are two distinct elements in the list that\n#     sum to zero, and False otherwise.\n#     >>> pairs_sum_to_zero([1, 3, 5, 0])\n#     False\n#     >>> pairs_sum_to_zero([1, 3, -2, 1])\n#     False\n#     >>> pairs_sum_to_zero([1, 2, 3, 7])\n#     False\n#     >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n#     True\n#     >>> pairs_sum_to_zero([1])\n#     False\ndef pairs_sum_to_zero(l):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return False\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["# <func> # Python \n#     Change numerical base of input number x to base.\n#     return string representation after the conversion.\n#     base numbers are less than 10.\n#     >>> change_base(8, 3)\n#     '22'\n#     >>> change_base(8, 2)\n#     '1000'\n#     >>> change_base(7, 2)\n#     '111'\ndef change_base(x: int, base: int):\n    if x < 0:\n        raise ValueError(\"base number must be positive\")\n    if x == 0:\n        return \"0\"\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x == 3:\n        return \"3\"\n    if x == 4:\n        return \"4\"\n    if x == 5:\n        return \"5\"\n    if x == 6:\n        return \"6\"\n    if x == 7:\n        return \"7\"\n    if x == 8:\n        return \"8\"\n    if x == 9:\n        return \"9\"\n    if x == 10:\n        return \"10\"\n    if x == 11:\n        return \"11\"\n    if x == 12:\n        return \"12\"\n    if x == 13:\n        return \"13\"\n    if x == 14:\n        return \"14\"\n    if x == 15:\n        return \"15\"\n    if x == 16:\n        return \"16\"\n    if x == 17:\n        return \"17\"\n    if x == 18:\n        return \"18\"\n    if x == 19:\n        return \"19\"\n    if x == 20:\n        return \"20\"\n    if x == 21:\n        return \"21\"\n    if x == 22:\n        return \"22\"\n    if x == 23:\n        return \"23\"\n    if x == 24"], ["# <func> # Python \n#     Given length of a side and high return area for a triangle.\n#     >>> triangle_area(5, 3)\n#     7.5\ndef triangle_area(a, h):\n    return (a * h) / 2\n"], ["# <func> # Python \n#     The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's \ndef fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib4(n-1) + fib4(n-2)\n"], ["# <func> # Python \n#     Return median of elements in the list l.\n#     >>> median([3, 1, 2, 4, 5])\n#     3\n#     >>> median([-10, 4, 6, 1000, 10, 20])\n#     15.0\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 0:\n        return None\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n"], ["# <func> # Python \n#     Checks if given string is a palindrome\n#     >>> is_palindrome('')\n#     True\n#     >>> is_palindrome('aba')\n#     True\n#     >>> is_palindrome('aaaaa')\n#     True\n#     >>> is_palindrome('zbcd')\n#     False\ndef is_palindrome(text: str):\n    return text == text[::-1]\n"], ["# <func> # Python \n#     Return 2^n modulo p (be aware of numerics).\n#     >>> modp(3, 5)\n#     3\n#     >>> modp(1101, 101)\n#     2\n#     >>> modp(0, 101)\n#     1\n#     >>> modp(3, 11)\n#     8\n#     >>> modp(100, 101)\n#     1\ndef modp(n: int, p: int):\n    return (n % p) % p\n\n"], ["# <func> # Python \n#     returns encoded string by shifting every character by 5 in the alphabet.\n#     return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\ndef encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n"], ["# <func> # Python \n#     remove_vowels is a function that takes string and returns string without vowels.\n#     >>> remove_vowels('')\n#     ''\n#     >>> remove_vowels(\"abc\ndef remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join([char for char in text if char not in vowels])\n\n\n"], ["# <func> # Python \n#     Return True if all numbers in the list l are below threshold t.\n#     >>> below_threshold([1, 2, 4, 10], 100)\n#     True\n#     >>> below_threshold([1, 20, 4, 10], 5)\n#     False\ndef below_threshold(l: list, t: int):\n    return all(i < t for i in l)\n"], ["# <func> # Python \n#     Add two numbers x and y\n#     >>> add(2, 3)\n#     5\n#     >>> add(5, 7)\n#     12\ndef add(x: int, y: int):\n    return x + y\n\n"], ["# <func> # Python \n#     Check if two words have the same characters.\n#     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n#     True\n#     >>> same_chars('abcd', 'dddddddabc')\n#     True\n#     >>> same_chars('dddddddabc', 'abcd')\n#     True\n#     >>> same_chars('eabcd', 'dddddddabc')\n#     False\n#     >>> same_chars('abcd', 'dddddddabce')\n#     False\n#     >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n#     False\ndef same_chars(s0: str, s1: str):\n    if len(s0) != len(s1):\n        return False\n    for i in range(len(s0)):\n        if s0[i] != s1[i]:\n            return False\n    return True\n"], ["# <func> # Python \n#     Return n-th Fibonacci number.\n#     >>> fib(10)\n#     55\n#     >>> fib(1)\n#     1\n#     >>> fib(8)\n#     21\ndef fib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n"], ["# <func> # Python \n#      brackets is a string of \"<\" and \">\".\n#     return True if every opening bracket has a corresponding closing bracket.\n#     >>> correct_bracketing(\"<\")\n#     False\n#     >>> correct_bracketing(\"<>\")\n#     True\n#     >>> correct_bracketing(\"<<><>>\")\n#     True\n#     >>> correct_bracketing(\"><<>\")\n#     False\ndef correct_bracketing(brackets: str):\n    brackets = brackets.replace(\" \", \"\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"[\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"{\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"[\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"{\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"[\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"{\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"[\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"{\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"[\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"{\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets."], ["# <func> # Python \n#     Return True is list elements are monotonically increasing or decreasing.\n#     >>> monotonic([1, 2, 4, 20])\n#     True\n#     >>> monotonic([1, 20, 4, 10])\n#     False\n#     >>> monotonic([4, 1, 0, -10])\n#     True\ndef monotonic(l: list):\n    if len(l) == 0:\n        return True\n    if len(l) == 1:\n        return l[0] > l[0]\n    if l[0] == l[1]:\n        return True\n    if l[0] > l[1]:\n        return False\n    for i in range(2, len(l)):\n        if l[i] < l[i-1]:\n            return False\n    return True\n"], ["# <func> # Python \n#     Return sorted unique common elements for two lists.\n#     >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n#     [1, 5, 653]\n#     >>> common([5, 3, 2, 8], [3, 2])\n#     [2, 3]\ndef common(l1: list, l2: list):\n    return sorted(list(set(l1).intersection(l2)))\n\n\n"], ["# <func> # Python \n#     Return the largest prime factor of n. Assume n > 1 and is not a prime.\n#     >>> largest_prime_factor(13195)\n#     29\n#     >>> largest_prime_factor(2048)\n#     2\ndef largest_prime_factor(n: int):\n    if n < 2:\n        return n\n    while n % 2 == 0:\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            n //= i\n    return n\n"], ["# <func> # Python \n#     sum_to_n is a function that sums numbers from 1 to n.\n#     >>> sum_to_n(30)\n#     465\n#     >>> sum_to_n(100)\n#     5050\n#     >>> sum_to_n(5)\n#     15\n#     >>> sum_to_n(10)\n#     55\n#     >>> sum_to_n(1)\n#     1\ndef sum_to_n(n: int):\n    \"\"\"\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n\n"], ["# <func> # Python \n#      brackets is a string of \"(\" and \")\".\n#     return True if every opening bracket has a corresponding closing bracket.\n#     >>> correct_bracketing(\"(\")\n#     False\n#     >>> correct_bracketing(\"()\")\n#     True\n#     >>> correct_bracketing(\"(()())\")\n#     True\n#     >>> correct_bracketing(\")(()\")\n#     False\ndef correct_bracketing(brackets: str):\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets ="], ["# <func> # Python \n#      xs represent coefficients of a polynomial.\n#     xs[0] + xs[1] * x + xs[2] * x^2 + ....\n#      Return derivative of this polynomial in the same form.\n#     >>> derivative([3, 1, 2, 4, 5])\n#     [1, 4, 12, 20]\n#     >>> derivative([1, 2, 3])\n#     [2, 6]\ndef derivative(xs: list):\n    return [\n        xs[0] + xs[1] * x + xs[2] * x**2 + ... +\n        xs[len(xs) - 1] * x**(len(xs) - 1)\n    ]\n"], ["# <func> # Python \n#     The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's \ndef fibfib(n: int):\n    \"\"\"\n    Returns the nth number in the FibFib sequence\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n"], ["FIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\n\n# <func> # Python \n#     Write a function vowels_count which takes a string representing\n#     a word as input and returns the number of vowels in the string.\n#     Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n#     vowel, but only when it is at the end of the given word.\n#     Example:    >>> vowels_count(\"abcde\")\n#     2\n#     >>> vowels_count(\"ACEDY\")\n#     3\ndef vowels_count(s):\n    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\n"], ["# <func> # Python \n#     Circular shift the digits of the integer x, shift the digits right by shift\n#     and return the result as a string.\n#     If shift > number of digits, return digits reversed.\n#     >>> circular_shift(12, 1)\n#     \"21\"\n#     >>> circular_shift(12, 2)\n#     \"12\"\ndef circular_shift(x, shift):\n    return str(x) if shift > len(str(x)) else circular_shift(str(x)[shift:], shift)\n"], ["# <func> # Python \n#     Task\n#     Write a function that takes a string as input and returns the sum of the upper characters only'\n#     ASCII codes.\n#     Examples:        digitSum(\"\") => 0\n#         digitSum(\"abAB\") => 131\n#         digitSum(\"abcCd\") => 67\n#         digitSum(\"helloE\") => 69\n#         digitSum(\"woArBld\") => 131\n#         digitSum(\"aAaaaXa\") => 153\ndef digitSum(s):\n    sum = 0\n    for i in range(len(s)):\n        if s[i] == s[i].upper():\n            sum += ord(s[i]) - ord('0')\n    return sum\n"], ["# <func> # Python \n#     In this task, you will be given a string that represents a number of apples and oranges \n#     that are distributed in a basket of fruit this basket contains \n#     apples, oranges, and mango fruits. Given the string that represents the total number of \n#     the oranges and apples and an integer that represent the total number of the fruits \n#     in the basket return the number of the mango fruits in the basket.\n#     for examble:    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n#     fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n#     fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n#     fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\ndef fruit_distribution(s,n):\n    if s == \"\":\n        return 0\n    else:\n        return int(s.replace(\"apples\",\"\").replace(\"oranges\",\"\").replace(\"mango\",\"\").replace(\"fruits\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\"fruit\",\"\").replace(\""], ["# <func> # Python \n#     \"Given an array representing a branch of a tree that has non-negative integer nodes\n#     your task is to pluck one of the nodes and return it.\n#     The plucked node should be the node with the smallest even value.\n#     If multiple nodes with the same smallest even value are found return the node that has smallest index.\n#     The plucked node should be returned in a list, [ smalest_value, its index ],\n#     If there are no even values or the given array is empty, return [].\n#     Example 1:        Input: [4,2,3]\n#         Output: [2, 1]\n#         Explanation: 2 has the smallest even value, and 2 has the smallest index.\n#     Example 2:        Input: [1,2,3]\n#         Output: [2, 1]\n#         Explanation: 2 has the smallest even value, and 2 has the smallest index. \n#     Example 3:        Input: []\n#         Output: []\n#     Example 4:        Input: [5, 0, 3, 0, 4, 2]\n#         Output: [0, 1]\n#         Explanation: 0 is the smallest value, but  there are two zeros,\n#                      so we will choose the first zero, which has the smallest index.\n#     Constraints:        * 1 <= nodes.length <= 10000\n#         * 0 <= node.value\ndef pluck(arr):\n    if not arr:\n        return []\n    if not arr[0]:\n        return [arr[0][0]]\n    if not arr[0][0]:\n        return [arr[0][0]]\n    if arr[0][0] == arr[0][1]:\n        return [arr[0][0]]\n    if arr[0][0] == arr[0][2]:\n        return [arr[0][0]]\n    if arr[0][0] == arr[0][3]:\n        return [arr[0][0]]\n    if arr[0][0] == arr[0][4]:\n        return"], ["# <func> # Python \n#     You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n#     zero, and has a frequency greater than or equal to the value of the integer itself. \n#     The frequency of an integer is the number of times it appears in the list.\n#     If no such a value exist, return -1.\n#     Examples:        search([4, 1, 2, 2, 3, 1]) == 2\n#         search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n#         search([5, 5, 4, 4, 4]) == -1\ndef search(lst):\n    max_freq = 0\n    max_freq_val = 0\n    for i in lst:\n        if i > 0 and i % max_freq == 0:\n            max_freq = i // max_freq\n            max_freq_val = i\n        elif i > 0 and i % max_freq_val == 0:\n            max_freq = max_freq + 1\n            max_freq_val = i\n    return max_freq\n"], ["# <func> # Python \n#     Given list of integers, return list in strange order.\n#     Strange sorting, is when you start with the minimum value,\n#     then maximum of the remaining integers, then minimum and so on.\n#     Examples:    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n#     strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n#     strange_sort_list([]) == []\ndef strange_sort_list(lst):\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    min_val = min(lst)\n    max_val = max(lst)\n    lst.sort(reverse=True)\n    lst.sort(key=lambda x: x - min_val)\n    return lst\n\n"], ["# <func> # Python \n#     Given the lengths of the three sides of a triangle. Return the area of\n#     the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n#     Otherwise return -1\n#     Three sides make a valid triangle when the sum of any two sides is greater \n#     than the third side.\n#     Example:    triangle_area(3, 4, 5) == 6.00\n#     triangle_area(1, 2, 10) == -1\ndef triangle_area(a, b, c):\n    if a + b > c and b + c > a and c + a > b:\n        return (a + b + c) / 2\n    else:\n        return -1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["# <func> # Python \n#     Write a function that returns True if the object q will fly, and False otherwise.\n#     The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n#     Example:    will_it_fly([1, 2], 5) \u279e False \n#     # 1+2 is less than the maximum possible weight, but it's unbalanced.\n#     will_it_fly([3, 2, 3], 1) \u279e False\n#     # it's balanced, but 3+2+3 is more than the maximum possible weight.\n#     will_it_fly([3, 2, 3], 9) \u279e True\n#     # 3+2+3 is less than the maximum possible weight, and it's balanced.\n#     will_it_fly([3], 5) \u279e True\n#     # 3 is less than the maximum possible weight, and it's balanced.\ndef will_it_fly(q,w):\n    if len(q)==0:\n        return True\n    if len(q)==1:\n        return q[0]<=w\n    if q[0]>w:\n        return False\n    if q[1:]<=q[:-1]:\n        return False\n    return will_it_fly(q[1:],w)\n\n\n"], ["# <func> # Python \n#     Given an array arr of integers, find the minimum number of elements that\n#     need to be changed to make the array palindromic. A palindromic array is an array that\n#     is read the same backwards and forwards. In one change, you can change one element to any other element.\n#     For example:    smallest_change([1,2,3,5,4,7,9,6]) == 4\n#     smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n#     smallest_change([1, 2, 3, 2, 1]) == 0\ndef smallest_change(arr):\n    # Write your code here\n    if len(arr) == 1:\n        return 0\n    min_change = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] != arr[j]:\n                min_change += 1\n    return min_change\n\n\n\n"], ["# <func> # Python \n#     Write a function that accepts two lists of strings and returns the list that has \n#     total number of chars in the all strings of the list less than the other list.\n#     if the two lists have the same number of chars, return the first list.\n#     Examples\n#     total_match([], []) \u279e []\n#     total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n#     total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n#     total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n#     total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\ndef total_match(lst1, lst2):\n    lst1_len = len(lst1)\n    lst2_len = len(lst2)\n    if lst1_len == 0 or lst2_len == 0:\n        return []\n    if lst1_len > lst2_len:\n        lst1, lst2 = lst2, lst1\n    if lst1_len == lst2_len:\n        return lst1\n    return lst2\n\n\n"], ["# <func> # Python \n#     Write a function that returns true if the given number is the multiplication of 3 prime numbers\n#     and false otherwise.\n#     Knowing that (a) is less then 100. \n#     Example:    is_multiply_prime(30) == True\n#     30 = 2 * 3 * 5\ndef is_multiply_prime(a):\n    if a < 100:\n        return True\n    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            return False\n    return True\n\n\n"], ["# <func> # Python \n#     Your task is to write a function that returns true if a number x is a simple\n#     power of n and false in other cases.\n#     x is a simple power of n if n**int=x\n#     For example:    is_simple_power(1, 4) => true\n#     is_simple_power(2, 2) => true\n#     is_simple_power(8, 2) => true\n#     is_simple_power(3, 2) => false\n#     is_simple_power(3, 1) => false\n#     is_simple_power(5, 3) => false\ndef is_simple_power(x, n):\n    return n**int(x) == x\n\n"], ["# <func> # Python \n#     Write a function that takes an integer a and returns True \n#     if this ingeger is a cube of some integer number.\n#     Note: you may assume the input is always valid.\n#     Examples:    iscube(1) ==> True\n#     iscube(2) ==> False\n#     iscube(-1) ==> True\n#     iscube(64) ==> True\n#     iscube(0) ==> True\n#     iscube(180) ==> False\ndef iscube(a):\n    if a == 1:\n        return True\n    elif a == 2:\n        return False\n    elif a == -1:\n        return True\n    elif a == 0:\n        return False\n    else:\n        return iscube(a**3)\n\n"], ["# <func> # Python \n#     You have been tasked to write a function that receives \n#     a hexadecimal number as a string and counts the number of hexadecimal \n#     digits that are primes (prime number, or a prime, is a natural number \n#     greater than 1 that is not a product of two smaller natural numbers).\n#     Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n#     Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n#     So you have to determine a number of the following digits: 2, 3, 5, 7, \n#     B (=decimal 11), D (=decimal 13).\n#     Note: you may assume the input is always correct or empty string, \n#     and symbols A,B,C,D,E,F are always uppercase.\n#     Examples:    For num = \"AB\" the output should be 1.\n#     For num = \"1077E\" the output should be 2.\n#     For num = \"ABED1A33\" the output should be 4.\n#     For num = \"123456789ABCDEF0\" the output should be 6.\n#     For num = \"2020\" the output should be 2.\ndef hex_key(num):\n    hex_num = num.replace(\" \", \"\").replace(\"-\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"0\", \"0\").replace(\"1\", \"1\").replace(\"2\", \"2\").replace(\"3\", \"3\").replace(\"4\", \"4\").replace(\"5\", \"5\").replace(\"6\", \"6\").replace(\"7\", \"7\").replace(\"8\", \"8\").replace(\"9\", \"9\").replace(\"A\", \"a\").replace(\"B\", \"b\").replace(\"C\", \"c\").replace(\"D\", \"d\").replace(\"E\", \"e\").replace(\"F\", \"f\").replace(\"0"], ["# <func> # Python \n#     You will be given a number in decimal form and your task is to convert it to\n#     binary format. The function should return a string, with each character representing a binary\n#     number. Each character in the string will be '0' or '1'.\n#     There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n#     The extra characters are there to help with the format.\n#     Examples:    decimal_to_binary(15)   # returns \"db1111db\"\n#     decimal_to_binary(32)   # returns \"db100000db\"\ndef decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary\n\n"], ["# <func> # Python \n#     You are given a string s.\n#     Your task is to check if the string is happy or not.\n#     A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n#     For example:    is_happy(a) => False\n#     is_happy(aa) => False\n#     is_happy(abcd) => True\n#     is_happy(aabb) => False\n#     is_happy(adb) => True\n#     is_happy(xyy) => False\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] == s[i + 2]:\n            return True\n    return False\n\n"], ["# <func> # Python \n#     It is the last week of the semester and the teacher has to give the grades\n#     to students. The teacher has been making her own algorithm for grading.\n#     The only problem is, she has lost the code she used for grading.\n#     She has given you a list of GPAs for some students and you have to write \n#     a function that can output a list of letter grades using the following table:             GPA       |    Letter grade\n#               4.0                A+\n#             > 3.7                A \n#             > 3.3                A- \n#             > 3.0                B+\n#             > 2.7                B \n#             > 2.3                B-\n#             > 2.0                C+\n#             > 1.7                C\n#             > 1.3                C-\n#             > 1.0                D+ \n#             > 0.7                D \n#             > 0.0                D-\n#               0.0                E\n#     Example:    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\ndef numerical_letter_grade(grades):\n    if len(grades) == 0:\n        return []\n    elif len(grades) == 1:\n        return [grades[0]]\n    else:\n        return [grade_equation(grades[0:])[0]] + [grade_equation(grades[1:])[1]] + [grade_equation(grades[2:])[2]] + [grade_equation(grades[3:])[3]] + [grade_equation(grades[4:])[4]]\n\n"], ["# <func> # Python \n#     Write a function that takes a string and returns True if the string\n#     length is a prime number or False otherwise\n#     Examples\n#     prime_length('Hello') == True\n#     prime_length('abcdcba') == True\n#     prime_length('kittens') == True\n#     prime_length('orange') == False\ndef prime_length(string):\n    if len(string) == 1:\n        return True\n    for i in range(2, int(len(string)**0.5) + 1):\n        if string.count(str(i)) == len(string):\n            return True\n    return False\n\n\n"], ["# <func> # Python \n#     Given a positive integer n, return the count of the numbers of n-digit\n#     positive integers that start or end with 1.\ndef starts_one_ends(n):\n    count = 0\n    for i in range(10**n, 10**(n+1)):\n        if i % 10 == 1:\n            count += 1\n    return count\n\n"], ["# <func> # Python \n#     Given a positive integer N, return the total sum of its digits in binary.\n#     Example\n#         For N = 1000, the sum of digits will be 1 the output should be \"1\".\n#         For N = 150, the sum of digits will be 6 the output should be \"110\".\n#         For N = 147, the sum of digits will be 12 the output should be \"1100\".\n#     Variables:        @N integer\n#              Constraints: 0 \u2264 N \u2264 10000.\n#     Output:         a string of binary number\ndef solve(N):\n    # Your code here\n    return \"1\"\n"], ["# <func> # Python \n#     Given a non-empty list of integers lst. add the even elements that are at odd indices..\n#     Examples:        add([4, 2, 6, 7]) ==> 2 \ndef add(lst):\n    for i in range(0, len(lst), 2):\n        lst[i] += lst[i+1]\n    return lst\n"], ["# <func> # Python \n#     Write a function that takes a string and returns an ordered version of it.\n#     Ordered version of string, is a string where all words (separated by space)\n#     are replaced by a new word where all the characters arranged in\n#     ascending order based on ascii value.\n#     Note: You should keep the order of words and blank spaces in the sentence.\n#     For example:    anti_shuffle('Hi') returns 'Hi'\n#     anti_shuffle('hello') returns 'ehllo'\n#     anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\ndef anti_shuffle(s):\n    # Your code here\n    words = s.split(' ')\n    new_words = []\n    for word in words:\n        new_word = ''\n        for letter in word:\n            new_word += letter\n        new_words.append(new_word)\n    return ' '.join(new_words)\n\n"], ["# <func> # Python \n#     You are given a 2 dimensional data, as a nested lists,\n#     which is similar to matrix, however, unlike matrices,\n#     each row may contain a different number of columns.\n#     Given lst, and integer x, find integers x in the list,\n#     and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n#     each tuple is a coordinate - (row, columns), starting with 0.\n#     Sort coordinates initially by rows in ascending order.\n#     Also, sort coordinates of the row by columns in descending order.\n#     Examples:    get_row([\n#       [1,2,3,4,5,6],\n#       [1,2,3,4,1,6],\n#       [1,2,3,4,5,1]\n#     ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n#     get_row([], 1) == []\n#     get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\ndef get_row(lst, x):\n    row = []\n    for i in range(len(lst)):\n        row.append((i, lst[i][x]))\n    return sorted(row, key=lambda x: x[1], reverse=True)\n"], ["# <func> # Python \n#     Given an array of non-negative integers, return a copy of the given array after sorting,\n#     you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n#     or sort it in descending order if the sum( first index value, last index value) is even.\n#     Note:    * don't change the given array.\n#     Examples:    * sort_array([]) => []\n#     * sort_array([5]) => [5]\n#     * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n#     * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\ndef sort_array(array):\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if array[i] > array[j]:\n                array[i], array[j] = array[j], array[i]\n    return array\n\n"], ["# <func> # Python \n#     Create a function encrypt that takes a string as an argument and\n#     returns a string encrypted with the alphabet being rotated. \n#     The alphabet should be rotated in a manner such that the letters \n#     shift down by two multiplied to two places.\n#     For example:    encrypt('hi') returns 'lm'\n#     encrypt('asdfghjkl') returns 'ewhjklnop'\n#     encrypt('gf') returns 'kj'\n#     encrypt('et') returns 'ix'\ndef encrypt(s):\n    # Your code here\n    return ''.join(chr(ord(c) + 2) for c in s)\n\n"], ["# <func> # Python \n#     You are given a list of integers.\n#     Write a function next_smallest() that returns the 2nd smallest element of the list.\n#     Return None if there is no such element.\n#     next_smallest([1, 2, 3, 4, 5]) == 2\n#     next_smallest([5, 1, 4, 3, 2]) == 2\n#     next_smallest([]) == None\n#     next_smallest([1, 1]) == None\ndef next_smallest(lst):\n    if len(lst) == 0:\n        return None\n    return lst[1]\n"], ["# <func> # Python \n#     You'll be given a string of words, and your task is to count the number\n#     of boredoms. A boredom is a sentence that starts with the word \"I\".\n#     Sentences are delimited by '.', '?' or '!'.\n#     For example:    >>> is_bored(\"Hello world\")\n#     0\n#     >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n#     1\ndef is_bored(S):\n    if S.startswith(\"I\"):\n        return 0\n    else:\n        return 1\n\n\n"], ["# <func> # Python \n#     Create a function that takes 3 numbers.\n#     Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n#     Returns false in any other cases.\n#     Examples\n#     any_int(5, 2, 7) \u279e True\n#     any_int(3, 2, 2) \u279e False\n#     any_int(3, -2, 1) \u279e True\n#     any_int(3.6, -2.2, 2) \u279e False\ndef any_int(x, y, z):\n    if x == y or x == z or y == z:\n        return True\n    else:\n        return False\n\n"], ["# <func> # Python \n#     Write a function that takes a message, and encodes in such a \n#     way that it swaps case of all letters, replaces all vowels in \n#     the message with the letter that appears 2 places ahead of that \n#     vowel in the english alphabet. \n#     Assume only letters. \n#     Examples:    >>> encode('test')\n#     'TGST'\n#     >>> encode('This is a message')\n#     'tHKS KS C MGSSCGG'\ndef encode(message):\n    # Write your code here\n    return ''.join(c if c.isupper() else c.lower() for c in message)\n\n"], ["# <func> # Python \n#     You are given a list of integers.\n#     You need to find the largest prime value and return the sum of its digits.\n#     Examples:    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n#     For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n#     For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n#     For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n#     For lst = [0,81,12,3,1,21] the output should be 3\n#     For lst = [0,8,1,2,1,7] the output should be 7\ndef skjkasdkd(lst):\n    # Your code here\n    # return the sum of its digits\n    return sum(int(x) for x in str(lst))\n\n"], ["# <func> # Python \n#     Given a dictionary, return True if all keys are strings in lower \n#     case or all keys are strings in upper case, else return False.\n#     The function should return False is the given dictionary is empty.\n#     Examples:    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n#     check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n#     check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n#     check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n#     check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\ndef check_dict_case(dict):\n    if not dict:\n        return False\n    for key in dict:\n        if not isinstance(key, str):\n            return False\n        if not isinstance(dict[key], str):\n            return False\n    return True\n\n"], ["# <func> # Python \n#     Implement a function that takes an non-negative integer and returns an array of the first n\n#     integers that are prime numbers and less than n.\n#     for example:    count_up_to(5) => [2,3]\n#     count_up_to(11) => [2,3,5,7]\n#     count_up_to(0) => []\n#     count_up_to(20) => [2,3,5,7,11,13,17,19]\n#     count_up_to(1) => []\n#     count_up_to(18) => [2,3,5,7,11,13,17]\ndef count_up_to(n):\n    count = [0] * (n + 1)\n    count[0] = 1\n    for i in range(1, n + 1):\n        if count[i] == 0:\n            count[i] = 1\n        else:\n            count[i] = count[i - 1] + 1\n    return count\n\n"], ["# <func> # Python \n#     Complete the function that takes two integers and returns \n#     the product of their unit digits.\n#     Assume the input is always valid.\n#     Examples:    multiply(148, 412) should return 16.\n#     multiply(19, 28) should return 72.\n#     multiply(2020, 1851) should return 0.\n#     multiply(14,-15) should return 20.\ndef multiply(a, b):\n    product = 0\n    while b > 0:\n        product += a\n        b -= 1\n    return product\n"], ["# <func> # Python \n#     Given a string s, count the number of uppercase vowels in even indices.\n#     For example:    count_upper('aBCdEf') returns 1\n#     count_upper('abc\ndef count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] == s[i+1]:\n            count += 1\n    return count\n\n"], ["# <func> # Python \n#     Create a function that takes a value (string) representing a number\n#     and returns the closest integer to it. If the number is equidistant\n#     from two integers, round it away from zero.\n#     Examples\n#     >>> closest_integer(\"10\")\n#     10\n#     >>> closest_integer(\"15.3\")\n#     15\n#     Note:    Rounding away from zero means that if the given number is equidistant\n#     from two integers, the one you should return is the one that is the\n#     farthest from zero. For example closest_integer(\"14.5\") should\n#     return 15 and closest_integer(\"-14.5\") should return -15.\ndef closest_integer(value):\n    return int(value)\n"], ["# <func> # Python \n#     Given a positive integer n, you have to make a pile of n levels of stones.\n#     The first level has n stones.\n#     The number of stones in the next level is:        - the next odd number if n is odd.\n#         - the next even number if n is even.\n#     Return the number of stones in each level in a list, where element at index\n#     i represents the number of stones in the level (i+1).\n#     Examples:    >>> make_a_pile(3)\n#     [3, 5, 7]\ndef make_a_pile(n):\n    if n % 2 == 0:\n        return [n] + [n + 1]\n    else:\n        return [n + 1]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["# <func> # Python \n#     You will be given a string of words separated by commas or spaces. Your task is\n#     to split the string into words and return an array of the words.\n#     For example:    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n#     words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\ndef words_string(s):\n    words = s.split(',')\n    return [word.strip() for word in words]\n\n"], ["# <func> # Python \n#     This function takes two positive numbers x and y and returns the\n#     biggest even integer number that is in the range [x, y] inclusive. If \n#     there's no such number, then the function should return -1.\n#     For example:    choose_num(12, 15) = 14\n#     choose_num(13, 12) = -1\ndef choose_num(x, y):\n    if x < y:\n        return -1\n    else:\n        return x\n\n\n"], ["# <func> # Python \n#     You are given two positive integers n and m, and your task is to compute the\n#     average of the integers from n through m (including n and m). \n#     Round the answer to the nearest integer and convert that to binary.\n#     If n is greater than m, return -1.\n#     Example:    rounded_avg(1, 5) => \"0b11\"\n#     rounded_avg(7, 5) => -1\n#     rounded_avg(10, 20) => \"0b1111\"\n#     rounded_avg(20, 33) => \"0b11010\"\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg).replace(\"0b\", \"\")\n\n\n"], ["# <func> # Python \n#     Given a list of positive integers x. return a sorted list of all \n#     elements that hasn't any even digit.\n#     Note: Returned list should be sorted in increasing order.\n#     For example:    >>> unique_digits([15, 33, 1422, 1])\n#     [1, 15, 33]\n#     >>> unique_digits([152, 323, 1422, 10])\n#     []\ndef unique_digits(x):\n    return sorted(set(x))\n"], ["# <func> # Python \n#     Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n#     reverse the resulting array, and then replace each digit by its corresponding name from\n#     \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n#     For example:      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n#             -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n#             -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n#       return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n#       If the array is empty, return an empty array:      arr = []\n#       return []\n#       If the array has any strange number ignore it:      arr = [1, -1 , 55] \n#             -> sort arr -> [-1, 1, 55]\n#             -> reverse arr -> [55, 1, -1]\n#       return = ['One']\ndef by_length(arr):\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return arr\n    else:\n        return arr[::-1]\n\n"], ["# <func> # Python \n#      Implement the function f that takes n as a parameter,\n#     and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n#     or the sum of numbers from 1 to i otherwise.\n#     i starts from 1.\n#     the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n#     Example:    f(5) == [1, 2, 6, 24, 15]\ndef f(n):\n    result = [1]\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\n"], ["# <func> # Python \n#     Given a positive integer n, return a tuple that has the number of even and odd\n#     integer palindromes that fall within the range(1, n), inclusive.\n#     Example 1:\n#         Input: 3\n#         Output: (1, 2)\n#         Explanation:        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n#     Example 2:\n#         Input: 12\n#         Output: (4, 6)\n#         Explanation:        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n#     Note:        1. 1 <= n <= 10^3\n#         2. returned tuple has the number of even and odd integer palindromes respectively.\ndef even_odd_palindrome(n):\n    # Your code here\n    even_odd_palindrome = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_odd_palindrome.append(i)\n        else:\n            odd_palindrome = i*2\n            even_odd_palindrome.append(odd_palindrome)\n    return even_odd_palindrome\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["# <func> # Python \n#     Write a function count_nums which takes an array of integers and returns\n#     the number of elements which has a sum of digits > 0.\n#     If a number is negative, then its first signed digit will be negative:    e.g. -123 has signed digits -1, 2, and 3.\n#     >>> count_nums([]) == 0\n#     >>> count_nums([-1, 11, -11]) == 1\n#     >>> count_nums([1, 1, 2]) == 3\ndef count_nums(arr):\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["# <func> # Python \n#     We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n#     numbers in the array will be randomly ordered. Your task is to determine if\n#     it is possible to get an array sorted in non-decreasing order by performing \n#     the following operation on the given array:        You are allowed to perform right shift operation any number of times.\n#     One right shift operation means shifting all elements of the array by one\n#     position in the right direction. The last element of the array will be moved to\n#     the starting position in the array i.e. 0th index. \n#     If it is possible to obtain the sorted array by performing the above operation\n#     then return True else return False.\n#     If the given array is empty then return True.\n#     Note: The given list is guaranteed to have unique elements.\n#     For Example:    \n#     move_one_ball([3, 4, 5, 1, 2])==>True\n#     Explanation: By performin 2 right shift operations, non-decreasing order can\n#                  be achieved for the given array.\n#     move_one_ball([3, 5, 4, 1, 2])==>False\n#     Explanation:It is not possible to get non-decreasing order for the given\n#                 array by performing any number of right shift operations.\ndef move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    if arr[0] == arr[1]:\n        return True\n    if arr[0] > arr[1]:\n        return False\n    if arr[0] < arr[1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n    return True\n"], ["# <func> # Python \n#     In this problem, you will implement a function that takes two lists of numbers,\n#     and determines whether it is possible to perform an exchange of elements\n#     between them to make lst1 a list of only even numbers.\n#     There is no limit on the number of exchanged elements between lst1 and lst2.\n#     If it is possible to exchange elements between the lst1 and lst2 to make\n#     all the elements of lst1 to be even, return \"YES\".\n#     Otherwise, return \"NO\".\n#     For example:    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n#     exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n#     It is assumed that the input lists will be non-empty.\ndef exchange(lst1, lst2):\n    # Write your code here\n    if len(lst1) == len(lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n"], ["# <func> # Python \n#     Given a string representing a space separated lowercase letters, return a dictionary\n#     of the letter with the most repetition and containing the corresponding count.\n#     If several letters have the same occurrence, return all of them.\n#     Example:    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n#     histogram('a b b a') == {'a': 2, 'b': 2}\n#     histogram('a b c a b') == {'a': 2, 'b': 2}\n#     histogram('b b b b a') == {'b': 4}\n#     histogram('') == {}\ndef histogram(test):\n    histogram = {}\n    for letter in test:\n        if letter in histogram:\n            histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n\n"], ["# <func> # Python \n#     Task\n#     We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n#     then check if the result string is palindrome.\n#     A string is called palindrome if it reads the same backward as forward.\n#     You should return a tuple containing the result string and True/False for the check.\n#     Example\n#     For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n#     For s = \"abc\ndef reverse_delete(s,c):\n    result = ''\n    for i in range(len(s)):\n        if s[i] == c[i]:\n            result += s[i]\n    return result,True\n"], ["# <func> # Python \n#     Given a list of strings, where each string consists of only digits, return a list.\n#     Each element i of the output should be \"the number of odd elements in the\n#     string i of the input.\" where all the i's should be replaced by the number\n#     of odd digits in the i'th string of the input.\n#     >>> odd_count(['1234567'])\n#     [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n#     >>> odd_count(['3',\"11111111\"])\n#     [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n#      \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\ndef odd_count(lst):\n    odd_count = []\n    for i in lst:\n        odd_count.append(len(i) % 2)\n    return odd_count\n\n\n"], ["# <func> # Python \n#     Given an array of integers nums, find the minimum sum of any non-empty sub-array\n#     of nums.\n#     Example\n#     minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n#     minSubArraySum([-1, -2, -3]) == -6\ndef minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        min_sum = min(min_sum, nums[i] + min_sum)\n    return min_sum\n"], ["# <func> # Python \n#     import math\n#     You are given a rectangular grid of wells. Each row represents a single well,\n#     and each 1 in a row represents a single unit of water.\n#     Each well has a corresponding bucket that can be used to extract water from it, \n#     and all buckets have the same capacity.\n#     Your task is to use the buckets to empty the wells.\n#     Output the number of times you need to lower the buckets.\n#     Example 1:        Input: \n#             grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n#             bucket_capacity : 1\n#         Output: 6\n#     Example 2:        Input: \n#             grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n#             bucket_capacity : 2\n#         Output: 5\n#     Example 3:        Input: \n#             grid : [[0,0,0], [0,0,0]]\n#             bucket_capacity : 5\n#         Output: 0\n#     Constraints:        * all wells have the same length\n#         * 1 <= grid.length <= 10^2\n#         * 1 <= grid[:,1].length <= 10^2\n#         * grid[i][j] -> 0 | 1\n#         * 1 <= capacity <= 10\ndef max_fill(grid, capacity):\n    if not grid:\n        return 0\n    if not capacity:\n        return 0\n    if grid[0][0] == 0:\n        return 0\n    if grid[0][0] == 1:\n        return 1\n    if grid[0][0] == 2:\n        return 2\n    if grid[0][0] == 3:\n        return 3\n    if grid[0][0] == 4:\n        return 4\n    if grid[0][0] == 5:\n        return 5\n"], ["# <func> # Python \n#     In this Kata, you have to sort an array of non-negative integers according to\n#     number of ones in their binary representation in ascending order.\n#     For similar number of ones, sort based on decimal value.\n#     It must be implemented like this:    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n#     >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n#     >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\ndef sort_array(arr):\n    # Your code here\n    pass\n"], ["# <func> # Python \n#     Given a string s and a natural number n, you have been tasked to implement \n#     a function that returns a list of all words from string s that contain exactly \n#     n consonants, in order these words appear in the string s.\n#     If the string s is empty then the function should return an empty list.\n#     Note: you may assume the input string contains only letters and spaces.\n#     Examples:    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n#     select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n#     select_words(\"simple white space\", 2) ==> []\n#     select_words(\"Hello world\", 4) ==> [\"world\"]\n#     select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\ndef select_words(s, n):\n    words = []\n    for word in s.split():\n        if len(word) == n:\n            words.append(word)\n    return words\n"], ["# <func> # Python \n#     You are given a word. Your task is to find the closest vowel that stands between \n#     two consonants from the right side of the word (case sensitive).\n#     Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n#     find any vowel met the above condition. \n#     You may assume that the given string contains English letter only.\n#     Example:    get_closest_vowel(\"yogurt\") ==> \"u\"\n#     get_closest_vowel(\"FULL\") ==> \"U\"\n#     get_closest_vowel(\"quick\") ==> \"\"\n#     get_closest_vowel(\"ab\") ==> \"\"\ndef get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)):\n        if word[i] in vowels:\n            if i > 0 and word[i-1] not in vowels:\n                continue\n            if i < len(word)-1 and word[i+1] not in vowels:\n                continue\n            return word[i]\n    return \"\"\n"], ["# <func> # Python \n#     You are given a list of two strings, both strings consist of open\n#     parentheses '(' or close parentheses ')' only.\n#     Your job is to check if it is possible to concatenate the two strings in\n#     some order, that the resulting string will be good.\n#     A string S is considered to be good if and only if all parentheses in S\n#     are balanced. For example: the string '(())()' is good, while the string\n#     '())' is not.\n#     Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n#     Examples:    match_parens(['()(', ')']) == 'Yes'\n#     match_parens([')', ')']) == 'No'\ndef match_parens(lst):\n    if len(lst) == 0:\n        return 'Yes'\n    elif len(lst) == 1:\n        return 'Yes'\n    elif len(lst) == 2:\n        return 'No'\n    else:\n        return 'No'\n"], ["# <func> # Python \n#     Given an array arr of integers and a positive integer k, return a sorted list \n#     of length k with the maximum k numbers in arr.\n#     Example 1:\n#         Input: arr = [-3, -4, 5], k = 3\n#         Output: [-4, -3, 5]\n#     Example 2:\n#         Input: arr = [4, -4, 4], k = 2\n#         Output: [4, 4]\n#     Example 3:\n#         Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n#         Output: [2]\n#     Note:        1. The length of the array will be in the range of [1, 1000].\n#         2. The elements in the array will be in the range of [-1000, 1000].\n#         3. 0 <= k <= len(arr)\ndef maximum(arr, k):\n    if len(arr) < k:\n        return arr\n    else:\n        return sorted(arr[:k])\n\n\n"], ["# <func> # Python \n#     Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n#     Examples\n#     solution([5, 8, 7, 1]) ==> 12\n#     solution([3, 3, 3, 3, 3]) ==> 9\n#     solution([30, 13, 24, 321]) ==>0\ndef solution(lst):\n    sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            sum += lst[i]\n    return sum\n"], ["# <func> # Python \n#     Given a non-empty array of integers arr and an integer k, return\n#     the sum of the elements with at most two digits from the first k elements of arr.\n#     Example:\n#         Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n#         Output: 24 # sum of 21 + 3\n#     Constraints:        1. 1 <= len(arr) <= 100\n#         2. 1 <= k <= len(arr)\ndef add_elements(arr, k):\n    # Write your code here\n    sum = 0\n    for i in range(k):\n        sum += arr[i]\n    return sum\n"], ["# <func> # Python \n#     Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n#     The Collatz conjecture is a conjecture in mathematics that concerns a sequence \ndef get_odd_collatz(n):\n    collatz_list = []\n    while n > 0:\n        if n % 2 == 0:\n            collatz_list.append(n)\n            n = n // 2\n        else:\n            n = n * 3 + 1\n    return collatz_list\n\n"], ["# <func> # Python \n#     You have to write a function which validates a given date string and\n#     returns True if the date is valid otherwise False.\n#     The date is valid if all of the following rules are satisfied:    1. The date string is not empty.\n#     2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n#     3. The months should not be less than 1 or higher than 12.\n#     4. The date should be in the format: mm-dd-yyyy\n#     for example: \n#     valid_date('03-11-2000') => True\n#     valid_date('15-01-2012') => False\n#     valid_date('04-0-2040') => False\n#     valid_date('06-04-2020') => True\n#     valid_date('06/04/2020') => False\ndef valid_date(date):\n    if len(date) != 10:\n        return False\n    if date[0] != '0':\n        return False\n    if date[1] != '-':\n        return False\n    if date[2] != '-':\n        return False\n    if date[3] != '-':\n        return False\n    if date[4] != '-':\n        return False\n    if date[5] != '-':\n        return False\n    if date[6] != '-':\n        return False\n    if date[7] != '-':\n        return False\n    if date[8] != '-':\n        return False\n    if date[9] != '-':\n        return False\n    if date[0] != '0':\n        return False\n    if date[1] != '-':\n        return False\n    if date[2"], ["# <func> # Python \n#     Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n#     should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n#     alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n#     Examples\n#     split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n#     split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n#     split_words(\"abc\ndef split_words(txt):\n    words = txt.split()\n    return words\n"], ["# <func> # Python \n#     Given a list of numbers, return whether or not they are sorted\n#     in ascending order. If list has more than 1 duplicate of the same\n#     number, return False. Assume no negative numbers and only integers.\n#     Examples\n#     is_sorted([5]) \u279e True\n#     is_sorted([1, 2, 3, 4, 5]) \u279e True\n#     is_sorted([1, 3, 2, 4, 5]) \u279e False\n#     is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n#     is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n#     is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n#     is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n#     is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\ndef is_sorted(lst):\n    if len(lst) == 0:\n        return True\n    if len(lst) == 1:\n        return lst[0] == lst[1]\n    if lst[0] > lst[1]:\n        return False\n    return is_sorted(lst[1:])\n\n"], ["# <func> # Python \n#     You are given two intervals,\n#     where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n#     The given intervals are closed which means that the interval (start, end)\n#     includes both start and end.\n#     For each given interval, it is assumed that its start is less or equal its end.\n#     Your task is to determine whether the length of intersection of these two \n#     intervals is a prime number.\n#     Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n#     which its length is 1, which not a prime number.\n#     If the length of the intersection is a prime number, return \"YES\",\n#     otherwise, return \"NO\".\n#     If the two intervals don't intersect, return \"NO\".\n#     [input/output] samples:    intersection((1, 2), (2, 3)) ==> \"NO\"\n#     intersection((-1, 1), (0, 4)) ==> \"NO\"\n#     intersection((-3, -1), (-5, 5)) ==> \"YES\"\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 == end1 and start2 == end2:\n        return \"YES\"\n    elif start1 == end1 or start2 == end2:\n        return \"NO\"\n    elif start1 < start2 and end1 < end2:\n        return \"NO\"\n    elif start1 < start2 and end1 > end2:\n        return \"NO\"\n    elif start1 > start2 and end1 < end2:\n        return \"NO\"\n    elif start1 > start2 and end1 > end2:\n        return \"NO\"\n    else:\n        return \"NO\"\n\n"], ["# <func> # Python \n#     You are given an array arr of integers and you need to return\n#     sum of magnitudes of integers multiplied by product of all signs\n#     of each number in the array, represented by 1, -1 or 0.\n#     Note: return None for empty arr.\n#     Example:    >>> prod_signs([1, 2, 2, -4]) == -9\n#     >>> prod_signs([0, 1]) == 0\n#     >>> prod_signs([]) == None\ndef prod_signs(arr):\n    if len(arr) == 0:\n        return None\n    sign = 1\n    for i in arr:\n        sign *= i\n    return sign\n"], ["# <func> # Python \n#     Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n#     each cell of the grid contains a value. Every integer in the range [1, N * N]\n#     inclusive appears exactly once on the cells of the grid.\n#     You have to find the minimum path of length k in the grid. You can start\n#     from any cell, and in each step you can move to any of the neighbor cells,\n#     in other words, you can go to cells which share an edge with you current\n#     cell.\n#     Please note that a path of length k means visiting exactly k cells (not\n#     necessarily distinct).\n#     You CANNOT go off the grid.\n#     A path A (of length k) is considered less than a path B (of length k) if\n#     after making the ordered lists of the values on the cells that A and B go\n#     through (let's call them lst_A and lst_B), lst_A is lexicographically less\n#     than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n#     such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n#     lst_A[j] = lst_B[j].\n#     It is guaranteed that the answer is unique.\n#     Return an ordered list of the values on the cells that the minimum path go through.\n#     Examples:\n#         Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n#         Output: [1, 2, 1]\n#         Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n#         Output: [1]\ndef minPath(grid, k):\n    m = len(grid)\n    n = len(grid[0])\n    if m == 0 or n == 0:\n        return []\n    if m == 1 or n == 1:\n        return [grid[0][0]]\n    if"], ["# <func> # Python \n#     Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n#     the last couple centuries. However, what people don't know is Tribonacci sequence.\n#     Tribonacci sequence is \ndef tri(n):\n    return (1 + n) * (1 + n + n) / 2\n\n"], ["# <func> # Python \n#     Given a positive integer n, return the product of the odd digits.\n#     Return 0 if all digits are even.\n#     For example:    digits(1)  == 1\n#     digits(4)  == 0\n#     digits(235) == 15\ndef digits(n):\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 0\n    return 1\n"], ["# <func> # Python \n#     Create a function that takes a string as input which contains only square brackets.\n#     The function should return True if and only if there is a valid subsequence of brackets \n#     where at least one bracket in the subsequence is nested.\n#     is_nested('[[]]') \u279e True\n#     is_nested('[]]]]]]][[[[[]') \u279e False\n#     is_nested('[][]') \u279e False\n#     is_nested('[]') \u279e False\n#     is_nested('[[][]]') \u279e True\n#     is_nested('[[]][[') \u279e True\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"], ["# <func> # Python \n#     You are given a list of numbers.\n#     You need to return the sum of squared numbers in the given list,\n#     round each element in the list to the upper int(Ceiling) first.\n#     Examples:    For lst = [1,2,3] the output should be 14\n#     For lst = [1,4,9] the output should be 98\n#     For lst = [1,3,5,7] the output should be 84\n#     For lst = [1.4,4.2,0] the output should be 29\n#     For lst = [-2.4,1,1] the output should be 6\ndef sum_squares(lst):\n    return sum(map(lambda x: x**2, lst))\n"], ["# <func> # Python \n#     Create a function that returns True if the last character\n#     of a given string is an alphabetical character and is not\n#     a part of a word, and False otherwise.\n#     Note: \"word\" is a group of characters separated by space.\n#     Examples:    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n#     check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n#     check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n#     check_if_last_char_is_a_letter(\"\") \u279e False \ndef check_if_last_char_is_a_letter(txt):\n    if txt[-1] in \"aeiou\":\n        return False\n    else:\n        return True\n\n\n"], ["# <func> # Python \n#     Create a function which returns the largest index of an element which\n#     is not greater than or equal to the element immediately preceding it. If\n#     no such element exists then return -1. The given array will not contain\n#     duplicate values.\n#     Examples:    can_arrange([1,2,4,3,5]) = 3\n#     can_arrange([1,2,3]) = -1\ndef can_arrange(arr):\n    # Write your code here.\n    for i in range(len(arr)-1):\n        if arr[i] >= arr[i+1]:\n            return i\n    return -1\n"], ["# <func> # Python \n#     Create a function that returns a tuple (a, b), where 'a' is\n#     the largest of negative integers, and 'b' is the smallest\n#     of positive integers in a list.\n#     If there is no negative or positive integers, return them as None.\n#     Examples:    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n#     largest_smallest_integers([]) == (None, None)\n#     largest_smallest_integers([0]) == (None, None)\ndef largest_smallest_integers(lst):\n    if lst == []:\n        return None, None\n    else:\n        largest = max(lst)\n        smallest = min(lst)\n        return (largest, smallest)\n\n\n"], ["# <func> # Python \n#     Create a function that takes integers, floats, or strings representing\n#     real numbers, and returns the larger variable in its given variable type.\n#     Return None if the values are equal.\n#     Note: If a real number is represented as a string, the floating point might be . or ,\n#     compare_one(1, 2.5) \u279e 2.5\n#     compare_one(1, \"2,3\") \u279e \"2,3\"\n#     compare_one(\"5,1\", \"6\") \u279e \"6\"\n#     compare_one(\"1\", 1) \u279e None\ndef compare_one(a, b):\n    if a == b:\n        return \"equal\"\n    elif a > b:\n        return \"greater\"\n    elif a < b:\n        return \"less\"\n    else:\n        return \"equal\"\n\n"], ["# <func> # Python \n#     Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n#     Example\n#     is_equal_to_sum_even(4) == False\n#     is_equal_to_sum_even(6) == False\n#     is_equal_to_sum_even(8) == True\ndef is_equal_to_sum_even(n):\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n\n"], ["# <func> # Python \n#     The Brazilian factorial is \ndef special_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n-1)\n"], ["# <func> # Python \n#     Given a string text, replace all spaces in it with underscores, \n#     and if a string has more than 2 consecutive spaces, \n#     then replace all consecutive spaces with - \n#     fix_spaces(\"Example\") == \"Example\"\n#     fix_spaces(\"Example 1\") == \"Example_1\"\n#     fix_spaces(\" Example 2\") == \"_Example_2\"\n#     fix_spaces(\" Example   3\") == \"_Example-3\"\ndef fix_spaces(text):\n    text = text.replace(\" \", \"-\")\n    return text\n\n"], ["# <func> # Python \n#     Create a function which takes a string representing a file's name, and returns\n#     'Yes' if the the file's name is valid, and returns 'No' otherwise.\n#     A file's name is considered to be valid if and only if all the following conditions \n#     are met:    - There should not be more than three digits ('0'-'9') in the file's name.\n#     - The file's name contains exactly one dot '.'\n#     - The substring before the dot should not be empty, and it starts with a letter from \n#     the latin alphapet ('a'-'z' and 'A'-'Z').\n#     - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n#     Examples:    file_name_check(\"example.txt\") # => 'Yes'\n#     file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\ndef file_name_check(file_name):\n    # Write your code here\n    if len(file_name) > 3:\n        return 'No'\n    elif len(file_name) < 3:\n        return 'No'\n    elif file_name[0] != '.' and file_name[0] != ' ':\n        return 'No'\n    elif file_name[0] == '.' and file_name[1] != ' ':\n        return 'No'\n    elif file_name[0] == '.' and file_name[1] == ' ':\n        return 'No'\n    elif file_name[1] == '.' and file_name[2] != ' ':\n        return 'No'\n    elif file_name[1] == '.' and file_name[2] == ' ':\n        return 'No'\n    elif file_name[2] == '.' and file_name[3] != ' ':\n        return 'No'\n    elif file_name[2] == '.' and file_name[3] == ' ':\n        return 'No'\n    elif file_name[3] == '.' and"], ["# <func> # Python \n#     \"\n#     This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n#     multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n#     change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n#     Examples:    For lst = [1,2,3] the output should be 6\n#     For lst = []  the output should be 0\n#     For lst = [-1,-5,2,-1,-5]  the output should be -126\ndef sum_squares(lst):\n    sum = 0\n    for i in lst:\n        if i % 3 == 0 and i % 4 != 0:\n            sum += i * i\n        elif i % 3 == 0 and i % 4 == 0:\n            sum += i * i * i\n        elif i % 4 == 0:\n            sum += i * i * i * i\n    return sum\n"], ["# <func> # Python \n#     You are given a string representing a sentence,\n#     the sentence contains some words separated by a space,\n#     and you have to return a string that contains the words from the original sentence,\n#     whose lengths are prime numbers,\n#     the order of the words in the new string should be the same as the original one.\n#     Example 1:        Input: sentence = \"This is a test\"\n#         Output: \"is\"\n#     Example 2:        Input: sentence = \"lets go for swimming\"\n#         Output: \"go for\"\n#     Constraints:        * 1 <= len(sentence) <= 100\n#         * sentence contains only letters\ndef words_in_sentence(sentence):\n    words = sentence.split(' ')\n    for i in range(len(words)):\n        for j in range(i+1, len(words)):\n            if len(words[i]) == len(words[j]) and all(i == j for j in range(len(words))):\n                return words[i]\n\n"], ["# <func> # Python \n#     Your task is to implement a function that will simplify the expression\n#     x * n. The function returns True if x * n evaluates to a whole number and False\n#     otherwise. Both x and n, are string representation of a fraction, and have the following format,\n#     <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n#     You can assume that x, and n are valid fractions, and do not have zero as denominator.\n#     simplify(\"1/5\", \"5/1\") = True\n#     simplify(\"1/6\", \"2/1\") = False\n#     simplify(\"7/10\", \"10/2\") = False\ndef simplify(x, n):\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    if x == 2:\n        return True\n    if x == 3:\n        return True\n    if x == 4:\n        return True\n    if x == 5:\n        return True\n    if x == 6:\n        return True\n    if x == 7:\n        return True\n    if x == 8:\n        return True\n    if x == 9:\n        return True\n    if x == 10:\n        return True\n    if x == 11:\n        return True\n    if x == 12:\n        return True\n    if x == 13:\n        return True\n    if x == 14:\n        return True\n    if x == 15:\n        return True\n    if x == 16:\n        return True\n    if x == 17:\n        return True\n    if x == 18:\n        return True\n    if x == 19:\n        return True\n    if x == 20:\n        return True\n    if x == 21:\n        return True\n    if x == 22:\n        return True\n    if x == 23:\n        return True\n    if x == 24:\n        return True\n    if x == 25:\n        return True\n    if x == 26"], ["# <func> # Python \n#     Write a function which sorts the given list of integers\n#     in ascending order according to the sum of their digits.\n#     Note: if there are several items with similar sum of their digits,\n#     order them based on their index in original list.\n#     For example:    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n#     >>> order_by_points([]) == []\ndef order_by_points(nums):\n    # Write your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n"], ["# <func> # Python \n#     Write a function that takes an array of numbers as input and returns \n#     the number of elements in the array that are greater than 10 and both \n#     first and last digits of a number are odd (1, 3, 5, 7, 9).\n#     For example:    specialFilter([15, -73, 14, -15]) => 1 \n#     specialFilter([33, -2, -3, 45, 21, 109]) => 2\ndef specialFilter(nums):\n    odd_nums = []\n    for num in nums:\n        if num > 10 and num % 2 == 1:\n            odd_nums.append(num)\n    return len(odd_nums)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["# <func> # Python \n#     You are given a positive integer n. You have to create an integer array a of length n.\n#         For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n#         Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n#     and a[i] + a[j] + a[k] is a multiple of 3.\n#     Example :        Input: n = 5\n#         Output: 1\n#         Explanation: \n#         a = [1, 3, 7, 13, 21]\n#         The only valid triple is (1, 7, 13).\ndef get_max_triples(n):\n    max_triples = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            for k in range(j, n+1):\n                if i + j + k == n:\n                    max_triples += 1\n    return max_triples\n"], ["# <func> # Python \n#     There are eight planets in our solar system: the closerst to the Sun \n#     is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n#     Uranus, Neptune.\n#     Write a function that takes two planet names as strings planet1 and planet2. \n#     The function should return a tuple containing all planets whose orbits are \n#     located between the orbit of planet1 and the orbit of planet2, sorted by \n#     the proximity to the sun. \n#     The function should return an empty tuple if planet1 or planet2\n#     are not correct planet names. \n#     Examples\n#     bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n#     bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n#     bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\ndef bf(planet1, planet2):\n    # TODO\n    pass\n\n"], ["# <func> # Python \n#     Write a function that accepts a list of strings as a parameter,\n#     deletes the strings that have odd lengths from it,\n#     and returns the resulted list with a sorted order,\n#     The list is always a list of strings and never an array of numbers,\n#     and it may contain duplicates.\n#     The order of the list should be ascending by length of each word, and you\n#     should return the list sorted by that rule.\n#     If two words have the same length, sort the list alphabetically.\n#     The function should return a list of strings in sorted order.\n#     You may assume that all words will have the same length.\n#     For example:    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n#     assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\ndef sorted_list_sum(lst):\n    return sorted(lst, key=lambda x: (len(x), x))\n\n"], ["# <func> # Python \n#     A simple program which should return the value of x if n is \n#     a prime number and should return the value of y otherwise.\n#     Examples:    for x_or_y(7, 34, 12) == 34\n#     for x_or_y(15, 8, 5) == 5\ndef x_or_y(n, x, y):\n    if n == 1:\n        return y\n    if n == 2:\n        return x\n    if n % 2 == 0:\n        return x\n    if n % 3 == 0:\n        return y\n    if n % 4 == 0:\n        return x\n    if n % 5 == 0:\n        return y\n    if n % 6 == 0:\n        return x\n    if n % 7 == 0:\n        return y\n    if n % 8 == 0:\n        return x\n    if n % 9 == 0:\n        return y\n    if n % 10 == 0:\n        return x\n    if n % 11 == 0:\n        return y\n    if n % 12 == 0:\n        return x\n    if n % 13 == 0:\n        return y\n    if n % 14 == 0:\n        return x\n    if n % 15 == 0:\n        return y\n    if n % 16 == 0:\n        return x\n    if n % 17 == 0:\n        return y\n    if n % 18 == 0:\n        return x\n    if n % 19 == 0:\n        return y\n    if n % 20 == 0:\n        return x\n    if n % 21 == 0:\n        return y\n    if n % 22 == 0:\n        return x\n    if n % 23 == 0:\n        return y\n    if n % 24 == 0:\n        return x\n    if n % 25 == 0:\n        return y\n    if n % 26"], ["# <func> # Python \n#     Given a list of numbers, return the sum of squares of the numbers\n#     in the list that are odd. Ignore numbers that are negative or not integers.\n#     double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n#     double_the_difference([-1, -2, 0]) == 0\n#     double_the_difference([9, -2]) == 81\n#     double_the_difference([0]) == 0  \n#     If the input list is empty, return 0.\ndef double_the_difference(lst):\n    if not lst:\n        return 0\n    return sum(i**2 for i in lst if i%2 != 0)\n"], ["# <func> # Python \n#     I think we all remember that feeling when the result of some long-awaited\n#     event is finally known. The feelings and thoughts you have at that moment are\ndef compare(game,guess):\n    if game == 'rock':\n        if guess == 'rock':\n            return 1\n        else:\n            return 0\n    elif game == 'paper':\n        if guess == 'paper':\n            return 1\n        else:\n            return 0\n    elif game == 'scissors':\n        if guess == 'scissors':\n            return 1\n        else:\n            return 0\n    elif game == 'sponge':\n        if guess == 'sponge':\n            return 1\n        else:\n            return 0\n    elif game == 'paper':\n        if guess == 'scissors':\n            return 1\n        else:\n            return 0\n    elif game == 'rock':\n        if guess == 'paper':\n            return 1\n        else:\n            return 0\n    elif game == 'scissors':\n        if guess == 'rock':\n            return 1\n        else:\n            return 0\n    elif game == 'sponge':\n        if guess == 'scissors':\n            return 1\n        else:\n            return 0\n    elif game == 'paper':\n        if guess == 'sponge':\n            return 1\n        else:\n            return 0\n    elif game == 'rock':\n        if guess == 'scissors':\n            return 1\n        else:\n            return 0\n    elif game == 'scissors':\n        if guess == 'rock':\n            return 1\n        else:\n            return 0\n    elif game == 'sponge':\n        if guess == 'scissors':\n            return 1\n        else:\n            return 0\n    elif game == 'paper':\n        if guess == 'sponge':\n            return 1\n        else:\n            return 0\n    elif game == 'rock':\n        if guess == 'paper':\n            return 1\n        else:\n            return 0\n    elif game == 'scissors':"], ["# <func> # Python \n#     You will be given the name of a class (a string) and a list of extensions.\n#     The extensions are to be used to load additional classes to the class. The\n#     strength of the extension is as follows: Let CAP be the number of the uppercase\n#     letters in the extension's name, and let SM be the number of lowercase letters \n#     in the extension's name, the strength is given by the fraction CAP - SM. \n#     You should find the strongest extension and return a string in this \n#     format: ClassName.StrongestExtensionName.\n#     If there are two or more extensions with the same strength, you should\n#     choose the one that comes first in the list.\n#     For example, if you are given \"Slices\" as the class and a list of the\n#     extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n#     return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n#     (its strength is -1).\n#     Example:    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\ndef Strongest_Extension(class_name, extensions):\n    # Your code here\n    extensions = sorted(extensions, key=lambda x: -x[1])\n    return class_name + '.' + extensions[0][0]\n"], ["# <func> # Python \n#     You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n#     cycpattern_check(\"abcd\",\"abd\") => False\n#     cycpattern_check(\"hello\",\"ell\") => True\n#     cycpattern_check(\"whassup\",\"psus\") => False\n#     cycpattern_check(\"abab\",\"baa\") => True\n#     cycpattern_check(\"efef\",\"eeff\") => False\n#     cycpattern_check(\"himenss\",\"simen\") => True\ndef cycpattern_check(a , b):\n    if len(a) == len(b):\n        for i in range(len(b)):\n            if a[i] == b[i]:\n                return True\n    return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["# <func> # Python \n#     Given an integer. return a tuple that has the number of even and odd digits respectively.\n#      Example:        even_odd_count(-12) ==> (1, 1)\n#         even_odd_count(123) ==> (1, 2)\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["# <func> # Python \n#     Given a positive integer, obtain its roman numeral equivalent as a string,\n#     and return it in lowercase.\n#     Restrictions: 1 <= num <= 1000\n#     Examples:    >>> int_to_mini_roman(19) == 'xix'\n#     >>> int_to_mini_roman(152) == 'clii'\n#     >>> int_to_mini_roman(426) == 'cdxxvi'\ndef int_to_mini_roman(number):\n    roman_numerals = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'xii', 'x', 'xiii', 'xii', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x"], ["# <func> # Python \n#     Given the lengths of the three sides of a triangle. Return True if the three\n#     sides form a right-angled triangle, False otherwise.\n#     A right-angled triangle is a triangle in which one angle is right angle or \n#     90 degree.\n#     Example:    right_angle_triangle(3, 4, 5) == True\n#     right_angle_triangle(1, 2, 3) == False\ndef right_angle_triangle(a, b, c):\n    # Check if the triangle is right-angled\n    if a == b == c:\n        return True\n    # If the triangle is not right-angled, return False\n    return False\n\n"], ["# <func> # Python \n#     Write a function that accepts a list of strings.\n#     The list contains different words. Return the word with maximum number\n#     of unique characters. If multiple strings have maximum number of unique\n#     characters, return the one which comes first in lexicographical order.\n#     find_max([\"name\", \"of\", \"string\"]) == \"string\"\n#     find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n#     find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\ndef find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n    return max_word\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["# <func> # Python \n#     You're a hungry rabbit, and you already have eaten a certain number of carrots,\n#     but now you need to eat more carrots to complete the day's meals.\n#     you should return an array of [ total number of eaten carrots after your meals,\n#                                     the number of carrots left after your meals ]\n#     if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n#     Example:    * eat(5, 6, 10) -> [11, 4]\n#     * eat(4, 8, 9) -> [12, 1]\n#     * eat(1, 10, 10) -> [11, 0]\n#     * eat(2, 11, 5) -> [7, 0]\n#     Variables:    @number : integer\n#         the number of carrots that you have eaten.\n#     @need : integer\n#         the number of carrots that you need to eat.\n#     @remaining : integer\n#         the number of remaining carrots thet exist in stock\n#     Constrain:    * 0 <= number <= 1000\n#     * 0 <= need <= 1000\n#     * 0 <= remaining <= 1000\n#     Have fun :)\ndef eat(number, need, remaining):\n    if number == 0:\n        return [0, 0]\n    if number == 1:\n        return [1, 0]\n    if number == 2:\n        return [2, 0]\n    if number == 3:\n        return [3, 0]\n    if number == 4:\n        return [4, 0]\n    if number == 5:\n        return [5, 0]\n    if number == 6:\n        return [6, 0]\n    if number == 7:\n        return [7, 0]\n    if number == 8:\n        return [8, 0]\n    if number == "], ["# <func> # Python \n#     Given two lists operator, and operand. The first list has basic algebra operations, and \n#     the second list is a list of integers. Use the two given lists to build the algebric \n#     expression and return the evaluation of this expression.\n#     The basic algebra operations:    Addition ( + ) \n#     Subtraction ( - ) \n#     Multiplication ( * ) \n#     Floor division ( // ) \n#     Exponentiation ( ** ) \n#     Example:    operator['+', '*', '-']\n#     array = [2, 3, 4, 5]\n#     result = 2 + 3 * 4 - 5\n#     => result = 9\n#     Note:        The length of operator list is equal to the length of operand list minus one.\n#         Operand is a list of of non-negative integers.\n#         Operator list has at least one operator, and operand list has at least two operands.\ndef do_algebra(operator, operand):\n    # Write your code here\n    result = 0\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '/':\n            result /= operand[i]\n        else:\n            print(\"Invalid operator\")\n    return result\n\n"], ["# <func> # Python \n#     You are given a string s.\n#     if s[i] is a letter, reverse its case from lower to upper or vise versa, \n#     otherwise keep it as it is.\n#     If the string contains no letters, reverse the string.\n#     The function should return the resulted string.\n#     Examples\n#     solve(\"1234\") = \"4321\"\n#     solve(\"ab\") = \"AB\"\n#     solve(\"#a@C\") = \"#A@c\"\ndef solve(s):\n    if s[0] == 'l':\n        s = s[1:] + s[0]\n    if s[0] == 'l':\n        s = s[1:] + s[0]\n    if s[0] == 'l':\n        s = s[1:] + s[0]\n    if s[0] == 'l':\n        s = s[1:] + s[0]\n    if s[0] == 'l':\n        s = s[1:] + s[0]\n    if s[0] == 'l':\n        s = s[1:] + s[0]\n    if s[0] == 'l':\n        s = s[1:] + s[0]\n    if s[0] == 'l':\n        s = s[1:] + s[0]\n    if s[0] == 'l':\n        s = s[1:] + s[0]\n    if s[0] == 'l':\n        s = s[1:] + s[0]\n    if s[0] == 'l':\n        s = s[1:] + s[0]\n    if s[0] == 'l':\n        s = s[1:] + s[0]\n    if s[0] == 'l':\n        s = s[1:] + s[0]\n    if s[0] == 'l':\n        s = s[1:] + s[0]\n    if s[0] == 'l':\n        s = s[1:] + s[0]\n    if s[0] == 'l':\n        s = s[1:]"], ["# <func> # Python \n#     Given a string 'text', return its md5 hash equivalent string.\n#     If 'text' is an empty string, return None.\n#     >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\ndef string_to_md5(text):\n    if text == '':\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()\n"], ["# <func> # Python \n#     Given two positive integers a and b, return the even digits between a\n#     and b, in ascending order.\n#     For example:    generate_integers(2, 8) => [2, 4, 6, 8]\n#     generate_integers(8, 2) => [2, 4, 6, 8]\n#     generate_integers(10, 14) => []\ndef generate_integers(a, b):\n    return [i for i in range(a, b+1) if i%2 == 0]\n"]]