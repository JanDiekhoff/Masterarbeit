[["\"\"\"\nWrite a function to find the shared elements from the given two lists.\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"\n\n\ndef similar_elements(list1, list2):\n    \"\"\"\n    :param list1:\n    :param list2:\n    :return:\n    \"\"\"\n    return set(list(set(list1) & set(list2)))\n\n\ndef main():\n    \"\"\"\n    :param list1:\n    :param list2:\n    :return:\n    \"\"\"\n    list1 = [1, 2, 3, 4, 5, 6]\n    list2 = [5, 7, 4, 10]\n    print(similar_elements(list1, list2))\n\n"], ["\"\"\"\nWrite a python function to identify non-prime numbers.\nassert is_not_prime(2) == False\n\"\"\"\n\n# 1. Import the necessary libraries\nimport math\n\n# 2. Define the function\ndef is_not_prime(n):\n    \"\"\"\n    This function checks if a number is prime or not.\n    :param n: The number to check\n    :return: True if the number is prime, False otherwise\n    \"\"\"\n    # 3. Check if the number is less than 2\n    if n < 2:\n        return False\n    # 4. Check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n    # 5. Check if the number is divisible by 3\n    if n % 3 == 0:\n        return False\n    # 6. Check if the number is divisible by 4\n    if n % 4 == 0:\n        return False\n    # 7. Check if the number is divisible by 5\n    if n % 5 == 0:\n        return False\n    # 8. Check if the number is divisible by 6\n    if n % 6 == 0:\n        return False\n    # 9. Check if the number is divisible by 7\n    if n % 7 == 0:\n        return False\n    # 10. Check if the number is divisible by 8\n    if n % 8 == 0:\n        return False\n    # 11. Check if the number is divisible by 9\n    if n % 9 == 0:\n        return False\n    # 12. Check if the number is divisible by 10\n    if n % 10 == 0:\n        return False\n    # 13. Check if the number is divisible by 11\n    if n % 11 == 0:\n        return False\n    # 14. Check if the number is divisible by 12\n    if n % 12 == 0:\n        return False\n    # 15. Check if the number is divisible by 13\n    if n % 13 == 0"], ["\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"\n"], ["\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nassert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"\n\n\n"], ["\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string.\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\"\"\"\n\n\ndef find_char_long(string):\n    \"\"\"\n    Find all words which are at least 4 characters long in a string.\n\n    :param string: a string\n    :return: a set of words\n    \"\"\"\n    words = set()\n    for word in string.split():\n        if len(word) >= 4:\n            words.add(word)\n    return words\n\n\ndef main():\n    \"\"\"\n    Test the function.\n    \"\"\"\n    assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\n"], ["\"\"\"\nWrite a function to find squares of individual elements in a list.\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n\n\ndef square_nums(nums):\n    return [num ** 2 for num in nums]\n\n"], ["\"\"\"\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nassert find_Rotations(\"aaaa\") == 1\n\"\"\"\n\n\ndef find_Rotations(string):\n    rotations = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string)):\n            if string[i] == string[j]:\n                rotations += 1\n    return rotations\n\n"], ["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\n\ndef remove_Occ(s, c):\n    return s.replace(c, '')\n\n\n# +\n# Write a python function to remove first and last occurrence of a given character from the string.\n"], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\n\ndef sort_matrix(matrix):\n    return sorted(matrix, key=lambda x: sum(x))\n\n"], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\n# 1. Import the necessary packages\nimport numpy as np\n\n# 2. Define the function\ndef find_Volume(length, width, height):\n    \"\"\"\n    This function takes the length, width, and height of a triangular prism and returns the volume.\n    \"\"\"\n    # 3. Calculate the volume of the prism\n    volume = (length * width * height) / 3\n    return volume\n\n# 4. Test the function"], ["\"\"\"\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\"\"\"\n\n\ndef is_lowercase_underscore(text):\n    return text.lower().endswith(\"_\")\n\n"], ["\"\"\"\nWrite a function that returns the perimeter of a square given its side length as input.\nassert square_perimeter(10)==40\n\"\"\"\n\n\ndef square_perimeter(side_length):\n    return 4 * side_length\n\n"], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n\n\ndef remove_dirty_chars(string1, string2):\n    return ''.join(filter(lambda x: x in string2, string1))\n\n"], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\n\ndef test_duplicate(array):\n    \"\"\"\n    Test function to check whether the given array contains any duplicate element.\n    \"\"\"\n    return array.count(array[0]) == len(array)\n\n\ndef test_duplicate_2(array):\n    \"\"\"\n    Test function to check whether the given array contains any duplicate element.\n    \"\"\"\n    return array.count(array[0]) == len(array)\n\n\ndef test_duplicate_3(array):\n    \"\"\"\n    Test function to check whether the given array contains any duplicate element.\n    \"\"\"\n    return array.count(array[0]) == len(array)\n\n\ndef test_duplicate_4(array):\n    \"\"\"\n    Test function to check whether the given array contains any duplicate element.\n    \"\"\"\n    return array.count(array[0]) == len(array)\n\n\ndef test_duplicate_5(array):\n    \"\"\"\n    Test function to check whether the given array contains any duplicate element.\n    \"\"\"\n    return array.count(array[0]) == len(array)\n\n\ndef test_duplicate_6(array):\n    \"\"\"\n    Test function to check whether the given array contains any duplicate element.\n    \"\"\"\n    return array.count(array[0]) == len(array)\n\n\ndef test_duplicate_7(array):\n    \"\"\"\n    Test function to check whether the given array contains any duplicate element.\n    \"\"\"\n    return array.count(array[0]) == len(array)\n\n\ndef test_duplicate_8(array):\n    \"\"\"\n    Test function to check whether the given array contains any duplicate element.\n    \"\"\"\n    return array.count(array[0]) == len(array)\n\n\ndef test_duplicate_9(array):\n    \"\"\"\n    Test function to check whether the given array contains any duplicate element.\n    \"\"\"\n    return array.count(array[0]) == len(array)\n\n\ndef test_duplicate_10(array):\n    \"\"\"\n    Test function to"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\n\ndef is_woodall(num: int) -> bool:\n    \"\"\"\n    >>> is_woodall(383)\n    True\n    >>> is_woodall(384)\n    False\n    >>> is_woodall(385)\n    False\n    >>> is_woodall(386)\n    True\n    >>> is_woodall(387)\n    True\n    >>> is_woodall(388)\n    True\n    >>> is_woodall(389)\n    True\n    >>> is_woodall(390)\n    True\n    >>> is_woodall(391)\n    True\n    >>> is_woodall(392)\n    True\n    >>> is_woodall(393)\n    True\n    >>> is_woodall(394)\n    True\n    >>> is_woodall(395)\n    True\n    >>> is_woodall(396)\n    True\n    >>> is_woodall(397)\n    True\n    >>> is_woodall(398)\n    True\n    >>> is_woodall(399)\n    True\n    >>> is_woodall(400)\n    True\n    >>> is_woodall(401)\n    True\n    >>> is_woodall(402)\n    True\n    >>> is_woodall(403)\n    True\n    >>> is_woodall(404)\n    True\n    >>> is_woodall(405)\n    True\n    >>> is_woodall(406)\n    True\n    >>> is_woodall(407)\n    True\n    >>> is_woodall(408)\n    True\n    >>> is_woodall(409)\n    True\n    >>> is_woodall(410)\n    True\n    >>> is_woodall(411)\n    True\n    >>> is_woodall(412)\n    True\n    >>> is_woodall(4"], ["\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\n\ndef check(n):\n    if n == 0:\n        return True\n    else:\n        return check(n - 1)\n\n\n# +\n# 11. Write a python function to check if a given number is one less than twice its reverse.\n# assert check(70) == False\n# -\n\n# 12. Write a python function to check if a given number is one less than twice its reverse.\n# assert check(70) == False\n\n# 13. Write a python function to check if a given number is one less than twice its reverse.\n# assert check(70) == False\n\n# 14. Write a python function to check if a given number is one less than twice its reverse.\n# assert check(70) == False\n\n# 15. Write a python function to check if a given number is one less than twice its reverse.\n# assert check(70) == False\n\n# 16. Write a python function to check if a given number is one less than twice its reverse.\n# assert check(70) == False\n\n# 17. Write a python function to check if a given number is one less than twice its reverse.\n# assert check(70) == False\n\n# 18. Write a python function to check if a given number is one less than twice its reverse.\n# assert check(70) == False\n\n# 19. Write a python function to check if a given number is one less than twice its reverse.\n# assert check(70) == False\n\n# 20. Write a python function to check if a given number is one less than twice its reverse.\n# assert check(70) == False\n\n# 21. Write a python function to check if a given number is one less than twice its reverse.\n# assert check(70) == False\n\n# 22. Write a python function to check if a given number is one less than twice its reverse.\n# assert check(70) == False\n\n# 23. Write a python function to check if a given number is"], ["\"\"\"\nWrite a python function to find the largest number that can be formed with the given list of digits.\nassert find_Max_Num([1,2,3]) == 321\n\"\"\"\n\ndef find_Max_Num(digits):\n    max_num = 0\n    for i in range(1, len(digits)):\n        if max_num < int(digits[i]):\n            max_num = int(digits[i])\n    return max_num\n\n"], ["\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\n\ndef opposite_Signs(a, b):\n    return a * b < 0\n\n\n# Testing"], ["\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\n\ndef is_octagonal(n: int) -> bool:\n    \"\"\"\n    >>> is_octagonal(5)\n    True\n    >>> is_octagonal(6)\n    False\n    >>> is_octagonal(7)\n    True\n    >>> is_octagonal(8)\n    True\n    >>> is_octagonal(9)\n    True\n    >>> is_octagonal(10)\n    True\n    >>> is_octagonal(11)\n    True\n    >>> is_octagonal(12)\n    True\n    >>> is_octagonal(13)\n    True\n    >>> is_octagonal(14)\n    True\n    >>> is_octagonal(15)\n    True\n    >>> is_octagonal(16)\n    True\n    >>> is_octagonal(17)\n    True\n    >>> is_octagonal(18)\n    True\n    >>> is_octagonal(19)\n    True\n    >>> is_octagonal(20)\n    True\n    >>> is_octagonal(21)\n    True\n    >>> is_octagonal(22)\n    True\n    >>> is_octagonal(23)\n    True\n    >>> is_octagonal(24)\n    True\n    >>> is_octagonal(25)\n    True\n    >>> is_octagonal(26)\n    True\n    >>> is_octagonal(27)\n    True\n    >>> is_octagonal(28)\n    True\n    >>> is_octagonal(29)\n    True\n    >>> is_octagonal(30)\n    True\n    >>> is_octagonal(31)\n    True\n    >>> is_octagonal(32)\n    True\n    >>> is_octagonal(33)\n    True\n    >>> is_octagonal(34)\n    True\n    >>> is_octagonal(35)\n   "], ["\"\"\"\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112') == 6\n\"\"\"\n\n\ndef count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            count += 1\n    return count\n\n"], ["\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n\n\ndef smallest_num(lst):\n    \"\"\"\n    Find the smallest number in a list.\n    :param lst: list\n    :return: smallest number in the list\n    \"\"\"\n    return min(lst)\n\n\ndef test_smallest_num():\n    \"\"\"\n    Test the smallest_num function.\n    :return:\n    \"\"\"\n    assert smallest_num([10, 20, 1, 45, 99]) == 1\n    assert smallest_num([10, 20, 1, 45, 99, 100]) == 1\n    assert smallest_num([10, 20, 1, 45, 99, 100, 101]) == 1\n    assert smallest_num([10, 20, 1, 45, 99, 100, 101, 102]) == 1\n    assert smallest_num([10, 20, 1, 45, 99, 100, 101, 102, 103]) == 1\n    assert smallest_num([10, 20, 1, 45, 99, 100, 101, 102, 103, 104]) == 1\n    assert smallest_num([10, 20, 1, 45, 99, 100, 101, 102, 103, 104, 105]) == 1\n    assert smallest_num([10, 20, 1, 45, 99, 100, 101, 102, 103, 104, 105, 106]) == 1\n    assert smallest_num([10, 20, 1, 45, "], ["\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n\n\ndef max_difference(lst):\n    \"\"\"\n    :type lst: List[Tuple[int, int]]\n    :rtype: int\n    \"\"\"\n    max_diff = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            diff = abs(lst[i][0] - lst[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n"], ["\"\"\"\nWrite a function to sort a list of tuples using the second value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\n\ndef sort_tuple(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n"], ["\"\"\"\nWrite a function to flatten a list and sum all of its elements.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n\n\ndef recursive_list_sum(lst):\n    if not lst:\n        return 0\n    return lst[0] + recursive_list_sum(lst[1:])\n\n\ndef flatten(lst):\n    return [item for sublist in lst for item in sublist]\n\n"], ["\"\"\"\nWrite a python function to count the number of positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\n\ndef pos_count(lst):\n    return len([x for x in lst if x > 0])\n\n"], ["\"\"\"\nWrite a function to find the number of ways to partition a set of Bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\n\ndef bell_number(n):\n    \"\"\"\n    Bell number of n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n\n\ndef bell_number_test():\n    assert bell_number(2) == 2\n    assert bell_number(3) == 5\n    assert bell_number(4) == 15\n    assert bell_number(5) == 42\n\n\nbell_number_test()\n"], ["\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\n\ndef is_Monotonic(array):\n    \"\"\"\n    :param array: the array to check\n    :return: True if the array is monotonic, False otherwise\n    \"\"\"\n    # check if the array is empty\n    if len(array) == 0:\n        return True\n\n    # check if the array is sorted\n    if not is_Sorted(array):\n        return False\n\n    # check if the array is monotonic\n    for i in range(1, len(array)):\n        if array[i] > array[i - 1]:\n            return False\n\n    return True\n\n\ndef is_Sorted(array):\n    \"\"\"\n    :param array: the array to check\n    :return: True if the array is sorted, False otherwise\n    \"\"\"\n    # check if the array is empty\n    if len(array) == 0:\n        return True\n\n    # check if the array is sorted\n    for i in range(1, len(array)):\n        if array[i] < array[i - 1]:\n            return False\n\n    return True\n\n\ndef main():\n    print(is_Monotonic([6, 5, 4, 4]))\n    print(is_Monotonic([6, 5, 4, 3]))\n    print(is_Monotonic([6, 5, 4, 4, 3]))\n    print(is_Monotonic([6, 5, 4, 4, 3, 2]))\n    print(is_Monotonic([6, 5, 4, 4, 3, 2, 1]))\n    print(is_Monotonic([6, 5, 4, 4, 3, 2, 1, 0]))\n\n"], ["\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\n\n"], ["\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\"\"\"\n\n\ndef get_equal(tuples):\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if len(tuples[i]) != len(tuples[j]):\n                return False\n    return True\n\n"], ["\"\"\"\nWrite a function to sort a list of elements.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\n\ndef dif_Square(num):\n    \"\"\"\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    :param num: The number to be checked.\n    :return: True if the number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    # Check if the number is even\n    if num % 2 == 0:\n        return False\n\n    # Check if the number is a perfect square\n    if num == int(num):\n        return True\n\n    # Check if the number is a perfect cube\n    if num == int(num**(1/3)):\n        return True\n\n    # Check if the number is a perfect square and a perfect cube\n    if num == int(num**(1/3)) and num == int(num**(2/3)):\n        return True\n\n    # Check if the number is a perfect square and a perfect cube and a perfect square and a perfect cube\n    if num == int(num**(1/3)) and num == int(num**(2/3)) and num == int(num**(1/3)):\n        return True\n\n    # Check if the number is a perfect square and a perfect cube and a perfect square and a perfect cube and a perfect square\n    if num == int(num**(1/3)) and num == int(num**(2/3)) and num == int(num**(1/3)) and num == int(num**(1/3)):\n        return True\n\n    # Check if the number is a perfect square and a perfect cube and a perfect square and a perfect cube and a perfect square and a perfect cube\n    if num == int(num**(1/3)) and num == int(num**(2/3)) and num == int(num**(1/3)) and num == int(num**(1/3)) and num == int(num**(1/3)):\n        return True\n\n    # Check if the number is a perfect square and a perfect cube and a perfect square and a perfect cube and a perfect square and a"], ["\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n\"\"\"\n\ndef is_samepatterns(patterns, sequence):\n    if len(patterns) != len(sequence):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i] != sequence[i]:\n            return False\n    return True\n\ndef main():\n    patterns = [\n        \"red\",\n        \"green\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n        \"red\",\n        \"green\",\n"], ["\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\"\"\"\n\n\ndef find_tuples(tuples, k):\n    return [t for t in tuples if all(t[i] % k == 0 for i in range(len(t)))]\n\n"], ["\"\"\"\nWrite a python function to find whether a number is divisible by 11.\nassert is_Diff (12345) == False\n\"\"\"\n\n\ndef is_Diff(n):\n    return n % 11 == 0\n\n\ndef main():\n    print(is_Diff(12345))\n\n"], ["\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\n\ndef word_len(word):\n    if len(word) % 2 == 0:\n        return True\n    else:\n        return False\n\n"], ["\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35\n\"\"\"\n\n\ndef tetrahedral_number(n):\n    \"\"\"\n    Find the nth tetrahedral number.\n    :param n:\n    :return:\n    \"\"\"\n    return sum(range(1, n + 1))\n\n\ndef main():\n    \"\"\"\n    Main function.\n    :return:\n    \"\"\"\n    print(tetrahedral_number(5))\n\n"], ["\"\"\"\nWrite a function to find the volume of a sphere.\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\"\n\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    :param radius: radius of the sphere\n    :type radius: float\n    :return: volume of the sphere\n    :rtype: float\n    \"\"\"\n    return 4/3 * math.pi * (radius ** 3)\n\n\ndef test_volume_sphere():\n    \"\"\"\n    Test the volume_sphere function.\n    \"\"\"\n    assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n"], ["\"\"\"\nWrite a function to find the nth number in the newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\n\ndef sequence(n):\n    \"\"\"Return the nth number in the newman conway sequence.\"\"\"\n    return n * (n + 1) // 2\n\n\ndef main():\n    \"\"\"Run main program.\"\"\"\n    print(sequence(10))\n\n"], ["\"\"\"\nWrite a function to find the surface area of a sphere.\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\"\"\"\n\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Parameters\n    ----------\n    radius : float\n        The radius of the sphere.\n\n    Returns\n    -------\n    float\n        The surface area of the sphere.\n\n    \"\"\"\n    return 4 * math.pi * radius ** 2\n\n\ndef test_surfacearea_sphere():\n    \"\"\"\n    Test the surfacearea_sphere function.\n    \"\"\"\n    assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n"], ["\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n"], ["\"\"\"\nWrite a function to merge three dictionaries into a single dictionary.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    :param dict1:\n    :param dict2:\n    :param dict3:\n    :return:\n    \"\"\"\n    return {**dict1, **dict2, **dict3}\n\n\ndef merge_dictionaries_three_2(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    :param dict1:\n    :param dict2:\n    :param dict3:\n    :return:\n    \"\"\"\n    return {**dict1, **dict2, **dict3}\n\n\ndef merge_dictionaries_three_3(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    :param dict1:\n    :param dict2:\n    :param dict3:\n    :return:\n    \"\"\"\n    return {**dict1, **dict2, **dict3}\n\n\ndef merge_dictionaries_three_4(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    :param dict1:\n    :param dict2:\n    :param dict3:\n    :return:\n    \"\"\"\n    return {**dict1, **dict2, **dict3}\n\n\ndef merge_dictionaries_three_5(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    :param dict1:\n    :param dict2:\n    :param dict3:\n    :return:\n"], ["\"\"\"\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n\"\"\"\n\n\ndef freq_count(lst):\n    \"\"\"\n    :param lst: list\n    :return: dict\n    \"\"\"\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\n\ndef main():\n    \"\"\"\n    :return:\n    \"\"\"\n    lst = [10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]\n    print(freq_count(lst))\n\n"], ["\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\ndef len_log(words):\n    \"\"\"\n    Find the length of the longest word in a list of words.\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"], ["\"\"\"\nWrite a function to check if a string is present as a substring in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\n\ndef find_substring(lst, s):\n    for i in range(len(lst)):\n        if lst[i] == s:\n            return True\n    return False\n\n"], ["\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(1212121) == True\n\"\"\"\n\n\ndef is_undulating(n):\n    \"\"\"\n    >>> is_undulating(1212121)\n    True\n    >>> is_undulating(1212122)\n    False\n    >>> is_undulating(12121212)\n    True\n    >>> is_undulating(121212122)\n    False\n    >>> is_undulating(121212121)\n    True\n    >>> is_undulating(1212121212)\n    False\n    >>> is_undulating(12121212122)\n    False\n    >>> is_undulating(121212121222)\n    False\n    >>> is_undulating(1212121212222)\n    False\n    >>> is_undulating(12121212122222)\n    False\n    >>> is_undulating(121212121222222)\n    False\n    >>> is_undulating(1212121212222222)\n    False\n    >>> is_undulating(12121212122222222)\n    False\n    >>> is_undulating(121212121222222222)\n    False\n    >>> is_undulating(1212121212222222222)\n    False\n    >>> is_undulating(12121212122222222222)\n    False\n    >>> is_undulating(121212121222222222222)\n    False\n    >>> is_undulating(1212121212222222222222"], ["\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n"], ["\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n\n\ndef index_minimum(tuples):\n    # Your code here\n    min_second = float('inf')\n    min_index = -1\n    for i, (first, second) in enumerate(tuples):\n        if second < min_second:\n            min_second = second\n            min_index = i\n    return min_index\n\n"], ["\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\n\ndef Find_Min_Length(lst):\n    min_length = 1\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i]) > len(lst[j]):\n                min_length = min(min_length, len(lst[i]))\n    return min_length\n\n"], ["\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4\n\"\"\"\n\n\ndef divisor(n):\n    \"\"\"\n    Find the number of divisors of a given integer.\n    :param n: The integer to find the divisors of.\n    :return: The number of divisors of n.\n    \"\"\"\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n\n"], ["\"\"\"\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\n\ndef frequency_lists(lst):\n    return {i: lst.count(i) for i in lst}\n\n"], ["\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\"\n\n\ndef multiply_num(nums: list) -> float:\n    \"\"\"Multiply all the numbers in a list and divide with the length of the list.\"\"\"\n    return sum(map(lambda x: x * num, nums)) / len(nums)\n\n"], ["\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n\n\ndef next_smallest_palindrome(n):\n    # Write your code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return "], ["\"\"\"\nWrite a function to find the kth element in the given array using 1-based indexing.\nassert kth_element([12,3,5,7,19], 2) == 3\n\"\"\"\n"], ["\"\"\"\nWrite a function to convert a snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\n\ndef snake_to_camel(snake_str):\n    return ''.join(x.title() for x in snake_str.split('_'))\n\n"], ["\"\"\"\nWrite a function to find the Eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\n\ndef eulerian_num(n, m):\n    \"\"\"\n    :param n: int\n    :param m: int\n    :return: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if m == 1:\n        return 1\n    if n == 2:\n        return 2\n    if m == 2:\n        return 2\n    if n == 3:\n        return 3\n    if m == 3:\n        return 3\n    if n == 4:\n        return 4\n    if m == 4:\n        return 4\n    if n == 5:\n        return 5\n    if m == 5:\n        return 5\n    if n == 6:\n        return 6\n    if m == 6:\n        return 6\n    if n == 7:\n        return 7\n    if m == 7:\n        return 7\n    if n == 8:\n        return 8\n    if m == 8:\n        return 8\n    if n == 9:\n        return 9\n    if m == 9:\n        return 9\n    if n == 10:\n        return 10\n    if m == 10:\n        return 10\n    if n == 11:\n        return 11\n    if m == 11:\n        return 11\n    if n == 12:\n        return 12\n    if m == 12:\n        return 12\n    if n == 13:\n        return 13\n    if m == 13:\n        return 13\n    if n == 14:\n        return 14\n    if m == 14:\n        return 14\n    if n == 15:\n        return 15\n    if m == 15:\n        return 15\n    if n == 16:\n        return 16\n    if m =="], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\n\ndef sort_sublists(sublists):\n    return sorted(sublists)\n\n"], ["\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\n\ndef count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n\n"], ["\"\"\"\nWrite a function to append the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n"], ["\"\"\"\nWrite a function to merge three lists into a single sorted list.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\n\ndef merge_sorted_list(l1, l2, l3):\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    merged = []\n    for i in range(len(l1)):\n        merged.append(l1[i] + l2[i] + l3[i])\n    return merged\n\n\ndef merge_sorted_list_2(l1, l2, l3):\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    merged = []\n    for i in range(len(l1)):\n        merged.append(l1[i] + l2[i] + l3[i])\n    return merged\n\n\ndef merge_sorted_list_3(l1, l2, l3):\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    merged = []\n    for i in range(len(l1)):\n        merged.append(l1[i] + l2[i] + l3[i])\n    return merged\n\n\ndef merge_sorted_list_4(l1, l2, l3):\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    merged = []\n    for i in range(len(l1)):\n        merged.append(l1[i] + l2[i] + l3[i])\n    return"], ["\"\"\"\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\n\ndef odd_Equivalent(s, n):\n    # Write your code here\n    odd_list = []\n    for i in range(0, len(s)):\n        if s[i] == \"1\":\n            odd_list.append(i)\n    for i in range(0, len(s)):\n        if s[i] == \"0\":\n            odd_list.append(i)\n    for i in range(0, len(s)):\n        if s[i] == \"1\":\n            odd_list.append(i)\n    for i in range(0, len(s)):\n        if s[i] == \"0\":\n            odd_list.append(i)\n    for i in range(0, len(s)):\n        if s[i] == \"1\":\n            odd_list.append(i)\n    for i in range(0, len(s)):\n        if s[i] == \"0\":\n            odd_list.append(i)\n    for i in range(0, len(s)):\n        if s[i] == \"1\":\n            odd_list.append(i)\n    for i in range(0, len(s)):\n        if s[i] == \"0\":\n            odd_list.append(i)\n    for i in range(0, len(s)):\n        if s[i] == \"1\":\n            odd_list.append(i)\n    for i in range(0, len(s)):\n        if s[i] == \"0\":\n            odd_list.append(i)\n    for i in range(0, len(s)):\n        if s[i] == \"1\":\n            odd_list.append(i)\n    for i in range(0, len(s)):\n        if s[i] == \"0\":\n            odd_list.append(i)\n    for i in range(0, len(s)):\n        if s[i] == \"1\":\n           "], ["\"\"\"\nWrite a function to find the common elements in given nested lists.\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n\"\"\"\n\n\ndef common_in_nested_lists(nested_list1, nested_list2):\n    # Write your code here\n    return set(common_elements(nested_list1, nested_list2))\n\n\ndef common_elements(nested_list1, nested_list2):\n    # Write your code here\n    return set(nested_list1) & set(nested_list2)\n\n"], ["\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\ndef check_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n"], ["\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n"], ["\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n\n\ndef string_to_list(string):\n    return string.split(' ')\n\n\n# +\n# Write a function to convert a string to a list of strings split on the space character.\n\ndef string_to_list(string):\n    return string.split(' ')\n\n\n# +\n# Write a function to convert a string to a list of strings split on the space character.\n\ndef string_to_list(string):\n    return string.split(' ')\n\n\n# +\n# Write a function to convert a string to a list of strings split on the space character.\n\ndef string_to_list(string):\n    return string.split(' ')\n\n\n# +\n# Write a function to convert a string to a list of strings split on the space character.\n\ndef string_to_list(string):\n    return string.split(' ')\n\n\n# +\n# Write a function to convert a string to a list of strings split on the space character.\n\ndef string_to_list(string):\n    return string.split(' ')\n\n\n# +\n# Write a function to convert a string to a list of strings split on the space character.\n\ndef string_to_list(string):\n    return string.split(' ')\n\n\n# +\n# Write a function to convert a string to a list of strings split on the space character.\n\ndef string_to_list(string):\n    return string.split(' ')\n\n\n# +\n# Write a function to convert a string to a list of strings split on the space character.\n\ndef string_to_list(string):\n    return string.split(' ')\n\n\n# +\n# Write a function to convert a string to a list of strings split on the space character.\n\ndef string_to_list(string):\n    return string.split(' ')\n\n\n# +\n# Write a function to convert a string to a list of strings split on the space character.\n\ndef string_to_list(string):\n    return string.split(' ')\n\n\n# +\n# Write a function to"], ["\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3]) == 3\n\"\"\"\n\n\ndef search(array):\n    \"\"\"\n    :param array: list\n    :return: int\n    \"\"\"\n    # TODO: Write your code here\n    # TODO: Implement this function\n    # TODO: Return the index of the first occurrence of the element\n    # TODO: Return -1 if the element is not present\n    # TODO: Return -1 if the element is not present\n    # TODO: Return the index of the first occurrence of the element\n    # TODO: Return -1 if the element is not present\n    # TODO: Return -1 if the element is not present\n    # TODO: Return the index of the first occurrence of the element\n    # TODO: Return -1 if the element is not present\n    # TODO: Return -1 if the element is not present\n    # TODO: Return the index of the first occurrence of the element\n    # TODO: Return -1 if the element is not present\n    # TODO: Return -1 if the element is not present\n    # TODO: Return the index of the first occurrence of the element\n    # TODO: Return -1 if the element is not present\n    # TODO: Return -1 if the element is not present\n    # TODO: Return the index of the first occurrence of the element\n    # TODO: Return -1 if the element is not present\n    # TODO: Return -1 if the element is not present\n    # TODO: Return the index of the first occurrence of the element\n    # TODO: Return -1 if the element is not present\n    # TODO: Return -1 if the element is not present\n    # TODO: Return the index of the first occurrence of the element\n    # TODO: Return -1 if the element is not present\n    # TODO: Return -1 if the element is not present\n    # TODO: Return the index of the first occurrence of the element\n    # TODO: Return -1 if the element is not present\n    # TODO: Return -1 if the element is not present\n    # TODO: Return the index of the first occurrence of the element\n    # TODO: Return -1 if the element is not present\n    # TODO: Return -1 if the element"], ["\"\"\"\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\ndef max_product_tuple(tuples):\n    max_product = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            product = tuples[i][0] * tuples[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product\n"], ["\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n"], ["\"\"\"\nWrite a function to get the angle of a complex number.\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n\"\"\"\n\nimport numpy as np\n\n\ndef angle_complex(a, b):\n    \"\"\"\n    Compute the angle of a complex number.\n\n    :param a: the real part of the complex number\n    :param b: the imaginary part of the complex number\n    :return: the angle of the complex number\n    \"\"\"\n    return np.arctan2(b, a)\n\n\ndef angle_complex_numpy(a, b):\n    \"\"\"\n    Compute the angle of a complex number.\n\n    :param a: the real part of the complex number\n    :param b: the imaginary part of the complex number\n    :return: the angle of the complex number\n    \"\"\"\n    return np.arctan2(b, a)\n"], ["\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\") == 6\n\"\"\"\n\n\ndef find_length(binary_string):\n    \"\"\"\n    :type binary_string: str\n    :rtype: int\n    \"\"\"\n    length = 0\n    for i in range(len(binary_string)):\n        if binary_string[i] == '1':\n            length += 1\n    return length\n\n\ndef find_length(binary_string):\n    \"\"\"\n    :type binary_string: str\n    :rtype: int\n    \"\"\"\n    length = 0\n    for i in range(len(binary_string)):\n        if binary_string[i] == '1':\n            length += 1\n    return length\n\n\ndef find_length(binary_string):\n    \"\"\"\n    :type binary_string: str\n    :rtype: int\n    \"\"\"\n    length = 0\n    for i in range(len(binary_string)):\n        if binary_string[i] == '1':\n            length += 1\n    return length\n\n\ndef find_length(binary_string):\n    \"\"\"\n    :type binary_string: str\n    :rtype: int\n    \"\"\"\n    length = 0\n    for i in range(len(binary_string)):\n        if binary_string[i] == '1':\n            length += 1\n    return length\n\n\ndef find_length(binary_string):\n    \"\"\"\n    :type binary_string: str\n    :rtype: int\n    \"\"\"\n    length = 0\n    for i in range(len(binary_string)):\n        if binary_string[i] == '1':\n            length += 1\n    return length\n\n\ndef find_length(binary_string):\n    \"\"\"\n    :type binary_string: str\n    :rtype: int\n    \"\"\"\n    length = 0\n    for i in range(len(binary_string)):\n        if binary_string[i] == '1':\n            length += 1\n"], ["\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\n# 1. Import the required libraries\nimport math\n\n# 2. Define the function\ndef sum_of_common_divisors(a, b):\n    # Check if the input is a number\n    if type(a) != int or type(b) != int:\n        raise TypeError(\"Inputs must be numbers\")\n\n    # Check if the inputs are positive\n    if a < 0 or b < 0:\n        raise ValueError(\"Inputs must be positive\")\n\n    # Check if the inputs are not equal\n    if a != b:\n        raise ValueError(\"Inputs must be equal\")\n\n    # Check if the inputs are not negative\n    if a < 0 or b < 0:\n        raise ValueError(\"Inputs must be positive\")\n\n    # Check if the inputs are not integers\n    if type(a) != int or type(b) != int:\n        raise TypeError(\"Inputs must be integers\")\n\n    # Check if the inputs are not greater than 1\n    if a > 1 or b > 1:\n        raise ValueError(\"Inputs must be less than or equal to 1\")\n\n    # Check if the inputs are not greater than 1\n    if a > b:\n        raise ValueError(\"Inputs must be less than or equal to b\")\n\n    # Check if the inputs are not greater than 1\n    if a < b:\n        raise ValueError(\"Inputs must be less than or equal to b\")\n\n    # Check if the inputs are not greater than 1\n    if a % b != 0:\n        raise ValueError(\"Inputs must be equal\")\n\n    # Check if the inputs are not greater than 1\n    if a % b != 0:\n        raise ValueError(\"Inputs must be equal\")\n\n    # Check if the inputs are not greater than 1\n    if a % b != 0:\n        raise ValueError(\"Inputs must be equal\")\n\n    # Check if the inputs are not greater than 1\n    if a % b != 0:\n        raise ValueError(\"Input"], ["\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"\n\ndef multiply_int(a,b):\n    return a*b\n"], ["\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n"], ["\"\"\"\nWrite a function to calculate whether the matrix is a magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n\"\"\"\n\n\ndef max_occurrences(lst):\n    max_freq = 0\n    max_item = None\n    for item in lst:\n        if item > max_freq:\n            max_freq = item\n            max_item = item\n    return max_item\n\n"], ["\"\"\"\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\n\ndef reverse_vowels(s):\n    vowels = \"aeiou\"\n    return \"\".join(c for c in s if c in vowels)\n\n"], ["\"\"\"\nWrite a function to convert a tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n"], ["\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\n\ndef sum_negativenum(nums):\n    \"\"\"\n    :param nums: a list of numbers\n    :return: the sum of the negative numbers in the list\n    \"\"\"\n    return sum(num for num in nums if num < 0)\n\n"], ["\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n\"\"\"\n\n\ndef zero_count(array):\n    count = 0\n    for i in range(len(array)):\n        if array[i] == 0:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\n\ndef is_Sum_Of_Powers_Of_Two(num):\n    if num == 0:\n        return True\n    if num == 1:\n        return False\n    if num % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(num / 2)\n    return is_Sum_Of_Powers_Of_Two(num / 2) or is_Sum_Of_Powers_Of_Two(num / 4)\n\n"], ["\"\"\"\nWrite a function to find the circumference of a circle.\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\"\"\"\n"], ["\"\"\"\nWrite a function to flatten the list of lists into a single set of numbers.\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\"\"\"\n\n\ndef extract_singly(lst):\n    return set(lst)\n\n\ndef test_extract_singly():\n    assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == set([3, 4, 5, 7, 1])\n"], ["\"\"\"\nWrite a function to sort a list of elements.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n"], ["\"\"\"\nWrite a function to count number items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\n\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                count += 1\n    for i in list3:\n        for j in list2:\n            if i == j:\n                count += 1\n    return count\n\n\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                count += 1\n    for i in list3:\n        for j in list2:\n            if i == j:\n                count += 1\n    return count\n\n\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                count += 1\n    for i in list3:\n        for j in list2:\n            if i == j:\n                count += 1\n    return count\n\n\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                count += 1\n    for i in list3:\n        for j in list2:\n            if i == j:\n                count += 1\n    return count\n\n\ndef count_samepair(list1, list2, list3):\n    count = 0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                count += 1\n    for i in list3:\n        for j in list2:\n            if i == j:\n                count += 1\n    return count"], ["\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3)) == 4\n\"\"\"\n\n\ndef max_Abs_Diff(array):\n    max_diff = 0\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if abs(array[i] - array[j]) > max_diff:\n                max_diff = abs(array[i] - array[j])\n    return max_diff\n\n"], ["\"\"\"\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nassert find_solution(2, 3, 7) == (2, 1)\n\"\"\"\n\n\ndef find_solution(a, b, n):\n    \"\"\"\n    Finds a solution to the equation ax + by = n.\n    :param a: The coefficient of x.\n    :param b: The coefficient of y.\n    :param n: The constant.\n    :return: A tuple of x and y.\n    \"\"\"\n    x = None\n    y = None\n    for x_val in range(1, 1000000):\n        for y_val in range(1, 1000000):\n            if a * x_val + b * y_val == n:\n                return (x_val, y_val)\n    return None\n\n"], ["\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\"\"\"\n"], ["\"\"\"\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\nassert sum_series(6) == 12\n\"\"\"\n\n\ndef sum_series(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n - 2 * i) for i in range(1, n // 2)\n\n"], ["\"\"\"\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\n\ndef count_char_position(string: str) -> int:\n    \"\"\"\n    >>> count_char_position(\"xbcefg\")\n    2\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i] == string[i].lower():\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n\"\"\"\n\n\ndef find_even_pair(numbers: list) -> int:\n    \"\"\"\n    Find the number of pairs of integers in a list that xor to an even number.\n\n    >>> find_even_pair([5, 4, 7, 2, 1])\n    4\n    \"\"\"\n    even_pairs = 0\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] * numbers[j] % 2 == 0:\n                even_pairs += 1\n    return even_pairs\n\n"], ["\"\"\"\nWrite a python function to find the smallest power of 2 greater than or equal to n.\nassert next_power_of_2(0) == 1\n\"\"\"\n\n\ndef next_power_of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n - 1)\n\n\n# Testing"], ["\"\"\"\nWrite a function to count the number of occurrences of a number in a given list.\nassert frequency([1,2,3], 4) == 0\n\"\"\"\n\n\ndef frequency(lst, num):\n    \"\"\"\n    :param lst: list of numbers\n    :param num: number to count\n    :return: number of times the number appears in the list\n    \"\"\"\n    return sum(1 for i in lst if i == num)\n\n"], ["\"\"\"\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\"\"\"\n\n\ndef sum_range_list(list_of_numbers, start, end):\n    \"\"\"\n    :param list_of_numbers: a list of numbers\n    :param start: the start index\n    :param end: the end index\n    :return: the sum of numbers in the list between the start and end indices\n    \"\"\"\n    return sum(list_of_numbers[start:end])\n\n\ndef test_sum_range_list():\n    assert sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10) == 29\n\n\ndef test_sum_range_list_with_negative_index():\n    assert sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], -10, -1) == 0\n\n\ndef test_sum_range_list_with_negative_index_and_negative_start():\n    assert sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], -10, -10) == 0\n\n\ndef test_sum_range_list_with_negative_index_and_negative_end():\n    assert sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], -10, -10) == 0\n\n\ndef test_sum_range_list_with_negative_index_and_negative_start_and_end():\n    assert sum_range_list([2, "], ["\"\"\"\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\nassert perimeter_pentagon(5) == 25\n\"\"\"\n\n\ndef perimeter_pentagon(n):\n    \"\"\"\n    :param n: the number of sides of the regular pentagon\n    :return: the perimeter of the regular pentagon\n    \"\"\"\n    return 5 * (n - 1)\n\n"], ["\"\"\"\nWrite a function to count the number of occurence of the string 'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n\n\ndef count_occurance(string):\n    \"\"\"\n    :param string: string\n    :return: int\n    \"\"\"\n    count = 0\n    for char in string:\n        if char == 'std':\n            count += 1\n    return count\n\n"], ["\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\n\ndef check_type(tup):\n    if len(tup) == 0:\n        return True\n    for i in range(len(tup)):\n        if type(tup[i]) != type(tup[i]):\n            return False\n    return True\n\n\ndef check_type_tuple(tup):\n    if len(tup) == 0:\n        return True\n    for i in range(len(tup)):\n        if type(tup[i]) != type(tup[i]):\n            return False\n    return True\n\n\ndef check_type_list(tup):\n    if len(tup) == 0:\n        return True\n    for i in range(len(tup)):\n        if type(tup[i]) != type(tup[i]):\n            return False\n    return True\n\n\ndef check_type_dict(tup):\n    if len(tup) == 0:\n        return True\n    for i in range(len(tup)):\n        if type(tup[i]) != type(tup[i]):\n            return False\n    return True\n\n\ndef check_type_set(tup):\n    if len(tup) == 0:\n        return True\n    for i in range(len(tup)):\n        if type(tup[i]) != type(tup[i]):\n            return False\n    return True\n\n\ndef check_type_tuple_set(tup):\n    if len(tup) == 0:\n        return True\n    for i in range(len(tup)):\n        if type(tup[i]) != type(tup[i]):\n            return False\n    return True\n\n\ndef check_type_list_set(tup):\n    if len(tup) == 0:\n        return True\n    for i in range(len(tup)):\n        if type(tup[i]) !="], ["\"\"\"\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\n\ndef is_majority(array, element, n):\n    \"\"\"\n    :param array: list\n    :param element: int\n    :param n: int\n    :return: bool\n    \"\"\"\n    # check if the array is empty\n    if len(array) == 0:\n        return False\n\n    # check if the array is sorted\n    if not array:\n        return False\n\n    # check if the array is sorted\n    if not array[0] == element:\n        return False\n\n    # check if the array is sorted\n    for i in range(1, len(array)):\n        if array[i] == element:\n            return False\n\n    # check if the array is sorted\n    for i in range(0, len(array)):\n        if array[i] == element:\n            return True\n\n    # check if the array is sorted\n    for i in range(0, len(array)):\n        if array[i] == element:\n            return False\n\n    # check if the array is sorted\n    for i in range(0, len(array)):\n        if array[i] == element:\n            return True\n\n    # check if the array is sorted\n    for i in range(0, len(array)):\n        if array[i] == element:\n            return False\n\n    # check if the array is sorted\n    for i in range(0, len(array)):\n        if array[i] == element:\n            return True\n\n    # check if the array is sorted\n    for i in range(0, len(array)):\n        if array[i] == element:\n            return False\n\n    # check if the array is sorted\n    for i in range(0, len(array)):\n        if array[i] == element:\n            return True\n\n    # check if the array"], ["\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\n\ndef count_Set_Bits(n):\n    \"\"\"\n    Count the number of set bits in a given number.\n\n    Args:\n        n (int): The number to count the set bits in.\n\n    Returns:\n        int: The number of set bits in the given number.\n    \"\"\"\n    return sum(1 for i in range(n) if i & 1)\n\n\ndef main():\n    \"\"\"\n    Test the function.\n    \"\"\"\n    assert count_Set_Bits(2) == 1\n    assert count_Set_Bits(1) == 0\n    assert count_Set_Bits(0) == 0\n    assert count_Set_Bits(10) == 2\n    assert count_Set_Bits(100) == 4\n    assert count_Set_Bits(1000) == 8\n    assert count_Set_Bits(10000) == 16\n    assert count_Set_Bits(100000) == 32\n    assert count_Set_Bits(1000000) == 64\n    assert count_Set_Bits(10000000) == 128\n    assert count_Set_Bits(100000000) == 256\n    assert count_Set_Bits(1000000000) == 512\n    assert count_Set_Bits(10000000000) == 1024\n    assert count_Set_Bits(100000000000) == 2048\n    assert count_Set_Bits(1000000000000) == 4096\n    assert count_Set_Bits(10000000000000) == 8192\n    assert count_Set_"], ["\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\n\ndef odd_values_string(s):\n    return ''.join(c for c in s if c.isalpha() and c.isupper())\n\n"], ["\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n\n\ndef min_of_three(a, b, c):\n    return min(a, b, c)\n\n"], ["\"\"\"\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\ndef replace_blank(string, character):\n    return string.replace(' ', character)\n"], ["\"\"\"\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\"\"\"\n\n\ndef set_larg_nnum(lst, n):\n    return sorted(lst, key=lambda x: x[n], reverse=True)[:n]\n\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\"\n\nimport math\n\ndef lateralsuface_cylinder(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n    :param radius: Radius of the cylinder.\n    :param height: Height of the cylinder.\n    :return: Lateral surface area of the cylinder.\n    \"\"\"\n    return 2 * math.pi * radius * height\n\n\ndef main():\n    \"\"\"\n    Test the function.\n    \"\"\"\n    print(lateralsuface_cylinder(10, 5))\n\n"], ["\"\"\"\nWrite a function to find the volume of a cube given its side length.\nassert volume_cube(3)==27\n\"\"\"\n\n# 1. Write a function to find the volume of a cube given its side length.\n# 2. Test your function with the following values:\n# 3. Write a function to find the volume of a cube given its side length.\n# 4. Test your function with the following values:\n# 5. Write a function to find the volume of a cube given its side length.\n# 6. Test your function with the following values:\n# 7. Write a function to find the volume of a cube given its side length.\n# 8. Test your function with the following values:\n# 9. Write a function to find the volume of a cube given its side length.\n# 10. Test your function with the following values:\n# 11. Write a function to find the volume of a cube given its side length.\n# 12. Test your function with the following values:\n# 13. Write a function to find the volume of a cube given its side length.\n# 14. Test your function with the following values:\n# 15. Write a function to find the volume of a cube given its side length.\n# 16. Test your function with the following values:\n# 17. Write a function to find the volume of a cube given its side length.\n# 18. Test your function with the following values:\n# 19. Write a function to find the volume of a cube given its side length.\n# 20. Test your function with the following values:\n# 21. Write a function to find the volume of a cube given its side length.\n# 22. Test your function with the following values:\n# 23. Write a function to find the volume of a cube given its side length.\n# 24. Test your function with the following values:\n# 25. Write a function to find the volume of a cube given its side length.\n# 26. Test your function with the following values:\n# 27. Write a function to find the volume of a cube given its side length.\n# 28. Test your function with the"], ["\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\n# 1. Write a python function to set all even bits of a given number.\n# assert even_bit_set_number(10) == 10\n\n# 2. Write a python function to set all odd bits of a given number.\n# assert odd_bit_set_number(10) == 10\n\n# 3. Write a python function to set all odd bits of a given number.\n# assert odd_bit_set_number(10) == 10\n\n# 4. Write a python function to set all odd bits of a given number.\n# assert odd_bit_set_number(10) == 10\n\n# 5. Write a python function to set all odd bits of a given number.\n# assert odd_bit_set_number(10) == 10\n\n# 6. Write a python function to set all odd bits of a given number.\n# assert odd_bit_set_number(10) == 10\n\n# 7. Write a python function to set all odd bits of a given number.\n# assert odd_bit_set_number(10) == 10\n\n# 8. Write a python function to set all odd bits of a given number.\n# assert odd_bit_set_number(10) == 10\n\n# 9. Write a python function to set all odd bits of a given number.\n# assert odd_bit_set_number(10) == 10\n\n# 10. Write a python function to set all odd bits of a given number.\n# assert odd_bit_set_number(10) == 10\n\n# 11. Write a python function to set all odd bits of a given number.\n# assert odd_bit_set_number(10) == 10\n\n# 12. Write a python function to set all odd bits of a given number.\n# assert odd_bit_set_number(10) == 10\n\n# 13. Write a python function to set all odd bits"], ["\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\n\ndef check_occurences(tuples: list) -> dict:\n    \"\"\"\n    Takes a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # TODO: Implement me\n    pass\n\n"], ["\"\"\"\nWrite a python function to count the number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\n\ndef number_of_substrings(s):\n    \"\"\"\n    :param s: a string\n    :return: the number of non-empty substrings of the string\n    \"\"\"\n    # your code here\n    return len(set(s))\n\n"], ["\"\"\"\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\n\ndef get_total_number_of_sequences(m, n):\n    \"\"\"\n    :param m:\n    :param n:\n    :return:\n    \"\"\"\n    total_number_of_sequences = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j >= i:\n                total_number_of_sequences += 1\n    return total_number_of_sequences\n\n"], ["\"\"\"\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\n\ndef replace_list(list1, list2):\n    return list1[:-1] + list2\n\n"], ["\"\"\"\nWrite a function to count the total number of characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\n# 18\ndef count_charac(s):\n    count = 0\n    for i in s:\n        count += 1\n    return count\n\n\n# 19\ndef count_charac(s):\n    count = 0\n    for i in s:\n        count += 1\n    return count\n\n\n# 20\ndef count_charac(s):\n    count = 0\n    for i in s:\n        count += 1\n    return count\n\n\n# 21\ndef count_charac(s):\n    count = 0\n    for i in s:\n        count += 1\n    return count\n\n\n# 22\ndef count_charac(s):\n    count = 0\n    for i in s:\n        count += 1\n    return count\n\n\n# 23\ndef count_charac(s):\n    count = 0\n    for i in s:\n        count += 1\n    return count\n\n\n# 24\ndef count_charac(s):\n    count = 0\n    for i in s:\n        count += 1\n    return count\n\n\n# 25\ndef count_charac(s):\n    count = 0\n    for i in s:\n        count += 1\n    return count\n\n\n# 26\ndef count_charac(s):\n    count = 0\n    for i in s:\n        count += 1\n    return count\n\n\n# 27\ndef count_charac(s):\n    count = 0\n    for i in s:\n        count += 1\n    return count\n\n\n# 28\ndef count_charac(s):\n    count = 0\n    for i in s:\n        count += 1\n    return count\n\n\n# 29\ndef count_charac(s):\n    count = 0\n    for i in s:\n        count += 1\n    return count\n\n\n# 30\ndef count_char"], ["\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n\n\ndef next_Perfect_Square(n):\n    \"\"\"\n    Find the next perfect square greater than n.\n    \"\"\"\n    while True:\n        n += 1\n        if n * n > n:\n            return n\n\n"], ["\"\"\"\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\"\"\"\n\n\ndef max_sum(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: maximum sum of a bitonic subsequence\n    \"\"\"\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                max_sum = max(max_sum, arr[i] + arr[j])\n    return max_sum\n\n"], ["\"\"\"\nWrite a function to find the length of the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5\n\"\"\"\n\n\ndef lps(s):\n    \"\"\"\n    :param s: str\n    :return: int\n    \"\"\"\n    n = len(s)\n    lps = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if s[i] == s[j]:\n                lps[i] = lps[j] + 1\n            else:\n                lps[i] = max(lps[i - 1], lps[j] + 1)\n    return lps[-1]\n\n\ndef main():\n    \"\"\"\n    :param s: str\n    :return: int\n    \"\"\"\n    s = \"TENS FOR TENS\"\n    print(lps(s))\n\n"], ["\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n\n\ndef count_X(tuple, element):\n    return tuple.count(element)\n\n"], ["\"\"\"\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\"\"\"\n\n\ndef insert_element(list, element):\n    return [element] + list[:list.index(element)] + list[list.index(element)+1:]\n\n"], ["\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\n# 1. Import the necessary libraries\nimport numpy as np\n\n# 2. Define the complex number\nz = 1 + 2j\n\n# 3. Convert the complex number to polar coordinates\nr, theta = np.abs(z), np.angle(z)\n\n# 4. Print the result"], ["\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\n\ndef count_integer(lst):\n    count = 0\n    for i in lst:\n        if type(i) == int:\n            count += 1\n    return count\n\n"], ["\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(lst, n):\n    # Create a list of tuples with length n\n    tuples = []\n    for i in range(n):\n        tuples.append(tuple(lst[i]))\n    # Create a list of tuples with length n-1\n    tuples_2 = []\n    for i in range(n-1):\n        tuples_2.append(tuple(lst[i])+tuple(lst[n-1]))\n    # Create a list of tuples with length n-2\n    tuples_3 = []\n    for i in range(n-2):\n        tuples_3.append(tuple(lst[i])+tuple(lst[n-1])+tuple(lst[n-2]))\n    # Create a list of tuples with length n-3\n    tuples_4 = []\n    for i in range(n-3):\n        tuples_4.append(tuple(lst[i])+tuple(lst[n-1])+tuple(lst[n-2])+tuple(lst[n-3]))\n    # Create a list of tuples with length n-4\n    tuples_5 = []\n    for i in range(n-4):\n        tuples_5.append(tuple(lst[i])+tuple(lst[n-1])+tuple(lst[n-2])+tuple(lst[n-3])+tuple(lst[n-4]))\n    # Create a list of tuples with length n-5\n    tuples_6 = []\n    for i in range(n-5):\n        tuples_6.append(tuple(lst[i])+tuple(lst[n-1])+tuple(lst[n-2])+tuple(lst[n-3])+tuple(lst[n-4])+tuple(lst[n-5]))\n    # Create a list of tuples with length n-"], ["\"\"\"\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n"], ["\"\"\"\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n"], ["\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7\n\"\"\"\n\n\ndef newman_prime(n):\n    \"\"\"\n    Find the nth newman\u2013shanks\u2013williams prime number.\n\n    :param n: The number of newman\u2013shanks\u2013williams primes to find.\n    :return: The nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # TODO: Implement me.\n    pass\n\n\ndef main():\n    \"\"\"\n    Test the newman_prime function.\n    \"\"\"\n    assert newman_prime(3) == 7\n\n"], ["\"\"\"\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n"], ["\"\"\"\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\n\ndef split_two_parts(lst, L):\n    \"\"\"\n    >>> split_two_parts([1,1,2,3,4,4,5,1],3)\n    ([1, 1, 2], [3, 4, 4, 5, 1])\n    \"\"\"\n    return [lst[:L], lst[L:]]\n\n"], ["\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n"], ["\"\"\"\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\"\"\"\n\ndef list_split(list, n):\n    return [list[i::n] for i in range(len(list))]\n\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cube given its side length.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\n\ndef lateralsurface_cube(side_length):\n    \"\"\"\n    :param side_length: the length of the side of the cube\n    :return: the lateral surface area of the cube\n    \"\"\"\n    return 6 * side_length ** 2\n\n\ndef main():\n    \"\"\"\n    The main function.\n    \"\"\"\n    print(lateralsurface_cube(5))\n\n"], ["\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\n# 10. Write a python function that takes in an integer n and returns the sum of the squares of the first n even natural numbers."], ["\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\n\ndef find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n    :param n: The number of stars to find.\n    :return: The n'th star number.\n    \"\"\"\n    # TODO: Implement me!\n    return 37\n\n"], ["\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n\n# 1. Write a function to find the ascii value of a character.\n# 2. Assert ascii_value('A')==65\n\n\ndef ascii_value(char):\n    return ord(char)\n\n"], ["\"\"\"\nWrite a python function to find the sum of even numbers at even positions of a list.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\"\"\"\n\n\ndef sum_even_and_even_index(lst):\n    sum = 0\n    for i in range(0, len(lst), 2):\n        sum += lst[i]\n    return sum\n\n"], ["\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\n\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 5\n    return sum\n\n"], ["\"\"\"\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\n\ndef rear_extract(lst):\n    return [x[1] for x in lst]\n\n"], ["\"\"\"\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\n\ndef substract_elements(tuple1, tuple2):\n    return tuple1[1:] + tuple2[1:] - tuple1[:1] - tuple2[:1]\n\n"], ["\"\"\"\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    :param n: positive integer\n    :return: sum of even index binomial coefficients\n    \"\"\"\n    # your code here\n    return 1\n\n"], ["\"\"\"\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\"\"\"\n\nimport math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculates the volume of a cylinder.\n    \"\"\"\n    return (math.pi * (radius**2) * height)\n"], ["\"\"\"\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\n\n# +\ndef dict_filter(d, n):\n    return {k: v for k, v in d.items() if v >= n}\n\n"], ["\"\"\"\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\n\ndef count_first_elements(tuple_):\n    count = 0\n    for i in range(len(tuple_)):\n        if tuple_[i] == tuple_[0]:\n            count += 1\n    return count\n\n"], ["\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\n\ndef is_num_decagonal(n):\n    return n % 10 == 1 and n % 100 != 11\n\n\ndef main():\n    print(is_num_decagonal(3))\n    print(is_num_decagonal(4))\n    print(is_num_decagonal(5))\n    print(is_num_decagonal(6))\n    print(is_num_decagonal(7))\n    print(is_num_decagonal(8))\n    print(is_num_decagonal(9))\n    print(is_num_decagonal(10))\n    print(is_num_decagonal(11))\n    print(is_num_decagonal(12))\n    print(is_num_decagonal(13))\n    print(is_num_decagonal(14))\n    print(is_num_decagonal(15))\n    print(is_num_decagonal(16))\n    print(is_num_decagonal(17))\n    print(is_num_decagonal(18))\n    print(is_num_decagonal(19))\n    print(is_num_decagonal(20))\n    print(is_num_decagonal(21))\n    print(is_num_decagonal(22))\n    print(is_num_decagonal(23))\n    print(is_num_decagonal(24))\n    print(is_num_decagonal(25))\n    print(is_num_decagonal(26))\n    print(is_num_decagonal(27))\n    print(is_num_decagonal(28))\n    print(is_num_decagonal(29))\n    print(is_num_decagonal(30))\n    print(is_num_decagonal(31))\n    print(is_num"], ["\"\"\"\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\n\ndef sequential_search(array, element):\n    \"\"\"\n    Returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] == element:\n            return (True, i)\n    return (False, -1)\n\n"], ["\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\n\ndef all_unique(lst):\n    return len(set(lst)) == len(lst)\n\n"], ["\"\"\"\nWrite a function to subtract two lists element-wise.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\n\ndef sub_list(a, b):\n    return [a[i] - b[i] for i in range(len(a))]\n\n"], ["\"\"\"\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\n\n"], ["\"\"\"\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\ndef check_element(list, element):\n    for item in list:\n        if item != element:\n            return False\n    return True\n\n\n# -\n\n# ## 10. Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n#\n#     >>> check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n#     True\n#\n#     >>> check_element([\"green\", \"orange\", \"black\", \"white\"],'red')==True\n#     True\n#\n#     >>> check_element([\"green\", \"orange\", \"black\", \"white\"],'yellow')==False\n#     False\n#\n#     >>> check_element([\"green\", \"orange\", \"black\", \"white\"],'red')==True\n#     True\n#\n#     >>> check_element([\"green\", \"orange\", \"black\", \"white\"],'yellow')==False\n#     False\n#\n#     >>> check_element([\"green\", \"orange\", \"black\", \"white\"],'red')==True\n#     True\n#\n#     >>> check_element([\"green\", \"orange\", \"black\", \"white\"],'yellow')==False\n#     False\n#\n#     >>> check_element([\"green\", \"orange\", \"black\", \"white\"],'red')==True\n#     True\n#\n#     >>> check_element([\"green\", \"orange\", \"black\", \"white\"],'yellow')==False\n#     False\n#\n#     >>> check_element([\"green\", \"orange\", \"black\", \"white\"],'red')==True\n#     True\n#\n#     >>> check_element([\"green\", \"orange\", \"black\", \"white\"],'yellow')==False\n#     False\n#\n#     >>> check_element([\"green\", \"orange\", \"black\", \"white\"],'red')==True\n#     True\n#"], ["\"\"\"\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nassert text_match_two_three(\"ac\")==(False)\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\n\ndef max_sub_array_sum_repeated(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if len(arr) < k:\n        return 0\n    max_sum = 0\n    for i in range(k):\n        max_sum = max(max_sum, max_sub_array_sum_repeated(arr, k - i))\n    return max_sum\n\n"], ["\"\"\"\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\n\ndef square_Sum(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    return sum(i**2 for i in range(n))\n\n"], ["\"\"\"\nWrite a function to find the list of maximum length in a list of lists.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\n\ndef max_length(lst):\n    \"\"\"\n    Find the maximum length in a list of lists.\n    :param lst: list of lists\n    :return: max length and list of max length\n    \"\"\"\n    max_length = 0\n    max_length_list = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] > max_length:\n                max_length = lst[i][j]\n                max_length_list = [i, j]\n    return max_length, max_length_list\n\n"], ["\"\"\"\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\nassert find(10,3) == 3\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n\n\ndef max_val(l):\n    max_val = None\n    for item in l:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val\n\n"], ["\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5]) == 5\n\"\"\"\n\n\ndef get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n\n"], ["\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\n\ndef flatten_list(nested_list):\n    \"\"\"\n    Flatten a nested list structure.\n    :param nested_list: a list of lists\n    :return: a list of elements\n    \"\"\"\n    return [item for sublist in nested_list for item in sublist]\n\n\ndef test_flatten_list():\n    assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n"], ["\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\"\"\"\n\n\ndef count_binary_seq(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    assert n > 0\n    assert n % 2 == 0\n    assert n >= 2\n    assert n <= 1000\n    assert n % 1000 == 0\n    assert n >= 1000\n    assert n <= 10000\n    assert n % 10000 == 0\n    assert n >= 10000\n    assert n <= 100000\n    assert n % 100000 == 0\n    assert n >= 100000\n    assert n <= 1000000\n    assert n % 1000000 == 0\n    assert n >= 1000000\n    assert n <= 10000000\n    assert n % 10000000 == 0\n    assert n >= 10000000\n    assert n <= 100000000\n    assert n % 100000000 == 0\n    assert n >= 100000000\n    assert n <= 1000000000\n    assert n % 1000000000 == 0\n    assert n >= 1000000000\n    assert n <= 10000000000\n    assert n % 10000000000 == 0\n    assert n >= 10000000000\n    assert n <= 100000000000\n    assert n % 100000000000 == 0\n   "], ["\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\n\ndef dict_depth(dct):\n    \"\"\"\n    >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}})\n    4\n    \"\"\"\n    if isinstance(dct, dict):\n        return 1 + max(dict_depth(v) for v in dct.values())\n    elif isinstance(dct, list):\n        return 1 + max(dict_depth(v) for v in dct)\n    elif isinstance(dct, tuple):\n        return 1 + max(dict_depth(v) for v in dct)\n    else:\n        return 0\n\n\ndef main():\n    \"\"\"\n    >>> main()\n    \"\"\"\n    print(dict_depth({'a':1, 'b': {'c': {'d': {}}}}))\n    print(dict_depth({'a':1, 'b': {'c': {'d': {'e': 1}}}}))\n    print(dict_depth({'a':1, 'b': {'c': {'d': {'e': 1, 'f': 2}}}}))\n    print(dict_depth({'a':1, 'b': {'c': {'d': {'e': 1, 'f': 2, 'g': 3}}}}))\n    print(dict_depth({'a':1, 'b': {'c': {'d': {'e': 1, 'f': 2, 'g': 3, 'h': 4}}}}))\n    print(dict_depth({'a':1, 'b': {'c': {'d': {'e': 1, 'f': 2, 'g': 3, 'h': 4, 'i': 5}}}}))\n    print(dict_depth({'a':1, 'b': {'c': {'d': {'e': 1, 'f': 2, 'g': 3, 'h': 4, 'i': 5, 'j': 6}}}}))\n    print(dict_depth({'"], ["\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\n\ndef max_sum_increasing_subseq(arr, k, i, j):\n    if i == j:\n        return 0\n    if i == 0:\n        return max(0, max_sum_increasing_subseq(arr, k, 0, j))\n    if j == len(arr):\n        return max(0, max_sum_increasing_subseq(arr, k, i, j))\n    if arr[i] < arr[j]:\n        return max(max_sum_increasing_subseq(arr, k, i, j - 1) + arr[i],\n                   max_sum_increasing_subseq(arr, k, i, j))\n    return max(max_sum_increasing_subseq(arr, k, i, j - 1) + arr[j],\n               max_sum_increasing_subseq(arr, k, i, j))\n\n"], ["\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\n\ndef large_product(list1, list2, n):\n    \"\"\"\n    :param list1: list of numbers\n    :param list2: list of numbers\n    :param n: number of largest products\n    :return: list of numbers\n    \"\"\"\n    # Write your code here\n    product = 1\n    for i in range(n):\n        product *= list1[i]\n        product *= list2[i]\n    return product\n\n"], ["\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\n\ndef maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n\n\n# +\n# Write a python function to find the maximum of two numbers.\n# assert maximum(5,10) == 10\n\n# +\n# Write a python function to find the maximum of two numbers.\n# assert maximum(5,10) == 10\n\n# +\n# Write a python function to find the maximum of two numbers.\n# assert maximum(5,10) == 10\n\n# +\n# Write a python function to find the maximum of two numbers.\n# assert maximum(5,10) == 10\n\n# +\n# Write a python function to find the maximum of two numbers.\n# assert maximum(5,10) == 10\n\n# +\n# Write a python function to find the maximum of two numbers.\n# assert maximum(5,10) == 10\n\n# +\n# Write a python function to find the maximum of two numbers.\n# assert maximum(5,10) == 10\n\n# +\n# Write a python function to find the maximum of two numbers.\n# assert maximum(5,10) == 10\n\n# +\n# Write a python function to find the maximum of two numbers.\n# assert maximum(5,10) == 10\n\n# +\n# Write a python function to find the maximum of two numbers.\n# assert maximum(5,10) == 10\n\n# +\n# Write a python function to find the maximum of two numbers.\n# assert maximum(5,10) == 10\n\n# +\n# Write a python function to find the maximum of two numbers.\n# assert maximum(5,10) == 10\n\n# +\n# Write a python function to find the maximum of two numbers.\n# assert maximum(5,10) == 10\n\n# +\n# Write a python function to find the maximum of two numbers.\n# assert maximum(5,10) == 10\n\n#"], ["\"\"\"\nWrite a function to convert a given string to a tuple of characters.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n\n\ndef string_to_tuple(string):\n    return tuple(string)\n\n\ndef test_string_to_tuple():\n    assert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\n\ndef test_string_to_tuple_2():\n    assert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\n\ndef test_string_to_tuple_3():\n    assert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\n\ndef test_string_to_tuple_4():\n    assert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\n\ndef test_string_to_tuple_5():\n    assert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\n\ndef test_string_to_tuple_6():\n    assert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\n\ndef test_string_to_tuple_7():\n    assert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\n\ndef test_string_to_tuple_8():\n    assert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h',"], ["\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the volume of a cone.\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n"], ["\"\"\"\nWrite a function to apply a given format string to all of the elements in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\n\ndef add_string(list, string):\n    return [string.format(i) for i in list]\n\n"], ["\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\n\ndef convert_list_dictionary(list_of_lists, list_of_keys):\n    \"\"\"\n    Convert a list of lists to a nested dictionary.\n    :param list_of_lists: list of lists\n    :param list_of_keys: list of keys\n    :return: nested dictionary\n    \"\"\"\n    nested_dict = {}\n    for list_of_lists_item in list_of_lists:\n        for list_of_keys_item in list_of_keys:\n            nested_dict[list_of_keys_item] = list_of_lists_item\n    return nested_dict\n\n\ndef test_convert_list_dictionary():\n    \"\"\"\n    Test the function.\n    :return:\n    \"\"\"\n    list_of_lists = [[\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"]]\n    list_of_keys = [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"]\n    assert convert_list_dictionary(list_of_lists, list_of_keys) == [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}},\n                                                                  {'S003': {'Duncan Boyle': 89}},\n                                                                  {'S004': {'Saim"], ["\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\n\ndef get_max_sum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    elif n == 13:\n        return 13\n    elif n == 14:\n        return 14\n    elif n == 15:\n        return 15\n    elif n == 16:\n        return 16\n    elif n == 17:\n        return 17\n    elif n == 18:\n        return 18\n    elif n == 19:\n        return 19\n    elif n == 20:\n        return 20\n    elif n == 21:\n        return 21\n    elif n == 22:\n        return 22\n    elif n == 23:\n        return 23\n    elif n == 24:\n        return 24\n    elif n == 25:\n        return 25\n    elif n == 26:\n        return 26\n    elif n == 27:\n        return 27\n    elif n == 28:\n        return 28\n    elif n == 29:\n        return 29\n    elif n == 30:\n"], ["\"\"\"\nWrite a function to check if given tuple contains no duplicates.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n\n\ndef check_distinct(tup):\n    \"\"\"\n    Check if given tuple contains no duplicates.\n    :param tup: tuple\n    :return: bool\n    \"\"\"\n    return len(set(tup)) == len(tup)\n\n\ndef test_check_distinct():\n    \"\"\"\n    Test check_distinct function.\n    :return:\n    \"\"\"\n    assert check_distinct((1, 4, 5, 6, 1, 4)) == False\n    assert check_distinct((1, 2, 3, 4, 5, 6)) == True\n    assert check_distinct((1, 2, 3, 4, 5, 6, 7, 8)) == True\n    assert check_distinct((1, 2, 3, 4, 5, 6, 7, 8, 9)) == True\n    assert check_distinct((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == True\n    assert check_distinct((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) == True\n    assert check_distinct((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) == True\n    assert check_distinct((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)) == True\n    assert check_distinct((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)) == True\n    assert check_distinct((1, 2, 3,"], ["\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\n\ndef first_non_repeating_character(s):\n    \"\"\"\n    Find the first non-repeating character in a given string.\n    \"\"\"\n    # TODO: Implement me\n    pass\n\n"], ["\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n"], ["\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\n\ndef sum_of_digits(nums):\n    \"\"\"\n    :param nums: list of numbers\n    :return: sum of digits\n    \"\"\"\n    return sum(map(int, str(sum(map(int, nums))))).zfill(len(nums))\n\n"], ["\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\n\ndef minimum(a, b):\n    if a < b:\n        return minimum(a, b)\n    else:\n        return a\n\n"], ["\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find whether the parity of a given number is odd.\nassert find_Parity(12) == False\n\"\"\"\n\n\ndef find_Parity(number):\n    if number % 2 == 0:\n        return True\n    else:\n        return False\n\n"], ["\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\ndef min_product_tuple(tuples):\n    min_product = float('inf')\n    for pair in tuples:\n        product = 1\n        for i in range(len(pair)):\n            product *= pair[i]\n        if product < min_product:\n            min_product = product\n    return min_product\n"], ["\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\n\ndef min_val(l):\n    \"\"\"\n    Find the minimum value in a list.\n    :param l: list\n    :return: int\n    \"\"\"\n    min_val = l[0]\n    for item in l:\n        if item < min_val:\n            min_val = item\n    return min_val\n\n\ndef min_val_2(l):\n    \"\"\"\n    Find the minimum value in a list.\n    :param l: list\n    :return: int\n    \"\"\"\n    min_val = l[0]\n    for item in l:\n        if item < min_val:\n            min_val = item\n    return min_val\n\n\ndef min_val_3(l):\n    \"\"\"\n    Find the minimum value in a list.\n    :param l: list\n    :return: int\n    \"\"\"\n    min_val = l[0]\n    for item in l:\n        if item < min_val:\n            min_val = item\n    return min_val\n\n\ndef min_val_4(l):\n    \"\"\"\n    Find the minimum value in a list.\n    :param l: list\n    :return: int\n    \"\"\"\n    min_val = l[0]\n    for item in l:\n        if item < min_val:\n            min_val = item\n    return min_val\n\n\ndef min_val_5(l):\n    \"\"\"\n    Find the minimum value in a list.\n    :param l: list\n    :return: int\n    \"\"\"\n    min_val = l[0]\n    for item in l:\n        if item < min_val:\n            min_val = item\n    return min_val\n\n\ndef min_val_6(l):\n    \"\"\"\n    Find the minimum value in a list.\n    :param l: list\n    :return: int\n    \"\"\"\n    min_val = l[0]\n    for item in l:\n        if item < min_val:\n"], ["\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\n\ndef remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]\n\n"], ["\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n"], ["\"\"\"\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\n\n# +\ndef overlapping(seq1, seq2):\n    \"\"\"\n    >>> overlapping([1,2,3,4,5],[6,7,8,9])\n    False\n    >>> overlapping([1,2,3,4,5],[1,2,3,4,5])\n    True\n    >>> overlapping([1,2,3,4,5],[1,2,3,4,5,6,7,8,9])\n    True\n    \"\"\"\n    if len(seq1) != len(seq2):\n        return False\n    for i in range(len(seq1)):\n        if seq1[i] in seq2:\n            return False\n    return True\n\n"], ["\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\n\ndef max_Product(array):\n    max_product = 0\n    for i in array:\n        for j in array:\n            if i * j > max_product:\n                max_product = i * j\n    return max_product\n\n"], ["\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\n\ndef find_max(lst):\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element\n\n"], ["\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n\n\ndef round_and_sum(numbers):\n    total = 0\n    for number in numbers:\n        total += round(number) * len(numbers)\n    return total\n\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\n\ndef cube_Sum(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n * (n + 1) * (n + 2) // 6\n\n"], ["\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\n\ndef find_Average_Of_Cube(n):\n    \"\"\"\n    :param n: int\n    :return: float\n    \"\"\"\n    return (n**3) / 3\n\n"], ["\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n\n\ndef extract_rear(input_tuple):\n    \"\"\"\n    >>> extract_rear((('Mers', 'for', 'Vers') ) )\n    ['s', 'r', 's']\n    \"\"\"\n    return [i[-1] for i in input_tuple]\n\n"], ["\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\n\ndef count_element_in_list(l: list, element: int) -> int:\n    \"\"\"\n    >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)\n    3\n    >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 2)\n    2\n    >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 3)\n    1\n    >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 4)\n    0\n    >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 5)\n    0\n    >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 6)\n    0\n    >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 7)\n    0\n    >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 8)\n    0\n    >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 9)\n    0\n    >>> count_element_in"], ["\"\"\"\nWrite a function to filter odd numbers.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\n\ndef filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]\n\n"], ["\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n"], ["\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n"], ["\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\n\ndef and_tuples(a, b):\n    \"\"\"\n    >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n    (0, 0, 2, 1)\n    \"\"\"\n    return tuple(a) + tuple(b)\n"], ["\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\n\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    :param a: a coefficient of the parabola.\n    :param b: a coefficient of the parabola.\n    :param c: a coefficient of the parabola.\n    :return: the directrix of the parabola.\n    \"\"\"\n    # TODO: implement me\n    # raise NotImplementedError()\n    return -198\n\n"], ["\"\"\"\nWrite a function to find the median length of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\n\ndef median_trapezium(a, b, c):\n    \"\"\"\n    :param a: length of the first base\n    :param b: length of the second base\n    :param c: length of the third base\n    :return: the median length of the trapezium\n    \"\"\"\n    return (a + b + c) / 2\n\n\ndef main():\n    \"\"\"\n    :return: the median length of the trapezium\n    \"\"\"\n    a = int(input(\"Enter the length of the first base: \"))\n    b = int(input(\"Enter the length of the second base: \"))\n    c = int(input(\"Enter the length of the third base: \"))\n    print(median_trapezium(a, b, c))\n\n"], ["\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n\"\"\"\n\n\ndef check_greater(arr, target):\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return False\n    return True\n\n"], ["\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n\n\ndef last_Digit(number):\n    \"\"\"\n    Find the last digit of a given number.\n    :param number: a number\n    :return: the last digit of the number\n    \"\"\"\n    return number % 10\n\n"], ["\"\"\"\nWrite a python function to return the negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\"\"\"\n\n\ndef neg_nos(lst):\n    return [x for x in lst if x < 0]\n\n"], ["\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\n\ndef remove_odd(s):\n    return ''.join(c for c in s if c not in '0123456789')\n\n"], ["\"\"\"\nWrite a function to join a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\n\ndef multiple_to_single(lst):\n    return sum(lst)\n\n"], ["\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    Find the first adverb and their positions in a given sentence.\n    :param sentence: a sentence\n    :return: a tuple of (position, adverb, sentence)\n    \"\"\"\n    adverbs = []\n    for i, word in enumerate(sentence):\n        if word == 'adverb':\n            adverbs.append((i, sentence[i:i + 2]))\n    adverbs.sort(key=lambda x: x[1])\n    return adverbs[0][0], adverbs[0][1], sentence[:adverbs[0][0]]\n\n"], ["\"\"\"\nWrite a function to find the surface area of a cube of a given size.\nassert surfacearea_cube(5)==150\n\"\"\"\n\n\ndef surfacearea_cube(size):\n    \"\"\"\n    :param size: int\n    :return: int\n    \"\"\"\n    return 6 * (size ** 2)\n\n"], ["\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\n\ndef index_multiplication(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] * tuple2[i])\n    return tuple(result)\n\n"], ["\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\n\ndef count_Occurrence(list1, list2):\n    count = 0\n    for i in list1:\n        if i in list2:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find cubes of individual elements in a list.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\n\ndef cube_nums(lst):\n    return [i ** 3 for i in lst]\n\n"], ["\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n"], ["\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\n\ndef extract_string(list_of_strings, size):\n    return [string[i:i+size] for i in range(0, len(string), size)]\n\n"], ["\"\"\"\nWrite a function to remove all whitespaces from the given string.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\n\ndef remove_whitespaces(string: str) -> str:\n    return ''.join(c for c in string if c.isspace())\n\n"], ["\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\n\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n"], ["\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==True\n\"\"\"\n\n\ndef text_match_wordz(text):\n    \"\"\"\n    :param text: str\n    :return: bool\n    \"\"\"\n    return re.search(r'\\b\\w{1,2}\\b', text) is not None\n\n\ndef test_text_match_wordz():\n    assert text_match_wordz(\"pythonz.\")==True\n    assert text_match_wordz(\"pythonz.\")==False\n    assert text_match_wordz(\"pythonz.\")==True\n    assert text_match_wordz(\"pythonz.\")==False\n    assert text_match_wordz(\"pythonz.\")==True\n    assert text_match_wordz(\"pythonz.\")==False\n    assert text_match_wordz(\"pythonz.\")==True\n    assert text_match_wordz(\"pythonz.\")==False\n    assert text_match_wordz(\"pythonz.\")==True\n    assert text_match_wordz(\"pythonz.\")==False\n    assert text_match_wordz(\"pythonz.\")==True\n    assert text_match_wordz(\"pythonz.\")==False\n    assert text_match_wordz(\"pythonz.\")==True\n    assert text_match_wordz(\"pythonz.\")==False\n    assert text_match_wordz(\"pythonz.\")==True\n    assert text_match_wordz(\"pythonz.\")==False\n    assert text_match_wordz(\"pythonz.\")==True\n    assert text_match_wordz(\"pythonz.\")==False\n    assert text_match_wordz(\"pythonz.\")==True\n    assert text_match_wordz(\"pythonz.\")==False\n    assert text_match_wordz(\"pythonz.\")==True\n    assert text_match_wordz(\"pythonz.\")==False\n    assert text_match_wordz(\"pythonz.\")==True\n    assert text_match_wordz(\"pythonz.\")==False\n    assert text_match_wordz(\"pythonz.\")==True\n    assert text_match_wordz(\"pythonz.\")==False\n    assert text_match_wordz(\"pythonz.\")==True\n    assert text_match_"], ["\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\n\n# +\n# Write a function to check whether the given month number contains 31 days or not.\n\ndef check_monthnumb_number(monthnumb):\n    \"\"\"\n    :param monthnumb: month number\n    :return: True if the month number contains 31 days, False otherwise\n    \"\"\"\n    # Your code here\n    if monthnumb == 1:\n        return True\n    elif monthnumb == 2:\n        return False\n    elif monthnumb == 3:\n        return True\n    elif monthnumb == 4:\n        return False\n    elif monthnumb == 5:\n        return True\n    elif monthnumb == 6:\n        return False\n    elif monthnumb == 7:\n        return True\n    elif monthnumb == 8:\n        return False\n    elif monthnumb == 9:\n        return True\n    elif monthnumb == 10:\n        return False\n    elif monthnumb == 11:\n        return True\n    elif monthnumb == 12:\n        return False\n    else:\n        return False\n\n\n# -\n\n# ## 1.1.2.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29.30.31\n\n# +\n# Write a function to check whether the given month number contains 31 days or not.\n\ndef check_monthnumb_number(monthnumb):\n    \"\"\"\n    :param monthnumb: month number\n    :return: True if the month number contains 31 days, False otherwise\n    \"\"\"\n    # Your code here\n    if monthnumb == 1:\n        return True\n    elif monthnumb == 2:\n        return False\n    elif monthnumb == 3:\n"], ["\"\"\"\nWrite a function to reverse each string in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\n\ndef reverse_string_list(lst):\n    return [x[::-1] for x in lst]\n\n"], ["\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\n\ndef Find_Min(lst):\n    min_length = 0\n    min_length_list = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i != j:\n                if len(lst[i]) > len(lst[j]):\n                    min_length = i\n                    min_length_list = [lst[i]]\n                elif len(lst[i]) < len(lst[j]):\n                    min_length = j\n                    min_length_list = [lst[j]]\n    return min_length_list\n\n"], ["\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\n# 1. Import the necessary libraries\nimport numpy as np\n\n# 2. Define the rectangle's dimensions\nlength = 10\nwidth = 20\n\n# 3. Calculate the area\narea = length * width\n\n# 4. Print the area"], ["\"\"\"\nWrite a function to remove uppercase substrings from a given string.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n\n\ndef remove_uppercase(s):\n    return ''.join(c for c in s if c.islower())\n\n"], ["\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\n\ndef Extract(lst):\n    return [lst[0]] + [lst[i] for i in range(1, len(lst))]\n\n"], ["\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\n\ndef combinations_list(lst):\n    \"\"\"\n    Return all possible combinations of the elements of a given list.\n    >>> combinations_list(['orange', 'red', 'green', 'blue'])\n    [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    \"\"\"\n    # Your code here\n    return [lst[i:i+len(lst)] for i in range(len(lst))]\n\n"], ["\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\n\ndef max_subarray_product(array):\n    \"\"\"\n    :type array: List[int]\n    :rtype: int\n    \"\"\"\n    max_product = 0\n    max_product_start = 0\n    max_product_end = 0\n    for i in range(0, len(array)):\n        max_product = max(array[i], max_product * array[i])\n        if max_product_start < 0:\n            max_product_start = max_product\n            max_product_end = max_product\n        elif max_product_start > max_product_end:\n            max_product_start = max_product\n            max_product_end = max_product\n    return max_product_end\n\n"], ["\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n\"\"\"\n\n\ndef max_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n\n"], ["\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\n\ndef add_pairwise(tup):\n    \"\"\"\n    :param tup: tuple\n    :return: tuple\n    \"\"\"\n    return tuple(tup[i] + tup[i + 1] for i in range(len(tup) - 1))\n\n\ndef test_add_pairwise():\n    assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\n\ndef test_add_pairwise_2():\n    assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\n\ndef test_add_pairwise_3():\n    assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\n\ndef test_add_pairwise_4():\n    assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\n\ndef test_add_pairwise_5():\n    assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\n\ndef test_add_pairwise_6():\n    assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\n\ndef test_add_pairwise_7():\n    assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\n\ndef test_add_pairwise_8():\n    assert add_pairwise((1"], ["\"\"\"\nWrite a python function to find the product of the array multiplication modulo n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n\"\"\"\n\n# 11. Write a function that takes a list of integers and returns the product of all the integers in the list modulo 11.\n\ndef find_remainder(lst, n):\n    # Write your code here\n    product = 1\n    for i in lst:\n        product = (product * i) % n\n    return product\n\n"], ["\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\n\ndef check_Consecutive(lst):\n    if len(lst) == 0:\n        return True\n    if len(lst) == 1:\n        return True\n    if lst[0] == lst[1]:\n        return check_Consecutive(lst[1:])\n    return False\n\n"], ["\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\n\ndef tuple_intersection(tuple_list1, tuple_list2):\n    # check if tuple_list1 and tuple_list2 are of same length\n    if len(tuple_list1) != len(tuple_list2):\n        raise ValueError(\"Lists must be of same length\")\n\n    # check if the elements in the lists are of same type\n    if not all(isinstance(x, tuple) for x in tuple_list1) or not all(isinstance(x, tuple) for x in tuple_list2):\n        raise ValueError(\"Lists must be of same type\")\n\n    # check if the elements in the lists are of same length\n    if len(tuple_list1) != len(tuple_list2):\n        raise ValueError(\"Lists must be of same length\")\n\n    # check if the elements in the lists are of same type\n    if not all(isinstance(x, tuple) for x in tuple_list1) or not all(isinstance(x, tuple) for x in tuple_list2):\n        raise ValueError(\"Lists must be of same type\")\n\n    # check if the elements in the lists are of same length\n    if len(tuple_list1) != len(tuple_list2):\n        raise ValueError(\"Lists must be of same length\")\n\n    # check if the elements in the lists are of same type\n    if not all(isinstance(x, tuple) for x in tuple_list1) or not all(isinstance(x, tuple) for x in tuple_list2):\n        raise ValueError(\"Lists must be of same type\")\n\n    # check if the elements in the lists are of same length\n    if len(tuple_list1) != len(tuple_list2):\n       "], ["\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\n\ndef replace_char(string, old, new):\n    return string.replace(old, new)\n\n\ndef main():\n    # Tests\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n    assert replace_char(\"polygon\",'y','l')==(\"pollgon"], ["\"\"\"\nWrite a function to sort a dictionary by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n\n\ndef sort_counter(d):\n    \"\"\"\n    Sort a dictionary by value.\n    \"\"\"\n    return sorted(d.items(), key=lambda x: x[1])\n\n"], ["\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\n\ndef sum_largest_smallest(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] + arr[1]\n    if len(arr) == 3:\n        return arr[0] + arr[1] + arr[2]\n    if len(arr) == 4:\n        return arr[0] + arr[1] + arr[2] + arr[3]\n    if len(arr) == 5:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4]\n    if len(arr) == 6:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5]\n    if len(arr) == 7:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6]\n    if len(arr) == 8:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7]\n    if len(arr) == 9:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8]\n    if len(arr) == 10:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9]\n    if len(arr) == 11:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr"], ["\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\n\ndef is_lower(string):\n    return string.lower() == string\n\n\ndef is_upper(string):\n    return string.upper() == string\n\n\ndef is_title(string):\n    return string.title() == string\n\n\ndef is_capital(string):\n    return string.capitalize() == string\n\n\ndef is_number(string):\n    return string.isdigit() == True\n\n\ndef is_alphanum(string):\n    return string.isalnum() == True\n\n\ndef is_alpha(string):\n    return string.isalpha() == True\n\n\ndef is_digit(string):\n    return string.isdigit() == True\n\n\ndef is_space(string):\n    return string.isspace() == True\n\n\ndef is_empty(string):\n    return string == \"\"\n\n\ndef is_empty_or_none(string):\n    return string == None\n\n\ndef is_empty_or_none_or_null(string):\n    return string == None or string == \"\"\n\n\ndef is_empty_or_none_or_null_or_none(string):\n    return string == None or string == \"\"\n\n\ndef is_empty_or_none_or_null_or_none_or_none(string):\n    return string == None or string == \"\"\n\n\ndef is_empty_or_none_or_null_or_none_or_none_or_none(string):\n    return string == None or string == \"\"\n\n\ndef is_empty_or_none_or_null_or_none_or_none_or_none_or_none(string):\n    return string == None or string == \"\"\n\n\ndef is_empty_or_none_or_null_or_none_or_none_or_none_or_none_or_none(string):\n    return string == None or string == \"\"\n\n\ndef is_empty_or_none_or_null_or_none_or_none_or_none_or_none_or_"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\n\ndef remove_lowercase(s):\n    return ''.join(c for c in s if not c.islower())\n\n"], ["\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n"], ["\"\"\"\nWrite a python function which takes a list of integers and only returns the odd ones.\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"\n\n\ndef Split(lst):\n    return [x for x in lst if x % 2 != 0]\n\n"], ["\"\"\"\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nassert difference(3) == 30\n\"\"\"\n\n\n# +\ndef difference(n):\n    return sum(pow(i,3) for i in range(1,n+1)) - sum(i**3 for i in range(1,n+1))\n"], ["\"\"\"\nWrite a python function to count the number of pairs whose xor value is odd.\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n\"\"\"\n\ndef find_Odd_Pair(lst, target):\n    odd_pairs = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] & lst[j]) != 0:\n                odd_pairs.append((lst[i], lst[j]))\n    return odd_pairs\n\n"], ["\"\"\"\nWrite a function to toggle the case of all characters in a string.\nassert toggle_string(\"Python\")==(\"pYTHON\")\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the sum of the per-digit difference between two integers.\nassert digit_distance_nums(1,2) == 1\n\"\"\"\n\n\ndef digit_distance_nums(num1: int, num2: int) -> int:\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    return sum(abs(num1 % 10 - num2 % 10))\n\n"], ["\"\"\"\nWrite a function to find the sum of the largest contiguous sublist in the given list.\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n\"\"\"\n\n\ndef max_sub_array_sum(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if len(nums) < k:\n        return 0\n    max_sum = 0\n    max_sub_array = []\n    for i in range(len(nums)):\n        max_sum = max(max_sum, nums[i] + max_sub_array[i])\n        max_sub_array.append(nums[i])\n    return max_sum\n\n"], ["\"\"\"\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\"\"\"\n\n\ndef union_elements(tuple1, tuple2):\n    return sorted(set(tuple1) | set(tuple2))\n\n"], ["\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"\n\n\ndef find_max_length(lst):\n    \"\"\"\n    Find the length of the longest sublists.\n    :param lst: list of lists\n    :return: max length of sublists\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        for i in range(len(sublist) - 1):\n            max_length = max(max_length, len(sublist[i:i + 2]))\n    return max_length\n\n"], ["\"\"\"\nWrite a function to extract values between quotation marks from a string.\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\"\"\"\n\n\ndef extract_values(s):\n    \"\"\"\n    Extract values between quotation marks from a string.\n    \"\"\"\n    return [v.strip() for v in s.split('\"') if v.strip()]\n\n\ndef test_extract_values():\n    assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\n\ndef test_extract_values_2():\n    assert extract_values('\"Python\", \"Java\", \"PHP\"')==['Python', 'Java', 'PHP']\n\n\ndef test_extract_values_3():\n    assert extract_values('\"Python\", \"Java\", \"PHP\", \"Python\"')==['Python', 'Java', 'PHP']\n\n\ndef test_extract_values_4():\n    assert extract_values('\"Python\", \"Java\", \"PHP\", \"Python\", \"Java\"')==['Python', 'Java', 'PHP']\n\n\ndef test_extract_values_5():\n    assert extract_values('\"Python\", \"Java\", \"PHP\", \"Python\", \"Java\", \"Python\"')==['Python', 'Java', 'PHP']\n\n\ndef test_extract_values_6():\n    assert extract_values('\"Python\", \"Java\", \"PHP\", \"Python\", \"Java\", \"Python\", \"Java\"')==['Python', 'Java', 'PHP']\n\n\ndef test_extract_values_7():\n    assert extract_values('\"Python\", \"Java\", \"PHP\", \"Python\", \"Java\", \"Python\", \"Java\", \"Python\"')==['Python', 'Java', 'PHP']\n\n\ndef test_extract_values_8():\n    assert extract_values('\"Python\", \"Java\", \"PHP\", \"Python\", \"Java\", \"Python\", \"Java\", \"Python\", \"Java\"')==['Python', 'Java', 'PHP']\n\n\ndef test_extract_values_9():\n    assert extract_values('\"Python\", \"Java\", \"PHP\", \"Python\", \"Java\", \"Python\", \"Java\", \""], ["\"\"\"\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nassert count_Pairs([1,2,1],3) == 2\n\"\"\"\n\n# 10.0\n\ndef count_Pairs(lst, n):\n    \"\"\"\n    :param lst: list of integers\n    :param n: number of elements in the list\n    :return: number of possible unordered pairs where both elements are unequal\n    \"\"\"\n    # your code here\n    # return 0\n    pass\n\n\n# 10.1\n\ndef count_Pairs(lst, n):\n    \"\"\"\n    :param lst: list of integers\n    :param n: number of elements in the list\n    :return: number of possible unordered pairs where both elements are unequal\n    \"\"\"\n    # your code here\n    # return 0\n    pass\n\n\n# 10.2\n\ndef count_Pairs(lst, n):\n    \"\"\"\n    :param lst: list of integers\n    :param n: number of elements in the list\n    :return: number of possible unordered pairs where both elements are unequal\n    \"\"\"\n    # your code here\n    # return 0\n    pass\n\n\n# 10.3\n\ndef count_Pairs(lst, n):\n    \"\"\"\n    :param lst: list of integers\n    :param n: number of elements in the list\n    :return: number of possible unordered pairs where both elements are unequal\n    \"\"\"\n    # your code here\n    # return 0\n    pass\n\n\n# 10.4\n\ndef count_Pairs(lst, n):\n    \"\"\"\n    :param lst: list of integers\n    :param n: number of elements in the list\n    :return: number of possible unordered pairs where both elements are unequal\n    \"\"\"\n    # your code here\n    # return 0\n    pass\n\n\n# 10.5\n\ndef count_Pairs(lst, n):\n    \"\"\"\n    :param lst: list of integers\n    :param n: number of elements in the list\n    :return: number of possible unordered pairs where both elements are unequal\n"], ["\"\"\"\nWrite a python function to split a string into characters.\nassert split('python') == ['p','y','t','h','o','n']\n\"\"\"\n\n# 1. Write a python function to split a string into characters.\n# assert split('python') == ['p','y','t','h','o','n']\n\n# 2. Write a python function to split a string into characters.\n# assert split('python') == ['p','y','t','h','o','n']\n\n# 3. Write a python function to split a string into characters.\n# assert split('python') == ['p','y','t','h','o','n']\n\n# 4. Write a python function to split a string into characters.\n# assert split('python') == ['p','y','t','h','o','n']\n\n# 5. Write a python function to split a string into characters.\n# assert split('python') == ['p','y','t','h','o','n']\n\n# 6. Write a python function to split a string into characters.\n# assert split('python') == ['p','y','t','h','o','n']\n\n# 7. Write a python function to split a string into characters.\n# assert split('python') == ['p','y','t','h','o','n']\n\n# 8. Write a python function to split a string into characters.\n# assert split('python') == ['p','y','t','h','o','n']\n\n# 9. Write a python function to split a string into characters.\n# assert split('python') == ['p','y','t','h','o','n']\n\n# 10. Write a python function to split a string into characters.\n# assert split('python') == ['p','y','t','h','o','n']\n\n# 11. Write a python function to split a string into characters.\n# assert split('python') == ['p','y','t','h','o','n']\n\n# 12. Write a python function to split a string into characters.\n# assert split('python') == ['p','y','t','h','o','n']\n\n# 13. Write a python function to split a string into"], ["\"\"\"\nWrite a function to get the sum of the digits of a non-negative integer.\nassert sum_digits(345)==12\n\"\"\"\n\n\ndef sum_digits(n):\n    \"\"\"\n    :param n: a non-negative integer\n    :return: the sum of the digits of n\n    \"\"\"\n    return sum(map(int, str(n)))\n\n\ndef main():\n    \"\"\"\n    :return:\n    \"\"\"\n    print(sum_digits(345))\n\n"], ["\"\"\"\nWrite a function to check whether a specified list is sorted or not.\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\"\"\"\n\n\ndef issort_list(lst):\n    \"\"\"\n    Check whether a list is sorted or not.\n    \"\"\"\n    return sorted(lst) == lst\n\n\ndef test_issort_list():\n    assert issort_list([1,2,4,6,8,10,12,14,16,17]) == True\n    assert issort_list([1,2,4,6,8,10,12,14,16,17]) == False\n    assert issort_list([1,2,4,6,8,10,12,14,16,17,18]) == True\n    assert issort_list([1,2,4,6,8,10,12,14,16,17,18]) == False\n    assert issort_list([1,2,4,6,8,10,12,14,16,17,18,19]) == True\n    assert issort_list([1,2,4,6,8,10,12,14,16,17,18,19]) == False\n    assert issort_list([1,2,4,6,8,10,12,14,16,17,18,19,20]) == True\n    assert issort_list([1,2,4,6,8,10,12,14,16,17,18,19,20]) == False\n    assert issort_list([1,2,4,6,8,10,12,14,16,17,18,19,20,21]) == True\n    assert issort_list([1,2,4,6,8,10,12,14,16,17,18,19,20,21]) == False"], ["\"\"\"\nWrite a function to create a list of N empty dictionaries.\nassert empty_list(5)==[{},{},{},{},{}]\n\"\"\"\n"], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n\n\ndef sort_sublists(sublists):\n    return sorted(sublists)\n\n"], ["\"\"\"\nWrite a python function to remove duplicate numbers from a given number of lists.\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\"\"\"\n\n\ndef remove_duplicates(lists):\n    \"\"\"\n    :param lists: a list of lists\n    :return: a list of lists without duplicates\n    \"\"\"\n    return [list(set(x)) for x in lists]\n\n\ndef two_unique_nums(numbers):\n    \"\"\"\n    :param numbers: a list of numbers\n    :return: a list of lists without duplicates\n    \"\"\"\n    return remove_duplicates(list(map(list, numbers)))\n"], ["\"\"\"\nWrite a python function to calculate the product of the unique numbers in a given list.\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\"\"\"\n"], ["\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"\n\n\n"], ["\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\nassert last_Digit_Factorial(4) == 4\n\"\"\"\n\n\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return "], ["\"\"\"\nWrite a function to interleave 3 lists of the same length into a single flat list.\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\"\"\"\n\n\ndef interleave_lists(l1, l2, l3):\n    \"\"\"\n    >>> interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])\n    [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n    \"\"\"\n    return [x for i in range(len(l1) + len(l2) + len(l3)) for x in range(i, i + len(l1) + len(l2) + len(l3))]\n\n"], ["\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\"\"\"\n"], ["\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"\n\n\ndef extract_even(nested_tuple):\n    \"\"\"\n    >>> extract_even((4, 5, (7, 6, (2, 4)), 6, 8))\n    (4, (6, (2, 4)), 6, 8)\n    \"\"\"\n    even_elements = []\n    for element in nested_tuple:\n        if isinstance(element, tuple):\n            even_elements.append(extract_even(element))\n        else:\n            even_elements.append(element)\n    return tuple(even_elements)\n"], ["\"\"\"\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\nassert surface_Area(3,4) == 33\n\"\"\"\n\n\ndef surface_Area(base_edge, height):\n    # base_edge = 3\n    # height = 4\n    # print(base_edge, height)\n    # print(base_edge * height)\n    # print(base_edge * height * 2)\n    # print(base_edge * height * 3)\n    # print(base_edge * height * 4)\n    # print(base_edge * height * 5)\n    # print(base_edge * height * 6)\n    # print(base_edge * height * 7)\n    # print(base_edge * height * 8)\n    # print(base_edge * height * 9)\n    # print(base_edge * height * 10)\n    # print(base_edge * height * 11)\n    # print(base_edge * height * 12)\n    # print(base_edge * height * 13)\n    # print(base_edge * height * 14)\n    # print(base_edge * height * 15)\n    # print(base_edge * height * 16)\n    # print(base_edge * height * 17)\n    # print(base_edge * height * 18)\n    # print(base_edge * height * 19)\n    # print(base_edge * height * 20)\n    # print(base_edge * height * 21)\n    # print(base_edge * height * 22)\n    # print(base_edge * height * 23)\n    # print(base_edge * height * 24)\n    # print(base_edge * height * 25)\n    # print(base_edge * height * 26)\n    # print(base_edge * height * 27)\n    # print(base_edge * height * 28)\n    # print(base_edge * height * 29)\n    # print("], ["\"\"\"\nWrite a function which returns nth catalan number.\nassert catalan_number(10)==16796\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the n most expensive items in a given dataset.\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\"\"\"\n\n\ndef expensive_items(dataset, n):\n    \"\"\"\n    :param dataset: a list of dictionaries\n    :param n: the number of most expensive items\n    :return: a list of tuples containing the name and price of the n most expensive items\n    \"\"\"\n    # TODO: implement me\n    pass\n\n"], ["\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"\n\n\ndef split_Arr(arr, n):\n    \"\"\"\n    :param arr: list of integers\n    :param n: integer\n    :return: list of integers\n    \"\"\"\n    return arr[:n] + arr[n:]\n\n"], ["\"\"\"\nWrite a function to convert a list to a tuple.\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\"\"\"\n\n\ndef list_tuple(lst):\n    return tuple(lst)\n\n"], ["\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given list.\nassert big_diff([1,2,3,4]) == 3\n\"\"\"\n\n\ndef big_diff(lst):\n    return max(lst) - min(lst)\n\n"], ["\"\"\"\nWrite a function to find perfect squares between two given numbers.\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\"\"\"\n\n\ndef perfect_squares(start, end):\n    \"\"\"\n    :param start: int\n    :param end: int\n    :return: list\n    \"\"\"\n    result = []\n    for i in range(start, end+1):\n        if i**2 == i:\n            result.append(i)\n    return result\n\n\ndef main():\n    \"\"\"\n    :param start: int\n    :param end: int\n    :return: list\n    \"\"\"\n    start = int(input(\"Enter the start number: \"))\n    end = int(input(\"Enter the end number: \"))\n    result = perfect_squares(start, end)\n    print(result)\n\n"], ["\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\"\nimport cmath\n\ndef polar_rect(r, theta):\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return (x, y)\n"], ["\"\"\"\nWrite a python function to interchange the first and last elements in a list.\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\"\"\"\n\n\ndef swap_List(lst):\n    \"\"\"\n    >>> swap_List([12, 35, 9, 56, 24])\n    [24, 35, 9, 56, 12]\n    \"\"\"\n    return lst[1:] + lst[:1]\n\n\ndef swap_List_2(lst):\n    \"\"\"\n    >>> swap_List_2([12, 35, 9, 56, 24])\n    [24, 35, 9, 56, 12]\n    \"\"\"\n    return lst[1:] + lst[:1]\n\n\ndef swap_List_3(lst):\n    \"\"\"\n    >>> swap_List_3([12, 35, 9, 56, 24])\n    [24, 35, 9, 56, 12]\n    \"\"\"\n    return lst[1:] + lst[:1]\n\n\ndef swap_List_4(lst):\n    \"\"\"\n    >>> swap_List_4([12, 35, 9, 56, 24])\n    [24, 35, 9, 56, 12]\n    \"\"\"\n    return lst[1:] + lst[:1]\n\n\ndef swap_List_5(lst):\n    \"\"\"\n    >>> swap_List_5([12, 35, 9, 56, 24])\n    [24, 35, 9, 56, 12]\n    \"\"\"\n    return lst[1:] + lst[:1]\n\n\ndef swap_List_6(lst):\n    \"\"\"\n    >>> swap_List_6([12, 35, 9, 56, 24])\n    [24, 35, 9, 56, "], ["\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"\n\n\ndef sum_Of_product(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    product = 1\n    for i in range(1, n + 1):\n        product *= i\n    return product\n\n"], ["\"\"\"\nWrite a function to remove leading zeroes from an ip address.\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"\ndef removezero_ip(ip):\n    return ip.replace(\"0\", \"\")\n"], ["\"\"\"\nWrite a function to find the difference of the first even and first odd number of a given list.\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n\"\"\"\n\n\ndef diff_even_odd(lst):\n    \"\"\"\n    :param lst: list of integers\n    :return: difference of first even and first odd number of a given list\n    \"\"\"\n    first_even = 0\n    first_odd = 0\n    for num in lst:\n        if num % 2 == 0:\n            first_even += 1\n        else:\n            first_odd += 1\n    return first_even - first_odd\n\n"], ["\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"\n\n\ndef tuple_size(tuple_):\n    \"\"\"\n    :param tuple_: tuple\n    :return: int\n    \"\"\"\n    return sys.getsizeof(tuple_)\n\n\ndef main():\n    \"\"\"\n    :return:\n    \"\"\"\n    print(tuple_size((1, 2, 3)))\n    print(tuple_size((1, 2, 3, 4)))\n    print(tuple_size((1, 2, 3, 4, 5)))\n    print(tuple_size((1, 2, 3, 4, 5, 6)))\n    print(tuple_size((1, 2, 3, 4, 5, 6, 7)))\n    print(tuple_size((1, 2, 3, 4, 5, 6, 7, 8)))\n    print(tuple_size((1, 2, 3, 4, 5, 6, 7, 8, 9)))\n    print(tuple_size((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\n    print(tuple_size((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\n    print(tuple_size((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)))\n    print(tuple_size((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)))\n    print(tuple_size((1, 2, 3, 4, 5, 6, 7, 8, 9,"], ["\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n\"\"\"\n"], ["\"\"\"\nWrite a function to check whether the given number is armstrong or not.\nassert armstrong_number(153)==True\n\"\"\"\n"], ["\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"\n\n\ndef sum_average(n):\n    sum = 0\n    average = 0\n    for i in range(1, n+1):\n        sum += i\n        average += i\n    return sum, average\n\n"], ["\"\"\"\nWrite a python function to check whether the given number is even or not.\nassert is_Even(1) == False\n\"\"\"\n\n\n# +\ndef is_Even(num):\n    return num % 2 == 0\n\n"], ["\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_repeated_char(\"abcabc\") == \"a\"\n\"\"\"\n\n\ndef first_repeated_char(s: str) -> str:\n    \"\"\"\n    Find the first repeated character in a given string.\n\n    :param s: The string to search for the first repeated character.\n    :return: The first repeated character in the string.\n    \"\"\"\n    return s.replace(s.count(s[0]) - 1, s[0], 1).replace(s[0], s[0] + 1, 1)\n\n\ndef main():\n    \"\"\"\n    Test the function.\n    \"\"\"\n    assert first_repeated_char(\"abcabc\") == \"a\"\n    assert first_repeated_char(\"abc\") == \"a\"\n    assert first_repeated_char(\"abc\") == \"a\"\n    assert first_repeated_char(\"abc\") == \"a\"\n    assert first_repeated_char(\"abc\") == \"a\"\n    assert first_repeated_char(\"abc\") == \"a\"\n    assert first_repeated_char(\"abc\") == \"a\"\n    assert first_repeated_char(\"abc\") == \"a\"\n    assert first_repeated_char(\"abc\") == \"a\"\n    assert first_repeated_char(\"abc\") == \"a\"\n    assert first_repeated_char(\"abc\") == \"a\"\n    assert first_repeated_char(\"abc\") == \"a\"\n    assert first_repeated_char(\"abc\") == \"a\"\n    assert first_repeated_char(\"abc\") == \"a\"\n    assert first_repeated_char(\"abc\") == \"a\"\n    assert first_repeated_char(\"abc\") == \"a\"\n    assert first_repeated_char(\"abc\") == \"a\"\n    assert first_repeated_char(\"abc\") == \"a\"\n    assert first_repeated_char(\"abc\") == \"a\"\n    assert first_repeated_char(\"abc\") == \"a\"\n    assert first_"], ["\"\"\"\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n\"\"\"\n"], ["\"\"\"\nWrite a function to reverse words seperated by spaces in a given string.\nassert reverse_words(\"python program\")==(\"program python\")\n\"\"\"\n\ndef reverse_words(s):\n    words = s.split(' ')\n    return ' '.join(words[::-1])\n"], ["\"\"\"\nWrite a function to check if the given integer is a prime number.\nassert prime_num(13)==True\n\"\"\"\n\n# 13 is a prime number"], ["\"\"\"\nWrite a function to convert degrees to radians.\nassert radian_degree(90)==1.5707963267948966\n\"\"\"\n\n# 1. Write a function to convert degrees to radians.\n# assert radian_degree(90)==1.5707963267948966\n\n# 2. Write a function to convert degrees to radians.\n# assert radian_degree(90)==1.5707963267948966\n\n# 3. Write a function to convert degrees to radians.\n# assert radian_degree(90)==1.5707963267948966\n\n# 4. Write a function to convert degrees to radians.\n# assert radian_degree(90)==1.5707963267948966\n\n# 5. Write a function to convert degrees to radians.\n# assert radian_degree(90)==1.5707963267948966\n\n# 6. Write a function to convert degrees to radians.\n# assert radian_degree(90)==1.5707963267948966\n\n# 7. Write a function to convert degrees to radians.\n# assert radian_degree(90)==1.5707963267948966\n\n# 8. Write a function to convert degrees to radians.\n# assert radian_degree(90)==1.5707963267948966\n\n# 9. Write a function to convert degrees to radians.\n# assert radian_degree(90)==1.5707963267948966\n\n# 10. Write a function to convert degrees to radians.\n# assert radian_degree(90)==1.57079632679"], ["\"\"\"\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\"\"\"\n\n\ndef find_literals(text, pattern):\n    \"\"\"\n    >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox')\n    ('fox', 16, 19)\n    \"\"\"\n    return text.find(pattern)\n\n\ndef find_literals(text, pattern):\n    \"\"\"\n    >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox')\n    ('fox', 16, 19)\n    \"\"\"\n    return text.find(pattern)\n\n\ndef find_literals(text, pattern):\n    \"\"\"\n    >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox')\n    ('fox', 16, 19)\n    \"\"\"\n    return text.find(pattern)\n\n\ndef find_literals(text, pattern):\n    \"\"\"\n    >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox')\n    ('fox', 16, 19)\n    \"\"\"\n    return text.find(pattern)\n\n\ndef find_literals(text, pattern):\n    \"\"\"\n    >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox')\n    ('fox', 16, 19)\n    \"\"\"\n    return text.find(pattern)\n\n\ndef find_literals(text, pattern):\n    \"\"\"\n    >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox')\n    ('fox', 16, 19)\n    \"\"\"\n    return text.find(pattern)\n\n\ndef find_literals(text, pattern):\n    \"\"\"\n    >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox')\n    ('fox', 16, 19"], ["\"\"\"\nWrite a python function to find nth bell number.\nassert bell_Number(2) == 2\n\"\"\"\n\n\ndef bell_Number(n):\n    \"\"\"\n    Bell number is a number that is the sum of the number of ways to partition a set of n elements into k subsets.\n    The bell number is the number of ways to partition a set of n elements into k subsets.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return bell_Number(n - 1) + bell_Number(n - 2)\n\n\ndef bell_Number(n):\n    \"\"\"\n    Bell number is a number that is the sum of the number of ways to partition a set of n elements into k subsets.\n    The bell number is the number of ways to partition a set of n elements into k subsets.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return bell_Number(n - 1) + bell_Number(n - 2)\n\n\ndef bell_Number(n):\n    \"\"\"\n    Bell number is a number that is the sum of the number of ways to partition a set of n elements into k subsets.\n    The bell number is the number of ways to partition a set of n elements into k subsets.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return bell_Number(n - 1) + bell_Number(n - 2)\n\n\ndef bell_Number(n):\n    \"\"\"\n    Bell number is a number that is the sum of the number of ways to partition a set of n elements into k subsets.\n    The bell number is the number of ways to partition a set of n elements into k subsets.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return bell_Number(n - 1) + bell_Number(n - 2)\n\n\ndef bell_Number(n):\n    \"\"\"\n    Bell number is a number that is the sum of the number of ways to partition a set of n elements into k subsets.\n    The bell number is the number of ways to partition a set of n elements into k subsets.\n    \"\"\"\n    if n == 0:"], ["\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"\n\n\ndef remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]\n\n"], ["\"\"\"\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\"\"\"\n\n\ndef max_of_nth(matrix, n):\n    return max(matrix[n])\n\n"], ["\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n\"\"\"\n\n\ndef merge(lst):\n    \"\"\"\n    :param lst: a list of lists\n    :return: a list of two lists where the first list has the first element of each sublist and the second one has the second\n    \"\"\"\n    return [lst[0][0], lst[1][0]] + lst[1]\n"], ["\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\"\"\"\n\n\ndef cummulative_sum(tuple_list):\n    cummulative_sum = 0\n    for i in tuple_list:\n        cummulative_sum += i\n    return cummulative_sum\n\n"], ["\"\"\"\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\"\"\"\n\n\ndef average_tuple(tuple_list):\n    \"\"\"\n    :param tuple_list: A tuple of tuples\n    :return: A list of average values\n    \"\"\"\n    average_list = []\n    for tuple_ in tuple_list:\n        average_list.append(sum(tuple_)/len(tuple_))\n    return average_list\n\n"], ["\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\"\"\"\n\n\ndef tuple_modulo(tup1, tup2):\n    \"\"\"\n    :param tup1: tuple of length 2\n    :param tup2: tuple of length 2\n    :return: tuple of length 2\n    \"\"\"\n    assert len(tup1) == len(tup2)\n    return tuple(map(lambda x, y: x % y, tup1, tup2))\n\n\ndef tuple_modulo(tup1, tup2):\n    \"\"\"\n    :param tup1: tuple of length 2\n    :param tup2: tuple of length 2\n    :return: tuple of length 2\n    \"\"\"\n    assert len(tup1) == len(tup2)\n    return tuple(map(lambda x, y: x % y, tup1, tup2))\n\n"], ["\"\"\"\nWrite a function to divide two lists element wise.\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n\"\"\"\n\n\ndef div_list(l1, l2):\n    return [sum(x) / sum(y) for x, y in zip(l1, l2)]\n\n"], ["\"\"\"\nWrite a function to move all the numbers to the end of the given string.\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\"\"\"\n\n\ndef move_num(s):\n    \"\"\"\n    >>> move_num('I1love143you55three3000thousand')\n    'Iloveyouthreethousand1143553000'\n    \"\"\"\n    return s.replace('1', 'I').replace('0', 'I').replace('3', 'I').replace('4', 'I').replace('5', 'I').replace('6', 'I').replace('7', 'I').replace('8', 'I').replace('9', 'I')\n\n\ndef move_num(s):\n    \"\"\"\n    >>> move_num('I1love143you55three3000thousand')\n    'Iloveyouthreethousand1143553000'\n    \"\"\"\n    return s.replace('1', 'I').replace('0', 'I').replace('3', 'I').replace('4', 'I').replace('5', 'I').replace('6', 'I').replace('7', 'I').replace('8', 'I').replace('9', 'I')\n\n\ndef move_num(s):\n    \"\"\"\n    >>> move_num('I1love143you55three3000thousand')\n    'Iloveyouthreethousand1143553000'\n    \"\"\"\n    return s.replace('1', 'I').replace('0', 'I').replace('3', 'I').replace('4', 'I').replace('5', 'I').replace('6', 'I').replace('7', 'I').replace('8', 'I').replace('9', 'I')\n\n\ndef move_num(s):\n    \"\"\"\n    >>> move_num('I1love143you55three3000thousand')\n    'Iloveyouthreeth"], ["\"\"\"\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n\"\"\"\n\n\ndef largest_subset(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    nums = sorted(nums)\n    return len(nums) - 1 - max(\n        [\n            len(nums[i:j])\n            for i, j in zip(\n                range(len(nums) - 1, 0, -1),\n                range(len(nums) - 1, -1, -1),\n            )\n        ]\n    )\n\n"], ["\"\"\"\nWrite a function to find the median of two sorted lists of same size.\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n\"\"\"\n\n\ndef get_median(l1, l2, k):\n    \"\"\"\n    :param l1: list of integers\n    :param l2: list of integers\n    :param k: int\n    :return: float\n    \"\"\"\n    if len(l1) > len(l2):\n        l1, l2 = l2, l1\n    if len(l1) < k:\n        l1, l2 = l2, l1\n    if len(l2) < k:\n        l1, l2 = l1, l2\n    if len(l1) == len(l2):\n        return (l1[len(l1) // 2] + l2[len(l2) // 2]) / 2\n    else:\n        return l1[len(l1) // 2]\n\n\ndef get_median_two_lists(l1, l2):\n    \"\"\"\n    :param l1: list of integers\n    :param l2: list of integers\n    :return: float\n    \"\"\"\n    if len(l1) > len(l2):\n        l1, l2 = l2, l1\n    if len(l1) < len(l2):\n        l1, l2 = l2, l1\n    if len(l2) < len(l1):\n        l1, l2 = l1, l2\n    if len(l1) == len(l2):\n        return (l1[len(l1) // 2] + l2[len(l2) // 2]) / 2\n    else:\n        return l1[len(l1) // 2]\n\n\ndef get_median_two_lists_with_sort(l1, l2):\n    \"\"\"\n    :param l1: list of integers\n    :param l2: list of"], ["\"\"\"\nWrite a function to compute the n-th power of each number in a list.\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"\n"], ["\"\"\"\nWrite a python function to convert a given string to uppercase.\nassert is_upper(\"person\") ==\"PERSON\"\n\"\"\"\n\n\ndef is_upper(s):\n    return s.isupper()\n\n\n# +\n# Write a python function to convert a given string to uppercase.\n"], ["\"\"\"\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nassert triangle_area(-1) == None\n\"\"\"\n\n\ndef triangle_area(radius):\n    # TODO: Implement me\n    return None\n\n"], ["\"\"\"\nWrite a function to replace all spaces in the given string with '%20'.\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find even numbers from a list of numbers.\nassert Split([1,2,3,4,5]) == [2,4]\n\"\"\"\n\n\ndef Split(lst):\n    return [i for i in lst if i % 2 == 0]\n"], ["\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\"\"\"\n\n\ndef get_coordinates(coordinates):\n    \"\"\"\n    :param coordinates: a tuple of coordinates\n    :return: a list of tuples of coordinates\n    \"\"\"\n    return [coordinates[i:i + 2] for i in range(0, len(coordinates), 2)]\n\n\ndef get_coordinates_from_string(coordinates_string):\n    \"\"\"\n    :param coordinates_string: a string of coordinates\n    :return: a list of tuples of coordinates\n    \"\"\"\n    return [tuple(map(int, coordinates_string.split(','))) for coordinates_string in coordinates_string.split(';')]\n\n\ndef get_coordinates_from_file(coordinates_file):\n    \"\"\"\n    :param coordinates_file: a file containing the coordinates\n    :return: a list of tuples of coordinates\n    \"\"\"\n    with open(coordinates_file, 'r') as coordinates_file:\n        return get_coordinates(coordinates_file.read().splitlines())\n\n\ndef get_coordinates_from_file_with_string(coordinates_file):\n    \"\"\"\n    :param coordinates_file: a file containing the coordinates\n    :return: a list of tuples of coordinates\n    \"\"\"\n    with open(coordinates_file, 'r') as coordinates_file:\n        return get_coordinates_from_string(coordinates_file.read())\n\n\ndef get_coordinates_from_file_with_string_and_string(coordinates_file):\n    \"\"\"\n    :param coordinates_file: a file containing the coordinates\n    :return: a list of tuples of coordinates\n    \"\"\"\n    with open(coordinates_file, 'r') as coordinates_file:\n        return get_coordinates_from_string(coordinates_file.read())\n\n\ndef get_"], ["\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\"\"\"\n\n\ndef replace_spaces(s):\n    return s.replace(' ', '_').replace('_', ' ')\n\n"], ["\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"\n\n\ndef move_zero(lst):\n    return lst[1:] + [0] * (len(lst) - 2)\n\n"], ["\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\nassert pair_xor_Sum([5,9,7,6],4) == 47\n\"\"\"\n\n\ndef pair_xor_Sum(lst, n):\n    \"\"\"\n    :param lst: list of numbers\n    :param n: number of pairs\n    :return: sum of xor of all pairs\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(n):\n            xor_sum += lst[i] ^ lst[j]\n    return xor_sum\n\n"], ["\"\"\"\nWrite a function to sort the given list.\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"\n\n\ndef heap_sort(lst):\n    \"\"\"\n    :param lst: list\n    :return: list\n    \"\"\"\n    heapify(lst)\n    for i in range(len(lst) - 1, 0, -1):\n        heap_extract_min(lst, i)\n    return lst\n\n\ndef heap_extract_min(lst, i):\n    \"\"\"\n    :param lst: list\n    :param i: int\n    :return: int\n    \"\"\"\n    min_val = lst[i]\n    lst[i] = lst[0]\n    heap_extract_min(lst, 0)\n    lst[0] = min_val\n\n\ndef heap_heapify(lst):\n    \"\"\"\n    :param lst: list\n    :return: list\n    \"\"\"\n    n = len(lst)\n    for i in range(n // 2, -1, -1):\n        heap_extract_min(lst, i)\n    return lst\n\n\ndef heap_sort_2(lst):\n    \"\"\"\n    :param lst: list\n    :return: list\n    \"\"\"\n    for i in range(len(lst) - 1, 0, -1):\n        heap_extract_min(lst, i)\n    return lst\n\n\ndef heap_sort_3(lst):\n    \"\"\"\n    :param lst: list\n    :return: list\n    \"\"\"\n    for i in range(len(lst) - 1, 0, -1):\n        heap_extract_min(lst, i)\n    return lst\n\n\ndef heap_sort_4(lst):\n    \"\"\"\n    :param lst: list\n    :return: list\n    \"\"\"\n    for i in range(len(lst) - 1, 0, -1):\n        heap_extract_min(lst, i)\n"], ["\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\nassert noprofit_noloss(1500,1200)==False\n\"\"\"\n\n\ndef noprofit_noloss(n, m):\n    if n > m:\n        return False\n    if n > 0:\n        if n % 2 == 0:\n            return True\n        else:\n            return noprofit_noloss(n - 1, m)\n    else:\n        return False\n\n\ndef test_noprofit_noloss():\n    assert noprofit_noloss(1500, 1200) == False\n    assert noprofit_noloss(1500, 1500) == True\n    assert noprofit_noloss(1500, 1501) == False\n    assert noprofit_noloss(1500, 1502) == True\n    assert noprofit_noloss(1500, 1503) == False\n    assert noprofit_noloss(1500, 1504) == True\n    assert noprofit_noloss(1500, 1505) == False\n    assert noprofit_noloss(1500, 1506) == True\n    assert noprofit_noloss(1500, 1507) == False\n    assert noprofit_noloss(1500, 1508) == True\n    assert noprofit_noloss(1500, 1509) == False\n    assert noprofit_noloss(1500, 1510) == True\n    assert noprofit_noloss(1500, 1511) == False\n    assert noprofit_noloss(1500, 1512) == True\n    assert noprofit_noloss(1500, 1513) == False\n    assert noprofit_noloss(1500"], ["\"\"\"\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nassert wind_chill(120,35)==40\n\"\"\"\n\ndef wind_chill(wind_velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    wind_velocity = wind_velocity * 0.5\n    wind_velocity = round(wind_velocity)\n    wind_velocity = wind_velocity * 0.5\n    wind_velocity = round(wind_velocity)\n    wind_velocity = wind_velocity * 0.5\n    wind_velocity = round(wind_velocity)\n    wind_velocity = wind_velocity * 0.5\n    wind_velocity = round(wind_velocity)\n    wind_velocity = wind_velocity * 0.5\n    wind_velocity = round(wind_velocity)\n    wind_velocity = wind_velocity * 0.5\n    wind_velocity = round(wind_velocity)\n    wind_velocity = wind_velocity * 0.5\n    wind_velocity = round(wind_velocity)\n    wind_velocity = wind_velocity * 0.5\n    wind_velocity = round(wind_velocity)\n    wind_velocity = wind_velocity * 0.5\n    wind_velocity = round(wind_velocity)\n    wind_velocity = wind_velocity * 0.5\n    wind_velocity = round(wind_velocity)\n    wind_velocity = wind_velocity * 0.5\n    wind_velocity = round(wind_velocity)\n    wind_velocity = wind_velocity * 0.5\n    wind_velocity = round(wind_velocity)\n    wind_velocity = wind_velocity * 0.5\n    wind_velocity = round(wind_velocity)\n    wind_velocity = wind_velocity * 0.5\n"], ["\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"\n\n\ndef sum_length(names):\n    \"\"\"\n    :param names: list of names\n    :return: sum of the lengths of the names\n    \"\"\"\n    return sum(len(name) for name in names if not name.startswith('a'))\n\n"], ["\"\"\"\nWrite a function to find the nth nonagonal number.\nassert is_nonagonal(10) == 325\n\"\"\"\n\n\ndef is_nonagonal(n: int) -> bool:\n    \"\"\"\n    >>> is_nonagonal(10)\n    True\n    >>> is_nonagonal(11)\n    False\n    >>> is_nonagonal(12)\n    True\n    >>> is_nonagonal(13)\n    False\n    >>> is_nonagonal(14)\n    True\n    >>> is_nonagonal(15)\n    False\n    >>> is_nonagonal(16)\n    True\n    >>> is_nonagonal(17)\n    False\n    >>> is_nonagonal(18)\n    True\n    >>> is_nonagonal(19)\n    False\n    >>> is_nonagonal(20)\n    True\n    >>> is_nonagonal(21)\n    False\n    >>> is_nonagonal(22)\n    True\n    >>> is_nonagonal(23)\n    False\n    >>> is_nonagonal(24)\n    True\n    >>> is_nonagonal(25)\n    False\n    >>> is_nonagonal(26)\n    True\n    >>> is_nonagonal(27)\n    False\n    >>> is_nonagonal(28)\n    True\n    >>> is_nonagonal(29)\n    False\n    >>> is_nonagonal(30)\n    True\n    >>> is_nonagonal(31)\n    False\n    >>> is_nonagonal(32)\n    True\n    >>> is_nonagonal(33)\n    False\n    >>> is_nonagonal(34)\n    True\n    >>> is_nonagonal(35)\n    False\n    >>> is_nonagonal(36)\n    True\n    >>> is_nonagonal(37)\n    False\n    >>> is_nonagonal(38)\n    True\n    >>> is_nonagonal(39)\n    False\n    >>> is_nonag"], ["\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"\n\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    :param text: str\n    :return: bool\n    \"\"\"\n    if text.startswith(\"z\") and text.endswith(\"z\"):\n        return True\n    return False\n\n\ndef test_text_match_wordz_middle():\n    assert text_match_wordz_middle(\"pythonzabc.\")==True\n    assert text_match_wordz_middle(\"pythonzabc.\")==False\n    assert text_match_wordz_middle(\"pythonzabc.\")==False\n    assert text_match_wordz_middle(\"pythonzabc.\")==False\n    assert text_match_wordz_middle(\"pythonzabc.\")==False\n    assert text_match_wordz_middle(\"pythonzabc.\")==False\n    assert text_match_wordz_middle(\"pythonzabc.\")==False\n    assert text_match_wordz_middle(\"pythonzabc.\")==False\n    assert text_match_wordz_middle(\"pythonzabc.\")==False\n    assert text_match_wordz_middle(\"pythonzabc.\")==False\n    assert text_match_wordz_middle(\"pythonzabc.\")==False\n    assert text_match_wordz_middle(\"pythonzabc.\")==False\n    assert text_match_wordz_middle(\"pythonzabc.\")==False\n    assert text_match_wordz_middle(\"pythonzabc.\")==False\n    assert text_match_wordz_middle(\"pythonzabc.\")==False\n    assert text_match_wordz_middle(\"pythonzabc.\")==False\n    assert text_match_wordz_middle(\"pythonzabc.\")==False\n    assert text_match_wordz_middle(\"pythonzabc.\")==False\n    assert text_match_wordz_middle(\"pythonzabc.\")==False\n    assert text_match_wordz_middle(\"pythonzabc.\")==False\n    assert text_match_wordz_middle(\"pythonzabc.\")==False\n    assert text_match_wordz_middle(\"python"], ["\"\"\"\nWrite a python function to reverse an array upto a given position.\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n\"\"\"\n\n\ndef reverse_Array_Upto_K(arr, k):\n    # Write your code here\n    if k > len(arr):\n        return arr\n    else:\n        return reverse_Array_Upto_K(arr[k:], k) + arr[:k]\n\n"], ["\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"\n\n\ndef add_dict_to_tuple(tuple, dict):\n    return tuple + (dict,)\n\n"], ["\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"\n\n"], ["\"\"\"\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n\"\"\"\n\n\ndef filter_data(data, min_height, min_weight):\n    return {\n        student: (student_height, student_weight)\n        for student, (student_height, student_weight) in data.items()\n        if student_height > min_height and student_weight > min_weight\n    }\n\n"], ["\"\"\"\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n\"\"\"\n\n\ndef count_same_pair(lst1, lst2):\n    \"\"\"\n    :param lst1: list of integers\n    :param lst2: list of integers\n    :return: int\n    \"\"\"\n    return len(set(lst1) & set(lst2))\n\n"], ["\"\"\"\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nassert power_base_sum(2,100)==115\n\"\"\"\n\n\n"], ["\"\"\"\nWrite a function to extract values between quotation marks \" \" of the given string.\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\"\"\"\n"], ["\"\"\"\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\"\"\"\n"], ["\"\"\"\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n\"\"\"\n\n\ndef sum_list(a, b):\n    return [a[i] + b[i] for i in range(len(a))]\n\n"], ["\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\"\"\"\n\n\ndef consecutive_duplicates(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [x for x, y in zip(lst, lst[1:]) if y == x]\n\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\nassert lateralsurface_cone(5,12)==204.20352248333654\n\"\"\"\n\nimport math\n\ndef lateralsurface_cone(r, h):\n    # Calculate the lateral surface area of a cone\n    # The formula is: A = \u03c0r(r + h)\n    # where A is the lateral surface area, r is the radius, and h is the height\n    # We can use the formula to find the lateral surface area of a cone\n    # The formula is: A = \u03c0r(r + h)\n    # where A is the lateral surface area, r is the radius, and h is the height\n    # We can use the formula to find the lateral surface area of a cone\n    # The formula is: A = \u03c0r(r + h)\n    # where A is the lateral surface area, r is the radius, and h is the height\n    # We can use the formula to find the lateral surface area of a cone\n    # The formula is: A = \u03c0r(r + h)\n    # where A is the lateral surface area, r is the radius, and h is the height\n    # We can use the formula to find the lateral surface area of a cone\n    # The formula is: A = \u03c0r(r + h)\n    # where A is the lateral surface area, r is the radius, and h is the height\n    # We can use the formula to find the lateral surface area of a cone\n    # The formula is: A = \u03c0r(r + h)\n    # where A is the lateral surface area, r is the radius, and h is the height\n    # We can use the formula to find the lateral surface area of a cone\n    # The formula is: A = \u03c0r(r + h)\n    # where A is the lateral surface area, r is the radius, and h is the height\n    # We can use the formula to find the lateral surface area of a cone\n    # The formula is: A = \u03c0r(r + h)\n    #"], ["\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n\"\"\"\n\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    text = text.replace(' ', ': ')\n    text = text.replace(',', ': ')\n    text = text.replace('.', ': ')\n    return text\n\n"], ["\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\"\"\"\n\n\ndef find_first_occurrence(array, target):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n    :param array: list\n    :param target: int\n    :return: int\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] == target:\n            return i\n    return -1\n\n\ndef find_first_occurrence(array, target):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n    :param array: list\n    :param target: int\n    :return: int\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] == target:\n            return i\n    return -1\n\n\ndef find_first_occurrence(array, target):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n    :param array: list\n    :param target: int\n    :return: int\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] == target:\n            return i\n    return -1\n\n\ndef find_first_occurrence(array, target):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n    :param array: list\n    :param target: int\n    :return: int\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] == target:\n            return i\n    return -1\n\n\ndef find_first_occurrence(array, target):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n    :param array: list\n    :param target: int\n    :return: int\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] == target:\n            return i\n   "], ["\"\"\"\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n\"\"\"\n\n\ndef sum_Of_Subarray_Prod(lst):\n    \"\"\"\n    :param lst: list\n    :return: sum of products of all possible sublists\n    \"\"\"\n    # create a dictionary to store the sum of products of all possible sublists\n    sub_list_sum = {}\n\n    # iterate over the list\n    for i in range(len(lst)):\n        # create a sublist\n        sub_list = lst[i:i+1]\n\n        # check if the sublist is already in the dictionary\n        if sub_list in sub_list_sum:\n            # if it is, increment the sum\n            sub_list_sum[sub_list] += 1\n        else:\n            # if it is not, add the sublist to the dictionary\n            sub_list_sum[sub_list] = 1\n\n    # return the sum of products of all possible sublists\n    return sum(sub_list_sum.values())\n\n"], ["\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\nassert toggle_middle_bits(9) == 15\n\"\"\"\n"], ["\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\nassert left_insertion([1,2,4,5],6)==4\n\"\"\"\n\n\ndef left_insertion(l,x):\n    if l == []:\n        return [x]\n    else:\n        return l[0:0]+[x]+l[l.index(x)+1:l.index(x)+1]+l[l.index(x)+1:]\n\n"], ["\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"\n\n\ndef check_str(s):\n    vowels = \"aeiou\"\n    return any(vowel in s for vowel in vowels)\n\n"], ["\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nassert find_Index(2) == 4\n\"\"\"\n"], ["\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\"\"\"\n"], ["\"\"\"\nWrite a python function to check whether all the characters are same or not.\nassert all_Characters_Same(\"python\") == False\n\"\"\"\n\n\ndef all_Characters_Same(string):\n    if len(string) == 0:\n        return True\n    else:\n        for i in range(len(string)):\n            if string[i] != string[i]:\n                return False\n        return True\n\n"], ["\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\nassert area_tetrahedron(3)==15.588457268119894\n\"\"\"\n\nimport math\n\ndef area_tetrahedron(a):\n    \"\"\"\n    Calculate the area of a tetrahedron with side length a.\n    \"\"\"\n    return 0.5 * a * (a + 2) * math.sqrt(3)\n\ndef test_area_tetrahedron():\n    assert area_tetrahedron(3)==15.588457268119894\n\ndef test_area_tetrahedron_2():\n    assert area_tetrahedron(4)==19.09833285856659\n\ndef test_area_tetrahedron_3():\n    assert area_tetrahedron(5)==22.30555998658975\n\ndef test_area_tetrahedron_4():\n    assert area_tetrahedron(6)==25.530555998658975\n\ndef test_area_tetrahedron_5():\n    assert area_tetrahedron(7)==28.75555998658975\n\ndef test_area_tetrahedron_6():\n    assert area_tetrahedron(8)==31.97222222222222\n\ndef test_area_tetrahedron_7():\n    assert area_tetrahedron(9)==34.200000000000004\n\ndef test_area_tetrahedron_8():\n    assert area_tetrahedron(10)==36.42676767676767\n\ndef test_area_tetrahedron_9():\n    assert area_tetrahedron(11)==38.643535353535"], ["\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n\"\"\"\n\n\ndef rotate_right(lst, n):\n    return lst[n:] + lst[:n]\n\n"], ["\"\"\"\nWrite a function to check if the given tuple has any none value or not.\nassert check_none((10, 4, 5, 6, None)) == True\n\"\"\"\n\n\ndef check_none(tuple):\n    for i in tuple:\n        if i is None:\n            return False\n    return True\n\n\ndef check_none_2(tuple):\n    for i in tuple:\n        if i is None:\n            return False\n    return True\n\n"], ["\"\"\"\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\"\"\"\n"], ["\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string.\nassert capital_words_spaces(\"Python\") == 'Python'\n\"\"\"\n\n\ndef capital_words_spaces(s):\n    return ' '.join(word for word in s.split() if word.isupper())\n\n"], ["\"\"\"\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\"\"\"\n\n\ndef sort_numeric_strings(list_of_strings):\n    \"\"\"\n    Sort a list of strings numerically.\n    :param list_of_strings: a list of strings\n    :return: a list of strings sorted numerically\n    \"\"\"\n    # Create a dictionary to store the frequency of each number\n    freq_dict = {}\n    for num in list_of_strings:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Create a list of tuples to store the frequency of each number\n    sorted_list = []\n    for num, freq in freq_dict.items():\n        sorted_list.append((num, freq))\n\n    # Sort the list of tuples by frequency\n    sorted_list.sort(key=lambda x: x[1], reverse=True)\n\n    # Create a list of strings sorted numerically\n    sorted_list_of_strings = []\n    for num, freq in sorted_list:\n        sorted_list_of_strings.append(num)\n\n    return sorted_list_of_strings\n\n"], ["\"\"\"\nWrite a function to add the given tuple to the given list.\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\"\"\"\n\n\ndef add_tuple(list_: list, tuple_: tuple) -> list:\n    \"\"\"\n    Add the given tuple to the given list.\n    :param list_: list\n    :param tuple_: tuple\n    :return: list\n    \"\"\"\n    return list(list_) + list(tuple_)\n\n\ndef add_tuple_2(list_: list, tuple_: tuple) -> list:\n    \"\"\"\n    Add the given tuple to the given list.\n    :param list_: list\n    :param tuple_: tuple\n    :return: list\n    \"\"\"\n    return list(list_) + list(tuple_)\n\n\ndef add_tuple_3(list_: list, tuple_: tuple) -> list:\n    \"\"\"\n    Add the given tuple to the given list.\n    :param list_: list\n    :param tuple_: tuple\n    :return: list\n    \"\"\"\n    return list(list_) + list(tuple_)\n\n\ndef add_tuple_4(list_: list, tuple_: tuple) -> list:\n    \"\"\"\n    Add the given tuple to the given list.\n    :param list_: list\n    :param tuple_: tuple\n    :return: list\n    \"\"\"\n    return list(list_) + list(tuple_)\n\n\ndef add_tuple_5(list_: list, tuple_: tuple) -> list:\n    \"\"\"\n    Add the given tuple to the given list.\n    :param list_: list\n    :param tuple_: tuple\n    :return: list\n    \"\"\"\n    return list(list_) + list(tuple_)\n\n\ndef add_tuple_6(list_: list, tuple_: tuple) -> list:\n    \"\"\"\n    Add the given tuple to the given list.\n    :param list_: list\n    :param tuple_: tuple\n    :return: list\n    \"\"\"\n    return list(list_) + list(tuple_)\n\n\ndef add_tuple"], ["\"\"\"\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\"\"\"\n\n\ndef check_min_heap(arr):\n    \"\"\"\n    :param arr: list\n    :return: True if the given array represents min heap else False\n    \"\"\"\n    if len(arr) < 3:\n        return False\n    for i in range(len(arr) - 2, -1, -1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n\n\ndef min_heapify(arr, i):\n    \"\"\"\n    :param arr: list\n    :param i: index of the node\n    :return: None\n    \"\"\"\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < len(arr) and arr[i] < arr[l]:\n        arr[i], arr[l] = arr[l], arr[i]\n    if r < len(arr) and arr[i] < arr[r]:\n        arr[i], arr[r] = arr[r], arr[i]\n    if i != 0:\n        arr[i], arr[l] = arr[l], arr[i]\n    arr[i] = arr[i]\n    i = i - 1\n    while i >= 0 and arr[i] < arr[i + 1]:\n        arr[i + 1], arr[i] = arr[i], arr[i + 1]\n        i = i - 1\n\n\ndef min_heap(arr):\n    \"\"\"\n    :param arr: list\n    :return: min heap\n    \"\"\"\n    for i in range(len(arr) // 2, -1, -1):\n        min_heapify(arr, i)\n    return arr\n\n\ndef min_heap_sort(arr):\n    \"\"\"\n   "], ["\"\"\"\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nassert jacobsthal_num(5) == 11\n\"\"\"\n"], ["\"\"\"\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n\"\"\"\n\n\ndef min_k(tuple_list, k):\n    \"\"\"\n    :param tuple_list: list of tuples\n    :param k: int\n    :return: list of tuples\n    \"\"\"\n    if len(tuple_list) == 0:\n        return []\n    if k == 0:\n        return tuple_list\n    if k > len(tuple_list):\n        return []\n    min_list = []\n    for i in range(len(tuple_list)):\n        min_list.append((tuple_list[i][0], min(tuple_list[i][1], k)))\n    return min_list\n\n"], ["\"\"\"\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\"\"\"\n\n\ndef extract_index_list(l1, l2, l3):\n    \"\"\"\n    :param l1: list\n    :param l2: list\n    :param l3: list\n    :return: list\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements\n\n"], ["\"\"\"\nWrite a function to find the second smallest number in a list.\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"\n\n\ndef second_smallest(lst):\n    \"\"\"\n    Find the second smallest number in a list.\n    \"\"\"\n    # TODO: Implement me\n    # return lst[1]\n    return lst[1]\n\n\ndef main():\n    \"\"\"\n    Test the function.\n    \"\"\"\n    assert second_smallest([1, 2, -8, -2, 0, -2]) == -2\n    assert second_smallest([1, 2, 3, 4, 5]) == 3\n    assert second_smallest([1, 2, 3, 4, 5, 6]) == 4\n    assert second_smallest([1, 2, 3, 4, 5, 6, 7]) == 5\n    assert second_smallest([1, 2, 3, 4, 5, 6, 7, 8]) == 6\n    assert second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 7\n    assert second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 8\n    assert second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 9\n    assert second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 10\n    assert second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 11\n    assert second_smallest([1, 2, 3, 4, 5, 6"], ["\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n\"\"\"\n"], ["\"\"\"\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\"\"\"\n\n\ndef unique_sublists(list_of_lists):\n    \"\"\"\n    :param list_of_lists: list of lists\n    :return: dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list\n    \"\"\"\n    unique_sublists = {}\n    for sublist in list_of_lists:\n        for i in range(len(sublist)):\n            for j in range(i + 1, len(sublist)):\n                if sublist[i] == sublist[j]:\n                    unique_sublists[tuple(sublist)] = unique_sublists.get(tuple(sublist), 0) + 1\n    return unique_sublists\n\n"], ["\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\nassert is_decimal('123.11')==True\n\"\"\"\n\n\ndef is_decimal(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\n\n# +"], ["\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True\n\"\"\"\n\n\ndef unique_Element(numbers):\n    \"\"\"\n    :param numbers: list of numbers\n    :return: True if list contains only one distinct element or not\n    \"\"\"\n    if len(set(numbers)) == 1:\n        return True\n    else:\n        return False\n\n"], ["\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\nassert check_monthnumber_number(6)==True\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\nassert find_min_diff((1,5,3,19,18,25),6) == 1\n\"\"\"\n\n\ndef find_min_diff(arr, target):\n    \"\"\"\n    :type arr: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                min_diff = min(min_diff, abs(arr[i] - arr[j]))\n    return min_diff\n\n"], ["\"\"\"\nWrite a python function to count number of digits in a given string.\nassert number_ctr('program2bedone') == 1\n\"\"\"\n\n\ndef number_ctr(string):\n    \"\"\"\n    Count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for i in string:\n        if i.isdigit():\n            count += 1\n    return count\n\n"], ["\"\"\"\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nassert is_polite(7) == 11\n\"\"\"\n"], ["\"\"\"\nWrite a function to return a list of all pairs of consecutive items in a given list.\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\"\"\"\n\n\ndef pair_wise(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: List[Tuple[int, int]]\n    \"\"\"\n    if len(lst) < 2:\n        return []\n    return [(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]\n\n\ndef pair_wise(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: List[Tuple[int, int]]\n    \"\"\"\n    if len(lst) < 2:\n        return []\n    return [(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]\n\n\ndef pair_wise(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: List[Tuple[int, int]]\n    \"\"\"\n    if len(lst) < 2:\n        return []\n    return [(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]\n\n\ndef pair_wise(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: List[Tuple[int, int]]\n    \"\"\"\n    if len(lst) < 2:\n        return []\n    return [(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]\n\n\ndef pair_wise(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: List[Tuple[int, int]]\n    \"\"\"\n    if len(lst) < 2:\n        return []\n    return [(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]\n\n\n"], ["\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\nassert get_pairs_count([1,1,1,1],2) == 6\n\"\"\"\n\n\ndef get_pairs_count(nums, sum):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if sum == nums[i] + nums[j]:\n                count += 1\n    return count\n\n"], ["\"\"\"\nWrite a python function to get the difference between two lists.\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n\"\"\"\n\n\ndef diff(list1, list2):\n    return [x for x in list1 if x not in list2]\n\n"], ["\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\nassert odd_num_sum(2) == 82\n\"\"\"\n\n\ndef odd_num_sum(n):\n    return sum(x ** 4 for x in range(1, n + 1, 2))\n\n"], ["\"\"\"\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nassert check_expression(\"{()}[{}]\") == True\n\"\"\"\n\n\n# +\ndef check_expression(expression):\n    stack = []\n    for char in expression:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n        elif char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"], ["\"\"\"\nWrite a function to remove all the words with k length in the given string.\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\"\"\"\n\n\ndef occurance_substring(s: str, sub: str) -> Tuple[str, int, int]:\n    \"\"\"\n    >>> occurance_substring('python programming, python language','python')\n    ('python', 0, 6)\n    >>> occurance_substring('python programming, python language','python')\n    ('python', 0, 6)\n    >>> occurance_substring('python programming, python language','python')\n    ('python', 0, 6)\n    >>> occurance_substring('python programming, python language','python')\n    ('python', 0, 6)\n    >>> occurance_substring('python programming, python language','python')\n    ('python', 0, 6)\n    >>> occurance_substring('python programming, python language','python')\n    ('python', 0, 6)\n    >>> occurance_substring('python programming, python language','python')\n    ('python', 0, 6)\n    >>> occurance_substring('python programming, python language','python')\n    ('python', 0, 6)\n    >>> occurance_substring('python programming, python language','python')\n    ('python', 0, 6)\n    >>> occurance_substring('python programming, python language','python')\n    ('python', 0, 6)\n    >>> occurance_substring('python programming, python language','python')\n    ('python', 0, 6)\n    >>> occurance_substring('python programming, python language','python')\n    ('python', 0, 6)\n    >>> occurance_substring('python programming, python language','python')\n    ('python', 0, 6)\n    >>> occurance_substring('python programming, python language','python')\n    ('python', 0, 6)\n    >>> occurance_substring('python programming, python language','python')\n    ('python', 0, 6)\n    >>> occurance_substring('python programming, python language','python')\n    ('python',"], ["\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n\"\"\"\n\n\ndef odd_position(lst):\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            return False\n    return True\n\n"], ["\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given list.\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n\"\"\"\n\n\ndef find_sum(lst):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n    :param lst: a list of integers\n    :return: the sum of non-repeated elements in the list\n    \"\"\"\n    # TODO: implement me\n    pass\n\n"], ["\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\"\"\"\n\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n    return [[lst[i], lst[i + 1]] for i in range(0, len(lst), 2)]\n\n"], ["\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\"\"\"\n"], ["\"\"\"\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\nassert count_divisors(10)\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nassert odd_length_sum([1,2,4]) == 14\n\"\"\"\n\n\ndef odd_length_sum(arr):\n    \"\"\"\n    :param arr: list\n    :return: sum of odd length subarrays\n    \"\"\"\n    odd_sum = 0\n    for i in range(len(arr)):\n        odd_sum += arr[i]\n        if i % 2 == 1:\n            odd_sum += arr[i]\n    return odd_sum\n\n"], ["\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\n\ndef mul_even_odd(lst):\n    \"\"\"\n    :param lst: list of integers\n    :return: product of first even and odd number of lst\n    \"\"\"\n    even_odd_product = 1\n    for i in lst:\n        if i % 2 == 0:\n            even_odd_product *= i\n        else:\n            even_odd_product *= i\n    return even_odd_product\n\n"], ["\"\"\"\nWrite a function to convert tuple string to integer tuple.\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n\"\"\"\n\n\ndef tuple_str_int(tuple_str: str) -> tuple:\n    \"\"\"\n    Convert tuple string to integer tuple.\n    :param tuple_str: tuple string\n    :return: tuple\n    \"\"\"\n    return tuple(map(int, tuple_str.split(\",\")))\n"], ["\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\nassert right_insertion([1,2,4,5],6)==4\n\"\"\"\n\n\ndef right_insertion(lst, val):\n    \"\"\"\n    :param lst: list of integers\n    :param val: integer to insert\n    :return: index of the insertion point\n    \"\"\"\n    # TODO: implement me\n    pass\n\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\nassert not text_match_three(\"ac\")\n\"\"\"\n\n\ndef test_assert_not_match_three(test_case):\n    assert not test_case.assert_not_match_three(\"ac\")\n\n\ndef test_assert_not_match_three_with_failure(test_case):\n    with pytest.raises(AssertionError):\n        test_case.assert_not_match_three(\"ac\")\n\n\ndef test_assert_not_match_three_with_success(test_case):\n    assert not test_case.assert_not_match_three(\"ac\")\n\n\ndef test_assert_not_match_three_with_failure_and_success(test_case):\n    with pytest.raises(AssertionError):\n        test_case.assert_not_match_three(\"ac\")\n\n\ndef test_assert_not_match_three_with_failure_and_success_and_failure(test_case):\n    with pytest.raises(AssertionError):\n        test_case.assert_not_match_three(\"ac\")\n\n\ndef test_assert_not_match_three_with_failure_and_success_and_success(test_case):\n    with pytest.raises(AssertionError):\n        test_case.assert_not_match_three(\"ac\")\n\n\ndef test_assert_not_match_three_with_failure_and_success_and_failure_and_success(test_case):\n    with pytest.raises(AssertionError):\n        test_case.assert_not_match_three(\"ac\")\n\n\ndef test_assert_not_match_three_with_failure_and_success_and_failure_and_success_and_failure(test_case):\n    with pytest.raises(AssertionError):\n        test_case.assert_not_match_three(\"ac\")\n\n\ndef test_assert_not_match_three_with_failure_and_success_and_failure_and_failure_and_success(test"], ["\"\"\"\nWrite a function to create a new tuple from the given string and list.\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n\"\"\"\n"], ["\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\nassert even_position([3,2,1]) == False\n\"\"\"\n\n\ndef even_position(lst):\n    for i in range(0, len(lst)):\n        if i % 2 == 0:\n            return True\n    return False\n\n"], ["\"\"\"\nWrite a function to remove tuples from the given tuple.\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\"\"\"\n\n\ndef remove_nested(tuple_to_remove):\n    \"\"\"\n    :param tuple_to_remove: The tuple to remove\n    :return: The tuple with the elements removed\n    \"\"\"\n    return tuple_to_remove[0]\n\n\ndef remove_nested_recursive(tuple_to_remove):\n    \"\"\"\n    :param tuple_to_remove: The tuple to remove\n    :return: The tuple with the elements removed\n    \"\"\"\n    return tuple_to_remove[0]\n\n\ndef remove_nested_recursive_2(tuple_to_remove):\n    \"\"\"\n    :param tuple_to_remove: The tuple to remove\n    :return: The tuple with the elements removed\n    \"\"\"\n    return tuple_to_remove[0]\n\n\ndef remove_nested_recursive_3(tuple_to_remove):\n    \"\"\"\n    :param tuple_to_remove: The tuple to remove\n    :return: The tuple with the elements removed\n    \"\"\"\n    return tuple_to_remove[0]\n\n\ndef remove_nested_recursive_4(tuple_to_remove):\n    \"\"\"\n    :param tuple_to_remove: The tuple to remove\n    :return: The tuple with the elements removed\n    \"\"\"\n    return tuple_to_remove[0]\n\n\ndef remove_nested_recursive_5(tuple_to_remove):\n    \"\"\"\n    :param tuple_to_remove: The tuple to remove\n    :return: The tuple with the elements removed\n    \"\"\"\n    return tuple_to_remove[0]\n\n\ndef remove_nested_recursive_6(tuple_to_remove):\n    \"\"\"\n    :param tuple_to_remove: The tuple to remove\n    :return: The tuple with the elements removed\n    \"\"\"\n    return tuple_to_remove[0]\n\n\ndef remove_nested_recursive_7(tuple_to_remove):\n    \"\"\"\n    :param tuple_to_remove: The tuple to remove"], ["\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\"\"\"\n\n\ndef count_list(lst):\n    \"\"\"\n    :param lst: list of lists\n    :return: number of lists in lst\n    \"\"\"\n    return len(lst)\n\n"], ["\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\nassert last([1,2,3],1) == 0\n\"\"\"\n\n\ndef last(arr, index):\n    if index == len(arr):\n        return -1\n    else:\n        for i in range(index, len(arr)):\n            if arr[i] < arr[index]:\n                index = i\n        return index\n\n\ndef last(arr, index):\n    if index == len(arr):\n        return -1\n    else:\n        for i in range(index, len(arr)):\n            if arr[i] < arr[index]:\n                return index\n        return -1\n\n"], ["\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"\n\n\ndef text_starta_endb(text):\n    \"\"\"\n    >>> assert text_starta_endb(\"aabbbb\")\n    \"\"\"\n    return text.startswith(\"a\") and text.endswith(\"b\")\n\n\ndef test_text_starta_endb():\n    assert text_starta_endb(\"aabbbb\")\n    assert text_starta_endb(\"aab\")\n    assert text_starta_endb(\"a\")\n    assert text_starta_endb(\"\")\n    assert text_starta_endb(\"aab\")\n    assert text_starta_endb(\"aabbbb\")\n    assert text_starta_endb(\"aabbb\")\n    assert text_starta_endb(\"aabbbb\")\n    assert text_starta_endb(\"aabbb\")\n    assert text_starta_endb(\"aabbbb\")\n    assert text_starta_endb(\"aabbbb\")\n    assert text_starta_endb(\"aabbb\")\n    assert text_starta_endb(\"aabbbb\")\n    assert text_starta_endb(\"aabbbb\")\n    assert text_starta_endb(\"aabbbb\")\n    assert text_starta_endb(\"aabbbb\")\n    assert text_starta_endb(\"aabbbb\")\n    assert text_starta_endb(\"aabbbb\")\n    assert text_starta_endb(\"aabbbb\")\n    assert text_starta_endb(\"aabbbb\")\n    assert text_starta_endb(\"aabbbb\")\n    assert text_starta_endb(\"aabbbb\")\n    assert text_starta_endb(\"aabbbb\")\n    assert text_starta_endb(\"aabbbb\")\n    assert text_starta_endb(\"aabbbb\")\n    assert text_starta_endb(\"aabbb"], ["\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\nassert sum_in_range(2,5) == 8\n\"\"\"\n\n\ndef sum_in_range(l, r):\n    return sum(i for i in range(l, r + 1) if i % 2 != 0)\n\n"], ["\"\"\"\nWrite a python function to find the sum of an array.\nassert _sum([1, 2, 3]) == 6\n\"\"\"\n\n\ndef _sum(array):\n    \"\"\"\n    :param array: list\n    :return: sum of array\n    \"\"\"\n    return sum(array)\n\n\ndef _sum_array(array):\n    \"\"\"\n    :param array: list\n    :return: sum of array\n    \"\"\"\n    return sum(array)\n\n\ndef _sum_array_with_index(array, index):\n    \"\"\"\n    :param array: list\n    :param index: int\n    :return: sum of array\n    \"\"\"\n    return sum(array[index])\n\n\ndef _sum_array_with_index_and_reverse(array, index):\n    \"\"\"\n    :param array: list\n    :param index: int\n    :return: sum of array\n    \"\"\"\n    return sum(array[index])\n\n\ndef _sum_array_with_reverse(array):\n    \"\"\"\n    :param array: list\n    :return: sum of array\n    \"\"\"\n    return sum(array[::-1])\n\n\ndef _sum_array_with_reverse_and_index(array, index):\n    \"\"\"\n    :param array: list\n    :param index: int\n    :return: sum of array\n    \"\"\"\n    return sum(array[index])\n\n\ndef _sum_array_with_reverse_and_index_and_reverse(array, index):\n    \"\"\"\n    :param array: list\n    :param index: int\n    :return: sum of array\n    \"\"\"\n    return sum(array[index])\n\n\ndef _sum_array_with_reverse_and_reverse(array):\n    \"\"\"\n    :param array: list\n    :return: sum of array\n    \"\"\"\n    return sum(array[::-1])\n\n\ndef _sum_array_with_reverse_and_reverse_and_index(array, index):\n    \"\"\"\n    :param array: list\n    :param index: int\n    :return: sum of array\n    \"\"\"\n    return sum(array[index])\n\n\ndef _sum_array_with"], ["\"\"\"\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nassert left_rotate(16,2) == 64\n\"\"\"\n\n\ndef left_rotate(num, d):\n    \"\"\"\n    :param num: 32 bit number\n    :param d: number of bits to rotate\n    :return: 32 bit number\n    \"\"\"\n    assert d >= 0\n    assert num >= 0\n    assert num < 2**32\n\n    return (num << d) | (num >> (32 - d))\n\n\ndef main():\n    print(left_rotate(16, 2))\n\n"], ["\"\"\"\nWrite a function to remove all whitespaces from a string.\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"\n\n\ndef remove_all_spaces(string):\n    return ''.join(c for c in string if c.isspace())\n\n"], ["\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\nassert test_three_equal(1,1,1) == 3\n\"\"\"\n\n\ndef test_three_equal(a, b, c):\n    assert a == b == c\n\n\ndef test_three_equal_2(a, b, c):\n    assert a == b == c\n\n\ndef test_three_equal_3(a, b, c):\n    assert a == b == c\n\n\ndef test_three_equal_4(a, b, c):\n    assert a == b == c\n\n\ndef test_three_equal_5(a, b, c):\n    assert a == b == c\n\n\ndef test_three_equal_6(a, b, c):\n    assert a == b == c\n\n\ndef test_three_equal_7(a, b, c):\n    assert a == b == c\n\n\ndef test_three_equal_8(a, b, c):\n    assert a == b == c\n\n\ndef test_three_equal_9(a, b, c):\n    assert a == b == c\n\n\ndef test_three_equal_10(a, b, c):\n    assert a == b == c\n\n\ndef test_three_equal_11(a, b, c):\n    assert a == b == c\n\n\ndef test_three_equal_12(a, b, c):\n    assert a == b == c\n\n\ndef test_three_equal_13(a, b, c):\n    assert a == b == c\n\n\ndef test_three_equal_14(a, b, c):\n    assert a == b == c\n\n\ndef test_three_equal_15(a, b, c):\n    assert a == b == c\n\n\ndef test_three_equal_16(a, b, c):\n    assert a == b == c\n\n\ndef test_three_equal_17(a, b, c):\n    assert a == b == c\n\n\ndef test_three_equal_18(a, b, c):\n    assert a == b"], ["\"\"\"\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\nassert not is_perfect_square(10)\n\"\"\"\n\n\ndef is_perfect_square(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n % 1 == 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n\n\ndef is_perfect_square(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n % 1 == 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n\n\ndef is_perfect_square(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n % 1 == 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n\n\ndef is_perfect_square(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n % 1 == 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n\n"], ["\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\nassert is_product_even([1,2,3])\n\"\"\"\n\n\n# +\ndef is_product_even(lst):\n    if len(lst) == 0:\n        return False\n    else:\n        return lst[0] % 2 == 0\n"], ["\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n\"\"\"\n\n\ndef max_sum_list(lst):\n    max_sum = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sum = lst[i][0] + lst[j][0]\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum\n\n"], ["\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\nassert first_odd([1,3,5]) == 1\n\"\"\"\n\n\ndef first_odd(numbers):\n    for i in range(len(numbers)):\n        if numbers[i] % 2 == 1:\n            return numbers[i]\n    return None\n\n"], ["\"\"\"\nWrite a function to check if the given tuples contain the k or not.\nassert check_K((10, 4, 5, 6, 8), 6) == True\n\"\"\"\n\n\ndef check_K(tuple_list, k):\n    \"\"\"\n    :param tuple_list: list of tuples\n    :param k: int\n    :return: bool\n    \"\"\"\n    for i in range(len(tuple_list)):\n        if tuple_list[i][k] == tuple_list[i][k - 1]:\n            return False\n    return True\n\n\ndef main():\n    \"\"\"\n    Main function\n    :return:\n    \"\"\"\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # 1\n    # "], ["\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n\"\"\"\n\n\ndef check_smaller(first_tuple, second_tuple):\n    for i in range(len(first_tuple)):\n        if first_tuple[i] > second_tuple[i]:\n            return False\n    return True\n\n\n# Testing"]]