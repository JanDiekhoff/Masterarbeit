[["\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"\n\n\ndef remove_Occ(string, char):\n    return string.replace(char, \"\")\n\n"], ["\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"\n\n\ndef sort_matrix(matrix):\n    \"\"\"\n    :param matrix: a list of lists\n    :return: a list of lists\n    \"\"\"\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            matrix[i][j] = sum(matrix[i][:j] + matrix[i][j + 1:])\n    return matrix\n\n"], ["\"\"\"\nWrite a function to count the most common words in a dictionary.\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\"\"\"\n\n\ndef count_common(words):\n    \"\"\"\n    Count the most common words in a dictionary.\n    :param words: a list of words\n    :return: a list of tuples containing the most common words and their counts\n    \"\"\"\n    # Create a dictionary of words and their counts\n    word_counts = {}\n    for word in words:\n        if word in word_counts:\n            word_counts[word] += 1\n        else:\n            word_counts[word] = 1\n\n    # Create a list of tuples containing the most common words and their counts\n    most_common_words = []\n    for word, count in word_counts.items():\n        if count > 1:\n            most_common_words.append((word, count))\n\n    # Sort the list of tuples by count in descending order\n    most_common_words.sort(key=lambda x: x[1], reverse=True)\n\n    return most_common_words\n\n"], ["\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"\n\n# 1. Importing the libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# 2. Importing the dataset\ndataset = np.genfromtxt(\"Salary.csv\", delimiter=\",\")\n\n# 3. Creating the model\ndef find_Volume(height, width, depth):\n    \"\"\"\n    Function to find the volume of a triangular prism.\n    \"\"\"\n    # 4. Calculating the volume\n    volume = (height * width * depth) / 3\n    return volume\n\n# 5. Testing the function\nheight = 10\nwidth = 8\ndepth = 6\n\n# 6. Calling the function\nvolume = find_Volume(height, width, depth)"], ["\"\"\"\nWrite a function to split a string at lowercase letters.\nassert split_lowerstring(\"AbCd\")==['bC','d']\n\"\"\"\n\n\n# +\ndef split_lowerstring(s):\n    return [x.lower() for x in s.split(' ')]\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore.\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\"\"\"\n\n\ndef find_sequence(text, pattern):\n    \"\"\"\n    Find a sequence of lowercase letters joined with an underscore.\n    \"\"\"\n    return re.findall(pattern, text)\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    text = input(\"Enter text: \")\n    pattern = input(\"Enter pattern: \")\n    print(find_sequence(text, pattern))\n\n"], ["\"\"\"\nWrite a function to find the perimeter of a square.\nassert square_perimeter(10)==40\n\"\"\"\n\n\ndef square_perimeter(side):\n    return 4 * side\n\n\n# +\n# Write a function to find the perimeter of a square.\n# assert square_perimeter(10)==40\n# -\n\n# ## 2. Write a function to find the area of a square.\n\n# +\n# Write a function to find the area of a square.\n# assert square_area(10)==100\n# -\n\n# ## 3. Write a function to find the volume of a cube.\n\n# +\n# Write a function to find the volume of a cube.\n# assert cube_volume(10)==1000\n# -\n\n# ## 4. Write a function to find the volume of a cube.\n\n# +\n# Write a function to find the volume of a cube.\n# assert cube_volume(10)==1000\n# -\n\n# ## 5. Write a function to find the volume of a cube.\n\n# +\n# Write a function to find the volume of a cube.\n# assert cube_volume(10)==1000\n# -\n\n# ## 6. Write a function to find the volume of a cube.\n\n# +\n# Write a function to find the volume of a cube.\n# assert cube_volume(10)==1000\n# -\n\n# ## 7. Write a function to find the volume of a cube.\n\n# +\n# Write a function to find the volume of a cube.\n# assert cube_volume(10)==1000\n# -\n\n# ## 8. Write a function to find the volume of a cube.\n\n# +\n# Write a function to find the volume of a cube.\n# assert cube_volume(10)==1000\n# -\n\n# ## 9. Write a function to find the volume of a cube.\n\n# +\n# Write a function to find the volume of a cube.\n# assert cube_volume(10)==1000\n# -\n\n# ##"], ["\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"\n"], ["\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"\n\n\ndef test_duplicate(array):\n    \"\"\"\n    Test function to check whether the given array contains any duplicate element.\n    \"\"\"\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if array[i] == array[j]:\n                return True\n    return False\n\n\ndef test_duplicate_2(array):\n    \"\"\"\n    Test function to check whether the given array contains any duplicate element.\n    \"\"\"\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if array[i] == array[j]:\n                return True\n    return False\n\n\ndef test_duplicate_3(array):\n    \"\"\"\n    Test function to check whether the given array contains any duplicate element.\n    \"\"\"\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if array[i] == array[j]:\n                return True\n    return False\n\n\ndef test_duplicate_4(array):\n    \"\"\"\n    Test function to check whether the given array contains any duplicate element.\n    \"\"\"\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if array[i] == array[j]:\n                return True\n    return False\n\n\ndef test_duplicate_5(array):\n    \"\"\"\n    Test function to check whether the given array contains any duplicate element.\n    \"\"\"\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if array[i] == array[j]:\n                return True\n    return False\n\n\ndef test_duplicate_6(array):\n    \"\"\"\n    Test function to check whether the given array contains any duplicate element.\n    \"\"\"\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if array[i] == array[j]:"], ["\"\"\"\nWrite a function to check if the given number is woodball or not.\nassert is_woodall(383) == True\n\"\"\"\n\n\ndef is_woodall(num):\n    \"\"\"\n    >>> is_woodall(383)\n    True\n    >>> is_woodall(384)\n    False\n    >>> is_woodall(385)\n    False\n    >>> is_woodall(386)\n    True\n    >>> is_woodall(387)\n    True\n    >>> is_woodall(388)\n    True\n    >>> is_woodall(389)\n    True\n    >>> is_woodall(390)\n    True\n    >>> is_woodall(391)\n    True\n    >>> is_woodall(392)\n    True\n    >>> is_woodall(393)\n    True\n    >>> is_woodall(394)\n    True\n    >>> is_woodall(395)\n    True\n    >>> is_woodall(396)\n    True\n    >>> is_woodall(397)\n    True\n    >>> is_woodall(398)\n    True\n    >>> is_woodall(399)\n    True\n    >>> is_woodall(400)\n    True\n    >>> is_woodall(401)\n    True\n    >>> is_woodall(402)\n    True\n    >>> is_woodall(403)\n    True\n    >>> is_woodall(404)\n    True\n    >>> is_woodall(405)\n    True\n    >>> is_woodall(406)\n    True\n    >>> is_woodall(407)\n    True\n    >>> is_woodall(408)\n    True\n    >>> is_woodall(409)\n    True\n    >>> is_woodall(410)\n    True\n    >>> is_woodall(411)\n    True\n    >>> is_woodall(412)\n    True\n    >>> is_woodall(413)\n   "], ["\"\"\"\nWrite a function to find m number of multiples of n.\nassert multiples_of_num(4,3)== [3,6,9,12]\n\"\"\"\n\n\ndef multiples_of_num(num, n):\n    \"\"\"\n    :param num: int\n    :param n: int\n    :return: list\n    \"\"\"\n    return [i*n for i in range(num, num+n)]\n\n\ndef main():\n    \"\"\"\n    :return:\n    \"\"\"\n    print(multiples_of_num(4, 3))\n\n"], ["\"\"\"\nWrite a function to find the first duplicate element in a given array of integers.\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the maximum sum of elements of list in a list of lists.\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\"\"\"\n\n\ndef maximum_Sum(lst):\n    max_sum = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            max_sum = max(max_sum, lst[i][j])\n    return max_sum\n\n"], ["\"\"\"\nWrite a function to convert the given binary number to its decimal equivalent.\nassert binary_to_decimal(100) == 4\n\"\"\"\n\n\ndef binary_to_decimal(binary_number: str) -> int:\n    \"\"\"\n    Convert a binary number to its decimal equivalent.\n\n    :param binary_number: The binary number to convert.\n    :return: The decimal equivalent of the binary number.\n    \"\"\"\n    return int(binary_number, 2)\n"], ["\"\"\"\nWrite a python function to find the product of non-repeated elements in a given array.\nassert find_Product([1,1,2,3],4) == 6\n\"\"\"\n\n\ndef find_Product(array, product):\n    \"\"\"\n    Find the product of non-repeated elements in a given array.\n    :param array: the given array\n    :param product: the product to be found\n    :return: the product\n    \"\"\"\n    product = 1\n    for i in array:\n        if i not in array:\n            product *= i\n    return product\n\n"], ["\"\"\"\nWrite a function to check if the given tuple list has all k elements.\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\"\"\"\n\n\ndef check_k_elements(k, lst):\n    \"\"\"\n    :param k: int\n    :param lst: list\n    :return: bool\n    \"\"\"\n    if len(lst) == k:\n        return True\n    else:\n        return False\n\n\ndef check_k_elements_2(k, lst):\n    \"\"\"\n    :param k: int\n    :param lst: list\n    :return: bool\n    \"\"\"\n    if len(lst) == k:\n        return True\n    else:\n        return False\n\n\ndef check_k_elements_3(k, lst):\n    \"\"\"\n    :param k: int\n    :param lst: list\n    :return: bool\n    \"\"\"\n    if len(lst) == k:\n        return True\n    else:\n        return False\n\n\ndef check_k_elements_4(k, lst):\n    \"\"\"\n    :param k: int\n    :param lst: list\n    :return: bool\n    \"\"\"\n    if len(lst) == k:\n        return True\n    else:\n        return False\n\n\ndef check_k_elements_5(k, lst):\n    \"\"\"\n    :param k: int\n    :param lst: list\n    :return: bool\n    \"\"\"\n    if len(lst) == k:\n        return True\n    else:\n        return False\n\n\ndef check_k_elements_6(k, lst):\n    \"\"\"\n    :param k: int\n    :param lst: list\n    :return: bool\n    \"\"\"\n    if len(lst) == k:\n        return True\n    else:\n        return False\n\n\ndef check_k_elements_7(k, lst):\n    \"\"\"\n    :param k: int\n    :param lst: list\n    :return: bool\n    \"\"\"\n    if len(lst) == k:\n        return True\n   "], ["\"\"\"\nWrite a python function to remove all digits from a list of strings.\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find binomial co-efficient.\nassert binomial_Coeff(5,2) == 10\n\"\"\"\n\n# 1. Import the required libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# 2. Define the function\ndef binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two parameters n and k.\n    It returns the binomial co-efficient.\n    \"\"\"\n    # 3. Define the binomial co-efficient\n    binom = 0\n    for i in range(n+1):\n        binom += (i+1) * (binom - 1)\n    return binom\n\n# 4. Test the function"], ["\"\"\"\nWrite a python function to find the element occurring odd number of times.\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\"\"\"\n\n\ndef get_Odd_Occurrence(array, n):\n    \"\"\"\n    :param array: list of integers\n    :param n: integer\n    :return: number of odd occurrences\n    \"\"\"\n    # Write your code here\n    odd_occurrence = 0\n    for i in range(0, len(array)):\n        if i % 2 == 1:\n            odd_occurrence += 1\n    return odd_occurrence\n\n"], ["\"\"\"\nWrite a python function to count all the substrings starting and ending with same characters.\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the largest prime factor of a given number.\nassert max_Prime_Factors(15) == 5\n\"\"\"\n\n\ndef max_Prime_Factors(n):\n    \"\"\"\n    Find the largest prime factor of a given number.\n    :param n: The number to find the largest prime factor of.\n    :return: The largest prime factor of the given number.\n    \"\"\"\n    # Check if the number is a prime number\n    if n < 2:\n        return 0\n\n    # Check if the number is a prime number\n    if n == 2:\n        return 2\n\n    # Check if the number is a prime number\n    if n == 3:\n        return 3\n\n    # Check if the number is a prime number\n    if n == 4:\n        return 2\n\n    # Check if the number is a prime number\n    if n == 5:\n        return 5\n\n    # Check if the number is a prime number\n    if n == 6:\n        return 2\n\n    # Check if the number is a prime number\n    if n == 7:\n        return 7\n\n    # Check if the number is a prime number\n    if n == 8:\n        return 2\n\n    # Check if the number is a prime number\n    if n == 9:\n        return 3\n\n    # Check if the number is a prime number\n    if n == 10:\n        return 2\n\n    # Check if the number is a prime number\n    if n == 11:\n        return 3\n\n    # Check if the number is a prime number\n    if n == 12:\n        return 2\n\n    # Check if the number is a prime number\n    if n == 13:\n        return 3\n\n    # Check if the number is a prime number\n    if n == 14:\n        return 2\n\n    # Check if the number is a prime number\n    if n == 15:\n        return 5\n\n    # Check if the number is a prime number\n    if n == 16:\n        return 2\n\n    # Check if the"], ["\"\"\"\nWrite a python function to convert a decimal number to binary number.\nassert decimal_To_Binary(10) == 1010\n\"\"\"\n\n\ndef decimal_To_Binary(decimal_number):\n    binary_number = \"\"\n    while decimal_number > 0:\n        binary_number = str(decimal_number % 2) + binary_number\n        decimal_number = decimal_number // 2\n    return binary_number\n\n"], ["\"\"\"\nWrite a python function to find the missing number in a sorted array.\nassert find_missing([1,2,3,5],4) == 4\n\"\"\"\n\n\ndef find_missing(array, missing):\n    for i in range(len(array)):\n        if array[i] == missing:\n            return i\n    return -1\n\n\ndef find_missing(array, missing):\n    for i in range(len(array)):\n        if array[i] == missing:\n            return i\n    return -1\n\n"], ["\"\"\"\nWrite a function to find the n-th rectangular number.\nassert find_rect_num(4) == 20\n\"\"\"\n\n\ndef find_rect_num(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_rect_num(n - 1) + find_rect_num(n - 2)\n\n"], ["\"\"\"\nWrite a python function to find the nth digit in the proper fraction of two given numbers.\nassert find_Nth_Digit(1,2,1) == 5\n\"\"\"\n\n\ndef find_Nth_Digit(n, a, b):\n    \"\"\"\n    :param n: int\n    :param a: int\n    :param b: int\n    :return: int\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n   "], ["\"\"\"\nWrite a function to sort a given mixed list of integers and strings.\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the division of first even and odd number of a given list.\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"\n\n\ndef div_even_odd(lst):\n    even_nums = []\n    odd_nums = []\n    for num in lst:\n        if num % 2 == 0:\n            even_nums.append(num)\n        else:\n            odd_nums.append(num)\n    return even_nums, odd_nums\n\n"], ["\"\"\"\nWrite a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\nassert rearange_string(\"aab\")==('aba')\n\"\"\"\n\n\ndef rearange_string(s):\n    \"\"\"\n    :param s: a string\n    :return: a string\n    \"\"\"\n    return ''.join(sorted(s))\n\n"], ["\"\"\"\nWrite a function to find frequency of the elements in a given list of lists using collections module.\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\"\"\"\n\n\ndef freq_element(lst):\n    \"\"\"\n    :param lst: list of lists\n    :return: dict\n    \"\"\"\n    freq = {}\n    for i in lst:\n        for j in i:\n            if j in freq:\n                freq[j] += 1\n            else:\n                freq[j] = 1\n    return freq\n\n"], ["\"\"\"\nWrite a function to filter even numbers using lambda function.\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\"\"\"\n\n\ndef filter_evennumbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\n"], ["\"\"\"\nWrite a python function to find the sum of repeated elements in a given array.\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\"\"\"\n\n\ndef find_Sum(array, target):\n    # Write your code here\n    if not array:\n        return 0\n    if target in array:\n        return array.count(target)\n    else:\n        return find_Sum(array[1:], target) + array[0]\n\n"], ["\"\"\"\nWrite a function to find sequences of lowercase letters joined with an underscore using regex.\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\"\"\"\n\n\ndef find_sequences(text, pattern):\n    \"\"\"\n    Find sequences of lowercase letters joined with an underscore using regex.\n\n    :param text: the text to search\n    :param pattern: the pattern to search for\n    :return: a list of tuples of the form (start, end), where start and end are integers\n    \"\"\"\n    return re.findall(pattern, text)\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    text = \"This is a test.\"\n    pattern = r\"aab_cbbbc\"\n    print(find_sequences(text, pattern))\n\n"], ["\"\"\"\nWrite a function that matches a word at the beginning of a string.\nassert text_match_string(\" python\")==('Not matched!')\n\"\"\"\n\ndef text_match_string(text):\n    \"\"\"\n    >>> text_match_string(\" python\")==('Not matched!')\n    True\n    >>> text_match_string(\" python\")==('matched!')\n    True\n    >>> text_match_string(\" python\")==('matched!')\n    False\n    \"\"\"\n    if text.startswith(\"python\"):\n        return True\n    else:\n        return False\n\n\ndef main():\n    \"\"\"\n    >>> main()\n    \"\"\"\n"], ["\"\"\"\nWrite a function to find the gcd of the given array elements.\nassert get_gcd([2, 4, 6, 8, 16]) == 2\n\"\"\"\n\n\ndef get_gcd(numbers):\n    \"\"\"\n    Find the greatest common divisor of the given array elements.\n\n    :param numbers: a list of numbers\n    :return: the greatest common divisor of the given array elements\n    \"\"\"\n    if len(numbers) == 0:\n        return 0\n    else:\n        return get_gcd(numbers[1:])\n\n"], ["\"\"\"\nWrite a python function to determine whether all the numbers are different from each other are not.\nassert test_distinct([1,5,7,9]) == True\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the last digit when factorial of a divides factorial of b.\nassert compute_Last_Digit(2,4) == 2\n\"\"\"\n\n\ndef compute_Last_Digit(a, b):\n    if a < b:\n        return compute_Last_Digit(b, a)\n    if a == 1:\n        return 1\n    if b == 1:\n        return 1\n    if a == b:\n        return 0\n    if a % 10 == 0:\n        return compute_Last_Digit(b, a)\n    if b % 10 == 0:\n        return compute_Last_Digit(a, b)\n    return compute_Last_Digit(a, b) % 10\n\n"], ["\"\"\"\nWrite a python function to set all odd bits of a given number.\nassert odd_bit_set_number(10) == 15\n\"\"\"\n\n# 10.0\n# 10.1\n# 10.2\n# 10.3\n# 10.4\n# 10.5\n# 10.6\n# 10.7\n# 10.8\n# 10.9\n# 10.10\n# 10.11\n# 10.12\n# 10.13\n# 10.14\n# 10.15\n# 10.16\n# 10.17\n# 10.18\n# 10.19\n# 10.20\n# 10.21\n# 10.22\n# 10.23\n# 10.24\n# 10.25\n# 10.26\n# 10.27\n# 10.28\n# 10.29\n# 10.30\n# 10.31\n# 10.32\n# 10.33\n# 10.34\n# 10.35\n# 10.36\n# 10.37\n# 10.38\n# 10.39\n# 10.40\n# 10.41\n# 10.42\n# 10.43\n# 10.44\n# 10.45\n# 10.46\n# 10.47\n# 10.48\n# 10.49\n# 10.50\n# 10.51\n# 10.52\n# 10.53\n# 10.54\n# 10.55\n# 10.56\n# 10.57\n# 10.58\n# 10.59\n# 1"], ["\"\"\"\nWrite a function to extract every first or specified element from a given two-dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\n\ndef specified_element(input_list, index):\n    return input_list[index]\n\n"], ["\"\"\"\nWrite a function to find the list with minimum length using lambda function.\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\"\"\"\n"], ["\"\"\"\nWrite a function to print check if the triangle is equilateral or not.\nassert check_equilateral(6,8,12)==False \n\"\"\"\n\n\ndef check_equilateral(a, b, c):\n    \"\"\"\n    Check if the triangle is equilateral.\n    \"\"\"\n    return (a**2 + b**2 + c**2) == 36\n\n"], ["\"\"\"\nWrite a function to caluclate area of a parallelogram.\nassert parallelogram_area(10,20)==200\n\"\"\"\n\n# 1. Importing the libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# 2. Importing the dataset\ndataset = pd.read_csv('Position_for_Men.csv')\nX = dataset.iloc[:, 1:2].values\ny = dataset.iloc[:, 3].values\n\n# 3. Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# 4. Fitting the Linear Regression to the dataset\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n\n# 5. Predicting a new result\ny_pred = regressor.predict(6.5)\n\n# 6. Visualising the Training set results\nplt.scatter(X, y, color = 'red')\nplt.plot(X, regressor.predict(X), color = 'blue')\nplt.title('Truth or Bluff (Linear Regression)')\nplt.xlabel('Position for Men')\nplt.ylabel('Salary for Men')\nplt.show()\n\n# 7. Visualising the Test set results\nplt.scatter(X_test, y_test, color = 'red')\nplt.plot(X_test, regressor.predict(X_test), color = 'blue')\nplt.title('Truth or Bluff (Linear Regression)')\nplt.xlabel('Position for Men')\nplt.ylabel('Salary for Men')\nplt.show()\n\n# 8. Visualising the Training set results\nplt.scatter(X, y, color = 'red')\nplt.plot(X, re"], ["\"\"\"\nWrite a python function to check whether the first and last characters of a given string are equal or not.\nassert check_Equality(\"abcda\") == \"Equal\"\n\"\"\"\n\n\ndef check_Equality(string):\n    if string[0] == string[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\"\n\n\n# Testing"], ["\"\"\"\nWrite a function to sort the given array by using counting sort.\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\"\"\"\n\n\ndef counting_sort(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: sorted list of integers\n    \"\"\"\n    count = [0] * (max(arr) + 1)\n    for i in arr:\n        count[i] += 1\n    return [i for i in range(1, max(arr) + 1) if count[i] > 0]\n\n"], ["\"\"\"\nWrite a function to find t-nth term of geometric series.\nassert tn_gp(1,5,2)==16\n\"\"\"\n\ndef tn_gp(a, r, t):\n    \"\"\"\n    t-th term of geometric series.\n    \"\"\"\n    return a * (1-r)**t\n"], ["\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"\n\n\ndef check(n):\n    if n % 2 == 0:\n        return True\n    return False\n\n\n# print(check(70))\n\n\ndef check(n):\n    if n % 2 == 0:\n        return True\n    return False\n\n\n# print(check(70))\n\n\ndef check(n):\n    if n % 2 == 0:\n        return True\n    return False\n\n\n# print(check(70))\n\n\ndef check(n):\n    if n % 2 == 0:\n        return True\n    return False\n\n\n# print(check(70))\n\n\ndef check(n):\n    if n % 2 == 0:\n        return True\n    return False\n\n\n# print(check(70))\n\n\ndef check(n):\n    if n % 2 == 0:\n        return True\n    return False\n\n\n# print(check(70))\n\n\ndef check(n):\n    if n % 2 == 0:\n        return True\n    return False\n\n\n# print(check(70))\n\n\ndef check(n):\n    if n % 2 == 0:\n        return True\n    return False\n\n\n# print(check(70))\n\n\ndef check(n):\n    if n % 2 == 0:\n        return True\n    return False\n\n\n# print(check(70))\n\n\ndef check(n):\n    if n % 2 == 0:\n        return True\n    return False\n\n\n# print(check(70))\n\n\ndef check(n):\n    if n % 2 == 0:\n        return True\n    return False\n\n\n# print(check(70))\n\n\ndef check(n):\n    if n % 2 == 0:\n        return True\n    return False\n\n\n# print(check(70))\n\n\ndef check(n):\n    if n % 2 == 0:\n        return True"], ["\"\"\"\nWrite a python function to find the largest number that can be formed with the given digits.\nassert find_Max_Num([1,2,3],3) == 321\n\"\"\"\n\n\ndef find_Max_Num(nums, k):\n    max_num = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] == k:\n                max_num = max(max_num, nums[i] * nums[j])\n    return max_num\n\n"], ["\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"\n\n\ndef opposite_Signs(a, b):\n    return a < 0 and b > 0 or a > 0 and b < 0\n\n"], ["\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"\n\n\ndef is_octagonal(n):\n    \"\"\"\n    >>> is_octagonal(5)\n    65\n    \"\"\"\n    return (n * (n + 1)) // 2 == n * (n + 1) // 2 + n\n\n\ndef main():\n    \"\"\"\n    >>> main()\n    1\n    \"\"\"\n    print(is_octagonal(1))\n    print(is_octagonal(2))\n    print(is_octagonal(3))\n    print(is_octagonal(4))\n    print(is_octagonal(5))\n    print(is_octagonal(6))\n    print(is_octagonal(7))\n    print(is_octagonal(8))\n    print(is_octagonal(9))\n    print(is_octagonal(10))\n    print(is_octagonal(11))\n    print(is_octagonal(12))\n    print(is_octagonal(13))\n    print(is_octagonal(14))\n    print(is_octagonal(15))\n    print(is_octagonal(16))\n    print(is_octagonal(17))\n    print(is_octagonal(18))\n    print(is_octagonal(19))\n    print(is_octagonal(20))\n    print(is_octagonal(21))\n    print(is_octagonal(22))\n    print(is_octagonal(23))\n    print(is_octagonal(24))\n    print(is_octagonal(25))\n    print(is_octagonal(26))\n    print(is_octagonal(27))\n    print(is_octagonal(28))\n    print(is_octagonal(29))\n    print(is_octagonal(30))\n    print(is_octagonal(31))\n    print"], ["\"\"\"\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\"\"\"\n"], ["\"\"\"\nWrite a python function to count number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112',6) == 6\n\"\"\"\n\n\ndef count_Substrings(string, length):\n    \"\"\"\n    :param string: string\n    :param length: int\n    :return: int\n    \"\"\"\n    count = 0\n    for i in range(length):\n        for j in range(length - i):\n            substring = string[j:j + length]\n            if int(substring) == int(substring[0]):\n                count += 1\n    return count\n\n\ndef count_Substrings(string, length):\n    \"\"\"\n    :param string: string\n    :param length: int\n    :return: int\n    \"\"\"\n    count = 0\n    for i in range(length):\n        for j in range(length - i):\n            substring = string[j:j + length]\n            if int(substring) == int(substring[0]):\n                count += 1\n    return count\n\n"], ["\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"\n"], ["\"\"\"\nWrite a function to sort a list of tuples using lambda.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"\n\n\ndef sort_tuple(subject_marks):\n    return sorted(subject_marks, key=lambda x: x[1], reverse=True)\n\n"], ["\"\"\"\nWrite a function of recursion list sum.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"\n"], ["\"\"\"\nWrite a python function to count positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"\n\n\ndef pos_count(lst):\n    \"\"\"\n    >>> pos_count([1,-2,3,-4])\n    2\n    \"\"\"\n    return len(lst) - len(set(lst))\n"], ["\"\"\"\nWrite a function to find the number of ways to partition a set of bell numbers.\nassert bell_number(2)==2\n\"\"\"\n\n\ndef bell_number(n):\n    \"\"\"\n    Bell numbers are the number of ways to partition a set of n elements.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n\n\ndef bell_number_test():\n    \"\"\"\n    Test bell_number()\n    \"\"\"\n    assert bell_number(2)==2\n    assert bell_number(3)==3\n    assert bell_number(4)==5\n    assert bell_number(5)==10\n    assert bell_number(6)==15\n    assert bell_number(7)==21\n    assert bell_number(8)==28\n    assert bell_number(9)==36\n    assert bell_number(10)==45\n    assert bell_number(11)==55\n    assert bell_number(12)==66\n    assert bell_number(13)==77\n    assert bell_number(14)==88\n    assert bell_number(15)==99\n    assert bell_number(16)==111\n    assert bell_number(17)==123\n    assert bell_number(18)==136\n    assert bell_number(19)==149\n    assert bell_number(20)==163\n    assert bell_number(21)==180\n    assert bell_number(22)==196\n    assert bell_number(23)==213\n    assert bell_number(24)==229\n    assert bell_number(25)==246\n    assert bell_number(26)==264\n    assert bell_number(27)==283\n    assert bell_number(28)==293\n    assert bell_number(29)==305\n    assert bell_number(30)==318\n    assert bell_"], ["\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"\n\n\ndef is_Monotonic(array):\n    \"\"\"\n    :param array: list\n    :return: bool\n    \"\"\"\n    # check if the array is empty\n    if len(array) == 0:\n        return True\n    # check if the array is not sorted\n    if not all(array[i] <= array[i + 1] for i in range(len(array) - 1)):\n        return False\n    # check if the array is monotonic\n    for i in range(1, len(array)):\n        if array[i] > array[i - 1]:\n            return False\n    return True\n\n\ndef main():\n    print(is_Monotonic([6, 5, 4, 4]))\n    print(is_Monotonic([1, 2, 3, 4]))\n    print(is_Monotonic([1, 2, 3, 4, 5]))\n    print(is_Monotonic([1, 2, 3, 4, 5, 6]))\n    print(is_Monotonic([1, 2, 3, 4, 5, 6, 7]))\n    print(is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, "], ["\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"\n\n# 1. Create a function to check whether a list contains the given sublist or not.\n# 2. Assert that the function is_sublist is working as expected.\n\n\ndef is_sublist(lst, sublist):\n    return all(sublist[i] <= lst[i] for i in range(len(sublist)))\n\n\n# 3. Write a function to check whether a list contains the given sublist or not.\n# 4. Assert that the function is_sublist is working as expected.\n\n\ndef is_sublist(lst, sublist):\n    return all(sublist[i] <= lst[i] for i in range(len(sublist)))\n\n\n# 5. Write a function to check whether a list contains the given sublist or not.\n# 6. Assert that the function is_sublist is working as expected.\n\n\ndef is_sublist(lst, sublist):\n    return all(sublist[i] <= lst[i] for i in range(len(sublist)))\n\n\n# 7. Write a function to check whether a list contains the given sublist or not.\n# 8. Assert that the function is_sublist is working as expected.\n\n\ndef is_sublist(lst, sublist):\n    return all(sublist[i] <= lst[i] for i in range(len(sublist)))\n\n\n# 9. Write a function to check whether a list contains the given sublist or not.\n# 10. Assert that the function is_sublist is working as expected.\n\n\ndef is_sublist(lst, sublist):\n    return all(sublist[i] <= lst[i] for i in range(len(sublist)))\n\n\n# 11. Write a function to check whether a list contains the given sublist or not.\n# 12. Assert that the function is_sublist is working as expected.\n\n\ndef is_sublist(lst, sublist):\n    return all(sublist[i]"], ["\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\"\"\"\n\n\ndef get_equal(tuples: list, length: int) -> str:\n    \"\"\"\n    :param tuples: list of tuples\n    :param length: length of the tuple\n    :return: 'All tuples have same length' if all the tuples have same length, otherwise 'Not all tuples have same length'\n    \"\"\"\n    if len(tuples) != length:\n        return 'Not all tuples have same length'\n    for i in range(length):\n        if len(tuples[i]) != length:\n            return 'Not all tuples have same length'\n    return 'All tuples have same length'\n\n"], ["\"\"\"\nWrite a function to sort a list of elements using comb sort.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"\n\n\ndef comb_sort(lst):\n    \"\"\"\n    Comb Sort\n    :param lst: list of elements\n    :return: sorted list\n    \"\"\"\n    n = len(lst)\n    for i in range(n):\n        for j in range(i, n):\n            if lst[j] < lst[j - 1]:\n                lst[j], lst[j - 1] = lst[j - 1], lst[j]\n    return lst\n\n\ndef main():\n    \"\"\"\n    Main\n    :return:\n    \"\"\"\n    lst = [5, 15, 37, 25, 79]\n    print(comb_sort(lst))\n\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented as difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"\n\n\ndef dif_Square(num):\n    \"\"\"\n    :param num: int\n    :return: bool\n    \"\"\"\n    if num == 0:\n        return True\n    else:\n        return num == (num - 1) * (num + 1)\n\n"], ["\"\"\"\nWrite a function to split the given string with multiple delimiters by using regex.\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\"\"\"\n\n\ndef multiple_split(string):\n    \"\"\"\n    Split the given string with multiple delimiters by using regex.\n\n    :param string: The string to split\n    :type string: str\n    :return: The split string\n    :rtype: str\n    \"\"\"\n    return re.split(r'\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\s*,\\"], ["\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\"\"\"\n\n\ndef is_samepatterns(patterns, sequence):\n    if len(patterns) != len(sequence):\n        return False\n    for i in range(len(patterns)):\n        if not is_samepattern(patterns[i], sequence[i]):\n            return False\n    return True\n\n\ndef is_samepattern(pattern, sequence):\n    if len(pattern) != len(sequence):\n        return False\n    for i in range(len(pattern)):\n        if pattern[i] != sequence[i]:\n            return False\n    return True\n\n\ndef main():\n    patterns = [\"red\", \"green\", \"green\"]\n    sequence = [\"a\", \"b\", \"b\"]\n    print(is_samepatterns(patterns, sequence))\n\n"], ["\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\"\"\"\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\n# 1. Write a function to count the number of squares in a rectangle.\n\n# 2. Write a function to count the number of squares in a rectangle.\n\n# 3. Write a function to count the number of squares in a rectangle.\n\n# 4. Write a function to count the number of squares in a rectangle.\n\n# 5. Write a function to count the number of squares in a rectangle.\n\n# 6. Write a function to count the number of squares in a rectangle.\n\n# 7. Write a function to count the number of squares in a rectangle.\n\n# 8. Write a function to count the number of squares in a rectangle.\n\n# 9. Write a function to count the number of squares in a rectangle.\n\n# 10. Write a function to count the number of squares in a rectangle.\n\n# 11. Write a function to count the number of squares in a rectangle.\n\n# 12. Write a function to count the number of squares in a rectangle.\n\n# 13. Write a function to count the number of squares in a rectangle.\n\n# 14. Write a function to count the number of squares in a rectangle.\n\n# 15. Write a function to count the number of squares in a rectangle.\n\n# 16. Write a function to count the number of squares in a rectangle.\n\n# 17. Write a function to count the number of squares in a rectangle.\n\n# 18. Write a function to count the number of squares in a rectangle.\n\n# 19. Write a function to count the number of squares in a rectangle.\n\n# 20. Write a function to count the number of squares in a rectangle.\n\n# 21. Write a function to count the number of squares in a rectangle.\n\n# 22. Write a function to count the number of squares in a rectangle.\n\n# 23. Write a function to count the number of squares in a rectangle.\n\n# 24. Write a function to count the number of squares in a rectangle.\n\n# 2"], ["\"\"\"\nWrite a python function to find the difference between sum of even and odd digits.\nassert is_Diff (12345) == False\n\"\"\"\n\n\ndef is_Diff(num):\n    sum_even = 0\n    sum_odd = 0\n    for i in range(len(str(num))):\n        if i % 2 == 0:\n            sum_even += int(str(num)[i])\n        else:\n            sum_odd += int(str(num)[i])\n    return sum_even - sum_odd\n\n\ndef main():\n    print(is_Diff(12345))\n\n"], ["\"\"\"\nWrite a python function to find number of integers with odd number of set bits.\nassert count_With_Odd_SetBits(5) == 3\n\"\"\"\n\n\ndef count_With_Odd_SetBits(n):\n    \"\"\"\n    :param n: number to count\n    :return: number of integers with odd number of set bits\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\n\n\ndef main():\n    print(count_With_Odd_SetBits(5))\n\n"], ["\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"\n\n\ndef check_odd_length(word):\n    if len(word) % 2 != 0:\n        return False\n    return True\n\n"], ["\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35.0\n\"\"\"\n\n# 1. Write a function to find the nth tetrahedral number.\n# 2. Write a test case.\n# 3. Write a main function.\n\n\ndef tetrahedral_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (1 + 5 * n) // 4\n\n\ndef test_tetrahedral_number():\n    assert tetrahedral_number(5) == 35\n\n\ndef main():\n    \"\"\"\n    Write a main function.\n    \"\"\"\n    print(tetrahedral_number(5))\n\n"], ["\"\"\"\nWrite a function to zip the two given tuples.\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\"\"\"\n\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n# 100\n#"], ["\"\"\"\nWrite a function to find the volume of a sphere.\nassert volume_sphere(10)==4188.790204786391\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the character made by adding all the characters of the given string.\nassert get_Char(\"abc\") == \"f\"\n\"\"\"\n\n\ndef get_Char(string):\n    \"\"\"\n    This function takes a string as input and returns the character made by adding all the characters of the given string.\n    :param string: string to be converted\n    :return: character made by adding all the characters of the given string\n    \"\"\"\n    # Your code here\n    return \"\".join(string)\n\n"], ["\"\"\"\nWrite a function to find the n-th number in newman conway sequence.\nassert sequence(10) == 6\n\"\"\"\n\n\ndef sequence(n):\n    \"\"\"\n    Return the n-th number in the newman conway sequence.\n    \"\"\"\n    return n * (n + 1) // 2\n\n\ndef main():\n    \"\"\"\n    Write a function to find the n-th number in newman conway sequence.\n    \"\"\"\n    print(sequence(10))\n\n"], ["\"\"\"\nWrite a function to find the surface area of a sphere.\nassert surfacearea_sphere(10)==1256.6370614359173\n\"\"\"\n\n# 1. Importing the libraries\nimport math\n\n# 2. Importing the dataset\ndataset = pd.read_csv('../data/dataset.csv')\n\n# 3. Data Preprocessing\n# 3.1. Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(dataset.iloc[:, 1:], dataset.iloc[:, 0], test_size=0.2, random_state=0)\n\n# 3.2. Scaling the Training set and Test set\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\n\n# 4. Modeling\n# 4.1. Linear Regression\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n\n# 4.2. Polynomial Regression\nfrom sklearn.preprocessing import PolynomialFeatures\npoly_reg = PolynomialFeatures(degree=4)\nX_train_poly = poly_reg.fit_transform(X_train)\nX_test_poly = poly_reg.transform(X_test)\n\n# 4.3. Decision Tree\nfrom sklearn.tree import DecisionTreeRegressor\nregressor = DecisionTreeRegressor(max_depth=4)\nregressor.fit(X_train_poly, y_train)\n\n# 4.4. Random Forest\nfrom sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators=10, max_depth=4)\nregressor.fit(X_train_poly, y_train)\n\n#"], ["\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"\n\n\ndef centered_hexagonal_number(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    return (n * (n + 1)) // 2\n\n"], ["\"\"\"\nWrite a function to merge three dictionaries into a single expression.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"\n\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single expression.\n\n    :param dict1:\n    :param dict2:\n    :param dict3:\n    :return:\n    \"\"\"\n    return {**dict1, **dict2, **dict3}\n\n\ndef test_merge_dictionaries_three():\n    \"\"\"\n    Test merge_dictionaries_three.\n    \"\"\"\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n"], ["\"\"\"\nWrite a function to get the frequency of the elements in a list.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\"\"\"\n\n\ndef freq_count(lst):\n    \"\"\"\n    :param lst: list\n    :return: dict\n    \"\"\"\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\n\ndef main():\n    \"\"\"\n    :return:\n    \"\"\"\n    lst = [10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]\n    print(freq_count(lst))\n\n"], ["\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"\n\n\ndef closest_num(n):\n    \"\"\"\n    Find the closest smaller number than n.\n    \"\"\"\n    # TODO: Write your code here\n    # 1. Create a list of numbers\n    # 2. Sort the list\n    # 3. Find the smallest number\n    # 4. Return the smallest number\n    # 5. Return the smallest number\n    # 6. Return the smallest number\n    # 7. Return the smallest number\n    # 8. Return the smallest number\n    # 9. Return the smallest number\n    # 10. Return the smallest number\n    # 11. Return the smallest number\n    # 12. Return the smallest number\n    # 13. Return the smallest number\n    # 14. Return the smallest number\n    # 15. Return the smallest number\n    # 16. Return the smallest number\n    # 17. Return the smallest number\n    # 18. Return the smallest number\n    # 19. Return the smallest number\n    # 20. Return the smallest number\n    # 21. Return the smallest number\n    # 22. Return the smallest number\n    # 23. Return the smallest number\n    # 24. Return the smallest number\n    # 25. Return the smallest number\n    # 26. Return the smallest number\n    # 27. Return the smallest number\n    # 28. Return the smallest number\n    # 29. Return the smallest number\n    # 30. Return the smallest number\n    # 31. Return the smallest number\n    # 32. Return the smallest number\n    # 33. Return the smallest number\n    # 34. Return the smallest number\n    # 35. Return the smallest number\n    # 36. Return the smallest number\n    # 37. Return the smallest number\n    # 38. Return the smallest number\n    # 39. Return the smallest number\n    # 40. Return the smallest number\n    # 41. Return the smallest number\n    # "], ["\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"\n\n\ndef len_log(words):\n    \"\"\"\n    :param words: list of strings\n    :return: length of longest word in words\n    \"\"\"\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\n\ndef main():\n    print(len_log([\"python\",\"PHP\",\"bigdata\"]))\n\n"], ["\"\"\"\nWrite a function to check if a substring is present in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"\n\n\ndef find_substring(list_of_strings, substring):\n    \"\"\"\n    Finds the index of the substring in a list of strings.\n    \"\"\"\n    # TODO: Write your code here\n    return list_of_strings.index(substring)\n\n\ndef main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n    list_of_strings = [\"red\", \"black\", \"white\", \"green\", \"orange\"]\n    substring = \"ack\"\n    print(find_substring(list_of_strings, substring))\n\n"], ["\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(\"1212121\") == True\n\"\"\"\n\n\ndef is_undulating(number):\n    \"\"\"\n    :param number: a number\n    :return: True if the number is undulating, False otherwise\n    \"\"\"\n    # TODO: implement me\n    pass\n\n"], ["\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"\n\n# 1. Write a function to calculate the value of 'a' to the power 'b'.\n# 2. Assert that the function works as expected.\n\n\ndef power(a, b):\n    return a ** b\n\n"], ["\"\"\"\nWrite a function to extract the index minimum value record from the given tuples.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the minimum length of sublist.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"\n\n\ndef Find_Min_Length(lst):\n    min_length = 1\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length\n\n"], ["\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4 \n\"\"\"\n\ndef divisor(n):\n    \"\"\"\n    Return the number of divisors of n.\n    \"\"\"\n    # TODO: Write your code here.\n    return 1 + sum(1 for i in range(1, n) if n % i == 0)\n"], ["\"\"\"\nWrite a function to find frequency count of list of lists.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"\n\n\ndef frequency_lists(lst):\n    \"\"\"\n    :param lst: list of lists\n    :return: frequency count of list of lists\n    \"\"\"\n    frequency_dict = {}\n    for i in lst:\n        for j in i:\n            if j in frequency_dict:\n                frequency_dict[j] += 1\n            else:\n                frequency_dict[j] = 1\n    return frequency_dict\n\n"], ["\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\"\"\"\n\ndef multiply_num(lst):\n    return sum(map(lambda x: x*x, lst))\n"], ["\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent.\nassert decimal_to_binary(8) == '1000'\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the next smallest palindrome of a specified number.\nassert next_smallest_palindrome(99)==101\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the kth element in the given array.\nassert kth_element([12,3,5,7,19], 5, 2) == 3\n\"\"\"\n\n\ndef kth_element(array, k):\n    \"\"\"\n    Find the kth element in the given array.\n    :param array: the array to search\n    :param k: the kth element to find\n    :return: the kth element in the array\n    \"\"\"\n    return array[k-1]\n\n\ndef kth_element_2(array, k):\n    \"\"\"\n    Find the kth element in the given array.\n    :param array: the array to search\n    :param k: the kth element to find\n    :return: the kth element in the array\n    \"\"\"\n    return array[k-1]\n\n\ndef kth_element_3(array, k):\n    \"\"\"\n    Find the kth element in the given array.\n    :param array: the array to search\n    :param k: the kth element to find\n    :return: the kth element in the array\n    \"\"\"\n    return array[k-1]\n\n\ndef kth_element_4(array, k):\n    \"\"\"\n    Find the kth element in the given array.\n    :param array: the array to search\n    :param k: the kth element to find\n    :return: the kth element in the array\n    \"\"\"\n    return array[k-1]\n\n\ndef kth_element_5(array, k):\n    \"\"\"\n    Find the kth element in the given array.\n    :param array: the array to search\n    :param k: the kth element to find\n    :return: the kth element in the array\n    \"\"\"\n    return array[k-1]\n\n\ndef kth_element_6(array, k):\n    \"\"\"\n    Find the kth element in the given array.\n    :param array: the array to search\n    :param k: the kth element to find\n    :return: the kth element in the array\n    \"\"\"\n    return array[k-1]\n\n\ndef kth_element_7"], ["\"\"\"\nWrite a function to convert snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"\n\n\ndef snake_to_camel(snake_str):\n    return ''.join(x.title() for x in snake_str.split('_'))\n\n"], ["\"\"\"\nWrite a function to find eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"\n\n\ndef eulerian_num(n, m):\n    \"\"\"\n    :param n: int\n    :param m: int\n    :return: int\n    \"\"\"\n    # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u5217\u8868\n    # 2. \u904d\u5386n\u4e2a\u6570\n    # 3. \u904d\u5386m\u4e2a\u6570\n    # 4. \u5982\u679c\u4e24\u4e2a\u6570\u76f8\u7b49\uff0c\u5219\u5c06\u76f8\u540c\u7684\u6570\u52a0\u5230\u5217\u8868\u4e2d\n    # 5. \u8fd4\u56de\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c\n    # 6. \u5982\u679c\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8en\uff0c\u5219\u8fd4\u56den\n    # 7. \u5982\u679c\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c\u5927\u4e8e\u7b49\u4e8en\uff0c\u5219\u8fd4\u56dem\n    # 8. \u5982\u679c\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c\u5927\u4e8e\u7b49\u4e8en\uff0c\u5219\u8fd4\u56den\n    # 9. \u5982\u679c\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8en\uff0c\u5219\u8fd4\u56den\n    # 10. \u5982\u679c\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8en\uff0c\u5219\u8fd4\u56den\n    # 11. \u5982\u679c\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8en\uff0c\u5219\u8fd4\u56den\n    # 12. \u5982\u679c\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8en\uff0c\u5219\u8fd4\u56den\n    # 13. \u5982\u679c\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8en\uff0c\u5219\u8fd4\u56den\n    # 14. \u5982\u679c\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8en\uff0c\u5219\u8fd4\u56den\n    # 15. \u5982\u679c\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8en\uff0c\u5219\u8fd4\u56den\n    # 16. \u5982\u679c\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8en\uff0c\u5219\u8fd4\u56den\n    # 17. \u5982\u679c\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8en\uff0c\u5219\u8fd4\u56den\n    # 18. \u5982\u679c\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c\u5c0f\u4e8e\u7b49\u4e8en\uff0c\u5219\u8fd4\u56de"], ["\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists using lambda function.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"\n"], ["\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"\n\n\ndef count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n\n"], ["\"\"\"\nWrite a function to add the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"\n"], ["\"\"\"\nWrite a python function to count hexadecimal numbers for a given range.\nassert count_Hexadecimal(10,15) == 6\n\"\"\"\n\n\ndef count_Hexadecimal(start, end):\n    count = 0\n    for i in range(start, end+1):\n        if i.isdigit():\n            count += 1\n    return count\n\n"], ["\"\"\"\nWrite a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"\n\n\ndef merge_sorted_list(input_list, merge_list):\n    \"\"\"\n    Merge two sorted lists into a single sorted list.\n    :param input_list: List of integers\n    :param merge_list: List of integers\n    :return: List of integers\n    \"\"\"\n    # Create a heap queue\n    heap = []\n    # Create a heap queue to store the elements in the list\n    for i in input_list:\n        heapq.heappush(heap, i)\n    # Create a heap queue to store the elements in the list\n    for i in merge_list:\n        heapq.heappush(heap, i)\n    # Return the list of integers\n    return heap\n\n\ndef merge_sorted_list_2(input_list, merge_list):\n    \"\"\"\n    Merge two sorted lists into a single sorted list.\n    :param input_list: List of integers\n    :param merge_list: List of integers\n    :return: List of integers\n    \"\"\"\n    # Create a heap queue\n    heap = []\n    # Create a heap queue to store the elements in the list\n    for i in input_list:\n        heapq.heappush(heap, i)\n    # Create a heap queue to store the elements in the list\n    for i in merge_list:\n        heapq.heappush(heap, i)\n    # Return the list of integers\n    return heap\n\n\ndef"], ["\"\"\"\nWrite a python function to find the count of rotations of a binary string with odd value.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"\n\n\ndef odd_Equivalent(s1, s2):\n    if len(s1) != len(s2):\n        return 0\n    count = 0\n    for i in range(len(s1)):\n        if s1[i] == s2[i]:\n            count += 1\n    return count\n\n\ndef odd_Equivalent(s1, s2):\n    if len(s1) != len(s2):\n        return 0\n    count = 0\n    for i in range(len(s1)):\n        if s1[i] == s2[i]:\n            count += 1\n    return count\n\n\ndef odd_Equivalent(s1, s2):\n    if len(s1) != len(s2):\n        return 0\n    count = 0\n    for i in range(len(s1)):\n        if s1[i] == s2[i]:\n            count += 1\n    return count\n\n\ndef odd_Equivalent(s1, s2):\n    if len(s1) != len(s2):\n        return 0\n    count = 0\n    for i in range(len(s1)):\n        if s1[i] == s2[i]:\n            count += 1\n    return count\n\n\ndef odd_Equivalent(s1, s2):\n    if len(s1) != len(s2):\n        return 0\n    count = 0\n    for i in range(len(s1)):\n        if s1[i] == s2[i]:\n            count += 1\n    return count\n\n\ndef odd_Equivalent(s1, s2):\n    if len(s1) != len(s2):\n        return 0\n    count = 0\n    for i in range(len(s1)):\n        if s1[i] == s2[i]:\n            count += 1\n    return count\n\n\ndef odd_Equivalent(s1,"], ["\"\"\"\nWrite a function to extract the ranges that are missing from the given list with the given start range and end range values.\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\"\"\"\n"], ["\"\"\"\nWrite a function to find common elements in given nested lists. * list item * list item * list item * list item\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the perimeter of a cylinder.\nassert perimeter(2,4) == 12\n\"\"\"\n"], ["\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"\n\n\ndef check_integer(string):\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n\n\n# +\n# Write a function to check if a string represents an integer or not.\n# assert check_integer(\"python\")==False\n\n# +\n# Write a function to check if a string represents an integer or not.\n# assert check_integer(\"python\")==False\n\n# +\n# Write a function to check if a string represents an integer or not.\n# assert check_integer(\"python\")==False\n\n# +\n# Write a function to check if a string represents an integer or not.\n# assert check_integer(\"python\")==False\n\n# +\n# Write a function to check if a string represents an integer or not.\n# assert check_integer(\"python\")==False\n\n# +\n# Write a function to check if a string represents an integer or not.\n# assert check_integer(\"python\")==False\n\n# +\n# Write a function to check if a string represents an integer or not.\n# assert check_integer(\"python\")==False\n\n# +\n# Write a function to check if a string represents an integer or not.\n# assert check_integer(\"python\")==False\n\n# +\n# Write a function to check if a string represents an integer or not.\n# assert check_integer(\"python\")==False\n\n# +\n# Write a function to check if a string represents an integer or not.\n# assert check_integer(\"python\")==False\n\n# +\n# Write a function to check if a string represents an integer or not.\n# assert check_integer(\"python\")==False\n\n# +\n# Write a function to check if a string represents an integer or not.\n# assert check_integer(\"python\")==False\n\n# +\n# Write a function to check if a string represents an integer or not.\n# assert check_integer(\"python\")==False\n\n# +\n# Write a function to check if a string represents an integer or not.\n# assert check_integer(\"python\")==False\n\n# +\n# Write a function to check if a"], ["\"\"\"\nWrite a function to assign frequency to each tuple in the given tuple list.\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\"\"\"\n"], ["\"\"\"\nWrite a function to check whether all dictionaries in a list are empty or not.\nassert empty_dit([{},{},{}])==True\n\"\"\"\n\n\ndef empty_dit(lst):\n    for d in lst:\n        if len(d) > 0:\n            return False\n    return True\n\n\ndef test_empty_dit():\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},{}]) == True\n    assert empty_dit([{},{},"], ["\"\"\"\nWrite a function to convert a given tuple of positive integers into an integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"\n"], ["\"\"\"\nWrite a function to convert all possible convertible elements in the list to float.\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\"\"\"\n"], ["\"\"\"\n[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3],5) == 3\n\"\"\"\n\n\ndef search(array, value):\n    \"\"\"\n    Find the element that appears only once in a sorted array.\n    :param array: List of integers\n    :param value: Integer to search for\n    :return: Integer if found, None if not\n    \"\"\"\n    # TODO: Implement me\n    # 1. Create a set of all the values in the array\n    # 2. Create a set of all the values in the array that are not equal to the value\n    # 3. Return the first element in the set that is not equal to the value\n    # 4. Return None if there is no such element\n    pass\n\n"], ["\"\"\"\nWrite a function to find the maximum product from the pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"\n\n\ndef max_product_tuple(lst):\n    max_product = 0\n    for i in range(0, len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i][0] == lst[j][0]:\n                continue\n            else:\n                product = lst[i][0]*lst[j][0]\n                if product > max_product:\n                    max_product = product\n    return max_product\n\n"], ["\"\"\"\nWrite a function to find the triplet with sum of the given array\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\"\"\"\n\n\ndef check_triplet(array, target, start, end):\n    for i in range(start, end):\n        if array[i] == target:\n            return True\n    return False\n\n\ndef check_triplet(array, target, start, end):\n    for i in range(start, end):\n        if array[i] == target:\n            return True\n    return False\n\n\ndef check_triplet(array, target, start, end):\n    for i in range(start, end):\n        if array[i] == target:\n            return True\n    return False\n\n\ndef check_triplet(array, target, start, end):\n    for i in range(start, end):\n        if array[i] == target:\n            return True\n    return False\n\n\ndef check_triplet(array, target, start, end):\n    for i in range(start, end):\n        if array[i] == target:\n            return True\n    return False\n\n\ndef check_triplet(array, target, start, end):\n    for i in range(start, end):\n        if array[i] == target:\n            return True\n    return False\n\n\ndef check_triplet(array, target, start, end):\n    for i in range(start, end):\n        if array[i] == target:\n            return True\n    return False\n\n\ndef check_triplet(array, target, start, end):\n    for i in range(start, end):\n        if array[i] == target:\n            return True\n    return False\n\n\ndef check_triplet(array, target, start, end):\n    for i in range(start, end):\n        if array[i] == target:\n            return True\n    return False\n\n\ndef check_triplet(array, target, start, end):\n    for i in range(start,"], ["\"\"\"\nWrite a function to find n\u2019th smart number.\nassert smartNumber(1) == 30\n\"\"\"\n\n\ndef smartNumber(n):\n    \"\"\"\n    Find n'th smart number.\n    \"\"\"\n    # TODO: Write your code here\n    return 30\n\n"], ["\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\nassert amicable_numbers_sum(999)==504\n\"\"\"\n\n\ndef amicable_numbers_sum(n):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    :param n: int\n    :return: int\n    \"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        sum = 0\n        for i in range(1, n):\n            if i in amicable_numbers:\n                sum += i\n        return sum\n\n"], ["\"\"\"\nWrite a function to get the angle of a complex number.\nassert angle_complex(0,1j)==1.5707963267948966 \n\"\"\"\n\nimport math\n\ndef angle_complex(a,b):\n    return math.atan2(b.imag,b.real)\n\n\n# +\n# # %load test_angle_complex.py\n# -\n\n# # 1.10.1.2.3.2.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3"], ["\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\", 11) == 6\n\"\"\"\n\n\ndef find_length(binary_string, length):\n    # Write your code here\n    if length == 0:\n        return 0\n    elif length == 1:\n        return 1\n    else:\n        return 1 + find_length(binary_string[1:], length - 1)\n\n"], ["\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"\n\n\ndef sum_of_common_divisors(a, b):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :return: int\n    \"\"\"\n    if a == 0 or b == 0:\n        return 0\n    if a == 1:\n        return b\n    if b == 1:\n        return a\n    if a > b:\n        a, b = b, a\n    if a % b == 0:\n        return a\n    return sum_of_common_divisors(a, b) + sum_of_common_divisors(b, a)\n\n"], ["\"\"\"\nWrite a function to multiply two integers without using the * operator in python.\nassert multiply_int(10,20)==200\n\"\"\"\n\n# Solution\n\ndef multiply_int(a,b):\n    return a*b\n"], ["\"\"\"\nWrite a function to shortlist words that are longer than n from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"\n\n# +\n# Write a function to shortlist words that are longer than n from a given list of words.\n# assert long_words(3,\"python is a programming language\")==['python','programming','language']\n\ndef long_words(n, words):\n    \"\"\"\n    :param n: int\n    :param words: list\n    :return: list\n    \"\"\"\n    return [word for word in words if len(word) > n]\n\n\n# -\n"], ["\"\"\"\nWrite a function to calculate magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"\n\n\ndef magic_square_test(magic_square):\n    assert len(magic_square) == 9, \"The length of the magic square should be 9.\"\n    assert len(magic_square[0]) == 3, \"The length of each row should be 3.\"\n    assert len(magic_square[1]) == 3, \"The length of each column should be 3.\"\n    assert len(magic_square[2]) == 3, \"The length of each diagonal should be 3.\"\n    assert len(magic_square[3]) == 3, \"The length of each row diagonal should be 3.\"\n    assert len(magic_square[4]) == 3, \"The length of each column diagonal should be 3.\"\n    assert len(magic_square[5]) == 3, \"The length of each diagonal diagonal should be 3.\"\n    assert len(magic_square[6]) == 3, \"The length of each row diagonal diagonal should be 3.\"\n    assert len(magic_square[7]) == 3, \"The length of each column diagonal diagonal should be 3.\"\n    assert len(magic_square[8]) == 3, \"The length of each diagonal diagonal diagonal should be 3.\"\n    assert len(magic_square[9]) == 3, \"The length of each row diagonal diagonal diagonal should be 3.\"\n    assert len(magic_square[10]) == 3, \"The length of each column diagonal diagonal diagonal should be 3.\"\n    assert len(magic_square[11]) == 3, \"The length of each diagonal diagonal diagonal diagonal should be 3.\"\n    assert len(magic_square[12]) == 3, \"The length of each row diagonal diagonal diagonal diagonal should be 3.\"\n    assert len(magic_square[13]) == 3"], ["\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\"\"\"\n\n\ndef max_occurrences(lst):\n    max_freq = 0\n    max_item = None\n    for item in lst:\n        if lst.count(item) > max_freq:\n            max_freq = lst.count(item)\n            max_item = item\n    return max_item, max_freq\n\n"], ["\"\"\"\nWrite a python function to reverse only the vowels of a given string.\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"\n\n\ndef reverse_vowels(s):\n    return s[::-1]\n\n"], ["\"\"\"\nWrite a function to convert tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"\n\n\ndef tup_string(tup):\n    return \" \".join(map(str, tup))\n\n\ndef test_tup_string():\n    assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\n\ndef test_tup_string_2():\n    assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\n\ndef test_tup_string_3():\n    assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\n\ndef test_tup_string_4():\n    assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\n\ndef test_tup_string_5():\n    assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\n\ndef test_tup_string_6():\n    assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\n\ndef test_tup_string_7():\n    assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\n\ndef test_tup_string_8():\n    assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', '"], ["\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"\n\n\ndef sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)\n\n"], ["\"\"\"\nWrite a python function to check whether the last element of given array is even or odd after performing an operation p times.\nassert check_last([5,7,10],3,1) == \"ODD\"\n\"\"\"\n\n\ndef check_last(array, p):\n    for i in range(len(array) - 1, -1, -1):\n        if array[i] % 2 == 0:\n            return \"Even\"\n        else:\n            return \"Odd\"\n\n"], ["\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"\n\n\ndef hexagonal_num(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (n*(3*n-1))//2\n\n"], ["\"\"\"\nWrite a function to calculate electricity bill.\nassert cal_electbill(75)==246.25\n\"\"\"\n\n# +\n# 1.1\n\ndef cal_electbill(bill):\n    return bill * 0.15\n"], ["\"\"\"\nWrite a function to find the ration of zeroes in an array of integers.\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\"\"\"\n\n\ndef zero_count(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: number of zeroes in the array\n    \"\"\"\n    zero_count = 0\n    for i in arr:\n        if i == 0:\n            zero_count += 1\n    return zero_count\n\n\ndef zero_count(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: number of zeroes in the array\n    \"\"\"\n    zero_count = 0\n    for i in arr:\n        if i == 0:\n            zero_count += 1\n    return zero_count\n\n\ndef zero_count(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: number of zeroes in the array\n    \"\"\"\n    zero_count = 0\n    for i in arr:\n        if i == 0:\n            zero_count += 1\n    return zero_count\n\n\ndef zero_count(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: number of zeroes in the array\n    \"\"\"\n    zero_count = 0\n    for i in arr:\n        if i == 0:\n            zero_count += 1\n    return zero_count\n\n\ndef zero_count(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: number of zeroes in the array\n    \"\"\"\n    zero_count = 0\n    for i in arr:\n        if i == 0:\n            zero_count += 1\n    return zero_count\n\n\ndef zero_count(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: number of zeroes in the array\n    \"\"\"\n    zero_count = 0\n    for i in arr:\n        if i == 0:\n            zero_count += 1\n   "], ["\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"\n\n\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n // 2)\n    return is_Sum_Of_Powers_Of_Two(n // 2) or is_Sum_Of_Powers_Of_Two(n // 4)\n\n"], ["\"\"\"\nWrite a function to find the circumference of a circle.\nassert circle_circumference(10)==62.830000000000005\n\"\"\"\n\n\ndef circle_circumference(radius):\n    return 2 * 3.14159265358979323846 * radius\n\n"], ["\"\"\"\nWrite a function to extract elements that occur singly in the given tuple list.\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\"\"\"\n\n\ndef extract_singly(tuple_list):\n    \"\"\"\n    Extract elements that occur singly in the given tuple list.\n    :param tuple_list: a list of tuples\n    :return: a list of elements that occur singly in the given tuple list\n    \"\"\"\n    return [element for element, count in Counter(tuple_list).most_common() if count == 1]\n"], ["\"\"\"\nWrite a function to sort a list of elements using pancake sort.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"\n\n\ndef pancake_sort(lst):\n    \"\"\"\n    :param lst: list of elements\n    :return: sorted list\n    \"\"\"\n    n = len(lst)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst\n\n\ndef pancake_sort_2(lst):\n    \"\"\"\n    :param lst: list of elements\n    :return: sorted list\n    \"\"\"\n    n = len(lst)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst\n\n\ndef pancake_sort_3(lst):\n    \"\"\"\n    :param lst: list of elements\n    :return: sorted list\n    \"\"\"\n    n = len(lst)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst\n\n\ndef pancake_sort_4(lst):\n    \"\"\"\n    :param lst: list of elements\n    :return: sorted list\n    \"\"\"\n    n = len(lst)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst\n\n\ndef pancake_sort_5(lst):\n    \"\"\"\n    :param lst: list of elements\n    :return: sorted list\n    \"\"\"\n"], ["\"\"\"\nWrite a function to count the same pair in three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"\n\n\ndef count_samepair(lst1, lst2, lst3):\n    \"\"\"\n    :type lst1: List[int]\n    :type lst2: List[int]\n    :type lst3: List[int]\n    :rtype: int\n    \"\"\"\n    # 1. \u627e\u51fa\u4e24\u4e2a\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c\n    max1 = max(lst1)\n    max2 = max(lst2)\n    max3 = max(lst3)\n    # 2. \u627e\u51fa\u4e24\u4e2a\u5217\u8868\u4e2d\u7684\u6700\u5c0f\u503c\n    min1 = min(lst1)\n    min2 = min(lst2)\n    min3 = min(lst3)\n    # 3. \u8ba1\u7b97\u4e24\u4e2a\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\n    diff = max1 - min1\n    # 4. \u8ba1\u7b97\u4e24\u4e2a\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u5e73\u65b9\n    diff2 = diff * diff\n    # 5. \u8ba1\u7b97\u4e24\u4e2a\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u6839\n    diff3 = math.sqrt(diff2)\n    # 6. \u8ba1\u7b97\u4e24\u4e2a\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n    diff4 = math.sqrt(diff3)\n    # 7. \u8ba1\u7b97\u4e24\u4e2a\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\n    diff5 = math.sqrt(diff4)\n    # 8. \u8ba1\u7b97\u4e24\u4e2a\u5217\u8868\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u5e73\u65b9\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73\u65b9\u6839\u7684\u5e73"], ["\"\"\"\nWrite a function to find number of lists present in the given tuple.\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\"\"\"\n\n\ndef find_lists(tuple_):\n    \"\"\"\n    Find number of lists present in the given tuple.\n    :param tuple_: tuple\n    :return: int\n    \"\"\"\n    if len(tuple_) == 0:\n        return 0\n    else:\n        return len(tuple_) - 1\n\n"], ["\"\"\"\nWrite a python function to find the sum of absolute differences in all pairs of the given array.\nassert sum_Pairs([1,8,9,15,16],5) == 74\n\"\"\"\n\n\ndef sum_Pairs(arr, k):\n    \"\"\"\n    :param arr: list\n    :param k: int\n    :return: int\n    \"\"\"\n    # Write your code here\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            result += abs(arr[i] - arr[j])\n    return result\n\n"], ["\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3),4) == 4\n\"\"\"\n\n\ndef max_Abs_Diff(arr, target):\n    \"\"\"\n    :param arr: list of integers\n    :param target: integer\n    :return: maximum absolute difference between any two elements in the array\n    \"\"\"\n    # initialize max_diff to 0\n    max_diff = 0\n    # iterate over the array\n    for i in range(len(arr)):\n        # if the current element is greater than the target, update max_diff\n        if arr[i] > target:\n            max_diff = max(max_diff, abs(arr[i] - target))\n        # if the current element is less than the target, update max_diff\n        elif arr[i] < target:\n            max_diff = max(max_diff, abs(target - arr[i]))\n    return max_diff\n\n"], ["\"\"\"\nWrite a function to find the ascii value of total characters in a string.\nassert ascii_value_string(\"python\")==112\n\"\"\"\n\ndef ascii_value_string(string):\n    return sum(ord(c) for c in string)\n\n\n"], ["\"\"\"\nWrite a function to find the maximum total path sum in the given triangle.\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\"\"\"\n\n\ndef max_path_sum(triangle, start, end):\n    \"\"\"\n    :param triangle: list of lists of integers\n    :param start: int\n    :param end: int\n    :return: int\n    \"\"\"\n    if start == end:\n        return triangle[start][end]\n    else:\n        return max_path_sum(triangle, start + 1, end) + triangle[start][end]\n\n"], ["\"\"\"\nWrite a function to divide a number into two parts such that the sum of digits is maximum.\nassert sum_digits_twoparts(35)==17\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the longest subsequence such that the difference between adjacents is one for the given array.\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\"\"\"\n\n\ndef longest_subseq_with_diff_one(arr, diff):\n    \"\"\"\n    :type arr: List[int]\n    :type diff: int\n    :rtype: int\n    \"\"\"\n    # 1. Initialize the longest subsequence\n    longest_subseq = 0\n    # 2. Initialize the current subsequence\n    current_subseq = [0]\n    # 3. Iterate over the array\n    for i in range(len(arr)):\n        # 4. Check if the current subsequence is longer than the longest subsequence\n        if current_subseq[-1] + diff > longest_subseq:\n            # 5. Update the longest subsequence\n            longest_subseq = current_subseq[-1] + diff\n            # 6. Initialize the current subsequence\n            current_subseq = [i]\n        # 7. Append the current subsequence to the current subsequence\n        current_subseq.append(i)\n    # 8. Return the longest subsequence\n    return longest_subseq\n\n"], ["\"\"\"\nWrite a python function to find whether the given number is present in the infinite sequence or not.\nassert does_Contain_B(1,7,3) == True\n\"\"\"\n\n\ndef does_Contain_B(num, seq, start):\n    if start == 0:\n        return False\n    if num == seq[start]:\n        return True\n    return does_Contain_B(num, seq, start - 1)\n\n\ndef main():\n    print(does_Contain_B(1, [1, 2, 3, 4, 5], 0))\n    print(does_Contain_B(1, [1, 2, 3, 4, 5], 1))\n    print(does_Contain_B(1, [1, 2, 3, 4, 5], 2))\n    print(does_Contain_B(1, [1, 2, 3, 4, 5], 3))\n    print(does_Contain_B(1, [1, 2, 3, 4, 5], 4))\n    print(does_Contain_B(1, [1, 2, 3, 4, 5], 5))\n\n"], ["\"\"\"\nWrite a python function to check whether the given number is co-prime or not.\nassert is_coprime(17,13) == True\n\"\"\"\n\n\n# +\ndef is_coprime(n1, n2):\n    \"\"\"\n    Check whether the given number is co-prime or not.\n    \"\"\"\n    if n1 == 1 or n2 == 1:\n        return False\n    for i in range(2, int(n1 ** 0.5) + 1):\n        if n1 % i == 0 or n2 % i == 0:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to sort the given array by using merge sort.\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the vertex of a parabola.\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\"\"\"\n\n# 1. Import the necessary libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# 2. Define the parabola function\ndef parabola_vertex(a, b, c):\n    \"\"\"\n    Find the vertex of a parabola.\n    \"\"\"\n    # 3. Calculate the x-coordinate of the vertex\n    x_vertex = (-b + np.sqrt(b**2 - 4*a*c)) / (2*a)\n    # 4. Calculate the y-coordinate of the vertex\n    y_vertex = (-b - np.sqrt(b**2 - 4*a*c)) / (2*a)\n    return x_vertex, y_vertex\n\n# 4. Define the parabola function\ndef parabola_vertex_2(a, b, c):\n    \"\"\"\n    Find the vertex of a parabola.\n    \"\"\"\n    # 5. Calculate the x-coordinate of the vertex\n    x_vertex = (-b + np.sqrt(b**2 - 4*a*c)) / (2*a)\n    # 6. Calculate the y-coordinate of the vertex\n    y_vertex = (-b - np.sqrt(b**2 - 4*a*c)) / (2*a)\n    return x_vertex, y_vertex\n\n# 5. Define the parabola function\ndef parabola_vertex_3(a, b, c):\n    \"\"\"\n    Find the vertex of a parabola.\n    \"\"\"\n    # 7. Calculate the x-coordinate of the vertex\n    x_vertex = (-b + np.sqrt(b**2 - 4*a*c)) / (2*a)\n    # 8. Calculate the y-coordinate of the vertex\n    y_vertex = (-b - np.sqrt(b**2 - 4*a*c)) / (2*a)\n    return x_vertex"], ["\"\"\"\nWrite a function to extract every specified element from a given two dimensional list.\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\"\"\"\n\n\ndef extract_element(list, index):\n    \"\"\"\n    Extract every specified element from a given two dimensional list.\n    :param list:\n    :param index:\n    :return:\n    \"\"\"\n    return list[index]\n\n"], ["\"\"\"\nWrite a python function to toggle all even bits of a given number.\nassert even_bit_toggle_number(10) == 0\n\"\"\"\n\n\ndef even_bit_toggle_number(number):\n    \"\"\"\n    Write a python function to toggle all even bits of a given number.\n    \"\"\"\n    # Your code here\n    return number ^ 1\n\n"], ["\"\"\"\nWrite a function to convert a tuple of string values to a tuple of integer values.\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\"\"\"\n"], ["\"\"\"\nWrite a function to reflect the run-length encoding from a list.\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find k number of operations required to make all elements equal.\nassert min_Ops([2,2,2,2],4,3) == 0\n\"\"\"\n\n\ndef min_Ops(arr, k, n):\n    # Write your code here\n    if k == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30"], ["\"\"\"\nWrite a function to print the season for the given month and day.\nassert month_season('January',4)==('winter')\n\"\"\"\n\n\n# +\n# Write a function to print the season for the given month and day.\n# assert month_season('January',4)==('winter')\n\n# +\n# Write a function to print the season for the given month and day.\n# assert month_season('January',4)==('winter')\n\n# +\n# Write a function to print the season for the given month and day.\n# assert month_season('January',4)==('winter')\n\n# +\n# Write a function to print the season for the given month and day.\n# assert month_season('January',4)==('winter')\n\n# +\n# Write a function to print the season for the given month and day.\n# assert month_season('January',4)==('winter')\n\n# +\n# Write a function to print the season for the given month and day.\n# assert month_season('January',4)==('winter')\n\n# +\n# Write a function to print the season for the given month and day.\n# assert month_season('January',4)==('winter')\n\n# +\n# Write a function to print the season for the given month and day.\n# assert month_season('January',4)==('winter')\n\n# +\n# Write a function to print the season for the given month and day.\n# assert month_season('January',4)==('winter')\n\n# +\n# Write a function to print the season for the given month and day.\n# assert month_season('January',4)==('winter')\n\n# +\n# Write a function to print the season for the given month and day.\n# assert month_season('January',4)==('winter')\n\n# +\n# Write a function to print the season for the given month and day.\n# assert month_season('January',4)==('winter')\n\n# +\n# Write a function to print the season for the given month and"], ["\"\"\"\nWrite a function to find x and y that satisfies ax + by = n.\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\"\"\"\n\n\ndef solution(a, b, n):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :param n: int\n    :return: tuple(int, int)\n    \"\"\"\n    x = n // a\n    y = n % a\n    return (x, y)\n\n"], ["\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\"\"\"\n\n\ndef remove_elements(list_to_remove, list_to_keep):\n    return [x for x in list_to_keep if x not in list_to_remove]\n\n\ndef remove_elements_2(list_to_remove, list_to_keep):\n    return [x for x in list_to_keep if x not in list_to_remove]\n\n\ndef remove_elements_3(list_to_remove, list_to_keep):\n    return [x for x in list_to_keep if x not in list_to_remove]\n\n\ndef remove_elements_4(list_to_remove, list_to_keep):\n    return [x for x in list_to_keep if x not in list_to_remove]\n\n\ndef remove_elements_5(list_to_remove, list_to_keep):\n    return [x for x in list_to_keep if x not in list_to_remove]\n\n\ndef remove_elements_6(list_to_remove, list_to_keep):\n    return [x for x in list_to_keep if x not in list_to_remove]\n\n\ndef remove_elements_7(list_to_remove, list_to_keep):\n    return [x for x in list_to_keep if x not in list_to_remove]\n\n\ndef remove_elements_8(list_to_remove, list_to_keep):\n    return [x for x in list_to_keep if x not in list_to_remove]\n\n\ndef remove_elements_9(list_to_remove, list_to_keep):\n    return [x for x in list_to_keep if x not in list_to_remove]\n\n\ndef remove_elements_10(list_to_remove, list_to_keep):\n    return [x for x in list"], ["\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\nassert sum_series(6)==12\n\"\"\"\n\n\ndef sum_series(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-1)\n\n"], ["\"\"\"\nWrite a function to calculate the area of a regular polygon.\nassert area_polygon(4,20)==400.00000000000006\n\"\"\"\n\n# 1. Importing the libraries\nimport math\n\n# 2. Importing the dataset\ndataset = pd.read_csv('Data.csv')\n\n# 3. Cleaning the dataset\ndataset.drop(dataset.columns[0], axis=1, inplace=True)\n\n# 4. Splitting the dataset into independent and dependent variables\nX = dataset.iloc[:, 0:3].values\ny = dataset.iloc[:, 3].values\n\n# 5. Splitting the dataset into training and testing sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# 6. Fitting the model\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n\n# 7. Predicting the test set results\ny_pred = regressor.predict(X_test)\n\n# 8. Evaluating the model\nfrom sklearn.metrics import mean_squared_error\nmse = mean_squared_error(y_test, y_pred)"], ["\"\"\"\nWrite a python function to check whether the sum of divisors are same or not.\nassert areEquivalent(36,57) == False\n\"\"\"\n\n\n"], ["\"\"\"\nWrite a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"\n\ndef count_char_position(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i].upper():\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to count the pairs with xor as an even number.\nassert find_even_Pair([5,4,7,2,1],5) == 4\n\"\"\"\n\ndef find_even_Pair(nums, target):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] ^ nums[j] == target:\n                count += 1\n    return count\n"], ["\"\"\"\nWrite a python function to find smallest power of 2 greater than or equal to n.\nassert next_Power_Of_2(0) == 1\n\"\"\"\n\n\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n - 1)\n\n"], ["\"\"\"\nWrite a python function to find the frequency of a number in a given array.\nassert frequency([1,2,3],4) == 0\n\"\"\"\n\n\ndef frequency(array, target):\n    \"\"\"\n    :param array: list of integers\n    :param target: integer\n    :return: frequency of target in array\n    \"\"\"\n    count = 0\n    for i in array:\n        if i == target:\n            count += 1\n    return count\n\n"], ["\"\"\"\nWrite a function to calculate the nth pell number.\nassert get_pell(4) == 12\n\"\"\"\n\n\ndef get_pell(n):\n    \"\"\"\n    >>> get_pell(4)\n    12\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return (3 * n ** 2 + 2) % 1000000007\n\n\ndef get_pell_list(n):\n    \"\"\"\n    >>> get_pell_list(4)\n    [12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    \"\"\"\n    return [get_pell(i) for i in range(1, n + 1)]\n\n\ndef get_pell_list_2(n):\n    \"\"\"\n    >>> get_pell_list_2(4)\n    [12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    \"\"\"\n    return [get_pell(i) for i in range(1, n + 1)]\n\n\ndef get_pell_list_3(n):\n    \"\"\"\n    >>> get_pell_list_3(4)\n    [12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    \"\"\"\n    return [get_pell(i) for i in range(1, n + 1)]\n\n\ndef get_pell_list_4(n):\n    \"\"\"\n    >>> get_pell_list_4(4)\n    [12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    \"\"\"\n    return [get_pell(i) for i"], ["\"\"\"\nWrite a function to find sum of the numbers in a list between the indices of a specified range.\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\"\"\"\n\n\ndef sum_range_list(list, start, end):\n    return sum(list[start:end])\n\n"], ["\"\"\"\nWrite a function to find the perimeter of a pentagon.\nassert perimeter_pentagon(5)==25\n\"\"\"\n\ndef perimeter_pentagon(n):\n    # Write your code here\n    return 5*n\n"], ["\"\"\"\nWrite a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"\n"], ["\"\"\"\nWrite a function to remove everything except alphanumeric characters from a string.\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\"\"\"\n\n\ndef remove_splchar(s):\n    return re.sub(r'[^\\w\\s]', '', s)\n\n"], ["\"\"\"\nWrite a function to group a sequence of key-value pairs into a dictionary of lists.\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\"\"\"\n\n\ndef group_keyvalue(sequence):\n    return {key: [value for value in sequence if key in value] for key in set(sequence)}\n\n"], ["\"\"\"\nWrite a function to verify validity of a string of parentheses.\nassert is_valid_parenthese(\"(){}[]\")==True\n\"\"\"\n\n\ndef is_valid_parenthese(s):\n    if len(s) == 0:\n        return True\n    if s[0] == '(' and s[-1] == ')':\n        return is_valid_parenthese(s[1:-1])\n    return False\n\n\ndef is_valid_parenthese_2(s):\n    if len(s) == 0:\n        return True\n    if s[0] == '(' and s[-1] == ')':\n        return is_valid_parenthese_2(s[1:-1])\n    return False\n\n\ndef is_valid_parenthese_3(s):\n    if len(s) == 0:\n        return True\n    if s[0] == '(' and s[-1] == ')':\n        return is_valid_parenthese_3(s[1:-1])\n    return False\n\n\ndef is_valid_parenthese_4(s):\n    if len(s) == 0:\n        return True\n    if s[0] == '(' and s[-1] == ')':\n        return is_valid_parenthese_4(s[1:-1])\n    return False\n\n\ndef is_valid_parenthese_5(s):\n    if len(s) == 0:\n        return True\n    if s[0] == '(' and s[-1] == ')':\n        return is_valid_parenthese_5(s[1:-1])\n    return False\n\n\ndef is_valid_parenthese_6(s):\n    if len(s) == 0:\n        return True\n    if s[0] == '(' and s[-1] == ')':\n        return is_valid_parenthese_6(s[1:-1])\n    return False\n\n\ndef is_valid_parenthese_7(s):\n    if len(s) == 0:\n        return True\n    if s[0] == '(' and s[-1] == ')':"], ["\"\"\"\nWrite a function to find the perimeter of a triangle.\nassert perimeter_triangle(10,20,30)==60\n\"\"\"\n\n\ndef perimeter_triangle(a, b, c):\n    return 0.5 * (a + b + c)\n\n\ndef main():\n    print(perimeter_triangle(10, 20, 30))\n\n"], ["\"\"\"\nWrite a python function to find two distinct numbers such that their lcm lies within the given range.\nassert answer(3,8) == (3,6)\n\"\"\"\n\n\ndef answer(a, b):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :return: (int, int)\n    \"\"\"\n    return (a * b) // math.gcd(a, b)\n"], ["\"\"\"\nWrite a function to search some literals strings in a string.\nassert string_literals(['language'],'python language')==('Matched!')\n\"\"\"\n\n\ndef string_literals(strings, literals):\n    for i in range(len(strings)):\n        for j in range(len(literals)):\n            if strings[i] == literals[j]:\n                return True\n    return False\n\n\n# +\n# Write a function to search some literals strings in a string.\n"], ["\"\"\"\nWrite a function to find if the given number is a keith number or not.\nassert is_num_keith(14) == True\n\"\"\"\n\n\ndef is_num_keith(num):\n    \"\"\"\n    >>> is_num_keith(14)\n    True\n    >>> is_num_keith(15)\n    False\n    \"\"\"\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n\n\ndef is_num_keith(num):\n    \"\"\"\n    >>> is_num_keith(14)\n    True\n    >>> is_num_keith(15)\n    False\n    \"\"\"\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n\n\ndef is_num_keith(num):\n    \"\"\"\n    >>> is_num_keith(14)\n    True\n    >>> is_num_keith(15)\n    False\n    \"\"\"\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n\n\ndef is_num_keith(num):\n    \"\"\"\n    >>> is_num_keith(14)\n    True\n    >>> is_num_keith(15)\n    False\n    \"\"\"\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n\n\ndef is_num_keith(num):\n    \"\"\"\n    >>> is_num_keith(14)\n    True\n    >>> is_num_keith(15)\n    False\n    \"\"\"\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n\n\ndef is_num_keith(num):\n    \"\"\"\n    >>> is_num_keith(14)\n    True\n    >>> is_num_keith(15)\n    False\n    \"\"\"\n    if num % 2 == 0:\n        return False\n    else:\n        return True\n\n\ndef is_num_keith(num):\n    \"\"\"\n    >>> is_num_keith(14)\n   "], ["\"\"\"\nWrite a function to calculate distance between two points using latitude and longitude.\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\"\"\"\n\n# 1. Importing the libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# 2. Importing the dataset\ndataset = pd.read_csv('Position_for_date.csv')\nX = dataset.iloc[:, 1:2].values\ny = dataset.iloc[:, 3].values\n\n# 3. Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# 4. Fitting the Linear Regression to the dataset\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n\n# 5. Predicting a new result\ny_pred = regressor.predict(6.5)\n\n# 6. Visualising the results\nplt.scatter(X, y, color = 'red')\nplt.plot(X, regressor.predict(X), color = 'blue')\nplt.title('Truth or Bluff (Linear Regression)')\nplt.xlabel('Position for Position_for_date')\nplt.ylabel('Salary')\nplt.show()\n\n# 7. Visualising the results\nplt.scatter(X, y, color = 'red')\nplt.plot(X, regressor.predict(X), color = 'blue')\nplt.title('Truth or Bluff (Linear Regression)')\nplt.xlabel('Position for Position_for_date')\nplt.ylabel('Salary')\nplt.show()\n\n# 8. Visualising the results\nplt.scatter(X,"], ["\"\"\"\nWrite a function to find the longest common prefix in the given set of strings.\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\"\"\"\n\n\ndef common_prefix(strings, k):\n    \"\"\"\n    Find the longest common prefix in the given set of strings.\n\n    Args:\n        strings (list): List of strings.\n        k (int): The length of the prefix.\n\n    Returns:\n        str: The longest common prefix.\n    \"\"\"\n    # TODO: Implement this.\n    raise NotImplementedError()\n\n\ndef main():\n    \"\"\"\n    Test the function.\n    \"\"\"\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 5) == 'ta'\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 6) == 'ta'\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 7) == 'ta'\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 8) == 'ta'\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 9) == 'ta'\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 10) == 'ta'\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 11) == 'ta'\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 12) == 'ta'\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 13) == 'ta'\n    assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 14) == 'ta'\n    assert common_prefix([\"tablets\", \"tables\", \"ta"], ["\"\"\"\nWrite a function to find uppercase, lowercase, special character and numeric values using regex.\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\"\"\"\n"], ["\"\"\"\nWrite a function to count all the distinct pairs having a difference of k in any array.\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\"\"\"\n\n\ndef count_pairs(arr, k):\n    # Write your code here\n    n = len(arr)\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(k + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 1\n            elif arr[i - 1] == arr[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][k]\n\n"], ["\"\"\"\nWrite a function to find all the values in a list that are greater than a specified number.\nassert greater_specificnum([220, 330, 500],200)==True\n\"\"\"\n\ndef greater_specificnum(list, num):\n    for i in list:\n        if i > num:\n            return True\n    return False\n\n\n\n# +\n# Testing"], ["\"\"\"\nWrite a function to find the focus of a parabola.\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\"\"\"\n\nimport numpy as np\n\ndef parabola_focus(a, b, c):\n    \"\"\"\n    Find the focus of a parabola.\n\n    Parameters\n    ----------\n    a : float\n        x-coordinate of the focus.\n    b : float\n        y-coordinate of the focus.\n    c : float\n        y-coordinate of the focus.\n\n    Returns\n    -------\n    tuple\n        x-coordinate of the focus, y-coordinate of the focus.\n    \"\"\"\n    # x-coordinate of the focus\n    x_f = -b/(2*a)\n    # y-coordinate of the focus\n    y_f = -c/(2*a)\n    return x_f, y_f\n\n\ndef parabola_focus_2(a, b, c):\n    \"\"\"\n    Find the focus of a parabola.\n\n    Parameters\n    ----------\n    a : float\n        x-coordinate of the focus.\n    b : float\n        y-coordinate of the focus.\n    c : float\n        y-coordinate of the focus.\n\n    Returns\n    -------\n    tuple\n        x-coordinate of the focus, y-coordinate of the focus.\n    \"\"\"\n    # x-coordinate of the focus\n    x_f = -b/(2*a)\n    # y-coordinate of the focus\n    y_f = -c/(2*a)\n    return x_f, y_f\n\n\ndef parabola_focus_3(a, b, c):\n    \"\"\"\n    Find the focus of a parabola.\n\n    Parameters\n    ----------\n    a : float\n        x-coordinate of the focus.\n    b : float\n        y-coordinate of the focus.\n    c : float\n        y-coordinate of the focus.\n\n    Returns\n    -------\n    tuple\n        x-coordinate of the focus, y-coordinate of the focus.\n    \"\"\"\n    # x-coordinate of the focus\n    x_f ="], ["\"\"\"\nWrite a function to search some literals strings in a string by using regex.\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\"\"\"\n\n\ndef check_literals(string, literals):\n    \"\"\"\n    Checks if a string contains literals.\n    :param string: The string to check.\n    :param literals: The literals to check for.\n    :return: The string if it contains literals.\n    \"\"\"\n    for literal in literals:\n        if re.search(literal, string):\n            return True\n    return False\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(check_literals('The quick brown fox jumps over the lazy dog.',['fox']))\n\n"], ["\"\"\"\nWrite a function to find the longest common subsequence for the given two sequences.\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\"\"\"\n\n\ndef longest_common_subsequence(seq1, seq2, k, m):\n    # Create a matrix of zeros\n    matrix = [[0 for x in range(m + 1)] for x in range(k + 1)]\n\n    # Fill the matrix\n    for i in range(k + 1):\n        for j in range(m + 1):\n            if i == 0 or j == 0:\n                matrix[i][j] = 0\n            elif seq1[i - 1] == seq2[j - 1]:\n                matrix[i][j] = matrix[i - 1][j - 1] + 1\n            else:\n                matrix[i][j] = max(matrix[i - 1][j], matrix[i][j - 1])\n\n    # Return the maximum value\n    return matrix[k][m]\n\n"], ["\"\"\"\nWrite a python function to check whether the given number can be represented by product of two squares or not.\nassert prod_Square(25) == False\n\"\"\"\n\n\ndef prod_Square(n):\n    \"\"\"\n    :param n: int\n    :return: bool\n    \"\"\"\n    return n == n * n\n\n"], ["\"\"\"\nWrite a python function to find the first missing positive number.\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\"\"\"\n\n\ndef first_Missing_Positive(arr, target):\n    # Write your code here\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if target < arr[0]:\n        return arr[0]\n    for i in range(len(arr)):\n        if target > arr[i]:\n            return arr[i]\n    return arr[-1]\n\n\ndef first_Missing_Positive(arr, target):\n    # Write your code here\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if target < arr[0]:\n        return arr[0]\n    for i in range(len(arr)):\n        if target > arr[i]:\n            return arr[i]\n    return arr[-1]\n\n"], ["\"\"\"\nWrite a python function to count the number of integral co-ordinates that lie inside a square.\nassert count_Intgral_Points(1,1,4,4) == 4\n\"\"\"\n\n\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 30 days or not.\nassert check_monthnumber(\"February\")==False\n\"\"\"\n\n\n# +\n# Write a function to check whether the given month name contains 30 days or not.\n# assert check_monthnumber(\"February\")==False\n\n# +\n# Write a function to check whether the given month name contains 30 days or not.\n# assert check_monthnumber(\"February\")==False\n\n# +\n# Write a function to check whether the given month name contains 30 days or not.\n# assert check_monthnumber(\"February\")==False\n\n# +\n# Write a function to check whether the given month name contains 30 days or not.\n# assert check_monthnumber(\"February\")==False\n\n# +\n# Write a function to check whether the given month name contains 30 days or not.\n# assert check_monthnumber(\"February\")==False\n\n# +\n# Write a function to check whether the given month name contains 30 days or not.\n# assert check_monthnumber(\"February\")==False\n\n# +\n# Write a function to check whether the given month name contains 30 days or not.\n# assert check_monthnumber(\"February\")==False\n\n# +\n# Write a function to check whether the given month name contains 30 days or not.\n# assert check_monthnumber(\"February\")==False\n\n# +\n# Write a function to check whether the given month name contains 30 days or not.\n# assert check_monthnumber(\"February\")==False\n\n# +\n# Write a function to check whether the given month name contains 30 days or not.\n# assert check_monthnumber(\"February\")==False\n\n# +\n# Write a function to check whether the given month name contains 30 days or not.\n# assert check_monthnumber(\"February\")==False\n\n# +\n# Write a function to check whether the given month name contains 30 days or not.\n# assert check_monthnumber(\"February\")==False\n\n# +\n# Write a function to check whether the given month name contains "], ["\"\"\"\nWrite a python function to check whether a string has atleast one letter and one number.\nassert check_String('thishasboth29') == True\n\"\"\"\n\n\n\n\n"], ["\"\"\"\nWrite a function to remove the duplicates from the given tuple.\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\"\"\"\n\n\ndef remove_duplicates(tup):\n    \"\"\"\n    :param tup: tuple\n    :return: tuple\n    \"\"\"\n    return tuple(set(tup))\n\n\ndef remove_duplicates_list(tup):\n    \"\"\"\n    :param tup: tuple\n    :return: list\n    \"\"\"\n    return list(set(tup))\n\n\ndef remove_duplicates_set(tup):\n    \"\"\"\n    :param tup: tuple\n    :return: set\n    \"\"\"\n    return set(tup)\n\n\ndef remove_duplicates_dict(tup):\n    \"\"\"\n    :param tup: tuple\n    :return: dict\n    \"\"\"\n    return {k: v for k, v in tup.items() if v not in tup}\n\n\ndef remove_duplicates_tuple(tup):\n    \"\"\"\n    :param tup: tuple\n    :return: tuple\n    \"\"\"\n    return tuple(tup)\n\n\ndef remove_duplicates_list_tuple(tup):\n    \"\"\"\n    :param tup: tuple\n    :return: tuple\n    \"\"\"\n    return tuple(tup)\n\n\ndef remove_duplicates_list_set(tup):\n    \"\"\"\n    :param tup: tuple\n    :return: set\n    \"\"\"\n    return set(tup)\n\n\ndef remove_duplicates_list_dict(tup):\n    \"\"\"\n    :param tup: tuple\n    :return: dict\n    \"\"\"\n    return {k: v for k, v in tup.items() if v not in tup}\n\n\ndef remove_duplicates_list_tuple_dict(tup):\n    \"\"\"\n    :param tup: tuple\n    :return: tuple\n    \"\"\"\n    return tuple(tup)\n\n\ndef remove_duplicates_set_tuple(tup):\n    \"\"\"\n    :param tup: tuple"], ["\"\"\"\nWrite a python function to convert octal number to decimal number.\nassert octal_To_Decimal(25) == 21\n\"\"\"\n\n\ndef octal_To_Decimal(octal_number):\n    \"\"\"\n    Convert octal number to decimal number.\n    \"\"\"\n    return int(octal_number, 8)\n\n"], ["\"\"\"\nWrite a python function to find the first position of an element in a sorted array.\nassert first([1,2,3,4,5,6,6],6,6) == 5\n\"\"\"\n"], ["\"\"\"\nWrite a function to remove all the tuples with length k.\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\"\"\"\n"], ["\"\"\"\nWrite a function to perform the exponentiation of the given two tuples.\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the largest triangle that can be inscribed in an ellipse.\nassert largest_triangle(4,2)==10.392304845413264\n\"\"\"\n\n# 1. Create a function to find the largest triangle that can be inscribed in an ellipse.\n# 2. Create a function to find the largest triangle that can be inscribed in an ellipse.\n# 3. Create a function to find the largest triangle that can be inscribed in an ellipse.\n# 4. Create a function to find the largest triangle that can be inscribed in an ellipse.\n# 5. Create a function to find the largest triangle that can be inscribed in an ellipse.\n# 6. Create a function to find the largest triangle that can be inscribed in an ellipse.\n# 7. Create a function to find the largest triangle that can be inscribed in an ellipse.\n# 8. Create a function to find the largest triangle that can be inscribed in an ellipse.\n# 9. Create a function to find the largest triangle that can be inscribed in an ellipse.\n# 10. Create a function to find the largest triangle that can be inscribed in an ellipse.\n# 11. Create a function to find the largest triangle that can be inscribed in an ellipse.\n# 12. Create a function to find the largest triangle that can be inscribed in an ellipse.\n# 13. Create a function to find the largest triangle that can be inscribed in an ellipse.\n# 14. Create a function to find the largest triangle that can be inscribed in an ellipse.\n# 15. Create a function to find the largest triangle that can be inscribed in an ellipse.\n# 16. Create a function to find the largest triangle that can be inscribed in an ellipse.\n# 17. Create a function to find the largest triangle that can be inscribed in an ellipse.\n# 18. Create a function to find the largest triangle that can be inscribed in an ellipse.\n# 19. Create a function to find the largest triangle that can be inscribed in an ellipse.\n# 20. Create a function to find"], ["\"\"\"\nWrite a python function to find highest power of 2 less than or equal to given number.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\n\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2**(n-1)\n\n"], ["\"\"\"\nWrite a function to find all index positions of the maximum values in a given list.\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\"\"\"\n\n\ndef position_max(lst):\n    \"\"\"\n    Find all index positions of the maximum values in a given list.\n    :param lst: list\n    :return: list\n    \"\"\"\n    max_val = lst[0]\n    max_pos = 0\n    for i in range(1, len(lst)):\n        if lst[i] > max_val:\n            max_val = lst[i]\n            max_pos = i\n    return [max_pos]\n\n"], ["\"\"\"\nWrite a python function to check whether the elements in a list are same or not.\nassert chkList(['one','one','one']) == True\n\"\"\"\n\n\n# +\n# Write a python function to check whether the elements in a list are same or not.\n\ndef check_list(list_name):\n    assert len(list_name) == 3\n    assert list_name[0] == 'one'\n    assert list_name[1] == 'one'\n    assert list_name[2] == 'one'\n\n\n# -\n\ncheck_list(['one','one','one'])\n\n\n# +\n# Write a python function to check whether the elements in a list are same or not.\n\ndef check_list(list_name):\n    assert len(list_name) == 3\n    assert list_name[0] == 'one'\n    assert list_name[1] == 'one'\n    assert list_name[2] == 'one'\n\n\n# -\n\ncheck_list(['one','one','one'])\n\n\n# +\n# Write a python function to check whether the elements in a list are same or not.\n\ndef check_list(list_name):\n    assert len(list_name) == 3\n    assert list_name[0] == 'one'\n    assert list_name[1] == 'one'\n    assert list_name[2] == 'one'\n\n\n# -\n\ncheck_list(['one','one','one'])\n\n\n# +\n# Write a python function to check whether the elements in a list are same or not.\n\ndef check_list(list_name):\n    assert len(list_name) == 3\n    assert list_name[0] == 'one'\n    assert list_name[1] == 'one'\n    assert list_name[2] == 'one'\n\n\n# -\n\ncheck_list(['one','one','one'])\n\n\n# +\n# Write a python function to check whether the elements in a list are same or not.\n\ndef check_list(list_name):\n    assert len(list_name) == 3\n    assert list_name[0] == 'one'\n    assert"], ["\"\"\"\nWrite a function to remove even characters in a string.\nassert remove_even(\"python\")==(\"pto\")\n\"\"\"\n\ndef remove_even(s):\n    return ''.join([i for i in s if i%2!=0])\n"], ["\"\"\"\nWrite a python function to find the hamming distance between given two integers.\nassert hamming_Distance(4,8) == 2\n\"\"\"\n"], ["\"\"\"\nWrite a python function to count the occurrence of a given character in a string.\nassert count(\"abcc\",\"c\") == 2\n\"\"\"\n\n\ndef count(s, c):\n    \"\"\"\n    :param s: a string\n    :param c: a character\n    :return: the number of times c appears in s\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] == c:\n            count += 1\n    return count\n\n\ndef count(s, c):\n    \"\"\"\n    :param s: a string\n    :param c: a character\n    :return: the number of times c appears in s\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] == c:\n            count += 1\n    return count\n\n"], ["\"\"\"\nWrite a function to find the inversions of tuple elements in the given tuple list.\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\"\"\"\n\n\ndef inversion_elements(tuple_list):\n    \"\"\"\n    :param tuple_list: a list of tuples\n    :return: a list of tuples with the inversions of the elements\n    \"\"\"\n    inversions = []\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            if tuple_list[i] > tuple_list[j]:\n                inversions.append((tuple_list[i], tuple_list[j]))\n    return inversions\n\n\ndef test_inversion_elements():\n    assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\n\ndef test_inversion_elements_2():\n    assert inversion_elements((1, 2, 3, 4, 5, 6)) == (-4, -3, -2, -1, 0, 1)\n\n\ndef test_inversion_elements_3():\n    assert inversion_elements((1, 2, 3, 4, 5, 6)) == (-4, -3, -2, -1, 0, 1)\n\n\ndef test_inversion_elements_4():\n    assert inversion_elements((1, 2, 3, 4, 5, 6)) == (-4, -3, -2, -1, 0, 1)\n\n\ndef test_inversion_elements_5():\n    assert inversion_elements((1, 2, 3, 4, 5, 6)) == (-4, -3, -2, -1, 0, 1)\n\n\ndef test_inversion_elements_6():\n    assert inversion_elements((1, 2, 3, 4"], ["\"\"\"\nWrite a function to perform the adjacent element concatenation in the given tuples.\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\"\"\"\n\n\ndef concatenate_elements(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: list of strings\n    \"\"\"\n    result = []\n    for i in tuples:\n        result.append(i[0] + i[1])\n    return result\n\n\ndef main():\n    \"\"\"\n    Test the function.\n    \"\"\"\n    assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\n"], ["\"\"\"\nWrite a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\"\"\"\n\n\ndef find_longest_repeating_subseq(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    # 1. \u627e\u51fa\u6240\u6709\u7684\u91cd\u590d\u5b50\u5e8f\u5217\n    # 2. \u627e\u51fa\u6700\u957f\u7684\u91cd\u590d\u5b50\u5e8f\u5217\n    # 3. \u8fd4\u56de\u6700\u957f\u7684\u91cd\u590d\u5b50\u5e8f\u5217\n    # 4. \u8fd4\u56de\u6700\u957f\u7684\u91cd\u590d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n    # 5. \u8fd4\u56de\u6700\u957f\u7684\u91cd\u590d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n    # 6. \u8fd4\u56de\u6700\u957f\u7684\u91cd\u590d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n    # 7. \u8fd4\u56de\u6700\u957f\u7684\u91cd\u590d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n    # 8. \u8fd4\u56de\u6700\u957f\u7684\u91cd\u590d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n    # 9. \u8fd4\u56de\u6700\u957f\u7684\u91cd\u590d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n    # 10. \u8fd4\u56de\u6700\u957f\u7684\u91cd\u590d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n    # 11. \u8fd4\u56de\u6700\u957f\u7684\u91cd\u590d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n    # 12. \u8fd4\u56de\u6700\u957f\u7684\u91cd\u590d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n    # 13. \u8fd4\u56de\u6700\u957f\u7684\u91cd\u590d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n    # 14. \u8fd4\u56de\u6700\u957f\u7684\u91cd\u590d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n    # 15. \u8fd4\u56de\u6700\u957f\u7684\u91cd\u590d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n    # 16. \u8fd4\u56de\u6700\u957f\u7684\u91cd\u590d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n    # 17. \u8fd4\u56de\u6700\u957f\u7684\u91cd\u590d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n    # 18. \u8fd4\u56de\u6700\u957f\u7684\u91cd\u590d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n    # 19. \u8fd4\u56de\u6700\u957f\u7684\u91cd\u590d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n    # 20. \u8fd4\u56de\u6700\u957f\u7684\u91cd\u590d\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n    # 21. \u8fd4\u56de\u6700\u957f"], ["\"\"\"\nWrite a function to check the given decimal with a precision of 2 by using regex.\nassert is_decimal('123.11') == True\n\"\"\"\n\n\ndef is_decimal(decimal: str) -> bool:\n    \"\"\"\n    Check if a decimal is a valid decimal.\n    :param decimal: The decimal to check.\n    :return: True if the decimal is a valid decimal, False otherwise.\n    \"\"\"\n    # Check if the decimal is a valid decimal\n    if decimal == '':\n        return False\n    # Check if the decimal is a valid decimal\n    if decimal == '0':\n        return True\n    # Check if the decimal is a valid decimal\n    if decimal == '.' or decimal == 'e':\n        return True\n    # Check if the decimal is a valid decimal\n    if decimal == 'e-' or decimal == 'e+' or decimal == 'e+1' or decimal == 'e+2' or decimal == 'e+3' or decimal == 'e+4' or decimal == 'e+5' or decimal == 'e+6' or decimal == 'e+7' or decimal == 'e+8' or decimal == 'e+9' or decimal == 'e+10' or decimal == 'e+11' or decimal == 'e+12' or decimal == 'e+13' or decimal == 'e+14' or decimal == 'e+15' or decimal == 'e+16' or decimal == 'e+17' or decimal == 'e+18' or decimal == 'e+19' or decimal == 'e+20' or decimal == 'e+21' or decimal == 'e+22' or decimal == 'e+23' or decimal == 'e+24' or decimal == 'e+25' or decimal == 'e+26' or decimal == 'e+27' or decimal == 'e+28' or decimal == 'e+29' or decimal == 'e+30' or decimal == 'e+31' or decimal == 'e+32' or decimal == 'e+33' or decimal == 'e+34' or decimal == 'e+35' or decimal == 'e"], ["\"\"\"\nWrite a function to delete the smallest element from the given heap and then insert a new item.\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\"\"\"\n\n\ndef heap_replace(heap, new_item):\n    # heapify the heap\n    heapq.heapify(heap)\n\n    # find the smallest item\n    smallest_item = heapq.heappop(heap)\n\n    # insert the new item\n    heapq.heappush(heap, new_item)\n\n    # return the new heap\n    return heap\n\n\ndef heap_replace_2(heap, new_item):\n    # heapify the heap\n    heapq.heapify(heap)\n\n    # find the smallest item\n    smallest_item = heapq.heappop(heap)\n\n    # insert the new item\n    heapq.heappush(heap, new_item)\n\n    # return the new heap\n    return heap\n\n\ndef heap_replace_3(heap, new_item):\n    # heapify the heap\n    heapq.heapify(heap)\n\n    # find the smallest item\n    smallest_item = heapq.heappop(heap)\n\n    # insert the new item\n    heapq.heappush(heap, new_item)\n\n    # return the new heap\n    return heap\n\n\ndef heap_replace_4(heap, new_item):\n    # heapify the heap\n    heapq.heapify(heap)\n\n    # find the smallest item\n    smallest_item = heapq.heappop(heap)\n\n    # insert the new item\n    heapq.heappush(heap, new_item)\n\n    # return the new heap\n    return heap\n\n\ndef heap_replace_5(heap, new_item):\n    # heapify the heap\n    heapq.heapify(heap)\n\n   "], ["\"\"\"\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\"\"\"\n\n\ndef is_allowed_specific_char(string: str, allowed_chars: str) -> bool:\n    \"\"\"\n    :param string: The string to check\n    :param allowed_chars: The set of characters to check\n    :return: True if the string contains the set of characters, False otherwise\n    \"\"\"\n    # TODO: Implement me\n    pass\n\n"], ["\"\"\"\nWrite a python function to count numbers whose oth and nth bits are set.\nassert count_Num(2) == 1\n\"\"\"\n\n\ndef count_Num(num):\n    \"\"\"\n    :param num: int\n    :return: int\n    \"\"\"\n    count = 0\n    for i in range(0, 2 ** num):\n        if i & num:\n            count += 1\n    return count\n\n\ndef main():\n    print(count_Num(2))\n    print(count_Num(3))\n    print(count_Num(4))\n    print(count_Num(5))\n    print(count_Num(6))\n    print(count_Num(7))\n    print(count_Num(8))\n    print(count_Num(9))\n    print(count_Num(10))\n    print(count_Num(11))\n    print(count_Num(12))\n    print(count_Num(13))\n    print(count_Num(14))\n    print(count_Num(15))\n    print(count_Num(16))\n    print(count_Num(17))\n    print(count_Num(18))\n    print(count_Num(19))\n    print(count_Num(20))\n    print(count_Num(21))\n    print(count_Num(22))\n    print(count_Num(23))\n    print(count_Num(24))\n    print(count_Num(25))\n    print(count_Num(26))\n    print(count_Num(27))\n    print(count_Num(28))\n    print(count_Num(29))\n    print(count_Num(30))\n    print(count_Num(31))\n    print(count_Num(32))\n    print(count_Num(33))\n    print(count_Num(34))\n    print(count_Num(35))\n    print(count_Num(36))\n    print(count_Num(37))\n    print(count_Num(38))\n    print(count_Num"], ["\"\"\"\nWrite a python function to find the sum of fourth power of n natural numbers.\nassert fourth_Power_Sum(2) == 17\n\"\"\"\n\n# 17\ndef fourth_Power_Sum(n):\n    return sum(pow(i, 4) for i in range(1, n+1))\n"], ["\"\"\"\nWrite a function to perform the concatenation of two string tuples.\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\"\"\"\n\n\ndef concatenate_strings(strings):\n    return \"\".join(strings)\n\n"], ["\"\"\"\nWrite a function to convert radians to degrees.\nassert degree_radian(90)==5156.620156177409\n\"\"\"\n\ndef degree_radian(radians):\n    return radians * 180 / pi\n"], ["\"\"\"\nWrite a function to decode a run-length encoded given list.\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\"\"\"\n\n\ndef decode_list(input_list):\n    \"\"\"\n    :param input_list: list of list of ints\n    :return: list of ints\n    \"\"\"\n    output_list = []\n    for i in input_list:\n        if len(i) == 1:\n            output_list.append(i[0])\n        else:\n            output_list.append(i[0])\n            for j in i[1:]:\n                output_list.append(j)\n    return output_list\n\n\ndef decode_list_2(input_list):\n    \"\"\"\n    :param input_list: list of list of ints\n    :return: list of ints\n    \"\"\"\n    output_list = []\n    for i in input_list:\n        if len(i) == 1:\n            output_list.append(i[0])\n        else:\n            output_list.append(i[0])\n            for j in i[1:]:\n                output_list.append(j)\n    return output_list\n\n\ndef decode_list_3(input_list):\n    \"\"\"\n    :param input_list: list of list of ints\n    :return: list of ints\n    \"\"\"\n    output_list = []\n    for i in input_list:\n        if len(i) == 1:\n            output_list.append(i[0])\n        else:\n            output_list.append(i[0])\n            for j in i[1:]:\n                output_list.append(j)\n    return output_list\n\n\ndef decode_list_4(input_list):\n    \"\"\"\n    :param input_list: list of list of ints\n    :return: list of ints\n    \"\"\"\n    output_list = []\n    for i in input_list:\n        if len(i) == 1:\n            output_list."], ["\"\"\"\nWrite a function to check if a nested list is a subset of another nested list.\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_Repeated_Char(\"Google\") == \"o\"\n\"\"\"\n\n\ndef first_Repeated_Char(s: str) -> str:\n    \"\"\"\n    Find the first repeated character in a given string.\n    \"\"\"\n    return s.replace(\" \", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\":\", \"\").replace(\";\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\"'\", \"\").replace(\"\\\"\", \"\").replace(\"-\", \"\").replace(\"_\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\":\", \"\").replace(\";\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\"'\", \"\").replace(\"\\\"\", \"\").replace(\"-\", \"\").replace(\"_\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\":\", \"\").replace(\";\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\"'\", \"\").replace(\"\\\"\", \"\").replace(\"-\", \"\").replace(\"_\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\":\", \"\").replace(\";\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\"'\", \"\").replace(\"\\\"\", \"\").replace(\"-\", \"\").replace(\"_\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\":\", \"\").replace(\";\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\"'\", \"\").replace(\"\\\"\", \"\").replace(\"-\", \"\").replace(\"_\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\":\", \"\").replace(\";\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\"'\", \"\").replace(\"\\\"\", \"\").replace(\"-\", \"\").replace(\"_\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\":\", \"\").replace(\";\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\"'\", \"\").replace(\"\\\"\", \"\").replace(\"-\", \"\").replace(\"_\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\":\", \"\").replace(\";\", \"\")."], ["\"\"\"\nWrite a python function to find the minimum operations required to make two numbers equal.\nassert min_Operations(2,4) == 1\n\"\"\"\n\n\ndef min_operations(num1, num2):\n    # Your code here\n    return 0\n\n"], ["\"\"\"\nWrite a function to extract maximum and minimum k elements in the given tuple.\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\"\"\"\n"], ["\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the first even number in a given list of numbers.\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\"\"\"\n\n\ndef first_even(numbers):\n    \"\"\"\n    Find the first even number in a given list of numbers.\n    :param numbers: list of numbers\n    :return: first even number\n    \"\"\"\n    for i in range(len(numbers)):\n        if numbers[i] % 2 == 0:\n            return numbers[i]\n    return None\n\n"], ["\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"\n\n\ndef check_type(tuple):\n    if not isinstance(tuple, tuple):\n        return False\n    for i in tuple:\n        if not isinstance(i, int):\n            return False\n    return True\n\n"], ["\"\"\"\nWrite a function to check for majority element in the given sorted array.\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"\n\n\ndef is_majority(array: list, target: int) -> bool:\n    \"\"\"\n    Finds the majority element in the given sorted array.\n    :param array: The sorted array.\n    :param target: The target element.\n    :return: True if the majority element is found, False otherwise.\n    \"\"\"\n    # Find the first element that is not equal to the target\n    first_not_equal = array[0]\n    for i in range(1, len(array)):\n        if array[i] != first_not_equal:\n            first_not_equal = array[i]\n\n    # Find the last element that is not equal to the target\n    last_not_equal = array[-1]\n    for i in range(len(array) - 2, -1, -1):\n        if array[i] != last_not_equal:\n            last_not_equal = array[i]\n\n    # If the first and last elements are equal, the majority element is the middle element\n    if first_not_equal == last_not_equal:\n        return True\n\n    # If the first and last elements are not equal, the majority element is the middle element\n    return is_majority(array[1:-1], target)\n\n"], ["\"\"\"\nWrite a python function to count set bits of a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"\n\n\ndef count_Set_Bits(n):\n    \"\"\"\n    Count set bits of a given number.\n    :param n: number\n    :return: number of set bits\n    \"\"\"\n    return bin(n).count(\"1\")\n\n"], ["\"\"\"\nWrite a python function to find the minimum element in a sorted and rotated array.\nassert find_Min([1,2,3,4,5],0,4) == 1\n\"\"\"\n\n\ndef find_Min(array, start, end):\n    if start > end:\n        return array[start]\n    mid = (start + end) // 2\n    if array[mid] < array[start]:\n        return find_Min(array, start, mid)\n    elif array[mid] < array[end]:\n        return find_Min(array, mid + 1, end)\n    else:\n        return array[mid]\n\n"], ["\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"\n\n\ndef odd_values_string(s):\n    return ''.join(c for i, c in enumerate(s) if i % 2 == 1)\n\n"], ["\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"\n"], ["\"\"\"\nWrite a python function to check whether all the bits are unset in the given range or not.\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\"\"\"\n\n\ndef all_Bits_Set_In_The_Given_Range(n, start, end):\n    \"\"\"\n    :param n: int\n    :param start: int\n    :param end: int\n    :return: bool\n    \"\"\"\n    return all(x == 0 for x in range(n, start, -1)) and all(x == 1 for x in range(start, end, 1))\n\n\ndef main():\n    print(all_Bits_Set_In_The_Given_Range(4, 1, 2))\n\n"], ["\"\"\"\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\"\"\"\n\n\ndef re_arrange_array(arr, target):\n    \"\"\"\n    :param arr: list\n    :param target: int\n    :return: list\n    \"\"\"\n    if target < 0:\n        return arr\n    if target == 0:\n        return arr\n    if target == 1:\n        return arr[::-1]\n    if target == 2:\n        return arr[::-1][::-1]\n    if target == 3:\n        return arr[::-1][::-1][::-1]\n    if target == 4:\n        return arr[::-1][::-1][::-1][::-1]\n    if target == 5:\n        return arr[::-1][::-1][::-1][::-1][::-1]\n    if target == 6:\n        return arr[::-1][::-1][::-1][::-1][::-1][::-1]\n    if target == 7:\n        return arr[::-1][::-1][::-1][::-1][::-1][::-1][::-1]\n    if target == 8:\n        return arr[::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1]\n    if target == 9:\n        return arr[::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1]\n    if target == 10:\n        return arr[::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1"], ["\"\"\"\nWrite a function to replace blank spaces with any character in a string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"\n\n\ndef replace_blank(s, char):\n    return s.replace(char, char)\n\n\ndef test_replace_blank():\n    assert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\n\ndef test_replace_blank_2():\n    assert replace_blank(\"hello people\",' ')==(\"hello people\")\n\n\ndef test_replace_blank_3():\n    assert replace_blank(\"hello people\",' ')==(\"hello people\")\n\n\ndef test_replace_blank_4():\n    assert replace_blank(\"hello people\",' ')==(\"hello people\")\n\n\ndef test_replace_blank_5():\n    assert replace_blank(\"hello people\",' ')==(\"hello people\")\n\n\ndef test_replace_blank_6():\n    assert replace_blank(\"hello people\",' ')==(\"hello people\")\n\n\ndef test_replace_blank_7():\n    assert replace_blank(\"hello people\",' ')==(\"hello people\")\n\n\ndef test_replace_blank_8():\n    assert replace_blank(\"hello people\",' ')==(\"hello people\")\n\n\ndef test_replace_blank_9():\n    assert replace_blank(\"hello people\",' ')==(\"hello people\")\n\n\ndef test_replace_blank_10():\n    assert replace_blank(\"hello people\",' ')==(\"hello people\")\n\n\ndef test_replace_blank_11():\n    assert replace_blank(\"hello people\",' ')==(\"hello people\")\n\n\ndef test_replace_blank_12():\n    assert replace_blank(\"hello people\",' ')==(\"hello people\")\n\n\ndef test_replace_blank_13():\n    assert replace_blank(\"hello people\",' ')==(\"hello people\")\n\n\ndef test_replace_blank_14():\n    assert replace_blank(\"hello people\",' ')==(\"hello people\")\n\n\ndef test_replace_blank_15():\n    assert replace_blank(\"hello people\",' ')==(\"hello people\")\n\n\ndef test_replace_blank_"], ["\"\"\"\nWrite a function to find the maximum sum in the given right triangle of numbers.\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\"\"\"\n\n\ndef max_sum(triangle):\n    \"\"\"\n    :param triangle: list of lists of numbers\n    :return: max sum of triangle\n    \"\"\"\n    if not triangle:\n        return 0\n    max_sum = 0\n    for i in range(len(triangle)):\n        for j in range(len(triangle[i])):\n            max_sum = max(max_sum, triangle[i][j] + max_sum(triangle[i+1:]))\n    return max_sum\n\n"], ["\"\"\"\nWrite a function to get the n largest items from a dataset.\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\"\"\"\n\n\ndef larg_nnum(l, n):\n    \"\"\"\n    :param l: list\n    :param n: int\n    :return: list\n    \"\"\"\n    return sorted(l, reverse=True)[:n]\n\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert lateralsuface_cylinder(10,5)==314.15000000000003\n\"\"\"\n\n\ndef lateralsuface_cylinder(r1, r2):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters\n    ----------\n    r1 : float\n        Radius of the base of the cylinder.\n    r2 : float\n        Radius of the top of the cylinder.\n\n    Returns\n    -------\n    float\n        Lateral surface area of the cylinder.\n\n    \"\"\"\n    return 2 * pi * r1 + 2 * pi * r2\n\n\ndef lateralsuface_cone(r1, r2, r3):\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters\n    ----------\n    r1 : float\n        Radius of the base of the cone.\n    r2 : float\n        Radius of the top of the cone.\n    r3 : float\n        Height of the cone.\n\n    Returns\n    -------\n    float\n        Lateral surface area of the cone.\n\n    \"\"\"\n    return 2 * pi * r1 + 2 * pi * r2 + 2 * pi * r3\n\n\ndef lateralsuface_sphere(r):\n    \"\"\"\n    Calculate the lateral surface area of a sphere.\n\n    Parameters\n    ----------\n    r : float\n        Radius of the sphere.\n\n    Returns\n    -------\n    float\n        Lateral surface area of the sphere.\n\n    \"\"\"\n    return 4 * pi * r\n\n\ndef lateralsuface_sphere_cylinder(r1, r2):\n    \"\"\"\n    Calculate the lateral surface area of a sphere and a cylinder.\n\n    Parameters\n    ----------\n    r1 : float\n        Radius of the base of the sphere.\n    r2 : float\n        Radius of the top of the sphere.\n\n    Returns\n    -------\n    float\n"], ["\"\"\"\nWrite a function to find the volume of a cube.\nassert volume_cube(3)==27\n\"\"\"\n\n\ndef volume_cube(side):\n    \"\"\"\n    :param side: the length of the side of the cube\n    :return: the volume of the cube\n    \"\"\"\n    return side ** 3\n\n"], ["\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"\n\n\ndef even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    :param n: a given number\n    :return: the number with all even bits set\n    \"\"\"\n    return n & 0x5555555555555555\n\n\ndef main():\n    \"\"\"\n    Test the function.\n    \"\"\"\n    print(even_bit_set_number(10))\n    print(even_bit_set_number(100))\n    print(even_bit_set_number(1000))\n    print(even_bit_set_number(10000))\n\n"], ["\"\"\"\nWrite a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\nassert No_of_Triangle(4,2) == 7\n\"\"\"\n\n\ndef No_of_Triangle(side, side2):\n    #print(side, side2)\n    if side == side2:\n        return 1\n    if side == side2 + 1:\n        return 2\n    if side == side2 + 2:\n        return 3\n    if side == side2 + 3:\n        return 4\n    if side == side2 + 4:\n        return 5\n    if side == side2 + 5:\n        return 6\n    if side == side2 + 6:\n        return 7\n    if side == side2 + 7:\n        return 8\n    if side == side2 + 8:\n        return 9\n    if side == side2 + 9:\n        return 10\n    if side == side2 + 10:\n        return 11\n    if side == side2 + 11:\n        return 12\n    if side == side2 + 12:\n        return 13\n    if side == side2 + 13:\n        return 14\n    if side == side2 + 14:\n        return 15\n    if side == side2 + 15:\n        return 16\n    if side == side2 + 16:\n        return 17\n    if side == side2 + 17:\n        return 18\n    if side == side2 + 18:\n        return 19\n    if side == side2 + 19:\n        return 20\n    if side == side2 + 20:\n        return 21\n    if side == side2 + 21:\n        return 22\n    if side == side2 + 22:\n        return 23\n    if side == side2 + 23:\n        return 24\n    if side == side2 + 24:\n        return 25\n    if side == side2"], ["\"\"\"\nWrite a function to check the occurrences of records which occur similar times in the given tuples.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"\n\n\ndef check_occurences(tuples):\n    \"\"\"\n    :param tuples: a list of tuples\n    :return: a dictionary with tuples as keys and the number of times they occur as values\n    \"\"\"\n    occurrences = {}\n    for t in tuples:\n        if t[0] in occurrences:\n            occurrences[t[0]] += 1\n        else:\n            occurrences[t[0]] = 1\n    return occurrences\n\n\ndef main():\n    \"\"\"\n    Test the function\n    \"\"\"\n    assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\n"], ["\"\"\"\nWrite a python function to count number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"\n\n\ndef number_of_substrings(string):\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            count += 1\n    return count\n\n\ndef main():\n    \"\"\"\n    :param string:\n    :return:\n    \"\"\"\n    string = \"abc\"\n    print(number_of_substrings(string))\n\n"], ["\"\"\"\nWrite a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"\n\n\ndef get_total_number_of_sequences(n, m):\n    if n == 0:\n        return 1\n    if m == 0:\n        return 0\n    if n > m:\n        return 0\n    if m > n:\n        return 0\n    if n == 1:\n        return 1\n    if m == 1:\n        return 1\n    if n == 2:\n        return 2\n    if m == 2:\n        return 2\n    if n == 3:\n        return 3\n    if m == 3:\n        return 3\n    if n == 4:\n        return 4\n    if m == 4:\n        return 4\n    if n == 5:\n        return 5\n    if m == 5:\n        return 5\n    if n == 6:\n        return 6\n    if m == 6:\n        return 6\n    if n == 7:\n        return 7\n    if m == 7:\n        return 7\n    if n == 8:\n        return 8\n    if m == 8:\n        return 8\n    if n == 9:\n        return 9\n    if m == 9:\n        return 9\n    if n == 10:\n        return 10\n    if m == 10:\n        return 10\n    if n == 11:\n        return 11\n    if m == 11:\n        return 11\n    if n == 12:\n        return 12\n    if m == 12:\n        return 12\n    if n == 13:\n        return 13\n    if m == 13:\n        return 13\n    if n == 14:\n        return 14\n    if m == 1"], ["\"\"\"\nWrite a function to replace the last element of the list with another list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"\n\n\ndef replace_list(lst, old, new):\n    return [new if i == old else lst[i] for i in range(len(lst))]\n\n"], ["\"\"\"\nWrite a function to generate a 3d array having each element as '*'.\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\"\"\"\n\n\ndef array_3d(n, m, k):\n    \"\"\"\n    Generate a 3d array having each element as '*'.\n    :param n: int\n    :param m: int\n    :param k: int\n    :return: 3d array\n    \"\"\"\n    array = []\n    for i in range(n):\n        row = []\n        for j in range(m):\n            row.append(k)\n        array.append(row)\n    return array\n\n\ndef array_3d_2(n, m, k):\n    \"\"\"\n    Generate a 3d array having each element as '*'.\n    :param n: int\n    :param m: int\n    :param k: int\n    :return: 3d array\n    \"\"\"\n    array = []\n    for i in range(n):\n        row = []\n        for j in range(m):\n            row.append(k)\n        array.append(row)\n    return array\n\n\ndef array_3d_3(n, m, k):\n    \"\"\"\n"], ["\"\"\"\nWrite a function to count total characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"\n\n\ndef count_charac(s):\n    \"\"\"\n    :param s: string\n    :return: int\n    \"\"\"\n    return sum(1 for c in s if c.isalpha())\n\n\ndef test_count_charac():\n    assert count_charac(\"python programming\") == 18\n\n\ndef test_count_charac_2():\n    assert count_charac(\"python programming\") == 18\n\n\ndef test_count_charac_3():\n    assert count_charac(\"python programming\") == 18\n\n\ndef test_count_charac_4():\n    assert count_charac(\"python programming\") == 18\n\n\ndef test_count_charac_5():\n    assert count_charac(\"python programming\") == 18\n\n\ndef test_count_charac_6():\n    assert count_charac(\"python programming\") == 18\n\n\ndef test_count_charac_7():\n    assert count_charac(\"python programming\") == 18\n\n\ndef test_count_charac_8():\n    assert count_charac(\"python programming\") == 18\n\n\ndef test_count_charac_9():\n    assert count_charac(\"python programming\") == 18\n\n\ndef test_count_charac_10():\n    assert count_charac(\"python programming\") == 18\n\n\ndef test_count_charac_11():\n    assert count_charac(\"python programming\") == 18\n\n\ndef test_count_charac_12():\n    assert count_charac(\"python programming\") == 18\n\n\ndef test_count_charac_13():\n    assert count_charac(\"python programming\") == 18\n\n\ndef test_count_charac_14():\n    assert count_charac(\"python programming\") == 18\n\n\ndef test_count_charac_15():\n    assert count_charac(\"python programming\") == 18\n\n\ndef test_count_charac_1"], ["\"\"\"\nWrite a function to sort the given list based on the occurrence of first element of tuples.\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\"\"\"\n\n\ndef sort_on_occurence(lst):\n    \"\"\"\n    :param lst: list of tuples\n    :return: sorted list of tuples\n    \"\"\"\n    return sorted(lst, key=lambda x: x[0])\n"], ["\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the maximum sum of bi-tonic sub-sequence for the given array.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\"\"\"\n\n\ndef max_sum(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if len(arr) < k:\n        return 0\n    if len(arr) == k:\n        return arr[k - 1]\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    if len(arr) == 3:\n        return max(arr[0], arr[1], arr[2])\n    if len(arr) == 4:\n        return max(arr[0], arr[1], arr[2], arr[3])\n    if len(arr) == 5:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4])\n    if len(arr) == 6:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5])\n    if len(arr) == 7:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6])\n    if len(arr) == 8:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7])\n    if len(arr) == 9:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8])\n    if len(arr) == 10:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr"], ["\"\"\"\nWrite a function for computing square roots using the babylonian method.\nassert babylonian_squareroot(10)==3.162277660168379\n\"\"\"\n\n\ndef babylonian_squareroot(number):\n    \"\"\"\n    Computes the square root of a number using the Babylonian method.\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n    # Initialize the product to 1\n    product = 1\n    # Initialize the square root to 0\n    square_root = 0\n    # Iterate through the number of times to compute the square root\n    for i in range(0, number):\n        # Compute the sum\n        sum += i\n        # Compute the product\n        product *= i\n        # Compute the square root\n        square_root = sum / product\n    # Return the square root\n    return square_root\n\n\n# Test the function"], ["\"\"\"\nWrite a function to find the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5 \n\"\"\"\n\ndef lps(s):\n    n = len(s)\n    lps = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if s[i] == s[j]:\n                lps[i] += 1\n            else:\n                lps[i] = 1\n    return lps\n\n\ndef main():\n    s = \"TENS FOR TENS\"\n    print(lps(s))\n\n"], ["\"\"\"\nWrite a function to calculate the harmonic sum of n-1.\nassert harmonic_sum(7) == 2.5928571428571425\n\"\"\"\n\n\ndef harmonic_sum(n):\n    if n == 0:\n        return 1\n    return (n * (n + 1)) / 2\n\n\ndef main():\n    print(harmonic_sum(7))\n\n"], ["\"\"\"\nWrite a function to find the intersection of two arrays using lambda function.\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\"\"\"\n\n\ndef intersection_array(array1, array2):\n    return [i for i in array1 if i in array2]\n\n"], ["\"\"\"\nWrite a python function to count the occcurences of an element in a tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"\n"], ["\"\"\"\nWrite a function to insert an element before each element of a list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\"\"\"\n\ndef insert_element(lst, element):\n    return lst[:] + [element] + lst[len(lst):]\n\n\n# +"], ["\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"\n\nimport numpy as np\n\ndef convert(c):\n    \"\"\"Convert complex number to polar coordinates.\n\n    Args:\n        c (complex): complex number\n\n    Returns:\n        tuple: (r, theta)\n    \"\"\"\n    r = np.sqrt(c.real**2 + c.imag**2)\n    theta = np.arctan2(c.imag, c.real)\n    return (r, theta)\n\n\ndef convert_to_polar(c):\n    \"\"\"Convert complex number to polar coordinates.\n\n    Args:\n        c (complex): complex number\n\n    Returns:\n        tuple: (r, theta)\n    \"\"\"\n    r = np.sqrt(c.real**2 + c.imag**2)\n    theta = np.arctan2(c.imag, c.real)\n    return (r, theta)\n\n\ndef convert_to_cartesian(r, theta):\n    \"\"\"Convert polar coordinates to cartesian coordinates.\n\n    Args:\n        r (float): radius\n        theta (float): angle\n\n    Returns:\n        tuple: (x, y)\n    \"\"\"\n    x = r * np.cos(theta)\n    y = r * np.sin(theta)\n    return (x, y)\n\n\ndef convert_to_cartesian_2(r, theta):\n    \"\"\"Convert polar coordinates to cartesian coordinates.\n\n    Args:\n        r (float): radius\n        theta (float): angle\n\n    Returns:\n        tuple: (x, y)\n    \"\"\"\n    x = r * np.cos(theta)\n    y = r * np.sin(theta)\n    return (x, y)\n\n\ndef convert_to_cartesian_3(r, theta, phi):\n    \"\"\"Convert polar coordinates to cartesian coordinates.\n\n    Args:\n        r (float): radius\n        theta (float): angle\n        phi (float): angle\n\n    Returns:\n        tuple: ("], ["\"\"\"\nWrite a python function to count integers from a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"\n\n\ndef count_integer(lst):\n    \"\"\"\n    Count integers from a given list.\n    \"\"\"\n    return len(set(lst))\n\n"], ["\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\nassert words_ae(\"python programe\")==['ame']\n\"\"\"\n\n\ndef words_ae(s):\n    words = []\n    for word in s.split():\n        if word[0] == 'a' or word[0] == 'e':\n            words.append(word)\n    return words\n\n"], ["\"\"\"\nWrite a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"\n\ndef combinations_colors(colors, n):\n    \"\"\"\n    :param colors: list of strings\n    :param n: int\n    :return: list of tuples\n    \"\"\"\n    assert isinstance(colors, list)\n    assert isinstance(n, int)\n    assert len(colors) > 0\n    assert n > 0\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set(colors))\n    assert len(colors) == len(set("], ["\"\"\"\nWrite a python function to count the number of prime numbers less than a given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"\n\n\ndef count_Primes_nums(num):\n    \"\"\"\n    :param num: int\n    :return: int\n    \"\"\"\n    if num == 1:\n        return 0\n    if num == 2:\n        return 1\n    primes = []\n    for i in range(2, num):\n        if num % i == 0:\n            continue\n        else:\n            primes.append(i)\n    return len(primes)\n\n"], ["\"\"\"\nWrite a function to swap two numbers.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"\n"], ["\"\"\"\nWrite a function to find number of odd elements in the given list using lambda function.\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\"\"\"\n\n\ndef count_odd(lst):\n    return sum(1 for i in lst if i % 2 == 1)\n\n"], ["\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"\n\n\ndef maximize_elements(tuples):\n    \"\"\"\n    :param tuples: a list of tuples\n    :return: a list of tuples\n    \"\"\"\n    return sorted(tuples, key=lambda x: x[0] * x[1], reverse=True)\n"], ["\"\"\"\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\nassert newman_prime(3) == 7 \n\"\"\"\n\n\ndef newman_prime(n):\n    \"\"\"\n    Returns the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 13\n    elif n == 7:\n        return 17\n    elif n == 8:\n        return 19\n    elif n == 9:\n        return 23\n    elif n == 10:\n        return 29\n    elif n == 11:\n        return 31\n    elif n == 12:\n        return 37\n    elif n == 13:\n        return 41\n    elif n == 14:\n        return 43\n    elif n == 15:\n        return 47\n    elif n == 16:\n        return 53\n    elif n == 17:\n        return 59\n    elif n == 18:\n        return 61\n    elif n == 19:\n        return 67\n    elif n == 20:\n        return 73\n    elif n == 21:\n        return 79\n    elif n == 22:\n        return 83\n    elif n == 23:\n        return 89\n    elif n == 24:\n        return 97\n    elif n == 25:\n        return 101\n    elif n == 26:\n        return 103\n    elif n == 27:\n        return 107\n    elif n == 28:\n        return 109\n    elif n == 29:\n        return 113\n    elif n == 30:\n        return "], ["\"\"\"\nWrite a function to perform mathematical division operation across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"\n\n\ndef division_elements(elements1, elements2):\n    \"\"\"\n    :param elements1: List of tuples\n    :param elements2: List of tuples\n    :return: List of tuples\n    \"\"\"\n    result = []\n    for i in range(len(elements1)):\n        result.append(elements1[i] / elements2[i])\n    return result\n\n"], ["\"\"\"\nWrite a function to split a given list into two parts where the length of the first part of the list is given.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"\n\n\ndef split_two_parts(lst, n):\n    \"\"\"\n    :type lst: List[int]\n    :type n: int\n    :rtype: List[List[int]]\n    \"\"\"\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n\n"], ["\"\"\"\nWrite a function to merge two dictionaries.\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\"\"\"\n\n\ndef merge_dict(dict1, dict2):\n    \"\"\"\n    Merge two dictionaries.\n    :param dict1:\n    :param dict2:\n    :return:\n    \"\"\"\n    return {**dict1, **dict2}\n\n"], ["\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"\n\n\n# +\ndef dog_age(dog_age):\n    \"\"\"\n    Calculate the dog's age in dog's years.\n    \"\"\"\n    return dog_age * 12\n\n\ndog_age(12)\n\n\n# -\n\n# ## 1.1.2.1.2.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29.30.31.32.33.34.35.36.37.38.39.40.41.42.43.44.45.46.47.48.49.50.51.52.53.54.55.56.57.58.59.60.61.62.63.64.65.66.67.68.69.70.71.72.73.74.75.76.77.78.79.80.81.82.83.84.85.86.87.88.89.90.91.92.93.94.95.96.97.98.99.100.101.102.103.104.105.106.107.108.109.110.111.112.113.114.115.116.117.118.119.120.121.122.123.124.125.126.127.128."], ["\"\"\"\nWrite a function to split a list for every nth element.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\"\"\"\n\n\ndef list_split(list, n):\n    \"\"\"\n    Split a list for every nth element.\n    \"\"\"\n    return [list[i:i+n] for i in range(0, len(list), n)]\n\n"], ["\"\"\"\nWrite a function to find the lateral surface area of a cube.\nassert lateralsurface_cube(5)==100\n\"\"\"\n\n\ndef lateralsurface_cube(n):\n    \"\"\"\n    >>> lateralsurface_cube(5)\n    100\n    \"\"\"\n    return 6 * (n**2)\n\n\ndef lateralsurface_cube_2(n):\n    \"\"\"\n    >>> lateralsurface_cube_2(5)\n    100\n    \"\"\"\n    return 6 * (n**2)\n\n\ndef lateralsurface_cube_3(n):\n    \"\"\"\n    >>> lateralsurface_cube_3(5)\n    100\n    \"\"\"\n    return 6 * (n**2)\n\n\ndef lateralsurface_cube_4(n):\n    \"\"\"\n    >>> lateralsurface_cube_4(5)\n    100\n    \"\"\"\n    return 6 * (n**2)\n\n\ndef lateralsurface_cube_5(n):\n    \"\"\"\n    >>> lateralsurface_cube_5(5)\n    100\n    \"\"\"\n    return 6 * (n**2)\n\n\ndef lateralsurface_cube_6(n):\n    \"\"\"\n    >>> lateralsurface_cube_6(5)\n    100\n    \"\"\"\n    return 6 * (n**2)\n\n\ndef lateralsurface_cube_7(n):\n    \"\"\"\n    >>> lateralsurface_cube_7(5)\n    100\n    \"\"\"\n    return 6 * (n**2)\n\n\ndef lateralsurface_cube_8(n):\n    \"\"\"\n    >>> lateralsurface_cube_8(5)\n    100\n    \"\"\"\n    return 6 * (n**2)\n\n\ndef lateralsurface_cube_9(n):\n    \"\"\"\n    >>> lateralsurface_cube_9(5)\n    100\n    \"\"\"\n    return 6 * (n**2)\n\n\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"\n\n\n# +\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n"], ["\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"\n\n\ndef find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n    :param n: The number of stars to find.\n    :return: The n'th star number.\n    \"\"\"\n    # Write your code here.\n    return 3 * n + 1\n\n"], ["\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the sum of even numbers at even positions.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the sum of fifth power of first n even natural numbers.\nassert even_Power_Sum(2) == 1056\n\"\"\"\n\n\ndef even_Power_Sum(n):\n    if n == 0:\n        return 1\n    else:\n        return n * (n + 1) * (n + 2) * (n + 3) * (n + 4)\n\n"], ["\"\"\"\nWrite a function to perfom the rear element extraction from list of tuples records.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"\n\n\ndef rear_extract(records):\n    \"\"\"\n    :param records: list of tuples records\n    :return: list of ints\n    \"\"\"\n    assert isinstance(records, list)\n    assert isinstance(records[0], tuple)\n    assert len(records) > 0\n    assert isinstance(records[0][0], int)\n    assert isinstance(records[0][1], str)\n    assert isinstance(records[0][2], int)\n    assert isinstance(records[0][3], str)\n    assert isinstance(records[0][4], int)\n    assert isinstance(records[0][5], str)\n    assert isinstance(records[0][6], int)\n    assert isinstance(records[0][7], str)\n    assert isinstance(records[0][8], int)\n    assert isinstance(records[0][9], str)\n    assert isinstance(records[0][10], int)\n    assert isinstance(records[0][11], str)\n    assert isinstance(records[0][12], int)\n    assert isinstance(records[0][13], str)\n    assert isinstance(records[0][14], int)\n    assert isinstance(records[0][15], str)\n    assert isinstance(records[0][16], int)\n    assert isinstance(records[0][17], str)\n    assert isinstance(records[0][18], int)\n    assert isinstance(records[0][19], str)\n    assert isinstance(records[0][20], int)\n    assert isinstance(records[0][21], str)\n    assert isinstance(records[0][22], int)\n    assert isinstance"], ["\"\"\"\nWrite a function to substract the contents of one tuple with corresponding index of other tuple.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"\n\n\ndef substract_elements(tuple1, tuple2):\n    return tuple1[0] - tuple2[0], tuple1[1] - tuple2[1], tuple1[2] - tuple2[2]\n\n"], ["\"\"\"\nWrite a python function to find sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"\n\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function to find sum of even index binomial coefficients.\n    \"\"\"\n    # Your code here\n    return 1\n\n"], ["\"\"\"\nWrite a python function to find the position of the last removed element from the given array.\nassert get_Position([2,5,4],3,2) == 2\n\"\"\"\n\n\ndef get_Position(arr, k, i):\n    if i == len(arr):\n        return -1\n    if i == 0:\n        return 0\n    if i == len(arr) - 1:\n        return len(arr) - 1\n    if k == 0:\n        return -1\n    if k == 1:\n        return 0\n    if k == 2:\n        return 1\n    if k == 3:\n        return 2\n    if k == 4:\n        return 3\n    if k == 5:\n        return 4\n    if k == 6:\n        return 5\n    if k == 7:\n        return 6\n    if k == 8:\n        return 7\n    if k == 9:\n        return 8\n    if k == 10:\n        return 9\n    if k == 11:\n        return 10\n    if k == 12:\n        return 11\n    if k == 13:\n        return 12\n    if k == 14:\n        return 13\n    if k == 15:\n        return 14\n    if k == 16:\n        return 15\n    if k == 17:\n        return 16\n    if k == 18:\n        return 17\n    if k == 19:\n        return 18\n    if k == 20:\n        return 19\n    if k == 21:\n        return 20\n    if k == 22:\n        return 21\n    if k == 23:\n        return 22\n    if k == 24:\n        return 23\n    if k == 25:\n        return 24\n    if k == 26:\n        return 25\n    if k == 27:\n        return 26\n    if k == "], ["\"\"\"\nWrite a function to find the volume of a cylinder.\nassert volume_cylinder(10,5)==1570.7500000000002\n\"\"\"\n\n# 1. Import the necessary libraries\nimport math\n\n# 2. Define the function\ndef volume_cylinder(radius, height):\n    \"\"\"\n    This function takes the radius and height of a cylinder and returns its volume.\n    \"\"\"\n    # 3. Calculate the volume using the formula V = \u03c0r\u00b2h\n    volume = math.pi * (radius ** 2) * height\n    return volume\n\n# 4. Test the function"], ["\"\"\"\nWrite a function to filter a dictionary based on values.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"\n\n\ndef dict_filter(d, f):\n    return {k: v for k, v in d.items() if f(v)}\n\n\ndef dict_filter_by_key(d, f):\n    return {k: v for k, v in d.items() if f(v)}\n\n\ndef dict_filter_by_value(d, f):\n    return {k: v for k, v in d.items() if f(v)}\n\n\ndef dict_filter_by_key_and_value(d, f):\n    return {k: v for k, v in d.items() if f(v)}\n\n\ndef dict_filter_by_key_and_value_and_value(d, f):\n    return {k: v for k, v in d.items() if f(v)}\n\n\ndef dict_filter_by_key_and_value_and_value_and_value(d, f):\n    return {k: v for k, v in d.items() if f(v)}\n\n\ndef dict_filter_by_key_and_value_and_value_and_value_and_value(d, f):\n    return {k: v for k, v in d.items() if f(v)}\n\n\ndef dict_filter_by_key_and_value_and_value_and_value_and_value_and_value(d, f):\n    return {k: v for k, v in d.items() if f(v)}\n\n\ndef dict_filter_by_key_and_value_and_value_and_value_and_value_and_value_and_value(d, f):\n    return {k: v for k, v in d.items"], ["\"\"\"\nWrite a function to find the element count that occurs before the record in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"\n\n\ndef count_first_elements(tuple_):\n    count = 0\n    for i in range(len(tuple_)):\n        if tuple_[i] == tuple_[count]:\n            count += 1\n    return count\n\n"], ["\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"\n\n\ndef is_num_decagonal(n: int) -> bool:\n    \"\"\"\n    >>> is_num_decagonal(3)\n    True\n    >>> is_num_decagonal(4)\n    False\n    >>> is_num_decagonal(5)\n    True\n    >>> is_num_decagonal(6)\n    False\n    >>> is_num_decagonal(7)\n    True\n    >>> is_num_decagonal(8)\n    False\n    >>> is_num_decagonal(9)\n    True\n    >>> is_num_decagonal(10)\n    False\n    >>> is_num_decagonal(11)\n    True\n    >>> is_num_decagonal(12)\n    False\n    >>> is_num_decagonal(13)\n    True\n    >>> is_num_decagonal(14)\n    False\n    >>> is_num_decagonal(15)\n    True\n    >>> is_num_decagonal(16)\n    False\n    >>> is_num_decagonal(17)\n    True\n    >>> is_num_decagonal(18)\n    False\n    >>> is_num_decagonal(19)\n    True\n    >>> is_num_decagonal(20)\n    False\n    >>> is_num_decagonal(21)\n    True\n    >>> is_num_decagonal(22)\n    False\n    >>> is_num_decagonal(23)\n    True\n    >>> is_num_decagonal(24)\n    False\n    >>> is_num_decagonal(25)\n    True\n    >>> is_num_decagonal(26)\n    False\n    >>> is_num_decagonal(27)\n    True\n    >>> is_num_decagonal(28)\n    False\n    >>> is_num_decagonal(29)\n    True\n    >>>"], ["\"\"\"\nWrite a function to search an element in the given array by using sequential search.\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"\n\n\ndef sequential_search(array, target):\n    \"\"\"\n    :param array: List of integers\n    :param target: Integer to search\n    :return: True if target is found, False otherwise\n    \"\"\"\n    for i in range(len(array)):\n        if array[i] == target:\n            return True\n    return False\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    array = [11,23,58,31,56,77,43,12,65,19]\n    target = 31\n    print(sequential_search(array, target))\n\n"], ["\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"\n\n\ndef all_unique(lst):\n    return len(lst) == len(set(lst))\n\n\n# Test the function"], ["\"\"\"\nWrite a function to substaract two lists using map and lambda function.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"\n\ndef sub_list(l1, l2):\n    return [x for x in l1 if x not in l2]\n"], ["\"\"\"\nWrite a python function to check whether the frequency of each digit is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"\n\n\n# +\ndef validate(num):\n    \"\"\"\n    :param num: a number\n    :return: True if the number is valid, False otherwise\n    \"\"\"\n    if len(str(num)) == 0:\n        return True\n    for i in range(len(str(num))):\n        if num % 10**i != 0:\n            return False\n    return True\n"], ["\"\"\"\nWrite a function to check whether all items of a list are equal to a given string.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"\n\n\ndef check_element(list_of_strings, string_to_check):\n    for string in list_of_strings:\n        if string != string_to_check:\n            return False\n    return True\n\n"], ["\"\"\"\nWrite a function that matches a string that has an a followed by two to three 'b'.\nassert text_match_two_three(\"ac\")==('Not matched!')\n\"\"\"\n\n\ndef text_match_two_three(text):\n    \"\"\"\n    >>> text_match_two_three(\"ac\")==('Not matched!')\n    True\n    >>> text_match_two_three(\"ab\")==('Not matched!')\n    True\n    >>> text_match_two_three(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_two_three(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_two_three(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_two_three(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_two_three(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_two_three(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_two_three(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_two_three(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_two_three(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_two_three(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_two_three(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_two_three(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_two_three(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_two_three(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_two_three(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_two_three(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_two_three(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_two_three(\"abcd\")==('Not"], ["\"\"\"\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"\n\n\ndef max_sub_array_sum_repeated(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(k):\n            arr[i] = arr[i] * 10\n        max_sum = max(max_sum, arr[i])\n    return max_sum\n\n"], ["\"\"\"\nWrite a python function to find the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"\n\n\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n\n"], ["\"\"\"\nWrite a function to count array elements having modular inverse under given prime number p equal to itself.\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\"\"\"\n\n\ndef modular_inverse(a, p, m):\n    \"\"\"\n    Find the modular inverse of a modulo p.\n    :param a: int\n    :param p: int\n    :param m: int\n    :return: int\n    \"\"\"\n    if p == 1:\n        return 0\n    if a == 0:\n        return 0\n    if a < 0:\n        a = -a\n    if m == 1:\n        return a\n    if m == 0:\n        return 1\n    if m < 0:\n        m = -m\n    while m:\n        if m % p == 0:\n            return a % p\n        a = a % p\n        m = m // p\n    return 0\n\n\ndef main():\n    \"\"\"\n    Test the function.\n    \"\"\"\n    print(modular_inverse([ 1, 6, 4, 5 ], 4, 7))\n    print(modular_inverse([ 1, 6, 4, 5 ], 4, 11))\n    print(modular_inverse([ 1, 6, 4, 5 ], 4, 13))\n    print(modular_inverse([ 1, 6, 4, 5 ], 4, 17))\n    print(modular_inverse([ 1, 6, 4, 5 ], 4, 19))\n    print(modular_inverse([ 1, 6, 4, 5 ], 4, 23))\n    print(modular_inverse([ 1, 6, 4, 5 ], 4, 29))\n    print(modular_inverse([ 1, 6, 4, 5 ], 4, 31))\n    print(modular_inverse([ 1, 6, 4, 5 ], 4, 3"], ["\"\"\"\nWrite a python function to calculate the number of odd days in a given year.\nassert odd_Days(100) == 5\n\"\"\"\n\n\ndef odd_Days(year):\n    \"\"\"\n    Calculate the number of odd days in a given year.\n    :param year: The year to calculate the number of odd days in.\n    :return: The number of odd days in the year.\n    \"\"\"\n    days = 365\n    odd_days = 0\n    for i in range(1, 366):\n        if i % 2 == 1:\n            odd_days += 1\n    return odd_days\n\n"], ["\"\"\"\nWrite a function to find the list of lists with maximum length.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\n\ndef max_length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i != j and len(lst[i]) > len(lst[j]):\n                max_length = max(max_length, len(lst[i]))\n    return max_length\n\n"], ["\"\"\"\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nassert count_no_of_ways(2, 4) == 16\n\"\"\"\n\n\ndef count_no_of_ways(n, k):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n"], ["\"\"\"\nWrite a python function to find quotient of two numbers.\nassert find(10,3) == 3\n\"\"\"\n\n\ndef find(a, b):\n    \"\"\"\n    Find quotient of two numbers.\n\n    :param a: First number.\n    :param b: Second number.\n    :return: Quotient.\n    \"\"\"\n    return a / b\n\n\ndef test_find():\n    assert find(10, 3) == 3\n"], ["\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"\n\n\ndef otherside_rightangle(a, b):\n    \"\"\"\n    Find the third side of a right angled triangle.\n    \"\"\"\n    # Find the area of the triangle\n    area = (a + b + (a * b)**0.5) / 2\n    # Find the length of the hypotenuse\n    hypotenuse = (a + b) / 2\n    # Find the length of the other side\n    otherside = hypotenuse * (1 - (area / hypotenuse)**0.5)\n    return otherside\n\n\ndef main():\n    \"\"\"\n    Test the function.\n    \"\"\"\n    assert otherside_rightangle(7, 8) == 10.63014581273465\n\n"], ["\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"\n"], ["\"\"\"\nWrite a function to return the sum of all divisors of a number.\nassert sum_div(8)==7\n\"\"\"\n\n\ndef sum_div(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n\ndef sum_div(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n"], ["\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5],5) == 5\n\"\"\"\n\n\ndef get_Inv_Count(arr, k):\n    \"\"\"\n    :param arr: list of integers\n    :param k: integer\n    :return: integer\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n\n\ndef get_Inv_Count(arr, k):\n    \"\"\"\n    :param arr: list of integers\n    :param k: integer\n    :return: integer\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n\n\ndef get_Inv_Count(arr, k):\n    \"\"\"\n    :param arr: list of integers\n    :param k: integer\n    :return: integer\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n\n\ndef get_Inv_Count(arr, k):\n    \"\"\"\n    :param arr: list of integers\n    :param k: integer\n    :return: integer\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n\n\ndef get_Inv_Count(arr, k):\n    \"\"\"\n    :param arr: list of integers\n    :param k: integer\n    :return: integer\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i]"], ["\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"\n\n\ndef flatten_list(nested_list):\n    \"\"\"\n    Flatten a nested list.\n    :param nested_list: nested list\n    :return: flattened list\n    \"\"\"\n    return [item for sublist in nested_list for item in sublist]\n\n"], ["\"\"\"\nWrite a function to find the nested list elements which are present in another list.\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\"\"\"\n\n\ndef intersection_nested_lists(list1, list2):\n    \"\"\"\n    Find the nested list elements which are present in another list.\n\n    Parameters\n    ----------\n    list1 : list\n        The first list.\n    list2 : list\n        The second list.\n\n    Returns\n    -------\n    list\n        The nested list elements which are present in another list.\n\n    \"\"\"\n    return [x for x in list1 if x in list2]\n\n\ndef intersection_nested_lists_2(list1, list2):\n    \"\"\"\n    Find the nested list elements which are present in another list.\n\n    Parameters\n    ----------\n    list1 : list\n        The first list.\n    list2 : list\n        The second list.\n\n    Returns\n    -------\n    list\n        The nested list elements which are present in another list.\n\n    \"\"\"\n    return [x for x in list1 if x in list2]\n\n\ndef intersection_nested_lists_3(list1, list2):\n    \"\"\"\n    Find the nested list elements which are present in another list.\n\n    Parameters\n    ----------\n    list1 : list\n        The first list.\n    list2 : list\n        The second list.\n\n    Returns\n    -------\n    list\n        The nested list elements which are present in another list.\n\n    \"\"\"\n    return [x for x in list1 if x in list2]\n\n\ndef intersection_nested_lists_4(list1, list2"], ["\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"\n\n\ndef max_aggregate(tuples):\n    \"\"\"\n    :param tuples: a list of tuples\n    :return: the maximum aggregate from the list of tuples\n    \"\"\"\n    max_aggregate = 0\n    for tuple in tuples:\n        max_aggregate = max(max_aggregate, tuple[1])\n    return max_aggregate\n\n"], ["\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert count_binary_seq(1) == 2.0\n\"\"\"\n\n\ndef count_binary_seq(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return count_binary_seq(n - 1) + count_binary_seq(n - 2)\n\n"], ["\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"\n\n\ndef depth(dct):\n    \"\"\"\n    >>> depth({'a':1, 'b': {'c': {'d': {}}}})\n    4\n    \"\"\"\n    return len(list(dct.keys()))\n\n\ndef depth_dict(dct):\n    \"\"\"\n    >>> depth_dict({'a':1, 'b': {'c': {'d': {}}}})\n    4\n    \"\"\"\n    return len(list(dct.values()))\n\n\ndef depth_dict_iter(dct):\n    \"\"\"\n    >>> depth_dict_iter({'a':1, 'b': {'c': {'d': {}}}})\n    4\n    \"\"\"\n    return len(list(dct.keys()))\n\n\ndef depth_dict_iter_iter(dct):\n    \"\"\"\n    >>> depth_dict_iter_iter({'a':1, 'b': {'c': {'d': {}}}})\n    4\n    \"\"\"\n    return len(list(dct.values()))\n\n\ndef depth_dict_iter_iter_iter(dct):\n    \"\"\"\n    >>> depth_dict_iter_iter({'a':1, 'b': {'c': {'d': {}}}})\n    4\n    \"\"\"\n    return len(list(dct.values()))\n\n\ndef depth_dict_iter_iter_iter_iter(dct):\n    \"\"\"\n    >>> depth_dict_iter_iter_iter({'a':1, 'b': {'c': {'d': {}}}})\n    4\n    \"\"\"\n    return len(list(dct.values()))\n\n\ndef depth_dict_iter_iter_iter_iter_iter(dct):\n    \"\"\"\n    >>> depth_dict_iter_iter_iter_iter({'a':1, 'b': {'c': {'d': {}}}})\n    4\n    \"\"\"\n    return len(list(dct.values()))\n\n\ndef depth_dict_iter_iter_iter_iter_iter(dct):\n    \"\"\"\n    >>> depth"], ["\"\"\"\nWrite a python function to find the most significant bit number which is also a set bit.\nassert set_Bit_Number(6) == 4\n\"\"\"\n\n\ndef set_Bit_Number(n):\n    # Write your code here\n    return n\n\n"], ["\"\"\"\nWrite a python function to check whether the count of inversion of two types are same or not.\nassert solve([1,0,2],3) == True\n\"\"\"\n\n\ndef solve(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count == n\n\n"], ["\"\"\"\nWrite a python function to find element at a given index after number of rotations.\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\"\"\"\n\n\ndef find_Element(arr, arr_copy, index, n):\n    if n == 0:\n        return arr[index]\n    else:\n        return find_Element(arr_copy, arr, index + 1, n - 1)\n\n\ndef find_Element(arr, arr_copy, index, n):\n    if n == 0:\n        return arr[index]\n    else:\n        return find_Element(arr_copy, arr, index + 1, n - 1)\n\n\ndef find_Element(arr, arr_copy, index, n):\n    if n == 0:\n        return arr[index]\n    else:\n        return find_Element(arr_copy, arr, index + 1, n - 1)\n\n\ndef find_Element(arr, arr_copy, index, n):\n    if n == 0:\n        return arr[index]\n    else:\n        return find_Element(arr_copy, arr, index + 1, n - 1)\n\n\ndef find_Element(arr, arr_copy, index, n):\n    if n == 0:\n        return arr[index]\n    else:\n        return find_Element(arr_copy, arr, index + 1, n - 1)\n\n\ndef find_Element(arr, arr_copy, index, n):\n    if n == 0:\n        return arr[index]\n    else:\n        return find_Element(arr_copy, arr, index + 1, n - 1)\n\n\ndef find_Element(arr, arr_copy, index, n):\n    if n == 0:\n        return arr[index]\n    else:\n        return find_Element(arr_copy, arr, index + 1, n - 1)\n\n\ndef find_Element(arr, arr_copy, index, n):\n    if n == 0:\n        return arr[index]\n    else:"], ["\"\"\"\nWrite a function to match two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"\n\n\ndef start_withp(words):\n    \"\"\"\n    >>> start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n    ('Python', 'PHP')\n    \"\"\"\n    return sorted(list(filter(lambda x: x[0].startswith('p'), words)))\n\n\ndef main():\n    \"\"\"\n    >>> main()\n    \"\"\"\n    print(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]))\n\n"], ["\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"\n\n\ndef max_sum_increasing_subseq(arr, start, end, k):\n    if k > end:\n        return 0\n\n    if k == 1:\n        return max(arr[start:end])\n\n    if k == 2:\n        return max(arr[start:end], arr[start:end][:k])\n\n    if k == 3:\n        return max(arr[start:end], arr[start:end][:k], arr[start:end][:k][:k])\n\n    if k == 4:\n        return max(arr[start:end], arr[start:end][:k], arr[start:end][:k][:k], arr[start:end][:k][:k][:k])\n\n    if k == 5:\n        return max(arr[start:end], arr[start:end][:k], arr[start:end][:k][:k], arr[start:end][:k][:k][:k], arr[start:end][:k][:k][:k][:k])\n\n    if k == 6:\n        return max(arr[start:end], arr[start:end][:k], arr[start:end][:k][:k], arr[start:end][:k][:k][:k], arr[start:end][:k][:k][:k][:k])\n\n    if k == 7:\n        return max(arr[start:end], arr[start:end][:k], arr[start:end][:k][:k], arr[start:end][:k][:k][:k], arr[start:end][:k][:k][:k][:k])\n\n    if k == 8:\n        return max("], ["\"\"\"\nWrite a function to get a colon of a tuple.\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\"\"\"\n\ndef colon_tuplex(tuplex, colon, colon_length):\n    if len(tuplex) == 0:\n        return \"\"\n    elif len(tuplex) == 1:\n        return tuplex[0]\n    elif len(tuplex) == 2:\n        if colon == 0:\n            return tuplex[0] + \":\" + tuplex[1]\n        else:\n            return tuplex[0] + \":\" + tuplex[1] + \":\" + tuplex[colon_length]\n    elif len(tuplex) == 3:\n        if colon == 0:\n            return tuplex[0] + \":\" + tuplex[1] + \":\" + tuplex[2]\n        else:\n            return tuplex[0] + \":\" + tuplex[1] + \":\" + tuplex[2] + \":\" + tuplex[colon_length]\n    elif len(tuplex) == 4:\n        if colon == 0:\n            return tuplex[0] + \":\" + tuplex[1] + \":\" + tuplex[2] + \":\" + tuplex[3]\n        else:\n            return tuplex[0] + \":\" + tuplex[1] + \":\" + tuplex[2] + \":\" + tuplex[3] + \":\" + tuplex[colon_length]\n    elif len(tuplex) == 5:\n        if colon == 0:\n            return tuplex[0] + \":\" + tuplex[1] + \":\" + tuplex[2] + \":\" + tuplex[3] + \":\" + tuplex[4]\n        else:\n            return tuplex[0] + \":\" + tuplex[1] + \":\" + tuplex[2] + \":\" + tuplex[3] + \":\" + tuplex[4] + \":\" + tuplex[colon_length]\n    elif len(tuplex) == 6:\n        if colon == "], ["\"\"\"\nWrite a function to find the specified number of largest products from two given lists.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"\n\n\ndef large_product(lst1, lst2, n):\n    \"\"\"\n    :param lst1: list of integers\n    :param lst2: list of integers\n    :param n: number of largest products\n    :return: list of integers\n    \"\"\"\n    # your code here\n    # your code here\n    # your code here\n    return lst1[:n]\n\n"], ["\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"\n\n\ndef maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n\n"], ["\"\"\"\nWrite a function to convert a given string to a tuple.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"\n"], ["\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the volume of a cone.\nassert volume_cone(5,12)==314.15926535897927\n\"\"\"\n\nimport math\n\ndef volume_cone(radius, height):\n    \"\"\"\n    :param radius: radius of the cone\n    :param height: height of the cone\n    :return: volume of the cone\n    \"\"\"\n    return (1/3) * math.pi * radius**2 * height\n\n\ndef main():\n    \"\"\"\n    :return: None\n    \"\"\"\n    print(volume_cone(5,12))\n\n"], ["\"\"\"\nWrite a python function to print positive numbers in a list.\nassert pos_nos([-1,-2,1,2]) == 1,2\n\"\"\"\n\n\ndef pos_nos(lst):\n    \"\"\"\n    Write a python function to print positive numbers in a list.\n    :param lst: list\n    :return:\n    \"\"\"\n    for i in lst:\n        if i > 0:\n            print(i)\n\n\npos_nos([-1, -2, 1, 2])\n"], ["\"\"\"\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\"\"\"\n\n\ndef max_sum_rectangular_grid(grid, n):\n    \"\"\"\n    :type grid: List[List[int]]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # TODO: implement me\n    pass\n\n"], ["\"\"\"\nWrite a python function to find the first maximum length of even word.\nassert find_Max_Len_Even(\"python language\") == \"language\"\n\"\"\"\n\n\ndef find_Max_Len_Even(text):\n    \"\"\"\n    Find the first maximum length of even word.\n    \"\"\"\n    max_len = 0\n    for word in text.split():\n        if len(word) % 2 == 0:\n            max_len = max(max_len, len(word))\n    return max_len\n\n"], ["\"\"\"\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\"\"\"\n\n\ndef find_last_occurrence(array, target):\n    \"\"\"\n    Find the index of the last occurrence of a given number in a sorted array.\n    :param array: list of integers\n    :param target: number to search for\n    :return: index of last occurrence of target in array\n    \"\"\"\n    # TODO: implement me\n    return -1\n\n\ndef main():\n    \"\"\"\n    Test find_last_occurrence function.\n    \"\"\"\n    print(find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5))\n    print(find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 10))\n\n"], ["\"\"\"\nWrite a function to reflect the modified run-length encoding from a list.\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\"\"\"\n\n\ndef modified_encode(lst):\n    \"\"\"\n    Reflect the modified run-length encoding from a list.\n    :param lst: list\n    :return: list\n    \"\"\"\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n    if len(lst) == 3:\n        return [lst[0], lst[1], lst[2]]\n    if len(lst) == 4:\n        return [lst[0], lst[1], lst[2], lst[3]]\n    if len(lst) == 5:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4]]\n    if len(lst) == 6:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5]]\n    if len(lst) == 7:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6]]\n    if len(lst) == 8:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7]]\n    if len(lst) == 9:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7], lst[8]]\n    if len(lst) == 10:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7], lst[8], lst[9]]\n    if len(lst) == 11:\n        return"], ["\"\"\"\nWrite a python function to find the maximum volume of a cuboid with given sum of sides.\nassert max_volume(8) == 18\n\"\"\"\n\n\ndef max_volume(sides):\n    \"\"\"\n    :param sides: list of integers\n    :return: maximum volume of cuboid with given sides\n    \"\"\"\n    # TODO: implement me\n    pass\n\n"], ["\"\"\"\nWrite a function to find all five characters long word in the given string by using regex.\nassert find_long_word('Please move back to strem') == ['strem']\n\"\"\"\n\n\ndef find_long_word(string):\n    \"\"\"\n    :param string: string to search\n    :return: list of all five characters long words in the string\n    \"\"\"\n    regex = r\"(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])\"\n    return re.findall(regex, string)\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print(find_long_word('Please move back to strem'))\n\n"], ["\"\"\"\nWrite a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\nassert sum_difference(12)==5434\n\"\"\"\n\n# 10.0\n\n# 10.1\n\n# 10.2\n\n# 10.3\n\n# 10.4\n\n# 10.5\n\n# 10.6\n\n# 10.7\n\n# 10.8\n\n# 10.9\n\n# 10.10\n\n# 10.11\n\n# 10.12\n\n# 10.13\n\n# 10.14\n\n# 10.15\n\n# 10.16\n\n# 10.17\n\n# 10.18\n\n# 10.19\n\n# 10.20\n\n# 10.21\n\n# 10.22\n\n# 10.23\n\n# 10.24\n\n# 10.25\n\n# 10.26\n\n# 10.27\n\n# 10.28\n\n# 10.29\n\n# 10.30\n\n# 10.31\n\n# 10.32\n\n# 10.33\n\n# 10.34\n\n# 10.35\n\n# 10.36\n\n# 10.37\n\n# 10.38\n\n# 10.39\n\n# 10.40\n\n# 10.41\n\n# 10.42\n\n# 10.43\n\n# 10.44\n\n# 10.45\n\n# 10.46\n\n# 10.47\n\n# 10.48\n\n# 10.49\n\n# 10.50\n\n# 10.51\n\n# 1"], ["\"\"\"\nWrite a function to find the demlo number for the given number.\nassert find_demlo(\"111111\") == '12345654321'\n\"\"\"\n"], ["\"\"\"\nWrite a function to find all index positions of the minimum values in a given list.\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\"\"\"\n\n\ndef position_min(lst):\n    \"\"\"\n    :param lst: list\n    :return: list\n    \"\"\"\n    min_lst = []\n    for i in range(len(lst)):\n        if lst[i] < min(lst[i:]) and lst[i] != -1:\n            min_lst.append(i)\n    return min_lst\n\n\ndef position_min(lst):\n    \"\"\"\n    :param lst: list\n    :return: list\n    \"\"\"\n    min_lst = []\n    for i in range(len(lst)):\n        if lst[i] < min(lst[i:]) and lst[i] != -1:\n            min_lst.append(i)\n    return min_lst\n\n\ndef position_min(lst):\n    \"\"\"\n    :param lst: list\n    :return: list\n    \"\"\"\n    min_lst = []\n    for i in range(len(lst)):\n        if lst[i] < min(lst[i:]) and lst[i] != -1:\n            min_lst.append(i)\n    return min_lst\n\n\ndef position_min(lst):\n    \"\"\"\n    :param lst: list\n    :return: list\n    \"\"\"\n    min_lst = []\n    for i in range(len(lst)):\n        if lst[i] < min(lst[i:]) and lst[i] != -1:\n            min_lst.append(i)\n    return min_lst\n\n\ndef position_min(lst):\n    \"\"\"\n    :param lst: list\n    :return: list\n    \"\"\"\n    min_lst = []\n    for i in range(len(lst)):\n        if lst[i] < min(lst[i:]) and lst[i] != -1:\n            min_lst.append(i)\n    return min_lst\n"], ["\"\"\"\nWrite a function to re-arrange the given array in alternating positive and negative items.\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\"\"\"\n\n\ndef re_arrange(arr, n):\n    arr.sort()\n    for i in range(n):\n        for j in range(n - i - 1):\n            arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(re_arrange(arr, 10))\n\n"], ["\"\"\"\nWrite a function to extract the sum of alternate chains of tuples.\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\"\"\"\n\n\ndef sum_of_alternates(seq):\n    \"\"\"\n    >>> sum_of_alternates((5, 6, 3, 6, 10, 34))\n    46\n    \"\"\"\n    return sum(\n        [\n            sum(\n                [\n                    a[i]\n                    for i in range(len(a) - 1)\n                    if a[i] != a[i + 1]\n                ]\n            )\n            for a in itertools.combinations(seq, 2)\n        ]\n    )\n\n"], ["\"\"\"\nWrite a python function to find the minimum number of squares whose sum is equal to a given number.\nassert get_Min_Squares(6) == 3\n\"\"\"\n\n\ndef get_Min_Squares(num):\n    \"\"\"\n    :param num: int\n    :return: int\n    \"\"\"\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    elif num == 3:\n        return 3\n    elif num == 4:\n        return 4\n    elif num == 5:\n        return 5\n    elif num == 6:\n        return 6\n    elif num == 7:\n        return 7\n    elif num == 8:\n        return 8\n    elif num == 9:\n        return 9\n    elif num == 10:\n        return 10\n    elif num == 11:\n        return 11\n    elif num == 12:\n        return 12\n    elif num == 13:\n        return 13\n    elif num == 14:\n        return 14\n    elif num == 15:\n        return 15\n    elif num == 16:\n        return 16\n    elif num == 17:\n        return 17\n    elif num == 18:\n        return 18\n    elif num == 19:\n        return 19\n    elif num == 20:\n        return 20\n    elif num == 21:\n        return 21\n    elif num == 22:\n        return 22\n    elif num == 23:\n        return 23\n    elif num == 24:\n        return 24\n    elif num == 25:\n        return 25\n    elif num == 26:\n        return 26\n    elif num == 27:\n        return 27\n    elif num == 28:\n        return 28\n    elif num == 29:\n        return 29\n    elif num == 30"], ["\"\"\"\nWrite a function to get the word with most number of occurrences in the given strings list.\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\"\"\"\n\n\ndef most_occurrences(strings):\n    \"\"\"\n    :param strings: list of strings\n    :return: string with most occurrences\n    \"\"\"\n    # TODO: implement me\n    pass\n\n"], ["\"\"\"\nWrite a function to print check if the triangle is isosceles or not.\nassert check_isosceles(6,8,12)==False \n\"\"\"\n\ndef check_isosceles(a,b,c):\n    if a==b==c:\n        return True\n    else:\n        return False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["\"\"\"\nWrite a function to rotate a given list by specified number of items to the left direction.\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\"\"\"\n\n\ndef rotate_left(lst, n):\n    return lst[n:] + lst[:n]\n\n\ndef test_rotate_left():\n    assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4) == [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n"], ["\"\"\"\nWrite a python function to count negative numbers in a list.\nassert neg_count([-1,-2,3,-4,-5]) == 4\n\"\"\"\n\n# 1. Import the necessary libraries\nimport numpy as np\n\n# 2. Define the function\ndef neg_count(nums):\n    # 3. Initialize the counter\n    neg_count = 0\n\n    # 4. Iterate through the list\n    for num in nums:\n        # 5. If the number is negative, increment the counter\n        if num < 0:\n            neg_count += 1\n\n    # 6. Return the counter\n    return neg_count\n\n# 7. Test the function"], ["\"\"\"\nWrite a function to find all three, four, five characters long words in the given string by using regex.\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\"\"\"\n\n\ndef find_char(text):\n    \"\"\"\n    Find all three, four, five characters long words in the given string by using regex.\n\n    Args:\n        text: str\n\n    Returns:\n        list: list of words\n    \"\"\"\n    words = re.findall(r'\\b\\w{3,5}\\b', text)\n    return words\n\n\ndef main():\n    text = 'For the four consumer complaints contact manager AKR reddy'\n    words = find_char(text)\n    print(words)\n\n"], ["\"\"\"\nWrite a python function to count unset bits of a given number.\nassert count_unset_bits(2) == 1\n\"\"\"\n\n\ndef count_unset_bits(n):\n    \"\"\"\n    Count the number of unset bits in a number.\n\n    Args:\n        n (int): The number to count the unset bits of.\n\n    Returns:\n        int: The number of unset bits in the number.\n    \"\"\"\n    return sum(1 for i in range(n) if i & 1)\n\n"], ["\"\"\"\nWrite a function to count character frequency of a given string.\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\"\"\"\n\n\ndef char_frequency(s):\n    \"\"\"\n    :param s: string\n    :return: dict\n    \"\"\"\n    freq = {}\n    for c in s:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    return freq\n\n\ndef main():\n    s = 'python'\n    print(char_frequency(s))\n\n"], ["\"\"\"\nWrite a python function to sort a list according to the second element in sublist.\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\"\"\"\n\n\ndef sort_sublist(sublist):\n    return sorted(sublist, key=lambda x: x[1])\n\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if sides are given.\nassert check_Validity(1,2,3) == False\n\"\"\"\n\n\ndef check_Validity(a, b, c):\n    return a + b > c and a + c > b and b + c > a\n\n\ndef main():\n    \"\"\"\n    \"\"\"\n    print(check_Validity(1, 2, 3))\n    print(check_Validity(1, 2, 4))\n    print(check_Validity(1, 2, 5))\n    print(check_Validity(1, 2, 6))\n    print(check_Validity(1, 2, 7))\n    print(check_Validity(1, 2, 8))\n    print(check_Validity(1, 2, 9))\n    print(check_Validity(1, 2, 10))\n    print(check_Validity(1, 2, 11))\n    print(check_Validity(1, 2, 12))\n    print(check_Validity(1, 2, 13))\n    print(check_Validity(1, 2, 14))\n    print(check_Validity(1, 2, 15))\n    print(check_Validity(1, 2, 16))\n    print(check_Validity(1, 2, 17))\n    print(check_Validity(1, 2, 18))\n    print(check_Validity(1, 2, 19))\n    print(check_Validity(1, 2, 20))\n    print(check_Validity(1, 2, 21))\n    print(check_Validity(1, 2, 22))\n    print(check_Validity(1, 2, 23))\n    print(check_Validity(1, 2, 24))\n    print(check_Validity(1, 2, 25))\n    print(check_Validity(1, 2, 26))\n"], ["\"\"\"\nWrite a function to find the sum of arithmetic progression.\nassert ap_sum(1,5,2)==25\n\"\"\"\n\ndef ap_sum(a, b, c):\n    return (a + b + c) / 2\n"], ["\"\"\"\nWrite a function to check whether the given month name contains 28 days or not.\nassert check_monthnum(\"February\")==True\n\"\"\"\n\n\ndef check_monthnum(month_name):\n    \"\"\"\n    :param month_name: str\n    :return: bool\n    \"\"\"\n    if len(month_name) != 2:\n        return False\n    if month_name[0] == \"F\" and month_name[1] == \"J\":\n        return True\n    if month_name[0] == \"F\" and month_name[1] == \"M\":\n        return True\n    if month_name[0] == \"F\" and month_name[1] == \"J\":\n        return True\n    if month_name[0] == \"F\" and month_name[1] == \"J\":\n        return True\n    if month_name[0] == \"F\" and month_name[1] == \"J\":\n        return True\n    if month_name[0] == \"F\" and month_name[1] == \"J\":\n        return True\n    if month_name[0] == \"F\" and month_name[1] == \"J\":\n        return True\n    if month_name[0] == \"F\" and month_name[1] == \"J\":\n        return True\n    if month_name[0] == \"F\" and month_name[1] == \"J\":\n        return True\n    if month_name[0] == \"F\" and month_name[1] == \"J\":\n        return True\n    if month_name[0] == \"F\" and month_name[1] == \"J\":\n        return True\n    if month_name[0] == \"F\" and month_name[1] == \"J\":\n        return True\n    if month_name[0] == \"F\" and month_name[1] == \"J\":\n        return True\n    if month_name[0] == \"F\" and month_name[1] == \"J\":\n        return True\n    if month_name[0] == \"F\" and month_name[1] == \"J\":\n        return True\n    if month"], ["\"\"\"\nWrite a function that matches a word at the end of a string, with optional punctuation.\nassert text_match_word(\"python.\")==('Found a match!')\n\"\"\"\n\n\ndef text_match_word(text: str, word: str) -> str:\n    \"\"\"\n    Matches a word at the end of a string, with optional punctuation.\n    \"\"\"\n    if word == \"\":\n        return text\n    if text.endswith(word):\n        return text[:-len(word)]\n    return text\n\n"], ["\"\"\"\nWrite a python function to count the number of substrings with same first and last characters.\nassert count_Substring_With_Equal_Ends('aba') == 4\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the maximum occuring divisor in an interval.\nassert find_Divisor(2,2) == 2\n\"\"\"\n\n\ndef find_Divisor(start, end):\n    \"\"\"\n    Find the maximum divisor in the given interval.\n    :param start: The start of the interval.\n    :param end: The end of the interval.\n    :return: The maximum divisor in the given interval.\n    \"\"\"\n    divisors = []\n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            divisors.append(i)\n    return max(divisors)\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(find_Divisor(2, 2))\n    print(find_Divisor(2, 3))\n    print(find_Divisor(2, 4))\n    print(find_Divisor(2, 5))\n    print(find_Divisor(2, 6))\n    print(find_Divisor(2, 7))\n    print(find_Divisor(2, 8))\n    print(find_Divisor(2, 9))\n    print(find_Divisor(2, 10))\n    print(find_Divisor(2, 11))\n    print(find_Divisor(2, 12))\n    print(find_Divisor(2, 13))\n    print(find_Divisor(2, 14))\n    print(find_Divisor(2, 15))\n    print(find_Divisor(2, 16))\n    print(find_Divisor(2, 17))\n    print(find_Divisor(2, 18))\n    print(find_Divisor(2, 19))\n    print(find_Divisor(2, 20))\n    print(find_Divisor(2, 21))\n    print(find_Divisor(2, 22))\n    print(find_Divisor(2"], ["\"\"\"\nWrite a python function to find the sum of the three lowest positive numbers from a given list of numbers.\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\"\"\"\n\n\ndef sum_three_smallest_nums(numbers):\n    \"\"\"\n    :param numbers: list of numbers\n    :return: sum of the three lowest positive numbers\n    \"\"\"\n    return sum(sorted(numbers)[0:3])\n\n"], ["\"\"\"\nWrite a function to convert the given set into ordered tuples.\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\"\"\"\n\n\ndef set_to_tuple(set_):\n    \"\"\"\n    :param set_: a set\n    :return: a tuple\n    \"\"\"\n    return tuple(set_)\n\n\ndef main():\n    \"\"\"\n    \"\"\"\n    print(set_to_tuple({1, 2, 3, 4, 5}))\n\n"], ["\"\"\"\nWrite a function to find the smallest range that includes at-least one element from each of the given arrays.\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\"\"\"\n"], ["\"\"\"\nWrite a function to calculate the number of digits and letters in a string.\nassert dig_let(\"python\")==(6,0)\n\"\"\"\n\n\n"], ["\"\"\"\nWrite a python function to find number of elements with odd factors in a given range.\nassert count_Odd_Squares(5,100) == 8\n\"\"\"\n\n\ndef count_Odd_Squares(start, end):\n    \"\"\"\n    :param start: int\n    :param end: int\n    :return: int\n    \"\"\"\n    count = 0\n    for i in range(start, end + 1):\n        if i % 2 == 1:\n            count += 1\n    return count\n\n"], ["\"\"\"\nWrite a function to find the difference between two consecutive numbers in a given list.\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\"\"\"\n\n\ndef diff_consecutivenums(lst):\n    \"\"\"\n    :param lst: list of numbers\n    :return: list of differences between consecutive numbers\n    \"\"\"\n    diffs = []\n    for i in range(1, len(lst)):\n        diffs.append(lst[i] - lst[i - 1])\n    return diffs\n\n\ndef main():\n    \"\"\"\n    Test the function\n    \"\"\"\n    assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\n"], ["\"\"\"\nWrite a function to find entringer number e(n, k).\nassert zigzag(4, 3) == 5\n\"\"\"\n\n\ndef zigzag(n, k):\n    \"\"\"\n    >>> zigzag(4, 3)\n    5\n    >>> zigzag(10, 1)\n    10\n    >>> zigzag(10, 2)\n    10\n    >>> zigzag(10, 3)\n    10\n    >>> zigzag(10, 4)\n    10\n    >>> zigzag(10, 5)\n    10\n    >>> zigzag(10, 6)\n    10\n    >>> zigzag(10, 7)\n    10\n    >>> zigzag(10, 8)\n    10\n    >>> zigzag(10, 9)\n    10\n    >>> zigzag(10, 10)\n    10\n    >>> zigzag(10, 11)\n    10\n    >>> zigzag(10, 12)\n    10\n    >>> zigzag(10, 13)\n    10\n    >>> zigzag(10, 14)\n    10\n    >>> zigzag(10, 15)\n    10\n    >>> zigzag(10, 16)\n    10\n    >>> zigzag(10, 17)\n    10\n    >>> zigzag(10, 18)\n    10\n    >>> zigzag(10, 19)\n    10\n    >>> zigzag(10, 20)\n    10\n    >>> zigzag(10, 21)\n    10\n    >>> zigzag(10, 22)\n    10\n    >>> zigzag(10, 23)\n    10\n    >>> zigzag(10, 24)\n"], ["\"\"\"\nWrite a python function to count the number of squares in a rectangle.\nassert count_Squares(4,3) == 20\n\"\"\"\n\n# 1. Write a function to count the number of squares in a rectangle.\n\n# 2. Write a function to count the number of squares in a rectangle.\n\n# 3. Write a function to count the number of squares in a rectangle.\n\n# 4. Write a function to count the number of squares in a rectangle.\n\n# 5. Write a function to count the number of squares in a rectangle.\n\n# 6. Write a function to count the number of squares in a rectangle.\n\n# 7. Write a function to count the number of squares in a rectangle.\n\n# 8. Write a function to count the number of squares in a rectangle.\n\n# 9. Write a function to count the number of squares in a rectangle.\n\n# 10. Write a function to count the number of squares in a rectangle.\n\n# 11. Write a function to count the number of squares in a rectangle.\n\n# 12. Write a function to count the number of squares in a rectangle.\n\n# 13. Write a function to count the number of squares in a rectangle.\n\n# 14. Write a function to count the number of squares in a rectangle.\n\n# 15. Write a function to count the number of squares in a rectangle.\n\n# 16. Write a function to count the number of squares in a rectangle.\n\n# 17. Write a function to count the number of squares in a rectangle.\n\n# 18. Write a function to count the number of squares in a rectangle.\n\n# 19. Write a function to count the number of squares in a rectangle.\n\n# 20. Write a function to count the number of squares in a rectangle.\n\n# 21. Write a function to count the number of squares in a rectangle.\n\n# 22. Write a function to count the number of squares in a rectangle.\n\n# 23. Write a function to count the number of squares in a rectangle.\n\n# 24. Write a function to count the number of squares in a rectangle.\n\n# 2"], ["\"\"\"\nWrite a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\nassert find_ways(4) == 2\n\"\"\"\n\n\ndef find_ways(length: int) -> int:\n    \"\"\"\n    Find the number of sequences of length length having non-negative prefix sums.\n\n    :param length: length of the sequence\n    :return: number of sequences\n    \"\"\"\n    # TODO: implement me\n    pass\n"], ["\"\"\"\nWrite a python function to check whether the given string is a binary string or not.\nassert check(\"01010101010\") == \"Yes\"\n\"\"\"\n\n\ndef check(s):\n    if len(s) == 0:\n        return True\n    if s[0] == \"1\":\n        return check(s[1:])\n    return False\n\n"], ["\"\"\"\nWrite a python function to minimize the length of the string by removing occurrence of only one character.\nassert minimum_Length(\"mnm\") == 1\n\"\"\"\n\n# 10. Write a python function to find the number of occurrences of a substring in a string.\n\ndef find_substring_occurrences(string, substring):\n    return len(string.find(substring))\n"], ["\"\"\"\nWrite a python function to find the first element occurring k times in a given array.\nassert first_Element([0,1,2,3,4,5],6,1) == 0\n\"\"\"\n\n\ndef first_Element(array, k):\n    \"\"\"\n    Find the first element occurring k times in a given array.\n    :param array: list of integers\n    :param k: integer\n    :return: first element occurring k times\n    \"\"\"\n    # Write your code here\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return array[0]\n    # return"], ["\"\"\"\nWrite a python function to check whether all the characters in a given string are unique.\nassert unique_Characters('aba') == False\n\"\"\"\n\n\ndef unique_Characters(string):\n    \"\"\"\n    :param string: a string\n    :return: True if all characters are unique, False otherwise\n    \"\"\"\n    if len(string) == 0:\n        return True\n    else:\n        for i in range(len(string)):\n            if string[i] in string[i+1:]:\n                return False\n        return True\n\n"], ["\"\"\"\nWrite a function to remove a specified column from a given nested list.\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\"\"\"\n\ndef remove_column(nested_list, index):\n    # Write your code here\n    if index == len(nested_list):\n        return nested_list\n    else:\n        return remove_column(nested_list[index], index)\n\n"], ["\"\"\"\nWrite a function to find t-nth term of arithemetic progression.\nassert tn_ap(1,5,2)==9\n\"\"\"\n\n\ndef tn_ap(a, b, n):\n    \"\"\"\n    Find the t-nth term of an arithmetic progression.\n    :param a: first term\n    :param b: common difference\n    :param n: number of terms\n    :return: t-nth term\n    \"\"\"\n    return a + (b * n)\n\n\ndef tn_ap_test(a, b, n):\n    \"\"\"\n    Test function for t-nth term of arithmetic progression.\n    :param a: first term\n    :param b: common difference\n    :param n: number of terms\n    :return: t-nth term\n    \"\"\"\n    assert tn_ap(a, b, n) == tn_ap_test(a, b, n)\n\n\ndef tn_ap_test2(a, b, n):\n    \"\"\"\n    Test function for t-nth term of arithmetic progression.\n    :param a: first term\n    :param b: common difference\n    :param n: number of terms\n    :return: t-nth term\n    \"\"\"\n    assert tn_ap(a, b, n) == tn_ap_test2(a, b, n)\n\n\ndef tn_ap_test3(a, b, n):\n    \"\"\"\n    Test function for t-nth term of arithmetic progression.\n    :param a: first term\n    :param b: common difference\n    :param n: number of terms\n    :return: t-nth term\n    \"\"\"\n    assert tn_ap(a, b, n) == tn_ap_test3(a, b, n)\n\n\ndef tn_ap_test4(a, b, n):\n    \"\"\"\n    Test function for t-nth term of arithmetic progression.\n    :param a: first term\n    :param b: common difference\n    :param n: number of terms\n    :return: t-nth term\n    \"\"\"\n    assert tn_ap(a, b, n) == tn_ap_test4"], ["\"\"\"\nWrite a python function to count the number of rectangles in a circle of radius r.\nassert count_Rectangles(2) == 8\n\"\"\"\n\n\ndef count_Rectangles(radius):\n    \"\"\"\n    :param radius: radius of the circle\n    :return: number of rectangles in a circle of radius r\n    \"\"\"\n    count = 0\n    for i in range(0, 2 * math.pi, 2 * math.pi / radius):\n        count += 1\n    return count\n\n"], ["\"\"\"\nWrite a function to find the third angle of a triangle using two angles.\nassert find_angle(47,89)==44\n\"\"\"\n\n\ndef find_angle(a, b):\n    \"\"\"\n    Find the third angle of a triangle using two angles.\n    \"\"\"\n    # Find the sum of the two angles\n    sum_angle = a + b\n    # Find the sum of the two angles\n    sum_angle = sum_angle % (180)\n    # Find the sum of the two angles\n    sum_angle = sum_angle % (180)\n    # Find the sum of the two angles\n    sum_angle = sum_angle % (180)\n    # Find the sum of the two angles\n    sum_angle = sum_angle % (180)\n    # Find the sum of the two angles\n    sum_angle = sum_angle % (180)\n    # Find the sum of the two angles\n    sum_angle = sum_angle % (180)\n    # Find the sum of the two angles\n    sum_angle = sum_angle % (180)\n    # Find the sum of the two angles\n    sum_angle = sum_angle % (180)\n    # Find the sum of the two angles\n    sum_angle = sum_angle % (180)\n    # Find the sum of the two angles\n    sum_angle = sum_angle % (180)\n    # Find the sum of the two angles\n    sum_angle = sum_angle % (180)\n    # Find the sum of the two angles\n    sum_angle = sum_angle % (180)\n    # Find the sum of the two angles\n    sum_angle = sum_angle % (180)\n    # Find the sum of the two angles\n    sum_angle = sum_angle % (180)\n    # Find the sum of the two angles\n    sum_angle = sum_angle % (180)\n    # Find the sum of the two angles\n    sum_angle = sum_angle % (180)\n    # Find the sum of the two angles\n    sum_angle = sum_angle % (180)\n"], ["\"\"\"\nWrite a function to find the maximum element of all the given tuple records.\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\"\"\"\n"], ["\"\"\"\nWrite a function to find modulo division of two lists using map and lambda function.\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\"\"\"\n\n\ndef moddiv_list(list1, list2):\n    return list(map(lambda x: x % 2, list1 + list2))\n\n"], ["\"\"\"\nWrite a python function to check whether one root of the quadratic equation is twice of the other or not.\nassert Check_Solution(1,3,2) == \"Yes\"\n\"\"\"\n\n\n"], ["\"\"\"\nWrite a function to find the n\u2019th carol number.\nassert get_carol(2) == 7\n\"\"\"\n\n\ndef get_carol(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    elif n == 13:\n        return 13\n    elif n == 14:\n        return 14\n    elif n == 15:\n        return 15\n    elif n == 16:\n        return 16\n    elif n == 17:\n        return 17\n    elif n == 18:\n        return 18\n    elif n == 19:\n        return 19\n    elif n == 20:\n        return 20\n    elif n == 21:\n        return 21\n    elif n == 22:\n        return 22\n    elif n == 23:\n        return 23\n    elif n == 24:\n        return 24\n    elif n == 25:\n        return 25\n    elif n == 26:\n        return 26\n    elif n == 27:\n        return 27\n    elif n == 28:\n        return 28\n    elif n == 29:\n        return 29\n    elif n == 30:\n        return 30\n    elif n == "], ["\"\"\"\nWrite a function to remove empty lists from a given list of lists.\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\"\"\"\n\n\ndef remove_empty(lst):\n    \"\"\"\n    Remove empty lists from a given list of lists.\n    :param lst: list of lists\n    :return: list of lists\n    \"\"\"\n    return [x for x in lst if x]\n\n\ndef main():\n    \"\"\"\n    Test the function.\n    \"\"\"\n    print(remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []]))\n\n"], ["\"\"\"\nWrite a python function to find the item with maximum occurrences in a given list.\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\"\"\"\n\n\ndef max_occurrences(lst):\n    # TODO: implement me\n    pass\n\n"], ["\"\"\"\nWrite a function to add the k elements to each element in the tuple.\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\"\"\"\n\n\ndef add_K_element(tuple_list, k):\n    return tuple_list + tuple_list[k:]\n\n"], ["\"\"\"\nWrite a function to find the number of flips required to make the given binary string a sequence of alternate characters.\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\"\"\"\n"], ["\"\"\"\nWrite a python function to count the number of digits of a given number.\nassert count_Digit(12345) == 5\n\"\"\"\n\n\ndef count_Digit(n):\n    return len(str(n))\n\n"], ["\"\"\"\nWrite a python function to find the largest product of the pair of adjacent elements from a given list of integers.\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\"\"\"\n\ndef adjacent_num_product(lst):\n    return max(lst[i]*lst[i+1] for i in range(len(lst)-1))\n"], ["\"\"\"\nWrite a function to check if a binary tree is balanced or not.\nassert is_tree_balanced(root) == False\n\"\"\"\n\n\ndef is_tree_balanced(root):\n    if root is None:\n        return True\n    if root.left is None and root.right is None:\n        return True\n    if root.left is not None:\n        return is_tree_balanced(root.left)\n    if root.right is not None:\n        return is_tree_balanced(root.right)\n    return False\n\n"], ["\"\"\"\nWrite a function to repeat the given tuple n times.\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\"\"\"\n\n\ndef repeat_tuples(tuple_to_repeat, times):\n    \"\"\"\n    :param tuple_to_repeat: the tuple to repeat\n    :param times: the number of times to repeat\n    :return: the tuple repeated times\n    \"\"\"\n    return tuple(repeat(tuple_to_repeat, times))\n\n"], ["\"\"\"\nWrite a function to find the lateral surface area of cuboid\nassert lateralsurface_cuboid(8,5,6)==156\n\"\"\"\n\n\ndef lateralsurface_cuboid(l, w, h):\n    \"\"\"\n    :param l: length of the cuboid\n    :param w: width of the cuboid\n    :param h: height of the cuboid\n    :return: lateral surface area of the cuboid\n    \"\"\"\n    return 2 * (l * w + l * h + w * h)\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print(lateralsurface_cuboid(8, 5, 6))\n\n"], ["\"\"\"\nWrite a function to sort a tuple by its float element.\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\"\"\"\n\n\ndef float_sort(items):\n    \"\"\"Sort a tuple by its float element.\n    Args:\n        items (tuple): A tuple of tuples.\n    Returns:\n        tuple: A tuple of tuples sorted by float elements.\n    \"\"\"\n    return sorted(items, key=lambda x: float(x[1]))\n\n"], ["\"\"\"\nWrite a function to find the smallest missing element in a sorted array.\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\"\"\"\n\n\ndef smallest_missing(array, start, end):\n    \"\"\"\n    Find the smallest missing element in a sorted array.\n    :param array: a sorted array\n    :param start: the index of the first element\n    :param end: the index of the last element\n    :return: the smallest missing element\n    \"\"\"\n    for i in range(start, end):\n        if array[i] != i + 1:\n            return i + 1\n    return end + 1\n\n\ndef main():\n    print(smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6))\n\n"], ["\"\"\"\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\"\"\"\n\n\ndef heap_assending(lst):\n    heapq.heapify(lst)\n    return heapq.nsmallest(1, lst)\n\n\ndef heap_assending_2(lst):\n    return heapq.nsmallest(1, lst)[0]\n\n\ndef heap_assending_3(lst):\n    return heapq.nsmallest(1, lst)[0]\n\n\ndef heap_assending_4(lst):\n    return heapq.nsmallest(1, lst)[0]\n\n\ndef heap_assending_5(lst):\n    return heapq.nsmallest(1, lst)[0]\n\n\ndef heap_assending_6(lst):\n    return heapq.nsmallest(1, lst)[0]\n\n\ndef heap_assending_7(lst):\n    return heapq.nsmallest(1, lst)[0]\n\n\ndef heap_assending_8(lst):\n    return heapq.nsmallest(1, lst)[0]\n\n\ndef heap_assending_9(lst):\n    return heapq.nsmallest(1, lst)[0]\n\n\ndef heap_assending_10(lst):\n    return heapq.nsmallest(1, lst)[0]\n\n\ndef heap_assending_11(lst):\n    return heapq.nsmallest(1, lst)[0]\n\n\ndef heap_assending_12(lst):\n    return heapq.nsmallest(1, lst)[0]\n\n\ndef heap_assending_13(lst):\n    return heapq.nsmallest(1, lst)[0]\n\n\ndef heap_ass"], ["\"\"\"\nWrite a function to find the volume of a cuboid.\nassert volume_cuboid(1,2,3)==6\n\"\"\"\n\n\ndef volume_cuboid(l, w, h):\n    \"\"\"\n    :param l: length\n    :param w: width\n    :param h: height\n    :return: volume\n    \"\"\"\n    return l * w * h\n\n\ndef volume_cuboid_2(l, w, h):\n    \"\"\"\n    :param l: length\n    :param w: width\n    :param h: height\n    :return: volume\n    \"\"\"\n    return l * w * h\n\n\ndef volume_cuboid_3(l, w, h):\n    \"\"\"\n    :param l: length\n    :param w: width\n    :param h: height\n    :return: volume\n    \"\"\"\n    return l * w * h\n\n\ndef volume_cuboid_4(l, w, h):\n    \"\"\"\n    :param l: length\n    :param w: width\n    :param h: height\n    :return: volume\n    \"\"\"\n    return l * w * h\n\n\ndef volume_cuboid_5(l, w, h):\n    \"\"\"\n    :param l: length\n    :param w: width\n    :param h: height\n    :return: volume\n    \"\"\"\n    return l * w * h\n\n\ndef volume_cuboid_6(l, w, h):\n    \"\"\"\n    :param l: length\n    :param w: width\n    :param h: height\n    :return: volume\n    \"\"\"\n    return l * w * h\n\n\ndef volume_cuboid_7(l, w, h):\n    \"\"\"\n    :param l: length\n    :param w: width\n    :param h: height\n    :return: volume\n    \"\"\"\n    return l * w * h\n\n\ndef volume_cuboid_8(l, w, h):\n    \"\"\"\n    :param l: length\n    :param w: width\n    :param h: height\n    :return: volume\n    \"\"\"\n    return l * w * h\n\n\ndef volume_cub"], ["\"\"\"\nWrite a function to print all permutations of a given string including duplicates.\nassert permute_string('ab')==['ab', 'ba']\n\"\"\"\n\ndef permute_string(s):\n    if len(s)==0:\n        return []\n    if len(s)==1:\n        return [s]\n    return permute_string(s[1:])+[s[0]+s[1:]]\n"], ["\"\"\"\nWrite a function to round the given number to the nearest multiple of a specific number.\nassert round_num(4722,10)==4720\n\"\"\"\n\ndef round_num(num, num_to_round):\n    \"\"\"\n    :param num: the number to round\n    :param num_to_round: the number to round to\n    :return: the rounded number\n    \"\"\"\n    return round(num, num_to_round)\n\n\ndef test_round_num():\n    assert round_num(4722, 10) == 4720\n\n\ndef test_round_num_fail():\n    with pytest.raises(ValueError):\n        round_num(4722, 11)\n\n\ndef test_round_num_fail_2():\n    with pytest.raises(ValueError):\n        round_num(4722, 12)\n\n\ndef test_round_num_fail_3():\n    with pytest.raises(ValueError):\n        round_num(4722, 13)\n\n\ndef test_round_num_fail_4():\n    with pytest.raises(ValueError):\n        round_num(4722, 14)\n\n\ndef test_round_num_fail_5():\n    with pytest.raises(ValueError):\n        round_num(4722, 15)\n\n\ndef test_round_num_fail_6():\n    with pytest.raises(ValueError):\n        round_num(4722, 16)\n\n\ndef test_round_num_fail_7():\n    with pytest.raises(ValueError):\n        round_num(4722, 17)\n\n\ndef test_round_num_fail_8():\n    with pytest.raises(ValueError):\n        round_num(4722, 18)\n\n\ndef test_round_num_fail_9():\n    with pytest.raises(ValueError):\n        round_num(4722, 19)\n\n\ndef"], ["\"\"\"\nWrite a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\"\"\"\n"], ["\"\"\"\nWrite a python function to remove all occurrences of a character in a given string.\nassert remove_Char(\"aba\",'a') == \"b\"\n\"\"\"\n\n# +\n# Write a python function to remove all occurrences of a character in a given string.\n# assert remove_Char(\"aba\",'a') == \"b\"\n\ndef remove_Char(s, char):\n    return s.replace(char, '')\n\n\n# -\n\nremove_Char(\"aba\",'a')\n\n\n"], ["\"\"\"\nWrite a python function to shift last element to first position in the given list.\nassert move_first([1,2,3,4]) == [4,1,2,3]\n\"\"\"\n\n\ndef move_first(lst):\n    return lst[1:] + lst[:1]\n\n"], ["\"\"\"\nWrite a function to find the surface area of a cuboid.\nassert surfacearea_cuboid(1,2,3)==22\n\"\"\"\n\n\ndef surfacearea_cuboid(length, width, height):\n    \"\"\"\n    :param length: length of the cuboid\n    :param width: width of the cuboid\n    :param height: height of the cuboid\n    :return: surface area of the cuboid\n    \"\"\"\n    return 2 * (length * width + width * height + height * length)\n\n\ndef surfacearea_cuboid_test():\n    assert surfacearea_cuboid(1, 2, 3) == 22\n\n"], ["\"\"\"\nWrite a function to generate a two-dimensional array.\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\"\"\"\n\n\ndef multi_list(n, m):\n    \"\"\"\n    Generate a two-dimensional array.\n    \"\"\"\n    assert n > 0 and m > 0\n    assert n == len(list(range(0, m)))\n    assert m == len(list(range(0, n)))\n    return [[0 for _ in range(m)] for _ in range(n)]\n\n\ndef test_multi_list():\n    assert multi_list(3, 4) == [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\n\n\ndef test_multi_list_2():\n    assert multi_list(3, 4) == [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\n\n\ndef test_multi_list_3():\n    assert multi_list(3, 4) == [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\n\n\ndef test_multi_list_4():\n    assert multi_list(3, 4) == [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\n\n\ndef test_multi_list_5():\n    assert multi_list(3, 4) == [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\n\n\ndef test_multi_list_6():\n    assert multi_list(3, 4) == [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2,"], ["\"\"\"\nWrite a function to sort a list of lists by a given index of the inner list.\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\"\"\"\ndef sort_by_index(list_of_lists, index):\n    return sorted(list_of_lists, key=lambda x: x[index])\n\n\n# +\n# Write a function to sort a list of lists by a given index of the inner list."], ["\"\"\"\nWrite a function to find the number of rotations in a circularly sorted array.\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\"\"\"\n\n\ndef find_rotation_count(array):\n    \"\"\"\n    Find the number of rotations in a circularly sorted array.\n\n    :param array: a circularly sorted array\n    :return: the number of rotations\n    \"\"\"\n    count = 0\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            if array[i] < array[j]:\n                count += 1\n                array[i], array[j] = array[j], array[i]\n    return count\n\n"], ["\"\"\"\nWrite a python function to toggle all odd bits of a given number.\nassert even_bit_toggle_number(10) == 15\n\"\"\"\n\n# 10. Write a python function to toggle all odd bits of a given number.\n# assert even_bit_toggle_number(10) == 15\n\n\n# 11. Write a python function to toggle all even bits of a given number.\n# assert even_bit_toggle_number(10) == 10\n\n\n# 12. Write a python function to toggle all even bits of a given number.\n# assert even_bit_toggle_number(10) == 10\n\n\n# 13. Write a python function to toggle all even bits of a given number.\n# assert even_bit_toggle_number(10) == 10\n\n\n# 14. Write a python function to toggle all even bits of a given number.\n# assert even_bit_toggle_number(10) == 10\n\n\n# 15. Write a python function to toggle all even bits of a given number.\n# assert even_bit_toggle_number(10) == 10\n\n\n# 16. Write a python function to toggle all even bits of a given number.\n# assert even_bit_toggle_number(10) == 10\n\n\n# 17. Write a python function to toggle all even bits of a given number.\n# assert even_bit_toggle_number(10) == 10\n\n\n# 18. Write a python function to toggle all even bits of a given number.\n# assert even_bit_toggle_number(10) == 10\n\n\n# 19. Write a python function to toggle all even bits of a given number.\n# assert even_bit_toggle_number(10) == 10\n\n\n# 20. Write a python function to toggle all even bits of a given number.\n# assert even_bit_toggle_number(10) == 10\n\n\n# 21. Write a python function to toggle all even bits of a given number.\n# assert even_bit_toggle_number(10)"], ["\"\"\"\nWrite a python function to find the frequency of the smallest value in a given array.\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\"\"\"\n\n\ndef frequency_Of_Smallest(arr: list, n: int) -> int:\n    \"\"\"\n    Find the frequency of the smallest value in a given array.\n    \"\"\"\n    # Write your code here\n    return sum(arr)\n"], ["\"\"\"\nWrite a function to find the n'th perrin number using recursion.\nassert get_perrin(9) == 12\n\"\"\"\n"], ["\"\"\"\nWrite a function to find out the minimum no of swaps required for bracket balancing in the given string.\nassert swap_count(\"[]][][\") == 2\n\"\"\"\n\n\ndef swap_count(s):\n    \"\"\"\n    :param s: str\n    :return: int\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                continue\n            elif s[i] < s[j]:\n                count += 1\n                s = s[:i] + s[j] + s[i + 1:]\n    return count\n\n\ndef swap_count(s):\n    \"\"\"\n    :param s: str\n    :return: int\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                continue\n            elif s[i] < s[j]:\n                count += 1\n                s = s[:i] + s[j] + s[i + 1:]\n    return count\n\n\ndef swap_count(s):\n    \"\"\"\n    :param s: str\n    :return: int\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                continue\n            elif s[i] < s[j]:\n                count += 1\n                s = s[:i] + s[j] + s[i + 1:]\n    return count\n\n\ndef swap_count(s):\n    \"\"\"\n    :param s: str\n    :return: int\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                continue\n            elif s[i] < s[j]:\n                count += 1\n                s = s[:i] + s[j] +"], ["\"\"\"\nWrite a python function to check whether the hexadecimal number is even or odd.\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\"\"\"\n\n\ndef even_or_odd(hex_num):\n    if hex_num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n"], ["\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"\n\n\ndef highest_Power_of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n - 1)\n\n"], ["\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"\n"], ["\"\"\"\nWrite a function to insert a given string at the beginning of all items in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"\n\n\ndef add_string(lst, string):\n    \"\"\"\n    :param lst: list\n    :param string: str\n    :return: list\n    \"\"\"\n    return lst + [string]\n\n\ndef test_add_string():\n    assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\n\ndef test_add_string_2():\n    assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\n\ndef test_add_string_3():\n    assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\n\ndef test_add_string_4():\n    assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\n\ndef test_add_string_5():\n    assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\n\ndef test_add_string_6():\n    assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\n\ndef test_add_string_7():\n    assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\n\ndef test_add_string_8():\n    assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\n\ndef test_add"], ["\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"\n\n\ndef convert_list_dictionary(list_of_lists, list_of_keys):\n    \"\"\"\n    Convert a list of lists to a nested dictionary.\n    :param list_of_lists: list of lists\n    :param list_of_keys: list of keys\n    :return: nested dictionary\n    \"\"\"\n    nested_dict = {}\n    for i in range(len(list_of_lists)):\n        nested_dict[list_of_keys[i]] = list_of_lists[i]\n    return nested_dict\n\n\ndef test_convert_list_dictionary():\n    \"\"\"\n    Test the function.\n    \"\"\"\n    list_of_lists = [\"S001\", \"S002\", \"S003\", \"S004\"]\n    list_of_keys = [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"]\n    assert convert_list_dictionary(list_of_lists, list_of_keys) == [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\n\ndef test_convert_list_dictionary_2():\n    \"\"\"\n    Test the function with a list of lists and a list of keys.\n    \"\"\"\n    list_of_lists = [\"S001\", \"S0"], ["\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"\n\n\ndef get_max_sum(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n"], ["\"\"\"\nWrite a function to find the list with maximum length using lambda function.\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"\n\n\ndef max_length_list(lst):\n    \"\"\"\n    :param lst: list of lists\n    :return: max length list\n    \"\"\"\n    max_length = 0\n    max_length_list = []\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_length_list = i\n    return max_length_list, max_length\n\n"], ["\"\"\"\nWrite a function to check if given tuple is distinct or not.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"\n\n\ndef first_non_repeating_character(s: str) -> str:\n    \"\"\"\n    Find the first non-repeating character in a string.\n    \"\"\"\n    # TODO: Implement me\n    pass\n\n"], ["\"\"\"\nWrite a function to check whether the given string starts and ends with the same character or not using regex.\nassert check_char(\"abba\") == \"Valid\"\n\"\"\"\n\n\ndef check_char(s):\n    if s[0] == s[-1]:\n        return True\n    else:\n        return False\n\n\ndef check_char(s):\n    if s[0] == s[-1]:\n        return True\n    else:\n        return False\n\n\ndef check_char(s):\n    if s[0] == s[-1]:\n        return True\n    else:\n        return False\n\n\ndef check_char(s):\n    if s[0] == s[-1]:\n        return True\n    else:\n        return False\n\n\ndef check_char(s):\n    if s[0] == s[-1]:\n        return True\n    else:\n        return False\n\n\ndef check_char(s):\n    if s[0] == s[-1]:\n        return True\n    else:\n        return False\n\n\ndef check_char(s):\n    if s[0] == s[-1]:\n        return True\n    else:\n        return False\n\n\ndef check_char(s):\n    if s[0] == s[-1]:\n        return True\n    else:\n        return False\n\n\ndef check_char(s):\n    if s[0] == s[-1]:\n        return True\n    else:\n        return False\n\n\ndef check_char(s):\n    if s[0] == s[-1]:\n        return True\n    else:\n        return False\n\n\ndef check_char(s):\n    if s[0] == s[-1]:\n        return True\n    else:\n        return False\n\n\ndef check_char(s):\n    if s[0] == s[-1]:\n        return True\n    else:\n        return False\n\n\ndef check_char(s):\n    if s[0] == s[-1]:\n        return True\n    else:\n        return False\n\n\ndef check_char(s):\n    if s[0] == s[-1]:\n        return True\n    else:"], ["\"\"\"\nWrite a function to find the median of three specific numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"\n\n\ndef median_numbers(num1, num2, num3):\n    \"\"\"\n    :param num1: int\n    :param num2: int\n    :param num3: int\n    :return: int\n    \"\"\"\n    if num1 > num2 and num1 > num3:\n        return num1\n    elif num2 > num1 and num2 > num3:\n        return num2\n    elif num3 > num1 and num3 > num2:\n        return num3\n    else:\n        return None\n\n"], ["\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"\n\n\ndef sum_of_digits(numbers):\n    \"\"\"\n    Compute the sum of digits of each number of a given list.\n    \"\"\"\n    return sum(map(int, str(sum(map(int, numbers))))).__str__()\n\n"], ["\"\"\"\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\"\"\"\n\n\ndef bitwise_xor(a, b):\n    \"\"\"\n    Perform the mathematical bitwise xor operation across the given tuples.\n    :param a: Tuple of integers\n    :param b: Tuple of integers\n    :return: Tuple of integers\n    \"\"\"\n    return tuple(a[i] ^ b[i] for i in range(len(a)))\n"], ["\"\"\"\nWrite a function to extract the frequency of unique tuples in the given list order irrespective.\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\"\"\"\n\n\ndef extract_freq(lst):\n    \"\"\"\n    :param lst: list of tuples\n    :return: frequency of each tuple\n    \"\"\"\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\n\ndef extract_freq(lst):\n    \"\"\"\n    :param lst: list of tuples\n    :return: frequency of each tuple\n    \"\"\"\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\n\ndef extract_freq(lst):\n    \"\"\"\n    :param lst: list of tuples\n    :return: frequency of each tuple\n    \"\"\"\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\n\ndef extract_freq(lst):\n    \"\"\"\n    :param lst: list of tuples\n    :return: frequency of each tuple\n    \"\"\"\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\n\ndef extract_freq(lst):\n    \"\"\"\n    :param lst: list of tuples\n    :return: frequency of each tuple\n    \"\"\"\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\n\ndef extract_freq(lst):\n    \"\"\"\n    :param lst: list"], ["\"\"\"\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\"\"\"\n\n\ndef add_nested_tuples(t1: tuple, t2: tuple) -> tuple:\n    \"\"\"\n    >>> add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n    ((7, 10), (7, 14), (3, 10), (8, 13))\n    \"\"\"\n    return tuple(sum(t1[i] + t2[i] for i in range(len(t1))) for t1 in t1)\n\n\ndef add_nested_tuples_2(t1: tuple, t2: tuple) -> tuple:\n    \"\"\"\n    >>> add_nested_tuples_2(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n    ((7, 10), (7, 14), (3, 10), (8, 13))\n    \"\"\"\n    return tuple(sum(t1[i] + t2[i] for i in range(len(t1))) for t1 in t1)\n\n\ndef add_nested_tuples_3(t1: tuple, t2: tuple) -> tuple:\n    \"\"\"\n    >>> add_nested_tuples_3(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, "], ["\"\"\"\nWrite a function to compute the value of ncr%p.\nassert ncr_modp(10,2,13)==6\n\"\"\"\n"], ["\"\"\"\nWrite a function to check if a url is valid or not using regex.\nassert is_valid_URL(\"https://www.google.com\") == True\n\"\"\"\n\nimport re\n\ndef is_valid_URL(url):\n    regex = re.compile(r'^(?:http|ftp)s?://' # http:// or https://\n                       r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n                       r'localhost|' #localhost...\n                       r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n                       r'(?::\\d+)?' # optional port\n                       r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return bool(regex.match(url))\n"], ["\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"\n\n\ndef minimum(a, b):\n    return min(a, b)\n\n"], ["\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"\n\n\ndef check_tuplex(tup, elem):\n    if elem in tup:\n        return True\n    else:\n        return False\n\n\n# +\n# Write a function to check whether an element exists within a tuple.\n# assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n# -\n\n# ## 1.3.1.2. \n#\n# Write a function to check whether an element exists within a tuple.\n#\n# ```python\n# def check_tuplex(tup, elem):\n#     if elem in tup:\n#         return True\n#     else:\n#         return False\n# ```\n\n# +\n# Write a function to check whether an element exists within a tuple.\n# def check_tuplex(tup, elem):\n#     if elem in tup:\n#         return True\n#     else:\n#         return False\n\n# assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n# -\n\n# ## 1.3.1.3. \n#\n# Write a function to check whether an element exists within a tuple.\n#\n# ```python\n# def check_tuplex(tup, elem):\n#     if elem in tup:\n#         return True\n#     else:\n#         return False\n# ```\n\n# +\n# Write a function to check whether an element exists within a tuple.\n# def check_tuplex(tup, elem):\n#     if elem in tup:\n#         return True\n#     else:\n#         return False\n\n# assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e"], ["\"\"\"\nWrite a python function to find the parity of a given number.\nassert find_Parity(12) == \"Even Parity\"\n\"\"\"\n\n\ndef find_Parity(num):\n    if num % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\"\n\n"], ["\"\"\"\nWrite a function to create the next bigger number by rearranging the digits of a given number.\nassert rearrange_bigger(12)==21\n\"\"\"\n\n\ndef rearrange_bigger(n):\n    \"\"\"\n    >>> rearrange_bigger(12)\n    21\n    >>> rearrange_bigger(123)\n    231\n    >>> rearrange_bigger(1234)\n    3412\n    >>> rearrange_bigger(12345)\n    45123\n    >>> rearrange_bigger(123456)\n    561234\n    >>> rearrange_bigger(1234567)\n    6712345\n    >>> rearrange_bigger(12345678)\n    78123456\n    >>> rearrange_bigger(123456789)\n    789123456\n    >>> rearrange_bigger(1234567890)\n    7890123456\n    >>> rearrange_bigger(12345678901)\n    7890123456\n    >>> rearrange_bigger(123456789012)\n    7890123456\n    >>> rearrange_bigger(1234567890123)\n    7890123456\n    >>> rearrange_bigger(12345678901234)\n    7890123456\n    >>> rearrange_bigger(123456789012345)\n    7890123456\n    >>> rearrange_bigger(1234567890123456)\n    7890123456\n    >>> rearrange_bigger(12345678901234567)\n"], ["\"\"\"\nWrite a function to find k number of pairs which consist of one element from the first array and one element from the second array.\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\"\"\"\n\n\ndef k_smallest_pairs(array1, array2, k):\n    \"\"\"\n    :type array1: List[int]\n    :type array2: List[int]\n    :type k: int\n    :rtype: List[List[int]]\n    \"\"\"\n    if k <= 0:\n        return []\n    if len(array1) < k:\n        return []\n    if len(array2) < k:\n        return []\n    if len(array1) == 0:\n        return [array2]\n    if len(array2) == 0:\n        return [array1]\n    if len(array1) == len(array2):\n        return [array1]\n    if len(array1) == 1:\n        return [array2]\n    if len(array2) == 1:\n        return [array1]\n    if len(array1) == 2:\n        return [array1, array2]\n    if len(array2) == 2:\n        return [array2, array1]\n    if len(array1) == 3:\n        return [array1, array2, array1]\n    if len(array2) == 3:\n        return [array2, array1, array2]\n    if len(array1) == 4:\n        return [array1, array2, array1, array2]\n    if len(array2) == 4:\n        return [array2, array1, array2, array1]\n    if len(array1) == 5:\n        return [array1, array2, array1, array2, array1]\n    if len(array2) == 5:\n        return [array2, array1, array2, array1, array2]\n    if len(array1) == 6:\n        return [array1, array2, array1,"], ["\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"\n\n\ndef min_product_tuple(lst):\n    \"\"\"\n    :param lst: a list of tuples\n    :return: the minimum product of the pairs\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            product = lst[i][0] * lst[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product\n\n"], ["\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"\n\n\ndef min_val(lst):\n    \"\"\"\n    Find the minimum value in a given heterogeneous list.\n    :param lst: a list of heterogeneous objects\n    :return: the minimum value in the list\n    \"\"\"\n    min_val = float('inf')\n    for item in lst:\n        if item < min_val:\n            min_val = item\n    return min_val\n\n"], ["\"\"\"\nWrite a function to convert the given snake case string to camel case string by using regex.\nassert snake_to_camel('android_tv') == 'AndroidTv'\n\"\"\"\n\n\ndef snake_to_camel(s):\n    s = re.sub(r'([A-Z])', lambda x: x.group(1).upper(), s)\n    s = re.sub(r'([a-z])', lambda x: x.group(1).lower(), s)\n    return re.sub(r'([A-Z])', lambda x: x.group(1).upper(), s)\n\n"], ["\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"\n\n\ndef remove_odd(lst):\n    return [x for x in lst if x % 2 == 0]\n\n"], ["\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"\n\n\ndef extract_nth_element(list_of_tuples, n):\n    \"\"\"\n    Extract the nth element from a given list of tuples.\n    :param list_of_tuples: a list of tuples\n    :param n: the index of the element to extract\n    :return: the nth element of the list\n    \"\"\"\n    return list_of_tuples[n]\n\n"], ["\"\"\"\nWrite a python function to check whether the value exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"\n\n\ndef overlapping(seq, val):\n    \"\"\"\n    :param seq: list\n    :param val: int\n    :return: bool\n    \"\"\"\n    if val in seq:\n        return True\n    else:\n        return False\n\n"], ["\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"\n\n\ndef max_Product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product\n\n"], ["\"\"\"\nWrite a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\nassert breakSum(12) == 13\n\"\"\"\n\n\ndef breakSum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + breakSum(n - 1)\n\n\ndef breakSum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + breakSum(n - 1)\n\n"], ["\"\"\"\nWrite a function to find common first element in given list of tuple.\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\"\"\"\n\n\ndef group_tuples(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: list of tuples\n    \"\"\"\n    return [tuple(sorted(t)) for t in tuples]\n\n\ndef group_tuples_2(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: list of tuples\n    \"\"\"\n    return [tuple(sorted(t)) for t in tuples]\n\n\ndef group_tuples_3(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: list of tuples\n    \"\"\"\n    return [tuple(sorted(t)) for t in tuples]\n\n\ndef group_tuples_4(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: list of tuples\n    \"\"\"\n    return [tuple(sorted(t)) for t in tuples]\n\n\ndef group_tuples_5(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: list of tuples\n    \"\"\"\n    return [tuple(sorted(t)) for t in tuples]\n\n\ndef group_tuples_6(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: list of tuples\n    \"\"\"\n    return [tuple(sorted(t)) for t in tuples]\n\n\ndef group_tuples_7(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: list of tuples\n    \"\"\"\n    return [tuple(sorted(t)) for t in tuples]\n\n\ndef group_tuples_8(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: list of tuples\n    \"\"\"\n    return [tuple(sorted(t)) for t in tuples]\n\n"], ["\"\"\"\nWrite a python function to find the sublist having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"\n\n\ndef find_max(lst):\n    max_length = 0\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n\n"], ["\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"\n\n\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\n"], ["\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"\n\n\ndef find_Average_Of_Cube(n):\n    return (n * (n + 1) * (2 * n + 1)) ** 0.5\n\n"], ["\"\"\"\nWrite a function to solve gold mine problem.\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\"\"\"\n\n\ndef get_maxgold(grid, gold, max_gold):\n    \"\"\"\n    :param grid:\n    :param gold:\n    :param max_gold:\n    :return:\n    \"\"\"\n    if not grid:\n        return 0\n    if not gold:\n        return 0\n    if not max_gold:\n        return 0\n    if grid[0][0] == 0:\n        return 0\n    if grid[0][0] == 1:\n        return 0\n    if grid[0][0] == 2:\n        return 0\n    if grid[0][0] == 3:\n        return 0\n    if grid[0][0] == 4:\n        return 0\n    if grid[0][0] == 5:\n        return 0\n    if grid[0][0] == 6:\n        return 0\n    if grid[0][0] == 7:\n        return 0\n    if grid[0][0] == 8:\n        return 0\n    if grid[0][0] == 9:\n        return 0\n    if grid[0][0] == 10:\n        return 0\n    if grid[0][0] == 11:\n        return 0\n    if grid[0][0] == 12:\n        return 0\n    if grid[0][0] == 13:\n        return 0\n    if grid[0][0] == 14:\n        return 0\n    if grid[0][0] == 15:\n        return 0\n    if grid[0][0] == 16:\n        return 0\n    if grid[0][0] == 17:\n        return 0\n    if grid[0][0] == 18:\n        return "], ["\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"\n"], ["\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"\n\n\ndef count_element_in_list(lst, element):\n    \"\"\"\n    :param lst: list of elements\n    :param element: element to search\n    :return: number of sublists containing element\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\n"], ["\"\"\"\nWrite a function to filter odd numbers using lambda function.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"\n\n\ndef filter_oddnumbers(numbers):\n    return [i for i in numbers if i % 2 != 0]\n\n"], ["\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"\n\n\ndef change_date_format(date_str):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n    \"\"\"\n    date_str = date_str.replace(\"-\", \"/\")\n    date_str = date_str.replace(\"-\", \"/\")\n    date_str = date_str.replace(\"-\", \"/\")\n    date_str = date_str.replace(\"-\", \"/\")\n    date_str = date_str.replace(\"-\", \"/\")\n    date_str = date_str.replace(\"-\", \"/\")\n    date_str = date_str.replace(\"-\", \"/\")\n    date_str = date_str.replace(\"-\", \"/\")\n    date_str = date_str.replace(\"-\", \"/\")\n    date_str = date_str.replace(\"-\", \"/\")\n    date_str = date_str.replace(\"-\", \"/\")\n    date_str = date_str.replace(\"-\", \"/\")\n    date_str = date_str.replace(\"-\", \"/\")\n    date_str = date_str.replace(\"-\", \"/\")\n    date_str = date_str.replace(\"-\", \"/\")\n    date_str = date_str.replace(\"-\", \"/\")\n    date_str = date_str.replace(\"-\", \"/\")\n    date_str = date_str.replace(\"-\", \"/\")\n    date_str = date_str.replace(\"-\", \"/\")\n    date_str = date_str.replace(\"-\", \"/\")\n    date_str = date_str.replace(\"-\", \"/\")\n    date_str = date_str.replace(\"-\", \"/\")\n    date_str = date_str.replace(\"-\", \"/\")\n    date_str = date_str.replace(\"-\", \"/\")\n    date_str = date_str.replace(\"-\", \"/\")\n   "], ["\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"\n\n\ndef shell_sort(arr):\n    \"\"\"\n    :param arr: list\n    :return: list\n    \"\"\"\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and arr[j] < arr[j - gap]:\n                arr[j], arr[j - gap] = arr[j - gap], arr[j]\n        gap //= 2\n    return arr\n\n"], ["\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"\n\n\ndef and_tuples(a, b):\n    \"\"\"\n    >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n    (0, 0, 2, 1)\n    \"\"\"\n    return tuple(a) + tuple(b)\n"], ["\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"\n\n\ndef parabola_directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    :param a: x-coordinate of the parabola's vertex\n    :param b: y-coordinate of the parabola's vertex\n    :param c: y-coordinate of the parabola's vertex\n    :return: the x-coordinate of the directrix\n    \"\"\"\n    # TODO: Write your code here\n    return -b / (2 * a)\n\n\n# Test the function"], ["\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\"\"\"\n\n\ndef common_element(list1, list2):\n    \"\"\"\n    :param list1:\n    :param list2:\n    :return:\n    \"\"\"\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n\n"], ["\"\"\"\nWrite a function to find the median of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"\n\n\ndef median_trapezium(a, b, c):\n    \"\"\"\n    :param a: left\n    :param b: right\n    :param c: bottom\n    :return:\n    \"\"\"\n    if a == b == c:\n        return (a + b + c) / 3\n    else:\n        return (a + b + c) / 2\n\n\ndef main():\n    print(median_trapezium(15, 25, 35))\n\n"], ["\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\"\"\"\n\n\ndef check_greater(array, number):\n    for i in range(len(array)):\n        if array[i] < number:\n            return False\n    return True\n\n\n# Tests"], ["\"\"\"\nWrite a function that matches a string that has an a followed by one or more b's.\nassert text_match_one(\"ac\")==('Not matched!')\n\"\"\"\n\nimport re\n\ndef text_match_one(text):\n    \"\"\"\n    >>> text_match_one(\"ac\")==('Not matched!')\n    True\n    >>> text_match_one(\"ab\")==('Not matched!')\n    True\n    >>> text_match_one(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_one(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_one(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_one(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_one(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_one(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_one(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_one(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_one(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_one(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_one(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_one(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_one(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_one(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_one(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_one(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_one(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_one(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_one(\"abcd\")==('Not matched!')\n    True\n    >>> text_match_one(\"abcd\")=="], ["\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"\n"], ["\"\"\"\nWrite a python function to print negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == -1,-6\n\"\"\"\n\n\ndef neg_nos(lst):\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            lst[i] = -lst[i]\n    return lst\n\n"], ["\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"\n\ndef remove_odd(s):\n    return ''.join([i for i in s if i not in '02468'])\n\n\n"], ["\"\"\"\nWrite a function to count bidirectional tuple pairs.\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\"\"\"\n\n\ndef count_bidirectional(input_list):\n    \"\"\"\n    :param input_list:\n    :return:\n    \"\"\"\n    count = 0\n    for i in range(len(input_list)):\n        for j in range(i + 1, len(input_list)):\n            if input_list[i] == input_list[j]:\n                count += 1\n    return count\n\n"], ["\"\"\"\nWrite a function to convert a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"\n\n\ndef multiple_to_single(lst):\n    return sum(lst)\n\n"], ["\"\"\"\nWrite a function to find all adverbs and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    Find all adverbs and their positions in a given sentence.\n    Args:\n        sentence (str): a sentence.\n    Returns:\n        tuple: (start, end, position) of all adverbs in the sentence.\n    \"\"\"\n    # Create a dictionary to store the adverbs and their positions.\n    adverbs = {}\n    # Iterate over all the words in the sentence.\n    for word in sentence.split():\n        # If the word is an adverb, add it to the dictionary.\n        if word.lower() in adverbs:\n            adverbs[word.lower()].append(word)\n        # If the word is not an adverb, add it to the dictionary.\n        else:\n            adverbs[word.lower()] = [word]\n    # Iterate over all the adverbs in the dictionary.\n    for adverb, words in adverbs.items():\n        # If the adverb is not a single word, add it to the list of words.\n        if len(words) > 1:\n            # Find the position of the adverb in the sentence.\n            start = 0\n            end = 0\n            # Iterate over all the words in the sentence.\n            for i in range(len(sentence)):\n                # If the current word is an adverb, add its position to the list.\n                if sentence[i] == adverb:\n                    end = i\n                    break\n            # If the adverb is not a single word, add its position to the list.\n            if len(words) > 1:\n                # If the adverb is not the last word in the sentence, add its position to the list.\n                if i < len(sentence) - 1:\n                    end = i + 1\n                # If the adverb is the last word in the sentence, add its position to the list.\n                else:\n                    end = len("], ["\"\"\"\nWrite a function to find the surface area of a cube.\nassert surfacearea_cube(5)==150\n\"\"\"\n\n\n# +\n# Write a function to find the surface area of a cube.\n# assert surfacearea_cube(5)==150\n\n# +\n# Write a function to find the surface area of a cube.\n# assert surfacearea_cube(5)==150\n\n# +\n# Write a function to find the surface area of a cube.\n# assert surfacearea_cube(5)==150\n\n# +\n# Write a function to find the surface area of a cube.\n# assert surfacearea_cube(5)==150\n\n# +\n# Write a function to find the surface area of a cube.\n# assert surfacearea_cube(5)==150\n\n# +\n# Write a function to find the surface area of a cube.\n# assert surfacearea_cube(5)==150\n\n# +\n# Write a function to find the surface area of a cube.\n# assert surfacearea_cube(5)==150\n\n# +\n# Write a function to find the surface area of a cube.\n# assert surfacearea_cube(5)==150\n\n# +\n# Write a function to find the surface area of a cube.\n# assert surfacearea_cube(5)==150\n\n# +\n# Write a function to find the surface area of a cube.\n# assert surfacearea_cube(5)==150\n\n# +\n# Write a function to find the surface area of a cube.\n# assert surfacearea_cube(5)==150\n\n# +\n# Write a function to find the surface area of a cube.\n# assert surfacearea_cube(5)==150\n\n# +\n# Write a function to find the surface area of a cube.\n# assert surfacearea_cube(5)==150\n\n# +\n# Write a function to find the surface area of a cube.\n# assert surfacearea_cube(5)==150\n\n# +\n# Write a function to find the surface area of a cube"], ["\"\"\"\nWrite a function to find the ration of positive numbers in an array of integers.\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\"\"\"\n\n\ndef positive_count(arr):\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count / len(arr)\n\n"], ["\"\"\"\nWrite a python function to find the largest negative number from the given list.\nassert largest_neg([1,2,3,-4,-6]) == -6\n\"\"\"\n\n\ndef largest_neg(lst):\n    return max(lst)\n\n"], ["\"\"\"\nWrite a function to trim each tuple by k in the given tuple list.\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\"\"\"\n"], ["\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"\n\n\ndef index_multiplication(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] * tuple2[i])\n    return tuple(result)\n\n"], ["\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"\ndef count_Occurrence(list, tuple):\n    count = 0\n    for i in list:\n        if i in tuple:\n            count += 1\n    return count\n"], ["\"\"\"\nWrite a function to find cubes of individual elements in a list using lambda function.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"\n\n\ndef cube_nums(nums):\n    return [num ** 3 for num in nums]\n\n"], ["\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"\n\n\ndef cal_sum(n):\n    \"\"\"\n    Calculate the sum of perrin numbers.\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n - 1)\n\n"], ["\"\"\"\nWrite a python function to check whether the triangle is valid or not if 3 points are given.\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\"\"\"\n\n# +"], ["\"\"\"\nWrite a function to extract specified size of strings from a give list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"\n\n# +\n# Write a function to extract specified size of strings from a give list of string values.\n\ndef extract_string(list_of_strings, size):\n    \"\"\"\n    :param list_of_strings: a list of strings\n    :param size: the size of the strings to extract\n    :return: a list of strings\n    \"\"\"\n    return [string[:size] for string in list_of_strings]\n\n\n# +\n# Write a function to extract specified size of strings from a give list of string values.\n\ndef extract_string(list_of_strings, size):\n    \"\"\"\n    :param list_of_strings: a list of strings\n    :param size: the size of the strings to extract\n    :return: a list of strings\n    \"\"\"\n    return [string[:size] for string in list_of_strings]\n\n\n# +\n# Write a function to extract specified size of strings from a give list of string values.\n\ndef extract_string(list_of_strings, size):\n    \"\"\"\n    :param list_of_strings: a list of strings\n    :param size: the size of the strings to extract\n    :return: a list of strings\n    \"\"\"\n    return [string[:size] for string in list_of_strings]\n\n\n# +\n# Write a function to extract specified size of strings from a give list of string values.\n\ndef extract_string(list_of_strings, size):\n    \"\"\"\n    :param list_of_strings: a list of strings\n    :param size: the size of the strings to extract\n    :return: a list of strings\n    \"\"\"\n    return [string[:size] for string in list_of_strings]\n\n\n# +\n# Write a function to extract specified size of strings from a give list of string values.\n\ndef extract_string(list_of_strings, size):\n    \"\"\"\n    :param list_of_strings: a list of strings\n    :"], ["\"\"\"\nWrite a function to remove all whitespaces from the given string using regex.\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"\n\n\ndef remove_whitespaces(string):\n    return re.sub(r'\\s+', '', string)\n\n"], ["\"\"\"\nWrite a function that gives loss amount if the given amount has loss else return none.\nassert loss_amount(1500,1200)==None\n\"\"\"\n\n\ndef loss_amount(amount, loss):\n    if amount < loss:\n        return amount\n    else:\n        return None\n\n"], ["\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"\n\n\ndef sumofFactors(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n"], ["\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\"\"\"\n\n# 1. Write a function that matches a word containing 'z'.\n# 2. assert text_match_wordz(\"pythonz.\")==('Found a match!')\n\n# 3. Write a function that matches a word containing 'z'.\n# 4. assert text_match_wordz(\"pythonz.\")==('Found a match!')\n\n# 5. Write a function that matches a word containing 'z'.\n# 6. assert text_match_wordz(\"pythonz.\")==('Found a match!')\n\n# 7. Write a function that matches a word containing 'z'.\n# 8. assert text_match_wordz(\"pythonz.\")==('Found a match!')\n\n# 9. Write a function that matches a word containing 'z'.\n# 10. assert text_match_wordz(\"pythonz.\")==('Found a match!')\n\n# 11. Write a function that matches a word containing 'z'.\n# 12. assert text_match_wordz(\"pythonz.\")==('Found a match!')\n\n# 13. Write a function that matches a word containing 'z'.\n# 14. assert text_match_wordz(\"pythonz.\")==('Found a match!')\n\n# 15. Write a function that matches a word containing 'z'.\n# 16. assert text_match_wordz(\"pythonz.\")==('Found a match!')\n\n# 17. Write a function that matches a word containing 'z'.\n# 18. assert text_match_wordz(\"pythonz.\")==('Found a match!')\n\n# 19. Write a function that matches a word containing 'z'.\n# 20. assert text_match_wordz(\"pythonz.\")==('Found a match!')\n\n# 21. Write a function that matches a word containing 'z'.\n# 22. assert text_match_wordz(\"pythonz.\")==('Found a match!')\n\n# 23. Write a function that matches a word containing 'z'.\n# 24"], ["\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"\n\n# 1. Import the necessary libraries\nimport datetime\n\n# 2. Define a function to check whether the given month number contains 31 days or not\ndef check_monthnumb_number(monthnumb):\n    # 3. Check whether the month number is a multiple of 3\n    if monthnumb % 3 == 0:\n        # 4. Check whether the month number is a multiple of 12\n        if monthnumb % 12 == 0:\n            # 5. Check whether the month number is a multiple of 31\n            if monthnumb % 31 == 0:\n                # 6. Return True\n                return True\n            # 7. Return False\n            else:\n                return False\n        # 8. Return False\n        else:\n            return False\n    # 9. Return False\n    else:\n        return False\n\n# 10. Call the function and print the result\nmonthnumb = 5"], ["\"\"\"\nWrite a function to reverse strings in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"\n\n\ndef reverse_string_list(lst):\n    return lst[::-1]\n\n"], ["\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"\n\n\ndef Find_Min(lst):\n    \"\"\"\n    Find the sublist having minimum length.\n    \"\"\"\n    min_len = 1000000000\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n\n"], ["\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"\n\n# 1. Import the necessary libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# 2. Define the rectangle\nx = np.linspace(0, 10, 100)\ny = np.linspace(0, 20, 100)\n\n# 3. Plot the rectangle\nplt.plot(x, y, 'r')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.title('Rectangle')\nplt.show()\n\n# 4. Calculate the area\narea = np.abs(np.trapz(y, x))\n\n# 5. Print the area"], ["\"\"\"\nWrite a function to remove uppercase substrings from a given string by using regex.\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"\n"], ["\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"\n\n\ndef Extract(lst):\n    return [lst[0]] + [x for x in lst[1:] if x != lst[0]]\n\n"], ["\"\"\"\nWrite a python function to count the upper case characters in a given string.\nassert upper_ctr('PYthon') == 1\n\"\"\"\n\n\ndef upper_ctr(s):\n    return sum(1 for c in s if c.isupper())\n\n\ndef main():\n    print(upper_ctr('PYthon'))\n\n"], ["\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"\n\n\ndef combinations_list(lst):\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst]\n    return combinations_list(lst[1:]) + combinations_list(lst[0:1])\n\n"], ["\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"\n\n\ndef max_subarray_product(array):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n\n    :param array: a list of integers\n    :return: the maximum product subarray\n    \"\"\"\n    max_product = 0\n    current_product = 1\n    for i in range(len(array)):\n        current_product *= array[i]\n        max_product = max(max_product, current_product)\n    return max_product\n\n"], ["\"\"\"\nWrite a function to check if all values are same in a dictionary.\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\"\"\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["\"\"\"\nWrite a function to drop empty items from a given dictionary.\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"\n\n\ndef drop_empty(d):\n    \"\"\"\n    Drop empty items from a given dictionary.\n    :param d:\n    :return:\n    \"\"\"\n    return {k: v for k, v in d.items() if v is not None}\n\n\ndef test_drop_empty():\n    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None}) == {'c1': 'Red', 'c2': 'Green'}\n    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None}) == {'c1': 'Red', 'c2': 'Green'}\n    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None}) == {'c1': 'Red', 'c2': 'Green'}\n    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None}) == {'c1': 'Red', 'c2': 'Green'}\n    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None}) == {'c1': 'Red', 'c2': 'Green'}\n    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None}) == {'c1': 'Red', 'c2': 'Green'}\n    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None}) == {'c1': 'Red', 'c2': 'Green'}\n    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None}) == {'c1': 'Red', 'c2': 'Green'}\n    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None}) == {'c1': 'Red', 'c2': 'Green'}\n    assert drop_empty"], ["\"\"\"\nWrite a function to find the peak element in the given array.\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\"\"\"\n"], ["\"\"\"\nWrite a python function to convert decimal number to octal number.\nassert decimal_to_Octal(10) == 12\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\"\"\"\n\n\ndef max_product(arr, k):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product\n\n"], ["\"\"\"\nWrite a function to find the maximum profit earned from a maximum of k stock transactions\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the pairwise addition of the elements of the given tuples.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"\n\n\ndef add_pairwise(tup):\n    \"\"\"\n    :param tup: a tuple of numbers\n    :return: a tuple of the sum of the elements of the tuple\n    \"\"\"\n    return tuple(sum(x) for x in zip(tup))\n\n"], ["\"\"\"\nWrite a python function to find remainder of array multiplication divided by n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\"\"\"\n\n\ndef find_remainder(array, n, m):\n    \"\"\"\n    Find remainder of array multiplication divided by n.\n    :param array: array to multiply\n    :param n: number to divide by\n    :param m: number to multiply\n    :return: remainder\n    \"\"\"\n    # Check if array is empty\n    if len(array) == 0:\n        return 0\n\n    # Check if array is not a list\n    if not isinstance(array, list):\n        return 0\n\n    # Check if array is not a list\n    if not isinstance(n, int) or not isinstance(m, int):\n        return 0\n\n    # Check if array is not a list\n    if not isinstance(array[0], int):\n        return 0\n\n    # Check if array is not a list\n    if not isinstance(array[0], int):\n        return 0\n\n    # Check if array is not a list\n    if not isinstance(array[0], int):\n        return 0\n\n    # Check if array is not a list\n    if not isinstance(array[0], int):\n        return 0\n\n    # Check if array is not a list\n    if not isinstance(array[0], int):\n        return 0\n\n    # Check if array is not a list\n    if not isinstance(array[0], int):\n        return 0\n\n    # Check if array is not a list\n    if not isinstance(array[0], int):\n        return 0\n\n    # Check if array is not a list\n    if not isinstance(array[0], int):\n        return 0\n\n    # Check if array is not a list\n    if not isinstance(array[0], int):\n        return 0\n\n    # Check if array is not a list\n    if not isinstance(array[0], int):\n        return 0\n\n    # Check if array is not"], ["\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"\n\n\n# +\ndef check_Consecutive(lst):\n    if len(lst) == 0:\n        return True\n    if lst[0] == lst[1]:\n        return check_Consecutive(lst[1:])\n    return False\n"], ["\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"\n\n\ndef tuple_intersection(tuple_list: list, tuple_list2: list) -> set:\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n    :param tuple_list: List of tuples\n    :param tuple_list2: List of tuples\n    :return: Set of tuples\n    \"\"\"\n    intersection = set()\n    for tuple1 in tuple_list:\n        for tuple2 in tuple_list2:\n            if tuple1 == tuple2:\n                intersection.add(tuple1)\n    return intersection\n\n"], ["\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"\n\n\ndef replace_char(string, old, new):\n    return string.replace(old, new)\n\n"], ["\"\"\"\nWrite a function to sort counter by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"\n"], ["\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"\n\n\ndef sum_largest_smallest(arr):\n    \"\"\"\n    :param arr: list\n    :return: sum of largest and smallest value in the list\n    \"\"\"\n    return sum(max(arr) - min(arr))\n\n"], ["\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"\n\n\ndef is_lower(s):\n    return s.lower() == s\n\n\ndef main():\n    print(is_lower(\"InValid\"))\n    print(is_lower(\"hello\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is_lower(\"hello world\"))\n    print(is"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string.\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"\n\n\ndef remove_lowercase(string):\n    return ''.join(filter(lambda x: not x.islower(), string))\n\n"], ["\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"\n\n\ndef first_Digit(number):\n    \"\"\"\n    Find the first digit of a given number.\n    :param number: The number to find the first digit of.\n    :return: The first digit of the given number.\n    \"\"\"\n    return str(number)[0]\n\n\n# Test the function"], ["\"\"\"\nWrite a python function to find the maximum occurring character in a given string.\nassert get_max_occuring_char(\"data\") == \"a\"\n\"\"\"\n\n\ndef get_max_occuring_char(string: str) -> str:\n    \"\"\"\n    Find the maximum occurring character in a given string.\n    \"\"\"\n    max_occuring_char = \"\"\n    for char in string:\n        if char in max_occuring_char:\n            max_occuring_char += char\n        else:\n            max_occuring_char = char\n    return max_occuring_char\n\n\ndef main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    print(get_max_occuring_char(\"data\"))\n\n"], ["\"\"\"\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\"\"\"\n\n\ndef is_subset_sum(nums, sum, target):\n    \"\"\"\n    :type nums: List[int]\n    :type sum: int\n    :type target: int\n    :rtype: bool\n    \"\"\"\n    if sum == target:\n        return True\n    for i in range(len(nums)):\n        if sum - target <= nums[i] <= sum:\n            return True\n    return False\n\n"], ["\"\"\"\nWrite a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\nassert match(\"Geeks\") == 'Yes'\n\"\"\"\n\n\ndef find_sequences(s):\n    \"\"\"\n    :param s: str\n    :return: str\n    \"\"\"\n    return re.findall(r'[A-Z][^A-Z]*[a-z]', s)\n\n"], ["\"\"\"\nWrite a python function to find the first natural number whose factorial is divisible by x.\nassert first_Factorial_Divisible_Number(10) == 5\n\"\"\"\n"], ["\"\"\"\nWrite a function to remove the matching tuples from the given two tuples.\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the largest palindromic number in the given array.\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\"\"\"\n\n\ndef largest_palindrome(numbers, k):\n    \"\"\"\n    Find the largest palindromic number in the given array.\n    :param numbers: list of integers\n    :param k: number of times to check if the number is palindromic\n    :return: largest palindromic number\n    \"\"\"\n    largest = 0\n    for i in range(k, len(numbers)):\n        if numbers[i] == numbers[i - k]:\n            largest = i\n    return largest\n\n"], ["\"\"\"\nWrite a function to compute binomial probability for the given number.\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\"\"\"\n\n\ndef binomial_probability(n, p, q):\n    \"\"\"\n    Compute binomial probability.\n\n    :param n: number of trials\n    :param p: probability of success\n    :param q: probability of failure\n    :return: binomial probability\n    \"\"\"\n    return binomial(n, p, q)\n\n\ndef binomial_probability_for_n(n, p, q):\n    \"\"\"\n    Compute binomial probability for a given number.\n\n    :param n: number of trials\n    :param p: probability of success\n    :param q: probability of failure\n    :return: binomial probability\n    \"\"\"\n    return binomial_probability(n, p, q)\n\n\ndef binomial_probability_for_n_and_p(n, p):\n    \"\"\"\n    Compute binomial probability for a given number and probability.\n\n    :param n: number of trials\n    :param p: probability of success\n    :return: binomial probability\n    \"\"\"\n    return binomial_probability(n, p, 1.0/3)\n\n\ndef binomial_probability_for_n_and_q(n, q):\n    \"\"\"\n    Compute binomial probability for a given number and probability.\n\n    :param n: number of trials\n    :param q: probability of failure\n    :return: binomial probability\n    \"\"\"\n    return binomial_probability(n, 1.0/3, q)\n\n\ndef binomial_probability_for_n_and_p_and_q(n, p, q):\n    \"\"\"\n    Compute binomial probability for a given number and probability and probability.\n\n    :param n: number of trials\n    :param p: probability of success\n    :param q: probability of failure\n    :return: binomial probability\n    \"\"\"\n    return binomial_probability(n, 1.0"], ["\"\"\"\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\"\"\"\n\n\ndef sort_tuple(tup):\n    return sorted(tup, key=lambda x: x[1])\n\n"], ["\"\"\"\nWrite a function to find the area of a pentagon.\nassert area_pentagon(5)==43.01193501472417\n\"\"\"\n\n\ndef area_pentagon(n):\n    \"\"\"\n    :param n: number of sides of pentagon\n    :return: area of pentagon\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 9\n    elif n == 4:\n        return 16\n    elif n == 5:\n        return 25\n    else:\n        return 2 * area_pentagon(n - 1) + 5 * area_pentagon(n - 2)\n\n\ndef main():\n    print(area_pentagon(5))\n\n"], ["\"\"\"\nWrite a python function to find the frequency of the largest value in a given array.\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\"\"\"\n\n\ndef frequency_Of_Largest(arr, n):\n    # Write your code here\n    max_val = max(arr)\n    max_index = arr.index(max_val)\n    return max_index + 1\n\n"], ["\"\"\"\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\"\"\"\n\n\ndef extract_symmetric(lst):\n    return {(i, j) for i, j in lst if i == j}\n\n\ndef main():\n    print(extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)]))\n\n"], ["\"\"\"\nWrite a function to find the sum of geometric progression series.\nassert sum_gp(1,5,2)==31\n\"\"\"\n\n\ndef sum_gp(a, r, n):\n    \"\"\"\n    Write a function to find the sum of geometric progression series.\n    \"\"\"\n    return a * (1 - r ** (n - 1))\n\n"], ["\"\"\"\nWrite a function to search an element in the given array by using binary search.\nassert binary_search([1,2,3,5,8], 6) == False\n\"\"\"\n\n\ndef binary_search(array, target):\n    \"\"\"\n    :param array: list\n    :param target: int\n    :return: bool\n    \"\"\"\n    left, right = 0, len(array) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == target:\n            return True\n        elif array[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\n\ndef main():\n    array = [1, 2, 3, 5, 8]\n    target = 6\n    print(binary_search(array, target))\n\n"], ["\"\"\"\nWrite a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\"\"\"\n"], ["\"\"\"\nWrite a function to convert the given binary tuple to integer.\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\"\"\"\n"], ["\"\"\"\nWrite a function to remove lowercase substrings from a given string by using regex.\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\"\"\"\n"], ["\"\"\"\nWrite a function to find the smallest integers from a given list of numbers using heap queue algorithm.\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\"\"\"\n\n\ndef heap_queue_smallest(lst, k):\n    \"\"\"\n    :param lst: list of numbers\n    :param k: smallest number to find\n    :return: list of numbers from smallest to largest\n    \"\"\"\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, lst[i])\n    return [heapq.heappop(heap) for i in range(k)]\n\n\ndef main():\n    print(heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 3))\n\n"], ["\"\"\"\nWrite a function to find the surface area of a cone.\nassert surfacearea_cone(5,12)==282.7433388230814\n\"\"\"\n\nimport math\n\ndef surfacearea_cone(radius, height):\n    \"\"\"\n    :param radius: radius of the cone\n    :param height: height of the cone\n    :return: surface area of the cone\n    \"\"\"\n    return 3.141592653589793 * (radius ** 2) * height + 3.141592653589793 * (radius ** 2) * height + 3.141592653589793 * (radius ** 2) * height\n\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    print(surfacearea_cone(5, 12))\n\n"], ["\"\"\"\nWrite a python function to find gcd of two positive integers.\nassert gcd(12, 17) == 1\n\"\"\"\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef gcd_test(a, b):\n    return gcd(a, b) == gcd(b, a % b)\n\n\ndef gcd_test2(a, b):\n    return gcd(a, b) == gcd(b, a % b)\n\n\ndef gcd_test3(a, b):\n    return gcd(a, b) == gcd(b, a % b)\n\n\ndef gcd_test4(a, b):\n    return gcd(a, b) == gcd(b, a % b)\n\n\ndef gcd_test5(a, b):\n    return gcd(a, b) == gcd(b, a % b)\n\n\ndef gcd_test6(a, b):\n    return gcd(a, b) == gcd(b, a % b)\n\n\ndef gcd_test7(a, b):\n    return gcd(a, b) == gcd(b, a % b)\n\n\ndef gcd_test8(a, b):\n    return gcd(a, b) == gcd(b, a % b)\n\n\ndef gcd_test9(a, b):\n    return gcd(a, b) == gcd(b, a % b)\n\n\ndef gcd_test10(a, b):\n    return gcd(a, b) == gcd(b, a % b)\n\n\ndef gcd_test11(a, b):\n    return gcd(a, b) == gcd(b, a % b)\n\n\ndef gcd_test12(a, b):\n    return gcd(a, b) == gcd(b, a % b)\n\n\ndef gcd_test13(a, b):\n    return gcd(a, b) == gcd(b, a %"], ["\"\"\"\nWrite a function to find the diameter of a circle.\nassert diameter_circle(10)==20\n\"\"\"\n\n# 1. Importing the libraries\nimport math\n\n# 2. Importing the dataset\ndataset = pd.read_csv('Data.csv')\n\n# 3. Part 1: Data Preprocessing\n# 3.1. Data Cleaning\n# 3.1.1. Handling missing values\ndataset.dropna(subset=['price'], inplace=True)\n\n# 3.1.2. Handling outliers\ndataset['price'] = dataset['price'].apply(lambda x: round(x, 2))\n\n# 3.1.3. Handling duplicates\ndataset.drop_duplicates(subset=['name'], inplace=True)\n\n# 3.1.4. Handling missing values\ndataset.dropna(subset=['price'], inplace=True)\n\n# 3.1.5. Handling outliers\ndataset['price'] = dataset['price'].apply(lambda x: round(x, 2))\n\n# 3.1.6. Handling duplicates\ndataset.drop_duplicates(subset=['name'], inplace=True)\n\n# 4. Part 2: Data Analysis\n# 4.1. Data Visualization\n# 4.1.1. Histogram\ndataset.hist(column='price', by='room_type', figsize=(15, 10))\nplt.show()\n\n# 4.1.2. Boxplot\ndataset.boxplot(column='price', by='room_type')\nplt.show()\n\n# 4.1.3. Scatterplot\ndataset.scatter(x='price', y='bedrooms', c='room_type', cmap='viridis')\nplt.show()\n\n# 4.1.4. Correlation\ndataset.corr()\n\n# 4.2. Data Preprocessing\n# 4.2.1. Handling missing values\ndataset.dropna(subset=['price'], inplace=True)\n\n# 4.2.2. Handling outliers\ndataset['price'] = dataset['price'].apply(lambda"], ["\"\"\"\nWrite a function to concatenate all elements of the given list into a string.\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\"\"\"\n\n\ndef concatenate_elements(list_):\n    return ' '.join(list_)\n\n"], ["\"\"\"\nWrite a python function to find common divisor between two numbers in a given pair.\nassert num_comm_div(2,4) == 2\n\"\"\"\n\n\ndef num_comm_div(num1, num2):\n    \"\"\"\n    :param num1: int\n    :param num2: int\n    :return: int\n    \"\"\"\n    # 1. check if num1 and num2 are positive\n    if num1 <= 0 or num2 <= 0:\n        return 0\n    # 2. check if num1 and num2 are even\n    if num1 % 2 == 0 and num2 % 2 == 0:\n        return 2\n    # 3. check if num1 and num2 are odd\n    if num1 % 2 != 0 and num2 % 2 != 0:\n        return 2\n    # 4. check if num1 and num2 are prime\n    if num1 > 2 and num2 > 2:\n        if num1 % 2 == 0 or num2 % 2 == 0:\n            return 0\n        else:\n            return 2\n    # 5. check if num1 and num2 are not prime\n    else:\n        return 0\n\n"], ["\"\"\"\nWrite a python function to find remainder of two numbers.\nassert find(3,3) == 0\n\"\"\"\n\n# 10. Write a python function to find remainder of two numbers.\n\n# +\n# 10. Write a python function to find remainder of two numbers.\n\n# +\n# 11. Write a python function to find remainder of two numbers.\n\n# +\n# 12. Write a python function to find remainder of two numbers.\n\n# +\n# 13. Write a python function to find remainder of two numbers.\n\n# +\n# 14. Write a python function to find remainder of two numbers.\n\n# +\n# 15. Write a python function to find remainder of two numbers.\n\n# +\n# 16. Write a python function to find remainder of two numbers.\n\n# +\n# 17. Write a python function to find remainder of two numbers.\n\n# +\n# 18. Write a python function to find remainder of two numbers.\n\n# +\n# 19. Write a python function to find remainder of two numbers.\n\n# +\n# 20. Write a python function to find remainder of two numbers.\n\n# +\n# 21. Write a python function to find remainder of two numbers.\n\n# +\n# 22. Write a python function to find remainder of two numbers.\n\n# +\n# 23. Write a python function to find remainder of two numbers.\n\n# +\n# 24. Write a python function to find remainder of two numbers.\n\n# +\n# 25. Write a python function to find remainder of two numbers.\n\n# +\n# 26. Write a python function to find remainder of two numbers.\n\n# +\n# 27. Write a python function to find remainder of two numbers.\n\n# +\n# 28. Write a python function to find remainder of two numbers.\n\n# +\n# 29. Write a python function to find remainder of two numbers.\n\n# +\n# 30. Write a python function to find remainder of two numbers.\n\n# +\n# 31. Write a python function to find remainder of two numbers.\n\n# +"], ["\"\"\"\nWrite a function to add consecutive numbers of a given list.\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\"\"\"\n\n\ndef add_consecutive_nums(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if not nums:\n        return []\n    nums.sort()\n    return [nums[0]] + add_consecutive_nums(nums[1:])\n\n"], ["\"\"\"\nWrite a python function to find the cube sum of first n natural numbers.\nassert sum_Of_Series(5) == 225\n\"\"\"\n\n\ndef sum_Of_Series(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    return sum(range(1, n + 1))\n\n\ndef main():\n    print(sum_Of_Series(5))\n\n"], ["\"\"\"\nWrite a function to move all zeroes to the end of the given array.\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\"\"\"\n"], ["\"\"\"\nWrite a function to calculate the permutation coefficient of given p(n, k).\nassert permutation_coefficient(10, 2) == 90\n\"\"\"\n"], ["\"\"\"\nWrite a function to remove specific words from a given list.\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\"\"\"\n\n\ndef remove_words(words, words_to_remove):\n    return [word for word in words if word not in words_to_remove]\n\n"], ["\"\"\"\nWrite a function to check if the common elements between two given lists are in the same order or not.\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\"\"\"\n\n\ndef same_order(lst1, lst2):\n    \"\"\"\n    :param lst1: list1\n    :param lst2: list2\n    :return: True if the elements are in the same order or not\n    \"\"\"\n    for i in range(len(lst1)):\n        for j in range(len(lst2)):\n            if lst1[i] == lst2[j]:\n                return True\n    return False\n\n"], ["\"\"\"\nWrite a python function to find the average of odd numbers till a given odd number.\nassert average_Odd(9) == 5\n\"\"\"\n\n\n# +\ndef average_Odd(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            sum += i\n    return sum/n\n"], ["\"\"\"\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nassert no_of_subsequences([1,2,3,4], 10) == 11\n\"\"\"\n\n\ndef no_of_subsequences(arr, k):\n    # Write your code here\n    n = len(arr)\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if arr[i-1] == j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] + 1\n    return dp[n][k]\n\n"]]