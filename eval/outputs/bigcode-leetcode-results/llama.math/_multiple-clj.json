[["(defn has_close_elements\n  \" Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> (has_close_elements [1.0 2.0 3.0] 0.5)\n  false\n  >>> (has_close_elements [1.0 2.8 3.0 4.0 5.0 2.0] 0.3)\n  true\"\n  [numbers threshold]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]\n  [number]"], ["(defn separate_paren_groups\n  \" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> (separate_paren_groups \"( ) (( )) (( )( ))\")\n  [\"()\" \"(())\" \"(()())\"]\"\n  [paren_string]\n  >>> (separate_paren_groups \"()()()\")\n  [\"()()\"]\n  >>> (separate_paren_groupsdefn truncate_number\n  \" Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n  Return the decimal part of the number.\n  >>> (truncate_number 3.5)\n  0.5\"\n  [number]"], ["(defn below_zero\n  \" You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> (below_zero [1 2 3])\n  false\n  >>> (below_zero [1 2 -4 5])\n  true\"\n  [operations]"], ["(defn mean_absolute_deviation\n  \" For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> (mean_absolute_deviation [1.0 2.0 3.0 4.0])\n  1.0\"\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers"], ["(defn intersperse\n  \" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> (intersperse [] 4)\n  []\n  >>> (intersperse [1 2 3] 4)\n  [1 4 2 4 3]\"\n  [numbers delimeter]"], ["(defn parse_nested_parens\n  \" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n  >>> (parse_nested_parens \"(()()) ((())) () ((())()())\")\n  [2 3 1 3]\"\n  [paren_string]"], ["(defn filter_by_substring\n  \" Filter an input list of strings only for ones that contain given substring\n  >>> (filter_by_substring [] \"a\")\n  []\n  >>> (filter_by_substring [\"abc\" \"bacd\" \"cde\" \"array\"] \"a\")\n  [\"abc\" \"bacd\" \"array\"]\"\n  [strings substring]\n  >>> (filter_by_substring [\"abc\" \"bacd\" \"cde\" \"array\"] \"a\")\n  [\"abc\" \"bacd\" \"array\"]\"\n  [strings substring]\n  >>> (filter_by_substring [\"abc\" \"bacd\" \"cde\" \"array\"] \"a\")\n  [\"abc\" \"bacd\" \"array\"]\"\n  [strings substring]\n  >>> (filter_by_substring [\"abc\" \"bacd\" \"cde\" \"array\"] \"a\")\n  [\"abc\" \"bacd\" \"array\"]\"\n  [strings substring]\n  >>> (filter_by_substring [\"abc\" \"bacd\" \"cde\" \"array\"] \"a\")\n  [\"abc\" \"bacd\" \"array\"]\"\n  [strings substring]\n  >>> (filter_by_substring [\"abc\" \"bacd\" \"cde\" \"array\"] \"a\")\n  [\"abc\" \"bacd\" \"array\"]\"\n  [strings substring]\n  >>> (filter_by_substring [\"abc\" \"bacd\" \"cde\" \"array\"] \"a\")\n  [\"abc\" \"bacd\" \"array\"]\"\n  [strings substring]\n  >>> (filter_by_substring [\"abc\" \"bacd\" \"cde\" \"array\"] \"a\")\n  [\"abc\" \"bacd\" \"array\"]\"\n  [strings substring]\n  >>> (filter_by_substring [\"abc\" \"bacd\" \"cde\" \"array\"] \"a\")\n  [\"abc\" \"bacd\" \"array\"]\"\n  [strings substring]\n  >>> (filter_by_substring [\"abc\" \"bacd\" \"cde\" \"array\"] \"a\")\n  [\"abc\" \"bacd\" \"array\"]\"\n  [strings substring]\n "], ["(defn sum_product\n  \" For a given list of integers, return a vector consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> (sum_product [])\n  [0 1]\n  >>> (sum_product [1 2 3 4])\n  [10 24]\"\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum_product numbers)\n  [numbers] => (sum"], ["(defn rolling_max\n  \" From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> (rolling_max [1 2 3 2 3 4 2])\n  [1 2 3 3 3 4 4]\"\n  [numbers]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3 3 4 4]\n  [1 2 3 3"], ["(defn make_palindrome\n  \" Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> (make_palindrome \"\")\n  \"\"\n  >>> (make_palindrome \"cat\")\n  \"catac\"\n  >>> (make_palindrome \"cata\")\n  \"catac\"\"\n  [string]\n  >>> (make_palindrome \"a\")\n  \"a\"\n  >>> (make_palindrome \"aa\")\n  \"a\"\n  >>> (make_palindrome \"aaa\")\n  \"aaa\"\n  >>> (make_palindrome \"aaa\")\n  \"aaa\"\n  >>> (make_palindrome \"aaa\")\n  \"aaa\"\n  >>> (make_palindrome \"aaa\")\n  \"aaa\"\n  >>> (make_palindrome \"aaa\")\n  \"aaa\"\n  >>> (make_palindrome \"aaa\")\n  \"aaa\"\n  >>> (make_palindrome \"aaa\")\n  \"aaa\"\n  >>> (make_palindrome \"aaa\")\n  \"aaa\"\n  >>> (make_palindrome \"aaa\")\n  \"aaa\"\n  >>> (make_palindrome \"aaa\")\n  \"aaa\"\n  >>> (make_palindrome \"aaa\")\n  \"aaa\"\n  >>> (make_palindrome \"aaa\")\n  \"aaa\"\n  >>> (make_palindrome \"aaa\")\n  \"aaa\"\n  >>> (make_palindrome \"aaa\")\n  \"aaa\"\n  >>> (make_palindrome \"aaa\")\n  \"aaa\"\n  >>> (make_palindrome \"aaa\")\n  \"aaa\"\n  >>> (make_palindrome \"aaa\")\n  \"aaa\"\n  >>> (make_palindrome \"aaa\")\n  \"aaa\"\n  >>> ("], ["(defn string_xor\n  \" Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> (string_xor \"010\" \"110\")\n  \"100\"\"\n  [a b]\n  [0 1 0 1]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 1 0]\n  [0 1 "], ["(defn longest\n  \" Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return nil in case the input list is empty.\n  >>> (longest [])\n  nil\n  >>> (longest [\"a\" \"b\" \"c\"])\n  \"a\"\n  >>> (longest [\"a\" \"bb\" \"ccc\"])\n  \"ccc\"\"\n  [strings]\n  \"\"\"\n  def __init__(self, input_list):\n    self.input_list = input_list\n\n  def __len__(self):\n    return len(self.input_list)\n\n  def __getitem__(self, index):\n    return self.input_list[index]\n\n  def __iter__(self):\n    for i in range(len(self.input_list)):\n      yield self.input_list[i]\n\n  def __repr__(self):\n    return str(self.input_list)\n\n  def __str__(self):\n    return str(self.input_list)\n\n  def __eq__(self, other):\n    return self.input_list == other.input_list\n\n  def __hash__(self):\n    return hash(self.input_list)\n\n  def __lt__(self, other):\n    return self.input_list < other.input_list\n\n  def __le__(self, other):\n    return self.input_list <= other.input_list\n\n  def __gt__(self, other):\n    return self.input_list > other.input_list\n\n  def __ge__(self, other):\n    return self.input_list >= other.input_list\n\n  def __and__(self, other):\n    return self.input_list & other.input_list\n\n  def __or__(self, other):\n    return self.input_list | other.input_list\n\n  def __xor__(self, other):\n    return self.input_list ^ other.input_list\n\n  def __invert__(self):\n    return ~self.input_list\n\n  def __add__(self, other):\n    return self.input_list + other.input_list\n\n"], ["(defn greatest_common_divisor\n  \" Return a greatest common divisor of two integers a and b\n  >>> (greatest_common_divisor 3 5)\n  1\n  >>> (greatest_common_divisor 25 15)\n  5\"\n  [a b]\n  [1 5]\n "], ["(defn all_prefixes\n  \" Return list of all prefixes from shortest to longest of the input string\n  >>> (all_prefixes \"abc\")\n  [\"a\" \"ab\" \"abc\"]\"\n  [string]"], ["(defn string_sequence\n  \" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> (string_sequence 0)\n  \"0\"\n  >>> (string_sequence 5)\n  \"0 1 2 3 4 5\"\"\n  [n]\n  \"\"\"\n  if n < 0:\n    raise ValueError(\"n must be non-negative\")\n  if n == 0:\n    return \"0\"\n  if n == 1:\n    return \"1\"\n  if n == 2:\n    return \"2\"\n  if n == 3:\n    return \"3\"\n  if n == 4:\n    return \"4\"\n  if n == 5:\n    return \"5\"\n  if n == 6:\n    return \"6\"\n  if n == 7:\n    return \"7\"\n  if n == 8:\n    return \"8\"\n  if n == 9:\n    return \"9\"\n  if n == 10:\n    return \"10\"\n  if n == 11:\n    return \"11\"\n  if n == 12:\n    return \"12\"\n  if n == 13:\n    return \"13\"\n  if n == 14:\n    return \"14\"\n  if n == 15:\n    return \"15\"\n  if n == 16:\n    return \"16\"\n  if n == 17:\n    return \"17\"\n  if n == 18:\n    return \"18\"\n  if n == 19:\n    return \"19\"\n  if n == 20:\n    return \"20\"\n  if n == 21:\n    return \"21\"\n  if n == 22:\n    return \"22\"\n  if n == 23:\n    return \"23\"\n  if n == 24:\n    return \"24\"\n  if n == 25:\n    return \"25\"\n  if n == 26:\n    return \"26\"\n "], ["(defn count_distinct_characters\n  \" Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> (count_distinct_characters \"xyzXYZ\")\n  3\n  >>> (count_distinct_characters \"Jerry\")\n  4\"\n  [string]"], ["(defn parse_music\n  \" Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n  >>> (parse_music \"o o| .| o| o| .| .| .| .| o o\")\n  [4 2 1 2 2 1 1 1 1 4 4]\"\n  [music_string]\n  >>> (parse_music \"o o| .| o| o| .| .| .| .| o o\")\n  [4 2 1 2 2 1 1 1 1 4 4]\"\n  [music_string]\n  >>> (parse_music \"o o| .| o| o| .| .| .| .| o o\")\n  [4 2 1 2 2 1 1 1 1 4 4]\"\n  [music_string]\n  >>> (parse_music \"o o| .| o| o| .| .| .| .| o o\")\n  [4 2 1 2 2 1 1 1 1 4 4]\"\n  [music_string]\n  >>> (parse_music \"o o| .| o| o| .| .| .| .| o o\")\n  [4 2 1 2 2 1 1 1 1 4 4]\"\n  [music_string]\n  >>> (parse_music \"o o| .| o| o| .| .| .| .| o o\")\n  [4 2 1 2 2 1 1 1 1 4 4]\"\n  [music_string]\n  >>> (parse_music \"o o| .| o| o| .| .| .| .| o o\")\n  [4 2 1 2 2 1 1 1 1 4"], ["(defn how_many_times\n  \" Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> (how_many_times \"\" \"a\")\n  0\n  >>> (how_many_times \"aaa\" \"a\")\n  3\n  >>> (how_many_times \"aaaa\" \"aa\")\n  3\"\n  [string substring]\n  >>> (how_many_times \"aaaa\" \"aaa\")\n  3\n  >>> (how_many_times \"aaaa\" \"aaa\")\n  3\n  >>> (how_many_times \"aaaa\" \"aaa\")\n  3\n  >>> (how_many_times \"aaaa\" \"aaa\")\n  3\n  >>> (how_many_times \"aaaa\" \"aaa\")\n  3\n  >>> (how_many_times \"aaaa\" \"aaa\")\n  3\n  >>> (how_many_times \"aaaa\" \"aaa\")\n  3\n  >>> (how_many_times \"aaaa\" \"aaa\")\n  3\n  >>> (how_many_times \"aaaa\" \"aaa\")\n  3\n  >>> (how_many_times \"aaaa\" \"aaa\")\n  3\n  >>> (how_many_times \"aaaa\" \"aaa\")\n  3\n  >>> (how_many_times \"aaaa\" \"aaa\")\n  3\n  >>> (how_many_times \"aaaa\" \"aaa\")\n  3\n  >>> (how_many_times \"aaaa\" \"aaa\")\n  3\n  >>> (how_many_times \"aaaa\" \"aaa\")\n  3\n  >>> (how_many_times \"aaaa\" \"aaa\")\n  3\n  >>> (how_many_times \"aaaa\" \"aaa\")\n  3\n  >>> (how_many_times \"aaaa\" \"aaa\")\n  3\n  >>> (how_many_times \"aaaa\" \"aaa\")\n  3\n  >>> (how_many_times \"aaaa\" \"aaa\")\n  3\n  >>> (how_many_times \"aaaa\" \"aaa\")\n  3\n  >>> (how_many_times \"aaaa\" \"aaa\")\n  3\n  >>>"], ["(defn sort_numbers\n  \" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> (sort_numbers \"three one five\")\n  \"one three five\"\"\n  [numbers]\n  >>> (sort_numbers \"one two three five\")\n  \"one two three five\"\n  [numbers]\n  >>> (sort_numbers \"one two three five four\")\n  \"one two three five four\"\n  [numbers]\n  >>> (sort_numbers \"one two three five four five\")\n  \"one two three five four five\"\n  [numbers]\n  >>> (sort_numbers \"one two three five four five six\")\n  \"one two three five four five six\"\n  [numbers]\n  >>> (sort_numbers \"one two three five four five six seven\")\n  \"one two three five four five six seven\"\n  [numbers]\n  >>> (sort_numbers \"one two three five four five six seven eight\")\n  \"one two three five four five six seven eight\"\n  [numbers]\n  >>> (sort_numbers \"one two three five four five six seven eight nine\")\n  \"one two three five four five six seven eight nine\"\n  [numbers]\n  >>> (sort_numbers \"one two three five four five six seven eight nine ten\")\n  \"one two three five four five six seven eight nine ten\"\n  [numbers]\n  >>> (sort_numbers \"one two three five four five six seven eight nine ten eleven\")\n  \"one two three five four five six seven eight nine ten eleven\"\n  [numbers]\n  >>> (sort_numbers \"one two three five four five six seven eight nine ten eleven twelve\")\n  \"one two three five four five six seven eight nine ten eleven twelve\"\n  [numbers]\n  >>> (sort_numbers \"one two three five four five six seven eight nine ten eleven twelve thirteen\")\n  \"one two three five four five six seven eight nine ten eleven twelve thirteen\"\n  [numbers]\n  >>> (sort_numbers"], ["(defn find_closest_elements\n  \" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> (find_closest_elements [1.0 2.0 3.0 4.0 5.0 2.2])\n  [2.0 2.2]\n  >>> (find_closest_elements [1.0 2.0 3.0 4.0 5.0 2.0])\n  [2.0 2.0]\"\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers]\n  [numbers"], ["(defn rescale_to_unit\n  \" Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> (rescale_to_unit [1.0 2.0 3.0 4.0 5.0])\n  [0.0 0.25 0.5 0.75 1.0]\"\n  [numbers]\n  (rescale_to_unit numbers)\n"], ["(defn filter_integers\n  \" Filter given list of any cljthon values only for integers\n  >>> (filter_integers [\"a\" 3.14 5])\n  [5]\n  >>> (filter_integers [1 2 3 \"abc\" {} []])\n  [1 2 3]\"\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n  [values]\n"], ["(defn strlen\n  \" Return length of given string\n  >>> (strlen \"\")\n  0\n  >>> (strlen \"abc\")\n  3\"\n  [string]"], ["(defn largest_divisor\n  \" For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> (largest_divisor 15)\n  5\"\n  [n]\n  [n]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n  [5]\n  [15]\n "], ["(defn factorize\n  \" Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> (factorize 8)\n  [2 2 2]\n  >>> (factorize 25)\n  [5 5]\n  >>> (factorize 70)\n  [2 5 7]\"\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n  [n] => [n]\n"], ["(defn remove_duplicates\n  \" From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> (remove_duplicates [1 2 3 2 4])\n  [1 3 4]\"\n  [numbers]\n  (require '(list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list ("], ["(defn flip_case\n  \" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> (flip_case \"Hello\")\n  \"hELLO\"\"\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  [string]\n  ["], ["(defn concatenate\n  \" Concatenate list of strings into a single string\n  >>> (concatenate [])\n  \"\"\n  >>> (concatenate [\"a\" \"b\" \"c\"])\n  \"abc\"\"\n  [strings]\n  \"\"\"\n  def concat(self, strings):\n    return self.s.join(strings)\n\n  def __str__(self):\n    return self.s\n\n  def __repr__(self):\n    return self.s\n\n  def __len__(self):\n    return len(self.s)\n\n  def __getitem__(self, index):\n    return self.s[index]\n\n  def __setitem__(self, index, value):\n    self.s[index] = value\n\n  def __delitem__(self, index):\n    del self.s[index]\n\n  def __contains__(self, item):\n    return item in self.s\n\n  def __iter__(self):\n    return iter(self.s)\n\n  def __eq__(self, other):\n    return self.s == other.s\n\n  def __hash__(self):\n    return hash(self.s)\n\n  def __nonzero__(self):\n    return bool(self.s)\n\n  def __bool__(self):\n    return bool(self.s)\n\n  def __repr__(self):\n    return repr(self.s)\n\n  def __str__(self):\n    return str(self.s)\n\n  def __format__(self, format_spec):\n    return format(self.s, format_spec)\n\n  def __format_with_index__(self, format_spec, index):\n    return format(self.s, format_spec, index)\n\n  def __format_with_index_and_value__(self, format_spec, index, value):\n    return format(self.s, format_spec, index, value)\n\n  def __format_with_index_and_value_and_index__(self, format_spec, index, value, index):\n    return format(self.s, format_spec, index, value, index)\n\n  def __format_with_index_and_"], ["(defn filter_by_prefix\n  \" Filter an input list of strings only for ones that start with a given prefix.\n  >>> (filter_by_prefix [] \"a\")\n  []\n  >>> (filter_by_prefix [\"abc\" \"bcd\" \"cde\" \"array\"] \"a\")\n  [\"abc\" \"array\"]\"\n  [strings prefix]\n  \"\"\"\n  if not isinstance(strings, list):\n    raise TypeError(\"strings must be a list\")\n  if not isinstance(prefix, str):\n    raise TypeError(\"prefix must be a string\")\n  if not strings:\n    raise ValueError(\"strings must not be empty\")\n  if not prefix:\n    raise ValueError(\"prefix must not be empty\")\n  return [s for s in strings if s.startswith(prefix)]\n"], ["(defn get_positive\n  \"Return only positive numbers in the list.\n  >>> (get_positive [-1 2 -4 5 6])\n  [2 5 6]\n  >>> (get_positive [5 3 -5 2 -3 3 9 0 123 1 -10])\n  [5 3 2 3 9 123 1]\"\n  [l]\n  (defun get-positive (l)\n    (let* ((n (length l))\n           (i 0)\n           (j n)\n           (pos (loop while (< i n)\n                    do (loop while (< j n)\n                           do (if (> (nth i l) (nth j l))\n                                 (incf i)\n                                 (incf j))\n                           do (incf i)\n                           do (incf j))))\n           (list (nth i l) (nth j l)))))\n"], ["(defn is_prime\n  \"Return true if a given number is prime, and false otherwise.\n  >>> (is_prime 6)\n  false\n  >>> (is_prime 101)\n  true\n  >>> (is_prime 11)\n  true\n  >>> (is_prime 13441)\n  true\n  >>> (is_prime 61)\n  true\n  >>> (is_prime 4)\n  false\n  >>> (is_prime 1)\n  false\"\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]"], ["(defn sort_third\n  \"This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> (sort_third [1 2 3])\n  [1 2 3]\n  >>> (sort_third [5 6 3 4 8 9 2])\n  [2 6 3 4 8 9 5]\"\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l] => (sort_list l)\n  [l"], ["(defn unique\n  \"Return sorted unique elements in a list\n  >>> (unique [5 3 5 2 3 3 9 0 123])\n  [0 2 3 5 9 123]\"\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l] => (sort (remove-duplicates l))\n  [l]"], ["(defn max_element\n  \"Return maximum element in the list.\n  >>> (max_element [1 2 3])\n  3\n  >>> (max_element [5 3 -5 2 -3 3 9 0 123 1 -10])\n  123\"\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]"], ["(defn fizz_buzz\n  \"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> (fizz_buzz 50)\n  0\n  >>> (fizz_buzz 78)\n  2\n  >>> (fizz_buzz 79)\n  3\"\n  [n]"], ["(defn sort_even\n  \"This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> (sort_even [1 2 3])\n  [1 2 3]\n  >>> (sort_even [5 6 3 4])\n  [3 6 5 4]\"\n  [l] => [l']\n  |> (map (fn [l] => (let [l' (sort_even l)] (list l'))) l)\n  |> (map (fn [l] => (list (map (fn [i] (if (odd? i) (nth l i) (nth l (if even? i) i))))) l))\n  |> (map (fn [l] => (list (map (fn [i] (if (even? i) (nth l i) (nth l (if odd? i) i))))) l))\n  |> (map (fn [l] => (list (map (fn [i] (if (even? i) (nth l i) (nth l (if odd? i) i))))) l))\n  |> (map (fn [l] => (list (map (fn [i] (if (even? i) (nth l i) (nth l (if odd? i) i))))) l))\n  |> (map (fn [l] => (list (map (fn [i] (if (even? i) (nth l i) (nth l (if odd? i) i))))) l))\n  |> (map (fn [l] => (list (map (fn [i] (if (even? i) (nth l i) (nth l (if odd? i) i))))) l))\n  |> (map (fn [l] => (list (map (fn [i] (if (even? i) (nth l i) (nth l (if odd? i) i))))) l))\n  |> (map (fn [l] => (list (map (fn [i] (if (even? i) (nth l"], ["(defn prime_fib\n  \"prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> (prime_fib 1)\n  2\n  >>> (prime_fib 2)\n  3\n  >>> (prime_fib 3)\n  5\n  >>> (prime_fib 4)\n  13\n  >>> (prime_fib 5)\n  89\"\n  [n]\n  def prime_fib(n)\n  {\n    let n = n + 1\n    let fib = fib_n(n)\n    if fib = 0\n    then 0\n    else if fib = 1\n    then 1\n    else if fib = fib_n(n)\n    then fib_n(n)\n    else fib_n(n)\n  }\n  {\n    let fib = fib_n(n)\n    if fib = 0\n    then 0\n    else if fib = 1\n    then 1\n    else if fib = fib_n(n)\n    then fib_n(n)\n    else fib_n(n)\n  }\n  {\n    let fib = fib_n(n)\n    if fib = 0\n    then 0\n    else if fib = 1\n    then 1\n    else if fib = fib_n(n)\n    then fib_n(n)\n    else fib_n(n)\n  }\n  {\n    let fib = fib_n(n)\n    if fib = 0\n    then 0\n    else if fib = 1\n    then 1\n    else if fib = fib_n(n)\n    then fib_n(n)\n    else fib_n(n)\n  }\n  {\n    let fib = fib_n(n)\n    if fib = 0\n    then 0\n    else if fib = 1\n    then 1\n    else if fib = fib_n(n)\n    then fib_n(n)\n    else fib_n(n)\n  }\n  {\n    let fib = fib_n(n)\n    if fib = 0"], ["(defn triples_sum_to_zero\n  \"triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> (triples_sum_to_zero [1 3 5 0])\n  false\n  >>> (triples_sum_to_zero [1 3 -2 1])\n  true\n  >>> (triples_sum_to_zero [1 2 3 7])\n  false\n  >>> (triples_sum_to_zero [2 4 -5 3 9 7])\n  true\n  >>> (triples_sum_to_zero [1])\n  false\"\n  [l]\n  def triples_sum_to_zero(l)\n  {\n  (triples_sum_to_zero l)\n  (if (not (empty? l))\n    (if (zero? (car l))\n      (if (zero? (cadr l))\n        (if (zero? (caddr l))\n          (if (zero? (cadddr l))\n            (if (zero? (caddddr l))\n              (if (zero? (caddddddr l))\n                (if (zero? (caddddddddr l))\n                  (if (zero? (caddddddddddr l))\n                    (if (zero? (caddddddddddddr l))\n                      (if (zero? (caddddddddddddddr l))\n                        (if (zero? (caddddddddddddddddr l))\n                          (if (zero? (caddddddddddddddddddr l))\n                            (if (zero? (caddddddddddddddddddddr l))\n                              (if (zero? (caddddddddddddddddddddddr l))\n                                (if (zero? (caddddddddddddddddddddddddr l))\n                                  (if (zero? (caddddddddddddddddddddddddddr l"], ["(defn car_race_collision\n  \"Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n  This function outputs the number of such collisions.\"\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]"], ["(defn incr_list\n  \"Return list with elements incremented by 1.\n  >>> (incr_list [1 2 3])\n  [2 3 4]\n  >>> (incr_list [5 3 5 2 3 3 9 0 123])\n  [6 4 6 3 4 4 10 1 124]\"\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l)\n  [l] => (incr_list l"], ["(defn pairs_sum_to_zero\n  \"pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> (pairs_sum_to_zero [1 3 5 0])\n  false\n  >>> (pairs_sum_to_zero [1 3 -2 1])\n  false\n  >>> (pairs_sum_to_zero [1 2 3 7])\n  false\n  >>> (pairs_sum_to_zero [2 4 -5 3 5 7])\n  true\n  >>> (pairs_sum_to_zero [1])\n  false\"\n  [l]\n  def pairs_sum_to_zero(l)\n  {\n  (l)\n  def pairs_sum_to_zero(l)\n  {\n  (l)\n  def pairs_sum_to_zero(l)\n  {\n  (l)\n  def pairs_sum_to_zero(l)\n  {\n  (l)\n  def pairs_sum_to_zero(l)\n  {\n  (l)\n  def pairs_sum_to_zero(l)\n  {\n  (l)\n  def pairs_sum_to_zero(l)\n  {\n  (l)\n  def pairs_sum_to_zero(l)\n  {\n  (l)\n  def pairs_sum_to_zero(l)\n  {\n  (l)\n  def pairs_sum_to_zero(l)\n  {\n  (l)\n  def pairs_sum_to_zero(l)\n  {\n  (l)\n  def pairs_sum_to_zero(l)\n  {\n  (l)\n  def pairs_sum_to_zero(l)\n  {\n  (l)\n  def pairs_sum_to_zero(l)\n  {\n  (l)\n  def pairs_sum_to_zero(l)\n  {\n  (l)\n  def pairs_sum_to_zero(l)\n  {\n "], ["(defn change_base\n  \"Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> (change_base 8 3)\n  \"22\"\n  >>> (change_base 8 2)\n  \"1000\"\n  >>> (change_base 7 2)\n  \"111\"\"\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n  [x base]\n "], ["(defn triangle_area\n  \"Given length of a side and high return area for a triangle.\n  >>> (triangle_area 5 3)\n  7.5\"\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  [a h]\n  ["], ["(defn fib4\n  \"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> (fib4 5)\n  4\n  >>> (fib4 6)\n  8\n  >>> (fib4 7)\n  14\"\n  [n]\n  \"\"\"\n  def fib4(n):\n    if n == 0:\n      return 0\n    elif n == 1:\n      return 0\n    elif n == 2:\n      return 2\n    elif n == 3:\n      return 0\n    elif n == 4:\n      return 0\n    elif n == 5:\n      return 4\n    elif n == 6:\n      return 8\n    elif n == 7:\n      return 14\n    else:\n      return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\n  return fib4\n"], ["(defn median\n  \"Return median of elements in the list l.\n  >>> (median [3 1 2 4 5])\n  3\n  >>> (median [-10 4 6 1000 10 20])\n  15.0\"\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l]\n  [l"], ["(defn is_palindrome\n  \"Checks if given string is a palindrome\n  >>> (is_palindrome \"\")\n  true\n  >>> (is_palindrome \"aba\")\n  true\n  >>> (is_palindrome \"aaaaa\")\n  true\n  >>> (is_palindrome \"zbcd\")\n  false\"\n  [text]"], ["(defn modp\n  \"Return 2^n modulo p (be aware of numerics).\n  >>> (modp 3 5)\n  3\n  >>> (modp 1101 101)\n  2\n  >>> (modp 0 101)\n  1\n  >>> (modp 3 11)\n  8\n  >>> (modp 100 101)\n  1\"\n  [n p] => (modp n p)\n  }\n\n"], ["(defn remove_vowels\n  \"remove_vowels is a function that takes string and returns string without vowels.\n  >>> (remove_vowels \"\")\n  \"\"\n  >>> (remove_vowels \"abcdef\")\n  \"bcdf\"\n  >>> (remove_vowels \"aaaaa\")\n  \"\"\n  >>> (remove_vowels \"aaBAA\")\n  \"B\"\n  >>> (remove_vowels \"zbcd\")\n  \"zbcd\"\"\n  [text]"], ["(defn below_threshold\n  \"Return true if all numbers in the list l are below threshold t.\n  >>> (below_threshold [1 2 4 10] 100)\n  true\n  >>> (below_threshold [1 20 4 10] 5)\n  false\"\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l t]\n  [l"], ["(defn add\n  \"Add two numbers x and y\n  >>> (add 2 3)\n  5\n  >>> (add 5 7)\n  12\"\n  [x y]\n  (let ((x (parse-integer x)))\n    (let ((y (parse-integer y)))\n      (if (and (even? x) (even? y))\n        (let ((sum (add x y)))\n          (if (odd? sum)\n            (add (quot x 2) (quot y 2))\n            (add (quot x 2) (quot y 2) (quot sum 2))))\n        (add x y))))\n"], ["(defn same_chars\n  \"Check if two words have the same characters.\n  >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n  true\n  >>> (same_chars \"abcd\" \"dddddddabc\")\n  true\n  >>> (same_chars \"dddddddabc\" \"abcd\")\n  true\n  >>> (same_chars \"eabcd\" \"dddddddabc\")\n  false\n  >>> (same_chars \"abcd\" \"dddddddabce\")\n  false\n  >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n  false\"\n  [s0 s1]\n  \"\"\"\n  if len(s0) != len(s1):\n    return False\n  for i in range(len(s0)):\n    if s0[i] != s1[i]:\n      return False\n  return True\n\ndef same_chars(s0, s1):\n  \"\"\"Check if two words have the same characters.\n\n  >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n  true\n  >>> (same_chars \"abcd\" \"dddddddabc\")\n  true\n  >>> (same_chars \"dddddddabc\" \"abcd\")\n  true\n  >>> (same_chars \"eabcd\" \"dddddddabc\")\n  false\n  >>> (same_chars \"abcd\" \"dddddddabce\")\n  false\n  >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n  false\n  \"\"\"\n  if len(s0) != len(s1):\n    return False\n  for i in range(len(s0)):\n    if s0[i] != s1[i]:\n      return False\n  return True\n\ndef same_chars_with_spaces(s0, s1):\n  \"\"\"Check if two words have the same characters, but with spaces.\n\n  >>> (same_chars_with_spaces \"eabcdzzzz"], ["(defn fib\n  \"Return n-th Fibonacci number.\n  >>> (fib 10)\n  55\n  >>> (fib 1)\n  1\n  >>> (fib 8)\n  21\"\n  [n]\n  (defun fib (n)\n    (if (< n 0)\n      0\n      (let ((a 1)\n            (b 1)\n            (i 0))\n        (loop while (< i n)\n              do (if (even? i)\n                   (progn\n                     (setq a (fib (+ a b)))\n                     (setq b (fib (+ b a))))\n                   (setq i (1+ i))))\n        a))))\n"], ["(defn correct_bracketing\n  \" brackets is a string of \"<\" and \">\".\n  return true if every opening bracket has a corresponding closing bracket.\n  >>> (correct_bracketing \"<\")\n  false\n  >>> (correct_bracketing \"<>\")\n  true\n  >>> (correct_bracketing \"<<><>>\")\n  true\n  >>> (correct_bracketing \"><<>\")\n  false\"\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  ["], ["(defn monotonic\n  \"Return true is list elements are monotonically increasing or decreasing.\n  >>> (monotonic [1 2 4 20])\n  true\n  >>> (monotonic [1 20 4 10])\n  false\n  >>> (monotonic [4 1 0 -10])\n  true\"\n  [l]\n  (defn monotonic [l]\n    (let [n (count l)]\n      (if (= n 0)\n        (if (> (nth l 0) (nth l (- n 1)))\n          (if (> (nth l (- n 1)) (nth l (- n 2)))\n            (if (> (nth l (- n 2)) (nth l (- n 3)))\n              (if (> (nth l (- n 3)) (nth l (- n 4)))\n                (if (> (nth l (- n 4)) (nth l (- n 5)))\n                  (if (> (nth l (- n 5)) (nth l (- n 6)))\n                    (if (> (nth l (- n 6)) (nth l (- n 7)))\n                      (if (> (nth l (- n 7)) (nth l (- n 8)))\n                        (if (> (nth l (- n 8)) (nth l (- n 9)))\n                          (if (> (nth l (- n 9)) (nth l (- n 10)))\n                            (if (> (nth l (- n 10)) (nth l (- n 11)))\n                              (if (> (nth l (- n 11)) (nth l (- n 12)))\n                                (if (> (nth l (- n 12)) (nth l (- n 13)))\n                                  (if (> (nth l (- n 13)) (nth l (- n 14)))\n                                    (if (> (nth l (- n 14)) (nth l (- n 15)))\n                                      (if (> (nth l (- n 15)) (nth l (- n 16)))\n                                        (if (> (nth l (- n 16)) ("], ["(defn common\n  \"Return sorted unique common elements for two lists.\n  >>> (common [1 4 3 34 653 2 5] [5 7 1 5 9 653 121])\n  [1 5 653]\n  >>> (common [5 3 2 8] [3 2])\n  [2 3]\"\n  [l1 l2]\n  (defn - common [l1 l2]\n    (let [l1-set (set l1)\n          l2-set (set l2)]\n      (sort (filter #(member % l1-set) l2-set)\n            (reverse (filter #(member % l2-set) l1-set)))))\n\n  (defn - reverse [l]\n    (sort l (reverse)))\n\n  (defn - sort [l]\n    (sort l (reverse)))\n\n  (defn - unique [l]\n    (sort (filter #(member % l) l)))\n\n  (defn - common-elements [l1 l2]\n    (let [l1-set (set l1)\n          l2-set (set l2)]\n      (sort (filter #(member % l1-set) l2-set)\n            (reverse (filter #(member % l2-set) l1-set)))))\n\n  (defn - common-elements-reverse [l1 l2]\n    (let [l1-set (set l1)\n          l2-set (set l2)]\n      (sort (filter #(member % l1-set) l2-set)\n            (reverse (filter #(member % l2-set) l1-set)))))\n\n  (defn - common-elements-reverse-reverse [l1 l2]\n    (let [l1-set (set l1)\n          l2-set (set l2)]\n      (sort (filter #(member % l1-set) (reverse l2-set))\n            (reverse (filter #(member % l2-set) l1-set)))))\n\n  (defn - common-elements-reverse-reverse-reverse [l1 l2]\n    (let [l1-"], ["(defn largest_prime_factor\n  \"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> (largest_prime_factor 13195)\n  29\n  >>> (largest_prime_factor 2048)\n  2\"\n  [n]"], ["(defn sum_to_n\n  \"sum_to_n is a function that sums numbers from 1 to n.\n  >>> (sum_to_n 30)\n  465\n  >>> (sum_to_n 100)\n  5050\n  >>> (sum_to_n 5)\n  15\n  >>> (sum_to_n 10)\n  55\n  >>> (sum_to_n 1)\n  1\"\n  [n] => (sum_to_n (100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["(defn correct_bracketing\n  \" brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n  >>> (correct_bracketing \"(\")\n  false\n  >>> (correct_bracketing \"()\")\n  true\n  >>> (correct_bracketing \"(()())\")\n  true\n  >>> (correct_bracketing \")(()\")\n  false\"\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [brackets]\n  [bra"], ["(defn derivative\n  \" xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> (derivative [3 1 2 4 5])\n  [1 4 12 20]\n  >>> (derivative [1 2 3])\n  [2 6]\"\n  [xs] => xs[0] + xs[1] * x + xs[2] * x^2 + ....\n  [xs[0]] => xs[0]\n  [xs[1]] => xs[1]\n  [xs[2]] => xs[2]\n  [xs[3]] => xs[3]\n  [xs[4]] => xs[4]\n  [xs[5]] => xs[5]\n  [xs[6]] => xs[6]\n  [xs[7]] => xs[7]\n  [xs[8]] => xs[8]\n  [xs[9]] => xs[9]\n  [xs[10]] => xs[10]\n  [xs[11]] => xs[11]\n  [xs[12]] => xs[12]\n  [xs[13]] => xs[13]\n  [xs[14]] => xs[14]\n  [xs[15]] => xs[15]\n  [xs[16]] => xs[16]\n  [xs[17]] => xs[17]\n  [xs[18]] => xs[18]\n  [xs[19]] => xs[19]\n  [xs[20]] => xs[20]\n  [xs[21]] => xs[21]\n  [xs[22]] => xs[22]\n  [xs[23]] => xs[23]\n  [xs[24]] => xs[24]\n  [xs[25]] => xs[25]\n  [xs[26]] => xs[26]\n  [xs[27]] => xs[27]\n  [xs[28]] => xs"], ["(defn fibfib\n  \"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> (fibfib 1)\n  0\n  >>> (fibfib 5)\n  4\n  >>> (fibfib 8)\n  24\"\n  [n]\n  >>> (fibfib 100)\n  1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["(defn vowels_count\n  \"Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n  Example:\n  >>> (vowels_count \"abcde\")\n  2\n  >>> (vowels_count \"ACEDY\")\n  3\"\n  [s]\n  >>> (vowels_count \"abce\")\n  1\n  >>> (vowels_count \"abc\")\n  0\n  >>> (vowels_count \"yabce\")\n  1\n  >>> (vowels_count \"yabce\")\n  1\n  >>> (vowels_count \"yabce\")\n  1\n  >>> (vowels_count \"yabce\")\n  1\n  >>> (vowels_count \"yabce\")\n  1\n  >>> (vowels_count \"yabce\")\n  1\n  >>> (vowels_count \"yabce\")\n  1\n  >>> (vowels_count \"yabce\")\n  1\n  >>> (vowels_count \"yabce\")\n  1\n  >>> (vowels_count \"yabce\")\n  1\n  >>> (vowels_count \"yabce\")\n  1\n  >>> (vowels_count \"yabce\")\n  1\n  >>> (vowels_count \"yabce\")\n  1\n  >>> (vowels_count \"yabce\")\n  1\n  >>> (vowels_count \"yabce\")\n  1\n  >>> (vowels_count \"yabce\")\n  1\n  >>> (vowels_count \"yabce\")\n  1\n  >>> (vowels_count \"yabce\")\n  1\n  >>> (vowels_count \"yabce\")\n  1\n  >>> (vowels_count \"yabce\")\n  1\n  >>> (vow"], ["(defn circular_shift\n  \"Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> (circular_shift 12 1)\n  \"21\"\n  >>> (circular_shift 12 2)\n  \"12\"\"\n  [x shift]\n  >>> (circular_shift 12 3)\n  \"123\"\n  [x shift]\n  >>> (circular_shift 12 4)\n  \"124\"\n  [x shift]\n  >>> (circular_shift 12 5)\n  \"125\"\n  [x shift]\n  >>> (circular_shift 12 6)\n  \"126\"\n  [x shift]\n  >>> (circular_shift 12 7)\n  \"127\"\n  [x shift]\n  >>> (circular_shift 12 8)\n  \"128\"\n  [x shift]\n  >>> (circular_shift 12 9)\n  \"129\"\n  [x shift]\n  >>> (circular_shift 12 10)\n  \"120\"\n  [x shift]\n  >>> (circular_shift 12 11)\n  \"121\"\n  [x shift]\n  >>> (circular_shift 12 12)\n  \"122\"\n  [x shift]\n  >>> (circular_shift 12 13)\n  \"123\"\n  [x shift]\n  >>> (circular_shift 12 14)\n  \"124\"\n  [x shift]\n  >>> (circular_shift 12 15)\n  \"125\"\n  [x shift]\n  >>> (circular_shift 12 16)\n  \"126\"\n  [x shift]\n  >>> (circular_shift 12 17)\n  \"127\"\n  [x shift]\n  >>> ("], ["(defn digitSum\n  \"Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n  Examples:\n  >>> (digitSum \"\")\n  0\n  >>> (digitSum \"abAB\")\n  131\n  >>> (digitSum \"abcCd\")\n  67\n  >>> (digitSum \"helloE\")\n  69\n  >>> (digitSum \"woArBld\")\n  131\n  >>> (digitSum \"aAaaaXa\")\n  153\"\n  [s]\n  \"\"\"\n  def digitSum(self, s):\n    return sum(c.isupper() for c in s)\n"], ["(defn fruit_distribution\n  \"In this task, you will be given a string that represents a number of apples and oranges \n  that are distributed in a basket of fruit this basket contains \n  apples, oranges, and mango fruits. Given the string that represents the total number of \n  the oranges and apples and an integer that represent the total number of the fruits \n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  >>> (fruit_distribution \"5 apples and 6 oranges\" 19)\n  8\n  >>> (fruit_distribution \"0 apples and 1 oranges\" 3)\n  2\n  >>> (fruit_distribution \"2 apples and 3 oranges\" 100)\n  95\n  >>> (fruit_distribution \"100 apples and 1 oranges\" 120)\n  19\"\n  [s n]\n  \"\"\"\n  if not string:\n    return 0\n  string = string.replace(\" \", \"\")\n  string = string.replace(\"o\", \"\")\n  string = string.replace(\"a\", \"\")\n  string = string.replace(\"m\", \"\")\n  string = string.replace(\"p\", \"\")\n  string = string.replace(\"n\", \"\")\n  string = string.replace(\"e\", \"\")\n  string = string.replace(\"s\", \"\")\n  string = string.replace(\"r\", \"\")\n  string = string.replace(\"t\", \"\")\n  string = string.replace(\"d\", \"\")\n  string = string.replace(\"f\", \"\")\n  string = string.replace(\"c\", \"\")\n  string = string.replace(\"b\", \"\")\n  string = string.replace(\"g\", \"\")\n  string = string.replace(\"h\", \"\")\n  string = string.replace(\"j\", \"\")\n  string = string.replace(\"k\", \"\")\n  string = string.replace(\"l\", \"\")\n  string = string.replace(\"m\", \"\")\n  string = string.replace(\"l\", \"\")\n  string = string.replace(\"o\", \"\")\n  string = string.replace(\"l\", \"\")\n  string = string.replace(\"o\", \"\")\n  string = string.replace(\"o\","], ["(defn pluck\n  \"\"Given a vector representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given vector is empty, return [].\n  Example 1:\n  >>> (pluck [4 2 3])\n  [2 1]\n  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n  Example 2:\n  >>> (pluck [1 2 3])\n  [2 1]\n  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n  Example 3:\n  >>> (pluck [])\n  []\n  Example 4:\n  >>> (pluck [5 0 3 0 4 2])\n  [0 1]\n  Explanation: 0 is the smallest value, but  there are two zeros,\n               so we will choose the first zero, which has the smallest index.\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\"\n  [arr]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1"], ["(defn search\n  \"You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n  zero, and has a frequency greater than or equal to the value of the integer itself. \n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n  >>> (search [4 1 2 2 3 1])\n  2\n  >>> (search [1 2 2 3 3 3 4 4 4])\n  3\n  >>> (search [5 5 4 4 4])\n  -1\"\n  [lst]\n  \"\"\"\n  lst = list(map(int, lst))\n  lst.sort()\n  return lst[0] if lst else -1\n"], ["(defn strange_sort_list\n  \"Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n  Examples:\n  >>> (strange_sort_list [1 2 3 4])\n  [1 4 2 3]\n  >>> (strange_sort_list [5 5 5 5])\n  [5 5 5 5]\n  >>> (strange_sort_list [])\n  []\"\n  [lst] => (strange_sort_list lst)\n  [lst] => (strange_sort_list lst)\n  [lst] => (strange_sort_list lst)\n  [lst] => (strange_sort_list lst)\n  [lst] => (strange_sort_list lst)\n  [lst] => (strange_sort_list lst)\n  [lst] => (strange_sort_list lst)\n  [lst] => (strange_sort_list lst)\n  [lst] => (strange_sort_list lst)\n  [lst] => (strange_sort_list lst)\n  [lst] => (strange_sort_list lst)\n  [lst] => (strange_sort_list lst)\n  [lst] => (strange_sort_list lst)\n  [lst] => (strange_sort_list lst)\n  [lst] => (strange_sort_list lst)\n  [lst] => (strange_sort_list lst)\n  [lst] => (strange_sort_list lst)\n  [lst] => (strange_sort_list lst)\n  [lst] => (strange_sort_list lst)\n  [lst] => (strange_sort_list lst)\n  [lst] => (strange_sort_list lst)\n  [lst] => (strange_sort_list lst)\n  [lst] => (strange_sort_list lst)\n  [lst] => (strange_sort_list lst)\n  [lst] => (strange_sort_list lst)\n  ["], ["(defn triangle_area\n  \"Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater \n  than the third side.\n  Example:\n  >>> (triangle_area 3 4 5)\n  6.0\n  >>> (triangle_area 1 2 10)\n  -1\"\n  [a b c]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2 10]\n  [1 2"], ["(defn will_it_fly\n  \"Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n  Example:\n  >>> (will_it_fly [1 2] 5)\n  false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n  >>> (will_it_fly [3 2 3] 1)\n  false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n  >>> (will_it_fly [3 2 3] 9)\n  true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n  >>> (will_it_fly [3] 5)\n  true\n  # 3 is less than the maximum possible weight, and it's balanced.\"\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  [q w]\n  ["], ["(defn smallest_change\n  \"Given a vector arr of integers, find the minimum number of elements that\n  need to be changed to make the vector palindromic. A palindromic vector is a vector that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n  For example:\n  >>> (smallest_change [1 2 3 5 4 7 9 6])\n  4\n  >>> (smallest_change [1 2 3 4 3 2 2])\n  1\n  >>> (smallest_change [1 2 3 2 1])\n  0\"\n  [arr]\n  [arr]\n  {\n    \"smallest_change\" => {\n      \"arr\" => {\n        \"0\" => 0,\n        \"1\" => 0,\n        \"2\" => 0,\n        \"3\" => 0,\n        \"4\" => 0,\n        \"5\" => 0,\n        \"6\" => 0,\n        \"7\" => 0,\n        \"8\" => 0,\n        \"9\" => 0\n      }\n    }\n  }\n"], ["(defn total_match\n  \"Write a function that accepts two lists of strings and returns the list that has \n  total number of chars in the all strings of the list less than the other list.\n  if the two lists have the same number of chars, return the first list.\n  Examples\n  >>> (total_match [] [])\n  []\n  >>> (total_match [\"hi\" \"admin\"] [\"hI\" \"Hi\"])\n  [\"hI\" \"Hi\"]\n  >>> (total_match [\"hi\" \"admin\"] [\"hi\" \"hi\" \"admin\" \"project\"])\n  [\"hi\" \"admin\"]\n  >>> (total_match [\"hi\" \"admin\"] [\"hI\" \"hi\" \"hi\"])\n  [\"hI\" \"hi\" \"hi\"]\n  >>> (total_match [\"4\"] [\"1\" \"2\" \"3\" \"4\" \"5\"])\n  [\"4\"]\"\n  [lst1 lst2]\n  >>> (total_match [\"hi\" \"admin\"] [\"hi\" \"hi\" \"admin\" \"project\"])\n  [\"hi\" \"admin\"]\n  >>> (total_match [\"hi\" \"admin\"] [\"hi\" \"hi\" \"hi\"])\n  [\"hi\" \"hi\"]\n  >>> (total_match [\"hi\" \"admin\"] [\"hI\" \"hi\" \"hi\"])\n  [\"hI\" \"hi\" \"hi\"]\n  >>> (total_match [\"hi\" \"admin\"] [\"hi\" \"hi\" \"admin\" \"project\"])\n  [\"hi\" \"admin\"]\n  >>> (total_match [\"hi\" \"admin\"] [\"hI\" \"hi\" \"hi\"])\n  [\"hI\" \"hi\" \"hi\"]\n  >>> (total_match [\"hi\" \"admin\"] [\"hi\" \"hi\" \"admin\" \"project\"])\n  [\"hi\" \"admin\"]\n  >>> (total_match [\"hi\" \"admin\"] [\"hI\" \"hi\" \"hi\"])\n  [\"hI\" \"hi\" \"hi\"]\n  >>> (total_match [\"hi\" \"admin\"] [\"hi\" \"hi\" \"admin\" \"project\"])\n  [\"hi\" \"admin\"]\n  >>> (total_match [\"hi\" \"admin\"] [\"hI\" \"hi\" \"hi\"])\n  [\"hI\" \""], ["(defn is_multiply_prime\n  \"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100. \n  Example:\n  >>> (is_multiply_prime 30)\n  true\n  30 = 2 * 3 * 5\"\n  [a]\n  [b]\n  [c]\n  [d]\n  [e]\n  [f]\n  [g]\n  [h]\n  [i]\n  [j]\n  [k]\n  [l]\n  [m]\n  [n]\n  [o]\n  [p]\n  [q]\n  [r]\n  [s]\n  [t]\n  [u]\n  [v]\n  [w]\n  [x]\n  [y]\n  [z]\n  [a]\n  [b]\n  [c]\n  [d]\n  [e]\n  [f]\n  [g]\n  [h]\n  [i]\n  [j]\n  [k]\n  [l]\n  [m]\n  [n]\n  [o]\n  [p]\n  [q]\n  [r]\n  [s]\n  [t]\n  [u]\n  [v]\n  [w]\n  [x]\n  [y]\n  [z]\n  [a]\n  [b]\n  [c]\n  [d]\n  [e]\n  [f]\n  [g]\n  [h]\n  [i]\n  [j]\n  [k]\n  [l]\n  [m]\n  [n]\n  [o]\n  [p]\n  [q]\n  [r]\n  [s]\n  [t]\n  [u]\n  [v]\n  [w]\n  [x]\n  [y]\n  [z]\n  [a]\n  [b]\n  [c]\n  [d]\n  [e]\n  [f]\n  [g"], ["(defn is_simple_power\n  \"Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  >>> (is_simple_power 1 4)\n  true\n  >>> (is_simple_power 2 2)\n  true\n  >>> (is_simple_power 8 2)\n  true\n  >>> (is_simple_power 3 2)\n  false\n  >>> (is_simple_power 3 1)\n  false\n  >>> (is_simple_power 5 3)\n  false\"\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n "], ["(defn iscube\n  \"Write a function that takes an integer a and returns true \n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  >>> (iscube 1)\n  true\n  >>> (iscube 2)\n  false\n  >>> (iscube -1)\n  true\n  >>> (iscube 64)\n  true\n  >>> (iscube 0)\n  true\n  >>> (iscube 180)\n  false\"\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n  [a]\n "], ["(defn hex_key\n  \"You have been tasked to write a function that receives \n  a hexadecimal number as a string and counts the number of hexadecimal \n  digits that are primes (prime number, or a prime, is a natural number \n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n  Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n  So you have to determine a number of the following digits: 2, 3, 5, 7, \n  B (=decimal 11), D (=decimal 13).\n  Note: you may assume the input is always correct or empty string, \n  and symbols A,B,C,D,E,F are always uppercase.\n  Examples:\n  >>> (hex_key \"AB\")\n  1\n  >>> (hex_key \"1077E\")\n  2\n  >>> (hex_key \"ABED1A33\")\n  4\n  >>> (hex_key \"123456789ABCDEF0\")\n  6\n  >>> (hex_key \"2020\")\n  2\"\n  [num]\n  >>> (hex_key \"123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF01234567"], ["(defn decimal_to_binary\n  \"You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n  Examples:\n  >>> (decimal_to_binary 15)\n  \"db1111db\"\n  >>> (decimal_to_binary 32)\n  \"db100000db\"\"\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [decimal]\n  [binary]\n  [dec"], ["(defn is_happy\n  \"You are given a string s.\n  Your task is to check if the string is hapclj or not.\n  A string is hapclj if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  >>> (is_happy \"a\")\n  false\n  >>> (is_happy \"aa\")\n  false\n  >>> (is_happy \"abcd\")\n  true\n  >>> (is_happy \"aabb\")\n  false\n  >>> (is_happy \"adb\")\n  true\n  >>> (is_happy \"xyy\")\n  false\"\n  [s]\n  \"\"\"\n  if len(s) < 3:\n    return False\n  for i in range(len(s)-2):\n    if s[i] == s[i+1] == s[i+2]:\n      return False\n  return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["(defn numerical_letter_grade\n  \"It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write \n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A \n          > 3.3                A- \n          > 3.0                B+\n          > 2.7                B \n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+ \n          > 0.7                D \n          > 0.0                D-\n            0.0                E\n  Example:\n  >>> (grade_equation [4.0 3 1.7 2 3.5])\n  [\"A+\" \"B\" \"C-\" \"C\" \"A-\"]\"\n  [grades]\n  >>> (grade_equation [4.0 3 1.7 2 3.5 4.0 3 1.7 2 3.5])\n  [\"A+\" \"B\" \"C-\" \"C\" \"A-\" \"A+\" \"B\" \"C-\" \"C\" \"A-\" \"A+\" \"B\" \"C-\" \"C\" \"A-\" \"A+\" \"B\" \"C-\" \"C\" \"A-\" \"A+\" \"B\" \"C-\" \"C\" \"A-\" \"A+\" \"B\" \"C-\" \"C\" \"A-\" \"A+\" \"B\" \"C-\" \"C\" \"A-\" \"A+\" \"B\" \"C-\" \"C\" \"A-\" \"A+\" \"B\" \"C-\" \"C\" \"A-\" \"A+\" \"B\" \"C-\" \"C\" \"A-\" \"A+\" \"B\" \"C"], ["(defn prime_length\n  \"Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  >>> (prime_length \"Hello\")\n  true\n  >>> (prime_length \"abcdcba\")\n  true\n  >>> (prime_length \"kittens\")\n  true\n  >>> (prime_length \"orange\")\n  false\"\n  [string]\n  \"\"\"\n  def __init__(self, string):\n    self.string = string\n\n  def __call__(self):\n    if len(self.string) == 1:\n      return True\n    for i in range(2, len(self.string)):\n      if self.string[i] == self.string[i-1]:\n        return False\n    return True\n"], ["(defn starts_one_ends\n  \"Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\"\n  [n]\n  (let [digits (loop [i 0]\n                 (if (< i (dec n))\n                   (recur (+ i 1) (inc i))\n                   (recur i (dec i))))\n        count (reduce + (map #(if (zero? (mod % 10)) 1 0) digits)))]\n    count))\n"], ["(defn solve\n  \"Given a positive integer N, return the total sum of its digits in binary.\n  Example\n  >>> (solve 1000)\n  \"1\"\n  >>> (solve 150)\n  \"110\"\n  >>> (solve 147)\n  \"1100\"\n  Variables:\n      @N integer\n           Constraints: 0 \u2264 N \u2264 10000.\n  Output:\n       a string of binary number\"\n  [N]\n  [1000]\n  [110]\n  [1100]\n  [11001]\n  [110010]\n  [1100100]\n  [11001000]\n  [110010000]\n  [1100100000]\n  [11001000000]\n  [110010000000]\n  [1100100000000]\n  [11001000000000]\n  [110010000000000]\n  [1100100000000000]\n  [11001000000000000]\n  [110010000000000000]\n  [1100100000000000000]\n  [11001000000000000000]\n  [110010000000000000000]\n  [1100100000000000000000]\n  [11001000000000000000000]\n  [1100100000000000"], ["(defn add\n  \"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n  Examples:\n  >>> (add [4 2 6 7])\n  2\"\n  [lst]\n  [1, 2, 4, 6, 7]\n  \"\"\"\n  lst = lst.copy()\n  lst.sort()\n  for i in range(len(lst)):\n    if i % 2 == 0:\n      lst.append(lst[i])\n  return lst\n\n\ndef add_even_odd(lst):\n  \"\"\"\n  Given a non-empty list of integers lst, add the even elements that are at odd indices..\n  Examples:\n  >>> (add_even_odd [4 2 6 7])\n  2\n  \"\"\"\n  lst = lst.copy()\n  lst.sort()\n  for i in range(len(lst)):\n    if i % 2 == 0:\n      lst.append(lst[i])\n  return lst\n\n\ndef add_even_odd_reverse(lst):\n  \"\"\"\n  Given a non-empty list of integers lst, add the even elements that are at odd indices..\n  Examples:\n  >>> (add_even_odd_reverse [4 2 6 7])\n  2\n  \"\"\"\n  lst = lst.copy()\n  lst.sort()\n  for i in range(len(lst)):\n    if i % 2 == 0:\n      lst.append(lst[i])\n  return lst\n\n\ndef add_even_odd_reverse_reverse(lst):\n  \"\"\"\n  Given a non-empty list of integers lst, add the even elements that are at odd indices..\n  Examples:\n  >>> (add_even_odd_reverse_reverse [4 2 6 7])\n  2\n  \"\"\"\n  lst = lst.copy()\n  lst.sort()\n  for i in range(len(lst)):\n    if i % 2 == 0:\n      lst.append(lst[i])\n  return lst\n\n\ndef add_even_odd_reverse_reverse_reverse(lst):\n  \"\"\"\n  Given a non"], ["(defn anti_shuffle\n  \"Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n  For example:\n  >>> (anti_shuffle \"Hi\")\n  \"Hi\"\n  >>> (anti_shuffle \"hello\")\n  \"ehllo\"\n  >>> (anti_shuffle \"Hello World!!!\")\n  \"Hello !!!Wdlor\"\"\n  [s]\n  \"\"\"\n  def anti_shuffle(s):\n    words = s.split(\" \")\n    new_words = []\n    for word in words:\n      new_words.append(word.replace(\" \", \" \"))\n    return \" \".join(new_words)\n"], ["(defn get_row\n  \"You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of vectors, [(x1, y1), (x2, y2) ...] such that\n  each vector is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  Examples:\n  >>> (get_row [[1 2 3 4 5 6] [1 2 3 4 1 6] [1 2 3 4 5 1]] 1)\n  [[0 0] [1 4] [1 0] [2 5] [2 0]]\n  >>> (get_row [] 1)\n  []\n  >>> (get_row [[] [1] [1 2 3]] 3)\n  [[2 2]]\"\n  [lst x]\n  \"\"\"\n  if not lst:\n    return []\n  if len(lst) == 1:\n    return [lst[0]]\n  if len(lst) == 2:\n    return [lst[0], lst[1]]\n  if len(lst) == 3:\n    return [lst[0], lst[1], lst[2]]\n  if len(lst) == 4:\n    return [lst[0], lst[1], lst[2], lst[3]]\n  if len(lst) == 5:\n    return [lst[0], lst[1], lst[2], lst[3], lst[4]]\n  if len(lst) == 6:\n    return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5]]\n  if len(lst) == 7:\n    return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6]]\n  if len(lst) == 8:\n    return ["], ["(defn sort_array\n  \"Given a vector of non-negative integers, return a coclj of the given vector after sorting,\n  you will sort the given vector in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n  Note:\n  * don't change the given vector.\n  Examples:\n  >>> (sort_array [])\n  []\n  >>> (sort_array [5])\n  [5]\n  >>> (sort_array [2 4 3 0 1 5])\n  [0 1 2 3 4 5]\n  >>> (sort_array [2 4 3 0 1 5 6])\n  [6 5 4 3 2 1 0]\"\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array]\n  [array"], ["(defn encrypt\n  \"Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  >>> (encrypt \"hi\")\n  \"lm\"\n  >>> (encrypt \"asdfghjkl\")\n  \"ewhjklnop\"\n  >>> (encrypt \"gf\")\n  \"kj\"\n  >>> (encrypt \"et\")\n  \"ix\"\"\n  [s]\n  \"\"\"\n  def encrypt(self, s):\n    return \"\".join(chr(ord(c) + 2) for c in s)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["(defn next_smallest\n  \"You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return nil if there is no such element.\n  >>> (next_smallest [1 2 3 4 5])\n  2\n  >>> (next_smallest [5 1 4 3 2])\n  2\n  >>> (next_smallest [])\n  nil\n  >>> (next_smallest [1 1])\n  nil\"\n  [lst]\n  >>> (next_smallest [1 2 3 4 5 6])\n  2\n  >>> (next_smallest [1 2 3 4 5 6 7])\n  3\n  >>> (next_smallest [1 2 3 4 5 6 7 8])\n  4\n  >>> (next_smallest [1 2 3 4 5 6 7 8 9])\n  5\n  >>> (next_smallest [1 2 3 4 5 6 7 8 9 10])\n  6\n  >>> (next_smallest [1 2 3 4 5 6 7 8 9 10 11])\n  7\n  >>> (next_smallest [1 2 3 4 5 6 7 8 9 10 11 12])\n  8\n  >>> (next_smallest [1 2 3 4 5 6 7 8 9 10 11 12 13])\n  9\n  >>> (next_smallest [1 2 3 4 5 6 7 8 9 10 11 12 13 14])\n  10\n  >>> (next_smallest [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15])\n  11\n  >>> (next_smallest [1 2 3 4 5 6 7 8 9 10"], ["(defn is_bored\n  \"You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n  For example:\n  >>> (is_bored \"Hello world\")\n  0\n  >>> (is_bored \"The sky is blue. The sun is shining. I love this weather\")\n  1\"\n  [S]\n  >>> (is_bored \"I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am bored. I am"], ["(defn any_int\n  \"Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  >>> (any_int 5 2 7)\n  true\n  >>> (any_int 3 2 2)\n  false\n  >>> (any_int 3 -2 1)\n  true\n  >>> (any_int 3.6 -2.2 2)\n  false\"\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y z]\n  [x y"], ["(defn encode\n  \"Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  Examples:\n  >>> (encode \"test\")\n  \"TGST\"\n  >>> (encode \"This is a message\")\n  \"tHKS KS C MGSSCGG\"\"\n  [message]\n  >>> (encode \"This is a message\")\n  \"tHKS KS C MGSSCGG\"\"\n  [message]\n  >>> (encode \"This is a message\")\n  \"tHKS KS C MGSSCGG\"\"\n  [message]\n  >>> (encode \"This is a message\")\n  \"tHKS KS C MGSSCGG\"\"\n  [message]\n  >>> (encode \"This is a message\")\n  \"tHKS KS C MGSSCGG\"\"\n  [message]\n  >>> (encode \"This is a message\")\n  \"tHKS KS C MGSSCGG\"\"\n  [message]\n  >>> (encode \"This is a message\")\n  \"tHKS KS C MGSSCGG\"\"\n  [message]\n  >>> (encode \"This is a message\")\n  \"tHKS KS C MGSSCGG\"\"\n  [message]\n  >>> (encode \"This is a message\")\n  \"tHKS KS C MGSSCGG\"\"\n  [message]\n  >>> (encode \"This is a message\")\n  \"tHKS KS C MGSSCGG\"\"\n  [message]\n  >>> (encode \"This is a message\")\n  \"tHKS KS C MGSSCGG\"\"\n  [message]\n  >>> (encode \"This is a message\")\n  \"tHKS KS C MGSSCGG\"\"\n  [message]\n  >>> (encode \"This is a message\")\n  \"tHKS KS C MGSSCGG\"\"\n  [message]\n  >>> (encode \"This is a message\")\n "], ["(defn skjkasdkd\n  \"You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n  Examples:\n  >>> (skjkasdkd [0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3])\n  10\n  >>> (skjkasdkd [1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1])\n  25\n  >>> (skjkasdkd [1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3])\n  13\n  >>> (skjkasdkd [0 724 32 71 99 32 6 0 5 91 83 0 5 6])\n  11\n  >>> (skjkasdkd [0 81 12 3 1 21])\n  3\n  >>> (skjkasdkd [0 8 1 2 1 7])\n  7\"\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n "], ["(defn check_dict_case\n  \"Given a map, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given map is empty.\n  Examples:\n  >>> (check_dict_case {\"a\" \"apple\" \"b\" \"banana\"})\n  true\n  >>> (check_dict_case {\"a\" \"apple\" \"A\" \"banana\" \"B\" \"banana\"})\n  false\n  >>> (check_dict_case {\"a\" \"apple\" 8 \"banana\" \"a\" \"apple\"})\n  false\n  >>> (check_dict_case {\"Name\" \"John\" \"Age\" \"36\" \"City\" \"Houston\"})\n  false\n  >>> (check_dict_case {\"STATE\" \"NC\" \"ZIP\" \"12345\"})\n  true\"\n  [dict]"], ["(defn count_up_to\n  \"Implement a function that takes an non-negative integer and returns a vector of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  >>> (count_up_to 5)\n  [2 3]\n  >>> (count_up_to 11)\n  [2 3 5 7]\n  >>> (count_up_to 0)\n  []\n  >>> (count_up_to 20)\n  [2 3 5 7 11 13 17 19]\n  >>> (count_up_to 1)\n  []\n  >>> (count_up_to 18)\n  [2 3 5 7 11 13 17]\"\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  ["], ["(defn multiply\n  \"Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  >>> (multiply 148 412)\n  16\n  >>> (multiply 19 28)\n  72\n  >>> (multiply 2020 1851)\n  0\n  >>> (multiply 14 -15)\n  20\"\n  [a b] => [a b]\n  \"\"\"\n  # 1. Check if the input is valid\n  if not (isinstance(a, int) and isinstance(b, int)):\n    raise TypeError(\"Invalid input. Expected integers.\")\n  # 2. Check if the input is positive\n  if a < 0 or b < 0:\n    raise ValueError(\"Invalid input. Negative numbers not allowed.\")\n  # 3. Check if the input is greater than 0\n  if a > b:\n    raise ValueError(\"Invalid input. Negative numbers not allowed.\")\n  # 4. Check if the input is greater than 0\n  if a < 0 or b < 0:\n    raise ValueError(\"Invalid input. Negative numbers not allowed.\")\n  # 5. Check if the input is greater than 0\n  if a < 0 or b < 0:\n    raise ValueError(\"Invalid input. Negative numbers not allowed.\")\n  # 6. Check if the input is greater than 0\n  if a < 0 or b < 0:\n    raise ValueError(\"Invalid input. Negative numbers not allowed.\")\n  # 7. Check if the input is greater than 0\n  if a < 0 or b < 0:\n    raise ValueError(\"Invalid input. Negative numbers not allowed.\")\n  # 8. Check if the input is greater than 0\n  if a < 0 or b < 0:\n    raise ValueError(\"Invalid input. Negative numbers not allowed.\")\n  # 9. Check if the input is greater than 0\n  if a < 0 or b < 0:\n    raise ValueError(\"Invalid input. Negative numbers not allowed.\")\n  # 1"], ["(defn count_upper\n  \"Given a string s, count the number of uppercase vowels in even indices.\n  For example:\n  >>> (count_upper \"aBCdEf\")\n  1\n  >>> (count_upper \"abcdefg\")\n  0\n  >>> (count_upper \"dBBE\")\n  0\"\n  [s]"], ["(defn closest_integer\n  \"Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> (closest_integer \"10\")\n  10\n  >>> (closest_integer \"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\"\n  [value]\n  \"\"\"\n  return int(round(float(value)))\n"], ["(defn make_a_pile\n  \"Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n  Examples:\n  >>> (make_a_pile 3)\n  [3 5 7]\"\n  [n]\n  \"\"\"\n  return [make_a_pile(n) for n in range(1, 1000000)]\n"], ["(defn words_string\n  \"You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return a vector of the words.\n  For example:\n  >>> (words_string \"Hi, my name is John\")\n  [\"Hi\" \"my\" \"name\" \"is\" \"John\"]\n  >>> (words_string \"One, two, three, four, five, six\")\n  [\"One\" \"two\" \"three\" \"four\" \"five\" \"six\"]\"\n  [s]\n  >>> (words_string \"Hello, world!\")\n  [\"Hello\" \"world\"]\n  >>> (words_string \"Hello, world!\")\n  [\"Hello\" \"world\"]\n  >>> (words_string \"Hello, world!\")\n  [\"Hello\" \"world\"]\n  >>> (words_string \"Hello, world!\")\n  [\"Hello\" \"world\"]\n  >>> (words_string \"Hello, world!\")\n  [\"Hello\" \"world\"]\n  >>> (words_string \"Hello, world!\")\n  [\"Hello\" \"world\"]\n  >>> (words_string \"Hello, world!\")\n  [\"Hello\" \"world\"]\n  >>> (words_string \"Hello, world!\")\n  [\"Hello\" \"world\"]\n  >>> (words_string \"Hello, world!\")\n  [\"Hello\" \"world\"]\n  >>> (words_string \"Hello, world!\")\n  [\"Hello\" \"world\"]\n  >>> (words_string \"Hello, world!\")\n  [\"Hello\" \"world\"]\n  >>> (words_string \"Hello, world!\")\n  [\"Hello\" \"world\"]\n  >>> (words_string \"Hello, world!\")\n  [\"Hello\" \"world\"]\n  >>> (words_string \"Hello, world!\")\n  [\"Hello\" \"world\"]\n  >>> (words_string \"Hello, world!\")\n  [\"Hello\" \"world\"]\n  >>> (words_string \"Hello, world!\")\n  [\"Hello\" \"world\"]\n  >>> (words_string \"Hello, world!\")\n  [\"Hello\" \"world\"]\n  >>> (words_string \"Hello, world!\")\n  [\"Hello\" \"world\"]\n  >>> (words_string \""], ["(defn choose_num\n  \"This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n  For example:\n  >>> (choose_num 12 15)\n  14\n  >>> (choose_num 13 12)\n  -1\"\n  [x y]\n  int\n  (define (choose_num x y)\n    (if (<= x y)\n        (if (<= x y)\n            (if (<= x y)\n                (if (<= x y)\n                    (if (<= x y)\n                        (if (<= x y)\n                            (if (<= x y)\n                                (if (<= x y)\n                                    (if (<= x y)\n                                        (if (<= x y)\n                                            (if (<= x y)\n                                                (if (<= x y)\n                                                    (if (<= x y)\n                                                        (if (<= x y)\n                                                            (if (<= x y)\n                                                                (if (<= x y)\n                                                                    (if (<= x y)\n                                                                        (if (<= x y)\n                                                                            (if (<= x y)\n                                                                                (if (<= x y)\n                                                                                    (if (<= x y)\n                                                                                        (if (<= x y)\n                                                                                            (if (<= x y)\n                                                                                                (if (<= x y)\n                                                                                                    (if (<= x y)\n                                                                                                        (if (<= x y)\n                                                                                                            (if (<= x y)\n                                                                                                                (if (<= x y)\n                                                                                                                    (if (<= x y)\n                                                                                                                        (if (<= x y)\n                                                                                                                            (if (<= x y)\n                                                                                                "], ["(defn rounded_avg\n  \"You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  >>> (rounded_avg 1 5)\n  \"0b11\"\n  >>> (rounded_avg 7 5)\n  -1\n  >>> (rounded_avg 10 20)\n  \"0b1111\"\n  >>> (rounded_avg 20 33)\n  \"0b11010\"\"\n  [n m]\n  [1 5]\n  [7 5]\n  [10 20]\n  [20 33]\n  [1 5]\n  [7 5]\n  [10 20]\n  [20 33]\n  [1 5]\n  [7 5]\n  [10 20]\n  [20 33]\n  [1 5]\n  [7 5]\n  [10 20]\n  [20 33]\n  [1 5]\n  [7 5]\n  [10 20]\n  [20 33]\n  [1 5]\n  [7 5]\n  [10 20]\n  [20 33]\n  [1 5]\n  [7 5]\n  [10 20]\n  [20 33]\n  [1 5]\n  [7 5]\n  [10 20]\n  [20 33]\n  [1 5]\n  [7 5]\n  [10 20]\n  [20 33]\n  [1 5]\n  [7 5]\n  [10 20]\n  [20 33]\n  [1 5]\n  [7 5]\n  ["], ["(defn unique_digits\n  \"Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n  Note: Returned list should be sorted in increasing order.\n  For example:\n  >>> (unique_digits [15 33 1422 1])\n  [1 15 33]\n  >>> (unique_digits [152 323 1422 10])\n  []\"\n  [x]\n  (defn unique_digits [x]\n    (sort (filter #(and (not (even? %)) (not (zero? %))) (map #(Integer/parseInt %) x))))\n  )\n"], ["(defn by_length\n  \"Given a vector of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting vector, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n  For example:\n  >>> (by_length [2 1 1 4 5 8 2 3])\n  [\"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\"]\n    If the vector is empty, return an empty vector:\n  >>> (by_length [])\n  []\n    If the vector has any strange number ignore it:\n  >>> (by_length [1 -1 55])\n  [\"One\"]\"\n  [arr]\n  \"\"\"\n  if not arr:\n    return []\n  arr.sort()\n  arr = [str(x) for x in arr]\n  arr = arr[::-1]\n  arr = [x for x in arr if x.isdigit()]\n  arr = [x for x in arr if x.isalpha()]\n  return arr\n"], ["(defn f\n  \" Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  >>> (f 5)\n  [1 2 6 24 15]\"\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n"], ["(defn even_odd_palindrome\n  \"Given a positive integer n, return a vector that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n  Example 1:\n  >>> (even_odd_palindrome 3)\n  [1 2]\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n  Example 2:\n  >>> (even_odd_palindrome 12)\n  [4 6]\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned vector has the number of even and odd integer palindromes respectively.\"\n  [n]\n  >>> (even_odd_palindrome 1000000000)\n  [1000000000 1000000000]\n  >>> (even_odd_palindrome 1000000001)\n  [1000000001 1000000000]\n  >>> (even_odd_palindrome 1000000002)\n  [1000000002 1000000000]\n  >>> (even_odd_palindrome 1000000003)\n  [1000000003 1000000000]\n  >>> (even_odd_palindrome 1000000004)\n  [1000000004 1000000000]\n  >>> (even_odd_palindrome 1000000005)\n  [1000"], ["(defn count_nums\n  \"Write a function count_nums which takes a vector of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> (count_nums [])\n  0\n  >>> (count_nums [-1 11 -11])\n  1\n  >>> (count_nums [1 1 2])\n  3\"\n  [arr]\n  \"\"\"\n  def count_nums(arr):\n    return sum(1 for i in arr if i > 0)\n"], ["(defn move_one_ball\n  \"We have a vector 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the vector will be randomly ordered. Your task is to determine if\n  it is possible to get a vector sorted in non-decreasing order by performing \n  the following operation on the given vector:\n      You are allowed to perform right shift operation any number of times.\n  One right shift operation means shifting all elements of the vector by one\n  position in the right direction. The last element of the vector will be moved to\n  the starting position in the vector i.e. 0th index. \n  If it is possible to obtain the sorted vector by performing the above operation\n  then return true else return false.\n  If the given vector is empty then return true.\n  Note: The given list is guaranteed to have unique elements.\n  For Example:\n  >>> (move_one_ball [3 4 5 1 2])\n  true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given vector.\n  >>> (move_one_ball [3 5 4 1 2])\n  false\n  Explanation:It is not possible to get non-decreasing order for the given\n              vector by performing any number of right shift operations.\"\n  [arr]\n  [3, 4, 5, 1, 2]\n  \"\"\"\n  # 1. Sort the given vector\n  arr.sort()\n  # 2. Check if it is possible to get the sorted vector by performing the above operation\n  return arr == sorted(arr)\n"], ["(defn exchange\n  \"In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  >>> (exchange [1 2 3 4] [1 2 3 4])\n  \"YES\"\n  >>> (exchange [1 2 3 4] [1 5 3 4])\n  \"NO\"\n  It is assumed that the input lists will be non-empty.\"\n  [lst1 lst2]\n  >>> (exchange [1 2 3 4] [1 2 3 4])\n  \"NO\"\n  >>> (exchange [1 2 3 4] [1 2 3 4])\n  \"NO\"\n  >>> (exchange [1 2 3 4] [1 2 3 4])\n  \"NO\"\n  >>> (exchange [1 2 3 4] [1 2 3 4])\n  \"NO\"\n  >>> (exchange [1 2 3 4] [1 2 3 4])\n  \"NO\"\n  >>> (exchange [1 2 3 4] [1 2 3 4])\n  \"NO\"\n  >>> (exchange [1 2 3 4] [1 2 3 4])\n  \"NO\"\n  >>> (exchange [1 2 3 4] [1 2 3 4])\n  \"NO\"\n  >>> (exchange [1 2 3 4] [1 2 3 4])\n  \"NO\"\n  >>> (exchange [1 2 3 4] [1 2 3 4])\n  \"NO\"\n  >>> (exchange [1 2 3 4] [1 2 3 4])\n  \"NO\"\n  >>> (exchange"], ["(defn histogram\n  \"Given a string representing a space separated lowercase letters, return a map\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  Example:\n  >>> (histogram \"a b c\")\n  {\"a\" 1 \"b\" 1 \"c\" 1}\n  >>> (histogram \"a b b a\")\n  {\"a\" 2 \"b\" 2}\n  >>> (histogram \"a b c a b\")\n  {\"a\" 2 \"b\" 2}\n  >>> (histogram \"b b b b a\")\n  {\"b\" 4}\n  >>> (histogram \"\")\n  {}\"\n  [test]\n  (histogram \"a b c\")\n  (histogram \"a b b a\")\n  (histogram \"a b c a b\")\n  (histogram \"a b b a b\")\n  (histogram \"a b c a b c\")\n  (histogram \"a b c a b c a\")\n  (histogram \"a b c a b c a b\")\n  (histogram \"a b c a b c a b c\")\n  (histogram \"a b c a b c a b c a\")\n  (histogram \"a b c a b c a b c a b\")\n  (histogram \"a b c a b c a b c a b c\")\n  (histogram \"a b c a b c a b c a b c a\")\n  (histogram \"a b c a b c a b c a b c a b\")\n  (histogram \"a b c a b c a b c a b c a b c\")\n  (histogram \"a b c a b c a b c a b c a b c a\")\n  (histogram \"a b c a b c a b c a b c a b c a b\")\n  (histogram \"a b c a b c a b c a b c a b c a b c\")\n  (histogram \"a b c a b c a b c a b c a b c a"], ["(defn reverse_delete\n  \"Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a vector containing the result string and true/false for the check.\n  Example\n  >>> (reverse_delete \"abcde\" \"ae\")\n  [\"bcd\" false]\n  >>> (reverse_delete \"abcdef\" \"b\")\n  [\"acdef\" false]\n  >>> (reverse_delete \"abcdedcba\" \"ab\")\n  [\"cdedc\" true]\"\n  [s c]\n  [result]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  [true/false]\n  ["], ["(defn odd_count\n  \"Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n  >>> (odd_count [\"1234567\"])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> (odd_count [\"3\" \"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\" \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\"\n  [lst]\n  >>> (odd_count [\"123456789\"])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> (odd_count [\"123456789\" \"123456789\"])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> (odd_count [\"123456789\" \"123456789\" \"123456789\"])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> (odd_count [\"123456789\" \"123456789\" \"123456789\" \"123456789\"])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> (odd_count [\"123456789\" \"123456789\" \"123456789\" \"123456789\" \"123456789\"])\n  [\"the number of odd elements 4n the str4ng 4 of"], ["(defn minSubArraySum\n  \"Given a vector of integers nums, find the minimum sum of any non-empty sub-vector\n  of nums.\n  Example\n  >>> (minSubArraySum [2 3 4 1 2 4])\n  1\n  >>> (minSubArraySum [-1 -2 -3])\n  -6\"\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n  [nums]\n "], ["(defn max_fill\n  \"You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n  Example 1:\n  >>> (max_fill [[0 0 1 0] [0 1 0 0] [1 1 1 1]] 1)\n  6\n  Example 2:\n  >>> (max_fill [[0 0 1 1] [0 0 0 0] [1 1 1 1] [0 1 1 1]] 2)\n  5\n  Example 3:\n  >>> (max_fill [[0 0 0] [0 0 0]] 5)\n  0\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\"\n  [grid capacity]\n  [0 0 1 0]\n  [0 1 0 0]\n  [1 1 1 1]\n  [0 0 1 1]\n  [0 0 0 0]\n  [1 1 1 1]\n  [0 1 1 1]\n  [0 0 0]\n  [1 1 1]\n  [0 0 1]\n  [0 0 0]\n  [1 1 1]\n  [0 1 1]\n  [0 0 1]\n  [0 0 0]\n  [1 1 1]\n  [0 1 1]\n  [0 0 1]\n  [0 0 0]\n  [1 1 "], ["(defn sort_array\n  \"In this Kata, you have to sort a vector of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n  It must be implemented like this:\n  >>> (sort_array [1 5 2 3 4])\n  [1 2 3 4 5]\n  >>> (sort_array [-2 -3 -4 -5 -6])\n  [-6 -5 -4 -3 -2]\n  >>> (sort_array [1 0 2 3 4])\n  [0 1 2 3 4]\"\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]\n  [arr]"], ["(defn select_words\n  \"Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  >>> (select_words \"Mary had a little lamb\" 4)\n  [\"little\"]\n  >>> (select_words \"Mary had a little lamb\" 3)\n  [\"Mary\" \"lamb\"]\n  >>> (select_words \"simple white space\" 2)\n  []\n  >>> (select_words \"Hello world\" 4)\n  [\"world\"]\n  >>> (select_words \"Uncle sam\" 3)\n  [\"Uncle\"]\"\n  [s n]\n  >>> (select_words \"Hello world\" 3)\n  [\"Hello\", \"world\"]\n  >>> (select_words \"Hello world\" 2)\n  []\n  >>> (select_words \"Hello world\" 4)\n  [\"Hello\", \"world\"]\n  >>> (select_words \"Hello world\" 5)\n  []\n  >>> (select_words \"Hello world\" 6)\n  [\"Hello\", \"world\"]\n  >>> (select_words \"Hello world\" 7)\n  [\"Hello\", \"world\"]\n  >>> (select_words \"Hello world\" 8)\n  [\"Hello\", \"world\"]\n  >>> (select_words \"Hello world\" 9)\n  [\"Hello\", \"world\"]\n  >>> (select_words \"Hello world\" 10)\n  [\"Hello\", \"world\"]\n  >>> (select_words \"Hello world\" 11)\n  [\"Hello\", \"world\"]\n  >>> (select_words \"Hello world\" 12)\n  [\"Hello\", \"world\"]\n  >>> (select_words \"Hello world\" 13)\n  [\"Hello\", \"world\"]\n  >>> (select_words \"Hello world\" 14)\n  [\"Hello\", \"world\"]\n  >>> (select_words \"Hello world\""], ["(defn get_closest_vowel\n  \"You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n  You may assume that the given string contains English letter only.\n  Example:\n  >>> (get_closest_vowel \"yogurt\")\n  \"u\"\n  >>> (get_closest_vowel \"FULL\")\n  \"U\"\n  >>> (get_closest_vowel \"quick\")\n  \"\"\n  >>> (get_closest_vowel \"ab\")\n  \"\"\"\n  [word] = input().split(\" \")\n  vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  for i in range(len(word)):\n    if word[i] in vowels:\n      if i > 0 and word[i-1] in vowels:\n        continue\n      elif i < len(word)-1 and word[i+1] in vowels:\n        continue\n      else:\n        return word[i]\n  return \"\"\n"], ["(defn match_parens\n  \"You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  >>> (match_parens [\"()(\" \")\"])\n  \"Yes\"\n  >>> (match_parens [\")\" \")\"])\n  \"No\"\"\n  [lst]\n  \"\"\"\n  if len(lst) == 0:\n    return \"No\"\n  if len(lst) == 1:\n    return \"Yes\"\n  if lst[0] == lst[1]:\n    return \"Yes\"\n  if lst[0] == \"(\":\n    return \"Yes\"\n  if lst[0] == \")\":\n    return \"Yes\"\n  if lst[0] == \"(\":\n    return \"Yes\"\n  if lst[0] == \"(\":\n    return \"Yes\"\n  if lst[0] == \"(\":\n    return \"Yes\"\n  if lst[0] == \"(\":\n    return \"Yes\"\n  if lst[0] == \"(\":\n    return \"Yes\"\n  if lst[0] == \"(\":\n    return \"Yes\"\n  if lst[0] == \"(\":\n    return \"Yes\"\n  if lst[0] == \"(\":\n    return \"Yes\"\n  if lst[0] == \"(\":\n    return \"Yes\"\n  if lst[0] == \"(\":\n    return \"Yes\"\n  if lst[0] == \"(\":\n    return \"Yes\"\n  if lst[0] == \"(\":\n    return \"Yes\"\n  if lst[0] == \"(\":\n    return \"Yes\"\n  if lst[0] == \"(\":\n    return \""], ["(defn maximum\n  \"Given a vector arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n  Example 1:\n  >>> (maximum [-3 -4 5] 3)\n  [-4 -3 5]\n  Example 2:\n  >>> (maximum [4 -4 4] 2)\n  [4 4]\n  Example 3:\n  >>> (maximum [-3 2 1 2 -1 -2 1] 1)\n  [2]\n  Note:\n      1. The length of the vector will be in the range of [1, 1000].\n      2. The elements in the vector will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\"\n  [arr k]\n  \"\"\"\n  # TODO: implement this\n  pass\n"], ["(defn solution\n  \"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  Examples\n  >>> (solution [5 8 7 1])\n  12\n  >>> (solution [3 3 3 3 3])\n  9\n  >>> (solution [30 13 24 321])\n  0\"\n  [lst]\n  [1]\n  [2]\n  [3]\n  [4]\n  [5]\n  [6]\n  [7]\n  [8]\n  [9]\n  [10]\n  [11]\n  [12]\n  [13]\n  [14]\n  [15]\n  [16]\n  [17]\n  [18]\n  [19]\n  [20]\n  [21]\n  [22]\n  [23]\n  [24]\n  [25]\n  [26]\n  [27]\n  [28]\n  [29]\n  [30]\n  [31]\n  [32]\n  [33]\n  [34]\n  [35]\n  [36]\n  [37]\n  [38]\n  [39]\n  [40]\n  [41]\n  [42]\n  [43]\n  [44]\n  [45]\n  [46]\n  [47]\n  [48]\n  [49]\n  [50]\n  [51]\n  [52]\n  [53]\n  [54]\n  [55]\n  [56]\n  [57]\n  [58]\n  [59]\n  [60]\n  [61]\n  [62]\n  [63]\n  [64]\n  [65]\n  [66]\n  [67]\n  [68]\n  [69]\n  ["], ["(defn add_elements\n  \"Given a non-empty vector of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n  Example:\n  >>> (add_elements [111 21 3 4000 5 6 7 8 9] 4)\n  24\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\"\n  [arr k]\n  \"\"\"\n  # TODO: add docstring\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n  # TODO: add test\n"], ["(defn get_odd_collatz\n  \"Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  >>> (get_odd_collatz 5)\n  [1 5]\"\n  [n] = get_odd_collatz(n)\n  [n] = [1, 5]\n  [n] = [1, 5]\n  [n] = [1, 5]\n  [n] = [1, 5]\n  [n] = [1, 5]\n  [n] = [1, 5]\n  [n] = [1, 5]\n  [n] = [1, 5]\n  [n] = [1, 5]\n  [n] = [1, 5]\n  [n] = [1, 5]\n  [n] = [1, 5]\n  [n] = [1, 5]\n  [n] = [1, 5]\n  [n] = [1, 5]\n  [n] = [1, 5]\n  [n] = [1, 5]\n  [n] = [1, 5]\n  [n] = [1, 5]\n  [n] = [1, 5]\n "], ["(defn valid_date\n  \"You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n  >>> (valid_date \"03-11-2000\")\n  true\n  >>> (valid_date \"15-01-2012\")\n  false\n  >>> (valid_date \"04-0-2040\")\n  false\n  >>> (valid_date \"06-04-2020\")\n  true\n  >>> (valid_date \"06/04/2020\")\n  false\"\n  [date]\n  \"\"\"\n  if len(date) < 1 or len(date) > 31:\n    return False\n  if date[0] == \"-\":\n    date = date[1:]\n  if date[0] == \" \":\n    date = date[1:]\n  if date[0] == \"0\":\n    date = date[1:]\n  if date[0] == \"1\":\n    date = date[1:]\n  if date[0] == \"2\":\n    date = date[1:]\n  if date[0] == \"3\":\n    date = date[1:]\n  if date[0] == \"4\":\n    date = date[1:]\n  if date[0] == \"5\":\n    date = date[1:]\n  if date[0] == \"6\":\n    date = date[1:]\n  if date[0] == \""], ["(defn split_words\n  \"Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  >>> (split_words \"Hello world!\")\n  [\"Hello\" \"world!\"]\n  >>> (split_words \"Hello,world!\")\n  [\"Hello\" \"world!\"]\n  >>> (split_words \"abcdef\")\n  3\"\n  [txt]\n  >>> (split_words \"abcdef\")\n  3\"\n  [txt]\n  >>> (split_words \"abcdef\")\n  3\"\n  [txt]\n  >>> (split_words \"abcdef\")\n  3\"\n  [txt]\n  >>> (split_words \"abcdef\")\n  3\"\n  [txt]\n  >>> (split_words \"abcdef\")\n  3\"\n  [txt]\n  >>> (split_words \"abcdef\")\n  3\"\n  [txt]\n  >>> (split_words \"abcdef\")\n  3\"\n  [txt]\n  >>> (split_words \"abcdef\")\n  3\"\n  [txt]\n  >>> (split_words \"abcdef\")\n  3\"\n  [txt]\n  >>> (split_words \"abcdef\")\n  3\"\n  [txt]\n  >>> (split_words \"abcdef\")\n  3\"\n  [txt]\n  >>> (split_words \"abcdef\")\n  3\"\n  [txt]\n  >>> (split_words \"abcdef\")\n  3\"\n  [txt]\n  >>> (split_words \"abcdef\")\n  3\"\n  [txt]\n  >>> (split_words \"abcdef\")\n  3\"\n  [txt]\n  >>> (split_words \"abcdef\")\n  3\"\n  [txt]\n  >>> (split_words \"abcdef\")\n  3\"\n  [txt]\n  >>> (split_words \"abcdef\")\n  "], ["(defn is_sorted\n  \"Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  >>> (is_sorted [5])\n  true\n  >>> (is_sorted [1 2 3 4 5])\n  true\n  >>> (is_sorted [1 3 2 4 5])\n  false\n  >>> (is_sorted [1 2 3 4 5 6])\n  true\n  >>> (is_sorted [1 2 3 4 5 6 7])\n  true\n  >>> (is_sorted [1 3 2 4 5 6 7])\n  false\n  >>> (is_sorted [1 2 2 3 3 4])\n  true\n  >>> (is_sorted [1 2 2 2 3 4])\n  false\"\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n "], ["(defn intersection\n  \"You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n  [input/output] samples:\n  >>> (intersection [1 2] [2 3])\n  \"NO\"\n  >>> (intersection [-1 1] [0 4])\n  \"NO\"\n  >>> (intersection [-3 -1] [-5 5])\n  \"YES\"\"\n  [interval1 interval2]\n  >>> (intersection [1 2] [1 2])\n  \"YES\"\n  >>> (intersection [-1 1] [0 4])\n  \"NO\"\n  >>> (intersection [-3 -1] [-5 5])\n  \"NO\"\n  >>> (intersection [1 2] [1 2])\n  \"NO\"\n  >>> (intersection [-1 1] [0 4])\n  \"NO\"\n  >>> (intersection [-3 -1] [-5 5])\n  \"NO\"\n  >>> (intersection [1 2] [1 2])\n  \"NO\"\n  >>> (intersection [-1 1] [0 4])\n  \"NO\"\n  >>> (intersection [-3 -1] [-5 5])\n  \"NO\"\n  >>> (intersection [1 2] [1 2])\n  \"NO\"\n  >>> (intersection [-1 1] [0 4])\n  \"NO\"\n  >>> (intersection [-3"], ["(defn prod_signs\n  \"You are given a vector arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the vector, represented by 1, -1 or 0.\n  Note: return nil for empty arr.\n  Example:\n  >>> (prod_signs [1 2 2 -4])\n  9\n  >>> (prod_signs [0 1])\n  0\n  >>> (prod_signs [])\n  nil\"\n  [arr]\n  \"\"\"\n  if not arr:\n    return None\n  if len(arr) == 1:\n    return arr[0]\n  if len(arr) == 2:\n    return arr[0] * arr[1]\n  if len(arr) == 3:\n    return arr[0] * arr[1] * arr[2]\n  if len(arr) == 4:\n    return arr[0] * arr[1] * arr[2] * arr[3]\n  if len(arr) == 5:\n    return arr[0] * arr[1] * arr[2] * arr[3] * arr[4]\n  if len(arr) == 6:\n    return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5]\n  if len(arr) == 7:\n    return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6]\n  if len(arr) == 8:\n    return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7]\n  if len(arr) == 9:\n    return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8]\n  if len(arr) == 10:\n    return arr[0] * arr[1] * arr[2] *"], ["(defn minPath\n  \"Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n  Examples:    \n  >>> (minPath [[1 2 3] [4 5 6] [7 8 9]] 3)\n  [1 2 1]\n  >>> (minPath [[5 9 3] [4 1 6] [7 8 2]] 1)\n  [1]\"\n  [grid k]\n  >>> (minPath [[1 2 3] [4 5 6] [7 8 9]] 3)\n  [1 2 1]\n  >>> (minPath [[5 9 3] [4 1 6] [7 8 2]] 1)\n  [1]\"\n  \"\"\"\n  def minPath(grid, k):\n    # check if the grid is empty\n"], ["(defn tri\n  \"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  >>> (tri 3)\n  [1 3 2 8]\"\n  [n]\n  \"\"\"\n  def __init__(self, n):\n    self.n = n\n    self.a = [1]\n    self.b = [1, 1]\n    self.c = [1, 1, 1]\n    self.t = 1\n    self.t_a = 1\n    self.t_b = 1\n    self.t_c = 1\n    self.t_a_b = 1\n    self.t_a_c = 1\n    self.t_b_c = 1\n    self.t_a_b_c = 1\n    self.t_a_b_c_d = 1\n    self.t_b_c_d = 1\n    self.t_a_b_c_d_e = 1\n    self.t_b_c_d_e = 1\n    self.t_a_b_c_d_e_f = 1\n    self.t_b_c_d_e_f = 1\n    self.t_"], ["(defn digits\n  \"Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  >>> (digits 1)\n  1\n  >>> (digits 4)\n  0\n  >>> (digits 235)\n  15\"\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n"], ["(defn is_nested\n  \"Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets \n  where at least one bracket in the subsequence is nested.\n  >>> (is_nested \"[[]]\")\n  true\n  >>> (is_nested \"[]]]]]]][[[[[]\")\n  false\n  >>> (is_nested \"[][]\")\n  false\n  >>> (is_nested \"[]\")\n  false\n  >>> (is_nested \"[[][]]\")\n  true\n  >>> (is_nested \"[[]][[\")\n  true\"\n  [string]\n  >>> (is_nested \"[[]][]\")\n  false\n  >>> (is_nested \"[[]][][]\")\n  false\n  >>> (is_nested \"[[]][][][]\")\n  false\n  >>> (is_nested \"[[]][][][][]\")\n  false\n  >>> (is_nested \"[[]][][][][][]\")\n  false\n  >>> (is_nested \"[[]][][][][][][]\")\n  false\n  >>> (is_nested \"[[]][][][][][][][]\")\n  false\n  >>> (is_nested \"[[]][][][][][][][][]\")\n  false\n  >>> (is_nested \"[[]][][][][][][][][][]\")\n  false\n  >>> (is_nested \"[[]][][][][][][][][][][]\")\n  false\n  >>> (is_nested \"[[]][][][][][][][][][][][]\")\n  false\n  >>> (is_nested \"[[]][][][][][][][][][][][][]\")\n  false\n  >>> (is_nested \"[[]][][][][][][][][][][][][][]\")\n  false\n  >>> (is_nested \"[[]][][][][][][][][][][][][][][]\")\n  false\n  >>> (is_nested \"[[]][][][][][][][][][][][][][][][]\")\n  false\n  >>> (is_nested \"[[]][][][][][][][][][][][][][][][][]"], ["(defn sum_squares\n  \"You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  >>> (lst [1.0 2.0 3.0])\n  14\n  >>> (lst [1.0 4.0 9.0])\n  98\n  >>> (lst [1.0 3.0 5.0 7.0])\n  84\n  >>> (lst [1.4 4.2 0.0])\n  29\n  >>> (lst [-2.4 1.0 1.0])\n  6\"\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst]\n  [lst"], ["(defn check_if_last_char_is_a_letter\n  \"Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  >>> (check_if_last_char_is_a_letter \"apple pie\")\n  false\n  >>> (check_if_last_char_is_a_letter \"apple pi e\")\n  true\n  >>> (check_if_last_char_is_a_letter \"apple pi e \")\n  false\n  >>> (check_if_last_char_is_a_letter \"\")\n  false\"\n  [txt]"], ["(defn can_arrange\n  \"Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given vector will not contain\n  duplicate values.\n  Examples:\n  >>> (can_arrange [1 2 4 3 5])\n  3\n  >>> (can_arrange [1 2 3])\n  -1\"\n  [arr]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4 5]\n  [1 2 3 4"], ["(defn largest_smallest_integers\n  \"Create a function that returns a vector (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as nil.\n  Examples:\n  >>> (largest_smallest_integers [2 4 1 3 5 7])\n  [nil 1]\n  >>> (largest_smallest_integers [])\n  [nil nil]\n  >>> (largest_smallest_integers [0])\n  [nil nil]\"\n  [lst]\n  (defun largest-smallest-integers (lst)\n    (let ((a (apply max lst))\n          (b (apply min lst)))\n      (if (null lst)\n        (cons a b)\n        (cons nil b))))\n"], ["(defn compare_one\n  \"Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return nil if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n  >>> (compare_one 1 2.5)\n  2.5\n  >>> (compare_one 1 \"2,3\")\n  \"2,3\"\n  >>> (compare_one \"5,1\" \"6\")\n  \"6\"\n  >>> (compare_one \"1\" 1)\n  nil\"\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b"], ["(defn is_equal_to_sum_even\n  \"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  >>> (is_equal_to_sum_even 4)\n  false\n  >>> (is_equal_to_sum_even 6)\n  false\n  >>> (is_equal_to_sum_even 8)\n  true\"\n  [n]\n  [n]"], ["(defn special_factorial\n  \"The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n  For example:\n  >>> (special_factorial 4)\n  288\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\"\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]\n  [n]"], ["(defn fix_spaces\n  \"Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  >>> (fix_spaces \" Example\")\n  \"Example\"\n  >>> (fix_spaces \" Example 1\")\n  \"Example_1\"\n  >>> (fix_spaces \" Example 2\")\n  \"_Example_2\"\n  >>> (fix_spaces \" Example 3\")\n  \"_Example-3\"\"\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text]\n  [text"], ["(defn file_name_check\n  \"Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  >>> (file_name_check \"example.txt\")\n  \"Yes\"\n  >>> (file_name_check \"1example.dll\")\n  \"No\"\"\n  [file_name]\n  \"\"\"\n  return \"Yes\" if len(name) < 3 else \"No\"\n\n\ndef file_name_check(name: str) -> str:\n  \"\"\"\n  >>> (file_name_check \"example.txt\")\n  \"Yes\"\n  >>> (file_name_check \"1example.dll\")\n  \"No\"\n  [file_name]\n  \"\"\"\n  return \"Yes\" if len(name) < 3 else \"No\"\n\n\ndef file_name_check(name: str) -> str:\n  \"\"\"\n  >>> (file_name_check \"example.txt\")\n  \"Yes\"\n  >>> (file_name_check \"1example.dll\")\n  \"No\"\n  [file_name]\n  \"\"\"\n  return \"Yes\" if len(name) < 3 else \"No\"\n\n\ndef file_name_check(name: str) -> str:\n  \"\"\"\n  >>> (file_name_check \"example.txt\")\n  \"Yes\"\n  >>> (file_name_check \"1example.dll\")\n  \"No\"\n  [file_name]\n  \"\"\"\n  return \"Yes\" if len(name) < 3 else \"No\"\n"], ["(defn sum_squares\n  \"\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  Examples:\n  >>> lst\n  [1 2 3]\n  >>> lst\n  []\n  >>> lst\n  [-1 -5 2 -1 -5]\"\n  [lst]\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4 9]\n  >>> lst\n  [1 4"], ["(defn words_in_sentence\n  \"You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n  Example 1:\n  >>> (words_in_sentence \"This is a test\")\n  \"is\"\n  Example 2:\n  >>> (words_in_sentence \"lets go for swimming\")\n  \"go for\"\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\"\n  [sentence]\n  \"\"\"\n  def words_in_sentence(sentence):\n    words = sentence.split(\" \")\n    return \" \".join(words)\n\n  def prime_numbers(n):\n    return [i for i in range(2, n) if all(i % j != 0 for j in range(2, i))]\n\n  def is_prime(n):\n    if n == 1:\n      return False\n    for i in range(2, int(n ** 0.5) + 1):\n      if n % i == 0:\n        return False\n    return True\n\n  def get_length(sentence):\n    return len(sentence)\n\n  def get_word_length(word):\n    return len(word)\n\n  def get_prime_numbers(sentence):\n    return [i for i in range(2, len(sentence) + 1) if all(i % j != 0 for j in range(2, i))]\n\n  def get_prime_numbers_length(sentence):\n    return len(get_prime_numbers(sentence))\n\n  def get_prime_numbers_length_and_word_length(sentence):\n    return get_prime_numbers_length(sentence), get_word_length(sentence)\n\n  def get_prime_numbers_length_and_word_length_and_length(sentence):\n    return get_prime_numbers_length_and_word_"], ["(defn simplify\n  \"Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n  >>> (simplify \"1/5\" \"5/1\")\n  true\n  >>> (simplify \"1/6\" \"2/1\")\n  false\n  >>> (simplify \"7/10\" \"10/2\")\n  false\"\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  [x n]\n  ["], ["(defn order_by_points\n  \"Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n  For example:\n  >>> (order_by_points [1 11 -1 -11 -12])\n  [-1 -11 1 -12 11]\n  >>> (order_by_points [])\n  []\"\n  [nums]\n  (let* ([nums (map (fn [x] (let* ([sum (reduce + x)]\n                                     (if (> sum 0)\n                                       (if (> (length nums) 1)\n                                         (nth nums (dec (length nums)))\n                                         (nth nums 0))\n                                       (nth nums 0))))\n                                 0\n                                 0))]\n        (sort-by-sum nums)))\n"], ["(defn specialFilter\n  \"Write a function that takes a vector of numbers as input and returns \n  the number of elements in the vector that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  >>> (specialFilter [15 -73 14 -15])\n  1\n  >>> (specialFilter [33 -2 -3 45 21 109])\n  2\"\n  [nums]\n  (defn specialFilter [nums]\n    (let [odd-digits (filter #(= (mod %) 1) (map #(Integer/parseInt %) nums))]\n      (count (filter #(> (first %) 10) odd-digits))))\n\n  (specialFilter [15 -73 14 -15])\n  1\n  (specialFilter [33 -2 -3 45 21 109])\n  2\n  (specialFilter [15 -73 14 -15 33 -2 -3 45 21 109])\n  2\n  (specialFilter [33 -2 -3 45 21 109 15 -73 14 -15])\n  2\n  (specialFilter [33 -2 -3 45 21 109 15 -73 14 -15 33 -2 -3 45 21 109])\n  2\n  (specialFilter [33 -2 -3 45 21 109 15 -73 14 -15 33 -2 -3 45 21 109 15 -73 14 -15 33 -2 -3 45 21 109 15 -73 14 -15 33 -2 -3 45 21 109 15 -73 14 -15 33 -2 -3 45 21 109 15 -73 1"], ["(defn get_max_triples\n  \"    You are given a positive integer n. You have to create an integer vector a of length n.\n  For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n  Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n      and a[i] + a[j] + a[k] is a multiple of 3.\n      Example :\n      >>> (get_max_triples 5)\n      1\n  Explanation: \n  a = [1, 3, 7, 13, 21]\n  The only valid triple is (1, 7, 13).\"\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n = 5\n  [n]\n  n"], ["(defn bf\n  \"There are eight planets in our solar system: the closerst to the Sun \n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2. \n  The function should return a vector containing all planets whose orbits are \n  located between the orbit of planet1 and the orbit of planet2, sorted by \n  the proximity to the sun. \n  The function should return an empty vector if planet1 or planet2\n  are not correct planet names. \n  Examples\n  >>> (bf \"Jupiter\" \"Neptune\")\n  [\"Saturn\" \"Uranus\"]\n  >>> (bf \"Earth\" \"Mercury\")\n  \"Venus\"\n  >>> (bf \"Mercury\" \"Uranus\")\n  [\"Venus\" \"Earth\" \"Mars\" \"Jupiter\" \"Saturn\"]\"\n  [planet1 planet2]\n  >>> (bf \"Mercury\" \"Venus\")\n  [\"Mercury\" \"Venus\"]\n  >>> (bf \"Mercury\" \"Earth\")\n  [\"Mercury\" \"Earth\"]\n  >>> (bf \"Mercury\" \"Mars\")\n  [\"Mercury\" \"Mars\"]\n  >>> (bf \"Mercury\" \"Jupiter\")\n  [\"Mercury\" \"Jupiter\"]\n  >>> (bf \"Mercury\" \"Venus\" \"Earth\")\n  [\"Mercury\" \"Venus\" \"Earth\"]\n  >>> (bf \"Mercury\" \"Venus\" \"Mars\")\n  [\"Mercury\" \"Venus\" \"Mars\"]\n  >>> (bf \"Mercury\" \"Venus\" \"Jupiter\")\n  [\"Mercury\" \"Venus\" \"Jupiter\"]\n  >>> (bf \"Mercury\" \"Venus\" \"Earth\" \"Mars\")\n  [\"Mercury\" \"Venus\" \"Earth\" \"Mars\"]\n  >>> (bf \"Mer"], ["(defn sorted_list_sum\n  \"Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never a vector of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  >>> (list_sort [\"aa\" \"a\" \"aaa\"])\n  [\"aa\"]\n  >>> (list_sort [\"ab\" \"a\" \"aaa\" \"cd\"])\n  [\"ab\" \"cd\"]\"\n  [lst]\n  >>> (list_sort [\"ab\" \"a\" \"aaa\" \"cd\" \"ef\"])\n  [\"ab\" \"cd\" \"ef\"]\"\n  [lst]\n  >>> (list_sort [\"ab\" \"a\" \"aaa\" \"cd\" \"ef\" \"gh\"])\n  [\"ab\" \"cd\" \"ef\" \"gh\"]\"\n  [lst]\n  >>> (list_sort [\"ab\" \"a\" \"aaa\" \"cd\" \"ef\" \"gh\" \"ij\" \"kl\" \"mn\" \"op\" \"qr\" \"st\" \"uv\" \"w\" \"x\" \"y\" \"z\"])\n  [\"ab\" \"cd\" \"ef\" \"gh\" \"ij\" \"kl\" \"mn\" \"op\" \"qr\" \"st\" \"uv\" \"w\" \"x\" \"y\" \"z\"]\"\n  [lst]\n  >>> (list_sort [\"ab\" \"a\" \"aaa\" \"cd\" \"ef\" \"gh\" \"ij\" \"kl\" \"mn\" \"op\" \"qr\" \"st\" \"uv\" \"w\" \"x\" \"y\" \"z\" \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \""], ["(defn x_or_y\n  \"A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n  Examples:\n  >>> (x_or_y 7 34 12)\n  34\n  >>> (x_or_y 15 8 5)\n  5\"\n  [n x y]\n  [n x y]\n  \"\"\"\n  if n % 2 == 0:\n    return n\n  else:\n    return 3 * n + 1\n"], ["(defn double_the_difference\n  \"Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  >>> (double_the_difference [1 3 2 0])\n  10\n  >>> (double_the_difference [-1 -2 0])\n  0\n  >>> (double_the_difference [9 -2])\n  81\n  >>> (double_the_difference [0])\n  0\n  If the input list is empty, return 0.\"\n  [lst]\n  >>> (double_the_difference [])\n  0\n  >>> (double_the_difference [1 2 3])\n  6\n  >>> (double_the_difference [1 2 3 4])\n  12\n  >>> (double_the_difference [1 2 3 4 5])\n  25\n  >>> (double_the_difference [1 2 3 4 5 6])\n  49\n  >>> (double_the_difference [1 2 3 4 5 6 7])\n  98\n  >>> (double_the_difference [1 2 3 4 5 6 7 8])\n  168\n  >>> (double_the_difference [1 2 3 4 5 6 7 8 9])\n  256\n  >>> (double_the_difference [1 2 3 4 5 6 7 8 9 10])\n  384\n  >>> (double_the_difference [1 2 3 4 5 6 7 8 9 10 11])\n  540\n  >>> (double_the_difference [1 2 3 4 5 6 7 8 9 10 11 12])\n  720\n  >>> (double_the_difference [1 2 3 4 5 6 7 8 9 10 11 12 13])\n  96"], ["(defn compare\n  \"I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two vectors of scores and guesses of equal length, where each index shows a match. \n  Return a vector of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  example:\n  >>> (compare [1 2 3 4 5 1] [1 2 3 4 2 -2])\n  [0 0 0 0 3 3]\n  >>> (compare [0 5 0 0 0 4] [4 1 1 0 0 -2])\n  [4 4 1 0 0 6]\"\n  [game guess]\n  [0 0 0 0 3 3]\n  [0 0 0 0 3 3]\n  [0 0 0 0 3 3]\n  [0 0 0 0 3 3]\n  [0 0 0 0 3 3]\n  [0 0 0 0 3 3]\n  [0 0 0 0 3 3]\n  [0 0 0 0 3 3]\n  [0 0 0 0 3 3]\n  [0 0 0 0 3 3]\n  [0 0 0 0 3 3]\n  [0 0 0 0 3 3]\n  [0 0 0 0 3 3]\n  [0 0 0 0 3 3]\n  [0 0 0 0 3 3]\n  [0 0 0 0 3 3]\n  [0 0 0 0 3 3]\n  [0 0 0 0"], ["(defn Strongest_Extension\n  \"You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters \n  in the extension's name, the strength is given by the fraction CAP - SM. \n  You should find the strongest extension and return a string in this \n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n  (its strength is -1).\n  Example:\n  >>> (Strongest_Extension \"my_class\" [\"AA\" \"Be\" \"CC\"])\n  \"my_class.AA\"\"\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n  [class_name extensions]\n "], ["(defn cycpattern_check\n  \"You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  >>> (cycpattern_check \"abcd\" \"abd\")\n  false\n  >>> (cycpattern_check \"hello\" \"ell\")\n  true\n  >>> (cycpattern_check \"whassup\" \"psus\")\n  false\n  >>> (cycpattern_check \"abab\" \"baa\")\n  true\n  >>> (cycpattern_check \"efef\" \"eeff\")\n  false\n  >>> (cycpattern_check \"himenss\" \"simen\")\n  true\"\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  [a b]\n  ["], ["(defn even_odd_count\n  \"Given an integer. return a vector that has the number of even and odd digits respectively.\n  Example:\n      >>> (even_odd_count -12)\n      [1 1]\n      >>> (even_odd_count 123)\n      [1 2]\"\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n  [num]\n "], ["(defn int_to_mini_roman\n  \"Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n  Examples:\n  >>> (int_to_mini_roman 19)\n  \"xix\"\n  >>> (int_to_mini_roman 152)\n  \"clii\"\n  >>> (int_to_mini_roman 426)\n  \"cdxxvi\"\"\n  [number]\n  [roman]\n  [lowercase]\n  >>> (int_to_mini_roman 19)\n  \"xix\"\n  >>> (int_to_mini_roman 152)\n  \"clii\"\n  >>> (int_to_mini_roman 426)\n  \"cdxxvi\"\"\n  [number]\n  [roman]\n  [lowercase]\n  >>> (int_to_mini_roman 19)\n  \"xix\"\n  >>> (int_to_mini_roman 152)\n  \"clii\"\n  >>> (int_to_mini_roman 426)\n  \"cdxxvi\"\"\n  [number]\n  [roman]\n  [lowercase]\n  >>> (int_to_mini_roman 19)\n  \"xix\"\n  >>> (int_to_mini_roman 152)\n  \"clii\"\n  >>> (int_to_mini_roman 426)\n  \"cdxxvi\"\"\n  [number]\n  [roman]\n  [lowercase]\n  >>> (int_to_mini_roman 19)\n  \"xix\"\n  >>> (int_to_mini_roman 152)\n  \"clii\"\n  >>> (int_to_mini_roman 426)\n  \"cdxxvi\"\"\n  [number]\n  [roman]\n  [lowercase]\n  >>> (int_"], ["(defn right_angle_triangle\n  \"Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or \n  90 degree.\n  Example:\n  >>> (right_angle_triangle 3 4 5)\n  true\n  >>> (right_angle_triangle 1 2 3)\n  false\"\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n  [a b c]\n "], ["(defn find_max\n  \"Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n  >>> (find_max [\"name\" \"of\" \"string\"])\n  \"string\"\n  >>> (find_max [\"name\" \"enam\" \"game\"])\n  \"enam\"\n  >>> (find_max [\"aaaaaaa\" \"bb\" \"cc\"])\n  \"aaaaaaa\"\"\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]\n  [words]"], ["(defn eat\n  \"You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return a vector of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  Example:\n  >>> (eat 5 6 10)\n  [11 4]\n  >>> (eat 4 8 9)\n  [12 1]\n  >>> (eat 1 10 10)\n  [11 0]\n  >>> (eat 2 11 5)\n  [7 0]\n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n  Have fun :)\"\n  [number need remaining]\n  def eat(number, need, remaining)\n    if number == 0\n      return [0, remaining]\n    else if need == 0\n      return [number, remaining]\n    else\n      return [number - need, remaining]\n  end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["(defn do_algebra\n  \"Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n  Example:\n  operator['+', '*', '-']\n  vector = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\"\n  [operator operand]\n  \"\"\"\n  if len(operator) != len(operand):\n    raise Exception(\"The length of operator list is equal to the length of operand list minus one.\")\n  if not all(isinstance(x, list) for x in [operator, operand]):\n    raise Exception(\"The list of operator and operand must be a list.\")\n  if not all(isinstance(x, list) for x in [operator, operand]):\n    raise Exception(\"The list of operator and operand must be a list.\")\n  if not all(len(x) == 2 for x in [operator, operand]):\n    raise Exception(\"The length of operator list is equal to the length of operand list minus one.\")\n  if not all(isinstance(x, int) for x in [operator, operand]):\n    raise Exception(\"The list of operator and operand must be a list.\")\n  if not all(x >= 0 for x in [operator, operand]):\n    raise Exception(\"The list of operator and operand must be a list.\")\n  if not all(x >= 0 for x in [operator, operand]):\n    raise Exception(\"The list of operator and operand must be a list.\")\n"], ["(defn solve\n  \"You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  >>> (solve \"1234\")\n  \"4321\"\n  >>> (solve \"ab\")\n  \"AB\"\n  >>> (solve \"#a@C\")\n  \"#A@c\"\"\n  [s]\n  >>> (solve \"1234\")\n  \"1234\"\n  >>> (solve \"ab\")\n  \"ab\"\n  >>> (solve \"#a@C\")\n  \"#a@C\"\n  [s]\n  >>> (solve \"1234\")\n  \"1234\"\n  >>> (solve \"ab\")\n  \"ab\"\n  >>> (solve \"#a@C\")\n  \"#a@C\"\n  [s]\n  >>> (solve \"1234\")\n  \"1234\"\n  >>> (solve \"ab\")\n  \"ab\"\n  >>> (solve \"#a@C\")\n  \"#a@C\"\n  [s]\n  >>> (solve \"1234\")\n  \"1234\"\n  >>> (solve \"ab\")\n  \"ab\"\n  >>> (solve \"#a@C\")\n  \"#a@C\"\n  [s]\n  >>> (solve \"1234\")\n  \"1234\"\n  >>> (solve \"ab\")\n  \"ab\"\n  >>> (solve \"#a@C\")\n  \"#a@C\"\n  [s]\n  >>> (solve \"1234\")\n  \"1234\"\n  >>> (solve \"ab\")\n  \"ab\"\n  >>> (solve \"#a@C\")\n  \"#a@C\"\n  [s]\n  >>> (solve \"1234\")\n  \"1234\"\n  >>> (solve \"ab\")\n  \"ab\"\n  >>> ("], ["(defn string_to_md5\n  \"Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return nil.\n  >>> (string_to_md5 \"Hello world\")\n  \"3e25960a79dbc69b674cd4ec67a72c62\"\"\n  [text]\n  >>> (string_to_md5 \"\")\n  \"0000000000000000000000000000000000000000000000000000000000000000\"\n  [text]\n  >>> (string_to_md5 \"Hello world\")\n  \"3e25960a79dbc69b674cd4ec67a72c62\"\n  [text]\n  >>> (string_to_md5 \"\")\n  \"0000000000000000000000000000000000000000000000000000000000000000\"\n  [text]\n  >>> (string_to_md5 \"Hello world\")\n  \"3e25960a79dbc69b674cd4ec67a72c62\"\n  [text]\n  >>> (string_to_md5 \"\")\n  \"0000000000000000000000000000000000000000000000000000000000000000\"\n  [text]\n  >>> (string_to_md5 \"Hello world\")\n  \"3e25960a79dbc69b674cd4ec67a72c62\"\n  [text]\n  >>> (string_to_md5 \"\")\n  \"0"], ["(defn generate_integers\n  \"Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n  For example:\n  >>> (generate_integers 2 8)\n  [2 4 6 8]\n  >>> (generate_integers 8 2)\n  [2 4 6 8]\n  >>> (generate_integers 10 14)\n  []\"\n  [a b]\n  (defun generate_integers (a b)\n    (let ((a b))\n      (loop for i from a to b\n        (let ((digit (mod (+ i 1) 10)))\n          (when (even? digit)\n            (push digit (generate_integers a (inc i))))))))\n"]]