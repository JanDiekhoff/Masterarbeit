[["#!/bin/bash\n# Check if in given list of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> $(has_close_elements \"1.0 2.0 3.0\" \"0.5\")\n# \"false\"\n# >>> $(has_close_elements \"1.0 2.8 3.0 4.0 5.0 2.0\" \"0.3\")\n# \"true\"\n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n    local nums=\"$1\"\n    local thresh=\"$2\"\n    local result=\"\"\n    for num in $nums; do\n        if [[ $num -lt $thresh ]]; then\n            result=\"$num $num\"\n        fi\n    done\n    if [[ $result -ne \"\" ]]; then\n        echo \"$result\"\n        return 1\n    fi\n    return 0"], ["#!/bin/bash\n# Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n# separate those group into separate strings and return the list of those.\n# Separate groups are balanced (each open brace is properly closed) and not nested within each other\n# Ignore any spaces in the input string.\n# >>> $(separate_paren_groups \"( ) (( )) (( )( ))\")\n# ['\"()\"', '\"(())\"', '\"(()())\"']\n#\n# $1 is a string\nseparate_paren_groups() {\n  local group_list=()\n  local group_string=\"$1\"\n  while [[ $group_string =~ (^|bin/bash\n# Given a positive floating point number, it can be decomposed into\n# and integer part (largest integer smaller than given number) and decimals\n# (leftover part always smaller than 1).\n# Return the decimal part of the number.\n# >>> $(truncate_number \"3.5\")\n# \"0.5\"\n#\n# $1 is a floating point\ntruncate_number() {\n  local num=$1\n  local dec=$((num - int(num)) / 10)\n  return dec"], ["#!/bin/bash\n# You're given a list of deposit and withdrawal operations on a bank account that starts with\n# zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n# at that point function should return true. Otherwise it should return false.\n# >>> $(below_zero \"1 2 3\")\n# \"false\"\n# >>> $(below_zero \"1 2 -4 5\")\n# \"true\"\n#\n# $1 is a space-separated list\nbelow_zero() {\n    local balance\n    local deposit\n    local withdrawal\n    local total\n    local total_deposit\n    local total_withdrawal\n    local total_deposit_deposit\n    local total_deposit_withdrawal\n    local total_withdrawal_deposit\n    local total_withdrawal_withdrawal\n    local balance_deposit\n    local balance_withdrawal\n    local balance_deposit_deposit\n    local balance_deposit_withdrawal\n    local balance_withdrawal_deposit\n    local balance_withdrawal_withdrawal\n    local balance\n    local deposit_deposit\n    local deposit_withdrawal\n    local withdrawal_deposit\n    local withdrawal_withdrawal\n    local withdrawal\n    local deposit_deposit_deposit\n    local deposit_deposit_withdrawal\n    local deposit_withdrawal_deposit\n    local deposit_withdrawal_withdrawal\n    local withdrawal_deposit_deposit\n    local withdrawal_deposit_withdrawal\n    local withdrawal_withdrawal_deposit\n    local withdrawal_withdrawal_withdrawal\n    local total_deposit\n    local total_withdrawal\n    local total_deposit_deposit\n    local total_deposit_withdrawal\n    local total_withdrawal_deposit\n    local total_withdrawal_withdrawal\n    local total_deposit_deposit_deposit\n    local total_deposit_depos"], ["#!/bin/bash\n# For a given list of input numbers, calculate Mean Absolute Deviation\n# around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute difference between each\n# element and a centerpoint (mean in this case):\n# MAD = average | x - x_mean |\n# >>> $(mean_absolute_deviation \"1.0 2.0 3.0 4.0\")\n# \"1.0\"\n#\n# $1 is a space-separated list\nmean_absolute_deviation() {\n  local nums=$1\n  local mean=$2\n  local result=\"\"\n  for num in $nums; do\n    if [[ $num -gt $mean ]] || [[ $num -lt $mean ]]; then\n      result=\"$num\"\n    else\n      result=\"$num - $mean\"\n    fi\n  done\n  echo \"$result\""], ["#!/bin/bash\n# Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n# >>> $(intersperse \"\" \"4\")\n# []\n# >>> $(intersperse \"1 2 3\" \"4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"4\"', '\"3\"']\n#\n# $1 is a space-separated list\n# $2 is an integer\nintersperse() {\n  local delimeter=\"$1\"\n  local nums=\"$(seq 1 $(( $#1 + 1 )))\"\n  for num in $nums; do\n    echo \"$delimeter $num\"\n  done"], ["#!/bin/bash\n# Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n# For each of the group, output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"(()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1 is a string\nparse_nested_parens() {\n    local group_depth=0\n    local group_depth_max=0\n    local group_depth_min=0\n    local group_depth_max_max=0\n    local group_depth_min_max=0\n    local group_depth_max_min=0\n    local group_depth_min_min=0\n    local group_depth_max_max_max=0\n    local group_depth_min_max_max=0\n    local group_depth_max_min_max=0\n    local group_depth_min_min_max=0\n    local group_depth_max_max_min=0\n    local group_depth_min_max_min=0\n    local group_depth_max_min_min=0\n    local group_depth_min_max_min=0\n    local group_depth_max_max_min_max=0\n    local group_depth_min_max_max_max=0\n    local group_depth_max_max_max_max=0\n    local group_depth_min_min_max_max=0\n    local group_depth_max_max_max_min=0\n    local group_depth_min_max_max_min=0\n    local group_depth_max_max_max_min_max=0\n    local group_depth_min_max_max_min_max=0\n    local group_depth_max_max_max_min_max_max=0\n    local group_depth_min_max_max_min_max_min=0\n    local group_depth_max_max_max_min_max_min=0\n    local group_depth_max_"], ["#!/bin/bash\n# For a given list of integers, return a list consisting of a sum and a product of all the integers in a list.\n# Empty sum should be equal to 0 and empty product should be equal to 1.\n# >>> $(sum_product \"\")\n# ['\"0\"', '\"1\"']\n# >>> $(sum_product \"1 2 3 4\")\n# ['\"10\"', '\"24\"']\n#\n# $1 is a space-separated list\nsum_product() {\n  local sum_list=()\n  local product_list=()\n  for ((i=0; i<${#1}; i++)); do\n    local num=$1[${i}]\n    if [ -z \"$num\" ]; then\n      sum_list+=()\n      product_list+=()\n    else\n      sum_list+=(\"${num}\")\n      product_list+=(\"${num}\")\n    fi\n  done\n  sum_list+=(\"\")\n  product_list+=(\"\")\n  return $(join \"${sum_list}\", \"${product_list}\")"], ["#!/bin/bash\n# From a given list of integers, generate a list of rolling maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"', '\"4\"']\n#\n# $1 is a space-separated list\nrolling_max() {\n    local max_val=\"$1\"\n    local max_index=\"$1\"\n    local max_val_list=\"$1\"\n    local max_index_list=\"$1\"\n    local max_val_list_len=$(( $#max_val_list ))\n    local max_index_list_len=$(( $#max_index_list ))\n    local max_val_list_len_minus_1=$(( $#max_val_list_len - 1 ))\n    local max_index_list_len_minus_1=$(( $#max_index_list_len - 1 ))\n    local max_val_list_len_minus_2=$(( $#max_val_list_len - 2 ))\n    local max_index_list_len_minus_2=$(( $#max_index_list_len - 2 ))\n    local max_val_list_len_minus_3=$(( $#max_val_list_len - 3 ))\n    local max_index_list_len_minus_3=$(( $#max_index_list_len - 3 ))\n    local max_val_list_len_minus_4=$(( $#max_val_list_len - 4 ))\n    local max_index_list_len_minus_4=$(( $#max_index_list_len - 4 ))\n    local max_val_list_len_minus_5=$(( $#max_val_list_len - 5 ))\n    local max_index_list_len_minus_5=$(( $#max_index_list_len - 5 ))\n    local max_val_list_len_minus_6=$(( $#max_val_list_len - "], ["#!/bin/bash\n# Find the shortest palindrome that begins with a supplied string.\n# Algorithm idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n# - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n# >>> $(make_palindrome \"\")\n# \"\"\n# >>> $(make_palindrome \"cat\")\n# \"catac\"\n# >>> $(make_palindrome \"cata\")\n# \"catac\"\n#\n# $1 is a string\nmake_palindrome() {\n    local string=\"$1\"\n    local prefix=\"$string\"\n    local suffix=\"$string\"\n    local length=$(length $string)\n    local palindrome=$(cat $string | rev | cut -d' ' -f$length)\n    local prefix_length=$(length $prefix)\n    local suffix_length=$(length $suffix)\n    local prefix_palindrome=$(cat $prefix | rev | cut -d' ' -f$prefix_length)\n    local suffix_palindrome=$(cat $suffix | rev | cut -d' ' -f$suffix_length)\n    local palindrome_length=$(length $palindrome)\n    local palindrome_prefix_length=$(length $palindrome | rev | cut -d' ' -f$palindrome_length)\n    local palindrome_suffix_length=$(length $palindrome | rev | cut -d' ' -f$palindrome_length + 1)\n    local palindrome_prefix_palindrome=$(cat $palindrome | rev | cut -d' ' -f$palindrome_prefix_length)\n    local palindrome_suffix_palindrome=$(cat $palindrome | rev | cut -d' ' -f$palindrome_suffix_length)\n    local palindrome_prefix_length_palindrome_length=$(length $palindrome_prefix_palindrome | rev | cut -d' ' -f$palindrome_length)\n    local palindrome_suffix_length_palindrome_length=$(length $palindrome_suffix"], ["#!/bin/bash\n# Input are two strings a and b consisting only of 1s and 0s.\n# Perform binary XOR on these inputs and return result also as a string.\n# >>> $(string_xor \"010\" \"110\")\n# \"100\"\n#\n# $1 is a string\n# $2 is a string\nstring_xor() {\n  local a=\"$1\"\n  local b=\"$2\"\n  local result=\"$a\"\n  for i in $a $b; do\n    result = \"$result\"\n    if [ \"$i\" = \"1\" ]; then\n      result = \"$result\"\n      result = \"1\"\n    else\n      result = \"$result\"\n      result = \"0\"\n    fi\n  done\n  return $result"], ["#!/bin/bash\n# Out of list of strings, return the longest one. Return the first one in case of multiple\n# strings of the same length. Return None in case the input list is empty.\n# >>> $(longest \"\")\n# \"None\"\n# >>> $(longest \"a b c\")\n# \"a\"\n# >>> $(longest \"a bb ccc\")\n# \"ccc\"\n#\n# $1 is a space-separated list\nlongest() {\n  local -n $1\n  local -n $2\n  local -n $3\n  local -n $4\n  local -n $5\n  local -n $6\n  local -n $7\n  local -n $8\n  local -n $9\n  local -n $10\n  local -n $11\n  local -n $12\n  local -n $13\n  local -n $14\n  local -n $15\n  local -n $16\n  local -n $17\n  local -n $18\n  local -n $19\n  local -n $20\n  local -n $21\n  local -n $22\n  local -n $23\n  local -n $24\n  local -n $25\n  local -n $26\n  local -n $27\n  local -n $28\n  local -n $29\n  local -n $30\n  local -n $31\n  local -n $32\n  local -n $33\n  local -n $34\n  local -n $35\n  local -n $36\n  local -n $37\n  local -n $38\n  local -n $39\n  local -n $40\n  local -n $41\n  local -n $42\n  local -n $43\n  local -n $44\n  local -n $45\n  local -n $46\n  local -n $47\n  local -n $48\n  local -n $49\n  local -n $50\n  local -n $51\n  local -n"], ["#!/bin/bash\n# Return a greatest common divisor of two integers a and b\n# >>> $(greatest_common_divisor \"3\" \"5\")\n# \"1\"\n# >>> $(greatest_common_divisor \"25\" \"15\")\n# \"5\"\n#\n# $1 is an integer\n# $2 is an integer\ngreatest_common_divisor() {\n  local a=$1\n  local b=$2\n  local gcd=$(( $a % $b ))\n  local result=$a\n  while (( $gcd != 0 )) {\n    local temp=$gcd\n    gcd=$(( $a % $temp ))\n    result=$result $temp\n  }\n  return $result"], ["#!/bin/bash\n# Return list of all prefixes from shortest to longest of the input string\n# >>> $(all_prefixes \"abc\")\n# ['\"a\"', '\"ab\"', '\"abc\"']\n#\n# $1 is a string\nall_prefixes() {\n  local prefixes=()\n  for i in $1; do\n    prefixes+=( \"${i}\" )\n  done\n  return $prefixes"], ["#!/bin/bash\n# Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n# >>> $(string_sequence \"0\")\n# \"0\"\n# >>> $(string_sequence \"5\")\n# \"0 1 2 3 4 5\"\n#\n# $1 is an integer\nstring_sequence() {\n    local n=\"$1\"\n    local s=\"$n\"\n    for ((i=0; i<$n; i++)); do\n        echo \"$s\"\n        s=$((s+1))\n    done"], ["#!/bin/bash\n# Given a string, find out how many distinct characters (regardless of case) does it consist of\n# >>> $(count_distinct_characters \"xyzXYZ\")\n# \"3\"\n# >>> $(count_distinct_characters \"Jerry\")\n# \"4\"\n#\n# $1 is a string\ncount_distinct_characters() {\n    local count=0\n    local string=$1\n    for char in $string; do\n        if [[ $char =~ ^[a-z] ]]; then\n            count=$((count + 1))\n        fi\n    done\n    return $count"], ["#!/bin/bash\n# Input to this function is a string representing musical notes in a special ASCII format.\n# Your task is to parse this string and return list of integers corresponding to how many beats does each\n# not last.\n# Here is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o| .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"', '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\nparse_music() {\n    local note_type=\"$1\"\n    local note_value=\"$2\"\n    local note_count=\"$3\"\n    local note_count_str=\"$4\"\n    local note_count_int=\"$5\"\n    local note_count_str_len=\"$6\"\n    local note_count_int_len=\"$7\"\n    local note_count_str_len_int=\"$8\"\n    local note_count_int_len_str=\"$9\"\n    local note_count_str_len_int_str=\"$10\"\n    local note_count_int_str=\"$11\"\n    local note_count_int_str_len=\"$12\"\n    local note_count_int_str_len_int=\"$13\"\n    local note_count_int_str_len_str=\"$14\"\n    local note_count_int_str_len_int_str=\"$15\"\n    local note_count_int_str_len_int_str_str=\"$16\"\n    local note_count_int_str_len_int_str_str_str=\"$17\"\n    local note_count_int_str_len_int_str_str_str_str=\"$18\"\n    local note_count_int_str_len_int_str_str_str_str_str=\"$19\"\n    local note_count_int_str_len_"], ["#!/bin/bash\n# Find how many times a given substring can be found in the original string. Count overlaping cases.\n# >>> $(how_many_times \"\" \"a\")\n# \"0\"\n# >>> $(how_many_times \"aaa\" \"a\")\n# \"3\"\n# >>> $(how_many_times \"aaaa\" \"aa\")\n# \"3\"\n#\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n    local -r string1 string2\n    string1=( \"$1\" )\n    string2=( \"$2\" )\n    local -r count\n    count=( $(seq -f \"%s\" \"$string1\" \"$string2\" | wc -l ) )\n    return $count"], ["#!/bin/bash\n# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n# Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to largest\n# >>> $(sort_numbers \"three one five\")\n# \"one three five\"\n#\n# $1 is a string\nsort_numbers() {\n  local nums=\"$1\"\n  local n=$#nums\n  local sorted_nums=\"\"\n  for ((i=0; i<n; i++)); do\n    if [ \"${nums[$i]}\" -gt 0 ]; then\n      sorted_nums=\"$sorted_nums$nums[$i]\"\n    else\n      break\n    fi\n  done\n  return $sorted_nums"], ["#!/bin/bash\n# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\n# >>> $(find_closest_elements \"1.0 2.0 3.0 4.0 5.0 2.2\")\n# ['\"2.0\"', '\"2.2\"']\n# >>> $(find_closest_elements \"1.0 2.0 3.0 4.0 5.0 2.0\")\n# ['\"2.0\"', '\"2.0\"']\n#\n# $1 is a space-separated list\nfind_closest_elements() {\n    local -a elements\n    local -a elements_sorted\n    local -a elements_sorted_sorted\n    local -a elements_sorted_sorted_sorted\n    local -a elements_sorted_sorted_sorted_sorted_sorted\n    local -a elements_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n    local -a elements_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n    local -a elements_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n    local -a elements_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n    local -a elements_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n    local -a elements_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n    local -a elements_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n    local -a elements_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n    local -a elements_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\n    local -a elements_sorted_sorted_sorted_sorted"], ["#!/bin/bash\n# Given list of numbers (of at least two elements), apply a linear transform to that list,\n# such that the smallest number will become 0 and the largest will become 1\n# >>> $(rescale_to_unit \"1.0 2.0 3.0 4.0 5.0\")\n# ['\"0.0\"', '\"0.25\"', '\"0.5\"', '\"0.75\"', '\"1.0\"']\n#\n# $1 is a space-separated list\nrescale_to_unit() {\n  local rescale_to_unit_args=\"$1\"\n  local rescale_to_unit_args_split=split -l 1 \"$rescale_to_unit_args\"\n  local rescale_to_unit_args_split_split=split -l 2 \"$rescale_to_unit_args_split\"\n  local rescale_to_unit_args_split_split_split=split -l 3 \"$rescale_to_unit_args_split_split\"\n  local rescale_to_unit_args_split_split_split_split=split -l 4 \"$rescale_to_unit_args_split_split_split\"\n  local rescale_to_unit_args_split_split_split_split_split_split=split -l 5 \"$rescale_to_unit_args_split_split_split_split_split\"\n  local rescale_to_unit_args_split_split_split_split_split_split_split_split_split=split -l 6 \"$rescale_to_unit_args_split_split_split_split_split_split_split_split\"\n  local rescale_to_unit_args_split_split_split_split_split_split_split_split_split_split_split_split=split -l 7 \"$rescale_to_unit_args_split_split_split_split_split_split_split_split_split_split\"\n  local rescale_to_unit_args_split_split_split_split_split_split_split_split"], ["#!/bin/bash\n# Filter given list of any shthon values only for integers\n# >>> $(filter_integers \"a 3.14 5\")\n# ['\"5\"']\n# >>> $(filter_integers \"1 2 3 abc  \")\n# ['\"1\"', '\"2\"', '\"3\"']\n#\n# $1 is a space-separated list\nfilter_integers() {\n  local -a $1\n  local -a $2\n  local -a $3\n  local -a $4\n  local -a $5\n  local -a $6\n  local -a $7\n  local -a $8\n  local -a $9\n  local -a $10\n  local -a $11\n  local -a $12\n  local -a $13\n  local -a $14\n  local -a $15\n  local -a $16\n  local -a $17\n  local -a $18\n  local -a $19\n  local -a $20\n  local -a $21\n  local -a $22\n  local -a $23\n  local -a $24\n  local -a $25\n  local -a $26\n  local -a $27\n  local -a $28\n  local -a $29\n  local -a $30\n  local -a $31\n  local -a $32\n  local -a $33\n  local -a $34\n  local -a $35\n  local -a $36\n  local -a $37\n  local -a $38\n  local -a $39\n  local -a $40\n  local -a $41\n  local -a $42\n  local -a $43\n  local -a $44\n  local -a $45\n  local -a $46\n  local -a $47\n  local -a $48\n  local -a $49\n  local -a $50\n  local -a $51\n  local -a $52\n  local -a $53\n"], ["#!/bin/bash\n# Return length of given string\n# >>> $(strlen \"\")\n# \"0\"\n# >>> $(strlen \"abc\")\n# \"3\"\n#\n# $1 is a string\nstrlen() {\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -d \"$1\"\n    local -"], ["#!/bin/bash\n# For a given number n, find the largest number that divides n evenly, smaller than n\n# >>> $(largest_divisor \"15\")\n# \"5\"\n#\n# $1 is an integer\nlargest_divisor() {\n    local n=$1\n    local largest=$2\n    local divisor=$3\n    local remainder=$4\n    local i=$5\n    local j=$6\n    local k=$7\n    local l=$8\n    local m=$9\n    local n=$10\n    local p=$11\n    local q=$12\n    local r=$13\n    local s=$14\n    local t=$15\n    local u=$16\n    local v=$17\n    local w=$18\n    local x=$19\n    local y=$20\n    local z=$21\n    local a=$22\n    local b=$23\n    local c=$24\n    local d=$25\n    local e=$26\n    local f=$27\n    local g=$28\n    local h=$29\n    local i=$30\n    local j=$31\n    local k=$32\n    local l=$33\n    local m=$34\n    local n=$35\n    local p=$36\n    local q=$37\n    local r=$38\n    local s=$39\n    local t=$40\n    local u=$41\n    local v=$42\n    local w=$43\n    local x=$44\n    local y=$45\n    local z=$46\n    local a=$47\n    local b=$48\n    local c=$49\n    local d=$50\n    local e=$51\n    local f=$52\n    local g=$53\n    local h=$54\n    local i=$55\n    local j=$56\n    local k=$57\n    local l=$58\n    local m=$59\n    local n=$60\n    local p=$61\n    local q=$62\n    local r=$63\n    local s=$64\n    local t=$65\n"], ["#!/bin/bash\n# Return list of prime factors of given integer in the order from smallest to largest.\n# Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n# Input number should be equal to the product of all factors\n# >>> $(factorize \"8\")\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\nfactorize() {\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -a $1\n  local -"], ["#!/bin/bash\n# From a list of integers, remove all elements that occur more than once.\n# Keep order of elements left the same as in the input.\n# >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n# $1 is a space-separated list\nremove_duplicates() {\n  local -i \"$1\"\n  local -i \"$2\"\n  local -i \"$3\"\n  local -i \"$4\"\n  local -i \"$5\"\n  local -i \"$6\"\n  local -i \"$7\"\n  local -i \"$8\"\n  local -i \"$9\"\n  local -i \"$10\"\n  local -i \"$11\"\n  local -i \"$12\"\n  local -i \"$13\"\n  local -i \"$14\"\n  local -i \"$15\"\n  local -i \"$16\"\n  local -i \"$17\"\n  local -i \"$18\"\n  local -i \"$19\"\n  local -i \"$20\"\n  local -i \"$21\"\n  local -i \"$22\"\n  local -i \"$23\"\n  local -i \"$24\"\n  local -i \"$25\"\n  local -i \"$26\"\n  local -i \"$27\"\n  local -i \"$28\"\n  local -i \"$29\"\n  local -i \"$30\"\n  local -i \"$31\"\n  local -i \"$32\"\n  local -i \"$33\"\n  local -i \"$34\"\n  local -i \"$35\"\n  local -i \"$36\"\n  local -i \"$37\"\n  local -i \"$38\"\n  local -i \"$39\"\n  local -i \"$40\"\n  local -i \"$41\"\n  local -i \"$42\"\n  local -i \"$43\"\n  local -i \"$44\"\n  local -i \"$45\"\n  local -i \"$46\"\n  local -i \"$47\"\n  local -i \"$48"], ["#!/bin/bash\n# For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n# >>> $(flip_case \"Hello\")\n# \"hELLO\"\n#\n# $1 is a string\nflip_case() {\n  local -i $1\n  local -i $2\n  local -i $3\n  local -i $4\n  local -i $5\n  local -i $6\n  local -i $7\n  local -i $8\n  local -i $9\n  local -i $10\n  local -i $11\n  local -i $12\n  local -i $13\n  local -i $14\n  local -i $15\n  local -i $16\n  local -i $17\n  local -i $18\n  local -i $19\n  local -i $20\n  local -i $21\n  local -i $22\n  local -i $23\n  local -i $24\n  local -i $25\n  local -i $26\n  local -i $27\n  local -i $28\n  local -i $29\n  local -i $30\n  local -i $31\n  local -i $32\n  local -i $33\n  local -i $34\n  local -i $35\n  local -i $36\n  local -i $37\n  local -i $38\n  local -i $39\n  local -i $40\n  local -i $41\n  local -i $42\n  local -i $43\n  local -i $44\n  local -i $45\n  local -i $46\n  local -i $47\n  local -i $48\n  local -i $49\n  local -i $50\n  local -i $51\n  local -i $52\n  local -i $53\n  local -i $54\n  local -i $55\n  local -i $56\n  local -i $57\n  local"], ["#!/bin/bash\n# Concatenate list of strings into a single string\n# >>> $(concatenate \"\")\n# \"\"\n# >>> $(concatenate \"a b c\")\n# \"abc\"\n#\n# $1 is a space-separated list\nconcatenate() {\n  local -a args\n  args=( \"$@\" )\n  if [[ -z \"$1\" ]]; then\n    echo \"Usage: concatenate $1\"\n    exit 1\n  fi\n  for arg in \"${!args[@]}\"; do\n    if [[ -z \"$arg\" ]]; then\n      echo \"Usage: concatenate $1\"\n      exit 1\n    fi\n    if [[ -z \"$arg\" ]]; then\n      echo \"Usage: concatenate $1\"\n      exit 1\n    fi\n    echo \"$arg\"\n  done"], ["#!/bin/bash\n# Return only positive numbers in the list.\n# >>> $(get_positive \"-1 2 -4 5 6\")\n# ['\"2\"', '\"5\"', '\"6\"']\n# >>> $(get_positive \"5 3 -5 2 -3 3 9 0 123 1 -10\")\n# ['\"5\"', '\"3\"', '\"2\"', '\"3\"', '\"9\"', '\"123\"', '\"1\"']\n#\n# $1 is a space-separated list\nget_positive() {\n    local -n $1\n    local -n $2\n    local -n $3\n    local -n $4\n    local -n $5\n    local -n $6\n    local -n $7\n    local -n $8\n    local -n $9\n    local -n $10\n    local -n $11\n    local -n $12\n    local -n $13\n    local -n $14\n    local -n $15\n    local -n $16\n    local -n $17\n    local -n $18\n    local -n $19\n    local -n $20\n    local -n $21\n    local -n $22\n    local -n $23\n    local -n $24\n    local -n $25\n    local -n $26\n    local -n $27\n    local -n $28\n    local -n $29\n    local -n $30\n    local -n $31\n    local -n $32\n    local -n $33\n    local -n $34\n    local -n $35\n    local -n $36\n    local -n $37\n    local -n $38\n    local -n $39\n    local -n $40\n    local -n $41\n    local -n $42\n    local -n $43\n    local -n $44\n    local -n $45\n    local -n $46\n    local -n $47\n    local -n $48\n"], ["#!/bin/bash\n# Return true if a given number is prime, and false otherwise.\n# >>> $(is_prime \"6\")\n# \"false\"\n# >>> $(is_prime \"101\")\n# \"true\"\n# >>> $(is_prime \"11\")\n# \"true\"\n# >>> $(is_prime \"13441\")\n# \"true\"\n# >>> $(is_prime \"61\")\n# \"true\"\n# >>> $(is_prime \"4\")\n# \"false\"\n# >>> $(is_prime \"1\")\n# \"false\"\n#\n# $1 is an integer\nis_prime() {\n  local num=$1\n  if [ $num -eq 0 ]\n  then\n    return 0\n  fi\n  for (( i=2; i<=sqrt($num); i++ )); do\n    if [ $num % $i -eq 0 ]\n    then\n      return 0\n    fi\n  done\n  return 1"], ["#!/bin/bash\n# This function takes a list l and returns a list l' such that\n# l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n# to the values of the corresponding indicies of l, but sorted.\n# >>> $(sort_third \"1 2 3\")\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> $(sort_third \"5 6 3 4 8 9 2\")\n# ['\"2\"', '\"6\"', '\"3\"', '\"4\"', '\"8\"', '\"9\"', '\"5\"']\n#\n# $1 is a space-separated list\nsort_third() {\n  local l=$1\n  local l'=$l\n  local l_len=$((length $l))\n  local l_indices=$((1..$l_len))\n  local l_values=$((1..$l_len))\n  local l_values_sorted=$((1..$l_len))\n  local l_indices_sorted=$((1..$l_len))\n  for ((i=1; i<=$l_len; i++)); do\n    if ((i%3==0)); then\n      l_indices_sorted[$i]=$l_indices[$i]\n    else\n      l_values_sorted[$i]=$l_values[$i]\n    fi\n  done\n  for ((i=1; i<=$l_len; i++)); do\n    if ((i%3==0)); then\n      l_indices_sorted[$i]=$l_indices[$i]\n    else\n      l_values_sorted[$i]=$l_values[$i]\n    fi\n  done\n  for ((i=1; i<=$l_len; i++)); do\n    if ((i%3==0)); then\n      l_indices_sorted[$i]=$l_indices[$i]\n    else\n      l_values_sorted[$i]=$l_values[$i]\n    fi\n  done\n  for ((i=1; i<=$l_len; i++)); do\n    if (("], ["#!/bin/bash\n# Return sorted unique elements in a list\n# >>> $(unique \"5 3 5 2 3 3 9 0 123\")\n# ['\"0\"', '\"2\"', '\"3\"', '\"5\"', '\"9\"', '\"123\"']\n#\n# $1 is a space-separated list\nunique() {\n    local -r $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $"], ["#!/bin/bash\n# Return maximum element in the list.\n# >>> $(max_element \"1 2 3\")\n# \"3\"\n# >>> $(max_element \"5 3 -5 2 -3 3 9 0 123 1 -10\")\n# \"123\"\n#\n# $1 is a space-separated list\nmax_element() {\n  local max_val=\"$1\"\n  local max_idx=\"$1\"\n  local max_val_idx=\"$1\"\n  local max_val_count=\"$1\"\n  local max_val_count_idx=\"$1\"\n  local max_val_count_val=\"$1\"\n  local max_val_count_val_idx=\"$1\"\n  local max_val_count_val_val=\"$1\"\n  local max_val_count_val_val_idx=\"$1\"\n  local max_val_count_val_val_idx_idx=\"$1\"\n  local max_val_count_val_val_idx_val=\"$1\"\n  local max_val_count_val_val_idx_val_idx=\"$1\"\n  local max_val_count_val_val_idx_val_val=\"$1\"\n  local max_val_count_val_val_idx_val_val_idx=\"$1\"\n  local max_val_count_val_val_idx_val_val_idx_idx=\"$1\"\n  local max_val_count_val_val_idx_val_val_idx_val=\"$1\"\n  local max_val_count_val_val_idx_val_val_val=\"$1\"\n  local max_val_count_val_val_idx_val_val_val_idx=\"$1\"\n  local max_val_count_val_val_idx_val_val_val_idx_idx=\"$1\"\n  local max_val_count_val_val_idx_val_val_val_val=\"$1\"\n  local max_val_count_val_val_idx_val_val_val_val_idx=\"$1\"\n  local max_val_count_val_val_idx_val_val_val_val_idx_idx=\"$"], ["#!/bin/bash\n# Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n# >>> $(fizz_buzz \"50\")\n# \"0\"\n# >>> $(fizz_buzz \"78\")\n# \"2\"\n# >>> $(fizz_buzz \"79\")\n# \"3\"\n#\n# $1 is an integer\nfizz_buzz() {\n  local n=$1\n  local fizz=$((n%11))\n  local buzz=$((n%13))\n  if [ $fizz -eq 0 ]\n  then\n    echo \"7\"\n  elif [ $buzz -eq 0 ]\n  then\n    echo \"Fizz\"\n  else\n    echo \"Buzz\"\n  fi"], ["#!/bin/bash\n# This function takes a list l and returns a list l' such that\n# l' is identical to l in the odd indicies, while its values at the even indicies are equal\n# to the values of the even indicies of l, but sorted.\n# >>> $(sort_even \"1 2 3\")\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> $(sort_even \"5 6 3 4\")\n# ['\"3\"', '\"6\"', '\"5\"', '\"4\"']\n#\n# $1 is a space-separated list\nsort_even() {\n    local l=$1\n    local l_len=$((length $l))\n    local l_odd=$((1..$l_len/2))\n    local l_even=$((2..$l_len/2))\n    local l_even_sorted=$((1..$l_len/2))\n    local l_odd_sorted=$((2..$l_len/2))\n    local l_sorted=$((1..$l_len))\n    local l_sorted_even=$((1..$l_len/2))\n    local l_sorted_odd=$((2..$l_len/2))\n    local l_sorted_even_sorted=$((1..$l_len/2))\n    local l_sorted_odd_sorted=$((2..$l_len/2))\n    local l_sorted_even_sorted_sorted=$((1..$l_len/2))\n    local l_sorted_odd_sorted_sorted=$((2..$l_len/2))\n    local l_sorted_even_sorted_sorted_sorted=$((1..$l_len/2))\n    local l_sorted_odd_sorted_sorted_sorted_sorted=$((2..$l_len/2))\n    local l_sorted_even_sorted_sorted_sorted_sorted_sorted=$((1..$l_len/2))\n    local l_sorted_odd_sorted_sorted_sorted_sorted_sorted_sorted=$((2..$l_len/2))\n    local l_sorted_even_sorted_sorted_sorted_sorted_sorted_sorted_sorted=$((3"], ["#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n# \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib() {\n    local n=$1\n    local f=$((n-1))\n    local p=$((n-2))\n    local p_prime=$((n-3))\n    local p_prime_prime=$((n-4))\n    local p_prime_prime_prime=$((n-5))\n    local p_prime_prime_prime_prime=$((n-6))\n    local p_prime_prime_prime_prime_prime_prime=$((n-7))\n    local p_prime_prime_prime_prime_prime_prime_prime_prime=$((n-8))\n    local p_prime_prime_prime_prime_prime_prime_prime_prime_prime=$((n-9))\n    local p_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime=$((n-10))\n    local p_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime=$((n-11))\n    local p_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime=$((n-12))\n    local p_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime=$((n-13))\n    local p_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime=$((n-14))\n    local p_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime=$((n-15))\n    local"], ["#!/bin/bash\n# triples_sum_to_zero takes a list of integers as an input.\n# it returns true if there are three distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> $(triples_sum_to_zero \"1 3 5 0\")\n# \"false\"\n# >>> $(triples_sum_to_zero \"1 3 -2 1\")\n# \"true\"\n# >>> $(triples_sum_to_zero \"1 2 3 7\")\n# \"false\"\n# >>> $(triples_sum_to_zero \"2 4 -5 3 9 7\")\n# \"true\"\n# >>> $(triples_sum_to_zero \"1\")\n# \"false\"\n#\n# $1 is a space-separated list\ntriples_sum_to_zero() {\n  local -i\n  local -a\n  local -r\n  local -z\n  local -w\n  local -x\n  local -y\n  local -z\n  local -t\n  local -s\n  local -v\n  local -u\n  local -o\n  local -c\n  local -d\n  local -e\n  local -f\n  local -g\n  local -h\n  local -i\n  local -j\n  local -k\n  local -l\n  local -m\n  local -n\n  local -o\n  local -p\n  local -q\n  local -r\n  local -s\n  local -t\n  local -u\n  local -v\n  local -w\n  local -x\n  local -y\n  local -z\n  local -z\n  local -z\n  local -z\n  local -z\n  local -z\n  local -z\n  local -z\n  local -z\n  local -z\n  local -z\n  local -z\n  local -z\n  local -z\n  local -z\n  local -z\n  local -z\n  local -z\n  local -z\n  local -z\n  local -z\n  local -z\n  local -z\n  local -z\n  local -z\n  local -z\n"], ["#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long line.\n# n cars are driving left to right;  simultaneously, a different set of n cars\n# are driving right to left.   The two sets of cars start out being very far from\n# each other.  All cars move in the same speed.  Two cars are said to collide\n# when a car that's moving left to right hits a car that's moving right to left.\n# However, the cars are infinitely sturdy and strong; as a result, they continue moving\n# in their trajectory as if they did not collide.\n# This function outputs the number of such collisions.\n#\n# $1 is an integer\ncar_race_collision() {\n  # This is the function that is called by the main function.\n  # The function is called with an integer argument.\n  # The function returns an integer.\n  # The function is called with the following arguments:\n  # 1. The argument is an integer.\n  # 2. The argument is an integer.\n  # 3. The argument is an integer.\n  # 4. The argument is an integer.\n  # 5. The argument is an integer.\n  # 6. The argument is an integer.\n  # 7. The argument is an integer.\n  # 8. The argument is an integer.\n  # 9. The argument is an integer.\n  # 10. The argument is an integer.\n  # 11. The argument is an integer.\n  # 12. The argument is an integer.\n  # 13. The argument is an integer.\n  # 14. The argument is an integer.\n  # 15. The argument is an integer.\n  # 16. The argument is an integer.\n  # 17. The argument is an integer.\n  # 18. The argument is an integer.\n  # 19. The argument is an integer.\n  # 20. The argument is an integer.\n  # 21. The argument is an integer.\n  # 22. The argument is an integer.\n  # 23. The argument is an integer.\n  # "], ["#!/bin/bash\n# Return list with elements incremented by 1.\n# >>> $(incr_list \"1 2 3\")\n# ['\"2\"', '\"3\"', '\"4\"']\n# >>> $(incr_list \"5 3 5 2 3 3 9 0 123\")\n# ['\"6\"', '\"4\"', '\"6\"', '\"3\"', '\"4\"', '\"4\"', '\"10\"', '\"1\"', '\"124\"']\n#\n# $1 is a space-separated list\nincr_list() {\n    local -r $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local -a $1\n    local"], ["#!/bin/bash\n# pairs_sum_to_zero takes a list of integers as an input.\n# it returns true if there are two distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> $(pairs_sum_to_zero \"1 3 5 0\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"1 3 -2 1\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"1 2 3 7\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"2 4 -5 3 5 7\")\n# \"true\"\n# >>> $(pairs_sum_to_zero \"1\")\n# \"false\"\n#\n# $1 is a space-separated list\npairs_sum_to_zero() {\n  local -a pairs\n  local -a pairs_sum\n  local -a pairs_sum_to_zero\n  local -a sum\n  local -a diff\n  local -a diff_sum\n  local -a diff_sum_to_zero\n  local -a diff_sum_to_zero_sum\n  local -a diff_sum_to_zero_sum_to_zero\n  local -a diff_sum_to_zero_sum_to_zero_sum\n  local -a diff_sum_to_zero_sum_to_zero_sum_to_zero\n  local -a diff_sum_to_zero_sum_to_zero_sum_to_zero_sum\n  local -a diff_sum_to_zero_sum_to_zero_sum_to_zero_sum_to_zero\n  local -a diff_sum_to_zero_sum_to_zero_sum_to_zero_sum_to_zero_sum\n  local -a diff_sum_to_zero_sum_to_zero_sum_to_zero_sum_to_zero_sum_to_zero\n  local -a diff_sum_to_zero_sum_to_zero_sum_to_zero_sum_to_zero_sum_to_zero_sum_to_zero\n  local -a diff_sum_to_zero"], ["#!/bin/bash\n# Change numerical base of input number x to base.\n# return string representation after the conversion.\n# base numbers are less than 10.\n# >>> $(change_base \"8\" \"3\")\n# \"22\"\n# >>> $(change_base \"8\" \"2\")\n# \"1000\"\n# >>> $(change_base \"7\" \"2\")\n# \"111\"\n#\n# $1 is an integer\n# $2 is an integer\nchange_base() {\n  local base=$1\n  local num=$2\n  local res=\"\"\n  while [ $num -gt 0 ]\n  do\n    res=\"$res $num%$base\"\n    num=$((num - $num%$base))\n  done\n  return $res"], ["#!/bin/bash\n# Given length of a side and high return area for a triangle.\n# >>> $(triangle_area \"5\" \"3\")\n# \"7.5\"\n#\n# $1 is an integer\n# $2 is an integer\ntriangle_area() {\n  # $1 is an integer\n  # $2 is an integer\n  # $3 is an integer\n  # $4 is an integer\n  # $5 is an integer\n  # $6 is an integer\n  # $7 is an integer\n  # $8 is an integer\n  # $9 is an integer\n  # $10 is an integer\n  # $11 is an integer\n  # $12 is an integer\n  # $13 is an integer\n  # $14 is an integer\n  # $15 is an integer\n  # $16 is an integer\n  # $17 is an integer\n  # $18 is an integer\n  # $19 is an integer\n  # $20 is an integer\n  # $21 is an integer\n  # $22 is an integer\n  # $23 is an integer\n  # $24 is an integer\n  # $25 is an integer\n  # $26 is an integer\n  # $27 is an integer\n  # $28 is an integer\n  # $29 is an integer\n  # $30 is an integer\n  # $31 is an integer\n  # $32 is an integer\n  # $33 is an integer\n  # $34 is an integer\n  # $35 is an integer\n  # $36 is an integer\n  # $37 is an integer\n  # $38 is an integer\n  # $39 is an integer\n  # $40 is an integer\n  # $41 is an integer\n  # $42 is an integer\n  # $43 is an integer\n  # $44 is an integer\n  # $45 is an integer\n  # $46 is an integer\n  # $47 is an integer\n  # $48 is an integer\n  # $49 is an integer\n  # $50 is an integer\n  # $51 is an integer"], ["#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>> $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\nfib4() {\n  local n\n  local fib4\n  local fib4_0\n  local fib4_1\n  local fib4_2\n  local fib4_3\n  local fib4_n\n\n  # Initialize the first 4 numbers\n  fib4_0 = 0\n  fib4_1 = 0\n  fib4_2 = 2\n  fib4_3 = 0\n\n  # Compute the next 4 numbers\n  fib4_n = fib4_0 + fib4_1 + fib4_2 + fib4_3\n\n  # Print the result\n  printf \"%d\\n\" \"$fib4_n\""], ["#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n#\n# $1 is a space-separated list\nmedian() {\n    local -d \"$1\"\n    local -a \"$@\"\n    local -r \"$1\"\n    local -z \"$@\"\n    local -w \"$@\"\n    local -x \"$@\"\n    local -y \"$@\"\n    local -z \"$@\"\n    local -r \"$@\"\n    local -w \"$@\"\n    local -x \"$@\"\n    local -y \"$@\"\n    local -z \"$@\"\n    local -r \"$@\"\n    local -w \"$@\"\n    local -x \"$@\"\n    local -y \"$@\"\n    local -z \"$@\"\n    local -r \"$@\"\n    local -w \"$@\"\n    local -x \"$@\"\n    local -y \"$@\"\n    local -z \"$@\"\n    local -r \"$@\"\n    local -w \"$@\"\n    local -x \"$@\"\n    local -y \"$@\"\n    local -z \"$@\"\n    local -r \"$@\"\n    local -w \"$@\"\n    local -x \"$@\"\n    local -y \"$@\"\n    local -z \"$@\"\n    local -r \"$@\"\n    local -w \"$@\"\n    local -x \"$@\"\n    local -y \"$@\"\n    local -z \"$@\"\n    local -r \"$@\"\n    local -w \"$@\"\n    local -x \"$@\"\n    local -y \"$@\"\n    local -z \"$@\"\n    local -r \"$@\"\n    local -w \"$@\"\n    local -x \"$@\"\n    local -y \"$@\"\n    local -z \"$@\"\n    local -r \"$@\"\n    local -w \"$@\"\n    local -x \"$@\"\n    local -y \"$@\"\n    local -z \"$@\"\n    local -r \"$@\"\n    local -w \"$@\"\n    local -x \"$@\"\n    local -y \"$@\"\n    local -z \"$@\"\n    local -r \"$@\"\n    local -w \"$@\"\n"], ["#!/bin/bash\n# Checks if given string is a palindrome\n# >>> $(is_palindrome \"\")\n# \"true\"\n# >>> $(is_palindrome \"aba\")\n# \"true\"\n# >>> $(is_palindrome \"aaaaa\")\n# \"true\"\n# >>> $(is_palindrome \"zbcd\")\n# \"false\"\n#\n# $1 is a string\nis_palindrome() {\n  local string=$1\n  local length=$(( $#string ))\n  for (( i=0; i<=$length; i++ )); do\n    if [ \"$string\" == \"$string\" ]; then\n      return 1\n    fi\n  done\n  return 0"], ["#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n    local p=$1\n    local n=$2\n    local s=$1\n    local r=$2\n    local m=$3\n    local m1=$4\n    local m2=$5\n    local m3=$6\n    local m4=$7\n    local m5=$8\n    local m6=$9\n    local m7=$10\n    local m8=$11\n    local m9=$12\n    local m10=$13\n    local m11=$14\n    local m12=$15\n    local m13=$16\n    local m14=$17\n    local m15=$18\n    local m16=$19\n    local m17=$20\n    local m18=$21\n    local m19=$22\n    local m20=$23\n    local m21=$24\n    local m22=$25\n    local m23=$26\n    local m24=$27\n    local m25=$28\n    local m26=$29\n    local m27=$30\n    local m28=$31\n    local m29=$32\n    local m30=$33\n    local m31=$34\n    local m32=$35\n    local m33=$36\n    local m34=$37\n    local m35=$38\n    local m36=$39\n    local m37=$40\n    local m38=$41\n    local m39=$42\n    local m40"], ["#!/bin/bash\n# remove_vowels is a function that takes string and returns string without vowels.\n# >>> $(remove_vowels \"\")\n# \"\"\n# >>> $(remove_vowels \"abcdef\")\n# \"bcdf\"\n# >>> $(remove_vowels \"aaaaa\")\n# \"\"\n# >>> $(remove_vowels \"aaBAA\")\n# \"B\"\n# >>> $(remove_vowels \"zbcd\")\n# \"zbcd\"\n#\n# $1 is a string\nremove_vowels() {\n    local string=$1\n    local vowels=(\"a\" \"e\" \"i\" \"o\" \"u\")\n    local vowel_count=0\n    for vowel in \"${vowels[@]}\"; do\n        if [[ $string =~ $vowel ]]; then\n            vowel_count=$((vowel_count+1))\n        fi\n    done\n    if [[ $vowel_count -gt 0 ]]; then\n        echo \"Error: Vowels found in string\"\n        return 1\n    fi\n    echo \"Vowels removed from string\"\n    return 0"], ["#!/bin/bash\n# Return true if all numbers in the list l are below threshold t.\n# >>> $(below_threshold \"1 2 4 10\" \"100\")\n# \"true\"\n# >>> $(below_threshold \"1 20 4 10\" \"5\")\n# \"false\"\n#\n# $1 is a space-separated list\n# $2 is an integer\nbelow_threshold() {\n  local l=$1\n  local t=$2\n  local n=$#l\n  local i=0\n  while [ $i -lt $n ]\n  do\n    if [ $l[i] -ge $t ]\n    then\n      return 1\n    fi\n    i=$((i+1))\n  done\n  return 0"], ["#!/bin/bash\n# Add two numbers x and y\n# >>> $(add \"2\" \"3\")\n# \"5\"\n# >>> $(add \"5\" \"7\")\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\nadd() {\n    local -i \"$1\" \"$2\"\n    local -i \"$1\" \"$2\"\n    if [[ $1 -gt $2 ]]\n    then\n        echo \"$1\"\n    else\n        echo \"$2\"\n    fi"], ["#!/bin/bash\n# Check if two words have the same characters.\n# >>> $(same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n# \"true\"\n# >>> $(same_chars \"abcd\" \"dddddddabc\")\n# \"true\"\n# >>> $(same_chars \"dddddddabc\" \"abcd\")\n# \"true\"\n# >>> $(same_chars \"eabcd\" \"dddddddabc\")\n# \"false\"\n# >>> $(same_chars \"abcd\" \"dddddddabce\")\n# \"false\"\n# >>> $(same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n# \"false\"\n#\n# $1 is a string\n# $2 is a string\nsame_chars() {\n  local -a $1\n  local -a $2\n  local -a $3\n  local -a $4\n  local -a $5\n  local -a $6\n  local -a $7\n  local -a $8\n  local -a $9\n  local -a $10\n  local -a $11\n  local -a $12\n  local -a $13\n  local -a $14\n  local -a $15\n  local -a $16\n  local -a $17\n  local -a $18\n  local -a $19\n  local -a $20\n  local -a $21\n  local -a $22\n  local -a $23\n  local -a $24\n  local -a $25\n  local -a $26\n  local -a $27\n  local -a $28\n  local -a $29\n  local -a $30\n  local -a $31\n  local -a $32\n  local -a $33\n  local -a $34\n  local -a $35\n  local -a $36\n  local -a $37\n  local -a $38\n  local -a $39\n  local -a $40\n  local"], ["#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an integer\nfib() {\n  local n=$1\n  local a=$((1))\n  local b=$((2))\n  while [[ $n -gt 0 ]] ; do\n    a=$((a + b))\n    b=$((b + a))\n    n=$((n - 1))\n  done\n  return $a"], ["#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n#\n# $1 is a string\ncorrect_bracketing() {\n  brackets=\"$1\"\n  brackets_len=$#brackets\n  brackets_open=$((brackets_len-1))\n  brackets_close=$((brackets_len-1))\n  brackets_open_count=$((brackets_open-1))\n  brackets_close_count=$((brackets_close-1))\n  brackets_open_count_str=\"$(($brackets_open_count+1))\"\n  brackets_close_count_str=\"$(($brackets_close_count+1))\"\n  brackets_open_str=\"$(($brackets_open_count+1))\"\n  brackets_close_str=\"$(($brackets_close_count+1))\"\n  brackets_open_str_len=$((brackets_open_str))\n  brackets_close_str_len=$((brackets_close_str))\n  brackets_open_str_count=$((brackets_open_str_len-1))\n  brackets_close_str_count=$((brackets_close_str-1))\n  brackets_open_str_count_str=\"$(($brackets_open_str_count+1))\"\n  brackets_close_str_count_str=\"$(($brackets_close_str_count+1))\"\n  brackets_open_str_count_str_len=$((brackets_open_str_count_str))\n  brackets_close_str_count_str_len=$((brackets_close_str_count_str))\n  brackets_open_str_count_str_len_str=\"$(($brackets_open_str_count_str_len+1))\"\n  brackets_close_str_count_str_len_str=\""], ["#!/bin/bash\n# Return true is list elements are monotonically increasing or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n#\n# $1 is a space-separated list\nmonotonic() {\n    local -a $1\n    local -a $2\n    local -a $3\n    local -a $4\n    local -a $5\n    local -a $6\n    local -a $7\n    local -a $8\n    local -a $9\n    local -a $10\n    local -a $11\n    local -a $12\n    local -a $13\n    local -a $14\n    local -a $15\n    local -a $16\n    local -a $17\n    local -a $18\n    local -a $19\n    local -a $20\n    local -a $21\n    local -a $22\n    local -a $23\n    local -a $24\n    local -a $25\n    local -a $26\n    local -a $27\n    local -a $28\n    local -a $29\n    local -a $30\n    local -a $31\n    local -a $32\n    local -a $33\n    local -a $34\n    local -a $35\n    local -a $36\n    local -a $37\n    local -a $38\n    local -a $39\n    local -a $40\n    local -a $41\n    local -a $42\n    local -a $43\n    local -a $44\n    local -a $45\n    local -a $46\n    local -a $47\n    local -a $48\n    local -a $49\n    local -a $50\n    local -a $51\n    local -a $"], ["#!/bin/bash\n# Return sorted unique common elements for two lists.\n# >>> $(common \"1 4 3 34 653 2 5\" \"5 7 1 5 9 653 121\")\n# ['\"1\"', '\"5\"', '\"653\"']\n# >>> $(common \"5 3 2 8\" \"3 2\")\n# ['\"2\"', '\"3\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncommon() {\n    local a=\"$1\"\n    local b=\"$2\"\n    local c=\"\"\n    local d=\"\"\n    local e=\"\"\n    local f=\"\"\n    local g=\"\"\n    local h=\"\"\n    local i=\"\"\n    local j=\"\"\n    local k=\"\"\n    local l=\"\"\n    local m=\"\"\n    local n=\"\"\n    local o=\"\"\n    local p=\"\"\n    local q=\"\"\n    local r=\"\"\n    local s=\"\"\n    local t=\"\"\n    local u=\"\"\n    local v=\"\"\n    local w=\"\"\n    local x=\"\"\n    local y=\"\"\n    local z=\"\"\n    local a_list=\"\"\n    local b_list=\"\"\n    local c_list=\"\"\n    local d_list=\"\"\n    local e_list=\"\"\n    local f_list=\"\"\n    local g_list=\"\"\n    local h_list=\"\"\n    local i_list=\"\"\n    local j_list=\"\"\n    local k_list=\"\"\n    local l_list=\"\"\n    local m_list=\"\"\n    local n_list=\"\"\n    local o_list=\"\"\n    local p_list=\"\"\n    local q_list=\"\"\n    local r_list=\"\"\n    local s_list=\"\"\n    local t_list=\"\"\n    local u_list=\"\"\n    local v_list=\"\"\n    local w_list=\"\"\n    local x_list=\"\"\n    local y_list=\"\"\n    local z_list=\"\"\n    local a_list_len=\"\"\n    local b_list_len=\"\"\n    local c_list_len=\"\"\n    local d_list_len=\"\"\n    local e_list_len=\"\"\n    local f_list_len=\"\"\n    local g_list_len=\"\""], ["#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local n=$1\n  local max_prime=$(sieve.sh -p $n)\n  local prime=$(sieve.sh -p $n | grep -v \"1\" | awk '{print $1}' | sort | uniq -c)\n  local max_prime_prime=$(sieve.sh -p $max_prime)\n  if [[ $max_prime_prime -gt $prime ]]\n  then\n    return $max_prime_prime\n  fi\n  return $prime"], ["#!/bin/bash\n# sum_to_n is a function that sums numbers from 1 to n.\n# >>> $(sum_to_n \"30\")\n# \"465\"\n# >>> $(sum_to_n \"100\")\n# \"5050\"\n# >>> $(sum_to_n \"5\")\n# \"15\"\n# >>> $(sum_to_n \"10\")\n# \"55\"\n# >>> $(sum_to_n \"1\")\n# \"1\"\n#\n# $1 is an integer\nsum_to_n() {\n  local sum=\"$1\"\n  local n=\"$2\"\n  for (( i=1; i<=n; i++ ))\n  do\n    sum=$((sum + i))\n  done\n  return \"$sum\""], ["#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n#\n# $1 is a string\ncorrect_bracketing() {\n    brackets=\"$1\"\n    brackets_count=0\n    for bracket in $brackets; do\n        if [[ $bracket == \"(\" ]]; then\n            brackets_count=$bracket_count+1\n        elif [[ $bracket == \")\" ]]; then\n            brackets_count=$bracket_count-1\n        fi\n    done\n    if brackets_count == 0; then\n        return true\n    else\n        return false\n    fi"], ["#!/bin/bash\n# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2] * x^2 + ....\n# Return derivative of this polynomial in the same form.\n# >>> $(derivative \"3 1 2 4 5\")\n# ['\"1\"', '\"4\"', '\"12\"', '\"20\"']\n# >>> $(derivative \"1 2 3\")\n# ['\"2\"', '\"6\"']\n#\n# $1 is a space-separated list\nderivative() {\n    local xs\n    local x\n    local y\n    local z\n    local n\n    local p\n    local f\n    local f_name\n    local f_args\n    local f_kwargs\n    local f_result\n    local f_error\n    local f_error_msg\n    local f_error_code\n    local f_error_code_msg\n    local f_error_code_name\n    local f_error_code_msg_name\n    local f_error_code_name_msg\n    local f_error_code_name_msg_name\n    local f_error_code_name_msg_name_msg\n    local f_error_code_name_msg_name_msg_name\n    local f_error_code_name_msg_name_msg_name_msg\n    local f_error_code_name_msg_name_msg_name_msg_name\n    local f_error_code_name_msg_name_msg_name_msg_name_msg\n    local f_error_code_name_msg_name_msg_name_msg_name_msg_name\n    local f_error_code_name_msg_name_msg_name_msg_name_msg_name_msg\n    local f_error_code_name_msg_name_msg_name_msg_name_msg_name_msg_name\n    local f_error_code_name_msg_name_msg_name_msg_name_msg_name_msg_name_msg\n    local f_error_code_name_msg_name_msg_name_msg_name_msg_name_msg_name_"], ["#!/bin/bash\n# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n# >>> $(fibfib \"1\")\n# \"0\"\n# >>> $(fibfib \"5\")\n# \"4\"\n# >>> $(fibfib \"8\")\n# \"24\"\n#\n# $1 is an integer\nfibfib() {\n  local n=$1\n  local fib=0\n  local fib2=0\n  local fib3=0\n  local fib4=0\n  local fib5=0\n  local fib6=0\n  local fib7=0\n  local fib8=0\n  local fib9=0\n  local fib10=0\n  local fib11=0\n  local fib12=0\n  local fib13=0\n  local fib14=0\n  local fib15=0\n  local fib16=0\n  local fib17=0\n  local fib18=0\n  local fib19=0\n  local fib20=0\n  local fib21=0\n  local fib22=0\n  local fib23=0\n  local fib24=0\n  local fib25=0\n  local fib26=0\n  local fib27=0\n  local fib28=0\n  local fib29=0\n  local fib30=0\n  local fib31=0\n  local fib32=0\n  local fib33=0\n  local fib34=0\n  local fib35=0\n  local fib36=0\n  local fib37=0\n  local fib38=0\n  local fib39=0\n  local fib40=0\n  local fib41="], ["#!/bin/bash\n# Write a function vowels_count which takes a string representing\n# a word as input and returns the number of vowels in the string.\n# Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is at the end of the given word.\n# Example:\n# >>> $(vowels_count \"abcde\")\n# \"2\"\n# >>> $(vowels_count \"ACEDY\")\n# \"3\"\n#\n# $1 is a string\nvowels_count() {\n  local vowels=\"aeiou\"\n  local count=0\n  for word in $1; do\n    if [[ $word =~ ^$vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $vowels ]] && [[ $word =~ $v"], ["#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits right by shift\n# and return the result as a string.\n# If shift > number of digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\ncircular_shift() {\n  local shift=$1\n  local num=$2\n  shift=$((shift+1))\n  num=$((num*10))\n  num=$((num%10))\n  shift=$((shift-1))\n  echo $num"], ["#!/bin/bash\n# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> $(digitSum \"\")\n# \"0\"\n# >>> $(digitSum \"abAB\")\n# \"131\"\n# >>> $(digitSum \"abcCd\")\n# \"67\"\n# >>> $(digitSum \"helloE\")\n# \"69\"\n# >>> $(digitSum \"woArBld\")\n# \"131\"\n# >>> $(digitSum \"aAaaaXa\")\n# \"153\"\n#\n# $1 is a string\ndigitSum() {\n    local s=\"$1\"\n    local sum=0\n    for ((i=0; i<32; i++)); do\n        if [[ $s =~ ^[a-zA-Z] ]]; then\n            sum=$((sum+i))\n        fi\n    done\n    return $sum"], ["#!/bin/bash\n# In this task, you will be given a string that represents a number of apples and oranges \n# that are distributed in a basket of fruit this basket contains \n# apples, oranges, and mango fruits. Given the string that represents the total number of \n# the oranges and apples and an integer that represent the total number of the fruits \n# in the basket return the number of the mango fruits in the basket.\n# for examble:\n# >>> $(fruit_distribution \"5 apples and 6 oranges\" \"19\")\n# \"8\"\n# >>> $(fruit_distribution \"0 apples and 1 oranges\" \"3\")\n# \"2\"\n# >>> $(fruit_distribution \"2 apples and 3 oranges\" \"100\")\n# \"95\"\n# >>> $(fruit_distribution \"100 apples and 1 oranges\" \"120\")\n# \"19\"\n#\n# $1 is a string\n# $2 is an integer\nfruit_distribution() {\n  local fruit_distribution_string=\"$1\"\n  local fruit_distribution_integer=\"$2\"\n  local fruit_distribution_string_length=$(( $#fruit_distribution_string ))\n  local fruit_distribution_integer_length=$(( $#fruit_distribution_integer ))\n  local fruit_distribution_string_length_in_fruits=$(( $fruit_distribution_string_length / $fruit_distribution_integer_length ))\n  local fruit_distribution_string_length_in_fruits_modulo=$(( $fruit_distribution_string_length_in_fruits % $fruit_distribution_integer_length ))\n  local fruit_distribution_string_length_in_fruits_modulo_2=$(( $fruit_distribution_string_length_in_fruits_modulo / $fruit_distribution_integer_length ))\n  local fruit_distribution_string_length_in_fruits_modulo_2_modulo=$(( $fruit_distribution_string_length_in_fruits_modulo_2 / $fruit_distribution_integer_length ))\n  local fruit_distribution_string"], ["#!/bin/bash\n# \"Given an array representing a branch of a tree that has non-negative integer nodes\n# your task is to pluck one of the nodes and return it.\n# The plucked node should be the node with the smallest even value.\n# If multiple nodes with the same smallest even value are found return the node that has smallest index.\n# The plucked node should be returned in a list, [ smalest_value, its index ],\n# If there are no even values or the given array is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 3:\n# >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n# so we will choose the first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n  local nodes=()\n  local index=0\n  for ((i=1; i<=#nodes; i++)); do\n    local node=nodes[i]\n    if [ -n \"$node\" ]\n    then\n      index=$((index+1))\n      if [ -n \"$node\" ]\n      then\n        if [ \"$node\" -eq 0 ]\n        then\n          return $(nodes[index])\n        else\n          return $(nodes[index])[0]\n        fi\n      fi\n    fi\n  done\n  return $(nodes[index])"], ["#!/bin/bash\n# You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n# zero, and has a frequency greater than or equal to the value of the integer itself. \n# The frequency of an integer is the number of times it appears in the list.\n# If no such a value exist, return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n# $1 is a space-separated list\nsearch() {\n    local -i\n    local -a list\n    local -i \"1\"\n    local -i \"2\"\n    local -i \"3\"\n    local -i \"4\"\n    local -i \"5\"\n    local -i \"6\"\n    local -i \"7\"\n    local -i \"8\"\n    local -i \"9\"\n    local -i \"10\"\n    local -i \"11\"\n    local -i \"12\"\n    local -i \"13\"\n    local -i \"14\"\n    local -i \"15\"\n    local -i \"16\"\n    local -i \"17\"\n    local -i \"18\"\n    local -i \"19\"\n    local -i \"20\"\n    local -i \"21\"\n    local -i \"22\"\n    local -i \"23\"\n    local -i \"24\"\n    local -i \"25\"\n    local -i \"26\"\n    local -i \"27\"\n    local -i \"28\"\n    local -i \"29\"\n    local -i \"30\"\n    local -i \"31\"\n    local -i \"32\"\n    local -i \"33\"\n    local -i \"34\"\n    local -i \"35\"\n    local -i \"36\"\n    local -i \"37\"\n   "], ["#!/bin/bash\n# Given list of integers, return list in strange order.\n# Strange sorting, is when you start with the minimum value,\n# then maximum of the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local -i $1\n  local -i $2\n  local -i $3\n  local -i $4\n  local -i $5\n  local -i $6\n  local -i $7\n  local -i $8\n  local -i $9\n  local -i $10\n  local -i $11\n  local -i $12\n  local -i $13\n  local -i $14\n  local -i $15\n  local -i $16\n  local -i $17\n  local -i $18\n  local -i $19\n  local -i $20\n  local -i $21\n  local -i $22\n  local -i $23\n  local -i $24\n  local -i $25\n  local -i $26\n  local -i $27\n  local -i $28\n  local -i $29\n  local -i $30\n  local -i $31\n  local -i $32\n  local -i $33\n  local -i $34\n  local -i $35\n  local -i $36\n  local -i $37\n  local -i $38\n  local -i $39\n  local -i $40\n  local -i $41\n  local -i $42\n  local -i $43\n  local -i $44\n  local -"], ["#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return the area of\n# the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any two sides is greater \n# than the third side.\n# Example:\n# >>> $(triangle_area \"3\" \"4\" \"5\")\n# \"6.0\"\n# >>> $(triangle_area \"1\" \"2\" \"10\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\ntriangle_area() {\n  local a b c\n  read -r a b c\n  if (( $a <= $b || $a <= $c || $b <= $c ) && ($a + $b + $c) > 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["#!/bin/bash\n# Write a function that returns true if the object q will fly, and false otherwise.\n# The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>> $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\")\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible weight, and it's balanced.\n#\n# $1 is a space-separated list\n# $2 is an integer\nwill_it_fly() {\n  local q w\n  q=( \"$1\" )\n  w=$2\n  if [ -z \"$q\" ] || [ \"$w\" -gt 0 ]; then\n    return 0\n  fi\n  sum=0\n  for i in $q; do\n    sum=$((sum+i))\n  done\n  if [ $sum -le $w ]; then\n    return 1\n  fi\n  return 0"], ["#!/bin/bash\n# Given an array arr of integers, find the minimum number of elements that\n# need to be changed to make the array palindromic. A palindromic array is an array that\n# is read the same backwards and forwards. In one change, you can change one element to any other element.\n# For example:\n# >>> $(smallest_change \"1 2 3 5 4 7 9 6\")\n# \"4\"\n# >>> $(smallest_change \"1 2 3 4 3 2 2\")\n# \"1\"\n# >>> $(smallest_change \"1 2 3 2 1\")\n# \"0\"\n#\n# $1 is a space-separated list\nsmallest_change() {\n  local arr=\"$1\"\n  local min=\"$2\"\n  local max=\"$3\"\n  local min_index=\"$4\"\n  local max_index=\"$5\"\n  local min_change=\"$6\"\n  local max_change=\"$7\"\n  local min_change_index=\"$8\"\n  local max_change_index=\"$9\"\n  local min_change_index_count=\"$10\"\n  local max_change_index_count=\"$11\"\n  local min_change_index_sum=\"$12\"\n  local max_change_index_sum=\"$13\"\n  local min_change_index_sum_count=\"$14\"\n  local max_change_index_sum_count=\"$15\"\n  local min_change_index_sum_count_index=\"$16\"\n  local max_change_index_sum_count_index=\"$17\"\n  local min_change_index_sum_count_index_sum=\"$18\"\n  local max_change_index_sum_count_index_sum=\"$19\"\n  local min_change_index_sum_count_index_sum_index=\"$20\"\n  local max_change_index_sum_count_index_sum_index_sum=\"$21\"\n  local min_change_index_sum_count_index_sum_index_sum_index=\"$22\"\n  local min_change_index_sum_count_index_sum_index_"], ["#!/bin/bash\n# Write a function that accepts two lists of strings and returns the list that has \n# total number of chars in the all strings of the list less than the other list.\n# if the two lists have the same number of chars, return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n# >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntotal_match() {\n    local a=$1\n    local b=$2\n    local total=$a[0]\n    local count=$a[1]\n    local char_count=$b[0]\n    local char_count_total=$b[1]\n    for ((i=0; i<${#a}; i++)); do\n        if [[ \"${a[i]}\" =~ $1 ]] && [[ \"${b[i]}\" =~ $1 ]]\n        then\n            total=$total-$char_count\n            char_count=$char_count-$char_count_total\n        fi\n    done\n    return $total"], ["#!/bin/bash\n# Write a function that returns true if the given number is the multiplication of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100. \n# Example:\n# >>> $(is_multiply_prime \"30\")\n# \"true\"\n# 30 = 2 * 3 * 5\n#\n# $1 is an integer\nis_multiply_prime() {\n  local num=$1\n  local p=$2\n  local is_prime=$3\n  local is_multiply_prime=$4\n  if [ $num -eq 0 ] ; then\n    return 1\n  fi\n  for ((i=2; i<=sqrt($num); i++)); do\n    if [ $num -eq $i ] ; then\n      is_multiply_prime=$is_multiply_prime && return 1\n    fi\n  done\n  if [ $is_multiply_prime ] ; then\n    return 1\n  fi\n  is_multiply_prime=$is_multiply_prime && return 1\n  is_multiply_prime=$is_multiply_prime && return 1\n  is_multiply_prime=$is_multiply_prime && return 1\n  is_multiply_prime=$is_multiply_prime && return 1\n  is_multiply_prime=$is_multiply_prime && return 1\n  is_multiply_prime=$is_multiply_prime && return 1\n  is_multiply_prime=$is_multiply_prime && return 1\n  is_multiply_prime=$is_multiply_prime && return 1\n  is_multiply_prime=$is_multiply_prime && return 1\n  is_multiply_prime=$is_multiply_prime && return 1\n  is_multiply_prime=$is_multiply_prime && return 1\n  is_multiply_prime=$is_multiply_prime && return 1\n  is_multiply_prime=$is_multiply_prime && return 1\n  is_multiply_prime=$is_multiply_prime && return 1\n  is_multiply_prime=$is_multiply"], ["#!/bin/bash\n# Your task is to write a function that returns true if a number x is a simple\n# power of n and false in other cases.\n# x is a simple power of n if n**int=x\n# For example:\n# >>> $(is_simple_power \"1\" \"4\")\n# \"true\"\n# >>> $(is_simple_power \"2\" \"2\")\n# \"true\"\n# >>> $(is_simple_power \"8\" \"2\")\n# \"true\"\n# >>> $(is_simple_power \"3\" \"2\")\n# \"false\"\n# >>> $(is_simple_power \"3\" \"1\")\n# \"false\"\n# >>> $(is_simple_power \"5\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n# $2 is an integer\nis_simple_power() {\n    local n=$1\n    local x=$2\n    if [ \"$n\" -eq 1 ]; then\n        return \"true\"\n    fi\n    if [ \"$x\" -eq 1 ]; then\n        return \"true\"\n    fi\n    if [ \"$x\" -eq \"$n\" ]; then\n        return \"true\"\n    fi\n    if [ \"$x\" -eq \"$n**2\" ]; then\n        return \"true\"\n    fi\n    if [ \"$x\" -eq \"$n**3\" ]; then\n        return \"true\"\n    fi\n    return \"false\""], ["#!/bin/bash\n# Write a function that takes an integer a and returns true \n# if this ingeger is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n# >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>> $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    local a=$1\n    if [ $a -eq 0 ]\n    then\n        return \"false\"\n    fi\n    if [ $a -eq 1 ]\n    then\n        return \"true\"\n    fi\n    if [ $a -eq 2 ]\n    then\n        return \"false\"\n    fi\n    if [ $a -eq 3 ]\n    then\n        return \"true\"\n    fi\n    if [ $a -eq 4 ]\n    then\n        return \"false\"\n    fi\n    if [ $a -eq 5 ]\n    then\n        return \"true\"\n    fi\n    if [ $a -eq 6 ]\n    then\n        return \"false\"\n    fi\n    if [ $a -eq 7 ]\n    then\n        return \"true\"\n    fi\n    if [ $a -eq 8 ]\n    then\n        return \"false\"\n    fi\n    if [ $a -eq 9 ]\n    then\n        return \"true\"\n    fi\n    if [ $a -eq 10 ]\n    then\n        return \"false\"\n    fi\n    if [ $a -eq 11 ]\n    then\n        return \"true\"\n    fi\n    if [ $a -eq 12 ]\n    then\n        return \"false\"\n    fi\n    if [ $a -eq 13 ]\n    then\n        return \"true\"\n    fi\n    if [ $a -eq 14 ]\n    then\n        return \"false\"\n    fi\n    if"], ["#!/bin/bash\n# You have been tasked to write a function that receives \n# a hexadecimal number as a string and counts the number of hexadecimal \n# digits that are primes (prime number, or a prime, is a natural number \n# greater than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\n#\n# $1 is a string\nhex_key() {\n  local hex_str=$1\n  local hex_num=$1\n  local hex_digits=$1\n  local hex_digits_count=$1\n  local hex_digits_prime=$1\n  local hex_digits_prime_count=$1\n  local hex_digits_prime_prime=$1\n  local hex_digits_prime_prime_count=$1\n  local hex_digits_prime_prime_prime=$1\n  local hex_digits_prime_prime_prime_count=$1\n  local hex_digits_prime_prime_prime_prime=$1\n  local hex_digits_prime_prime_prime_prime_count"], ["#!/bin/bash\n# You will be given a number in decimal form and your task is to convert it to\n# binary format. The function should return a string, with each character representing a binary\n# number. Each character in the string will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n# The extra characters are there to help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an integer\ndecimal_to_binary() {\n    # Declare the variables\n    decimal=$1\n    binary=\"\"\n\n    # Check if the number is a positive integer\n    if [ $decimal -gt 0 ]; then\n        # Convert the number to binary\n        for i in $(seq 0 $decimal); do\n            # Check if the number is even or odd\n            if [ $i -eq $decimal ]; then\n                # If it is even, add '0' to the binary string\n                binary=\"$binary$i\"\n            else\n                # If it is odd, add '1' to the binary string\n                binary=\"$binary$i\"\n            fi\n        done\n    else\n        # If the number is negative, add '-1' to the binary string\n        binary=\"$binary-$decimal\"\n    fi\n\n    # Return the binary string\n    return $binary"], ["#!/bin/bash\n# You are given a string s.\n# Your task is to check if the string is hapsh or not.\n# A string is hapsh if its length is at least 3 and every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy \"a\")\n# \"false\"\n# >>> $(is_happy \"aa\")\n# \"false\"\n# >>> $(is_happy \"abcd\")\n# \"true\"\n# >>> $(is_happy \"aabb\")\n# \"false\"\n# >>> $(is_happy \"adb\")\n# \"true\"\n# >>> $(is_happy \"xyy\")\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  local s=\"$1\"\n  local length=${#s}\n  if [ $length -gt 3 ]; then\n    for i in \"${s// /-}\"\n    do\n      if [ $i -ne $i + 1 ]; then\n        return 1\n      fi\n    done\n    return 0\n  fi\n  for i in \"${s// /-}\"\n  do\n    if [ $i -ne $i + 1 ]; then\n      return 1\n    fi\n  done\n  return 0"], ["#!/bin/bash\n# It is the last week of the semester and the teacher has to give the grades\n# to students. The teacher has been making her own algorithm for grading.\n# The only problem is, she has lost the code she used for grading.\n# She has given you a list of GPAs for some students and you have to write \n# a function that can output a list of letter grades using the following table:\n# GPA       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7                B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7                C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n# >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n  local gpa=$1\n  local letter_grade=$2\n  local letter_grade_list=()\n  for i in $gpa; do\n    if [[ $i -gt 3.7 ]]; then\n      letter_grade_list+=(\"A\")\n    elif [[ $i -gt 3.3 ]]; then\n      letter_grade_list+=(\"A-\")\n    elif [[ $i -gt 2.7 ]]; then\n      letter_grade_list+=(\"B+\")\n    elif [[ $i -gt 2.3 ]]; then\n      letter_grade_list+=(\"B-\")\n    elif [[ $i -gt 2.0 ]]; then\n      letter_grade_list+=(\"C+\")\n    elif [[ $i -gt 1.7 ]]; then\n      letter_grade_list+=(\"C\")\n    elif [[ $i"], ["#!/bin/bash\n# Write a function that takes a string and returns true if the string\n# length is a prime number or false otherwise\n# Examples\n# >>> $(prime_length \"Hello\")\n# \"true\"\n# >>> $(prime_length \"abcdcba\")\n# \"true\"\n# >>> $(prime_length \"kittens\")\n# \"true\"\n# >>> $(prime_length \"orange\")\n# \"false\"\n#\n# $1 is a string\nprime_length() {\n  local string=$1\n  local length=$((string length))\n  local prime=1\n  for ((i=1; i<=length; i++)); do\n    if ((string[i] == ' ') || (string[i] == '.' || string[i] == '!' || string[i] == '?' || string[i] == '(' || string[i] == ')' || string[i] == '{' || string[i] == '}' || string[i] == '[' || string[i] == ']' || string[i] == '\\\\' || string[i] == '|' || string[i] == '^' || string[i] == '+' || string[i] == '-' || string[i] == '*' || string[i] == '/' || string[i] == '(' || string[i] == ')' || string[i] == '!' || string[i] == '?' || string[i] == '(' || string[i] == ')' || string[i] == '{' || string[i] == '}' || string[i] == '[' || string[i] == ']' || string[i] == '\\\\' || string[i] == '|' || string[i] == '^' || string[i] == '+' || string[i] == '-' || string[i] == '*' || string[i] == '/' || string[i] == '(' || string[i] == ')' || string[i] == '!' || string[i] == '?' || string[i] == '(' || string[i] == ')' || string[i] == '{' || string[i] == '}' || string[i] == '[' || string"], ["#!/bin/bash\n# Given a positive integer n, return the count of the numbers of n-digit\n# positive integers that start or end with 1.\n#\n# $1 is an integer\nstarts_one_ends() {\n  local n=$1\n  local s=$((n*10))\n  local e=$((n*10+1))\n  local count=0\n  for ((i=s; i<e; i++)); do\n    if [ $i -eq 1 ]; then\n      count=$((count+1))\n    fi\n  done\n  echo $count"], ["#!/bin/bash\n# Given a positive integer N, return the total sum of its digits in binary.\n# Example\n# >>> $(solve \"1000\")\n# \"1\"\n# >>> $(solve \"150\")\n# \"110\"\n# >>> $(solve \"147\")\n# \"1100\"\n# Variables:\n# @N integer\n# Constraints: 0 \u2264 N \u2264 10000.\n# Output:\n# a string of binary number\n#\n# $1 is an integer\nsolve() {\n    local N=$1\n    local output=\"\"\n    while [ $N -gt 0 ]\n    do\n        output=$(($N % 2))\n        N=$(($N / 2))\n    done\n    echo \"$output\""], ["#!/bin/bash\n# Given a non-empty list of integers lst. add the even elements that are at odd indices..\n# Examples:\n# >>> $(add \"4 2 6 7\")\n# \"2\"\n#\n# $1 is a space-separated list\nadd() {\n  local -a lst\n  local -i \"1\"\n  local -i \"2\"\n  local -i \"3\"\n  local -i \"4\"\n  local -i \"5\"\n  local -i \"6\"\n  local -i \"7\"\n  local -i \"8\"\n  local -i \"9\"\n  local -i \"10\"\n  local -i \"11\"\n  local -i \"12\"\n  local -i \"13\"\n  local -i \"14\"\n  local -i \"15\"\n  local -i \"16\"\n  local -i \"17\"\n  local -i \"18\"\n  local -i \"19\"\n  local -i \"20\"\n  local -i \"21\"\n  local -i \"22\"\n  local -i \"23\"\n  local -i \"24\"\n  local -i \"25\"\n  local -i \"26\"\n  local -i \"27\"\n  local -i \"28\"\n  local -i \"29\"\n  local -i \"30\"\n  local -i \"31\"\n  local -i \"32\"\n  local -i \"33\"\n  local -i \"34\"\n  local -i \"35\"\n  local -i \"36\"\n  local -i \"37\"\n  local -i \"38\"\n  local -i \"39\"\n  local -i \"40\"\n  local -i \"41\"\n  local -i \"42\"\n  local -i \"43\"\n  local -i \"44\"\n  local -i \"45\"\n  local -i \"46\"\n  local -i \"47\"\n  local -i \"48\"\n  local -i \"49\"\n  local -i \""], ["#!/bin/bash\n# Write a function that takes a string and returns an ordered version of it.\n# Ordered version of string, is a string where all words (separated by space)\n# are replaced by a new word where all the characters arranged in\n# ascending order based on ascii value.\n# Note: You should keep the order of words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\nanti_shuffle() {\n  local word_list=$1\n  local word_list_length=$#word_list\n  local word_list_ascii_values=$word_list_length\n  local word_list_ascii_values_sorted=$word_list_length\n  local word_list_ascii_values_sorted_reverse=$word_list_length\n  local word_list_ascii_values_sorted_reverse_reverse=$word_list_length\n  local word_list_ascii_values_sorted_reverse_reverse_reverse=$word_list_length\n  local word_list_ascii_values_sorted_reverse_reverse_reverse_reverse=$word_list_length\n  local word_list_ascii_values_sorted_reverse_reverse_reverse_reverse_reverse=$word_list_length\n  local word_list_ascii_values_sorted_reverse_reverse_reverse_reverse_reverse_reverse=$word_list_length\n  local word_list_ascii_values_sorted_reverse_reverse_reverse_reverse_reverse_reverse_reverse=$word_list_length\n  local word_list_ascii_values_sorted_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse=$word_list_length\n  local word_list_ascii_values_sorted_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse=$word_list_length\n  local word_list_ascii_values_sorted_reverse_reverse_reverse_reverse_reverse_reverse_reverse_"], ["#!/bin/bash\n# You are given a 2 dimensional data, as a nested lists,\n# which is similar to matrix, however, unlike matrices,\n# each row may contain a different number of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return list of lists, [(x1, y1), (x2, y2) ...] such that\n# each list is a coordinate - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending order.\n# Also, sort coordinates of the row by columns in descending order.\n# Examples:\n# >>> $(get_row \"1 2 3 4 5 6\\n1 2 3 4 1 6\\n1 2 3 4 5 1\" \"1\")\n# [['\"0\"', '\"0\"'], ['\"1\"', '\"4\"'], ['\"1\"', '\"0\"'], ['\"2\"', '\"5\"'], ['\"2\"', '\"0\"']]\n# >>> $(get_row \"\" \"1\")\n# []\n# >>> $(get_row \"\\n1\\n1 2 3\" \"3\")\n# [['\"2\"', '\"2\"']]\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nget_row() {\n    local row_list\n    local row_num\n    local row_str\n    local row_num_str\n    local row_num_str_len\n    local row_num_str_len_max\n    local row_num_str_len_min\n    local row_num_str_len_max_min\n    local row_num_str_len_max_min_max\n    local row_num_str_len_max_min_max_min\n    local row_num_str_len_max_min_max_min_max\n    local row_num_str_len_max_min_max_min_max_min\n    local row_num_str_len_max_min_max_min_max_min_max\n    local row_num_str_len_max_min_max_min_max_min"], ["#!/bin/bash\n# Given an array of non-negative integers, return a cosh of the given array after sorting,\n# you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n# or sort it in descending order if the sum( first index value, last index value) is even.\n# Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"', '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local arr=\"$(echo \"$1\" | sed 's/ / /g')\"\n  local arr_sorted=\"$(sort -k1,1 -k2,2n \"$arr\")\"\n  return $arr_sorted"], ["#!/bin/bash\n# Create a function encrypt that takes a string as an argument and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet should be rotated in a manner such that the letters \n# shift down by two multiplied to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n  local alphabet=\"$1\"\n  local shift=$((2*($alphabet[1]-alphabet[0]))/2)\n  local result=\"$alphabet\"\n  for i in \"${alphabet[@]}\"; do\n    result=\"${result}${i:+${shift}}\"\n  done\n  return $result"], ["#!/bin/bash\n# You are given a list of integers.\n# Write a function next_smallest() that returns the 2nd smallest element of the list.\n# Return None if there is no such element.\n# >>> $(next_smallest \"1 2 3 4 5\")\n# \"2\"\n# >>> $(next_smallest \"5 1 4 3 2\")\n# \"2\"\n# >>> $(next_smallest \"\")\n# \"None\"\n# >>> $(next_smallest \"1 1\")\n# \"None\"\n#\n# $1 is a space-separated list\nnext_smallest() {\n  local a=$1\n  local b=$2\n  local c=$3\n  local d=$4\n  local e=$5\n  local f=$6\n  local g=$7\n  local h=$8\n  local i=$9\n  local j=$10\n  local k=$11\n  local l=$12\n  local m=$13\n  local n=$14\n  local o=$15\n  local p=$16\n  local q=$17\n  local r=$18\n  local s=$19\n  local t=$20\n  local u=$21\n  local v=$22\n  local w=$23\n  local x=$24\n  local y=$25\n  local z=$26\n  local a1=$27\n  local b1=$28\n  local c1=$29\n  local d1=$30\n  local e1=$31\n  local f1=$32\n  local g1=$33\n  local h1=$34\n  local i1=$35\n  local j1=$36\n  local k1=$37\n  local l1=$38\n  local m1=$39\n  local n1=$40\n  local o1=$41\n  local p1=$42\n  local q1=$43\n  local r1=$44\n  local s1=$45\n  local t1=$46\n  local u1=$47\n  local v1=$48\n  local w1=$49\n  local x1=$5"], ["#!/bin/bash\n# You'll be given a string of words, and your task is to count the number\n# of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences are delimited by '.', '?' or '!'.\n# For example:\n# >>> $(is_bored \"Hello world\")\n# \"0\"\n# >>> $(is_bored \"The sky is blue. The sun is shining. I love this weather\")\n# \"1\"\n#\n# $1 is a string\nis_bored() {\n  local words=$1\n  local boredoms=$2\n  local i=0\n  for word in $words; do\n    if [[ $word =~ ^I$ ]] ; then\n      boredoms=$(( boredoms + 1 ))\n    fi\n    i=$(( i + 1 ))\n  done\n  echo \"$i boredoms\""], ["#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"-2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n# $3 is a floating point\nany_int() {\n  local a=$1\n  local b=$2\n  local c=$3\n  if [[ $a -eq $b ]] || [[ $a -eq $c ]] || [[ $b -eq $c ]]; then\n    return true\n  fi\n  return false"], ["#!/bin/bash\n# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> $(encode \"test\")\n# \"TGST\"\n# >>> $(encode \"This is a message\")\n# \"tHKS KS C MGSSCGG\"\n#\n# $1 is a string\nencode() {\n    local message=$1\n    local vowels=(\"a\" \"e\" \"i\" \"o\" \"u\")\n    local vowel_index=$(( $#message - 1 ))\n    local vowel_index_2=$(( $#message - 2 ))\n    local vowel_index_3=$(( $#message - 3 ))\n    local vowel_index_4=$(( $#message - 4 ))\n    local vowel_index_5=$(( $#message - 5 ))\n    local vowel_index_6=$(( $#message - 6 ))\n    local vowel_index_7=$(( $#message - 7 ))\n    local vowel_index_8=$(( $#message - 8 ))\n    local vowel_index_9=$(( $#message - 9 ))\n    local vowel_index_10=$(( $#message - 10 ))\n    local vowel_index_11=$(( $#message - 11 ))\n    local vowel_index_12=$(( $#message - 12 ))\n    local vowel_index_13=$(( $#message - 13 ))\n    local vowel_index_14=$(( $#message - 14 ))\n    local vowel_index_15=$(( $#message - 15 ))\n    local vowel_index_16=$(( $#message - 16 ))\n    local vowel_index_17=$(( $#message - 17 ))\n    local vowel_index_18=$(("], ["#!/bin/bash\n# You are given a list of integers.\n# You need to find the largest prime value and return the sum of its digits.\n# Examples:\n# >>> $(skjkasdkd \"0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3\")\n# \"10\"\n# >>> $(skjkasdkd \"1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1\")\n# \"25\"\n# >>> $(skjkasdkd \"1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3\")\n# \"13\"\n# >>> $(skjkasdkd \"0 724 32 71 99 32 6 0 5 91 83 0 5 6\")\n# \"11\"\n# >>> $(skjkasdkd \"0 81 12 3 1 21\")\n# \"3\"\n# >>> $(skjkasdkd \"0 8 1 2 1 7\")\n# \"7\"\n#\n# $1 is a space-separated list\nskjkasdkd() {\n  local -a a;\n  a=( $(echo \"$1\" | sed 's/ / /g' | sed 's/ / /g' | sed 's/ / /g' | sed 's/ / /g' | sed 's/ / /g' | sed 's/ / /g' | sed 's/ / /g' | sed 's/ / /g' | sed 's/ / /g' | sed 's/ / /g' | sed 's/ / /g' | sed 's/ / /g' | sed 's/ / /g' | sed 's/ / /g' | sed 's/ / /g' | sed '"], ["#!/bin/bash\n# Given a CSV, return true if all keys are strings in lower \n# case or all keys are strings in upper case, else return false.\n# The function should return false is the given CSV is empty.\n# Examples:\n# >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\")\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    local key_val_list=($(cat $1)))\n    local key_list=($(echo $key_val_list | tr -d '\\n' | tr -d ','))\n    local val_list=($(echo $key_val_list | tr -d '\\n' | tr -d ','))\n    local key_list_lower=($(echo $key_list | tr -d '\\n' | tr -d ','))\n    local val_list_lower=($(echo $val_list | tr -d '\\n' | tr -d ','))\n    local key_list_upper=($(echo $key_list | tr -d '\\n' | tr -d ','))\n    local val_list_upper=($(echo $val_list | tr -d '\\n' | tr -d ','))\n    local key_list_case=($(echo $key_list | tr -d '\\n' | tr -d ','))\n    local val_list_case=($(echo $val_list | tr -d '\\n' | tr -d ','))\n    local key_list_case_lower=($(echo $key_list_case | tr -d '\\n' | tr -d ','))\n    local val_list_case_lower=($("], ["#!/bin/bash\n# Implement a function that takes an non-negative integer and returns an array of the first n\n# integers that are prime numbers and less than n.\n# for example:\n# >>> $(count_up_to \"5\")\n# ['\"2\"', '\"3\"']\n# >>> $(count_up_to \"11\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"']\n# >>> $(count_up_to \"0\")\n# []\n# >>> $(count_up_to \"20\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"', '\"11\"', '\"13\"', '\"17\"', '\"19\"']\n# >>> $(count_up_to \"1\")\n# []\n# >>> $(count_up_to \"18\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"', '\"11\"', '\"13\"', '\"17\"']\n#\n# $1 is an integer\ncount_up_to() {\n    local n=$1\n    local primes=()\n    for ((i=1; i<=n; i++)); do\n        if [ $(( $i % 2 )) -eq 0 ]; then\n            primes+=(\"$i\")\n        fi\n    done\n    primes+=(\"$n\")\n    return $(seq -w 1 $n)"], ["#!/bin/bash\n# Complete the function that takes two integers and returns \n# the product of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# >>> $(multiply \"148\" \"412\")\n# \"16\"\n# >>> $(multiply \"19\" \"28\")\n# \"72\"\n# >>> $(multiply \"2020\" \"1851\")\n# \"0\"\n# >>> $(multiply \"14\" \"-15\")\n# \"20\"\n#\n# $1 is an integer\n# $2 is an integer\nmultiply() {\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local -d \"$1\" \"$2\"\n    local"], ["#!/bin/bash\n# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\n# >>> $(count_upper \"aBCdEf\")\n# \"1\"\n# >>> $(count_upper \"abcdefg\")\n# \"0\"\n# >>> $(count_upper \"dBBE\")\n# \"0\"\n#\n# $1 is a string\ncount_upper() {\n  local uppercase_vowels=(\"a\" \"e\" \"i\" \"o\" \"u\")\n  local vowels_count=0\n  for ((i=0; i<${#s}; i++)); do\n    if [[ ${s[i]} =~ ^[A-Z] ]]; then\n      vowels_count=$((vowels_count+1))\n    fi\n  done\n  return $vowels_count"], ["#!/bin/bash\n# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local num=$1\n  local min=$(( $num - 1 ))\n  local max=$(( $num + 1 ))\n  local mid=$(( $min + $max ))\n  local min_diff=$(( $mid - $num ))\n  local max_diff=$(( $mid - $num ))\n  local min_diff_abs=$(( $min_diff ))\n  local max_diff_abs=$(( $max_diff ))\n  local min_diff_abs_abs=$(( $min_diff_abs ))\n  local max_diff_abs_abs=$(( $max_diff_abs ))\n  local min_diff_abs_abs_abs=$(( $min_diff_abs_abs ))\n  local max_diff_abs_abs_abs=$(( $max_diff_abs_abs ))\n  local min_diff_abs_abs_abs_abs=$(( $min_diff_abs_abs_abs ))\n  local max_diff_abs_abs_abs_abs=$(( $max_diff_abs_abs_abs ))\n  local min_diff_abs_abs_abs_abs=$(( $min_diff_abs_abs_abs_abs ))\n  local min_diff_abs_abs_abs_abs_abs=$(( $min_diff_abs_abs_abs_abs ))\n  local min_diff_abs_abs_"], ["#!/bin/bash\n# Given a positive integer n, you have to make a pile of n levels of stones.\n# The first level has n stones.\n# The number of stones in the next level is:\n# - the next odd number if n is odd.\n# - the next even number if n is even.\n# Return the number of stones in each level in a list, where element at index\n# i represents the number of stones in the level (i+1).\n# Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local pile=\"\";\n  while [[ $n -gt 0 ]] ; do\n    pile+=( $(make_a_pile) )\n    n-=$((n-1))\n  done\n  return $pile"], ["#!/bin/bash\n# You will be given a string of words separated by commas or spaces. Your task is\n# to split the string into words and return an array of the words.\n# For example:\n# >>> $(words_string \"Hi, my name is John\")\n# ['\"Hi\"', '\"my\"', '\"name\"', '\"is\"', '\"John\"']\n# >>> $(words_string \"One, two, three, four, five, six\")\n# ['\"One\"', '\"two\"', '\"three\"', '\"four\"', '\"five\"', '\"six\"']\n#\n# $1 is a string\nwords_string() {\n    local word_array=()\n    local word_array_length=${#word_array}\n    local word_array_index=0\n    local word_array_length_str=${#word_array}\n    while [[ -n \"$word_array_length_str\" ]]\n    do\n        word_array_length_str=${word_array_length_str//,/}\n        word_array_length_str=${word_array_length_str//,/}\n        word_array_length_str=${word_array_length_str//,/}\n        word_array_length_str=${word_array_length_str//,/}\n        word_array_length_str=${word_array_length_str//,/}\n        word_array_length_str=${word_array_length_str//,/}\n        word_array_length_str=${word_array_length_str//,/}\n        word_array_length_str=${word_array_length_str//,/}\n        word_array_length_str=${word_array_length_str//,/}\n        word_array_length_str=${word_array_length_str//,/}\n        word_array_length_str=${word_array_length_str//,/}\n        word_array_length_str=${word_array_length_str//,/}\n        word_array_length_str=${word_array_length_str//,/}\n        word_array_length_str=${word_array_length_str//,/}\n        word_array"], ["#!/bin/bash\n# This function takes two positive numbers x and y and returns the\n# biggest even integer number that is in the range [x, y] inclusive. If \n# there's no such number, then the function should return -1.\n# For example:\n# >>> $(choose_num \"12\" \"15\")\n# \"14\"\n# >>> $(choose_num \"13\" \"12\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n    local x=$1\n    local y=$2\n    local num=$x/$y\n    if [ $num -eq 0 ]; then\n        return -1\n    fi\n    return $(($x - $y))"], ["#!/bin/bash\n# You are given two positive integers n and m, and your task is to compute the\n# average of the integers from n through m (including n and m). \n# Round the answer to the nearest integer and convert that to binary.\n# If n is greater than m, return -1.\n# Example:\n# >>> $(rounded_avg \"1\" \"5\")\n# \"0b11\"\n# >>> $(rounded_avg \"7\" \"5\")\n# \"-1\"\n# >>> $(rounded_avg \"10\" \"20\")\n# \"0b1111\"\n# >>> $(rounded_avg \"20\" \"33\")\n# \"0b11010\"\n#\n# $1 is an integer\n# $2 is an integer\nrounded_avg() {\n  local n=$1\n  local m=$2\n  local result=$(($n-$m))\n  local result_int=$(($result))\n  local result_bin=$(($result_int))\n  local result_bin_int=$(($result_bin))\n  local result_bin_int_int=$(($result_bin_int))\n  local result_bin_int_int_int=$(($result_bin_int_int))\n  local result_bin_int_int_int_int=$(($result_bin_int_int_int))\n  local result_bin_int_int_int_int_int=$(($result_bin_int_int_int_int))\n  local result_bin_int_int_int_int_int_int=$(($result_bin_int_int_int_int_int))\n  local result_bin_int_int_int_int_int_int_int=$(($result_bin_int_int_int_int_int_int))\n  local result_bin_int_int_int_int_int_int_int_int_int=$(($result_bin_int_int_int_int_int_int_int_int))\n  local result_bin_int_int_int_int_int_int_int_int_int_int_int=$(($result_bin_int_int_int_int_int_int"], ["#!/bin/bash\n# Given a list of positive integers x. return a sorted list of all \n# elements that hasn't any even digit.\n# Note: Returned list should be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local x=\"$1\"\n  local res=\"\"\n  local i=0\n  while [[ -n \"$x\" ]] {\n    local x_str=$x\n    local x_len=$(( $x_len + 1 ))\n    while [[ $x_len -eq 1 ]] {\n      if [[ $x_str =~ ^[0-9]+$ ]] {\n        res=\"$res $x_str\"\n        x_len=$(( $x_len - 1 ))\n      }\n    }\n    x_str=$(printf \"%0${x_len}d\" $x_str)\n    i=$(( $i + 1 ))\n  }\n  res=\"$res $x\"\n  return $res"], ["#!/bin/bash\n# Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n# reverse the resulting array, and then replace each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"']\n#\n# $1 is a space-separated list\nby_length() {\n    local length=$1\n    local name=$2\n    local result=\"\"\n    for ((i=0; i<${length}; i++)); do\n        result+=( \"\\\"${name[i]}\\\"\" )\n    done\n    return $result"], ["#!/bin/bash\n# Implement the function f that takes n as a parameter,\n# and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n# i starts from 1.\n# the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n# Example:\n# >>> $(f \"5\")\n# ['\"1\"', '\"2\"', '\"6\"', '\"24\"', '\"15\"']\n#\n# $1 is an integer\nf() {\n    local i\n    for ((i=1; i<=1; i++)); do\n        local f=$(($i))\n        local f_str=$(($f))\n        local f_str_len=$(($f_str | wc -c))\n        local f_str_len_str=$(($f_str_len | printf \"%d\" | tr -d \" \"))\n        local f_str_len_str_str=$(($f_str_len_str | printf \"%d\" | tr -d \" \"))\n        local f_str_len_str_str_str=$(($f_str_len_str_str | printf \"%d\" | tr -d \" \"))\n        local f_str_len_str_str_str_str=$(($f_str_len_str_str_str | printf \"%d\" | tr -d \" \"))\n        local f_str_len_str_str_str_str_str=$(($f_str_len_str_str_str_str | printf \"%d\" | tr -d \" \"))\n        local f_str_len_str_str_str_str_str_str=$(($f_str_len_str_str_str_str_str | printf \"%d\" | tr -d \" \"))\n        local f_str_len_str_str_str_str_str_str_str=$(($f_str_len_str_str_str_str_str_str | printf \"%d\" | tr -d \" \"))\n        local f_str_len_str_str_str_str_str_str"], ["#!/bin/bash\n# Given a positive integer n, return a list that has the number of even and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n# Example 1:\n# >>> $(even_odd_palindrome \"3\")\n# ['\"1\"', '\"2\"']\n# Explanation:\n# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# >>> $(even_odd_palindrome \"12\")\n# ['\"4\"', '\"6\"']\n# Explanation:\n# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n# 1. 1 <= n <= 10^3\n# 2. returned list has the number of even and odd integer palindromes respectively.\n#\n# $1 is an integer\neven_odd_palindrome() {\n  local n=$1\n  local even_odd_palindrome_list=()\n  for ((i=1; i<=n; i++)); do\n    if ((i % 2 == 0)); then\n      even_odd_palindrome_list+=(\"$i\")\n    else\n      even_odd_palindrome_list+=(\"$i\")\n    fi\n  done\n  return $even_odd_palindrome_list"], ["#!/bin/bash\n# Write a function count_nums which takes an array of integers and returns\n# the number of elements which has a sum of digits > 0.\n# If a number is negative, then its first signed digit will be negative:\n# e.g. -123 has signed digits -1, 2, and 3.\n# >>> $(count_nums \"\")\n# \"0\"\n# >>> $(count_nums \"-1 11 -11\")\n# \"1\"\n# >>> $(count_nums \"1 1 2\")\n# \"3\"\n#\n# $1 is a space-separated list\ncount_nums() {\n    local nums=\"$1\"\n    local sum_digits=0\n    for num in $nums; do\n        sum_digits=$((sum_digits + $num))\n    done\n    if [ $sum_digits -gt 0 ]; then\n        echo \"Number has a sum of digits > 0: $num\"\n    else\n        echo \"Number has a sum of digits <= 0: $num\"\n    fi"], ["#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n# numbers in the array will be randomly ordered. Your task is to determine if\n# it is possible to get an array sorted in non-decreasing order by performing \n# the following operation on the given array:\n# You are allowed to perform right shift operation any number of times.\n# One right shift operation means shifting all elements of the array by one\n# position in the right direction. The last element of the array will be moved to\n# the starting position in the array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing the above operation\n# then return true else return false.\n# If the given array is empty then return true.\n# Note: The given list is guaranteed to have unique elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n# be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"false\"\n# Explanation:It is not possible to get non-decreasing order for the given\n# array by performing any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball() {\n  local arr=\"$(cat $1)\"\n  local N=$((length($arr))\n  local arr_copy=($arr)\n  for ((i=1;i<N;i++)); do\n    arr_copy[i]=arr_copy[i-1]\n  done\n  for ((i=1;i<N;i++)); do\n    arr_copy[i]=arr_copy[i]+arr_copy[i-1]\n  done\n  for ((i=1;i<N;i++)); do\n    arr_copy[i]=arr_copy[i]-arr_copy[i-1]\n  done\n  for ((i=1;i<N;i++)); do\n    arr_copy[i]=arr_copy"], ["#!/bin/bash\n# In this problem, you will implement a function that takes two lists of numbers,\n# and determines whether it is possible to perform an exchange of elements\n# between them to make lst1 a list of only even numbers.\n# There is no limit on the number of exchanged elements between lst1 and lst2.\n# If it is possible to exchange elements between the lst1 and lst2 to make\n# all the elements of lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n# >>> $(exchange \"1 2 3 4\" \"1 2 3 4\")\n# \"YES\"\n# >>> $(exchange \"1 2 3 4\" \"1 5 3 4\")\n# \"NO\"\n# It is assumed that the input lists will be non-empty.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nexchange() {\n  local lst1 lst2\n  read -p \"Enter lst1: \" lst1\n  read -p \"Enter lst2: \" lst2\n  if [[ $lst1 == $lst2 ]]; then\n    echo \"NO\"\n    return\n  fi\n  for i in $lst1; do\n    for j in $lst2; do\n      if [[ $i == $j ]]; then\n        echo \"NO\"\n        return\n      fi\n    done\n  done\n  echo \"YES\""], ["#!/bin/bash\n# Given a string representing a space separated lowercase letters, return a CSV\n# of the letter with the most repetition and containing the corresponding count.\n# If several letters have the same occurrence, return all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"', '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local -a hist\n  local -a count\n  local -a letters\n  local -a max_count\n  local -a max_count_letters\n  local -a max_count_letters_count\n  local -a max_count_letters_count_letters\n  local -a max_count_letters_count_letters_count\n  local -a max_count_letters_count_letters_count_letters\n  local -a max_count_letters_count_letters_count_letters_count\n  local -a max_count_letters_count_letters_count_letters_count_letters\n  local -a max_count_letters_count_letters_count_letters_count_letters_count\n  local -a max_count_letters_count_letters_count_letters_count_letters_count_letters\n  local -a max_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters\n  local -a max_count_letters_count_letters_count_letters_count_letters_count_letters_count_letters_count\n  local -a max_count_letters_count_"], ["#!/bin/bash\n# Task\n# We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n# then check if the result string is palindrome.\n# A string is called palindrome if it reads the same backward as forward.\n# You should return a list containing the result string and true/false for the check.\n# Example\n# >>> $(reverse_delete \"abcde\" \"ae\")\n# ['\"bcd\"', '\"false\"']\n# >>> $(reverse_delete \"abcdef\" \"b\")\n# ['\"acdef\"', '\"false\"']\n# >>> $(reverse_delete \"abcdedcba\" \"ab\")\n# ['\"cdedc\"', '\"true\"']\n#\n# $1 is a string\n# $2 is a string\nreverse_delete() {\n    local s=$1\n    local c=$2\n    local result=$s\n    local check=$s == $c\n    local result_check=$result == $c\n    if [ $check ]; then\n        local result_list=$result\n        local result_check_list=$result_check\n        for ((i=0; i<${#s}; i++)); do\n            if [ $s[i] == $c[i] ]; then\n                result_list+=(\"$s[$i]\" \"$c[$i]\" \"$result_list[$i]\" \"$result_list[$i+1]\" \"$result_list[$i+2]\" \"$result_list[$i+3]\" \"$result_list[$i+4]\" \"$result_list[$i+5]\" \"$result_list[$i+6]\" \"$result_list[$i+7]\" \"$result_list[$i+8]\" \"$result_list[$i+9]\" \"$result_list[$i+10]\" \"$result_list[$i+11]\" \"$result_list[$i+12]\" \"$result_list[$i+13]\" \"$result_list[$i+14]\" \"$result_list[$i+15]\" \"$result_list[$i+16]\" \"$result_list[$i+17]\" \"$result_list[$i+18]\" \"$result_list[$i+19]\" \"$result_list[$i+20]\" \"$result"], ["#!/bin/bash\n# Given an array of integers nums, find the minimum sum of any non-empty sub-array\n# of nums.\n# Example\n# >>> $(minSubArraySum \"2 3 4 1 2 4\")\n# \"1\"\n# >>> $(minSubArraySum \"-1 -2 -3\")\n# \"-6\"\n#\n# $1 is a space-separated list\nminSubArraySum() {\n    local nums\n    local min\n    local sum\n    nums=( $(seq 1 100) )\n    sum=0\n    min=0\n    for num in \"${nums[@]}\"; do\n        sum=$((sum + $num))\n        if [ $sum -lt $min ]; then\n            min=$sum\n        fi\n    done\n    return $(min)"], ["#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents a single well,\n# and each 1 in a row represents a single unit of water.\n# Each well has a corresponding bucket that can be used to extract water from it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets to empty the wells.\n# Output the number of times you need to lower the buckets.\n# Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nmax_fill() {\n  local grid capacity bucket\n  local max_fill_count\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift\n  shift"], ["#!/bin/bash\n# In this Kata, you have to sort an array of non-negative integers according to\n# number of ones in their binary representation in ascending order.\n# For similar number of ones, sort based on decimal value.\n# It must be implemented like this:\n# >>> $(sort_array \"1 5 2 3 4\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array \"-2 -3 -4 -5 -6\")\n# ['\"-6\"', '\"-5\"', '\"-4\"', '\"-3\"', '\"-2\"']\n# >>> $(sort_array \"1 0 2 3 4\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local -n array\n    local -n sorted_array\n    local -n sorted_array_len\n    local -n sorted_array_index\n    local -n sorted_array_value\n    local -n sorted_array_index_value\n    local -n sorted_array_index_value_count\n    local -n sorted_array_index_value_count_sum\n    local -n sorted_array_index_value_count_sum_max\n    local -n sorted_array_index_value_count_sum_max_index\n    local -n sorted_array_index_value_count_sum_max_index_value\n    local -n sorted_array_index_value_count_sum_max_index_value_count\n    local -n sorted_array_index_value_count_sum_max_index_value_count_sum\n    local -n sorted_array_index_value_count_sum_max_index_value_count_sum_max\n    local -n sorted_array_index_value_count_sum_max_index_value_count_sum_max_index\n    local -n sorted_array_index_value_count_sum_max_index_value_count_sum_max_index_value\n    local -n sorted_array_index_value_count_sum_"], ["#!/bin/bash\n# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\" \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words() {\n    local s=\"$1\"\n    local n=\"$2\"\n    local words=()\n    local i=0\n    while [[ $i -le $s ]]\n    do\n        words+=(\"$s$i\")\n        i=$((i+1))\n    done\n    words+=(\"$s\")\n    words+=(\"$s$i\")\n    words+=(\"$s$i\")\n    words+=(\"$s$i\")\n    words+=(\"$s$i\")\n    words+=(\"$s$i\")\n    words+=(\"$s$i\")\n    words+=(\"$s$i\")\n    words+=(\"$s$i\")\n    words+=(\"$s$i\")\n    words+=(\"$s$i\")\n    words+=(\"$s$i\")\n    words+=(\"$s$i\")\n    words+=(\"$s$i\")\n    words+=(\"$s$i\")\n    words+=(\"$s$i\")\n    words+=(\"$s$i\")\n    words+=(\"$s$i\")\n    words+=(\"$s$i\")\n    words+=(\"$s$i\")\n    words+=(\"$s$i\")\n"], ["#!/bin/bash\n# You are given a word. Your task is to find the closest vowel that stands between \n# two consonants from the right side of the word (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n# find any vowel met the above condition. \n# You may assume that the given string contains English letter only.\n# Example:\n# >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\")\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n    local word=$1\n    local vowels=(\"a\" \"e\" \"i\" \"o\" \"u\")\n    local vowel_index=$(( (word.length - 1) / 2 ))\n    local vowel_index_2=$(( (word.length - 1) / 2 ))\n    local vowel_index_3=$(( (word.length - 1) / 2 ))\n    local vowel_index_4=$(( (word.length - 1) / 2 ))\n    local vowel_index_5=$(( (word.length - 1) / 2 ))\n    local vowel_index_6=$(( (word.length - 1) / 2 ))\n    local vowel_index_7=$(( (word.length - 1) / 2 ))\n    local vowel_index_8=$(( (word.length - 1) / 2 ))\n    local vowel_index_9=$(( (word.length - 1) / 2 ))\n    local vowel_index_10=$(( (word.length - 1) / 2 ))\n    local vowel_index_11=$(( (word.length - 1) / 2 ))\n    local vowel_index_12=$(( (word.length - 1) / 2 ))\n    local vowel"], ["#!/bin/bash\n# You are given a list of two strings, both strings consist of open\n# parentheses '(' or close parentheses ')' only.\n# Your job is to check if it is possible to concatenate the two strings in\n# some order, that the resulting string will be good.\n# A string S is considered to be good if and only if all parentheses in S\n# are balanced. For example: the string '(())()' is good, while the string\n# '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n# Examples:\n# >>> $(match_parens \"()( )\")\n# \"Yes\"\n# >>> $(match_parens \") )\")\n# \"No\"\n#\n# $1 is a space-separated list\nmatch_parens() {\n  local a=\"$1\"\n  local b=\"$2\"\n  local c=\"$3\"\n  local d=\"$4\"\n  local e=\"$5\"\n  local f=\"$6\"\n  local g=\"$7\"\n  local h=\"$8\"\n  local i=\"$9\"\n  local j=\"$10\"\n  local k=\"$11\"\n  local l=\"$12\"\n  local m=\"$13\"\n  local n=\"$14\"\n  local o=\"$15\"\n  local p=\"$16\"\n  local q=\"$17\"\n  local r=\"$18\"\n  local s=\"$19\"\n  local t=\"$20\"\n  local u=\"$21\"\n  local v=\"$22\"\n  local w=\"$23\"\n  local x=\"$24\"\n  local y=\"$25\"\n  local z=\"$26\"\n  local a1=\"$27\"\n  local b1=\"$28\"\n  local c1=\"$29\"\n  local d1=\"$30\"\n  local e1=\"$31\"\n  local f1=\"$32\"\n  local g1=\"$33\"\n  local h1=\"$34\"\n  local i1=\"$35\"\n  local j1=\"$36\"\n  local k1=\"$37\"\n  local l1=\"$38\"\n  local m1=\"$39\""], ["#!/bin/bash\n# Given an array arr of integers and a positive integer k, return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n# >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length of the array will be in the range of [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nmaximum() {\n    local -a arr\n    local -a k\n    local -a max\n    local -a max_arr\n    local -a max_k\n    local -a max_arr_len\n    local -a max_k_len\n    local -a max_arr_max\n    local -a max_k_max\n    local -a max_arr_max_k\n    local -a max_arr_max_k_len\n    local -a max_arr_max_k_max\n    local -a max_arr_max_k_max_len\n    local -a max_arr_max_k_max_k\n    local -a max_arr_max_k_max_k_len\n    local -a max_arr_max_k_max_k_max\n    local -a max_arr_max_k_max_k_max_len\n    local -a max_arr_max_k_max_k_max_k\n    local -a max_arr_max_k_max_k_max_k_len\n    local -a max_arr_max_k_max_k_max_k_max\n    local -"], ["#!/bin/bash\n# Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n# Examples\n# >>> $(solution \"5 8 7 1\")\n# \"12\"\n# >>> $(solution \"3 3 3 3 3\")\n# \"9\"\n# >>> $(solution \"30 13 24 321\")\n# \"0\"\n#\n# $1 is a space-separated list\nsolution() {\n  local a=$1\n  local b=$2\n  local c=$3\n  local d=$4\n  local e=$5\n  local f=$6\n  local g=$7\n  local h=$8\n  local i=$9\n  local j=$10\n  local k=$11\n  local l=$12\n  local m=$13\n  local n=$14\n  local o=$15\n  local p=$16\n  local q=$17\n  local r=$18\n  local s=$19\n  local t=$20\n  local u=$21\n  local v=$22\n  local w=$23\n  local x=$24\n  local y=$25\n  local z=$26\n  local a1=$27\n  local b1=$28\n  local c1=$29\n  local d1=$30\n  local e1=$31\n  local f1=$32\n  local g1=$33\n  local h1=$34\n  local i1=$35\n  local j1=$36\n  local k1=$37\n  local l1=$38\n  local m1=$39\n  local n1=$40\n  local o1=$41\n  local p1=$42\n  local q1=$43\n  local r1=$44\n  local s1=$45\n  local t1=$46\n  local u1=$47\n  local v1=$48\n  local w1=$49\n  local x1=$50\n  local y1=$51\n  local z1=$52\n  local a2=$53\n "], ["#!/bin/bash\n# Given a non-empty array of integers arr and an integer k, return\n# the sum of the elements with at most two digits from the first k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements() {\n    local arr=\"$1\"\n    local k=\"$2\"\n    local sum=$(echo \"$arr\" | tr -d ' ' | tr -d '\\n' | tr -d '\\t' | tr -d '\\r' | tr -d '\\n' | tr -d '\\t' | tr -d '\\r' | tr -d '\\n' | tr -d '\\t' | tr -d '\\r' | tr -d '\\n' | tr -d '\\t' | tr -d '\\r' | tr -d '\\n' | tr -d '\\t' | tr -d '\\r' | tr -d '\\n' | tr -d '\\t' | tr -d '\\r' | tr -d '\\n' | tr -d '\\t' | tr -d '\\r' | tr -d '\\n' | tr -d '\\t' | tr -d '\\r' | tr -d '\\n' | tr -d '\\t' | tr -d '\\r' | tr -d '\\n' | tr -d '\\t' | tr -d '\\r' | tr -d '\\n' | tr -d '\\t' | tr -d '\\r' | tr -d '\\n' | tr -d '\\t' | tr -d '\\r' | tr -d '\\n' | tr -d '\\t' | tr -d '\\r' | tr -d '\\n' | tr -d '\\t' | tr -d '\\r' | tr -d '\\n' | tr -d '\\t' | tr -d '\\r' | tr -d '\\n' | tr -d '\\t' | tr -d"], ["#!/bin/bash\n# Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n# The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n# as follows: start with any positive integer n. Then each term is obtained from the \n# previous term as follows: if the previous term is even, the next term is one half of \n# the previous term. If the previous term is odd, the next term is 3 times the previous\n# term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n# Note: \n# 1. Collatz(1) is [1].\n# 2. returned list sorted in increasing order.\n# For example:\n# get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n# >>> $(get_odd_collatz \"5\")\n# ['\"1\"', '\"5\"']\n#\n# $1 is an integer\nget_odd_collatz() {\n    local n=$1\n    local collatz_list=()\n    for ((i=1; i<=n; i++)); do\n        if ((i % 2 == 0)); then\n            collatz_list+=(\"$i/2\")\n        else\n            collatz_list+=(\"$i*3+1\")\n        fi\n    done\n    return collatz_list"], ["#!/bin/bash\n# You have to write a function which validates a given date string and\n# returns true if the date is valid otherwise false.\n# The date is valid if all of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n# 3. The months should not be less than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n# >>> $(valid_date \"03-11-2000\")\n# \"true\"\n# >>> $(valid_date \"15-01-2012\")\n# \"false\"\n# >>> $(valid_date \"04-0-2040\")\n# \"false\"\n# >>> $(valid_date \"06-04-2020\")\n# \"true\"\n# >>> $(valid_date \"06/04/2020\")\n# \"false\"\n#\n# $1 is a string\nvalid_date() {\n    local date_string=\"$1\"\n    local months_in_year=$(( $(date +%m) - 12 )\n    local months_in_month=$(( $(date +%m) - 12 )\n    local days_in_month=$(( $(date +%d) - 1 )\n    local days_in_year=$(( $(date +%d) - 12 )\n    local months_in_year_str=$(( $(date +%m) - 12 )\n    local months_in_month_str=$(( $(date +%m) - 12 )\n    local days_in_month_str=$(( $(date +%d) - 1 )\n    local days_in_year_str=$(( $(date +%d) - 12 )\n"], ["#!/bin/bash\n# Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n# should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\!\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words() {\n  local words=$1\n  local words_split=$1\n  local words_split_length=$1\n  local words_split_odd_letters=$1\n  local words_split_letters=$1\n  local words_split_letters_odd=$1\n  local words_split_letters_even=$1\n  local words_split_letters_odd_even=$1\n  local words_split_letters_odd_even_odd=$1\n  local words_split_letters_odd_even_odd_even=$1\n  local words_split_letters_odd_even_odd_even_odd=$1\n  local words_split_letters_odd_even_odd_even_odd_even=$1\n  local words_split_letters_odd_even_odd_even_odd_even_odd_even_odd=$1\n  local words_split_letters_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even=$1\n  local words_split_letters_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_even_odd_"], ["#!/bin/bash\n# Given a list of numbers, return whether or not they are sorted\n# in ascending order. If list has more than 1 duplicate of the same\n# number, return false. Assume no negative numbers and only integers.\n# Examples\n# >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated list\nis_sorted() {\n  local nums=$1\n  local sorted=false\n  for num in $nums; do\n    if [ \"$num\" == \"$num\" ]; then\n      sorted=true\n      break\n    fi\n  done\n  if [ \"$sorted\" == \"true\" ]; then\n    return 1\n  fi\n  return 0"], ["#!/bin/bash\n# You are given two intervals,\n# where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n# The given intervals are closed which means that the interval (start, end)\n# includes both start and end.\n# For each given interval, it is assumed that its start is less or equal its end.\n# Your task is to determine whether the length of intersection of these two \n# intervals is a prime number.\n# Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If the length of the intersection is a prime number, return \"YES\",\n# otherwise, return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output] samples:\n# >>> $(intersection \"1 2\" \"2 3\")\n# \"NO\"\n# >>> $(intersection \"-1 1\" \"0 4\")\n# \"NO\"\n# >>> $(intersection \"-3 -1\" \"-5 5\")\n# \"YES\"\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nintersection() {\n  local start end\n  local length\n  local result\n  local start_index\n  local end_index\n  local start_value\n  local end_value\n  local length_value\n  local length_start\n  local length_end\n  local length_result\n  local start_index_start\n  local start_index_end\n  local end_index_start\n  local end_index_end\n  local start_value_start\n  local start_value_end\n  local end_value_start\n  local end_value_end\n  local length_value_start\n  local length_value_end\n  local length_start_value\n  local length_start_value_end\n  local length_end_value\n  local length_end_value_end\n  local length_result_start\n  local length_result_end\n  local length_result_start_value\n  local length_result_end_value\n  local length_"], ["#!/bin/bash\n# You are given an array arr of integers and you need to return\n# sum of magnitudes of integers multiplied by product of all signs\n# of each number in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>> $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1 is a space-separated list\nprod_signs() {\n  local sign=\"$1\"\n  local arr=\"$2\"\n  local sum=\"$3\"\n  local product=\"$4\"\n  local sign_count=\"$5\"\n  local sign_sum=\"$6\"\n  local sign_product=\"$7\"\n  local sign_count_sum=\"$8\"\n  local sign_count_product=\"$9\"\n  local sign_sum_product=\"$10\"\n  local sign_sum_count=\"$11\"\n  local sign_count_sum_product=\"$12\"\n  local sign_count_product_sum=\"$13\"\n  local sign_sum_product_count=\"$14\"\n  local sign_product_count_sum=\"$15\"\n  local sign_count_sum_product_sum=\"$16\"\n  local sign_sum_product_count_sum=\"$17\"\n  local sign_product_count_sum_sum=\"$18\"\n  local sign_count_sum_product_sum_sum=\"$19\"\n  local sign_product_count_sum_product_sum_sum=\"$20\"\n  local sign_sum_product_count_sum_sum=\"$21\"\n  local sign_count_sum_product_sum_sum_sum=\"$22\"\n  local sign_product_count_sum_product_sum_sum_sum=\"$23\"\n  local sign_sum_product_count_sum_product_sum_sum_sum=\"$24\"\n  local sign_count_sum_product_sum_sum_sum_sum=\"$25\"\n  local sign_product_count_sum_sum_sum_sum_sum=\"$2"], ["#!/bin/bash\n# Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n# each cell of the grid contains a value. Every integer in the range [1, N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have to find the minimum path of length k in the grid. You can start\n# from any cell, and in each step you can move to any of the neighbor cells,\n# in other words, you can go to cells which share an edge with you current\n# cell.\n# Please note that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n# You CANNOT go off the grid.\n# A path A (of length k) is considered less than a path B (of length k) if\n# after making the ordered lists of the values on the cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically less\n# than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j] = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered list of the values on the cells that the minimum path go through.\n# Examples:    \n# >>> $(minPath \"1 2 3\\n4 5 6\\n7 8 9\" \"3\")\n# ['\"1\"', '\"2\"', '\"1\"']\n# >>> $(minPath \"5 9 3\\n4 1 6\\n7 8 2\" \"1\")\n# ['\"1\"']\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nminPath() {\n    local N=$1\n    local K=$2\n    local s=$1\n    local t=$2\n    local res=\"\"\n    local i=0\n    local j=0\n    local k=0\n    while [[ $i -le $N ]] ; do\n        while [[ $j -"], ["#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n# the last couple centuries. However, what people don't know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are given a non-negative integer number n, you have to a return a list of the \n# first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n    local n\n    local ret\n    n=1\n    while [ $n -lt 1 ]\n    do\n        ret=$((n+1))\n        n=$((n+1))\n    done\n    ret=$((n+1))\n    ret=$((n+1))\n    ret=$((n+1))\n    ret=$((n+1))\n    ret=$((n+1))\n    ret=$((n+1))\n    ret=$((n+1))\n    ret=$((n+1))\n    ret=$((n+1))\n    ret=$((n+1))\n    ret=$((n+1))\n    ret=$((n+1))\n    ret=$((n+1))\n    ret=$((n+1))\n    ret=$((n+1))\n    ret=$((n+1))\n    ret=$((n+1))\n    ret=$((n+1))\n    ret=$((n+1))\n    ret=$((n+1))\n    ret=$((n+1"], ["#!/bin/bash\n# Given a positive integer n, return the product of the odd digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n# \"15\"\n#\n# $1 is an integer\ndigits() {\n    local n=$1\n    local product=$((1 << n) - 1)\n    for ((i=1; i<=n; i++)); do\n        if ((i % 2 == 0))\n        then\n            product = product * i\n        fi\n    done\n    return $product"], ["#!/bin/bash\n# Create a function that takes a string as input which contains only square brackets.\n# The function should return true if and only if there is a valid subsequence of brackets \n# where at least one bracket in the subsequence is nested.\n# >>> $(is_nested \"[[]]\")\n# \"true\"\n# >>> $(is_nested \"[]]]]]]][[[[[]\")\n# \"false\"\n# >>> $(is_nested \"[][]\")\n# \"false\"\n# >>> $(is_nested \"[]\")\n# \"false\"\n# >>> $(is_nested \"[[][]]\")\n# \"true\"\n# >>> $(is_nested \"[[]][[\")\n# \"true\"\n#\n# $1 is a string\nis_nested() {\n    local string = $1\n    local brackets = {}\n    for i = 1, #string do\n        if string:sub(i, i) == \"[\" then\n            brackets[#brackets + 1] = string:sub(i, i)\n        elseif string:sub(i, i) == \"]\" then\n            return false\n        end\n    end\n    for i = 1, #string do\n        if brackets[#brackets + 1] == string:sub(i, i) then\n            return true\n        end\n    end\n    return false"], ["#!/bin/bash\n# You are given a list of numbers.\n# You need to return the sum of squared numbers in the given list,\n# round each element in the list to the upper int(Ceiling) first.\n# Examples:\n# >>> $(lst \"1.0 2.0 3.0\")\n# \"14\"\n# >>> $(lst \"1.0 4.0 9.0\")\n# \"98\"\n# >>> $(lst \"1.0 3.0 5.0 7.0\")\n# \"84\"\n# >>> $(lst \"1.4 4.2 0.0\")\n# \"29\"\n# >>> $(lst \"-2.4 1.0 1.0\")\n# \"6\"\n#\n# $1 is a space-separated list\nsum_squares() {\n  local nums=\"$1\"\n  local sum_squares=\"$nums\"\n  local sum_squares_round_to_upper=$((sum_squares_round_to_upper = ceil(sum_squares_round_to_upper)))\n  local sum_squares_round_to_lower=$((sum_squares_round_to_lower = floor(sum_squares_round_to_lower))))\n  local sum_squares_round_to_upper_round_to_lower=$((sum_squares_round_to_upper_round_to_lower = floor(sum_squares_round_to_upper_round_to_lower))))\n  local sum_squares_round_to_upper_round_to_lower_round_to_upper=$((sum_squares_round_to_upper_round_to_lower_round_to_upper = floor(sum_squares_round_to_upper_round_to_lower_round_to_upper))))\n  local sum_squares_round_to_upper_round_to_lower_round_to_upper_round_to_upper=$((sum_squares_round_to_upper_round_to_lower_round_to_upper_round_to_upper = floor(sum_squares_round_to_upper_round_to_lower_round_"], ["#!/bin/bash\n# Create a function that returns true if the last character\n# of a given string is an alphabetical character and is not\n# a part of a word, and false otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n# >>> $(check_if_last_char_is_a_letter \"apple pie\")\n# \"false\"\n# >>> $(check_if_last_char_is_a_letter \"apple pi e\")\n# \"true\"\n# >>> $(check_if_last_char_is_a_letter \"apple pi e \")\n# \"false\"\n# >>> $(check_if_last_char_is_a_letter \"\")\n# \"false\"\n#\n# $1 is a string\ncheck_if_last_char_is_a_letter() {\n    local word=\"$1\"\n    local last_char=\"$word[-1]\"\n    local is_alphabetical_char=\"$last_char in word\"\n    local is_not_word_char=\"$last_char not in word\"\n    if [[ \"$is_alphabetical_char\" == \"true\" ]] || [[ \"$is_not_word_char\" == \"true\" ]]; then\n        return 1\n    fi\n    return 0"], ["#!/bin/bash\n# Create a function which returns the largest index of an element which\n# is not greater than or equal to the element immediately preceding it. If\n# no such element exists then return -1. The given array will not contain\n# duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n# >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\ncan_arrange() {\n  local arr=\"$1\"\n  local n=$#arr\n  local max_index=$((n-1))\n  local min_index=$((n-1))\n  local max_value=$((n-1))\n  local min_value=$((n-1))\n  for ((i=1; i<=$n; i++)); do\n    if [[ $arr[$i] -ge $arr[$i-1] ]]\n    then\n      max_index=$((i-1))\n      min_index=$((i-1))\n      max_value=$((i-1))\n      min_value=$((i-1))\n    fi\n  done\n  if [[ $max_index -gt $max_value ]]\n  then\n    max_index=$((max_index-1))\n  fi\n  if [[ $min_index -gt $min_value ]]\n  then\n    min_index=$((min_index-1))\n  fi\n  if [[ $max_index -eq $max_value ]]\n  then\n    return $max_index\n  fi\n  if [[ $min_index -eq $min_value ]]\n  then\n    return $min_index\n  fi\n  return -1"], ["#!/bin/bash\n# Create a function that returns a list (a, b), where 'a' is\n# the largest of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n# If there is no negative or positive integers, return them as None.\n# Examples:\n# >>> $(largest_smallest_integers \"2 4 1 3 5 7\")\n# ['\"None\"', '\"1\"']\n# >>> $(largest_smallest_integers \"\")\n# ['\"None\"', '\"None\"']\n# >>> $(largest_smallest_integers \"0\")\n# ['\"None\"', '\"None\"']\n#\n# $1 is a space-separated list\nlargest_smallest_integers() {\n  local a b\n  local -i\n  for i in \"$1\"; do\n    if [[ $i -gt 0 ]] && [[ $i -lt 0 ]]\n    then\n      a=\"$i\"\n      b=\"$i\"\n    else\n      a=\"$i\"\n    fi\n  done\n  if [[ $a -gt 0 ]]\n  then\n    a=\"$a\"\n  else\n    a=\"$a\"\n  fi\n  if [[ $b -gt 0 ]]\n  then\n    b=\"$b\"\n  else\n    b=\"$b\"\n  fi\n  return $(printf \"%s %s\\n\" \"$a\" \"$b\")"], ["#!/bin/bash\n# Create a function that takes integers, floats, or strings representing\n# real numbers, and returns the larger variable in its given variable type.\n# Return None if the values are equal.\n# Note: If a real number is represented as a string, the floating point might be . or ,\n# >>> $(compare_one \"1\" \"2.5\")\n# \"2.5\"\n# >>> $(compare_one \"1\" \"2,3\")\n# \"2,3\"\n# >>> $(compare_one \"5,1\" \"6\")\n# \"6\"\n# >>> $(compare_one \"1\" \"1\")\n# \"None\"\n#\n# $1 is an argument\n# $2 is an argument\ncompare_one() {\n    local a=$1\n    local b=$2\n    if [[ $a == $b ]]\n    then\n        return $a\n    elif [[ $a < $b ]]\n    then\n        return $a\n    elif [[ $a > $b ]]\n    then\n        return $b\n    else\n        return \"None\"\n    fi"], ["#!/bin/bash\n# Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n# Example\n# >>> $(is_equal_to_sum_even \"4\")\n# \"false\"\n# >>> $(is_equal_to_sum_even \"6\")\n# \"false\"\n# >>> $(is_equal_to_sum_even \"8\")\n# \"true\"\n#\n# $1 is an integer\nis_equal_to_sum_even() {\n  local n=$1\n  local sum_of_even_numbers=0\n  for ((i=0; i<4; i++)); do\n    local even_number=$((n - 2*i))\n    if ((even_number > 0)); then\n      sum_of_even_numbers=$((sum_of_even_numbers + even_number))\n    fi\n  done\n  if ((sum_of_even_numbers > 0)); then\n    return \"true\"\n  else\n    return \"false\"\n  fi"], ["#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial \"4\")\n# \"288\"\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    local n=$1\n    local brazilian_factorial=$((n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*"], ["#!/bin/bash\n# Given a string text, replace all spaces in it with underscores, \n# and if a string has more than 2 consecutive spaces, \n# then replace all consecutive spaces with - \n# >>> $(fix_spaces \" Example\")\n# \"Example\"\n# >>> $(fix_spaces \" Example 1\")\n# \"Example_1\"\n# >>> $(fix_spaces \" Example 2\")\n# \"_Example_2\"\n# >>> $(fix_spaces \" Example 3\")\n# \"_Example-3\"\n#\n# $1 is a string\nfix_spaces() {\n    local text=$1\n    local -d \"$1\"\n    local -i \"$1\"\n    local -a \"$1\"\n    local -z \"$1\"\n    local -r \"$1\"\n    local -t \"$1\"\n    local -o \"$1\"\n    local -e \"$1\"\n    local -f \"$1\"\n    local -g \"$1\"\n    local -h \"$1\"\n    local -k \"$1\"\n    local -l \"$1\"\n    local -m \"$1\"\n    local -n \"$1\"\n    local -p \"$1\"\n    local -q \"$1\"\n    local -r \"$1\"\n    local -s \"$1\"\n    local -t \"$1\"\n    local -u \"$1\"\n    local -v \"$1\"\n    local -w \"$1\"\n    local -x \"$1\"\n    local -y \"$1\"\n    local -z \"$1\"\n    local -a \"$1\"\n    local -b \"$1\"\n    local -c \"$1\"\n    local -d \"$1\"\n    local -e \"$1\"\n    local -f \"$1\"\n    local -g \"$1\"\n    local -h \"$1\"\n    local -i \"$1\"\n    local -j \"$1\"\n    local -k \"$1\"\n    local -l \"$1\"\n    local -m \"$1\"\n    local -n \"$1\"\n    local -o \"$1\"\n    local -p \"$1\"\n    local -q \"$1\"\n    local -r \"$1\"\n    local -s \"$1\"\n    local -t \"$1\"\n    local"], ["#!/bin/bash\n# Create a function which takes a string representing a file's name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n# A file's name is considered to be valid if and only if all the following conditions \n# are met:\n# - There should not be more than three digits ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring before the dot should not be empty, and it starts with a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file_name=$1\n  local file_name_check_result=$(file -b \"$file_name\" | grep -q \"^[a-z]\")\n  if [ \"$file_name_check_result\" = \"No\" ]; then\n    return 1\n  fi\n  return 0"], ["#!/bin/bash\n# \"\n# This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n# multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n# change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n# Examples:\n# >>> lst\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> lst\n# []\n# >>> lst\n# ['\"-1\"', '\"-5\"', '\"2\"', '\"-1\"', '\"-5\"']\n#\n# $1 is a space-separated list\nsum_squares() {\n    local lst=$1\n    local sum=0\n    for (( i=0; i<${#lst}; i++ )); do\n        if [ -0${i:0:3} -0${i:0:4} -0${i:0:5} -0${i:0:6} -0${i:0:7} -0${i:0:8} -0${i:0:9} -0${i:0:10} -0${i:0:11} -0${i:0:12} -0${i:0:13} -0${i:0:14} -0${i:0:15} -0${i:0:16} -0${i:0:17} -0${i:0:18} -0${i:0:19} -0${i:0:20} -0${i:0:21} -0${i:0:22} -0${i:0:23} -0${i:0:24} -0${i:0:25} -0${i:0:26} -0${i:0:27} -0${i:0:28} -0${i:0:29} -0${i:0:30} -0${i:0:31} -0${i:0"], ["#!/bin/bash\n# You are given a string representing a sentence,\n# the sentence contains some words separated by a space,\n# and you have to return a string that contains the words from the original sentence,\n# whose lengths are prime numbers,\n# the order of the words in the new string should be the same as the original one.\n# Example 1:\n# >>> $(words_in_sentence \"This is a test\")\n# \"is\"\n# Example 2:\n# >>> $(words_in_sentence \"lets go for swimming\")\n# \"go for\"\n# Constraints:\n# * 1 <= len(sentence) <= 100\n# * sentence contains only letters\n#\n# $1 is a string\nwords_in_sentence() {\n  local words_in_sentence_str\n  words_in_sentence_str=\"$(echo $1 | sed 's/ / /g')\"\n  local words_in_sentence_list\n  words_in_sentence_list=split $words_in_sentence_str \",\"\n  local word_lengths\n  word_lengths=map(length,words_in_sentence_list)\n  local prime_numbers\n  prime_numbers=map(length,words_in_sentence_list)\n  local new_words_list\n  new_words_list=map(length,words_in_sentence_list)\n  local new_words_str\n  new_words_str=\"$(join $new_words_list \",\")\"\n  return $(join $word_lengths $prime_numbers $new_words_str)"], ["#!/bin/bash\n# Your task is to implement a function that will simplify the expression\n# x * n. The function returns true if x * n evaluates to a whole number and false\n# otherwise. Both x and n, are string representation of a fraction, and have the following format,\n# <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n# You can assume that x, and n are valid fractions, and do not have zero as denominator.\n# >>> $(simplify \"1/5\" \"5/1\")\n# \"true\"\n# >>> $(simplify \"1/6\" \"2/1\")\n# \"false\"\n# >>> $(simplify \"7/10\" \"10/2\")\n# \"false\"\n#\n# $1 is a string\n# $2 is a string\nsimplify() {\n  local numerator=$1\n  local denominator=$2\n  local result=$1\n  local x=$2\n  local n=$1\n  local x_str=$x\n  local n_str=$n\n  local x_num=$numerator\n  local x_den=$denominator\n  local n_num=$numerator\n  local n_den=$denominator\n  local x_str_num=$x_str\n  local x_str_den=$x_den\n  local n_str_num=$n_str\n  local n_str_den=$n_den\n  local x_num_str=$x_num\n  local x_den_str=$x_den\n  local n_num_str=$n_num\n  local n_den_str=$n_den\n  local x_num_str_num=$x_num_str\n  local x_num_str_den=$x_num_str\n  local n_num_str_num=$n_num_str\n  local n_num_str_den=$n_num_str\n  local x_num_str_den_str=$x_num_str_den\n  local x_den_str_num=$x_den_str\n  local n_num_str_den_str=$n_num_str_den\n  local x_num_str_den"], ["#!/bin/bash\n# Write a function which sorts the given list of integers\n# in ascending order according to the sum of their digits.\n# Note: if there are several items with similar sum of their digits,\n# order them based on their index in original list.\n# For example:\n# >>> $(order_by_points \"1 11 -1 -11 -12\")\n# ['\"-1\"', '\"-11\"', '\"1\"', '\"-12\"', '\"11\"']\n# >>> $(order_by_points \"\")\n# []\n#\n# $1 is a space-separated list\norder_by_points() {\n    local a b c d e f\n    local sum_digits\n    local index\n    local sorted_list\n\n    # Read the input list\n    read -r -d '' a b c d e f\n\n    # Calculate the sum of the digits\n    sum_digits=$(echo $a | bc)\n\n    # Sort the list based on the sum of the digits\n    sorted_list=$(echo $a | sort -n -k 1,1 -k 2,2 -k 3,3 -k 4,4 -k 5,5 -k 6,6 -k 7,7 -k 8,8 -k 9,9 | uniq -c)\n\n    # Print the sorted list\n    printf '%s\\n' \"${sorted_list[@]}\""], ["#!/bin/bash\n# Write a function that takes an array of numbers as input and returns \n# the number of elements in the array that are greater than 10 and both \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# >>> $(specialFilter \"15 -73 14 -15\")\n# \"1\"\n# >>> $(specialFilter \"33 -2 -3 45 21 109\")\n# \"2\"\n#\n# $1 is a space-separated list\nspecialFilter() {\n  local args=\"$1\"\n  local args_str=\"$args\"\n  local args_list=()\n  local args_str_list=()\n  local args_list_str=\"$args_str\"\n  local args_list_str_list=()\n  local args_list_str_list_str=\"$args_list_str\"\n  local args_list_str_list_str_list=\"$args_list_str_list\"\n  local args_list_str_list_str_list_str=\"$args_list_str_list_str\"\n  local args_list_str_list_str_list_str_list=\"$args_list_str_list_str_list\"\n  local args_list_str_list_str_list_str_list_str=\"$args_list_str_list_str_list_str\"\n  local args_list_str_list_str_list_str_list_str_list=\"$args_list_str_list_str_list_str_list\"\n  local args_list_str_list_str_list_str_list_str_list_str=\"$args_list_str_list_str_list_str_list_str\"\n  local args_list_str_list_str_list_str_list_str_list_str_str=\"$args_list_str_list_str_list_str_list_str_str\"\n  local args_list_str_list_str_list_str_list_str_list_str_str_str=\"$args_list_str_list_str_list_str_list_str_"], ["#!/bin/bash\n# You are given a positive integer n. You have to create an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# >>> $(get_max_triples \"5\")\n# \"1\"\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local a=1\n  local max_triples=0\n  for ((i=1; i<=1000000; i++)); do\n    a=$((a*a-a+1))\n    if ((a % 3 == 0)); then\n      max_triples=$((max_triples+1))\n    fi\n  done\n  return $max_triples"], ["#!/bin/bash\n# There are eight planets in our solar system: the closerst to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names as strings planet1 and planet2. \n# The function should return a list containing all planets whose orbits are \n# located between the orbit of planet1 and the orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should return an empty list if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n    local planet1 planet2\n    read -r $1 $2\n    if [[ $1 == $2 ]]; then\n        return\n    fi\n    local planets\n    read -r -d '' planets\n    if [[ $planets == \"\" ]]; then\n        return\n    fi\n    local planets_sorted\n    read -r -d '' -n 1 planets_sorted\n    if [[ $planets_sorted == \"\" ]]; then\n        return\n    fi\n    local planets_sorted_sorted\n    read -r -d '' -n 1 planets_sorted_sorted\n    if [[ $planets_sorted_sorted == \"\" ]]; then\n        return\n    fi\n    local planets_sorted_sorted_sorted\n    read -r -d '' -n 1 planets_sorted_sorted_sorted\n    if [[ $planets_sorted_sorted_sorted == \"\" ]]; then\n        return\n    fi\n    local planets_sorted_sorted_sorted_sorted\n    read -r -d '' -n 1 planets_sorted"], ["#!/bin/bash\n# Write a function that accepts a list of strings as a parameter,\n# deletes the strings that have odd lengths from it,\n# and returns the resulted list with a sorted order,\n# The list is always a list of strings and never an array of numbers,\n# and it may contain duplicates.\n# The order of the list should be ascending by length of each word, and you\n# should return the list sorted by that rule.\n# If two words have the same length, sort the list alphabetically.\n# The function should return a list of strings in sorted order.\n# You may assume that all words will have the same length.\n# For example:\n# >>> $(list_sort \"aa a aaa\")\n# ['\"aa\"']\n# >>> $(list_sort \"ab a aaa cd\")\n# ['\"ab\"', '\"cd\"']\n#\n# $1 is a space-separated list\nsorted_list_sum() {\n  local list_sum\n  local list_sum_length\n  local list_sum_sorted\n  local list_sum_sorted_length\n  local list_sum_sorted_length_sorted\n  local list_sum_sorted_length_sorted_sorted\n  local list_sum_sorted_length_sorted_length\n  local list_sum_sorted_length_sorted_length_sorted\n  local list_sum_sorted_length_sorted_length_sorted_sorted\n  local list_sum_sorted_length_sorted_length_sorted_length\n  local list_sum_sorted_length_sorted_length_sorted_length_sorted\n  local list_sum_sorted_length_sorted_length_sorted_length_sorted_sorted\n  local list_sum_sorted_length_sorted_length_sorted_length_sorted_sorted_sorted\n  local list_sum_sorted_length_sorted_length_sorted_length_sorted_length_sorted_sorted_sorted\n  local list_sum_sorted_length_sorted_length_sorted_length_sorted_length_sorted_sorted_sorted_sorted\n  local list_sum_sorted_length_sorted_length_sorted_length_sorted_length_sorted_sorted_sorted_sorted_sorted\n  local list_sum_sorted_length_sorted_length_sorted_"], ["#!/bin/bash\n# A simple program which should return the value of x if n is \n# a prime number and should return the value of y otherwise.\n# Examples:\n# >>> $(x_or_y \"7\" \"34\" \"12\")\n# \"34\"\n# >>> $(x_or_y \"15\" \"8\" \"5\")\n# \"5\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nx_or_y() {\n    local x=$1\n    local y=$2\n    if [ $x -eq 0 ] ; then\n        if [ $y -eq 0 ] ; then\n            return 0\n        else\n            return 1\n        fi\n    else\n        return 1\n    fi"], ["#!/bin/bash\n# Given a list of numbers, return the sum of squares of the numbers\n# in the list that are odd. Ignore numbers that are negative or not integers.\n# >>> $(double_the_difference \"1 3 2 0\")\n# \"10\"\n# >>> $(double_the_difference \"-1 -2 0\")\n# \"0\"\n# >>> $(double_the_difference \"9 -2\")\n# \"81\"\n# >>> $(double_the_difference \"0\")\n# \"0\"\n# If the input list is empty, return 0.\n#\n# $1 is a space-separated list\ndouble_the_difference() {\n    local sum_of_squares_of_odd_numbers\n    local odd_numbers\n    local sum_of_squares_of_odd_numbers\n    local odd_numbers\n    local sum_of_squares_of_odd_numbers\n    local odd_numbers\n    local sum_of_squares_of_odd_numbers\n    local odd_numbers\n    local sum_of_squares_of_odd_numbers\n    local odd_numbers\n    local sum_of_squares_of_odd_numbers\n    local odd_numbers\n    local sum_of_squares_of_odd_numbers\n    local odd_numbers\n    local sum_of_squares_of_odd_numbers\n    local odd_numbers\n    local sum_of_squares_of_odd_numbers\n    local odd_numbers\n    local sum_of_squares_of_odd_numbers\n    local odd_numbers\n    local sum_of_squares_of_odd_numbers\n    local odd_numbers\n    local sum_of_squares_of_odd_numbers\n    local odd_numbers\n    local sum_of_squares_of_odd_numbers\n    local odd_numbers\n    local sum_of_squares_of_odd_numbers\n    local odd_numbers\n    local sum_of_squares_of_odd_numbers\n    local odd_numbers\n    local sum_of_squares_of_odd_numbers\n    local odd_numbers\n    local sum_of_squares_of_odd_numbers"], ["#!/bin/bash\n# I think we all remember that feeling when the result of some long-awaited\n# event is finally known. The feelings and thoughts you have at that moment are\n# definitely worth noting down and comparing.\n# Your task is to determine if a person correctly guessed the results of a number of matches.\n# You are given two arrays of scores and guesses of equal length, where each index shows a match. \n# Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n# the value is 0, and if not, the value is the absolute difference between the guess and the score.\n# example:\n# >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\")\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncompare() {\n    local guesses=$1\n    local scores=$2\n    local guess=$1\n    local score=$2\n    local guesses_length=$(( $#guesses ))\n    local scores_length=$(( $#scores ))\n    local guess_length=$(( $#guess ))\n    local guesses_array=$guesses[0:guesses_length]\n    local scores_array=$scores[0:scores_length]\n    local guess=$guess[0:guess_length]\n    local score=$score[0:scores_length]\n    local guesses_length_array=$guesses[guesses_length:guesses_length]\n    local scores_length_array=$scores[scores_length:scores_length]\n    local guesses_array_length=$guesses_length\n    local scores_array_length=$scores_length\n    local guesses_array_length_array=$guesses_"], ["#!/bin/bash\n# You will be given the name of a class (a string) and a list of extensions.\n# The extensions are to be used to load additional classes to the class. The\n# strength of the extension is as follows: Let CAP be the number of the uppercase\n# letters in the extension's name, and let SM be the number of lowercase letters \n# in the extension's name, the strength is given by the fraction CAP - SM. \n# You should find the strongest extension and return a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more extensions with the same strength, you should\n# choose the one that comes first in the list.\n# For example, if you are given \"Slices\" as the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local extensions=$2\n  local extension_strength=$(echo $class_name | awk -F. '{print $1}' | sort -n | tail -n 1)\n  local extension_strength_list=$2\n  local extension_strength_list_length=$#extension_strength_list\n  local extension_strength_list_str=$extension_strength_list\n  local extension_strength_list_str_length=$#extension_strength_list_str\n  local extension_strength_list_str_list=$extension_strength_list_str\n  local extension_strength_list_str_list_length=$#extension_strength_list_str_list\n  if [ $extension_strength_list_length -gt 0 ]; then\n    extension_strength_list_str_"], ["#!/bin/bash\n# You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n# >>> $(cycpattern_check \"abcd\" \"abd\")\n# \"false\"\n# >>> $(cycpattern_check \"hello\" \"ell\")\n# \"true\"\n# >>> $(cycpattern_check \"whassup\" \"psus\")\n# \"false\"\n# >>> $(cycpattern_check \"abab\" \"baa\")\n# \"true\"\n# >>> $(cycpattern_check \"efef\" \"eeff\")\n# \"false\"\n# >>> $(cycpattern_check \"himenss\" \"simen\")\n# \"true\"\n#\n# $1 is a string\n# $2 is a string\ncycpattern_check() {\n  local word1=\"$1\"\n  local word2=\"$2\"\n  local rotations=()\n  local rotated_word1=\"$word1\"\n  local rotated_word2=\"$word2\"\n  local rotated_word1_rotated_word2=\"$rotated_word1\"\n  local rotated_word1_rotated_word2_rotated_word1=\"$rotated_word1\"\n  local rotated_word2_rotated_word1=\"$rotated_word2\"\n  local rotated_word2_rotated_word1_rotated_word2=\"$rotated_word2\"\n  local rotated_word2_rotated_word1_rotated_word2_rotated_word2=\"$rotated_word2\"\n  local rotated_word2_rotated_word1_rotated_word2_rotated_word1_rotated_word2=\"$rotated_word2\"\n  local rotated_word2_rotated_word1_rotated_word2_rotated_word1_rotated_word2_rotated_word2=\"$rotated_word2\"\n  local rotated_word2_rotated_word1_rotated_word2_rotated_word1_rotated_word2_rotated_word1_rotated_word2_rotated_word2_rotated_word2=\"$rotated_word2\"\n  local rot"], ["#!/bin/bash\n# Given an integer. return a list that has the number of even and odd digits respectively.\n# Example:\n# >>> $(even_odd_count \"-12\")\n# ['\"1\"', '\"1\"']\n# >>> $(even_odd_count \"123\")\n# ['\"1\"', '\"2\"']\n#\n# $1 is an integer\neven_odd_count() {\n  local count=0\n  local num=$1\n  for ((i=0; i<$num; i++)); do\n    if [ $(($i%2)) -eq 0 ]; then\n      count=$((count+1))\n    fi\n  done\n  echo \"$count even digits\""], ["#!/bin/bash\n# Given a positive integer, obtain its roman numeral equivalent as a string,\n# and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n# >>> $(int_to_mini_roman \"19\")\n# \"xix\"\n# >>> $(int_to_mini_roman \"152\")\n# \"clii\"\n# >>> $(int_to_mini_roman \"426\")\n# \"cdxxvi\"\n#\n# $1 is an integer\nint_to_mini_roman() {\n  local num=$1\n  local mini_roman=\"\"\n  local roman=\"\"\n  if [ $num -gt 0 ]; then\n    for ((i=1; i<=num; i++)); do\n      if [ $i -eq 1 ]; then\n        mini_roman=$(echo $roman | sed 's/x/x/g' | sed 's/i/i/g' | sed 's/x/x/g' | sed 's/i/i/g' | sed 's/x/x/g' | sed 's/i/i/g' | sed 's/x/x/g' | sed 's/i/i/g' | sed 's/x/x/g' | sed 's/i/i/g' | sed 's/x/x/g' | sed 's/i/i/g' | sed 's/x/x/g' | sed 's/i/i/g' | sed 's/x/x/g' | sed 's/i/i/g' | sed 's/x/x/g' | sed 's/i/i/g' | sed 's/x/x/g' | sed 's/i/i/g' | sed 's/x/x/g' | sed 's/i/i/g' | sed 's/x/x/g' | sed 's/i/i/g' | sed 's/x/x/g' | sed 's/i/i/g' | sed 's/x/x/g"], ["#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return true if the three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# >>> $(right_angle_triangle \"3\" \"4\" \"5\")\n# \"true\"\n# >>> $(right_angle_triangle \"1\" \"2\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nright_angle_triangle() {\n  local a b c\n  a=$1\n  b=$2\n  c=$3\n  if (( $a > $b && $a > $c ) ||\n      ( $b > $a && $b > $c ) ||\n      ( $c > $a && $c > $b ) ) {\n    return 0\n  }\n  if (( $a > $b && $a > $c ) ||\n      ( $b > $a && $b > $c ) ||\n      ( $c > $a && $c > $b ) ) {\n    return 0\n  }\n  return 1"], ["#!/bin/bash\n# Write a function that accepts a list of strings.\n# The list contains different words. Return the word with maximum number\n# of unique characters. If multiple strings have maximum number of unique\n# characters, return the one which comes first in lexicographical order.\n# >>> $(find_max \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated list\nfind_max() {\n    local word=$1\n    local max_count=0\n    local max_word=word\n    for word in $word; do\n        local count=$(echo $word | wc -c)\n        if [ $count -gt $max_count ]; then\n            max_count=$count\n            max_word=$word\n        fi\n    done\n    return $max_word"], ["#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain number of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n# you should return an array of [ total number of eaten carrots after your meals,\n# the number of carrots left after your meals ]\n# if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n# >>> $(eat \"5\" \"6\" \"10\")\n# ['\"11\"', '\"4\"']\n# >>> $(eat \"4\" \"8\" \"9\")\n# ['\"12\"', '\"1\"']\n# >>> $(eat \"1\" \"10\" \"10\")\n# ['\"11\"', '\"0\"']\n# >>> $(eat \"2\" \"11\" \"5\")\n# ['\"7\"', '\"0\"']\n# Variables:\n# @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n# the number of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\neat() {\n  local number need remaining\n  read -r -d '' $1\n  read -r -d '' $2\n  read -r -d '' $3\n  if [ $number -lt $need ] ; then\n    read -r -d '' $number\n    read -r -d '' $need\n    read -r -d '' $remaining\n    if [ $number -gt $remaining ] ; then\n      read -r -d '' $number\n      read -r -d '' $need\n      read -r -d '' $remaining\n      if [ $number -gt $remaining ] ;"], ["#!/bin/bash\n# Given two lists operator, and operand. The first list has basic algebra operations, and \n# the second list is a list of integers. Use the two given lists to build the algebric \n# expression and return the evaluation of this expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is equal to the length of operand list minus one.\n# Operand is a list of of non-negative integers.\n# Operator list has at least one operator, and operand list has at least two operands.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ndo_algebra() {\n  local operator=()\n  local operand=()\n  local result=()\n  local i=0\n  while [[ $#operator -gt 0 ]]\n  do\n    local op=($i++)\n    local operand=($i++)\n    local result=($i++)\n    if [[ $op == '+' ]]\n    then\n      result=($result + $operand)\n    elif [[ $op == '-' ]]\n    then\n      result=($result - $operand)\n    elif [[ $op == '*' ]]\n    then\n      result=($result * $operand)\n    elif [[ $op == '/' ]]\n    then\n      result=($result / $operand)\n    elif [[ $op == '**' ]]\n    then\n      result=($result ** $operand)\n    fi\n  done\n  echo $result"], ["#!/bin/bash\n# You are given a string s.\n# if s[i] is a letter, reverse its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string contains no letters, reverse the string.\n# The function should return the resulted string.\n# Examples\n# >>> $(solve \"1234\")\n# \"4321\"\n# >>> $(solve \"ab\")\n# \"AB\"\n# >>> $(solve \"#a@C\")\n# \"#A@c\"\n#\n# $1 is a string\nsolve() {\n  local s=\"$1\"\n  local result=\"\"\n  while [[ -n \"$s\" ]] ; do\n    case \"$s\" in\n      \"a\") result=\"$result$s\"\n      ;;\n      \"b\") result=\"$result$s\"\n      ;;\n      \"c\") result=\"$result$s\"\n      ;;\n      \"d\") result=\"$result$s\"\n      ;;\n      \"e\") result=\"$result$s\"\n      ;;\n      \"f\") result=\"$result$s\"\n      ;;\n      \"g\") result=\"$result$s\"\n      ;;\n      \"h\") result=\"$result$s\"\n      ;;\n      \"i\") result=\"$result$s\"\n      ;;\n      \"j\") result=\"$result$s\"\n      ;;\n      \"k\") result=\"$result$s\"\n      ;;\n      \"l\") result=\"$result$s\"\n      ;;\n      \"m\") result=\"$result$s\"\n      ;;\n      \"n\") result=\"$result$s\"\n      ;;\n      \"o\") result=\"$result$s\"\n      ;;\n      \"p\") result=\"$result$s\"\n      ;;\n      \"q\") result=\"$result$s\"\n      ;;\n      \"r\") result=\"$result$s\"\n      ;;\n      \"s\") result=\"$result$s\"\n      ;;\n      \"t\") result=\"$result$s\"\n      ;;\n      \"u\") result=\"$result$s\"\n      ;;\n      \"v\") result=\"$result$s\"\n      ;;\n      \"w\") result=\"$result$s\"\n      ;;\n      \"x\") result=\"$result$s\"\n      ;;\n      \"y"], ["#!/bin/bash\n# Given a string 'text', return its md5 hash equivalent string.\n# If 'text' is an empty string, return None.\n# >>> $(string_to_md5 \"Hello world\")\n# \"3e25960a79dbc69b674cd4ec67a72c62\"\n#\n# $1 is a string\nstring_to_md5() {\n  local text=$1\n  local md5=$(( $text | md5sum ))\n  if [ $text == \"\" ]; then\n    return $md5\n  fi\n  return $md5"], ["#!/bin/bash\n# Given two positive integers a and b, return the even digits between a\n# and b, in ascending order.\n# For example:\n# >>> $(generate_integers \"2\" \"8\")\n# ['\"2\"', '\"4\"', '\"6\"', '\"8\"']\n# >>> $(generate_integers \"8\" \"2\")\n# ['\"2\"', '\"4\"', '\"6\"', '\"8\"']\n# >>> $(generate_integers \"10\" \"14\")\n# []\n#\n# $1 is an integer\n# $2 is an integer\ngenerate_integers() {\n  local a b\n  a=1\n  b=10\n  while [[ $a -lt $b ]] ; do\n    a=$((a*2))\n    b=$((b*2))\n  done\n  while [[ $a -le $b ]] ; do\n    echo \"$a\"\n    a=$((a+1))\n  done"]]