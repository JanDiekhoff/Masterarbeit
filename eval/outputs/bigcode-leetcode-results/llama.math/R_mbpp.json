[["\n# <func> # Python \n# Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch):\n    return s.replace(ch, '')\n\n# <func> # Python \n# Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch):\n    return s.replace(ch, '')\n\n# <func> # Python \n# Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch):\n    return s.replace(ch, '')\n\n# <func> # Python \n# Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch):\n    return s.replace(ch, '')\n\n# <func> # Python \n# Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch):\n    return s.replace(ch, '')\n\n# <func> # Python \n# Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch):\n    return s.replace(ch, '')\n\n# <func> # Python \n# Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch):\n    return s.replace(ch, '')\n\n# <func> # Python \n# Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch):\n    return s.replace(ch, '')\n\n# <func> # Python \n# Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch):\n    return s.replace(ch, '')\n\n# <func> # Python \n# Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch):\n    return s.replace(ch, '')\n\n# <func> # Python \n# Write a python function to remove first and last occurrence"], ["\n# <func> # Python \n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            M[i][j] += M[i][j]\n    return M\n\n# <func> # Python \n# Write a function to sort a given matrix in descending order according to the sum of its rows.\ndef sort_matrix_desc(M):\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            M[i][j] += M[i][j]\n    return M\n\n# <func> # Python \n# Write a function to sort a given matrix in ascending order according to the sum of its columns.\ndef sort_matrix_col(M):\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            M[i][j] += M[i][j]\n    return M\n\n# <func> # Python \n# Write a function to sort a given matrix in descending order according to the sum of its columns.\ndef sort_matrix_col_desc(M):\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            M[i][j] += M[i][j]\n    return M\n\n# <func> # Python \n# Write a function to sort a given matrix in ascending order according to the sum of its rows and columns.\ndef sort_matrix_row_col(M):\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            M[i][j] += M[i][j]\n    return M\n\n# <func> # Python \n# Write a function to sort a given matrix in descending order according to the sum of its rows and columns.\ndef sort_matrix_row_col_desc(M):\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            M[i][j] += M"], ["from collections import Counter\r\n\n# <func> # Python \n# Write a function to count the most common words in a dictionary.\ndef count_common(words):\n    # Create a dictionary\n    word_count = {}\n    # Loop through each word\n    for word in words:\n        # If word is not in the dictionary, add it\n        if word not in word_count:\n            word_count[word] = 1\n        # If word is in the dictionary, increment its count\n        else:\n            word_count[word] += 1\n    # Return the most common words\n    return max(word_count.items(), key=lambda x: x[1])\n\n# <func> # Python \n# Write a function to count the most common words in a list.\ndef count_most_common(words):\n    # Create a dictionary\n    word_count = {}\n    # Loop through each word\n    for word in words:\n        # If word is not in the dictionary, add it\n        if word not in word_count:\n            word_count[word] = 1\n        # If word is in the dictionary, increment its count\n        else:\n            word_count[word] += 1\n    # Return the most common words\n    return max(word_count.items(), key=lambda x: x[1])\n\n# <func> # Python \n# Write a function to count the most common words in a list of lists.\ndef count_most_common_lists(words):\n    # Create a dictionary\n    word_count = {}\n    # Loop through each word\n    for word in words:\n        # If word is not in the dictionary, add it\n        if word not in word_count:\n            word_count[word] = 1\n        # If word is in the dictionary, increment its count\n        else:\n            word_count[word] += 1\n    # Return the most common words\n    return max(word_count.items(), key=lambda x: x[1])\n\n# <func> # Python \n# Write a function to count the most common words in a list of tuples.\ndef count_most_common_tuples(words):\n    # Create a dictionary\n    word_"], ["\n# <func> # Python \n# Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h):\n    return l*b*h\n\n# <func> # Java\n# Write a Java function to find the volume of a triangular prism.\ndef find_Volume(l,b,h):\n    return l*b*h\n\n# <func> # C\n# Write a C function to find the volume of a triangular prism.\ndef find_Volume(l,b,h):\n    return l*b*h\n\n# <func> # C++\n# Write a C++ function to find the volume of a triangular prism.\ndef find_Volume(l,b,h):\n    return l*b*h\n\n# <func> # C#\n# Write a C# function to find the volume of a triangular prism.\ndef find_Volume(l,b,h):\n    return l*b*h\n\n# <func> # JavaScript\n# Write a JavaScript function to find the volume of a triangular prism.\nfunction find_Volume(l,b,h) {\n    return l*b*h;\n}\n\n# <func> # Rust\n# Write a Rust function to find the volume of a triangular prism.\nfn find_Volume(l: f64, b: f64, h: f64) -> f64 {\n    return l*b*h;\n}\n\n# <func> # Go\n# Write a Go function to find the volume of a triangular prism.\nfunc find_Volume(l: float64, b: float64, h: float64) -> float64 {\n    return l*b*h;\n}\n\n# <func> # Swift\n# Write a Swift function to find the volume of a triangular prism.\nfunc find_Volume(l: Double, b: Double, h: Double) -> Double {\n    return l*b*h;\n}\n\n# <func> # TypeScript\n# Write a TypeScript function to find the volume of a triangular prism.\nfunction find_Volume(l: number, b: number, h:"], ["import re\r\n\n# <func> # Python \n# Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\n    return text.split(' ')\n\n# <func> # Java\n# Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\n    return text.split(' ')\n\n# <func> # C\n# Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\n    return text.split(' ')\n\n# <func> # C++\n# Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\n    return text.split(' ')\n\n# <func> # C#\n# Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\n    return text.split(' ')\n\n# <func> # Go\n# Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\n    return text.split(' ')\n\n# <func> # Haskell\n# Write a function to split a string at lowercase letters.\nsplit_lowerstring :: String -> [String]\nsplit_lowerstring text = split_on ' ' text\n\n# <func> # JavaScript\n# Write a function to split a string at lowercase letters.\nsplit_lowerstring = text.split(' ')\n\n# <func> # Perl\n# Write a function to split a string at lowercase letters.\nsplit_lowerstring = split(' ', text)\n\n# <func> # PHP\n# Write a function to split a string at lowercase letters.\nsplit_lowerstring = explode(' ', text)\n\n# <func> # Python \n# Write a function to split a string at lowercase letters.\nsplit_lowerstring = text.split(' ')\n\n# <func> # R\n# Write a function to split a string at lowercase letters.\nsplit_lowerstring = strsplit(text, ' ')\n\n# <func> # Ruby\n# Write a function to split a string at lowercase letters.\nsplit_lowerstring = text.split(' ')\n\n# <func> # Scala\n# Write a function to split a string at lowercase letters."], ["import re\r\n\n# <func> # Python \n# Write a function to find sequences of lowercase letters joined with an underscore.\ndef text_lowercase_underscore(text):\n    return text.lower().replace(' ', '_')\n\n# <func> # Java\n# Write a method that takes a string and returns a string with all the characters in the string replaced by their ASCII value.\ndef text_ascii_replacement(text):\n    return text.replace(' ', '')\n\n# <func> # Python \n# Write a function that takes a string and returns a string with all the characters in the string replaced by their ASCII value.\ndef text_ascii_replacement(text):\n    return text.replace(' ', '')\n\n# <func> # JavaScript\n# Write a function that takes a string and returns a string with all the characters in the string replaced by their ASCII value.\ndef text_ascii_replacement(text):\n    return text.replace(' ', '')\n\n# <func> # C\n# Write a function that takes a string and returns a string with all the characters in the string replaced by their ASCII value.\ndef text_ascii_replacement(text):\n    return text.replace(' ', '')\n\n# <func> # C++\n# Write a function that takes a string and returns a string with all the characters in the string replaced by their ASCII value.\ndef text_ascii_replacement(text):\n    return text.replace(' ', '')\n\n# <func> # C#\n# Write a function that takes a string and returns a string with all the characters in the string replaced by their ASCII value.\ndef text_ascii_replacement(text):\n    return text.replace(' ', '')\n\n# <func> # Go\n# Write a function that takes a string and returns a string with all the characters in the string replaced by their ASCII value.\ndef text_ascii_replacement(text):\n    return text.replace(' ', '')\n\n# <func> # R\n# Write a function that takes a string and returns a string with all the characters in the string replaced by their ASCII value.\ndef text_ascii_replacement(text):\n    return text.replace(' ', '')\n\n# <func> # Ruby\n# Write a function"], ["\n# <func> # Python \n# Write a function to find the perimeter of a square.\ndef square_perimeter(a):\n    return 4 * a\n\n# Write a function to find the area of a square.\ndef square_area(a):\n    return a * a\n\n# Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(a, b):\n    return 2 * (a + b)\n\n# Write a function to find the area of a rectangle.\ndef rectangle_area(a, b):\n    return a * b\n\n# Write a function to find the perimeter of a circle.\ndef circle_perimeter(r):\n    return 2 * (3.14159 * r)\n\n# Write a function to find the area of a circle.\ndef circle_area(r):\n    return 3.14159 * r * r\n\n# Write a function to find the perimeter of a triangle.\ndef triangle_perimeter(a, b, c):\n    return 2 * (a + b + c)\n\n# Write a function to find the area of a triangle.\ndef triangle_area(a, b, c):\n    return (a + b + c) / 2\n\n# Write a function to find the perimeter of a trapezoid.\ndef trapezoid_perimeter(a, b, c, d):\n    return 2 * (a + b) + 2 * (c + d)\n\n# Write a function to find the area of a trapezoid.\ndef trapezoid_area(a, b, c, d):\n    return (a + b) * (c + d) / 2\n\n# Write a function to find the perimeter of a kite.\ndef kite_perimeter(a, b, c, d):\n    return 2 * (a + b) + 2 * (c + d)\n\n# Write a function to find the area of a kite.\ndef kite_area(a, b, c, d):\n    return (a + b) * (c + d) / 2\n\n# Write a function to find the perimeter of a"], ["NO_OF_CHARS = 256\r\n\n# <func> # Python \n# Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string):\n    return list(string)\n\n# <func> # Python \n# Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string):\n    return list(string)\n\n# <func> # Python \n# Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string):\n    return list(string)\n\n# <func> # Python \n# Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string):\n    return list(string)\n\n# <func> # Python \n# Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string):\n    return list(string)\n\n# <func> # Python \n# Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string):\n    return list(string)\n\n# <func> # Python \n# Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string):\n    return list(string)\n\n# <func> # Python \n# Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string):\n    return list(string)\n\n# <func> # Python \n# Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string):\n    return list(string)\n\n# <func> # Python \n# Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string):\n    return list(string)\n\n# <func> # Python \n# Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string):"], ["\n# <func> # Python \n# Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\n    for num in arraynums:\n        if num in arraynums:\n            return True\n    return False\n\n# <func> # Python \n# Write a function to find the length of the longest increasing subsequence in a given array.\ndef longest_increasing_subsequence(arraynums):\n    n = len(arraynums)\n    lis = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arraynums[i] > arraynums[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    return max(lis)\n\n# <func> # Python \n# Write a function to find the length of the longest subsequence that is a permutation of a given array.\ndef longest_permutation(arraynums):\n    n = len(arraynums)\n    lis = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arraynums[i] > arraynums[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    return max(lis)\n\n# <func> # Python \n# Write a function to find the length of the longest subsequence that is a permutation of a given array.\ndef longest_permutation(arraynums):\n    n = len(arraynums)\n    lis = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arraynums[i] > arraynums[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    return max(lis)\n\n# <func> # Python \n# Write a function to find the length of the longest subsequence that is a permutation"], ["\n# <func> # Python \n# Write a function to check if the given number is woodball or not.\ndef is_woodall(x):\n    if x > 1:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check if the given number is woodball or not.\ndef is_woodall(x):\n    if x > 1:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check if the given number is woodball or not.\ndef is_woodall(x):\n    if x > 1:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check if the given number is woodball or not.\ndef is_woodall(x):\n    if x > 1:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check if the given number is woodball or not.\ndef is_woodall(x):\n    if x > 1:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check if the given number is woodball or not.\ndef is_woodall(x):\n    if x > 1:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check if the given number is woodball or not.\ndef is_woodall(x):\n    if x > 1:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check if the given number is woodball or not.\ndef is_woodall(x):\n    if x > 1:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check if the given number is woodball or not.\ndef is_woodall(x):\n    if x > 1:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check"], ["\n# <func> # Python \n# Write a function to find m number of multiples of n.\ndef multiples_of_num(m,n):\n    multiples = []\n    for i in range(m):\n        multiples.append(n*i)\n    return multiples\n\n# <func> # Python \n# Write a function to find the sum of all multiples of 3 or 5 between 0 and 1000.\ndef sum_multiples(n):\n    sum = 0\n    for i in range(n):\n        if i%3 == 0 or i%5 == 0:\n            sum += i\n    return sum\n\n# <func> # Python \n# Write a function to find the sum of all multiples of 3 or 5 between 0 and 1000.\ndef sum_multiples(n):\n    sum = 0\n    for i in range(n):\n        if i%3 == 0 or i%5 == 0:\n            sum += i\n    return sum\n\n# <func> # Python \n# Write a function to find the sum of all multiples of 3 or 5 between 0 and 1000.\ndef sum_multiples(n):\n    sum = 0\n    for i in range(n):\n        if i%3 == 0 or i%5 == 0:\n            sum += i\n    return sum\n\n# <func> # Python \n# Write a function to find the sum of all multiples of 3 or 5 between 0 and 1000.\ndef sum_multiples(n):\n    sum = 0\n    for i in range(n):\n        if i%3 == 0 or i%5 == 0:\n            sum += i\n    return sum\n\n# <func> # Python \n# Write a function to find the sum of all multiples of 3 or 5 between 0 and 1000.\ndef sum_multiples(n):\n    sum = 0\n    for i in range(n):\n        if i%3 == 0 or i%5 == 0:\n            sum += i\n    return sum\n\n#"], ["\n# <func> # Python \n# Write a function to find the first duplicate element in a given array of integers.\ndef find_first_duplicate(nums):\n    # Write your code here\n    nums.sort()\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                return nums[i]\n    return None\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"], ["\n# <func> # Python \n# Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1):\n    max_sum = 0\n    for i in list1:\n        for j in i:\n            max_sum = max(max_sum, j)\n    return max_sum\n\n# <func> # Python \n# Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1):\n    max_sum = 0\n    for i in list1:\n        for j in i:\n            max_sum = max(max_sum, j)\n    return max_sum\n\n# <func> # Python \n# Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1):\n    max_sum = 0\n    for i in list1:\n        for j in i:\n            max_sum = max(max_sum, j)\n    return max_sum\n\n# <func> # Python \n# Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1):\n    max_sum = 0\n    for i in list1:\n        for j in i:\n            max_sum = max(max_sum, j)\n    return max_sum\n\n# <func> # Python \n# Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1):\n    max_sum = 0\n    for i in list1:\n        for j in i:\n            max_sum = max(max_sum, j)\n    return max_sum\n\n# <func> # Python \n# Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1):\n    max_sum = 0\n    for i in list1:\n        for j in i:\n            max_sum = max(max_sum, j)\n    return max_sum\n\n# <func> # Python \n# Write a python function to find the maximum"], ["\n# <func> # Python \n# Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary):\n    return int(binary, 2)\n\n# <func> # Java\n# Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary):\n    return int(binary, 2)\n\n# <func> # JavaScript\n# Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary):\n    return int(binary, 2)\n\n# <func> # Python \n# Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary):\n    return int(binary, 2)\n\n# <func> # C++\n# Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary):\n    return int(binary, 2)\n\n# <func> # C\n# Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary):\n    return int(binary, 2)\n\n# <func> # C++\n# Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary):\n    return int(binary, 2)\n\n# <func> # C\n# Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary):\n    return int(binary, 2)\n\n# <func> # C++\n# Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary):\n    return int(binary, 2)\n\n# <func> # C\n# Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary):\n    return int(binary, 2)\n\n# <func> # C++\n# Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary):\n    return int(binary, 2)\n\n# <func> # C\n#"], ["\n# <func> # Python \n# Write a python function to find the product of non-repeated elements in a given array.\ndef find_Product(arr,n):\n    # Write your code here\n    product = 1\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                product *= arr[j]\n    return product\n"], ["\n# <func> # Python \n# Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n    for i in range(len(test_list)):\n        if test_list[i] not in K:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n    for i in range(len(test_list)):\n        if test_list[i] not in K:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n    for i in range(len(test_list)):\n        if test_list[i] not in K:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n    for i in range(len(test_list)):\n        if test_list[i] not in K:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n    for i in range(len(test_list)):\n        if test_list[i] not in K:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n    for i in range(len(test_list)):\n        if test_list[i] not in K:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n    for i in range(len(test_list)):\n        if test_list[i] not in K:\n"], ["import re  \r\n\n# <func> # Python \n# Write a python function to remove all digits from a list of strings.\ndef remove(list):\n    return [word for word in list if not word.isdigit()]\n\n# <func> # Java\n# Write a Java function to remove all digits from a list of strings.\ndef remove(list):\n    return [word for word in list if not word.isdigit()]\n\n# <func> # C\n# Write a C function to remove all digits from a list of strings.\ndef remove(list):\n    return [word for word in list if not word.isdigit()]\n\n# <func> # C++\n# Write a C++ function to remove all digits from a list of strings.\ndef remove(list):\n    return [word for word in list if not word.isdigit()]\n\n# <func> # Go\n# Write a Go function to remove all digits from a list of strings.\nfunc remove(list) {\n    for _, word := range list {\n        if !word.IsDigit() {\n            list = append(list, word)\n        }\n    }\n    return list\n}\n\n# <func> # Haskell\n# Write a Haskell function to remove all digits from a list of strings.\nremove :: [String] -> [String]\nremove = map (\\word -> if not word.IsDigit() then word else [])\n\n# <func> # JavaScript\n# Write a JavaScript function to remove all digits from a list of strings.\nremove = function(list) {\n    return list.filter(word => !word.match(/[0-9]/))\n}\n\n# <func> # Lua\n# Write a Lua function to remove all digits from a list of strings.\nfunction remove(list)\n    return map(function(word) return word:sub(1, -1) end, list)\nend\n\n# <func> # Python \n# Write a Python function to remove all digits from a list of strings.\ndef remove(list):\n    return [word for word in list if not word.isdigit()]\n\n# <func> # R\n# Write a R function to remove all digits from a list of strings.\nremove <- function"], ["\n# <func> # Python \n# Write a python function to find binomial co-efficient.\ndef binomial_Coeff(n,k):\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n-k))\n\n# <func> # Java\n# Write a Java function to find binomial co-efficient.\ndef binomial_Coeff(n,k):\n    return (n!/(k!*(n-k)!))\n\n# <func> # C++\n# Write a C++ function to find binomial co-efficient.\ndef binomial_Coeff(n,k):\n    return factorial(n) / (factorial(k) * factorial(n-k))\n\n# <func> # JavaScript\n# Write a JavaScript function to find binomial co-efficient.\nfunction binomial_Coeff(n,k) {\n    return Math.factorial(n) / (Math.factorial(k) * Math.factorial(n-k));\n}\n\n# <func> # Python \n# Write a Python function to find binomial co-efficient.\ndef binomial_Coeff(n,k):\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n-k))\n\n# <func> # Java\n# Write a Java function to find binomial co-efficient.\ndef binomial_Coeff(n,k):\n    return (n!/(k!*(n-k)!))\n\n# <func> # C++\n# Write a C++ function to find binomial co-efficient.\ndef binomial_Coeff(n,k):\n    return factorial(n) / (factorial(k) * factorial(n-k))\n\n# <func> # JavaScript\n# Write a JavaScript function to find binomial co-efficient.\nfunction binomial_Coeff(n,k) {\n    return Math.factorial(n) / (Math.factorial(k) * Math.factorial(n-k));\n}\n\n# <func> # Python \n# Write a Python function to find binomial co-efficient.\ndef binomial"], ["\n# <func> # Python \n# Write a python function to find the element occurring odd number of times.\ndef get_Odd_Occurrence(arr,arr_size):\n    for i in range(0,arr_size):\n        for j in range(i+1,arr_size):\n            if arr[i] == arr[j]:\n                return arr[i]\n    return -1\n\n\n# +\n# Write a python function to find the element occurring odd number of times.\n# -\n\narr = [1,2,3,4,5,6,7,8,9,10]\narr_size = len(arr)"], ["\n# <func> # Python \n# Write a python function to count all the substrings starting and ending with same characters.\ndef check_Equality(s):\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        return 2\n    if len(s) == 3:\n        return 3\n    if len(s) == 4:\n        return 4\n    if len(s) == 5:\n        return 5\n    if len(s) == 6:\n        return 6\n    if len(s) == 7:\n        return 7\n    if len(s) == 8:\n        return 8\n    if len(s) == 9:\n        return 9\n    if len(s) == 10:\n        return 10\n    if len(s) == 11:\n        return 11\n    if len(s) == 12:\n        return 12\n    if len(s) == 13:\n        return 13\n    if len(s) == 14:\n        return 14\n    if len(s) == 15:\n        return 15\n    if len(s) == 16:\n        return 16\n    if len(s) == 17:\n        return 17\n    if len(s) == 18:\n        return 18\n    if len(s) == 19:\n        return 19\n    if len(s) == 20:\n        return 20\n    if len(s) == 21:\n        return 21\n    if len(s) == 22:\n        return 22\n    if len(s) == 23:\n        return 23\n    if len(s) == 24:\n        return 24\n    if len(s) == 25:\n        return 25\n    if len(s) == 26:\n        return 26\n    if len(s) =="], ["\n# <func> # Python \n# Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\ndef func(nums, k):\n    heap = []\n    for i in range(len(nums)):\n        heapq.heappush(heap, (nums[i], i))\n    while len(heap) > k:\n        heapq.heappop(heap)\n    return heap\n"], ["import math \r\n\n# <func> # Python \n# Write a python function to find the largest prime factor of a given number.\ndef max_Prime_Factors (n):\n    # Write your code here\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i==0:\n            n = n/i\n            if i == 2:\n                return i\n            if i > 2:\n                return i\n    return n\n\n# <func> # Python \n# Write a python function to find the sum of the digits of a given number.\ndef sum_Digits (n):\n    # Write your code here\n    if n <= 0:\n        return 0\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n\n# <func> # Python \n# Write a python function to find the sum of the digits of a given number.\ndef sum_Digits (n):\n    # Write your code here\n    if n <= 0:\n        return 0\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n\n# <func> # Python \n# Write a python function to find the sum of the digits of a given number.\ndef sum_Digits (n):\n    # Write your code here\n    if n <= 0:\n        return 0\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n\n# <func> # Python \n# Write a python function to find the sum of the digits of a given number.\ndef sum_Digits (n):\n    # Write your code here\n    if n <= 0:\n        return 0\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n"], ["\n# <func> # Python \n# Write a python function to convert a decimal number to binary number.\ndef decimal_To_Binary(N):\n    # Write your code here\n    binary_number = bin(N)\n    return binary_number\n\n# <func> # Python \n# Write a python function to convert a hexadecimal number to binary number.\ndef hexadecimal_To_Binary(N):\n    # Write your code here\n    binary_number = bin(N)\n    return binary_number\n\n# <func> # Python \n# Write a python function to convert a hexadecimal number to decimal number.\ndef hexadecimal_To_Decimal(N):\n    # Write your code here\n    decimal_number = int(N, 16)\n    return decimal_number\n\n# <func> # Python \n# Write a python function to convert a hexadecimal number to octal number.\ndef hexadecimal_To_Octal(N):\n    # Write your code here\n    octal_number = oct(N)\n    return octal_number\n\n# <func> # Python \n# Write a python function to convert a hexadecimal number to decimal number.\ndef hexadecimal_To_Decimal(N):\n    # Write your code here\n    decimal_number = int(N, 16)\n    return decimal_number\n\n# <func> # Python \n# Write a python function to convert a hexadecimal number to octal number.\ndef hexadecimal_To_Octal(N):\n    # Write your code here\n    octal_number = int(N, 16)\n    return octal_number\n\n# <func> # Python \n# Write a python function to convert a hexadecimal number to decimal number.\ndef hexadecimal_To_Decimal(N):\n    # Write your code here\n    decimal_number = int(N, 16)\n    return decimal_number\n\n# <func> # Python \n# Write a python function to convert a hexadecimal number to octal number.\ndef hexadecimal_To_Octal(N):\n    # Write your code here\n    oct"], ["\n# <func> # Python \n# Write a python function to find the missing number in a sorted array.\ndef find_missing(ar,N):\n    for i in range(N):\n        if i not in ar:\n            return i\n    return N\n\n# <func> # C++\n# Write a function to find the missing number in a sorted array.\n#\n# Input:\n#   - An array of integers.\n#   - An integer N.\n# Output:\n#   - The missing number in the array.\n#\n# Example:\n#   - Input:\n#       - [1, 3, 5, 7, 9]\n#       - 5\n#   - Output:\n#       - 3\n#\n# Explanation:\n#   - The missing number in the array is 3.\n#\n# Note:\n#   - The array is sorted in ascending order.\n#   - 1 <= N <= 10^4\n#\n# Hints:\n#   - Use the formula for the sum of the first n numbers.\n#   - Use the formula for the sum of the first n numbers.\n#\n#\n\n# +\n# <func> # Python \n# Write a function to find the missing number in a sorted array.\n#\n# Input:\n#   - An array of integers.\n#   - An integer N.\n# Output:\n#   - The missing number in the array.\n#\n# Example:\n#   - Input:\n#       - [1, 3, 5, 7, 9]\n#       - 5\n#   - Output:\n#       - 3\n#\n# Explanation:\n#   - The missing number in the array is 3.\n#\n# Note:\n#   - The array is sorted in ascending order.\n#   - 1 <= N <= 10^4\n#\n# Hints:\n#   - Use the formula for the sum of the first n numbers.\n#   - Use the formula for the sum of the first n numbers.\n#\n#\n\n# +\n# <func> # Python \n# Write a function to find the missing number in a sorted array.\n#\n"], ["\n# <func> # Python \n# Write a function to find the n-th rectangular number.\ndef find_rect_num(n):\n    # Your code here\n    return n * (n + 1) // 2\n\n# Test your function"], ["\n# <func> # Python \n# Write a python function to find the nth digit in the proper fraction of two given numbers.\ndef find_Nth_Digit(p,q,N):\n    # Check if the input is valid\n    if p < 0 or q < 0 or p > 100 or q > 100:\n        return \"Invalid input\"\n    # Calculate the nth digit\n    nth_digit = (p * q) % 10\n    # Return the nth digit\n    return nth_digit\n\n# Driver code\np = 100\nq = 100\nN = 10"], ["\n# <func> # Python \n# Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n    # Your code here\n    pass\n\n# <func> # Python \n# Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n    # Your code here\n    pass\n\n# <func> # Python \n# Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n    # Your code here\n    pass\n\n# <func> # Python \n# Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n    # Your code here\n    pass\n\n# <func> # Python \n# Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n    # Your code here\n    pass\n\n# <func> # Python \n# Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n    # Your code here\n    pass\n\n# <func> # Python \n# Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n    # Your code here\n    pass\n\n# <func> # Python \n# Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n    # Your code here\n    pass\n\n# <func> # Python \n# Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n    # Your code here\n    pass\n\n# <func> # Python \n# Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n    # Your code here\n    pass\n\n# <func> # Python \n# Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed"], ["\n# <func> # Python \n# Write a function to find the division of first even and odd number of a given list.\ndef div_even_odd(list1):\n    even_odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even_odd.append(i)\n        else:\n            odd_list = list(filter(lambda x: x % 2 != 0, list1))\n            even_odd.append(odd_list[0])\n    return even_odd\n\n# <func> # Python \n# Write a function to find the sum of all odd numbers in a given list.\ndef sum_odd(list1):\n    odd_sum = 0\n    for i in list1:\n        if i % 2 != 0:\n            odd_sum += i\n    return odd_sum\n\n# <func> # Python \n# Write a function to find the sum of all even numbers in a given list.\ndef sum_even(list1):\n    even_sum = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_sum += i\n    return even_sum\n\n# <func> # Python \n# Write a function to find the sum of all numbers in a given list.\ndef sum_list(list1):\n    sum = 0\n    for i in list1:\n        sum += i\n    return sum\n\n# <func> # Python \n# Write a function to find the sum of all numbers in a given list, excluding the numbers in the list.\ndef sum_exclude(list1):\n    sum = 0\n    for i in list1:\n        if i % 2 == 0:\n            sum += i\n    return sum\n\n# <func> # Python \n# Write a function to find the sum of all numbers in a given list, excluding the numbers in the list.\ndef sum_exclude(list1):\n    sum = 0\n    for i in list1:\n        if i % 2 == 0:\n            sum += i\n    return sum\n\n# <func> # Python \n# Write a function to find the sum of all numbers"], ["import heapq\r\nfrom collections import Counter\r\n\n# <func> # Python \n# Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\ndef rearange_string(S):\n    # Write your code here\n    if len(S) == 0:\n        return True\n    if len(S) == 1:\n        return True\n    if S[0] == S[1]:\n        return False\n    for i in range(len(S)-1):\n        if S[i] == S[i+1]:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\ndef rearange_string(S):\n    # Write your code here\n    if len(S) == 0:\n        return True\n    if len(S) == 1:\n        return True\n    if S[0] == S[1]:\n        return False\n    for i in range(len(S)-1):\n        if S[i] == S[i+1]:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\ndef rearange_string(S):\n    # Write your code here\n    if len(S) == 0:\n        return True\n    if len(S) == 1:\n        return True\n    if S[0] == S[1]:\n        return False\n    for i in range(len(S)-1):\n        if S[i] == S[i+1]:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\ndef rearange_string(S):\n    # Write your code here\n    if len(S) == 0:\n        return True\n    if len(S) == 1:\n        return"], ["from collections import Counter\r\nfrom itertools import chain\r\n\n# <func> # Python \n# Write a function to find frequency of the elements in a given list of lists using collections module.\ndef freq_element(nums):\n    freq = collections.Counter(nums)\n    return freq\n\n# <func> # Python \n# Write a function to find the maximum value in a given list of lists using collections module.\ndef max_value(nums):\n    max_value = max(nums)\n    return max_value\n\n# <func> # Python \n# Write a function to find the minimum value in a given list of lists using collections module.\ndef min_value(nums):\n    min_value = min(nums)\n    return min_value\n\n# <func> # Python \n# Write a function to find the sum of all elements in a given list of lists using collections module.\ndef sum_list(nums):\n    sum_list = 0\n    for num in nums:\n        sum_list += num\n    return sum_list\n\n# <func> # Python \n# Write a function to find the sum of all elements in a given list of lists using collections module.\ndef sum_list(nums):\n    sum_list = 0\n    for num in nums:\n        sum_list += num\n    return sum_list\n\n# <func> # Python \n# Write a function to find the maximum value in a given list of lists using collections module.\ndef max_value(nums):\n    max_value = max(nums)\n    return max_value\n\n# <func> # Python \n# Write a function to find the minimum value in a given list of lists using collections module.\ndef min_value(nums):\n    min_value = min(nums)\n    return min_value\n\n# <func> # Python \n# Write a function to find the sum of all elements in a given list of lists using collections module.\ndef sum_list(nums):\n    sum_list = 0\n    for num in nums:\n        sum_list += num\n    return sum_list\n\n# <func> # Python \n# Write a function"], ["\n# <func> # Python \n# Write a function to filter even numbers using lambda function.\ndef filter_evennumbers(nums):\n    return [num for num in nums if num % 2 == 0]\n\n# Testing # Python \n# Testing the function with the given list."], ["\n# <func> # Python \n# Write a python function to find the sum of repeated elements in a given array.\ndef find_Sum(arr,n):\n    arr.sort()\n    sum = 0\n    for i in range(n):\n        sum += arr[i]\n    return sum\n\n# <func> # Java\n# Write a Java function to find the sum of repeated elements in a given array.\npublic static int findSum(int[] arr, int n) {\n    Arrays.sort(arr);\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\n# <func> # C\n# Write a C function to find the sum of repeated elements in a given array.\nint findSum(int[] arr, int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\n# <func> # C++\n# Write a C++ function to find the sum of repeated elements in a given array.\nint findSum(int arr[], int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\n# <func> # C#\n# Write a C# function to find the sum of repeated elements in a given array.\npublic static int findSum(int[] arr, int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\n# <func> # Go\n# Write a Go function to find the sum of repeated elements in a given array.\nfunc findSum(arr []int, n int) int {\n    sum := 0\n    for _, num := range arr {\n        sum += num\n    }\n    return sum\n}\n\n# <func> # Haskell\n# Write a Haskell function to find the sum of repeated elements in a given array"], ["import re\r\n\n# <func> # Python \n# Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\n    # Your code here\n    # You can use the following regex pattern to find sequences of lowercase letters joined with an underscore:\n    # text = text.replace(' ', '_')\n    # Your code here\n    return text\n\n\n# <func> # Python \n# Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\n    # Your code here\n    # You can use the following regex pattern to find sequences of lowercase letters joined with an underscore:\n    # text = text.replace(' ', '_')\n    # Your code here\n    return text\n\n\n# <func> # Python \n# Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\n    # Your code here\n    # You can use the following regex pattern to find sequences of lowercase letters joined with an underscore:\n    # text = text.replace(' ', '_')\n    # Your code here\n    return text\n\n\n# <func> # Python \n# Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\n    # Your code here\n    # You can use the following regex pattern to find sequences of lowercase letters joined with an underscore:\n    # text = text.replace(' ', '_')\n    # Your code here\n    return text\n\n\n# <func> # Python \n# Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\n    # Your code here\n    # You can use the following regex pattern to find sequences of lowercase letters joined with an underscore:\n    # text = text.replace(' ', '_')\n    # Your code here\n    return text\n\n\n# <func> # Python \n# Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\n    # Your code here\n    # You can use the following regex pattern to find sequences of lowercase letters joined with an"], ["import re\r\n\n# <func> # Python \n# Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n    # Your code here\n    return text.startswith(word)\n\n# <func> # Java\n# Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n    # Your code here\n    return text.startsWith(word)\n\n# <func> # C\n# Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n    # Your code here\n    return text.startsWith(word)\n\n# <func> # C++\n# Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n    # Your code here\n    return text.startsWith(word)\n\n# <func> # JavaScript\n# Write a function that matches a word at the beginning of a string.\nfunction text_match_string(text) {\n    return text.startsWith(word);\n}\n\n# <func> # Python \n# Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n    # Your code here\n    return text.startswith(word)\n\n# <func> # Java\n# Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n    # Your code here\n    return text.startsWith(word)\n\n# <func> # C\n# Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n    # Your code here\n    return text.startsWith(word)\n\n# <func> # C++\n# Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n    # Your code here\n    return text.startsWith(word)\n\n# <func> # JavaScript\n# Write a function that matches a word at the beginning of a string.\nfunction text_match_string(text) {\n    return text.startsWith(word);\n}\n\n# <func> # Python \n"], ["\n# <func> # Python \n# Write a function to find the gcd of the given array elements.\ndef find_gcd(x, y):\n    while(y):\n        x, y = y, x % y\n    return x\n\n# <func> # Python \n# Write a function to find the lcm of the given array elements.\ndef find_lcm(x, y):\n    while(x > 0):\n        x, y = y, x % y\n    return x\n\n# <func> # Python \n# Write a function to find the sum of all the elements in the given array.\ndef sum_elements(x):\n    sum = 0\n    for i in x:\n        sum += i\n    return sum\n\n# <func> # Python \n# Write a function to find the product of all the elements in the given array.\ndef product_elements(x):\n    product = 1\n    for i in x:\n        product *= i\n    return product\n\n# <func> # Python \n# Write a function to find the sum of all the elements in the given array.\ndef sum_elements(x):\n    sum = 0\n    for i in x:\n        sum += i\n    return sum\n\n# <func> # Python \n# Write a function to find the product of all the elements in the given array.\ndef product_elements(x):\n    product = 1\n    for i in x:\n        product *= i\n    return product\n\n# <func> # Python \n# Write a function to find the sum of all the elements in the given array.\ndef sum_elements(x):\n    sum = 0\n    for i in x:\n        sum += i\n    return sum\n\n# <func> # Python \n# Write a function to find the product of all the elements in the given array.\ndef product_elements(x):\n    product = 1\n    for i in x:\n        product *= i\n    return product\n\n# <func> # Python \n# Write a function to find the sum of all the elements in the given array.\ndef sum_elements(x):\n    sum = 0\n    for i in x:\n"], ["\n# <func> # Python \n# Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n    for i in data:\n        if i == data[0]:\n            return False\n    return True\n\n# <func> # Python \n# Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n    for i in data:\n        if i == data[0]:\n            return False\n    return True\n\n# <func> # Python \n# Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n    for i in data:\n        if i == data[0]:\n            return False\n    return True\n\n# <func> # Python \n# Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n    for i in data:\n        if i == data[0]:\n            return False\n    return True\n\n# <func> # Python \n# Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n    for i in data:\n        if i == data[0]:\n            return False\n    return True\n\n# <func> # Python \n# Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n    for i in data:\n        if i == data[0]:\n            return False\n    return True\n\n# <func> # Python \n# Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n    for i in data:\n        if i == data[0]:\n            return False\n    return True\n\n# <func> # Python \n# Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n    for i in data:\n        if i == data[0]:\n            return False\n    return True\n\n# <func> # Python \n# Write a python function"], ["\n# <func> # Python \n# Write a python function to find the last digit when factorial of a divides factorial of b.\ndef compute_Last_Digit(A,B):\n    if A == 1:\n        return B\n    else:\n        return compute_Last_Digit(A,B*A)\n"], ["\n# <func> # Python \n# Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\n    return n & 1\n\n# <func> # Python \n# Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n):\n    return n & 2\n\n# <func> # Python \n# Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\n    return n & 1\n\n# <func> # Python \n# Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n):\n    return n & 2\n\n# <func> # Python \n# Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\n    return n & 1\n\n# <func> # Python \n# Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n):\n    return n & 2\n\n# <func> # Python \n# Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\n    return n & 1\n\n# <func> # Python \n# Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n):\n    return n & 2\n\n# <func> # Python \n# Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\n    return n & 1\n\n# <func> # Python \n# Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n):\n    return n & 2\n\n# <func> # Python \n# Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\n    return n & 1\n\n# <func> # Python \n# Write a python function to set all even bits of a given number.\ndef"], ["\n# <func> # Python \n# Write a function to extract every first or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n    return [nums[i][0] for i in range(N)]\n\n# <func> # Python \n# Write a function to extract every second or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n    return [nums[i][1] for i in range(N)]\n\n# <func> # Python \n# Write a function to extract every third or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n    return [nums[i][2] for i in range(N)]\n\n# <func> # Python \n# Write a function to extract every fourth or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n    return [nums[i][3] for i in range(N)]\n\n# <func> # Python \n# Write a function to extract every fifth or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n    return [nums[i][4] for i in range(N)]\n\n# <func> # Python \n# Write a function to extract every sixth or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n    return [nums[i][5] for i in range(N)]\n\n# <func> # Python \n# Write a function to extract every seventh or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n    return [nums[i][6] for i in range(N)]\n\n# <func> # Python \n# Write a function to extract every eighth or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n    return [nums[i][7] for i in range(N)]\n\n# <func> # Python \n# Write a function to extract every ninth or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n    return ["], ["\n# <func> # Python \n# Write a function to find the list with minimum length using lambda function.\ndef min_length_list(input_list):\n    min_length = len(input_list)\n    for i in range(len(input_list)):\n        for j in range(i+1, len(input_list)):\n            if input_list[i] == input_list[j]:\n                min_length = min(min_length, len(input_list))\n    return min_length\n"], ["\n# <func> # Python \n# Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\n    if (x == y == z):\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to print check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\n    if (x == y or x == z or y == z):\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to print check if the triangle is scalene or not.\ndef check_scalene(x,y,z):\n    if (x != y or x != z or y != z):\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to print check if the triangle is right-angled or not.\ndef check_right_angled(x,y,z):\n    if (x != y or x != z or y != z):\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to print check if the triangle is obtuse or not.\ndef check_obtuse(x,y,z):\n    if (x != y or x != z or y != z):\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\n    if (x == y == z):\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to print check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\n    if (x == y or x == z or y == z):\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to print check if the triangle is scalene or not.\ndef check_scalene("], ["\n# <func> # Python \n# Write a function to caluclate area of a parallelogram.\ndef parallelogram_area(b,h):\n    return b*h\n\n# <func> # Java\n# Write a function to calculate area of a parallelogram.\ndef parallelogram_area(b,h):\n    return b*h\n\n# <func> # C\n# Write a function to calculate area of a parallelogram.\ndef parallelogram_area(b,h):\n    return b*h\n\n# <func> # C++\n# Write a function to calculate area of a parallelogram.\ndef parallelogram_area(b,h):\n    return b*h\n\n# <func> # C#\n# Write a function to calculate area of a parallelogram.\ndef parallelogram_area(b,h):\n    return b*h\n\n# <func> # Go\n# Write a function to calculate area of a parallelogram.\ndef parallelogram_area(b,h):\n    return b*h\n\n# <func> # Kotlin\n# Write a function to calculate area of a parallelogram.\ndef parallelogram_area(b,h):\n    return b*h\n\n# <func> # Lua\n# Write a function to calculate area of a parallelogram.\ndef parallelogram_area(b,h):\n    return b*h\n\n# <func> # Pascal\n# Write a function to calculate area of a parallelogram.\ndef parallelogram_area(b,h):\n    return b*h\n\n# <func> # Perl\n# Write a function to calculate area of a parallelogram.\ndef parallelogram_area(b,h):\n    return b*h\n\n# <func> # PHP\n# Write a function to calculate area of a parallelogram.\ndef parallelogram_area(b,h):\n    return b*h\n\n# <func> # Python 3\n# Write a function to calculate area of a parallelogram.\ndef parallelogram_area(b,h):\n    return"], ["\n# <func> # Python \n# Write a python function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n\n# <func> # Java\n# Write a Java function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return true\n    else:\n        return false\n\n# <func> # C\n# Write a C function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return true\n    else:\n        return false\n\n# <func> # Python \n# Write a python function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n\n# <func> # Java\n# Write a Java function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return true\n    else:\n        return false\n\n# <func> # C\n# Write a C function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return true\n    else:\n        return false\n\n# <func> # Python \n# Write a python function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n\n# <func> # Java\n# Write a Java function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n    if str[0] == str[-1]:\n        return true\n    else:"], ["\n# <func> # Python \n# Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n    my_list.sort(key=lambda x: (x, 0))\n\n\n# +\n# <func> # Python \n# Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n    my_list.sort(key=lambda x: (x, 0))\n\n\n# -\n\n# <func> # Python \n# Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n    my_list.sort(key=lambda x: (x, 0))\n\n\n# <func> # Python \n# Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n    my_list.sort(key=lambda x: (x, 0))\n\n\n# <func> # Python \n# Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n    my_list.sort(key=lambda x: (x, 0))\n\n\n# <func> # Python \n# Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n    my_list.sort(key=lambda x: (x, 0))\n\n\n# <func> # Python \n# Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n    my_list.sort(key=lambda x: (x, 0))\n\n\n# <func> # Python \n# Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n    my_list.sort(key=lambda x: (x, 0))\n\n\n# <func> # Python \n# Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n    my_list.sort(key=lambda x: (x, 0))\n\n\n# <func> # Python \n# Write a function to sort the given"], ["import math\r\n\n# <func> # Python \n# Write a function to find t-nth term of geometric series.\ndef tn_gp(a,n,r):\n    t = 1\n    for i in range(n):\n        t = t*(r)\n    return t\n\n# <func> # Python \n# Write a function to find n-th term of geometric series.\ndef nth_gp(a,n,r):\n    t = 1\n    for i in range(n):\n        t = t*(r)\n    return t\n\n# <func> # Python \n# Write a function to find n-th term of geometric series.\ndef nth_gp(a,n,r):\n    t = 1\n    for i in range(n):\n        t = t*(r)\n    return t\n\n# <func> # Python \n# Write a function to find n-th term of geometric series.\ndef nth_gp(a,n,r):\n    t = 1\n    for i in range(n):\n        t = t*(r)\n    return t\n\n# <func> # Python \n# Write a function to find n-th term of geometric series.\ndef nth_gp(a,n,r):\n    t = 1\n    for i in range(n):\n        t = t*(r)\n    return t\n\n# <func> # Python \n# Write a function to find n-th term of geometric series.\ndef nth_gp(a,n,r):\n    t = 1\n    for i in range(n):\n        t = t*(r)\n    return t\n\n# <func> # Python \n# Write a function to find n-th term of geometric series.\ndef nth_gp(a,n,r):\n    t = 1\n    for i in range(n):\n        t = t*(r)\n    return t\n\n# <func> # Python \n# Write a function to find n-th term of geometric series.\ndef nth_gp(a,n,r):\n    t = 1\n    for i in range(n):"], ["\n# <func> # Python \n# Write a python function to check if a given number is one less than twice its reverse.\ndef rev(num):\n    return num - 2 * num[::-1]\n\n# Testing"], ["\n# <func> # Python \n# Write a python function to find the largest number that can be formed with the given digits.\ndef find_Max_Num(arr,n):\n    max_num = 0\n    for i in range(n):\n        for j in range(n-1):\n            if(arr[j] > arr[j+1]):\n                max_num = max(max_num,arr[j])\n    return max_num\n\n# <func> # Java\n# Write a Java function to find the largest number that can be formed with the given digits.\npublic static int findMaxNum(int[] arr, int n) {\n    int maxNum = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                maxNum = Math.max(maxNum, arr[j]);\n            }\n        }\n    }\n    return maxNum;\n}\n\n# <func> # C\n# Write a C function to find the largest number that can be formed with the given digits.\n# int findMaxNum(int arr[], int n) {\n#     int maxNum = 0;\n#     for (int i = 0; i < n; i++) {\n#         for (int j = 0; j < n - 1; j++) {\n#             if (arr[j] > arr[j + 1]) {\n#                 maxNum = Math.max(maxNum, arr[j]);\n#             }\n#         }\n#     }\n#     return maxNum;\n# }\n\n# <func> # C++\n# Write a C++ function to find the largest number that can be formed with the given digits.\n# int findMaxNum(int arr[], int n) {\n#     int maxNum = 0;\n#     for (int i = 0; i < n; i++) {\n#         for (int j = 0; j < n - 1; j++) {\n#             if (arr[j] > arr[j + 1]) {\n#                "], ["\n# <func> # Python \n# Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y):\n    if x<0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return False\n    elif x>0 and y<0:\n        return False\n    elif x>0 and y>0:\n        return True\n\n\n# +\n# Write a python function to check whether the given two integers have opposite sign or not.\n\ndef opposite_Signs(x,y):\n    if x<0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return False\n    elif x>0 and y<0:\n        return False\n    elif x>0 and y>0:\n        return True\n\n\n# +\n# Write a python function to check whether the given two integers have opposite sign or not.\n\ndef opposite_Signs(x,y):\n    if x<0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return False\n    elif x>0 and y<0:\n        return False\n    elif x>0 and y>0:\n        return True\n\n\n# +\n# Write a python function to check whether the given two integers have opposite sign or not.\n\ndef opposite_Signs(x,y):\n    if x<0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return False\n    elif x>0 and y<0:\n        return False\n    elif x>0 and y>0:\n        return True\n\n\n# +\n# Write a python function to check whether the given two integers have opposite sign or not.\n\ndef opposite_Signs(x,y):\n    if x<0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return False\n    elif x>0 and y<0:\n        return False\n    elif x>0 and y>0:\n        return True\n\n\n# +\n# Write a python function to check whether the given two integers have opposite sign or not.\n\ndef opposite"], ["\n# <func> # Python \n# Write a function to find the nth octagonal number.\ndef is_octagonal(n):\n    octagonal_numbers = [1, 8, 4, 1, 9, 5, 2, 10, 6, 3, 11, 7, 4, 12, 8, 5, 2, 13, 9, 6, 14, 10, 7, 15, 11, 8, 16, 12, 9, 17, 13, 10, 18, 14, 11, 19, 15, 12, 10, 20, 16, 13, 11, 21, 17, 14, 12, 18, 15, 13, 10, 22, 19, 16, 14, 11, 23, 17, 15, 12, 18, 13, 10, 24, 19, 16, 14, 11, 25, 17, 15, 12, 18, 13, 10, 26, 19, 16, 14, 11, 27, 17, 15, 12, 18, 13, 10, 28, 19, 16, 14, 11, 29, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 20, 21, 22, 23, 24, 25, 26, 27, 28,"], ["\n# <func> # Python \n# Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\ndef max_len_sub( arr, n):\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] - arr[j] > max_len:\n                max_len = arr[i] - arr[j]\n    return max_len\n\n# Driver Code\narr = [1, 2, 3, 4, 5]\nn = len(arr)"], ["from collections import \n# <func> # Python \n# Write a python function to count number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s,n):\n    # Your code here\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if s[i] + s[j] == s[n]:\n                count += 1\n    return count\n\n\n\n# +\n# Write a python function to count number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s,n):\n    # Your code here\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if s[i] + s[j] == s[n]:\n                count += 1\n    return count\n\n\n\n# +\n# Write a python function to count number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s,n):\n    # Your code here\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if s[i] + s[j] == s[n]:\n                count += 1\n    return count\n\n\n\n# +\n# Write a python function to count number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s,n):\n    # Your code here\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if s[i] + s[j] == s[n]:\n                count += 1\n    return count\n\n\n\n# +\n# Write a python function to count number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s,n):\n    # Your code here\n    count = 0\n    for i in range(n):\n        for j in range(i,n):\n            if s[i] + s[j] == s[n]:\n                count += 1\n    return count\n\n\n\n# +\n# Write a python function to count number"], ["\n# <func> # Python \n# Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n    return min(xs)\n\n# <func> # Java\n# Write a Java function to find smallest number in a list.\ndef smallest_num(xs):\n    return min(xs)\n\n# <func> # C\n# Write a C function to find smallest number in a list.\ndef smallest_num(xs):\n    return min(xs)\n\n# <func> # C++\n# Write a C++ function to find smallest number in a list.\ndef smallest_num(xs):\n    return min(xs)\n\n# <func> # JavaScript\n# Write a JavaScript function to find smallest number in a list.\nfunction smallest_num(xs) {\n    return Math.min(xs);\n}\n\n# <func> # Go\n# Write a Go function to find smallest number in a list.\nfunc smallestNum(xs) {\n    return math.Min(xs)\n}\n\n# <func> # R\n# Write a R function to find smallest number in a list.\nfunction smallestNum(xs) {\n    return min(xs)\n}\n\n# <func> # Ruby\n# Write a Ruby function to find smallest number in a list.\ndef smallest_num(xs)\n    return min(xs)\nend\n\n# <func> # Swift\n# Write a Swift function to find smallest number in a list.\nfunc smallestNum(xs) {\n    return min(xs)\n}\n\n# <func> # TypeScript\n# Write a TypeScript function to find smallest number in a list.\nfunction smallestNum(xs) {\n    return Math.min(xs)\n}\n\n# <func> # Visual Basic .NET\n# Write a Visual Basic .NET function to find smallest number in a list.\nFunction smallestNum(xs)\n    Return Math.Min(xs)\nEnd Function\n\n# <func> # Coffeescript\n# Write a Coffeescript function to find smallest number in a list.\nfunction smallestNum(xs) {\n    return Math.min(xs)\n}\n\n# <func> # Perl\n# Write a Perl function to find smallest number in a list.\n"], ["\n# <func> # Python \n# Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                max_diff = max(max_diff, test_list[i] - test_list[j])\n    return max_diff\n\n# <func> # Python \n# Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                max_diff = max(max_diff, test_list[i] - test_list[j])\n    return max_diff\n\n# <func> # Python \n# Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                max_diff = max(max_diff, test_list[i] - test_list[j])\n    return max_diff\n\n# <func> # Python \n# Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                max_diff = max(max_diff, test_list[i] - test_list[j])\n    return max_diff\n\n# <func> # Python \n# Write a function to"], ["\n# <func> # Python \n# Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\n# <func> # Python \n# Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\n# <func> # Python \n# Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\n# <func> # Python \n# Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\n# <func> # Python \n# Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\n# <func> # Python \n# Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\n# <func> # Python \n# Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\n# <func> # Python \n# Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\n# <func> # Python \n# Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\n# <func> # Python \n# Write a function to sort a list of tuples using lambda.\n"], ["\n# <func> # Python \n# Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n# <func> # Python \n# Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n# <func> # Python \n# Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n# <func> # Python \n# Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n# <func> # Python \n# Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n# <func> # Python \n# Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n# <func> # Python \n# Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n    if len(data_list) == 0:\n        return 0\n    else:\n       "], ["\n# <func> # Python \n# Write a python function to count positive numbers in a list.\ndef pos_count(list):\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n\n# <func> # Java\n# Write a Java function to count positive numbers in a list.\npublic int countPositive(int[] list) {\n    int count = 0;\n    for (int i : list) {\n        if (i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n# <func> # C\n# Write a C function to count positive numbers in a list.\nint countPositive(int list[]) {\n    int count = 0;\n    for (int i : list) {\n        if (i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n# <func> # C++\n# Write a C++ function to count positive numbers in a list.\nint countPositive(int list[]) {\n    int count = 0;\n    for (int i : list) {\n        if (i > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n# <func> # JavaScript\n# Write a JavaScript function to count positive numbers in a list.\nfunction countPositive(list) {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n# <func> # Python \n# Write a Python function to count positive numbers in a list.\ndef countPositive(list):\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n\n# <func> # Java\n# Write a Java function to count positive numbers in a list.\npublic int countPositive(int[] list) {\n    int count = 0;\n    for (int i : list) {\n        if (i > 0) {\n           "], ["\n# <func> # Python \n# Write a function to find the number of ways to partition a set of bell numbers.\ndef bell_number(n):\n    # Your code here\n    return n * (n - 1) // 2\n\n# Testing"], ["\n# <func> # Python \n# Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A):\n    # Write your code here\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            return False\n    return True\n\n# Driver Code"], ["\n# <func> # Python \n# Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n    return l[0] in s\n\n# <func> # Java\n# Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n    for i in range(0, len(s)):\n        if l[0] == s[i]:\n            return True\n    return False\n\n# <func> # JavaScript\n# Write a function to check whether a list contains the given sublist or not.\nfunction is_sublist(l, s) {\n    for (let i = 0; i < s.length; i++) {\n        if (l[0] === s[i]) {\n            return true;\n        }\n    }\n    return false;\n}\n\n# <func> # Python 3\n# Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n    for i in range(0, len(s)):\n        if l[0] == s[i]:\n            return True\n    return False\n\n# <func> # Java\n# Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n    for i in range(0, len(s)):\n        if l[0] == s[i]:\n            return True\n    return False\n\n# <func> # JavaScript\n# Write a function to check whether a list contains the given sublist or not.\nfunction is_sublist(l, s) {\n    for (let i = 0; i < s.length; i++) {\n        if (l[0] === s[i]) {\n            return true;\n        }\n    }\n    return false;\n}\n\n# <func> # Python 3\n# Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n    for i in range(0, len(s)):\n        if l[0] == s[i]:\n            return True\n    return False\n\n"], ["\n# <func> # Python \n# Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\n    if len(Input) != k:\n        return False\n    else:\n        for i in range(0, k):\n            if Input[i] != Input[i + k - 1]:\n                return False\n        return True\n\n# <func> # Python \n# Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\n    if len(Input) != k:\n        return False\n    else:\n        for i in range(0, k):\n            if Input[i] != Input[i + k - 1]:\n                return False\n        return True\n\n# <func> # Python \n# Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\n    if len(Input) != k:\n        return False\n    else:\n        for i in range(0, k):\n            if Input[i] != Input[i + k - 1]:\n                return False\n        return True\n\n# <func> # Python \n# Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\n    if len(Input) != k:\n        return False\n    else:\n        for i in range(0, k):\n            if Input[i] != Input[i + k - 1]:\n                return False\n        return True\n\n# <func> # Python \n# Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\n    if len(Input) != k:\n        return False\n    else:\n        for i in range(0, k):\n            if Input[i] != Input[i + k - 1]:\n                return False\n        return True\n\n# <func> # Python \n# Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\n"], ["\n# <func> # Python \n# Write a function to sort a list of elements using comb sort.\ndef comb_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        for j in range(i, n):\n            if nums[j] < nums[j-1]:\n                nums[j], nums[j-1] = nums[j-1], nums[j]\n\n# <func> # Python \n# Write a function to sort a list of elements using insertion sort.\ndef insertion_sort(nums):\n    n = len(nums)\n    for i in range(1, n):\n        key = nums[i]\n        j = i-1\n        while j >= 0 and nums[j] > key:\n            nums[j+1] = nums[j]\n            j -= 1\n        nums[j+1] = key\n\n# <func> # Python \n# Write a function to sort a list of elements using bubble sort.\ndef bubble_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n\n# <func> # Python \n# Write a function to sort a list of elements using selection sort.\ndef selection_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        min_idx = i\n        for j in range(i+1, n):\n            if nums[min_idx] > nums[j]:\n                min_idx = j\n        nums[i], nums[min_idx] = nums[min_idx], nums[i]\n\n# <func> # Python \n# Write a function to sort a list of elements using quick sort.\ndef quick_sort(nums):\n    n = len(nums)\n    if n <= 1:\n        return nums\n   "], ["\n# <func> # Python \n# Write a python function to check whether the given number can be represented as difference of two squares or not.\ndef dif_Square(n):\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n == 4:\n        return True\n    if n == 9:\n        return False\n    if n == 16:\n        return True\n    if n == 25:\n        return False\n    if n == 36:\n        return True\n    if n == 49:\n        return False\n    if n == 64:\n        return True\n    if n == 81:\n        return False\n    if n == 100:\n        return True\n    if n == 121:\n        return False\n    if n == 144:\n        return True\n    if n == 169:\n        return False\n    if n == 196:\n        return True\n    if n == 225:\n        return False\n    if n == 256:\n        return True\n    if n == 289:\n        return False\n    if n == 324:\n        return True\n    if n == 361:\n        return False\n    if n == 400:\n        return True\n    if n == 441:\n        return False\n    if n == 484:\n        return True\n    if n == 529:\n        return False\n    if n == 561:\n        return True\n    if n == 600:\n        return False\n    if n == 644:\n        return True\n    if n == 729:\n        return False\n    if n == 761:\n        return True\n    if n == 800:\n        return False\n    if n == 884:\n        return True\n    if n == 929:\n        return False\n    if n == 961:\n        return True\n    if n == 1000:\n        return False\n    return False\n\n#"], ["import re\r\n\n# <func> # Python \n# Write a function to split the given string with multiple delimiters by using regex.\ndef multiple_split(text):\n    return text.split(r\"\\s*\")\n\n# <func> # Java\n# Write a function to split the given string with multiple delimiters by using regex.\ndef multiple_split(text):\n    return text.split(r\"\\s*\")\n\n# <func> # JavaScript\n# Write a function to split the given string with multiple delimiters by using regex.\nfunction multiple_split(text) {\n    return text.split(/\\s*/);\n}\n\n# <func> # C\n# Write a function to split the given string with multiple delimiters by using regex.\n# function multiple_split(text) {\n#     return text.split(/\\s*/);\n# }\n\n# <func> # C++\n# Write a function to split the given string with multiple delimiters by using regex.\n# function multiple_split(text) {\n#     return text.split(/\\s*/);\n# }\n\n# <func> # C#\n# Write a function to split the given string with multiple delimiters by using regex.\n# function multiple_split(text) {\n#     return text.Split(new[] { \"\\s*\" });\n# }\n\n# <func> # Go\n# Write a function to split the given string with multiple delimiters by using regex.\n# function multiple_split(text) {\n#     return text.Split(r\"\\s*\");\n# }\n\n# <func> # Haskell\n# Write a function to split the given string with multiple delimiters by using regex.\n# function multiple_split(text) {\n#     return text.split(r\"\\\\s*\");\n# }\n\n# <func> # Java\n# Write a function to split the given string with multiple delimiters by using regex.\n# function multiple_split(text) {\n#     return text.split(r\"\\s*\");\n# }\n\n# <func> # JavaScript\n# Write a function to split the given string with multiple delimiters by using regex.\n# function multiple_split(text) {\n#"], ["\n# <func> # Python \n# Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        for j in range(len(colors[i])):\n            if colors[i][j] != patterns[i][j]:\n                return False\n    return True\n\n# Main function\ndef main():\n    # Read the input\n    colors = []\n    patterns = []\n    with open('input.txt', 'r') as f:\n        for line in f:\n            line = line.strip()\n            if line == '':\n                continue\n            colors.append(line)\n    print(is_samepatterns(colors, patterns))\n\n# Call the main function"], ["\n# <func> # Python \n# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n    for i in test_list:\n        if all(i[i] % K == 0):\n            return i\n\n\n# +\n# Testing the function\n\ntest_list = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20), (20, 21), (21, 22), (22, 23), (23, 24), (24, 25), (25, 26), (26, 27), (27, 28), (28, 29), (29, 30), (30, 31), (31, 32), (32, 33), (33, 34), (34, 35), (35, 36), (36, 37), (37, 38), (38, 39), (39, 40), (40, 41), (41, 42), (42, 43), (43, 44), (44, 45), (45, 46), (46, 47), (47, 48), (48, 49), (49, 50), (50, 51), (51, 52), (52, 53), (53, 54), (54, 55), (55,"], ["\n# <func> # Python \n# Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if i == 0 or j == 0:\n                count += 1\n            elif i == m - 1 or j == n - 1:\n                count += 1\n            elif i == m - 1 and j == n - 1:\n                count += 1\n    return count\n\n# <func> # Python \n# Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if i == 0 or j == 0:\n                count += 1\n            elif i == m - 1 or j == n - 1:\n                count += 1\n            elif i == m - 1 and j == n - 1:\n                count += 1\n    return count\n\n# <func> # Python \n# Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if i == 0 or j == 0:\n                count += 1\n            elif i == m - 1 or j == n - 1:\n                count += 1\n            elif i == m - 1 and j == n - 1:\n                count += 1\n    return count\n\n# <func> # Python \n# Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if i == 0 or j == 0:\n                count += 1\n            elif i == m - 1 or j == n - 1:\n                count += 1\n            elif i == m - 1 and j == n - 1:\n"], ["\n# <func> # Python \n# Write a python function to find the difference between sum of even and odd digits.\ndef is_Diff(n):\n    sum_odd = 0\n    sum_even = 0\n    for i in str(n):\n        if i % 2 == 0:\n            sum_even += int(i)\n        else:\n            sum_odd += int(i)\n    return sum_odd - sum_even\n"], ["\n# <func> # Python \n# Write a python function to find number of integers with odd number of set bits.\ndef count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(n):\n        if (i & 1) == 0:\n            count += 1\n    return count\n"], ["\n# <func> # Python \n# Write a python function to check whether the length of the word is odd or not.\ndef word_len(s):\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n\n# <func> # Java\n# Write a Java function to check whether the length of the word is odd or not.\ndef word_len(s):\n    if s.length() % 2 == 0:\n        return true\n    else:\n        return false\n\n# <func> # C\n# Write a C function to check whether the length of the word is odd or not.\ndef word_len(s):\n    if s.length() % 2 == 0:\n        return true\n    else:\n        return false\n\n# <func> # C++\n# Write a C++ function to check whether the length of the word is odd or not.\ndef word_len(s):\n    if s.length() % 2 == 0:\n        return true\n    else:\n        return false\n\n# <func> # R\n# Write a R function to check whether the length of the word is odd or not.\ndef word_len(s):\n    if length(s) %% 2 == 0:\n        return TRUE\n    else:\n        return FALSE\n\n# <func> # R\n# Write a R function to check whether the length of the word is odd or not.\ndef word_len(s):\n    if length(s) %% 2 == 0:\n        return TRUE\n    else:\n        return FALSE\n\n# <func> # R\n# Write a R function to check whether the length of the word is odd or not.\ndef word_len(s):\n    if length(s) %% 2 == 0:\n        return TRUE\n    else:\n        return FALSE\n\n# <func> # R\n# Write a R function to check whether the length of the word is odd or not.\ndef word_len(s):\n    if length(s) %% 2 == 0:\n        return TRUE\n    else:\n        return FALSE\n\n# <func> # R\n# Write a R function to check whether the length of"], ["\n# <func> # Python \n# Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n):\n    return (n*(n+1))//2\n\n# <func> # Python \n# Write a function to find the nth triangular number.\ndef triangular_number(n):\n    return (n*(n+1))\n\n# <func> # Python \n# Write a function to find the nth square number.\ndef square_number(n):\n    return (n*(n+1)*(2*n+1))//6\n\n# <func> # Python \n# Write a function to find the nth pentagonal number.\ndef pentagonal_number(n):\n    return (n*(n+1)*(3*n+1))//10\n\n# <func> # Python \n# Write a function to find the nth hexagonal number.\ndef hexagonal_number(n):\n    return (n*(n+1)*(5*n+1))//120\n\n# <func> # Python \n# Write a function to find the nth heptagonal number.\ndef heptagonal_number(n):\n    return (n*(n+1)*(7*n+1))//1729\n\n# <func> # Python \n# Write a function to find the nth octagonal number.\ndef octagonal_number(n):\n    return (n*(n+1)*(9*n+1))//2520\n\n# <func> # Python \n# Write a function to find the nth nonagonal number.\ndef nonagonal_number(n):\n    return (n*(n+1)*(11*n+1))//3375\n\n# <func> # Python \n# Write a function to find the nth decagonal number.\ndef decagonal_number(n):\n    return (n*(n+1)*(13*n+1))//48625\n\n# <func> # Python \n# Write a function to find the nth hexagonal number.\ndef hexagonal_number(n):"], ["\n# <func> # Python \n# Write a function to zip the two given tuples.\ndef zip_tuples(test_tup1, test_tup2):\n    return zip(test_tup1, test_tup2)\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_"], ["import math\r\n\n# <func> # Python \n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return 4/3 * pi * r**3\n\n# <func> # Python \n# Write a function to find the surface area of a sphere.\ndef surface_area_sphere(r):\n    return 4/3 * pi * r**2\n\n# <func> # Python \n# Write a function to find the volume of a cylinder.\ndef volume_cylinder(r, h):\n    return pi * r**2 * h\n\n# <func> # Python \n# Write a function to find the surface area of a cylinder.\ndef surface_area_cylinder(r, h):\n    return 2 * pi * r * h\n\n# <func> # Python \n# Write a function to find the volume of a cone.\ndef volume_cone(r, h):\n    return pi * r**2 * h\n\n# <func> # Python \n# Write a function to find the surface area of a cone.\ndef surface_area_cone(r, h):\n    return 2 * pi * r * h\n\n# <func> # Python \n# Write a function to find the volume of a frustum of a cone.\ndef volume_frustum_cone(r1, r2, h):\n    return (1/3) * pi * (r1**2 + r2**2 - r1*r2) * h\n\n# <func> # Python \n# Write a function to find the surface area of a frustum of a cone.\ndef surface_area_frustum_cone(r1, r2, h):\n    return (1/3) * pi * (r1**2 + r2**2 - r1*r2) * h\n\n# <func> # Python \n# Write a function to find the volume of a pyramid.\ndef volume_pyramid(base_area, height):\n    return base_area * height / 3\n\n# <func> # Python \n# Write a function to find the surface area of a pyramid.\ndef surface_"], ["\n# <func> # Python \n# Write a python function to find the character made by adding all the characters of the given string.\ndef get_Char(strr):\n    for i in strr:\n        print(i, end='')\n    print()\n\n\n# +\n# Write a python function to find the character made by adding all the characters of the given string.\n\ndef get_Char(strr):\n    for i in strr:\n        print(i, end='')\n    print()\n\n\n# +\n# Write a python function to find the character made by adding all the characters of the given string.\n\ndef get_Char(strr):\n    for i in strr:\n        print(i, end='')\n    print()\n\n\n# +\n# Write a python function to find the character made by adding all the characters of the given string.\n\ndef get_Char(strr):\n    for i in strr:\n        print(i, end='')\n    print()\n\n\n# +\n# Write a python function to find the character made by adding all the characters of the given string.\n\ndef get_Char(strr):\n    for i in strr:\n        print(i, end='')\n    print()\n\n\n# +\n# Write a python function to find the character made by adding all the characters of the given string.\n\ndef get_Char(strr):\n    for i in strr:\n        print(i, end='')\n    print()\n\n\n# +\n# Write a python function to find the character made by adding all the characters of the given string.\n\ndef get_Char(strr):\n    for i in strr:\n        print(i, end='')\n    print()\n\n\n# +\n# Write a python function to find the character made by adding all the characters of the given string.\n\ndef get_Char(strr):\n    for i in strr:\n        print(i, end='')\n    print()\n\n\n# +\n# Write a python function to find the character made by adding all the characters of the given string.\n\ndef get_Char(strr):\n    for i in strr:\n        print(i, end='"], ["\n# <func> # Python \n# Write a function to find the n-th number in newman conway sequence.\ndef sequence(n):\n    sequence = [1]\n    for i in range(1, n+1):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence\n"], ["import math\r\n\n# <func> # Python \n# Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n    # Your code here\n    return 4/3 * pi * r**3\n\n# <func> # C\n# Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n    # Your code here\n    return 4/3 * pi * r**3\n\n# <func> # Java\n# Write a function to find the surface area of a sphere.\npublic static double surfacearea_sphere(double r) {\n    // Your code here\n    return 4/3 * Math.PI * Math.pow(r, 3);\n}\n\n# <func> # C++\n# Write a function to find the surface area of a sphere.\ndouble surfacearea_sphere(double r) {\n    // Your code here\n    return 4/3 * pi * r * r;\n}\n\n# <func> # Python \n# Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n    # Your code here\n    return 4/3 * pi * r**3\n\n# <func> # C\n# Write a function to find the surface area of a sphere.\ndouble surfacearea_sphere(double r) {\n    // Your code here\n    return 4/3 * pi * r * r;\n}\n\n# <func> # Java\n# Write a function to find the surface area of a sphere.\npublic static double surfacearea_sphere(double r) {\n    // Your code here\n    return 4/3 * Math.PI * Math.pow(r, 3);\n}\n\n# <func> # C++\n# Write a function to find the surface area of a sphere.\ndouble surfacearea_sphere(double r) {\n    // Your code here\n    return 4/3 * pi * r * r;\n}\n\n# <func> # Python \n# Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n    # Your code here\n    return 4/3 * pi * r**3\n"], ["\n# <func> # Python \n# Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\n    # Your code here\n    # return the nth hexagonal number\n    return n*(3*n-1)/2\n\n# <func> # Python \n# Write a function to find nth centered octagonal number.\ndef centered_octagonal_number(n):\n    # Your code here\n    # return the nth octagonal number\n    return n*(5*n-2)/2\n\n# <func> # Python \n# Write a function to find nth centered square number.\ndef centered_square_number(n):\n    # Your code here\n    # return the nth square number\n    return n*(n+1)/2\n\n# <func> # Python \n# Write a function to find nth centered cube number.\ndef centered_cube_number(n):\n    # Your code here\n    # return the nth cube number\n    return n*(n+1)*(2*n+1)/6\n\n# <func> # Python \n# Write a function to find nth centered tetrahedral number.\ndef centered_tetrahedral_number(n):\n    # Your code here\n    # return the nth tetrahedral number\n    return n*(3*n-1)*(5*n-3)/4\n\n# <func> # Python \n# Write a function to find nth centered octahedral number.\ndef centered_octahedral_number(n):\n    # Your code here\n    # return the nth octahedral number\n    return n*(4*n-2)*(6*n-4)/2\n\n# <func> # Python \n# Write a function to find nth centered icosahedral number.\ndef centered_icosahedral_number(n):\n    # Your code here\n    # return the nth icosahedral number\n    return n*(5*n-3)*(7*n-5)/3\n\n# <func> # Python \n# Write a function to find nth centered dodecahedral number.\ndef centered_d"], ["import collections as ct\r\n\n# <func> # Python \n# Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n\n# <func> # Python \n# Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_two(dict1,dict2):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    return merged_dict\n\n# <func> # Python \n# Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_one(dict1,dict2):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    return merged_dict\n\n# <func> # Python \n# Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_one(dict1,dict2):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    return merged_dict\n\n# <func> # Python \n# Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_one(dict1,dict2):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    return merged_dict\n\n# <func> # Python \n# Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_one(dict1,dict2):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    return merged_dict\n\n# <func> # Python \n# Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_one(dict1,dict2):\n    merged_dict = {}\n"], ["import collections\r\n\n# <func> # Python \n# Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n    # Your code here\n    return\n\n# <func> # Java\n# Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n    # Your code here\n    return\n\n# <func> # C\n# Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n    # Your code here\n    return\n\n# <func> # C++\n# Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n    # Your code here\n    return\n\n# <func> # JavaScript\n# Write a function to get the frequency of the elements in a list.\nfunction freq_count(list1) {\n    // Your code here\n    return\n}\n\n# <func> # Python \n# Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n    # Your code here\n    return\n\n# <func> # Java\n# Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n    # Your code here\n    return\n\n# <func> # C\n# Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n    # Your code here\n    return\n\n# <func> # C++\n# Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n    # Your code here\n    return\n\n# <func> # JavaScript\n# Write a function to get the frequency of the elements in a list.\nfunction freq_count(list1) {\n    // Your code here\n    return\n}\n\n# <func> # Python \n# Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n    # Your code here\n    return\n\n# <func> # Java\n# Write a function to get the frequency of the elements in a list."], ["\n# <func> # Python \n# Write a function to find the closest smaller number than n.\ndef closest_num(N):\n    # Your code here\n    return 1\n\n# <func> # Python \n# Write a function to find the closest larger number than n.\ndef closest_num(N):\n    # Your code here\n    return N\n\n# <func> # Python \n# Write a function to find the closest larger number than n.\ndef closest_num(N):\n    # Your code here\n    return N\n\n# <func> # Python \n# Write a function to find the closest smaller number than n.\ndef closest_num(N):\n    # Your code here\n    return N\n\n# <func> # Python \n# Write a function to find the closest larger number than n.\ndef closest_num(N):\n    # Your code here\n    return N\n\n# <func> # Python \n# Write a function to find the closest smaller number than n.\ndef closest_num(N):\n    # Your code here\n    return N\n\n# <func> # Python \n# Write a function to find the closest larger number than n.\ndef closest_num(N):\n    # Your code here\n    return N\n\n# <func> # Python \n# Write a function to find the closest smaller number than n.\ndef closest_num(N):\n    # Your code here\n    return N\n\n# <func> # Python \n# Write a function to find the closest larger number than n.\ndef closest_num(N):\n    # Your code here\n    return N\n\n# <func> # Python \n# Write a function to find the closest smaller number than n.\ndef closest_num(N):\n    # Your code here\n    return N\n\n# <func> # Python \n# Write a function to find the closest larger number than n.\ndef closest_num(N):\n    # Your code here\n    return N\n\n# <func> # Python \n# Write a function to find the closest smaller number than n.\ndef closest_num(N):\n    # Your code here\n    return N\n\n# <func> # Python \n# Write a function to find the closest"], ["\n# <func> # Python \n# Write a python function to find the length of the longest word.\ndef len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\n# <func> # Java\n# Write a Java function to find the length of the longest word.\ndef len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\n# <func> # C\n# Write a C function to find the length of the longest word.\ndef len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\n# <func> # C++\n# Write a C++ function to find the length of the longest word.\ndef len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\n# <func> # Go\n# Write a Go function to find the length of the longest word.\ndef len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\n# <func> # R\n# Write a R function to find the length of the longest word.\ndef len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\n# <func> # Ruby\n# Write a Ruby function to find the length of the longest word.\ndef len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len"], ["\n# <func> # Python \n# Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\n    return sub_str in str1\n\n# <func> # Java\n# Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\n    return sub_str.contains(str1)\n\n# <func> # C\n# Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\n    return str1.indexOf(sub_str) != -1\n\n# <func> # C++\n# Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\n    return str1.find(sub_str) != -1\n\n# <func> # C#\n# Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\n    return str1.Contains(sub_str)\n\n# <func> # Go\n# Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\n    return str1.IndexOf(sub_str) != -1\n\n# <func> # Haskell\n# Write a function to check if a substring is present in a given list of string values.\nfind_substring :: String -> String -> Bool\nfind_substring str1 sub_str =\n    let index = indexOf str1 sub_str\n    in index != -1\n\n# <func> # JavaScript\n# Write a function to check if a substring is present in a given list of string values.\nfind_substring = function(str1, sub_str) {\n    return str1.indexOf(sub_str) != -1\n}\n\n# <func> # Kotlin\n# Write a function to check if a substring is present in a given list of string values.\nfun findSubstring(str1: String, sub_str: String) {\n    return str1.indexOf("], ["\n# <func> # Python \n# Write a function to check whether the given number is undulating or not.\ndef is_undulating(n):\n    # Your code here\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check whether the given number is palindrome or not.\ndef is_palindrome(n):\n    # Your code here\n    if n == str(n)[::-1]:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check whether the given number is prime or not.\ndef is_prime(n):\n    # Your code here\n    if n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n == 4:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n# <func> # Python \n# Write a function to check whether the given number is perfect or not.\ndef is_perfect(n):\n    # Your code here\n    if n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n == 4:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n# <func> # Python \n# Write a function to check whether the given number is perfect or not.\ndef is_perfect(n):\n    # Your code here\n    if n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n == 4:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int("], ["\n# <func> # Python \n# Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n    return a**b\n\n# <func> # Python \n# Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n    return a**b\n\n# <func> # Python \n# Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n    return a**b\n\n# <func> # Python \n# Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n    return a**b\n\n# <func> # Python \n# Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n    return a**b\n\n# <func> # Python \n# Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n    return a**b\n\n# <func> # Python \n# Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n    return a**b\n\n# <func> # Python \n# Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n    return a**b\n\n# <func> # Python \n# Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n    return a**b\n\n# <func> # Python \n# Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n    return a**b\n\n# <func> # Python \n# Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n    return a**b\n\n# <func> # Python \n# Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n    return a**b\n\n# <func> #"], ["from operator import itemgetter \r\n\n# <func> # Python \n# Write a function to extract the index minimum value record from the given tuples.\ndef index_minimum(test_list):\n    min_index = 0\n    min_value = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n    return min_index\n\n# <func> # Python \n# Write a function to extract the index maximum value record from the given tuples.\ndef index_maximum(test_list):\n    max_index = 0\n    max_value = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] > max_value:\n            max_index = i\n            max_value = test_list[i][1]\n    return max_index\n\n# <func> # Python \n# Write a function to extract the index maximum value record from the given tuples.\ndef index_maximum(test_list):\n    max_index = 0\n    max_value = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] > max_value:\n            max_index = i\n            max_value = test_list[i][1]\n    return max_index\n\n# <func> # Python \n# Write a function to extract the index minimum value record from the given tuples.\ndef index_minimum(test_list):\n    min_index = 0\n    min_value = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n    return min_index\n\n# <func> # Python \n# Write a function to extract the index maximum value record from the given tuples.\ndef index_maxim"], ["\n# <func> # Python \n# Write a python function to find the minimum length of sublist.\ndef Find_Min_Length(lst):\n    min_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j]) < min_length:\n                min_length = len(lst[i:j])\n    return min_length\n\n# <func> # Python \n# Write a python function to find the maximum length of sublist.\ndef Find_Max_Length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j]) > max_length:\n                max_length = len(lst[i:j])\n    return max_length\n\n# <func> # Python \n# Write a python function to find the average length of sublist.\ndef Find_Average_Length(lst):\n    total_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            total_length += len(lst[i:j])\n    return total_length / len(lst)\n\n# <func> # Python \n# Write a python function to find the maximum average length of sublist.\ndef Find_Max_Average_Length(lst):\n    max_avg_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j]) > max_avg_length:\n                max_avg_length = len(lst[i:j])\n    return max_avg_length\n\n# <func> # Python \n# Write a python function to find the minimum average length of sublist.\ndef Find_Min_Average_Length(lst):\n    min_avg_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j]) < min_"], ["\n# <func> # Python \n# Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n/i)\n    return len(divisors)\n\n# Testing the function"], ["\n# <func> # Python \n# Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\n    frequency_list = {}\n    for item in list1:\n        if item in frequency_list:\n            frequency_list[item] += 1\n        else:\n            frequency_list[item] = 1\n    return frequency_list\n\n# <func> # Python \n# Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\n    frequency_list = {}\n    for item in list1:\n        if item in frequency_list:\n            frequency_list[item] += 1\n        else:\n            frequency_list[item] = 1\n    return frequency_list\n\n# <func> # Python \n# Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\n    frequency_list = {}\n    for item in list1:\n        if item in frequency_list:\n            frequency_list[item] += 1\n        else:\n            frequency_list[item] = 1\n    return frequency_list\n\n# <func> # Python \n# Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\n    frequency_list = {}\n    for item in list1:\n        if item in frequency_list:\n            frequency_list[item] += 1\n        else:\n            frequency_list[item] = 1\n    return frequency_list\n\n# <func> # Python \n# Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\n    frequency_list = {}\n    for item in list1:\n        if item in frequency_list:\n            frequency_list[item] += 1\n        else:\n            frequency_list[item] = 1\n    return frequency_list\n\n# <func> # Python \n# Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\n    frequency_list = {}\n    for item in list1:\n        if item in frequency_list:\n            frequency_list[item] += 1\n        else:"], ["\n# <func> # Python \n# Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result/len(numbers)\n"], ["\n# <func> # Python \n# Write a function to convert the given decimal number to its binary equivalent.\ndef decimal_to_binary(n):\n    return bin(n).replace(\"0b\", \"\")\n\n# Test the function"], ["import sys\r\n\n# <func> # Python \n# Write a function to find the next smallest palindrome of a specified number.\ndef next_smallest_palindrome(num):\n    # Write your code here\n    num = int(num)\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num + 1\n    num = num - 1\n    num = num"], ["\n# <func> # Python \n# Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\n    if k > n:\n        return -1\n    else:\n        return arr[k-1]\n\n# <func> # C++\n# Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\n    if k > n:\n        return -1\n    else:\n        return arr[k-1]\n\n# <func> # Java\n# Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\n    if k > n:\n        return -1\n    else:\n        return arr[k-1]\n\n# <func> # JavaScript\n# Write a function to find the kth element in the given array.\nfunction kth_element(arr, n, k) {\n    if k > n {\n        return -1;\n    }\n    else {\n        return arr[k-1];\n    }\n}\n\n# <func> # Python \n# Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\n    if k > n:\n        return -1\n    else:\n        return arr[k-1]\n\n# <func> # C++\n# Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\n    if k > n:\n        return -1\n    else:\n        return arr[k-1]\n\n# <func> # Java\n# Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\n    if k > n:\n        return -1\n    else:\n        return arr[k-1]\n\n# <func> # JavaScript\n# Write a function to find the kth element in the given array.\nfunction kth_element(arr, n, k) {\n    if k > n {\n        return -1;\n    }\n    else {\n        return arr["], ["\n# <func> # Python \n# Write a function to convert snake case string to camel case string.\ndef snake_to_camel(word):\n    word = word.replace('_', ' ').title()\n    return word\n\n# <func> # Python \n# Write a function to convert snake case string to camel case string.\ndef camel_to_snake(word):\n    word = word.replace('_', ' ').lower()\n    return word\n\n# <func> # Python \n# Write a function to convert snake case string to camel case string.\ndef camel_to_snake(word):\n    word = word.replace('_', ' ').title()\n    return word\n\n# <func> # Python \n# Write a function to convert snake case string to camel case string.\ndef camel_to_snake(word):\n    word = word.replace('_', ' ').lower()\n    return word\n\n# <func> # Python \n# Write a function to convert snake case string to camel case string.\ndef camel_to_snake(word):\n    word = word.replace('_', ' ').title()\n    return word\n\n# <func> # Python \n# Write a function to convert snake case string to camel case string.\ndef camel_to_snake(word):\n    word = word.replace('_', ' ').lower()\n    return word\n\n# <func> # Python \n# Write a function to convert snake case string to camel case string.\ndef camel_to_snake(word):\n    word = word.replace('_', ' ').title()\n    return word\n\n# <func> # Python \n# Write a function to convert snake case string to camel case string.\ndef camel_to_snake(word):\n    word = word.replace('_', ' ').lower()\n    return word\n\n# <func> # Python \n# Write a function to convert snake case string to camel case string.\ndef camel_to_snake(word):\n    word = word.replace('_', ' ').title()\n   "], ["\n# <func> # Python \n# Write a function to find eulerian number a(n, m).\ndef eulerian_num(n, m):\n    if n == 0 or m == 0:\n        return 0\n    if n == 1 and m == 1:\n        return 1\n    if n == 1 and m == 2:\n        return 2\n    if n == 2 and m == 1:\n        return 3\n    if n == 2 and m == 2:\n        return 4\n    if n == 3 and m == 1:\n        return 5\n    if n == 3 and m == 2:\n        return 6\n    if n == 4 and m == 1:\n        return 7\n    if n == 4 and m == 2:\n        return 8\n    if n == 5 and m == 1:\n        return 9\n    if n == 5 and m == 2:\n        return 10\n    if n == 6 and m == 1:\n        return 11\n    if n == 6 and m == 2:\n        return 12\n    if n == 7 and m == 1:\n        return 13\n    if n == 7 and m == 2:\n        return 14\n    if n == 8 and m == 1:\n        return 15\n    if n == 8 and m == 2:\n        return 16\n    if n == 9 and m == 1:\n        return 17\n    if n == 9 and m == 2:\n        return 18\n    if n == 10 and m == 1:\n        return 19\n    if n == 10 and m == 2:\n        return 20\n    if n == 11 and m == 1:\n        return 21\n    if n == 11 and m == 2:\n        return 22\n    if n == 12 and m == 1:\n        return 23\n    if n == 12 and m == 2:\n        return 24\n   "], ["\n# <func> # Python \n# Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n    return sorted(input_list, key=lambda x: x[1])\n\n# <func> # Python \n# Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n    return sorted(input_list, key=lambda x: x[1])\n\n# <func> # Python \n# Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n    return sorted(input_list, key=lambda x: x[1])\n\n# <func> # Python \n# Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n    return sorted(input_list, key=lambda x: x[1])\n\n# <func> # Python \n# Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n    return sorted(input_list, key=lambda x: x[1])\n\n# <func> # Python \n# Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n    return sorted(input_list, key=lambda x: x[1])\n\n# <func> # Python \n# Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n    return sorted(input_list, key=lambda x: x[1])\n\n# <func> # Python \n# Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n    return sorted(input_list, key=lambda x: x[1])\n\n# <func> # Python \n# Write a function to sort each sublist of strings in a given list of lists using lambda function."], ["\n# <func> # Python \n# Write a python function to count true booleans in the given list.\ndef count(lst):\n    return sum(bool(i) for i in lst)\n\n# <func> # Java\n# Write a Java function to count true booleans in the given list.\ndef count(lst):\n    return lst.length - (lst.indexOf(true) != -1)\n\n# <func> # JavaScript\n# Write a JavaScript function to count true booleans in the given list.\nfunction count(lst) {\n    return lst.length - (lst.indexOf(true) != -1);\n}\n\n# <func> # C\n# Write a C function to count true booleans in the given list.\n# int count(int *lst) {\n#     return lst[0] - (lst[0] == true) ? 0 : 1;\n# }\n\n# <func> # C++\n# Write a C++ function to count true booleans in the given list.\n# int count(int *lst) {\n#     return lst[0] - (lst[0] == true) ? 0 : 1;\n# }\n\n# <func> # Go\n# Write a Go function to count true booleans in the given list.\nfunc count(lst []int) int {\n    return len(lst) - (lst[0] == true)\n}\n\n# <func> # R\n# Write a R function to count true booleans in the given list.\ncount <- function(lst) {\n    return length(lst) - (lst == c(TRUE))\n}\n\n# <func> # Rust\n# Write a Rust function to count true booleans in the given list.\nfn count(lst: &[i32]) -> i32 {\n    let mut count = 0;\n    for i in 0..lst.len() {\n        if lst[i] == true {\n            count += 1;\n        }\n    }\n    count\n}\n\n# <func> # TypeScript\n# Write a TypeScript function to count true booleans in the given list.\nfunction count(lst: number[]) {\n    return lst."], ["\n# <func> # Python \n# Write a function to add the given list to the given tuples.\ndef add_lists(test_list, test_tup):\n    return test_list + test_tup\n\n# <func> # Python \n# Write a function to multiply the given list to the given tuples.\ndef multiply_lists(test_list, test_tup):\n    return test_list * test_tup\n\n# <func> # Python \n# Write a function to subtract the given list from the given tuples.\ndef subtract_lists(test_list, test_tup):\n    return test_list - test_tup\n\n# <func> # Python \n# Write a function to divide the given list to the given tuples.\ndef divide_lists(test_list, test_tup):\n    return test_list / test_tup\n\n# <func> # Python \n# Write a function to multiply the given list to the given tuples.\ndef multiply_lists(test_list, test_tup):\n    return test_list * test_tup\n\n# <func> # Python \n# Write a function to subtract the given list from the given tuples.\ndef subtract_lists(test_list, test_tup):\n    return test_list - test_tup\n\n# <func> # Python \n# Write a function to divide the given list to the given tuples.\ndef divide_lists(test_list, test_tup):\n    return test_list / test_tup\n\n# <func> # Python \n# Write a function to multiply the given list to the given tuples.\ndef multiply_lists(test_list, test_tup):\n    return test_list * test_tup\n\n# <func> # Python \n# Write a function to subtract the given list from the given tuples.\ndef subtract_lists(test_list, test_tup):\n    return test_list - test_tup\n\n# <func> # Python \n# Write a function to divide the given list to the given tuples.\ndef divide_lists(test_list, test_tup):\n    return test_list / test_tup\n"], ["\n# <func> # Python \n# Write a python function to count hexadecimal numbers for a given range.\ndef count_Hexadecimal(L,R):\n    count = 0\n    for i in range(L,R+1):\n        if(i.is_hexadecimal()):\n            count += 1\n    return count\n\n# <func> # C\n# Write a C function to count hexadecimal numbers for a given range.\n#\n# Input:\n# L: the lower bound of the range\n# R: the upper bound of the range\n# Output:\n# The count of hexadecimal numbers in the range.\n#\n# Example:\n#\n# Input:\n# L = 10, R = 20\n# Output:\n# 10\n#\n# Explanation:\n# The hexadecimal numbers in the range are 0x01, 0x02, ..., 0x10, 0x11, 0x12, ..., 0x20, 0x21, 0x22, ..., 0xFF.\n# The count of hexadecimal numbers in the range is 10.\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#"], ["import heapq\r\n\n# <func> # Python \n# Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\ndef merge_sorted_list(num1,num2,num3):\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    merged_list = []\n    while len(num1) > 0 and len(num2) > 0:\n        if num1[0] < num2[0]:\n            merged_list.append(num1[0])\n            num1.pop(0)\n        else:\n            merged_list.append(num2[0])\n            num2.pop(0)\n    while len(num1) > 0:\n        merged_list.append(num1[0])\n        num1.pop(0)\n    while len(num2) > 0:\n        merged_list.append(num2[0])\n        num2.pop(0)\n    return merged_list\n\n# <func> # Python \n# Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\ndef merge_sorted_list(num1,num2,num3):\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    merged_list = []\n    while len(num1) > 0 and len(num2) > 0:\n        if num1[0] < num2[0]:\n            merged_list.append(num1[0])\n            num1.pop(0)\n        else:\n            merged_list.append(num2[0])\n            num2.pop(0)\n    while len(num1) > 0:\n        merged_list.append(num1[0])\n        num1.pop(0)\n    while len(num2) > 0:\n        merged_list.append(num2[0])\n        num2.pop(0)\n    return merged_list\n\n# <func> # Python \n# Write a function to"], ["\n# <func> # Python \n# Write a python function to find the count of rotations of a binary string with odd value.\ndef odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        if s[i] == '1':\n            count += 1\n    return count\n\n\n# +\n# Write a python function to find the count of rotations of a binary string with odd value.\n\n# +\n# Write a python function to find the count of rotations of a binary string with odd value.\n\n# +\n# Write a python function to find the count of rotations of a binary string with odd value.\n\n# +\n# Write a python function to find the count of rotations of a binary string with odd value.\n\n# +\n# Write a python function to find the count of rotations of a binary string with odd value.\n\n# +\n# Write a python function to find the count of rotations of a binary string with odd value.\n\n# +\n# Write a python function to find the count of rotations of a binary string with odd value.\n\n# +\n# Write a python function to find the count of rotations of a binary string with odd value.\n\n# +\n# Write a python function to find the count of rotations of a binary string with odd value.\n\n# +\n# Write a python function to find the count of rotations of a binary string with odd value.\n\n# +\n# Write a python function to find the count of rotations of a binary string with odd value.\n\n# +\n# Write a python function to find the count of rotations of a binary string with odd value.\n\n# +\n# Write a python function to find the count of rotations of a binary string with odd value.\n\n# +\n# Write a python function to find the count of rotations of a binary string with odd value.\n\n# +\n# Write a python function to find the count of rotations of a binary string with odd value.\n\n# +\n# Write a python function to find the count of rotations of a binary string with odd value.\n\n# +\n# Write a python function to find the count of rotations of a binary string with odd value.\n\n# +\n# Write a"], ["\n# <func> # Python \n# Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\ndef extract_missing(test_list, strt_val, stop_val):\n    # Create a list of tuples with the start and end values of the missing ranges\n    missing_ranges = []\n    for i in range(len(test_list)):\n        if test_list[i] == strt_val:\n            missing_ranges.append((i, i+1))\n        elif test_list[i] == stop_val:\n            missing_ranges.append((i, i+1))\n    # Return the list of tuples\n    return missing_ranges\n\n# Test the function\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,"], ["\n# <func> # Python \n# Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\n    common = []\n    for i in nestedlist:\n        if isinstance(i, list):\n            common.append(common_in_nested_lists(i))\n        else:\n            common.append(i)\n    return common\n\n\n# +\n# Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\n    common = []\n    for i in nestedlist:\n        if isinstance(i, list):\n            common.append(common_in_nested_lists(i))\n        else:\n            common.append(i)\n    return common\n\n\n# Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\n    common = []\n    for i in nestedlist:\n        if isinstance(i, list):\n            common.append(common_in_nested_lists(i))\n        else:\n            common.append(i)\n    return common\n\n\n# +\n# Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\n    common = []\n    for i in nestedlist:\n        if isinstance(i, list):\n            common.append(common_in_nested_lists(i))\n        else:\n            common.append(i)\n    return common\n\n\n# Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\n    common = []\n    for i in nestedlist:\n        if isinstance(i, list):\n            common.append(common_in_nested_lists(i))\n        else:\n            common.append(i)\n    return common\n\n\n# +\n# Write a function to find common elements in given nested lists"], ["\n# <func> # Python \n# Write a python function to find the perimeter of a cylinder.\ndef perimeter(diameter,height):\n    return 2*diameter + 2*height\n\n# <func> # Java\n# Write a java function to find the perimeter of a cylinder.\ndef perimeter(diameter,height):\n    return 2*diameter + 2*height\n\n# <func> # C++\n# Write a C++ function to find the perimeter of a cylinder.\ndef perimeter(diameter,height):\n    return 2*diameter + 2*height\n\n# <func> # C\n# Write a C function to find the perimeter of a cylinder.\ndef perimeter(diameter,height):\n    return 2*diameter + 2*height\n\n# <func> # C#\n# Write a C# function to find the perimeter of a cylinder.\ndef perimeter(diameter,height):\n    return 2*diameter + 2*height\n\n# <func> # Pascal\n# Write a Pascal function to find the perimeter of a cylinder.\ndef perimeter(diameter,height):\n    return 2*diameter + 2*height\n\n# <func> # Go\n# Write a Go function to find the perimeter of a cylinder.\nfunc perimeter(diameter,height) {\n    return 2*diameter + 2*height\n}\n\n# <func> # Rust\n# Write a Rust function to find the perimeter of a cylinder.\nfn perimeter(diameter: f64, height: f64) -> f64 {\n    return 2 * diameter + 2 * height\n}\n\n# <func> # Swift\n# Write a Swift function to find the perimeter of a cylinder.\nfunc perimeter(diameter: Double, height: Double) -> Double {\n    return 2 * diameter + 2 * height\n}\n\n# <func> # Visual Basic\n# Write a Visual Basic function to find the perimeter of a cylinder.\nFunction Perimeter(diameter As Double, height As Double"], ["\n# <func> # Python \n# Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n# <func> # Java\n# Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n# <func> # C\n# Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n# <func> # C++\n# Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n# <func> # C#\n# Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n# <func> # F#\n# Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n# <func> # Go\n# Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n# <func> # Haskell\n# Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n# <func> # I\n# Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n"], ["from collections import Counter \r\n\n# <func> # Python \n# Write a function to assign frequency to each tuple in the given tuple list.\ndef assign_freq(test_list):\n    freq_dict = {}\n    for i in test_list:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n\n# <func> # Python \n# Write a function to find the maximum frequency in the given tuple list.\ndef max_freq(test_list):\n    max_freq = 0\n    max_freq_tuple = None\n    for i in test_list:\n        if i in test_list:\n            if i > max_freq:\n                max_freq = i\n                max_freq_tuple = i\n            elif i == max_freq:\n                max_freq_tuple = i\n    return max_freq_tuple\n\n# <func> # Python \n# Write a function to find the minimum frequency in the given tuple list.\ndef min_freq(test_list):\n    min_freq = 0\n    min_freq_tuple = None\n    for i in test_list:\n        if i in test_list:\n            if i < min_freq:\n                min_freq = i\n                min_freq_tuple = i\n            elif i == min_freq:\n                min_freq_tuple = i\n    return min_freq_tuple\n\n# <func> # Python \n# Write a function to find the average frequency in the given tuple list.\ndef avg_freq(test_list):\n    avg_freq = 0\n    avg_freq_tuple = None\n    for i in test_list:\n        if i in test_list:\n            avg_freq += 1\n            avg_freq_tuple = i\n    return avg_freq_tuple\n\n# <func> # Python \n# Write a function to find the maximum frequency in the given tuple list.\ndef max_freq_tuple(test_list):\n"], ["\n# <func> # Python \n# Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dit(list1):\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check whether all lists in a list are empty or not.\ndef empty_list(list1):\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check whether all tuples in a list are empty or not.\ndef empty_tuple(list1):\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dict(list1):\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check whether all lists in a list are empty or not.\ndef empty_list_2(list1):\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check whether all tuples in a list are empty or not.\ndef empty_tuple_2(list1):\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dict_2(list1):\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check whether all lists in a list are empty or not.\ndef empty_list_3(list1):\n    for i in list1:\n        if len(i) > 0:\n           "], ["\n# <func> # Python \n# Write a function to convert a given tuple of positive integers into an integer.\ndef tuple_to_int(nums):\n    return sum(nums)\n\n# Testing"], ["\n# <func> # Python \n# Write a function to convert all possible convertible elements in the list to float.\ndef list_to_float(test_list):\n    for i in range(len(test_list)):\n        if type(test_list[i]) == list:\n            test_list[i] = list_to_float(test_list[i])\n        else:\n            test_list[i] = float(test_list[i])\n    return test_list\n\n# <func> # Python \n# Write a function to convert all possible convertible elements in the list to int.\ndef list_to_int(test_list):\n    for i in range(len(test_list)):\n        if type(test_list[i]) == list:\n            test_list[i] = list_to_int(test_list[i])\n        else:\n            test_list[i] = int(test_list[i])\n    return test_list\n\n# <func> # Python \n# Write a function to convert all possible convertible elements in the list to str.\ndef list_to_str(test_list):\n    for i in range(len(test_list)):\n        if type(test_list[i]) == list:\n            test_list[i] = list_to_str(test_list[i])\n        else:\n            test_list[i] = str(test_list[i])\n    return test_list\n\n# <func> # Python \n# Write a function to convert all possible convertible elements in the list to tuple.\ndef list_to_tuple(test_list):\n    for i in range(len(test_list)):\n        if type(test_list[i]) == list:\n            test_list[i] = list_to_tuple(test_list[i])\n        else:\n            test_list[i] = tuple(test_list[i])\n    return test_list\n\n# <func> # Python \n# Write a function to convert all possible convertible elements in the list to set.\ndef list_to_set(test_list):\n    for i in range(len(test_list)):\n        if"], ["\n# <func> # Python \n# [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string):\n    return string.split()\n\n# [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string):\n    return string.split()\n\n# [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string):\n    return string.split()\n\n# [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string):\n    return string.split()\n\n# [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string):\n    return string.split()\n\n# [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string):\n    return string.split()\n\n# [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string):\n    return string.split()\n\n# [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string):\n    return string.split()\n\n# [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string):\n    return string.split()\n\n# [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string):\n    return string.split()\n\n#"], ["\n# <func> # Python \n# Write a python function to find the element that appears only once in a sorted array.\ndef search(arr,n):\n    for i in range(n):\n        if arr[i] == arr[i]:\n            return i\n    return -1\n\n# <func> # C\n# Write a C function to find the element that appears only once in a sorted array.\n# int search(int arr[], int n) {\n#     for(int i=0; i<n; i++) {\n#         if(arr[i] == arr[i]) {\n#             return i;\n#         }\n#     }\n#     return -1;\n# }\n\n# <func> # C++\n# Write a C++ function to find the element that appears only once in a sorted array.\n# int search(int arr[], int n) {\n#     for(int i=0; i<n; i++) {\n#         if(arr[i] == arr[i]) {\n#             return i;\n#         }\n#     }\n#     return -1;\n# }\n\n# <func> # Java\n# Write a Java function to find the element that appears only once in a sorted array.\n# int search(int arr[], int n) {\n#     for(int i=0; i<n; i++) {\n#         if(arr[i] == arr[i]) {\n#             return i;\n#         }\n#     }\n#     return -1;\n# }\n\n# <func> # JavaScript\n# Write a JavaScript function to find the element that appears only once in a sorted array.\n# function search(arr, n) {\n#     for(let i=0; i<n; i++) {\n#         if(arr[i] === arr[i]) {\n#             return i;\n#         }\n#     }\n#     return -1;\n# }\n\n# <func> # Python\n# Write a Python function to find the element that appears only once in a sorted array.\n# def search(arr, n):\n#     for i in range(n):\n#         if arr[i] == arr[i]:\n#            "], ["\n# <func> # Python \n# Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_product = max(max_product, list1[i][0] * list1[j][0])\n    return max_product\n\n# <func> # Python \n# Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_product = max(max_product, list1[i][0] * list1[j][0])\n    return max_product\n\n# <func> # Python \n# Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_product = max(max_product, list1[i][0] * list1[j][0])\n    return max_product\n\n# <func> # Python \n# Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_product = max(max_product, list1[i][0] * list1[j][0])\n    return max_product\n\n# <func> # Python \n# Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1"], ["\n# <func> # Python \n# Write a function to find the triplet with sum of the given array\ndef check_triplet(A, n, sum, count):\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if A[i] + A[j] + A[k] == sum:\n                    return (A[i], A[j], A[k])\n    return None\n\n# Driver code\nA = [1, 2, 3, 4, 5]\nn = len(A)\nsum = 10\ncount = 0\n\n# Call the function\nresult = check_triplet(A, n, sum, count)"], ["MAX = 3000 \r\n\n# <func> # Python \n# Write a function to find n\u2019th smart number.\ndef smartNumber(n):\n    # Write your code here\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n =="], ["\n# <func> # Python \n# Write a function to sum all amicable numbers from 1 to a specified number.\ndef amicable_numbers_sum(limit):\n    # Write your code here\n    sum = 0\n    for i in range(1, limit):\n        if i in sum:\n            continue\n        else:\n            sum += i\n    return sum\n\n"], ["import cmath\r\n\n# <func> # Python \n# Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\n    return (a+b)/(a-b)\n\n# <func> # Python \n# Write a function to get the distance of a complex number.\ndef distance_complex(a,b):\n    return (a*a+b*b)**0.5\n\n# <func> # Python \n# Write a function to get the modulus of a complex number.\ndef modulus_complex(a,b):\n    return (a*a-b*b)**0.5\n\n# <func> # Python \n# Write a function to get the conjugate of a complex number.\ndef conjugate_complex(a,b):\n    return (a-b)/(a+b)\n\n# <func> # Python \n# Write a function to get the real part of a complex number.\ndef real_complex(a,b):\n    return a\n\n# <func> # Python \n# Write a function to get the imaginary part of a complex number.\ndef imaginary_complex(a,b):\n    return b\n\n# <func> # Python \n# Write a function to get the absolute value of a complex number.\ndef abs_complex(a,b):\n    return abs(a)\n\n# <func> # Python \n# Write a function to get the argument of a complex number.\ndef argument_complex(a,b):\n    return (a+b)/(a-b)\n\n# <func> # Python \n# Write a function to get the conjugate of a complex number.\ndef conjugate_complex(a,b):\n    return (a-b)/(a+b)\n\n# <func> # Python \n# Write a function to get the real part of a complex number.\ndef real_complex(a,b):\n    return a\n\n# <func> # Python \n# Write a function to get the imaginary part of a complex number.\ndef imaginary_complex(a,b):\n    return b\n\n# <func> # Python \n# Write a function to get the absolute value of a complex"], ["\n# <func> # Python \n# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string, n):\n    length = 0\n    for i in range(n):\n        if string[i] == '0':\n            length += 1\n        else:\n            length -= 1\n    return length\n\ndef find_max_diff(string, n):\n    length = find_length(string, n)\n    diff = 0\n    for i in range(n):\n        if string[i] == '1':\n            diff += 1\n        else:\n            diff -= 1\n    return diff\n\n# Testing"], ["\n# <func> # Python \n# Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b):\n    sum = 0\n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            if (a%i == 0 and b%j == 0):\n                sum += i+j\n    return sum\n"], ["\n# <func> # Python \n# Write a function to multiply two integers without using the * operator in python.\ndef multiply_int(x, y):\n    return x * y\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to shortlist words that are longer than n from a given list of words.\ndef long_words(n, str):\n    words = str.split()\n    return [word for word in words if len(word) > n]\n\n# <func> # Python \n# Write a function to shortlist words that are shorter than n from a given list of words.\ndef short_words(n, str):\n    words = str.split()\n    return [word for word in words if len(word) < n]\n\n# <func> # Python \n# Write a function to shortlist words that are longer than n from a given list of words.\ndef long_short_words(n, str):\n    words = str.split()\n    return [word for word in words if len(word) > n]\n\n# <func> # Python \n# Write a function to shortlist words that are shorter than n from a given list of words.\ndef short_short_words(n, str):\n    words = str.split()\n    return [word for word in words if len(word) < n]\n\n# <func> # Python \n# Write a function to shortlist words that are longer than n from a given list of words.\ndef long_short_short_words(n, str):\n    words = str.split()\n    return [word for word in words if len(word) > n]\n\n# <func> # Python \n# Write a function to shortlist words that are shorter than n from a given list of words.\ndef short_short_short_words(n, str):\n    words = str.split()\n    return [word for word in words if len(word) < n]\n\n# <func> # Python \n# Write a function to shortlist words that are longer than n from a given list of words.\ndef long_short_short_short_words(n, str):\n    words = str.split()\n    return [word for word in words if len(word) > n]\n\n# <func> # Python \n# Write a function to shortlist words that are shorter than n from a given list of words.\ndef short_short_short_"], ["\n# <func> # Python \n# Write a function to calculate magic square.\ndef magic_square_test(my_matrix):\n    # Your code here\n    magic_square = []\n    for i in range(len(my_matrix)):\n        row = []\n        for j in range(len(my_matrix[i])):\n            row.append(my_matrix[i][j])\n        magic_square.append(row)\n    return magic_square\n\n# Test function"], ["from collections import \n# <func> # Python \n# Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums):\n    max_freq = 0\n    max_freq_num = None\n    for num in nums:\n        if num > max_freq:\n            max_freq = num\n            max_freq_num = num\n        elif num == max_freq_num:\n            max_freq += 1\n    return max_freq_num\n\n# Test\n# nums = [1, 2, 3, 4, 5, 5, 5, 5, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7"], ["\n# <func> # Python \n# Write a python function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return str1[::-1]\n\n# <func> # Java\n# Write a Java function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return str1.replace('a', '').replace('e', '').replace('i', '').replace('o', '').replace('u', '')\n\n# <func> # C\n# Write a C function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return str1[::-1]\n\n# <func> # C++\n# Write a C++ function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return str1.substr(0, str1.length() - 1) + str1.substr(str1.length() - 1)\n\n# <func> # JavaScript\n# Write a JavaScript function to reverse only the vowels of a given string.\nfunction reverse_vowels(str1) {\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    return str1.replace(/\\b/g, '') + str1.replace(/\\b/g, '');\n}\n\n# <func> # Python \n# Write a Python function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return str1[::-1]\n\n# <func> # Java\n# Write a Java function to reverse only the vowels of a given string.\ndef reverse"], ["\n# <func> # Python \n# Write a function to convert tuple to a string.\ndef tup_string(tup1):\n    return '(' + ', '.join(map(str, tup1)) + ')'\n\n# <func> # Python \n# Write a function to convert tuple to a string.\ndef tup_string(tup1):\n    return '(' + ', '.join(map(str, tup1)) + ')'\n\n# <func> # Python \n# Write a function to convert tuple to a string.\ndef tup_string(tup1):\n    return '(' + ', '.join(map(str, tup1)) + ')'\n\n# <func> # Python \n# Write a function to convert tuple to a string.\ndef tup_string(tup1):\n    return '(' + ', '.join(map(str, tup1)) + ')'\n\n# <func> # Python \n# Write a function to convert tuple to a string.\ndef tup_string(tup1):\n    return '(' + ', '.join(map(str, tup1)) + ')'\n\n# <func> # Python \n# Write a function to convert tuple to a string.\ndef tup_string(tup1):\n    return '(' + ', '.join(map(str, tup1)) + ')'\n\n# <func> # Python \n# Write a function to convert tuple to a string.\ndef tup_string(tup1):\n    return '(' + ', '.join(map(str, tup1)) + ')'\n\n# <func> # Python \n# Write a function to convert tuple to a string.\ndef tup_string(tup1):\n    return '(' + ', '.join(map(str, tup1)) + ')'\n\n# <func> # Python \n# Write a function to convert tuple to a string.\ndef tup_string(tup1):\n    return '(' + ', '.join(map(str, tup1)) + ')'\n\n# <func> # Python \n# Write a function to convert tuple to a string.\ndef tup_string(tup1):\n   "], ["\n# <func> # Python \n# Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\ndef sum_negativenum(nums):\n    return sum(num for num in nums if num < 0)\n\n# <func> # Python \n# Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\ndef sum_positivenum(nums):\n    return sum(num for num in nums if num > 0)\n\n# <func> # Python \n# Write a function to calculate the sum of the numbers of a given list of numbers using lambda function.\ndef sum_nums(nums):\n    return sum(num for num in nums if num)\n\n# <func> # Python \n# Write a function to calculate the sum of the numbers of a given list of numbers using lambda function.\ndef sum_nums(nums):\n    return sum(num for num in nums if num)\n\n# <func> # Python \n# Write a function to calculate the sum of the numbers of a given list of numbers using lambda function.\ndef sum_nums(nums):\n    return sum(num for num in nums if num)\n\n# <func> # Python \n# Write a function to calculate the sum of the numbers of a given list of numbers using lambda function.\ndef sum_nums(nums):\n    return sum(num for num in nums if num)\n\n# <func> # Python \n# Write a function to calculate the sum of the numbers of a given list of numbers using lambda function.\ndef sum_nums(nums):\n    return sum(num for num in nums if num)\n\n# <func> # Python \n# Write a function to calculate the sum of the numbers of a given list of numbers using lambda function.\ndef sum_nums(nums):\n    return sum(num for num in nums if num)\n\n# <func> # Python \n# Write a function to calculate the sum of the numbers of a given list of numbers using lambda function.\ndef sum_nums(nums):\n    return sum(num for num in nums if num)\n\n# <func"], ["\n# <func> # Python \n# Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\ndef check_last (arr,n,p):\n    for i in range(n):\n        if arr[i]%2==0:\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n            arr[i] = arr[i]%2\n"], ["\n# <func> # Python \n# Write a function to find the nth hexagonal number.\ndef hexagonal_num(n):\n    return (1+3*(n-1))*(n-1)//2\n\n# <func> # Java\n# Write a function to find the nth hexagonal number.\ndef hexagonal_num(n):\n    return (1+3*(n-1))*(n-1)//2\n\n# <func> # JavaScript\n# Write a function to find the nth hexagonal number.\nfunction hexagonal_num(n) {\n    return (1+3*(n-1))*(n-1)//2\n}\n\n# <func> # C\n# Write a function to find the nth hexagonal number.\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <time.h>\n\nint main() {\n    int n;\n    srand(time(NULL));\n    printf(\"Enter the value of n: \");\n    scanf(\"%d\", &n);\n    int num = 1;\n    for (int i = 0; i < n; i++) {\n        num = (num + 3*(i-1))*(i-1) / 2;\n    }\n    printf(\"%d\\n\", num);\n    return 0;\n}\n\n# <func> # C++\n# Write a function to find the nth hexagonal number.\n#include <iostream>\n#include <cmath>\n#include <time.h>\n\nint main() {\n    int n;\n    srand(time(NULL));\n    std::cout << \"Enter the value of n: \";\n    std::cin >> n;\n    int num = 1;\n    for (int i = 0; i < n; i++) {\n        num = (num + 3*(i-1))*(i-1) / 2;\n    }\n    std::cout << num << std::endl;\n    return 0;\n}\n\n# <func> # Go\n# Write a function to find the nth hexagonal number.\nfunc hexag"], ["\n# <func> # Python \n# Write a function to calculate electricity bill.\ndef cal_electbill(units):\n    # Calculate electricity bill\n    bill = 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["from array import array\r\n\n# <func> # Python \n# Write a function to find the ration of zeroes in an array of integers.\ndef zero_count(nums):\n    zero_count = 0\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n    return zero_count\n\n# <func> # Python \n# Write a function to find the ration of ones in an array of integers.\ndef ones_count(nums):\n    ones_count = 0\n    for i in nums:\n        if i == 1:\n            ones_count += 1\n    return ones_count\n\n# <func> # Python \n# Write a function to find the ration of twos in an array of integers.\ndef twos_count(nums):\n    twos_count = 0\n    for i in nums:\n        if i == 2:\n            twos_count += 1\n    return twos_count\n\n# <func> # Python \n# Write a function to find the ration of threes in an array of integers.\ndef threes_count(nums):\n    threes_count = 0\n    for i in nums:\n        if i == 3:\n            threes_count += 1\n    return threes_count\n\n# <func> # Python \n# Write a function to find the ration of fours in an array of integers.\ndef fours_count(nums):\n    fours_count = 0\n    for i in nums:\n        if i == 4:\n            fours_count += 1\n    return fours_count\n\n# <func> # Python \n# Write a function to find the ration of fives in an array of integers.\ndef fives_count(nums):\n    fives_count = 0\n    for i in nums:\n        if i == 5:\n            fives_count += 1\n    return fives_count\n\n# <func> # Python \n# Write a function to find the ration of sevens in an array of integers.\ndef sevens_count(nums):\n    se"], ["\n# <func> # Python \n# Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    else:\n        return is_Sum_Of_Powers_Of_Two(n//2) or is_Sum_Of_Powers_Of_Two(n//2+1)\n\n# <func> # Python \n# Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    else:\n        return is_Sum_Of_Powers_Of_Two(n//2) or is_Sum_Of_Powers_Of_Two(n//2+1)\n\n# <func> # Python \n# Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    else:\n        return is_Sum_Of_Powers_Of_Two(n//2) or is_Sum_Of_Powers_Of_Two(n//2+1)\n\n# <func> # Python \n# Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    else:\n        return is_Sum_Of_Powers_Of_Two(n//2) or is_Sum_Of_Powers_Of_Two(n//2+1)\n\n# <func> # Python \n# Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n"], ["\n# <func> # Python \n# Write a function to find the circumference of a circle.\ndef circle_circumference(r):\n    return 2 * 3.14 * r\n\n# <func> # Python \n# Write a function to find the area of a circle.\ndef circle_area(r):\n    return 3.14 * r * r\n\n# <func> # Python \n# Write a function to find the perimeter of a circle.\ndef circle_perimeter(r):\n    return 2 * 3.14 * r\n\n# <func> # Python \n# Write a function to find the area of a circle.\ndef circle_area(r):\n    return 3.14 * r * r\n\n# <func> # Python \n# Write a function to find the perimeter of a circle.\ndef circle_perimeter(r):\n    return 2 * 3.14 * r\n\n# <func> # Python \n# Write a function to find the area of a circle.\ndef circle_area(r):\n    return 3.14 * r * r\n\n# <func> # Python \n# Write a function to find the perimeter of a circle.\ndef circle_perimeter(r):\n    return 2 * 3.14 * r\n\n# <func> # Python \n# Write a function to find the area of a circle.\ndef circle_area(r):\n    return 3.14 * r * r\n\n# <func> # Python \n# Write a function to find the perimeter of a circle.\ndef circle_perimeter(r):\n    return 2 * 3.14 * r\n\n# <func> # Python \n# Write a function to find the area of a circle.\ndef circle_area(r):\n    return 3.14 * r * r\n\n# <func> # Python \n# Write a function to find the perimeter of a circle.\ndef circle_perimeter(r):\n    return 2 * 3.14 * r\n\n# <func> # Python \n# Write a function to find the area of a circle.\ndef circle_area(r):"], ["\n# <func> # Python \n# Write a function to extract elements that occur singly in the given tuple list.\ndef extract_singly(test_list):\n    return [x for x in test_list if len(x) == 1]\n\n# <func> # Python \n# Write a function that takes a list of integers and returns a list of the integers that are divisible by 3.\ndef divisible_by_3(test_list):\n    return [x for x in test_list if x % 3 == 0]\n\n# <func> # Python \n# Write a function that takes a list of integers and returns a list of the integers that are divisible by 5.\ndef divisible_by_5(test_list):\n    return [x for x in test_list if x % 5 == 0]\n\n# <func> # Python \n# Write a function that takes a list of integers and returns a list of the integers that are divisible by 7.\ndef divisible_by_7(test_list):\n    return [x for x in test_list if x % 7 == 0]\n\n# <func> # Python \n# Write a function that takes a list of integers and returns a list of the integers that are divisible by 11.\ndef divisible_by_11(test_list):\n    return [x for x in test_list if x % 11 == 0]\n\n# <func> # Python \n# Write a function that takes a list of integers and returns a list of the integers that are divisible by 13.\ndef divisible_by_13(test_list):\n    return [x for x in test_list if x % 13 == 0]\n\n# <func> # Python \n# Write a function that takes a list of integers and returns a list of the integers that are divisible by 17.\ndef divisible_by_17(test_list):\n    return [x for x in test_list if x % 17 == 0]\n\n# <func> # Python \n# Write a function that takes a list of integers and returns a list of the integers that are divisible by 19."], ["\n# <func> # Python \n# Write a function to sort a list of elements using pancake sort.\ndef pancake_sort(nums):\n    # Write your code here\n    for i in range(len(nums)-1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n\n\n# +\n# Write a function to sort a list of elements using pancake sort.\n\ndef pancake_sort(nums):\n    # Write your code here\n    for i in range(len(nums)-1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n\n\n# +\n# Write a function to sort a list of elements using pancake sort.\n\ndef pancake_sort(nums):\n    # Write your code here\n    for i in range(len(nums)-1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n\n\n# +\n# Write a function to sort a list of elements using pancake sort.\n\ndef pancake_sort(nums):\n    # Write your code here\n    for i in range(len(nums)-1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n\n\n# +\n# Write a function to sort a list of elements using pancake sort.\n\ndef pancake_sort(nums):\n   "], ["\n# <func> # Python \n# Write a function to count the same pair in three given lists.\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                count += 1\n    return count\n"], ["\n# <func> # Python \n# Write a function to find number of lists present in the given tuple.\ndef find_lists(Input):\n    # Create a list of lists\n    lists = []\n    for i in Input:\n        lists.append(i)\n    # Return the number of lists present in the given tuple\n    return len(lists)\n\n# Driver code"], ["\n# <func> # Python \n# Write a python function to find the sum of absolute differences in all pairs of the given array.\ndef sum_Pairs(arr,n):\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += abs(arr[i]-arr[j])\n    return sum\n\n\n# +\n# Write a python function to find the sum of absolute differences in all pairs of the given array.\n# Input:\n# arr = [1,2,3,4,5]\n# n = 3\n# Output:\n# 10\n# Explanation:\n# The sum of absolute differences between 1 and 2 is 3,\n# the sum of absolute differences between 2 and 3 is 1,\n# the sum of absolute differences between 3 and 4 is 2,\n# the sum of absolute differences between 4 and 5 is 1.\n# The sum of absolute differences between 1 and 3 is 4,\n# the sum of absolute differences between 2 and 4 is 1,\n# the sum of absolute differences between 3 and 5 is 2,\n# the sum of absolute differences between 4 and 5 is 1.\n# The sum of absolute differences between 1 and 4 is 5,\n# the sum of absolute differences between 2 and 5 is 3,\n# the sum of absolute differences between 3 and 5 is 2,\n# the sum of absolute differences between 4 and 5 is 1.\n# The sum of absolute differences between 1 and 5 is 6,\n# the sum of absolute differences between 2 and 5 is 3,\n# the sum of absolute differences between 3 and 5 is 2,\n# the sum of absolute differences between 4 and 5 is 1.\n# The sum of absolute differences between 1 and 5 is 6,\n# the sum of absolute differences between 2 and 5 is 3,\n# the sum of absolute differences between 3 and 5 is 2,\n# the sum of absolute differences between 4 and 5 is 1.\n# The sum of absolute differences between 1 and 5 is 6,"], ["\n# <func> # Python \n# Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr,n):\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                max_diff = max(max_diff,abs(arr[i]-arr[j]))\n    return max_diff\n\n\n# +\n# Write a python function to find the maximum difference between any two elements in a given array.\n# max_diff = 0\n# for i in range(n):\n#     for j in range(i+1,n):\n#         if arr[i] > arr[j]:\n#             max_diff = max(max_diff,abs(arr[i]-arr[j]))\n# return max_diff\n\n# +\n# Write a python function to find the maximum difference between any two elements in a given array.\n# max_diff = 0\n# for i in range(n):\n#     for j in range(i+1,n):\n#         if arr[i] > arr[j]:\n#             max_diff = max(max_diff,abs(arr[i]-arr[j]))\n# return max_diff\n\n# +\n# Write a python function to find the maximum difference between any two elements in a given array.\n# max_diff = 0\n# for i in range(n):\n#     for j in range(i+1,n):\n#         if arr[i] > arr[j]:\n#             max_diff = max(max_diff,abs(arr[i]-arr[j]))\n# return max_diff\n\n# +\n# Write a python function to find the maximum difference between any two elements in a given array.\n# max_diff = 0\n# for i in range(n):\n#     for j in range(i+1,n):\n#         if arr[i] > arr[j]:\n#             max_diff = max(max_diff,abs(arr[i]-arr[j]))\n# return max_diff\n\n# +\n"], ["\n# <func> # Python \n# Write a function to find the ascii value of total characters in a string.\ndef ascii_value_string(str1):\n    return sum(ord(c) for c in str1)\n"], ["\n# <func> # Python \n# Write a function to find the maximum total path sum in the given triangle.\ndef max_path_sum(tri, m, n):\n    tri = tri[::-1]\n    tri = [sum(tri[i:i+3]) for i in range(len(tri))]\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append(0)\n    tri.append"], ["\n# <func> # Python \n# Write a function to divide a number into two parts such that the sum of digits is maximum.\ndef sum_digits_single(x):\n    return sum(map(int, str(x)))\n\n# Write a function to divide a number into two parts such that the sum of digits is maximum.\n# Input: 123456789\n# Output: 123456789\n# Explanation: 123456789 + 123456789 = 243456789\n\n# Write a function to divide a number into two parts such that the sum of digits is maximum.\n# Input: 123456789\n# Output: 123456789\n# Explanation: 123456789 + 123456789 = 243456789\n\n# Write a function to divide a number into two parts such that the sum of digits is maximum.\n# Input: 123456789\n# Output: 123456789\n# Explanation: 123456789 + 123456789 = 243456789\n\n# Write a function to divide a number into two parts such that the sum of digits is maximum.\n# Input: 123456789\n# Output: 123456789\n# Explanation: 123456789 + 123456789 = 243456789\n\n# Write a function to divide a number into two parts such that the sum of digits is maximum.\n# Input: 123456789\n# Output: 123456789\n# Explanation: 123456789 + 123456789 = 243456789\n\n# Write a function to divide a number into two parts such that the sum"], ["\n# <func> # Python \n# Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\ndef longest_subseq_with_diff_one(arr, n):\n    # Write your code here\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                dp[i] = dp[i] + dp[j]\n            else:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[n]\n\n\n# +\n# 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["\n# <func> # Python \n# Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c):\n    if a in b:\n        return True\n    else:\n        return False\n\n\n# +\n# <func> # Python \n# Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c):\n    if a in b:\n        return True\n    else:\n        return False\n\n\n# -\n\n# <func> # Python \n# Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c):\n    if a in b:\n        return True\n    else:\n        return False\n\n\n# +\n# <func> # Python \n# Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c):\n    if a in b:\n        return True\n    else:\n        return False\n\n\n# -\n\n# <func> # Python \n# Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c):\n    if a in b:\n        return True\n    else:\n        return False\n\n\n# +\n# <func> # Python \n# Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c):\n    if a in b:\n        return True\n    else:\n        return False\n\n\n# -\n\n# <func> # Python \n# Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c):\n    if a in b:\n        return True\n    else:\n        return False\n\n\n# +\n# <func> # Python \n# Write a python function to find whether the given number is present in the infinite sequence or not.\ndef"], ["\n# <func> # Python \n# Write a python function to check whether the given number is co-prime or not.\ndef gcd(p,q):\n    while(q):\n        p,q = q,p%q\n    return p\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n%2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for divisor in range(3, max_divisor, 2):\n        if n%divisor == 0:\n            return False\n    return True\n\ndef is_prime_list(numbers):\n    for number in numbers:\n        if not is_prime(number):\n            return False\n    return True\n\ndef is_prime_list_2(numbers):\n    for number in numbers:\n        if not is_prime(number):\n            return False\n    return True\n\ndef is_prime_list_3(numbers):\n    for number in numbers:\n        if not is_prime(number):\n            return False\n    return True\n\ndef is_prime_list_4(numbers):\n    for number in numbers:\n        if not is_prime(number):\n            return False\n    return True\n\ndef is_prime_list_5(numbers):\n    for number in numbers:\n        if not is_prime(number):\n            return False\n    return True\n\ndef is_prime_list_6(numbers):\n    for number in numbers:\n        if not is_prime(number):\n            return False\n    return True\n\ndef is_prime_list_7(numbers):\n    for number in numbers:\n        if not is_prime(number):\n            return False\n    return True\n\ndef is_prime_list_8(numbers):\n    for number in numbers:\n        if not is_prime(number):\n            return False\n    return True\n\ndef is_prime_list_9(numbers):\n    for number in numbers:\n        if not is_prime(number):\n            return False\n    return True\n\ndef is_prime_list_10(numbers):\n    for number in numbers"], ["\n# <func> # Python \n# Write a function to sort the given array by using merge sort.\ndef merge(a,b):\n    c = []\n    i = 0\n    j = 0\n    while i < len(a) and j < len(b):\n        if a[i] < b[j]:\n            c.append(a[i])\n            i += 1\n        else:\n            c.append(b[j])\n            j += 1\n    while i < len(a):\n        c.append(a[i])\n        i += 1\n    while j < len(b):\n        c.append(b[j])\n        j += 1\n    return c\n\ndef mergeSort(a):\n    if len(a) <= 1:\n        return a\n    mid = len(a) // 2\n    left = a[:mid]\n    right = a[mid:]\n    return merge(mergeSort(left), mergeSort(right))\n\ndef mergeSortedArray(a):\n    return mergeSort(a)\n\n# Testing"], ["\n# <func> # Python \n# Write a function to find the vertex of a parabola.\ndef parabola_vertex(a, b, c):\n    # Find the vertex of the parabola\n    x = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    return x\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                nums[i][j] = 0\n            else:\n                nums[i][j] = nums[i][j] + nums[i][j]\n\n# <func> # Python \n# Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                nums[i][j] = 0\n            else:\n                nums[i][j] = nums[i][j] + nums[i][j]\n\n# <func> # Python \n# Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                nums[i][j] = 0\n            else:\n                nums[i][j] = nums[i][j] + nums[i][j]\n\n# <func> # Python \n# Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                nums[i][j] = 0\n            else:\n                nums[i][j] = nums[i][j] + nums[i][j]\n\n# <func> # Python \n# Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                nums[i][j] = 0\n            else:\n                nums[i][j] = nums[i][j] + nums["], ["\n# <func> # Python \n# Write a python function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n):\n    return (n & 1) ^ (n >> 1)\n\n# <func> # Java\n# Write a Java function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n):\n    return (n & 1) ^ (n >> 1)\n\n# <func> # C\n# Write a C function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n):\n    return (n & 1) ^ (n >> 1)\n\n# <func> # C++\n# Write a C++ function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n):\n    return (n & 1) ^ (n >> 1)\n\n# <func> # JavaScript\n# Write a JavaScript function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n):\n    return (n & 1) ^ (n >> 1)\n\n# <func> # Python \n# Write a Python function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n):\n    return (n & 1) ^ (n >> 1)\n\n# <func> # Java\n# Write a Java function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n):\n    return (n & 1) ^ (n >> 1)\n\n# <func> # C\n# Write a C function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n):\n    return (n & 1) ^ (n >> 1)\n\n# <func> # C++\n# Write a C++ function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n):\n    return (n & 1) ^ (n >> 1)\n\n# <func> # JavaScript\n# Write a JavaScript function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n):\n"], ["\n# <func> # Python \n# Write a function to convert a tuple of string values to a tuple of integer values.\ndef tuple_int_str(tuple_str):\n    return tuple(map(int, tuple_str))\n\n# <func> # Python \n# Write a function that takes a list of integers and returns a list of tuples of the form (x, y) where x and y are integers.\ndef list_tuple_int(list_int):\n    return [tuple(map(int, list_int)) for list_int in list_int]\n\n# <func> # Python \n# Write a function that takes a list of tuples of the form (x, y) and returns a list of tuples of the form (x, y, z).\ndef list_tuple_int_z(list_tuple_int):\n    return [(x, y, z) for list_tuple_int in list_tuple_int for x, y, z in list_tuple_int]\n\n# <func> # Python \n# Write a function that takes a list of tuples of the form (x, y) and returns a list of tuples of the form (x, y, z, w).\ndef list_tuple_int_z_w(list_tuple_int):\n    return [(x, y, z, w) for list_tuple_int in list_tuple_int for x, y, z, w in list_tuple_int]\n\n# <func> # Python \n# Write a function that takes a list of tuples of the form (x, y) and returns a list of tuples of the form (x, y, z, w, x, y, z, w, x, y, z, w).\ndef list_tuple_int_z_w_x(list_tuple_int):\n    return [(x, y, z, w, x, y, z, w, x, y, z, w) for list_tuple_int in list_tuple_int for x, y, z, w, x, y, z, w, x, y, z, w in list_tuple_int]\n\n# <func> # Python \n# Write a function that takes a list of tuples of the form"], ["from itertools import groupby\r\n\n# <func> # Python \n# Write a function to reflect the run-length encoding from a list.\ndef encode_list(list1):\n    # Write your code here\n    # return list1\n    return [list1[i:i+1] for i in range(len(list1))]\n\n# <func> # Python \n# Write a function to reverse the run-length encoding.\ndef reverse_list(list1):\n    # Write your code here\n    return list1[::-1]\n\n# <func> # Python \n# Write a function to reverse the run-length encoding.\ndef reverse_list(list1):\n    # Write your code here\n    return list1[::-1]\n\n# <func> # Python \n# Write a function to reverse the run-length encoding.\ndef reverse_list(list1):\n    # Write your code here\n    return list1[::-1]\n\n# <func> # Python \n# Write a function to reverse the run-length encoding.\ndef reverse_list(list1):\n    # Write your code here\n    return list1[::-1]\n\n# <func> # Python \n# Write a function to reverse the run-length encoding.\ndef reverse_list(list1):\n    # Write your code here\n    return list1[::-1]\n\n# <func> # Python \n# Write a function to reverse the run-length encoding.\ndef reverse_list(list1):\n    # Write your code here\n    return list1[::-1]\n\n# <func> # Python \n# Write a function to reverse the run-length encoding.\ndef reverse_list(list1):\n    # Write your code here\n    return list1[::-1]\n\n# <func> # Python \n# Write a function to reverse the run-length encoding.\ndef reverse_list(list1):\n    # Write your code here\n    return list1[::-1]\n\n# <func> # Python \n# Write a function to reverse the run-length encoding.\ndef reverse_list(list1):\n    # Write your code here\n    return list1[::-1]\n\n"], ["\n# <func> # Python \n# Write a python function to find k number of operations required to make all elements equal.\ndef min_Ops(arr,n,k):\n    arr.sort()\n    if n==1:\n        return 0\n    if k==1:\n        return 1\n    if k==n:\n        return 2\n    if k==n-1:\n        return 3\n    if k==n-2:\n        return 4\n    if k==n-3:\n        return 5\n    if k==n-4:\n        return 6\n    if k==n-5:\n        return 7\n    if k==n-6:\n        return 8\n    if k==n-7:\n        return 9\n    if k==n-8:\n        return 10\n    if k==n-9:\n        return 11\n    if k==n-10:\n        return 12\n    if k==n-11:\n        return 13\n    if k==n-12:\n        return 14\n    if k==n-13:\n        return 15\n    if k==n-14:\n        return 16\n    if k==n-15:\n        return 17\n    if k==n-16:\n        return 18\n    if k==n-17:\n        return 19\n    if k==n-18:\n        return 20\n    if k==n-19:\n        return 21\n    if k==n-20:\n        return 22\n    if k==n-21:\n        return 23\n    if k==n-22:\n        return 24\n    if k==n-23:\n        return 25\n    if k==n-24:\n        return 26\n    if k==n-25:\n        return 27\n    if k==n-26:\n        return 28\n    if k==n-27:\n        return 29\n    if k==n-28:\n       "], ["\n# <func> # Python \n# Write a function to print the season for the given month and day.\ndef month_season(month,days):\n    if month == 1:\n        season = 'Winter'\n    elif month == 2:\n        season = 'Spring'\n    elif month == 3:\n        season = 'Summer'\n    elif month == 4:\n        season = 'Fall'\n    elif month == 5:\n        season = 'Winter'\n    elif month == 6:\n        season = 'Spring'\n    elif month == 7:\n        season = 'Summer'\n    elif month == 8:\n        season = 'Fall'\n    elif month == 9:\n        season = 'Winter'\n    elif month == 10:\n        season = 'Spring'\n    elif month == 11:\n        season = 'Summer'\n    elif month == 12:\n        season = 'Fall'\n    return season\n\n# <func> # Python \n# Write a function to print the day of the week for the given month and day.\ndef day_of_week(month,days):\n    if month == 1:\n        day = 'Monday'\n    elif month == 2:\n        day = 'Tuesday'\n    elif month == 3:\n        day = 'Wednesday'\n    elif month == 4:\n        day = 'Thursday'\n    elif month == 5:\n        day = 'Friday'\n    elif month == 6:\n        day = 'Saturday'\n    elif month == 7:\n        day = 'Sunday'\n    return day\n\n# <func> # Python \n# Write a function to print the number of days in the given month.\ndef days_in_month(month):\n    if month == 1:\n        days = 28\n    elif month == 2:\n        days = 29\n    elif month == 3:\n        days = 31\n    return days\n\n# <func> # Python \n# Write a function to print the number of weeks in the given month.\ndef weeks_in_month("], ["\n# <func> # Python \n# Write a function to find x and y that satisfies ax + by = n.\ndef solution (a, b, n):\n    x = (n - b) / a\n    y = n - a * x\n    return x, y\n\n# <func> # C++\n# Write a function to find x and y that satisfies ax + by = n.\n#\n# <func> # C\n# Write a function to find x and y that satisfies ax + by = n.\n#\n# <func> # Java\n# Write a function to find x and y that satisfies ax + by = n.\n#\n# <func> # JavaScript\n# Write a function to find x and y that satisfies ax + by = n.\n#\n# <func> # Python \n# Write a function to find x and y that satisfies ax + by = n.\n#\n# <func> # C++\n# Write a function to find x and y that satisfies ax + by = n.\n#\n# <func> # C\n# Write a function to find x and y that satisfies ax + by = n.\n#\n# <func> # Java\n# Write a function to find x and y that satisfies ax + by = n.\n#\n# <func> # JavaScript\n# Write a function to find x and y that satisfies ax + by = n.\n#\n# <func> # Python \n# Write a function to find x and y that satisfies ax + by = n.\n#\n# <func> # C++\n# Write a function to find x and y that satisfies ax + by = n.\n#\n# <func> # C\n# Write a function to find x and y that satisfies ax + by = n.\n#\n# <func> # Java\n# Write a function to find x and y that satisfies ax + by = n.\n#\n# <func> # JavaScript\n# Write a function to find x and y that satisfies ax + by = n.\n#\n# <func> # Python \n# Write a function to find x and y that satisfies ax + by = n.\n#\n# <func> # C++\n# Write a function to find x and y that satisfies ax + by = n.\n#\n# <func> # C\n"], ["\n# <func> # Python \n# Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\n    # Create a new list\n    new_list = []\n    # Iterate through the list1\n    for element in list1:\n        # If the element is in the list2, remove it from the new list\n        if element in list2:\n            new_list.append(element)\n    # Return the new list\n    return new_list\n\n# Test the function\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]"], ["\n# <func> # Python \n# Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\ndef sum_series(n):\n    sum = 0\n    for i in range(n):\n        sum += i\n    return sum\n"], ["from math import tan, pi\r\n\n# <func> # Python \n# Write a function to calculate the area of a regular polygon.\ndef area_polygon(s,l):\n    # Calculate the area of a regular polygon\n    # with n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l\n    # and n sides and length l"], ["import math \r\n\n# <func> # Python \n# Write a python function to check whether the sum of divisors are same or not.\ndef divSum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n# <func> # Java\n# Write a Java function to check whether the sum of divisors are same or not.\npublic static boolean divSum(int n){\n    int sum = 0;\n    for(int i = 1; i <= n; i++){\n        if(n % i == 0){\n            sum += i;\n        }\n    }\n    return sum == n;\n}\n\n# <func> # C\n# Write a C function to check whether the sum of divisors are same or not.\n# int divSum(int n){\n#     int sum = 0;\n#     for(int i = 1; i <= n; i++){\n#         if(n % i == 0){\n#             sum += i;\n#         }\n#     }\n#     return sum == n;\n# }\n\n# <func> # C++\n# Write a C++ function to check whether the sum of divisors are same or not.\n# int divSum(int n){\n#     int sum = 0;\n#     for(int i = 1; i <= n; i++){\n#         if(n % i == 0){\n#             sum += i;\n#         }\n#     }\n#     return sum == n;\n# }\n\n# <func> # C#\n# Write a C# function to check whether the sum of divisors are same or not.\n# int divSum(int n){\n#     int sum = 0;\n#     for(int i = 1; i <= n; i++){\n#         if(n % i == 0){\n#             sum += i;\n#         }\n#     }\n#     return sum == n;\n# }\n\n# <func> # Python\n# Write a Python function to check whether the sum of divisors are same or not.\ndef divSum(n):\n    sum ="], ["\n# <func> # Python \n# Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\ndef count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].lower():\n            count += 1\n    return count\n\n\n# +\n# Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n# -\n"], ["\n# <func> # Python \n# Write a python function to count the pairs with xor as an even number.\ndef find_even_Pair(A,N):\n    even_count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_count += 1\n    return even_count\n"], ["\n# <func> # Python \n# Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2**(n-1)\n\n# <func> # Python \n# Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2**(n-1)\n\n# <func> # Python \n# Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2**(n-1)\n\n# <func> # Python \n# Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2**(n-1)\n\n# <func> # Python \n# Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2**(n-1)\n\n# <func> # Python \n# Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2**(n-1)\n\n# <func> # Python \n# Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n):\n    if n == 0:\n        return 1\n    else:\n        return 2**(n-1)\n\n# <func> # Python \n# Write a python function to find smallest power of 2 greater than or equal to n"], ["\n# <func> # Python \n# Write a python function to find the frequency of a number in a given array.\ndef frequency(a,x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n\n# <func> # C\n# Write a C function to find the frequency of a number in a given array.\ndef frequency(a,x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n\n# <func> # C++\n# Write a C++ function to find the frequency of a number in a given array.\ndef frequency(a,x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n\n# <func> # Java\n# Write a Java function to find the frequency of a number in a given array.\ndef frequency(a,x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n\n# <func> # JavaScript\n# Write a JavaScript function to find the frequency of a number in a given array.\nfunction frequency(a,x) {\n    count = 0\n    for (i = 0; i < a.length; i++) {\n        if (a[i] == x) {\n            count += 1\n        }\n    }\n    return count\n}\n\n# <func> # Python \n# Write a Python function to find the frequency of a number in a given array.\ndef frequency(a,x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n\n# <func> # C\n# Write a C function to find the frequency of a number in a given array.\ndef frequency(a,x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n\n# <func> # C++\n# Write a C++ function to find the frequency of a number in a given array.\ndef frequency(a,"], ["\n# <func> # Python \n# Write a function to calculate the nth pell number.\ndef get_pell(n):\n    if n == 1:\n        return 1\n    else:\n        return (n*(n+1))//2\n\n# <func> # Python \n# Write a function to calculate the nth pell number.\ndef get_pell(n):\n    if n == 1:\n        return 1\n    else:\n        return (n*(n+1))//2\n\n# <func> # Python \n# Write a function to calculate the nth pell number.\ndef get_pell(n):\n    if n == 1:\n        return 1\n    else:\n        return (n*(n+1))//2\n\n# <func> # Python \n# Write a function to calculate the nth pell number.\ndef get_pell(n):\n    if n == 1:\n        return 1\n    else:\n        return (n*(n+1))//2\n\n# <func> # Python \n# Write a function to calculate the nth pell number.\ndef get_pell(n):\n    if n == 1:\n        return 1\n    else:\n        return (n*(n+1))//2\n\n# <func> # Python \n# Write a function to calculate the nth pell number.\ndef get_pell(n):\n    if n == 1:\n        return 1\n    else:\n        return (n*(n+1))//2\n\n# <func> # Python \n# Write a function to calculate the nth pell number.\ndef get_pell(n):\n    if n == 1:\n        return 1\n    else:\n        return (n*(n+1))//2\n\n# <func> # Python \n# Write a function to calculate the nth pell number.\ndef get_pell(n):\n    if n == 1:\n        return 1\n    else:\n        return (n*(n+1))//2\n\n# <func> # Python \n# Write a function to calculate the nth pell number."], ["\n# <func> # Python \n# Write a function to find sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n\n# <func> # Python \n# Write a function to find the sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n\n# <func> # Python \n# Write a function to find the sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n\n# <func> # Python \n# Write a function to find the sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n\n# <func> # Python \n# Write a function to find the sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n\n# <func> # Python \n# Write a function to find the sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n\n# <func> # Python \n# Write a function to find the sum of the numbers in a list between the indices of a specified range.\ndef sum_range_"], ["import math\r\n\n# <func> # Python \n# Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n    return 5*(a + a + a + a + a)\n\n# <func> # Java\n# Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n    return 5 * (a + a + a + a + a)\n\n# <func> # C\n# Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n    return 5 * (a + a + a + a + a)\n\n# <func> # C++\n# Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n    return 5 * (a + a + a + a + a)\n\n# <func> # C#\n# Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n    return 5 * (a + a + a + a + a)\n\n# <func> # F#\n# Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n    return 5 * (a + a + a + a + a)\n\n# <func> # Go\n# Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n    return 5 * (a + a + a + a + a)\n\n# <func> # Haskell\n# Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n    return 5 * (a + a + a + a + a)\n\n# <func> # Ipython\n# Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n    return 5 * (a + a + a + a + a)\n\n# <func> # JavaScript\n# Write a function to find the perimeter of a pentagon.\nfunction perimeter_pentagon(a) {\n    return 5 * (a + a + a + a + a)\n}"], ["\n# <func> # Python \n# Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef count_occurance(s):\n    count = 0\n    for i in s:\n        if i == 'std':\n            count += 1\n    return count\n\n\n# +\n# Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef count_occurance(s):\n    count = 0\n    for i in s:\n        if i == 'std':\n            count += 1\n    return count\n"], ["import re\r\n\n# <func> # Python \n# Write a function to remove everything except alphanumeric characters from a string.\ndef remove_splchar(text):\n    text = text.replace(' ', '')\n    text = text.replace('-', '')\n    text = text.replace('_', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('+', '')\n    text = text.replace('*', '')\n    text = text.replace(':', '')\n    text = text.replace(';', '')\n    text = text.replace('=', '')\n    text = text.replace('?', '')\n    text = text.replace('!', '')\n    text = text.replace('@', '')\n    text = text.replace('$', '')\n    text = text.replace('%', '')\n    text = text.replace('^', '')\n    text = text.replace('&', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('{', '')\n    text = text.replace('}', '')\n    text = text.replace('|', '')\n    text = text.replace('~', '')\n    text = text.replace('-', '')\n    text = text.replace('_', '')\n    text = text.replace('+', '')\n    text = text.replace('*', '')\n    text = text.replace(':', '')\n    text = text.replace(';', '')\n    text = text.replace('=', '')\n    text = text.replace('?', '')\n    text = text.replace('!', '')\n    text = text.replace('@', '')\n    text = text.replace('$', '')\n    text = text.replace('%', '')\n    text = text.replace('^', '')\n    text = text.replace('&', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('{', '')\n    text = text.replace('}', '')\n    text = text.replace('|', '')\n    text = text.replace('~', '')\n    text ="], ["\n# <func> # Python \n# Write a function to group a sequence of key-value pairs into a dictionary of lists.\ndef group_keyvalue(l):\n    # Your code here\n    return l\n\n# <func> # Python \n# Write a function to convert a list of numbers into a dictionary of lists.\ndef convert_list_to_dict(l):\n    # Your code here\n    return l\n\n# <func> # Python \n# Write a function to convert a list of numbers into a dictionary of lists.\ndef convert_list_to_dict(l):\n    # Your code here\n    return l\n\n# <func> # Python \n# Write a function to convert a list of numbers into a dictionary of lists.\ndef convert_list_to_dict(l):\n    # Your code here\n    return l\n\n# <func> # Python \n# Write a function to convert a list of numbers into a dictionary of lists.\ndef convert_list_to_dict(l):\n    # Your code here\n    return l\n\n# <func> # Python \n# Write a function to convert a list of numbers into a dictionary of lists.\ndef convert_list_to_dict(l):\n    # Your code here\n    return l\n\n# <func> # Python \n# Write a function to convert a list of numbers into a dictionary of lists.\ndef convert_list_to_dict(l):\n    # Your code here\n    return l\n\n# <func> # Python \n# Write a function to convert a list of numbers into a dictionary of lists.\ndef convert_list_to_dict(l):\n    # Your code here\n    return l\n\n# <func> # Python \n# Write a function to convert a list of numbers into a dictionary of lists.\ndef convert_list_to_dict(l):\n    # Your code here\n    return l\n\n# <func> # Python \n# Write a function to convert a list of numbers into a dictionary of lists.\ndef convert_list_to_dict(l):\n    # Your code here\n    return l\n\n# <func> # Python \n# Write a function to convert a list of numbers into a dictionary of lists.\ndef convert_list"], ["\n# <func> # Python \n# Write a function to verify validity of a string of parentheses.\ndef is_valid_parenthese( str1):\n    stack = []\n    for char in str1:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n# <func> # Python \n# Write a function to check if a string is a palindrome.\ndef is_palindrome( str1):\n    return str1 == str1[::-1]\n\n# <func> # Python \n# Write a function to check if a string is a palindrome.\ndef is_palindrome( str1):\n    return str1 == str1[::-1]\n\n# <func> # Python \n# Write a function to check if a string is a palindrome.\ndef is_palindrome( str1):\n    return str1 == str1[::-1]\n\n# <func> # Python \n# Write a function to check if a string is a palindrome.\ndef is_palindrome( str1):\n    return str1 == str1[::-1]\n\n# <func> # Python \n# Write a function to check if a string is a palindrome.\ndef is_palindrome( str1):\n    return str1 == str1[::-1]\n\n# <func> # Python \n# Write a function to check if a string is a palindrome.\ndef is_palindrome( str1):\n    return str1 == str1[::-1]\n\n# <func> # Python \n# Write a function to check if a string is a palindrome.\ndef is_palindrome( str1):\n    return str1 == str1[::-1]\n\n# <func> # Python \n# Write a function to check if a string is a palindrome.\ndef is_palindrome( str1):\n    return str1 == str1[::-1]\n\n# <func> # Python \n# Write a function to check if a string is"], ["\n# <func> # Python \n# Write a function to find the perimeter of a triangle.\ndef perimeter_triangle(a,b,c):\n    return 2*(a+b+c)\n\n# <func> # Python \n# Write a function to find the area of a triangle.\ndef area_triangle(a,b,c):\n    return (a+b+c)/2\n\n# <func> # Python \n# Write a function to find the volume of a cube.\ndef volume_cube(a):\n    return a**3\n\n# <func> # Python \n# Write a function to find the surface area of a cube.\ndef surface_area_cube(a):\n    return 6*a\n\n# <func> # Python \n# Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n    return r**2*h\n\n# <func> # Python \n# Write a function to find the surface area of a cylinder.\ndef surface_area_cylinder(r,h):\n    return 2*pi*r*h\n\n# <func> # Python \n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    return (1/3)*pi*r**2*h\n\n# <func> # Python \n# Write a function to find the surface area of a cone.\ndef surface_area_cone(r,h):\n    return (1/3)*pi*r**2*h\n\n# <func> # Python \n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return (4/3)*pi*r**3\n\n# <func> # Python \n# Write a function to find the surface area of a sphere.\ndef surface_area_sphere(r):\n    return 4*pi*r**2\n\n# <func> # Python \n# Write a function to find the volume of a frustum of a cone.\ndef volume_frustum_cone(a,b,h):\n    return (1/3)*pi*(a**2+b**"], ["\n# <func> # Python \n# Write a python function to find two distinct numbers such that their lcm lies within the given range.\ndef answer(L,R):\n    for i in range(R,L):\n        if lcm(i,i) > R:\n            return False\n    return True\n\ndef lcm(a,b):\n    return a*b//gcd(a,b)\n\ndef gcd(a,b):\n    while b:\n        a,b = b,a%b\n    return a\n\n# <func> # Python \n# Write a python function to find the sum of the digits of a given number.\ndef sum_of_digits(n):\n    sum = 0\n    while n > 0:\n        sum += n%10\n        n //= 10\n    return sum\n\n# <func> # Python \n# Write a python function to find the number of digits in a given number.\ndef number_of_digits(n):\n    return len(str(n))\n\n# <func> # Python \n# Write a python function to find the sum of the digits of a given number.\ndef sum_of_digits(n):\n    sum = 0\n    while n > 0:\n        sum += n%10\n        n //= 10\n    return sum\n\n# <func> # Python \n# Write a python function to find the number of digits in a given number.\ndef number_of_digits(n):\n    return len(str(n))\n\n# <func> # Python \n# Write a python function to find the sum of the digits of a given number.\ndef sum_of_digits(n):\n    sum = 0\n    while n > 0:\n        sum += n%10\n        n //= 10\n    return sum\n\n# <func> # Python \n# Write a python function to find the number of digits in a given number.\ndef number_of_digits(n):\n    return len(str(n))\n\n# <func> # Python \n# Write a python function to find the sum of the digits of a given number.\ndef sum_of"], ["import re\r\n\n# <func> # Python \n# Write a function to search some literals strings in a string.\ndef string_literals(patterns,text):\n    # Write your code here\n    return text\n\n# <func> # Java\n# Write a method that takes a string and a pattern and returns the number of occurrences of the pattern in the string.\ndef string_pattern(pattern,string):\n    # Write your code here\n    return 0\n\n# <func> # C++\n# Write a function that takes a string and a pattern and returns the number of occurrences of the pattern in the string.\ndef string_pattern(pattern,string):\n    # Write your code here\n    return 0\n\n# <func> # C\n# Write a function that takes a string and a pattern and returns the number of occurrences of the pattern in the string.\ndef string_pattern(pattern,string):\n    # Write your code here\n    return 0\n\n# <func> # C#\n# Write a function that takes a string and a pattern and returns the number of occurrences of the pattern in the string.\ndef string_pattern(pattern,string):\n    # Write your code here\n    return 0\n\n# <func> # C#\n# Write a function that takes a string and a pattern and returns the number of occurrences of the pattern in the string.\ndef string_pattern(pattern,string):\n    # Write your code here\n    return 0\n\n# <func> # C#\n# Write a function that takes a string and a pattern and returns the number of occurrences of the pattern in the string.\ndef string_pattern(pattern,string):\n    # Write your code here\n    return 0\n\n# <func> # C#\n# Write a function that takes a string and a pattern and returns the number of occurrences of the pattern in the string.\ndef string_pattern(pattern,string):\n    # Write your code here\n    return 0\n\n# <func> # C#\n# Write a function that takes a string and a pattern and returns the number of occurrences of the pattern in the string.\ndef string_pattern(pattern,string):\n    # Write your code here\n    return 0\n\n# <func> #"], ["\n# <func> # Python \n# Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x):\n    if x < 0:\n        return False\n    else:\n        return x % 2 == 0\n\n# <func> # Python \n# Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x):\n    if x < 0:\n        return False\n    else:\n        return x % 2 == 0\n\n# <func> # Python \n# Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x):\n    if x < 0:\n        return False\n    else:\n        return x % 2 == 0\n\n# <func> # Python \n# Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x):\n    if x < 0:\n        return False\n    else:\n        return x % 2 == 0\n\n# <func> # Python \n# Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x):\n    if x < 0:\n        return False\n    else:\n        return x % 2 == 0\n\n# <func> # Python \n# Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x):\n    if x < 0:\n        return False\n    else:\n        return x % 2 == 0\n\n# <func> # Python \n# Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x):\n    if x < 0:\n        return False\n    else:\n        return x % 2 == 0\n\n# <func> # Python \n# Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x):\n    if x < 0:\n        return False\n    else:\n"], ["from math import radians, sin, cos, acos\r\n\n# <func> # Python \n# Write a function to calculate distance between two points using latitude and longitude.\ndef distance_lat_long(slat,slon,elat,elon):\n    # Convert to radians\n    lat1 = math.radians(slat)\n    lon1 = math.radians(slon)\n    lat2 = math.radians(elat)\n    lon2 = math.radians(elon)\n    # Calculate distance\n    d = (math.sin((lat1-lat2)*math.cos(lon1*math.cos(lat2))))**2\n    # Return distance in km\n    return d*6371\n\n# <func> # Python \n# Write a function to calculate the speed of a moving object in km/h.\ndef speed_km_h(v,t):\n    # Convert to km/h\n    vkmh = v*t/3600\n    # Return speed in km/h\n    return vkmh\n\n# <func> # Python \n# Write a function to calculate the time it takes for a moving object to travel a given distance.\ndef time_km_h(v,t):\n    # Convert to km/h\n    vkmh = v*t/3600\n    # Return time in hours\n    return t/vkmh\n\n# <func> # Python \n# Write a function to calculate the time it takes for a moving object to travel a given distance.\ndef time_km_h(v,t):\n    # Convert to km/h\n    vkmh = v*t/3600\n    # Return time in hours\n    return t/vkmh\n\n# <func> # Python \n# Write a function to calculate the time it takes for a moving object to travel a given distance.\ndef time_km_h(v,t):\n    # Convert to km/h\n    vkmh = v*t/3600\n    # Return time in hours\n    return t/vkmh\n\n# <func> # Python \n# Write a function to calculate the time it takes for a moving object to travel a given"], ["\n# <func> # Python \n# Write a function to find the longest common prefix in the given set of strings.\ndef common_prefix_util(str1, str2):\n    i = j = 0\n    while i < len(str1) and j < len(str2):\n        if str1[i] == str2[j]:\n            i += 1\n            j += 1\n        else:\n            break\n    return str1[i:] + str2[j:]\n\n# Tests"], ["import re\r\n\n# <func> # Python \n# Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n    # Write your code here\n    return re.findall('[a-zA-Z]', string)\n\n# <func> # Java\n# Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n    # Write your code here\n    return re.findall('[a-zA-Z]', string)\n\n# <func> # C\n# Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n    # Write your code here\n    return re.findall('[a-zA-Z]', string)\n\n# <func> # C++\n# Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n    # Write your code here\n    return re.findall('[a-zA-Z]', string)\n\n# <func> # C#\n# Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n    # Write your code here\n    return re.findall('[a-zA-Z]', string)\n\n# <func> # Go\n# Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n    # Write your code here\n    return re.findall('[a-zA-Z]', string)\n\n# <func> # Haskell\n# Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n    # Write your code here\n    return re.findall('[a-zA-Z]', string)\n\n# <func> # JavaScript\n# Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n    # Write your code here\n    return re.findall('[a-zA-Z]', string)\n\n# <func> # Lu"], ["\n# <func> # Python \n# Write a function to count all the distinct pairs having a difference of k in any array.\ndef count_pairs(arr, n, k):\n    # Write your code here\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] - arr[j] == k:\n                count += 1\n    return count\n\n\n# +\n# Write your code here\n\ndef count_pairs(arr, n, k):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] - arr[j] == k:\n                count += 1\n    return count\n\n\n# -\n\n# ## 10. Write a function to print the first n Fibonacci numbers.\n\n# +\n# Write your code here\n\ndef fibonacci(n):\n    fib = [0, 1]\n    for i in range(2, n+1):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib\n\n\n# -\n\n# ## 11. Write a function to check if a given number is a Fibonacci number.\n\n# +\n# Write your code here\n\ndef is_fibonacci(n):\n    fib = [0, 1]\n    for i in range(2, n+1):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[n-1] == n\n\n\n# -\n\n# ## 12. Write a function to check if a given number is a Fibonacci number.\n\n# +\n# Write your code here\n\ndef is_fibonacci(n):\n    fib = [0, 1]\n    for i in range(2, n+1):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[n-1] == n\n\n\n# -\n\n# ## 13. Write a function to check if a given number is a Fib"], ["\n# <func> # Python \n# Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n    for i in list:\n        if i > num:\n            print(i)\n\n\n# +\n# <func> # Python \n# Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n    for i in list:\n        if i > num:\n            print(i)\n\n\n# -\n\n# <func> # Python \n# Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n    for i in list:\n        if i > num:\n            print(i)\n\n\n# +\n# <func> # Python \n# Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n    for i in list:\n        if i > num:\n            print(i)\n\n\n# -\n\n# <func> # Python \n# Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n    for i in list:\n        if i > num:\n            print(i)\n\n\n# +\n# <func> # Python \n# Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n    for i in list:\n        if i > num:\n            print(i)\n\n\n# -\n\n# <func> # Python \n# Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n    for i in list:\n        if i > num:\n            print(i)\n\n\n# +\n# <func> # Python \n# Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n    for i in list:\n        if i >"], ["\n# <func> # Python \n# Write a function to find the focus of a parabola.\ndef parabola_focus(a, b, c):\n    # Find the x-coordinate of the focus\n    x_f = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    # Find the y-coordinate of the focus\n    y_f = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n    return (x_f, y_f)\n\n# Test the function"], ["import re\r\n\n# <func> # Python \n# Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False\n\n# <func> # Java\n# Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False\n\n# <func> # C\n# Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False\n\n# <func> # C++\n# Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False\n\n# <func> # C#\n# Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False\n\n# <func> # Go\n# Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False\n\n# <func> # Haskell\n# Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False\n\n# <func> # JavaScript\n# Write a function to search some literals strings in a string by using regex.\nfunction check_literals(text, patterns) {\n    for (let pattern of patterns) {\n        if (pattern.test(text)) {\n            return true"], ["\n# <func> # Python \n# Write a function to find the longest common subsequence for the given two sequences.\ndef longest_common_subsequence(X, Y, m, n):\n    # Create a matrix of zeros of size (m+1) x (n+1)\n    L = [[0 for x in range(n+1)] for x in range(m+1)]\n\n    # Fill the matrix L\n    for i in range(m+1):\n        for j in range(n+1):\n            L[i][j] = L[i-1][j] + L[i][j-1]\n\n    # Find the LCS\n    LCS = \"\"\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            LCS += X[i-1]\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > LCS:\n            LCS = X[i-1]\n            i -= 1\n        else:\n            LCS += Y[j-1]\n            j -= 1\n\n    return LCS\n\n# Driver code"], ["\n# <func> # Python \n# Write a python function to check whether the given number can be represented by product of two squares or not.\ndef prod_Square(n):\n    if n == 0:\n        return 1\n    else:\n        return (n * (n + 1)) // 2\n\n# Driver Code"], ["\n# <func> # Python \n# Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n):\n    for i in range(1,n+1):\n        if i not in arr:\n            return i\n\n# <func> # Python \n# Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n):\n    for i in range(1,n+1):\n        if i not in arr:\n            return i\n\n# <func> # Python \n# Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n):\n    for i in range(1,n+1):\n        if i not in arr:\n            return i\n\n# <func> # Python \n# Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n):\n    for i in range(1,n+1):\n        if i not in arr:\n            return i\n\n# <func> # Python \n# Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n):\n    for i in range(1,n+1):\n        if i not in arr:\n            return i\n\n# <func> # Python \n# Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n):\n    for i in range(1,n+1):\n        if i not in arr:\n            return i\n\n# <func> # Python \n# Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n):\n    for i in range(1,n+1):\n        if i not in arr:\n            return i\n\n# <func> # Python \n# Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n):\n    for i in range(1,n+1):\n        if i not in arr:\n            return i\n\n# <func> # Python \n# Write a python function"], ["\n# <func> # Python \n# Write a python function to count the number of integral co-ordinates that lie inside a square.\ndef count_Intgral_Points(x1,y1,x2,y2):\n    count = 0\n    for i in range(x1,x2):\n        for j in range(y1,y2):\n            if (i**2 + j**2) <= (x2-x1)**2 + (y2-y1)**2:\n                count += 1\n    return count\n\n# <func> # Python \n# Write a python function to count the number of integral co-ordinates that lie inside a circle.\ndef count_Intgral_Points(x1,y1,x2,y2):\n    count = 0\n    for i in range(x1,x2):\n        for j in range(y1,y2):\n            if (i**2 + j**2) <= (x2-x1)**2 + (y2-y1)**2:\n                count += 1\n    return count\n\n# <func> # Python \n# Write a python function to count the number of integral co-ordinates that lie inside a rectangle.\ndef count_Intgral_Points(x1,y1,x2,y2):\n    count = 0\n    for i in range(x1,x2):\n        for j in range(y1,y2):\n            if (i**2 + j**2) <= (x2-x1)**2 + (y2-y1)**2:\n                count += 1\n    return count\n\n# <func> # Python \n# Write a python function to count the number of integral co-ordinates that lie inside a triangle.\ndef count_Intgral_Points(x1,y1,x2,y2):\n    count = 0\n    for i in range(x1,x2):\n        for j in range(y1,y2):\n            if (i**2 + j**2) <= (x2-x1)**2 + (y2-y1)**2:\n                count += 1\n    return count\n\n#"], ["\n# <func> # Python \n# Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\n    if len(monthname3) == 3:\n        if int(monthname3[0]) == 1 and int(monthname3[1]) == 2:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n# <func> # Java\n# Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\n    if len(monthname3) == 3:\n        if int(monthname3[0]) == 1 and int(monthname3[1]) == 2:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n# <func> # C\n# Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\n    if len(monthname3) == 3:\n        if int(monthname3[0]) == 1 and int(monthname3[1]) == 2:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n# <func> # C++\n# Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\n    if len(monthname3) == 3:\n        if int(monthname3[0]) == 1 and int(monthname3[1]) == 2:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n# <func> # C#\n# Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\n    if len(monthname3) == 3:\n        if int(monthname3[0]) == 1 and int(monthname3[1]) == 2:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n# <func> # F#\n# Write a"], ["\n# <func> # Python \n# Write a python function to check whether a string has atleast one letter and one number.\ndef check_String(str):\n    if len(str) < 2:\n        return False\n    for i in str:\n        if not(i.isalpha() and i.isdigit()):\n            return False\n    return True\n"], ["\n# <func> # Python \n# Write a function to remove the duplicates from the given tuple.\ndef remove_tuple(test_tup):\n    return list(set(test_tup))\n\n# <func> # Python \n# Write a function to remove the duplicates from the given list.\ndef remove_list(test_list):\n    return list(set(test_list))\n\n# <func> # Python \n# Write a function to remove the duplicates from the given string.\ndef remove_string(test_str):\n    return test_str.replace(' ', '')\n\n# <func> # Python \n# Write a function to remove the duplicates from the given dictionary.\ndef remove_dict(test_dict):\n    return {k: v for k, v in test_dict.items() if v not in test_dict.values()}\n\n# <func> # Python \n# Write a function to remove the duplicates from the given set.\ndef remove_set(test_set):\n    return set(test_set)\n\n# <func> # Python \n# Write a function to remove the duplicates from the given list of tuples.\ndef remove_tuple_list(test_tuple_list):\n    return list(set(test_tuple_list))\n\n# <func> # Python \n# Write a function to remove the duplicates from the given list of lists.\ndef remove_list_list(test_list_list):\n    return list(set(test_list_list))\n\n# <func> # Python \n# Write a function to remove the duplicates from the given string of lists.\ndef remove_string_list(test_string_list):\n    return [item for item in test_string_list if item not in test_string_list]\n\n# <func> # Python \n# Write a function to remove the duplicates from the given dictionary of lists.\ndef remove_dict_list(test_dict_list):\n    return {key: value for key, value in test_dict_list.items() if value not in test_dict_list.values()}\n\n# <func> # Python \n# Write a function to remove the duplicates from the given set of lists.\ndef remove_set_list(test_set"], ["\n# <func> # Python \n# Write a python function to convert octal number to decimal number.\ndef octal_To_Decimal(n):\n    return int(n, 8)\n\n# <func> # C\n# Write a C function to convert octal number to decimal number.\ndef octal_To_Decimal(n):\n    return int(n, 8)\n\n# <func> # Java\n# Write a Java function to convert octal number to decimal number.\ndef octal_To_Decimal(n):\n    return int(n, 8)\n\n# <func> # JavaScript\n# Write a JavaScript function to convert octal number to decimal number.\nfunction octal_To_Decimal(n) {\n    return parseInt(n, 8);\n}\n\n# <func> # Python \n# Write a python function to convert octal number to decimal number.\ndef octal_To_Decimal(n):\n    return int(n, 8)\n\n# <func> # C\n# Write a C function to convert octal number to decimal number.\ndef octal_To_Decimal(n):\n    return int(n, 8)\n\n# <func> # Java\n# Write a Java function to convert octal number to decimal number.\ndef octal_To_Decimal(n):\n    return int(n, 8)\n\n# <func> # JavaScript\n# Write a JavaScript function to convert octal number to decimal number.\nfunction octal_To_Decimal(n) {\n    return parseInt(n, 8);\n}\n\n# <func> # Python \n# Write a python function to convert octal number to decimal number.\ndef octal_To_Decimal(n):\n    return int(n, 8)\n\n# <func> # C\n# Write a C function to convert octal number to decimal number.\ndef octal_To_Decimal(n):\n    return int(n, 8)\n\n# <func> # Java\n# Write a Java function to convert octal number to decimal number.\ndef octal_To_Decimal(n):\n    return int(n, 8)\n\n# <func> # JavaScript\n# Write a JavaScript function to convert"], ["\n# <func> # Python \n# Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n):\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1\n\n# <func> # Python \n# Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n):\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1\n\n# <func> # Python \n# Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n):\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1\n\n# <func> # Python \n# Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n):\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1\n\n# <func> # Python \n# Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n):\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1\n\n# <func> # Python \n# Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n):\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1\n\n# <func> # Python \n# Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n):\n    for i in range(n):\n        if arr[i] == x:\n            return i\n    return -1\n\n# <func> # Python \n# Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n):\n    for i in range(n):\n       "], ["\n# <func> # Python \n# Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n    return [x for x in test_list if len(x) < K]\n\n# <func> # Python \n# Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n    return [x for x in test_list if len(x) < K]\n\n# <func> # Python \n# Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n    return [x for x in test_list if len(x) < K]\n\n# <func> # Python \n# Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n    return [x for x in test_list if len(x) < K]\n\n# <func> # Python \n# Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n    return [x for x in test_list if len(x) < K]\n\n# <func> # Python \n# Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n    return [x for x in test_list if len(x) < K]\n\n# <func> # Python \n# Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n    return [x for x in test_list if len(x) < K]\n\n# <func> # Python \n# Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n    return [x for x in test_list if len(x) < K]\n\n# <func> # Python \n# Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n    return [x for x in test_list if len(x) < K]\n\n# <func> #"], ["\n# <func> # Python \n# Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n    return (test_tup1[0] ** test_tup2[0]) * test_tup1[1]\n\n# <func> # Python \n# Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n    return (test_tup1[0] ** test_tup2[0]) * test_tup1[1]\n\n# <func> # Python \n# Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n    return (test_tup1[0] ** test_tup2[0]) * test_tup1[1]\n\n# <func> # Python \n# Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n    return (test_tup1[0] ** test_tup2[0]) * test_tup1[1]\n\n# <func> # Python \n# Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n    return (test_tup1[0] ** test_tup2[0]) * test_tup1[1]\n\n# <func> # Python \n# Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n    return (test_tup1[0] ** test_tup2[0]) * test_tup1[1]\n\n# <func> # Python \n# Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n    return (test_tup1"], ["import math\r\n\n# <func> # Python \n# Write a function to find the largest triangle that can be inscribed in an ellipse.\ndef largest_triangle(a,b):\n    # Write your code here\n    # a = ellipse_radius\n    # b = ellipse_radius\n    # return triangle_area\n    return 0\n\n# <func> # Python \n# Write a function to find the largest rectangle that can be inscribed in a circle.\ndef largest_rectangle(r):\n    # Write your code here\n    # return rectangle_area\n    return 0\n\n# <func> # Python \n# Write a function to find the largest square that can be inscribed in a circle.\ndef largest_square(r):\n    # Write your code here\n    # return square_area\n    return 0\n\n# <func> # Python \n# Write a function to find the largest rectangle that can be inscribed in a circle.\ndef largest_rectangle(r):\n    # Write your code here\n    # return rectangle_area\n    return 0\n\n# <func> # Python \n# Write a function to find the largest square that can be inscribed in a circle.\ndef largest_square(r):\n    # Write your code here\n    # return square_area\n    return 0\n\n# <func> # Python \n# Write a function to find the largest rectangle that can be inscribed in a circle.\ndef largest_rectangle(r):\n    # Write your code here\n    # return rectangle_area\n    return 0\n\n# <func> # Python \n# Write a function to find the largest square that can be inscribed in a circle.\ndef largest_square(r):\n    # Write your code here\n    # return square_area\n    return 0\n\n# <func> # Python \n# Write a function to find the largest rectangle that can be inscribed in a circle.\ndef largest_rectangle(r):\n    # Write your code here\n    # return rectangle_area\n    return 0\n\n# <func> # Python \n# Write a function to find the largest square that can be inscribed in a circle.\ndef largest_square(r):\n    # Write your code here"], ["\n# <func> # Python \n# Write a python function to find highest power of 2 less than or equal to given number.\ndef highest_Power_of_2(n):\n    # Write your code here\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2**(n-1)\n\n# <func> # C\n# Write a C function to find highest power of 2 less than or equal to given number.\n# Write your code here\ndef highest_Power_of_2(n):\n    # Write your code here\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2**(n-1)\n\n# <func> # C\n# Write a C function to find highest power of 2 less than or equal to given number.\n# Write your code here\ndef highest_Power_of_2(n):\n    # Write your code here\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2**(n-1)\n\n# <func> # C\n# Write a C function to find highest power of 2 less than or equal to given number.\n# Write your code here\ndef highest_Power_of_2(n):\n    # Write your code here\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2**(n-1)\n\n# <func> # C\n# Write a C function to find highest power of 2 less than or equal to given number.\n# Write your code here\ndef highest_Power_of_2(n):\n    # Write your code here\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2**(n-1)\n\n# <func> # C\n# Write a C function to find highest power of 2 less than or equal to given number.\n# Write your code here\ndef highest_Power_"], ["\n# <func> # Python \n# Write a function to find all index positions of the maximum values in a given list.\ndef position_max(list1):\n    max_pos = []\n    for i in range(len(list1)):\n        if list1[i] > max_pos[0]:\n            max_pos[0] = list1[i]\n        if list1[i] > max_pos[1]:\n            max_pos[1] = list1[i]\n    return max_pos\n\n# <func> # Python \n# Write a function to find all index positions of the minimum values in a given list.\ndef position_min(list1):\n    min_pos = []\n    for i in range(len(list1)):\n        if list1[i] < min_pos[0]:\n            min_pos[0] = list1[i]\n        if list1[i] < min_pos[1]:\n            min_pos[1] = list1[i]\n    return min_pos\n\n# <func> # Python \n# Write a function to find the index of the maximum element in a given list.\ndef position_max_list(list1):\n    max_pos = []\n    for i in range(len(list1)):\n        if list1[i] > max_pos[0]:\n            max_pos[0] = list1[i]\n        if list1[i] > max_pos[1]:\n            max_pos[1] = list1[i]\n    return max_pos\n\n# <func> # Python \n# Write a function to find the index of the minimum element in a given list.\ndef position_min_list(list1):\n    min_pos = []\n    for i in range(len(list1)):\n        if list1[i] < min_pos[0]:\n            min_pos[0] = list1[i]\n        if list1[i] < min_pos[1]:\n            min_pos[1] = list1[i]\n    return min_pos\n\n# <func> # Python \n# Write a function to find the index of the maximum element in a given list.\ndef"], ["\n# <func> # Python \n# Write a python function to check whether the elements in a list are same or not.\ndef chkList(lst):\n    for i in lst:\n        if i != lst[0]:\n            return False\n    return True\n\n# <func> # Java\n# Write a Java function to check whether the elements in a list are same or not.\ndef chkList(lst):\n    for i in lst:\n        if i != lst[0]:\n            return false\n    return true\n\n# <func> # C\n# Write a C function to check whether the elements in a list are same or not.\ndef chkList(lst):\n    for i in lst:\n        if i != lst[0]:\n            return false\n    return true\n\n# <func> # C++\n# Write a C++ function to check whether the elements in a list are same or not.\ndef chkList(lst):\n    for i in lst:\n        if i != lst[0]:\n            return false\n    return true\n\n# <func> # C#\n# Write a C# function to check whether the elements in a list are same or not.\ndef chkList(lst):\n    for i in lst:\n        if i != lst[0]:\n            return false\n    return true\n\n# <func> # JavaScript\n# Write a JavaScript function to check whether the elements in a list are same or not.\nfunction chkList(lst) {\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] !== lst[0]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n# <func> # Python 3\n# Write a Python 3 function to check whether the elements in a list are same or not.\ndef chkList(lst):\n    for i in lst:\n        if i != lst[0]:\n            return False\n    return True\n\n# <func> # Python 3\n# Write a Python 3 function to check whether the elements in a list are same or not.\ndef chkList(lst):\n    for i in lst:\n        if i != lst[0]:\n            return False\n   "], ["\n# <func> # Python \n# Write a function to remove even characters in a string.\ndef remove_even(str1):\n    return ''.join(c for c in str1 if c not in '23456789')\n\n# <func> # Python \n# Write a function to remove all the vowels from a string.\ndef remove_vowels(str1):\n    return ''.join(c for c in str1 if c not in 'aeiou')\n\n# <func> # Python \n# Write a function to remove all the vowels from a string.\ndef remove_vowels(str1):\n    return ''.join(c for c in str1 if c not in 'aeiou')\n\n# <func> # Python \n# Write a function to remove all the vowels from a string.\ndef remove_vowels(str1):\n    return ''.join(c for c in str1 if c not in 'aeiou')\n\n# <func> # Python \n# Write a function to remove all the vowels from a string.\ndef remove_vowels(str1):\n    return ''.join(c for c in str1 if c not in 'aeiou')\n\n# <func> # Python \n# Write a function to remove all the vowels from a string.\ndef remove_vowels(str1):\n    return ''.join(c for c in str1 if c not in 'aeiou')\n\n# <func> # Python \n# Write a function to remove all the vowels from a string.\ndef remove_vowels(str1):\n    return ''.join(c for c in str1 if c not in 'aeiou')\n\n# <func> # Python \n# Write a function to remove all the vowels from a string.\ndef remove_vowels(str1):\n    return ''.join(c for c in str1 if c not in 'aeiou')\n\n# <func> # Python \n# Write a function to remove all the vowels from a string.\ndef remove_vowels(str1):\n    return ''.join(c for c in"], ["\n# <func> # Python \n# Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2):\n    return bin(n1 ^ n2).count('1')\n\n# <func> # Python \n# Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2):\n    return bin(n1 ^ n2).count('1')\n\n# <func> # Python \n# Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2):\n    return bin(n1 ^ n2).count('1')\n\n# <func> # Python \n# Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2):\n    return bin(n1 ^ n2).count('1')\n\n# <func> # Python \n# Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2):\n    return bin(n1 ^ n2).count('1')\n\n# <func> # Python \n# Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2):\n    return bin(n1 ^ n2).count('1')\n\n# <func> # Python \n# Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2):\n    return bin(n1 ^ n2).count('1')\n\n# <func> # Python \n# Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2):\n    return bin(n1 ^ n2).count('1')\n\n# <func> # Python \n# Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2):\n    return bin(n1 ^ n2).count('1')\n\n# <func> # Python \n# Write a python function to find the hamming distance between given two integers"], ["\n# <func> # Python \n# Write a python function to count the occurrence of a given character in a string.\ndef count(s,c):\n    count = 0\n    for i in s:\n        if i == c:\n            count += 1\n    return count\n\n# <func> # Java\n# Write a Java function to count the occurrence of a given character in a string.\npublic static int count(String s, char c) {\n    int count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s.charAt(i) == c) {\n            count++;\n        }\n    }\n    return count;\n}\n\n# <func> # C\n# Write a C function to count the occurrence of a given character in a string.\n#\n# <func> # C\n# Write a C function to count the occurrence of a given character in a string.\n#\n# <func> # C\n# Write a C function to count the occurrence of a given character in a string.\n#\n# <func> # C\n# Write a C function to count the occurrence of a given character in a string.\n#\n# <func> # C\n# Write a C function to count the occurrence of a given character in a string.\n#\n# <func> # C\n# Write a C function to count the occurrence of a given character in a string.\n#\n# <func> # C\n# Write a C function to count the occurrence of a given character in a string.\n#\n# <func> # C\n# Write a C function to count the occurrence of a given character in a string.\n#\n# <func> # C\n# Write a C function to count the occurrence of a given character in a string.\n#\n# <func> # C\n# Write a C function to count the occurrence of a given character in a string.\n#\n# <func> # C\n# Write a C function to count the occurrence of a given character in a string.\n#\n# <func> # C\n# Write a C function to count the occurrence of a given character in a string.\n#\n# <func> # C\n# Write a C function to count the occurrence of a given character in a"], ["\n# <func> # Python \n# Write a function to find the inversions of tuple elements in the given tuple list.\ndef inversion_elements(test_tup):\n    # Write your code here\n    return sum(x < y for x, y in zip(test_tup, test_tup[1:]))\n\n\n# +\n# Inversion elements\n# -\n\n# # 10. Write a function to find the inversions of tuple elements in the given tuple list.\n#\n# # Python \n# Write a function to find the inversions of tuple elements in the given tuple list.\n#\n# # Python \n# Write a function to find the inversions of tuple elements in the given tuple list.\n#\n# # Python \n# Write a function to find the inversions of tuple elements in the given tuple list.\n#\n# # Python \n# Write a function to find the inversions of tuple elements in the given tuple list.\n#\n# # Python \n# Write a function to find the inversions of tuple elements in the given tuple list.\n#\n# # Python \n# Write a function to find the inversions of tuple elements in the given tuple list.\n#\n# # Python \n# Write a function to find the inversions of tuple elements in the given tuple list.\n#\n# # Python \n# Write a function to find the inversions of tuple elements in the given tuple list.\n#\n# # Python \n# Write a function to find the inversions of tuple elements in the given tuple list.\n#\n# # Python \n# Write a function to find the inversions of tuple elements in the given tuple list.\n#\n# # Python \n# Write a function to find the inversions of tuple elements in the given tuple list.\n#\n# # Python \n# Write a function to find the inversions of tuple elements in the given tuple list.\n#\n# # Python \n# Write a function to find the inversions of tuple elements in the given tuple list.\n#\n# # Python \n# Write a function to find the inversions of tuple elements in the given tuple list.\n#\n# # Python \n# Write a function to find the inversions of tuple elements in the given tuple list.\n#\n# # Python \n"], ["\n# <func> # Python \n# Write a function to perform the adjacent element concatenation in the given tuples.\ndef concatenate_elements(test_tup):\n    return test_tup[0] + test_tup[1] + test_tup[2]\n\n# Driver code"], ["\n# <func> # Python \n# Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\ndef find_longest_repeating_subseq(str):\n    # Write your code here\n    # 1. Create a list of all the characters in the string\n    # 2. Create a list of all the substrings of the string\n    # 3. Create a list of all the substrings of the string that have the same characters\n    # 4. Create a list of all the substrings of the string that have the same characters but different positions\n    # 5. Create a list of all the substrings of the string that have the same characters but different positions and the same characters\n    # 6. Create a list of all the substrings of the string that have the same characters but different positions and the same characters\n    # 7. Create a list of all the substrings of the string that have the same characters but different positions and the same characters\n    # 8. Create a list of all the substrings of the string that have the same characters but different positions and the same characters\n    # 9. Create a list of all the substrings of the string that have the same characters but different positions and the same characters\n    # 10. Create a list of all the substrings of the string that have the same characters but different positions and the same characters\n    # 11. Create a list of all the substrings of the string that have the same characters but different positions and the same characters\n    # 12. Create a list of all the substrings of the string that have the same characters but different positions and the same characters\n    # 13. Create a list of all the substrings of the string that have the same characters but different positions and the same characters\n    # 14. Create a list of all the substrings of the string that have the same characters but different positions and the same characters\n    # 15. Create a list of all the substrings of the string that have the same characters but different positions and the same characters\n    # 16. Create a list of all the substrings of the string that have the same characters but different positions and the same characters\n    # 17. Create a list of all the substrings"], ["import re\r\n\n# <func> # Python \n# Write a function to check the given decimal with a precision of 2 by using regex.\ndef is_decimal(num):\n    # regex pattern\n    pattern = r\"^\\d*\\.?\\d*$\"\n    # check if the pattern is matched\n    if re.match(pattern, num):\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check the given string with a precision of 2 by using regex.\ndef is_string(string):\n    # regex pattern\n    pattern = r\"^[a-zA-Z0-9_]+$\"\n    # check if the pattern is matched\n    if re.match(pattern, string):\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check the given string with a precision of 2 by using regex.\ndef is_string(string):\n    # regex pattern\n    pattern = r\"^[a-zA-Z0-9_]+$\"\n    # check if the pattern is matched\n    if re.match(pattern, string):\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check the given string with a precision of 2 by using regex.\ndef is_string(string):\n    # regex pattern\n    pattern = r\"^[a-zA-Z0-9_]+$\"\n    # check if the pattern is matched\n    if re.match(pattern, string):\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check the given string with a precision of 2 by using regex.\ndef is_string(string):\n    # regex pattern\n    pattern = r\"^[a-zA-Z0-9_]+$\"\n    # check if the pattern is matched\n    if re.match(pattern, string):\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check the given string with a precision of 2 by using regex.\ndef is_string(string):\n    # regex pattern"], ["import heapq as hq\r\n\n# <func> # Python \n# Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n    heap.remove(a)\n    heap.insert(a,0)\n\n# <func> # Python \n# Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n    heap.remove(a)\n    heap.insert(a,0)\n\n# <func> # Python \n# Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n    heap.remove(a)\n    heap.insert(a,0)\n\n# <func> # Python \n# Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n    heap.remove(a)\n    heap.insert(a,0)\n\n# <func> # Python \n# Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n    heap.remove(a)\n    heap.insert(a,0)\n\n# <func> # Python \n# Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n    heap.remove(a)\n    heap.insert(a,0)\n\n# <func> # Python \n# Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n    heap.remove(a)\n    heap.insert(a,0)\n\n# <func> # Python \n# Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n    heap.remove(a)\n    heap.insert(a,0)\n\n# <func> # Python \n# Write a function to delete the smallest element from the given heap and then insert a new item.\ndef"], ["import re\r\n\n# <func> # Python \n# Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\ndef is_allowed_specific_char(string):\n    allowed_characters = 'abcdefghijklmnopqrstuvwxyz0123456789'\n    return all(char in allowed_characters for char in string)\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palind"], ["\n# <func> # Python \n# Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n):\n    count = 0\n    for i in range(n):\n        if (i % 2 == 0) and (i % 3 == 0):\n            count += 1\n    return count\n\n# <func> # Python \n# Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n):\n    count = 0\n    for i in range(n):\n        if (i % 2 == 0) and (i % 3 == 0):\n            count += 1\n    return count\n\n# <func> # Python \n# Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n):\n    count = 0\n    for i in range(n):\n        if (i % 2 == 0) and (i % 3 == 0):\n            count += 1\n    return count\n\n# <func> # Python \n# Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n):\n    count = 0\n    for i in range(n):\n        if (i % 2 == 0) and (i % 3 == 0):\n            count += 1\n    return count\n\n# <func> # Python \n# Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n):\n    count = 0\n    for i in range(n):\n        if (i % 2 == 0) and (i % 3 == 0):\n            count += 1\n    return count\n\n# <func> # Python \n# Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n):\n    count = 0\n    for i in range(n):\n        if (i % 2 == 0) and (i % 3 == 0):\n            count += 1\n    return count\n\n# <func> # Python \n# Write a"], ["import math  \r\n\n# <func> # Python \n# Write a python function to find the sum of fourth power of n natural numbers.\ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum\n\n# <func> # Java\n# Write a Java function to find the sum of fourth power of n natural numbers.\npublic static int fourthPowerSum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i * i * i * i;\n    }\n    return sum;\n}\n\n# <func> # C\n# Write a C function to find the sum of fourth power of n natural numbers.\n# int fourthPowerSum(int n) {\n#     int sum = 0;\n#     for (int i = 1; i <= n; i++) {\n#         sum += i * i * i * i;\n#     }\n#     return sum;\n# }\n\n# <func> # C++\n# Write a C++ function to find the sum of fourth power of n natural numbers.\n# int fourthPowerSum(int n) {\n#     int sum = 0;\n#     for (int i = 1; i <= n; i++) {\n#         sum += i * i * i * i;\n#     }\n#     return sum;\n# }\n\n# <func> # C#\n# Write a C# function to find the sum of fourth power of n natural numbers.\n# int fourthPowerSum(int n) {\n#     int sum = 0;\n#     for (int i = 1; i <= n; i++) {\n#         sum += i * i * i * i;\n#     }\n#     return sum;\n# }\n\n# <func> # JavaScript\n# Write a JavaScript function to find the sum of fourth power of n natural numbers.\n# function fourthPowerSum(n) {\n#     let sum = 0;\n#     for (let i = 1; i <= n; i++) {\n#         sum += i * i * i * i;\n#     }\n"], ["\n# <func> # Python \n# Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n    return test_tup1 + test_tup2\n\n# <func> # Python \n# Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n    return test_tup1 + test_tup2\n\n# <func> # Python \n# Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n    return test_tup1 + test_tup2\n\n# <func> # Python \n# Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n    return test_tup1 + test_tup2\n\n# <func> # Python \n# Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n    return test_tup1 + test_tup2\n\n# <func> # Python \n# Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n    return test_tup1 + test_tup2\n\n# <func> # Python \n# Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n    return test_tup1 + test_tup2\n\n# <func> # Python \n# Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n    return test_tup1 + test_tup2\n\n# <func> # Python \n# Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n    return"], ["import math\r\n\n# <func> # Python \n# Write a function to convert radians to degrees.\ndef degree_radian(radian):\n    return radian * 180 / pi\n\n# <func> # C++\n# Write a function to convert radians to degrees.\ndef radian_degrees(radian):\n    return radian * 180 / pi\n\n# <func> # Java\n# Write a function to convert radians to degrees.\ndef radian_degrees(radian):\n    return radian * 180 / pi\n\n# <func> # JavaScript\n# Write a function to convert radians to degrees.\nfunction radian_degrees(radian) {\n    return radian * 180 / pi;\n}\n\n# <func> # Python \n# Write a function to convert radians to degrees.\ndef radian_degrees(radian):\n    return radian * 180 / pi\n\n# <func> # C++\n# Write a function to convert radians to degrees.\ndef radian_degrees(radian):\n    return radian * 180 / pi\n\n# <func> # Java\n# Write a function to convert radians to degrees.\ndef radian_degrees(radian):\n    return radian * 180 / pi\n\n# <func> # JavaScript\n# Write a function to convert radians to degrees.\nfunction radian_degrees(radian) {\n    return radian * 180 / pi;\n}\n\n# <func> # Python \n# Write a function to convert radians to degrees.\ndef radian_degrees(radian):\n    return radian * 180 / pi\n\n# <func> # C++\n# Write a function to convert radians to degrees.\ndef radian_degrees(radian):\n    return radian * 180 / pi\n\n# <func> # Java\n# Write a function to convert radians to degrees.\ndef radian_degrees(radian):\n    return radian * 180 / pi\n\n# <func> # JavaScript\n# Write a"], ["\n# <func> # Python \n# Write a function to decode a run-length encoded given list.\ndef decode_list(alist):\n    # Write your code here\n    # 1. Create a list of tuples\n    # 2. Iterate through the list\n    # 3. For each tuple, check if the first element is a run-length encoded tuple\n    # 4. If it is, append the second element to the list\n    # 5. Return the list\n    # 6. Return the list\n    # 7. Return the list\n    # 8. Return the list\n    # 9. Return the list\n    # 10. Return the list\n    # 11. Return the list\n    # 12. Return the list\n    # 13. Return the list\n    # 14. Return the list\n    # 15. Return the list\n    # 16. Return the list\n    # 17. Return the list\n    # 18. Return the list\n    # 19. Return the list\n    # 20. Return the list\n    # 21. Return the list\n    # 22. Return the list\n    # 23. Return the list\n    # 24. Return the list\n    # 25. Return the list\n    # 26. Return the list\n    # 27. Return the list\n    # 28. Return the list\n    # 29. Return the list\n    # 30. Return the list\n    # 31. Return the list\n    # 32. Return the list\n    # 33. Return the list\n    # 34. Return the list\n    # 35. Return the list\n    # 36. Return the list\n    # 37. Return the list\n    # 38. Return the list\n    # 39. Return the list\n    # 40. Return the list\n    # 41. Return the list\n    # 42. Return the list\n    # 43. Return the list\n    # 44. Return the list\n    # 45. Return the list\n    # "], ["\n# <func> # Python \n# Write a function to check if a nested list is a subset of another nested list.\ndef check_subset_list(list1, list2):\n    # Check if the length of the first list is equal to the length of the second list.\n    if len(list1) != len(list2):\n        return False\n\n    # Check if the first list is a subset of the second list.\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            return False\n\n    # Check if the second list is a subset of the first list.\n    for i in range(len(list2)):\n        if list2[i] not in list1:\n            return False\n\n    # If both lists are subsets of each other, return True.\n    return True\n\n# Test the function.\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4]"], ["\n# <func> # Python \n# Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str):\n    # Your code here\n    # return the first repeated character in the given string\n    return str.count(str[0])\n\n# <func> # Python \n# Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str):\n    # Your code here\n    # return the first repeated character in the given string\n    return str.count(str[0])\n\n# <func> # Python \n# Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str):\n    # Your code here\n    # return the first repeated character in the given string\n    return str.count(str[0])\n\n# <func> # Python \n# Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str):\n    # Your code here\n    # return the first repeated character in the given string\n    return str.count(str[0])\n\n# <func> # Python \n# Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str):\n    # Your code here\n    # return the first repeated character in the given string\n    return str.count(str[0])\n\n# <func> # Python \n# Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str):\n    # Your code here\n    # return the first repeated character in the given string\n    return str.count(str[0])\n\n# <func> # Python \n# Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str):\n    # Your code here\n    # return the first repeated character in the given string\n    return str.count(str[0])\n\n# <func> # Python \n# Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str):\n    # Your"], ["import math   \r\n\n# <func> # Python \n# Write a python function to find the minimum operations required to make two numbers equal.\ndef min_Operations(A,B):\n    # Write your code here\n    if A == B:\n        return 0\n    if A > B:\n        return min_Operations(B,A)\n    if A < B:\n        return min_Operations(A,B)\n    return 1\n\n\n# <func> # C++\n# Write a C++ function to find the minimum operations required to make two numbers equal.\n#\n# <input>\n# <output>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n# <param>\n"], ["\r\n\n# <func> # Python \n# Write a function to extract maximum and minimum k elements in the given tuple.\ndef extract_min_max(test_tup, K):\n    min_val = min(test_tup)\n    max_val = max(test_tup)\n    return min_val, max_val\n\n# <func> # Python \n# Write a function to extract the first k elements in the given tuple.\ndef extract_first_k(test_tup, K):\n    return test_tup[0:K]\n\n# <func> # Python \n# Write a function to extract the last k elements in the given tuple.\ndef extract_last_k(test_tup, K):\n    return test_tup[-K:]\n\n# <func> # Python \n# Write a function to extract the first k elements in the given tuple.\ndef extract_first_k_with_index(test_tup, K, index):\n    return test_tup[index:index+K]\n\n# <func> # Python \n# Write a function to extract the last k elements in the given tuple.\ndef extract_last_k_with_index(test_tup, K, index):\n    return test_tup[-K:][index:]\n\n# <func> # Python \n# Write a function to extract the first k elements in the given tuple.\ndef extract_first_k_with_index_and_index(test_tup, K, index):\n    return test_tup[index:index+K]\n\n# <func> # Python \n# Write a function to extract the last k elements in the given tuple.\ndef extract_last_k_with_index_and_index(test_tup, K, index):\n    return test_tup[-K:][index:]\n\n# <func> # Python \n# Write a function to extract the first k elements in the given tuple.\ndef extract_first_k_with_index_and_index_and_index(test_tup, K, index):\n    return test_tup[index:index+K]\n\n# <func> # Python \n# Write a function to extract the"], ["import re\r\n\n# <func> # Python \n# Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\ndef replace_max_specialchar(text,n):\n    max_occurrences = 0\n    for i in range(len(text)):\n        if text[i] == ' ':\n            max_occurrences += 1\n        elif text[i] == ',':\n            max_occurrences += 1\n        elif text[i] == '.':\n            max_occurrences += 1\n    if max_occurrences > n:\n        return text\n    else:\n        return text.replace(text[i],':')\n\n# <func> # Python \n# Write a function that takes a string and returns a string with all the characters replaced by their ASCII values.\ndef replace_ascii(text):\n    return ''.join(chr(ord(c) - 32) for c in text)\n\n# <func> # Python \n# Write a function that takes a string and returns a string with all the characters replaced by their Unicode values.\ndef replace_unicode(text):\n    return ''.join(chr(ord(c) + 0x10000) for c in text)\n\n# <func> # Python \n# Write a function that takes a string and returns a string with all the characters replaced by their Unicode values.\ndef replace_unicode_with_ascii(text):\n    return ''.join(chr(ord(c) + 0x10000) for c in text)\n\n# <func> # Python \n# Write a function that takes a string and returns a string with all the characters replaced by their Unicode values.\ndef replace_unicode_with_ascii_with_ascii(text):\n    return ''.join(chr(ord(c) + 0x10000) for c in text)\n\n# <func> # Python \n# Write a function that takes a string and returns a string with all the characters replaced by their Unicode values.\ndef replace_unicode_with_ascii_with_ascii_with_ascii(text):\n    return ''.join"], ["\n# <func> # Python \n# Write a python function to find the first even number in a given list of numbers.\ndef first_even(nums):\n    for i in nums:\n        if i % 2 == 0:\n            return i\n\n# <func> # Python \n# Write a python function to find the first odd number in a given list of numbers.\ndef first_odd(nums):\n    for i in nums:\n        if i % 2 == 1:\n            return i\n\n# <func> # Python \n# Write a python function to find the first number in a given list of numbers that is greater than the average of the numbers in the list.\ndef first_greater_average(nums):\n    for i in nums:\n        if i > sum(nums) / len(nums):\n            return i\n\n# <func> # Python \n# Write a python function to find the first number in a given list of numbers that is less than the average of the numbers in the list.\ndef first_less_average(nums):\n    for i in nums:\n        if i < sum(nums) / len(nums):\n            return i\n\n# <func> # Python \n# Write a python function to find the first number in a given list of numbers that is greater than the average of the numbers in the list.\ndef first_greater_average_2(nums):\n    for i in nums:\n        if i > sum(nums) / len(nums):\n            return i\n\n# <func> # Python \n# Write a python function to find the first number in a given list of numbers that is less than the average of the numbers in the list.\ndef first_less_average_2(nums):\n    for i in nums:\n        if i < sum(nums) / len(nums):\n            return i\n\n# <func> # Python \n# Write a python function to find the first number in a given list of numbers that is greater than the average of the numbers in the list.\ndef first_greater_average_3(nums):\n    for i in nums:\n        if i > sum("], ["\n# <func> # Python \n# Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n    for i in test_tuple:\n        if not isinstance(i, int):\n            return False\n    return True\n\n\n# +\n# Write a function to check if all the elements in tuple have same data type or not.\n\ndef check_type(test_tuple):\n    for i in test_tuple:\n        if not isinstance(i, int):\n            return False\n    return True\n\n\n# -\n\n# Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n    for i in test_tuple:\n        if not isinstance(i, int):\n            return False\n    return True\n\n\n# Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n    for i in test_tuple:\n        if not isinstance(i, int):\n            return False\n    return True\n\n\n# Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n    for i in test_tuple:\n        if not isinstance(i, int):\n            return False\n    return True\n\n\n# Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n    for i in test_tuple:\n        if not isinstance(i, int):\n            return False\n    return True\n\n\n# Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n    for i in test_tuple:\n        if not isinstance(i, int):\n            return False\n    return True\n\n\n# Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n    for i in test_tuple:\n        if not isinstance(i, int):\n            return False\n    return True\n\n\n# Write a function to check if all the elements in tuple have"], ["\n# <func> # Python \n# Write a function to check for majority element in the given sorted array.\ndef is_majority(arr, n, x):\n    # Base case\n    if n == 0:\n        return False\n    # Check if the array is empty\n    if n == 1:\n        return True\n    # Check if the array is sorted\n    if not arr[0] <= x <= arr[n-1]:\n        return False\n    # Check if the array is sorted\n    for i in range(1, n):\n        if arr[i] > x:\n            return False\n    # Check if the array is sorted\n    for i in range(n-1, 0, -1):\n        if arr[i] > x:\n            return False\n    return True\n\n# Driver code\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)\nx = 5"], ["\n# <func> # Python \n# Write a python function to count set bits of a given number.\ndef count_Set_Bits(n):\n    # Your code here\n    return 0\n\n# <func> # C\n# Write a C function to count set bits of a given number.\n# Your code here\n\n# <func> # C++\n# Write a C++ function to count set bits of a given number.\n# Your code here\n\n# <func> # Java\n# Write a Java function to count set bits of a given number.\n# Your code here\n\n# <func> # JavaScript\n# Write a JavaScript function to count set bits of a given number.\n# Your code here\n\n# <func> # Python \n# Write a Python function to count set bits of a given number.\n# Your code here\n\n# <func> # C\n# Write a C function to count set bits of a given number.\n# Your code here\n\n# <func> # C++\n# Write a C++ function to count set bits of a given number.\n# Your code here\n\n# <func> # Java\n# Write a Java function to count set bits of a given number.\n# Your code here\n\n# <func> # JavaScript\n# Write a JavaScript function to count set bits of a given number.\n# Your code here\n\n# <func> # Python \n# Write a Python function to count set bits of a given number.\n# Your code here\n\n# <func> # C\n# Write a C function to count set bits of a given number.\n# Your code here\n\n# <func> # C++\n# Write a C++ function to count set bits of a given number.\n# Your code here\n\n# <func> # Java\n# Write a Java function to count set bits of a given number.\n# Your code here\n\n# <func> # JavaScript\n# Write a JavaScript function to count set bits of a given number.\n# Your code here\n\n# <func> # Python \n# Write a Python function to count set bits of a given number.\n# Your code here\n\n# <func> # C\n# Write a C function to count set bits of a given number.\n# Your code here\n\n# <func> # C"], ["\n# <func> # Python \n# Write a python function to find the minimum element in a sorted and rotated array.\ndef find_Min(arr,low,high):\n    if low > high:\n        return None\n    mid = (low+high)//2\n    if arr[mid] < arr[low]:\n        return find_Min(arr,low,mid)\n    elif arr[mid] > arr[high]:\n        return find_Min(arr,mid+1,high)\n    else:\n        return arr[mid]\n\n\n# +\n# Testing the function\narr = [1,2,3,4,5,6,7,8,9]\n"], ["\n# <func> # Python \n# Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n    return ''.join(char for char in str if char.isalpha() and char.isupper())\n"], ["\n# <func> # Python \n# Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c):\n    return min(a,b,c)\n\n# <func> # Python \n# Write a function to find maximum of three numbers.\ndef max_of_three(a,b,c):\n    return max(a,b,c)\n\n# <func> # Python \n# Write a function to find average of three numbers.\ndef avg_of_three(a,b,c):\n    return (a+b+c)/3\n\n# <func> # Python \n# Write a function to find sum of three numbers.\ndef sum_of_three(a,b,c):\n    return a+b+c\n\n# <func> # Python \n# Write a function to find product of three numbers.\ndef product_of_three(a,b,c):\n    return a*b*c\n\n# <func> # Python \n# Write a function to find difference of three numbers.\ndef diff_of_three(a,b,c):\n    return a-b-c\n\n# <func> # Python \n# Write a function to find sum of three numbers.\ndef sum_of_three_plus_one(a,b,c):\n    return sum_of_three(a,b,c)+1\n\n# <func> # Python \n# Write a function to find product of three numbers.\ndef product_of_three_plus_one(a,b,c):\n    return product_of_three(a,b,c)+1\n\n# <func> # Python \n# Write a function to find difference of three numbers.\ndef diff_of_three_plus_one(a,b,c):\n    return diff_of_three(a,b,c)+1\n\n# <func> # Python \n# Write a function to find sum of three numbers.\ndef sum_of_three_plus_one_plus_one(a,b,c):\n    return sum_of_three(a,b,c)+1+1\n\n# <func> # Python \n# Write a function to find product"], ["\n# <func> # Python \n# Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    for i in range(l,r+1):\n        if(n & i):\n            return False\n    return True\n\n# <func> # C\n# Write a C function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    for i in range(l,r+1):\n        if(n & i):\n            return False\n    return True\n\n# <func> # C\n# Write a C function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    for i in range(l,r+1):\n        if(n & i):\n            return False\n    return True\n\n# <func> # C\n# Write a C function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    for i in range(l,r+1):\n        if(n & i):\n            return False\n    return True\n\n# <func> # C\n# Write a C function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    for i in range(l,r+1):\n        if(n & i):\n            return False\n    return True\n\n# <func> # C\n# Write a C function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    for i in range(l,r+1):\n        if(n & i):\n            return False\n    return True\n\n# <func> # C\n# Write a"], ["\n# <func> # Python \n# Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\ndef re_arrange_array(arr, n):\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i] < 0 and arr[j] > 0:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n\n# <func> # Python \n# Write a function to find the longest common subsequence of two given strings.\ndef longest_common_subsequence(s1, s2):\n    m = len(s1)\n    n = len(s2)\n    dp = [[0 for j in range(n+1)] for i in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s1[i-1] == s2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[m][n]\n\n# <func> # Python \n# Write a function to find the longest common subsequence of two given strings.\ndef longest_common_subsequence(s1, s2):\n    m = len(s1)\n    n = len(s2)\n    dp = [[0 for j in range(n+1)] for i in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s1[i-1] == s2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp["], ["\n# <func> # Python \n# Write a function to replace blank spaces with any character in a string.\ndef replace_blank(str1,char):\n    return str1.replace(\" \",\"\"+char)\n\n# <func> # Python \n# Write a function to replace all the vowels in a string with a single space.\ndef replace_vowels(str1):\n    return str1.replace(\"a\",\" \")\n\n# <func> # Python \n# Write a function to replace all the vowels in a string with a single space.\ndef replace_vowels(str1):\n    return str1.replace(\"a\",\" \")\n\n# <func> # Python \n# Write a function to replace all the vowels in a string with a single space.\ndef replace_vowels(str1):\n    return str1.replace(\"a\",\" \")\n\n# <func> # Python \n# Write a function to replace all the vowels in a string with a single space.\ndef replace_vowels(str1):\n    return str1.replace(\"a\",\" \")\n\n# <func> # Python \n# Write a function to replace all the vowels in a string with a single space.\ndef replace_vowels(str1):\n    return str1.replace(\"a\",\" \")\n\n# <func> # Python \n# Write a function to replace all the vowels in a string with a single space.\ndef replace_vowels(str1):\n    return str1.replace(\"a\",\" \")\n\n# <func> # Python \n# Write a function to replace all the vowels in a string with a single space.\ndef replace_vowels(str1):\n    return str1.replace(\"a\",\" \")\n\n# <func> # Python \n# Write a function to replace all the vowels in a string with a single space.\ndef replace_vowels(str1):\n    return str1.replace(\"a\",\" \")\n\n# <func> # Python \n# Write a function to replace all the vowels in a string with a single space.\ndef replace_vowels(str1):\n    return str1.replace(\"a\",\" \")\n\n# <"], ["\n# <func> # Python \n# Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n):\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_sum = max(max_sum, tri[i][j])\n    return max_sum\n\n# <func> # Python \n# Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n):\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_sum = max(max_sum, tri[i][j])\n    return max_sum\n\n# <func> # Python \n# Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n):\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_sum = max(max_sum, tri[i][j])\n    return max_sum\n\n# <func> # Python \n# Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n):\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_sum = max(max_sum, tri[i][j])\n    return max_sum\n\n# <func> # Python \n# Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n):\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_sum = max(max_sum, tri[i][j])\n    return max_sum\n\n# <func> # Python \n# Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n):\n    max_sum = 0\n    for i in range(n):\n       "], ["import heapq\r\n\n# <func> # Python \n# Write a function to get the n largest items from a dataset.\ndef larg_nnum(list1,n):\n    larg_num = []\n    for i in range(n):\n        larg_num.append(list1[i])\n    return larg_num\n\n# <func> # Python \n# Write a function to get the n smallest items from a dataset.\ndef snm_nnum(list1,n):\n    snm_num = []\n    for i in range(n):\n        snm_num.append(list1[i])\n    return snm_num\n\n# <func> # Python \n# Write a function to get the n largest items from a dataset.\ndef larg_nnum2(list1,n):\n    larg_num = []\n    for i in range(n):\n        larg_num.append(list1[i])\n    return larg_num\n\n# <func> # Python \n# Write a function to get the n smallest items from a dataset.\ndef snm_nnum2(list1,n):\n    snm_num = []\n    for i in range(n):\n        snm_num.append(list1[i])\n    return snm_num\n\n# <func> # Python \n# Write a function to get the n largest items from a dataset.\ndef larg_nnum3(list1,n):\n    larg_num = []\n    for i in range(n):\n        larg_num.append(list1[i])\n    return larg_num\n\n# <func> # Python \n# Write a function to get the n smallest items from a dataset.\ndef snm_nnum3(list1,n):\n    snm_num = []\n    for i in range(n):\n        snm_num.append(list1[i])\n    return snm_num\n\n# <func> # Python \n# Write a function to get the n largest items from a dataset.\ndef larg_nnum4(list1,n):\n    larg_num = []\n    for i in range(n):\n        larg_num.append(list1[i"], ["\n# <func> # Python \n# Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r,h):\n    lateral_surface_area = 2*pi*r*h\n    return lateral_surface_area\n\n# <func> # Python \n# Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n    volume = \u03c0*r*r*h\n    return volume\n\n# <func> # Python \n# Write a function to find the surface area of a cone.\ndef surfacearea_cone(r,h):\n    surfacearea = \u03c0*r*h + \u03c0*r*r\n    return surfacearea\n\n# <func> # Python \n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    volume = \u03c0*r*r*h\n    return volume\n\n# <func> # Python \n# Write a function to find the lateral surface area of a cone.\ndef lateralsuface_cone(r,h):\n    lateral_surface_area = \u03c0*r*h\n    return lateral_surface_area\n\n# <func> # Python \n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    volume = \u03c0*r*r*h\n    return volume\n\n# <func> # Python \n# Write a function to find the surface area of a pyramid.\ndef surfacearea_pyramid(base,height):\n    surfacearea = \u03c0*base + \u03c0*base*height/2\n    return surfacearea\n\n# <func> # Python \n# Write a function to find the volume of a pyramid.\ndef volume_pyramid(base,height):\n    volume = \u03c0*base*height/2\n    return volume\n\n# <func> # Python \n# Write a function to find the lateral surface area of a pyramid.\ndef lateralsuface_pyramid(base,height):\n    lateral_surface_area = \u03c0*base*"], ["\n# <func> # Python \n# Write a function to find the volume of a cube.\ndef volume_cube(l):\n    return l * l * l\n\n# Write a function to find the surface area of a cube.\ndef surface_area_cube(l):\n    return 6 * l * l\n\n# Write a function to find the perimeter of a cube.\ndef perimeter_cube(l):\n    return 4 * l\n\n# Write a function to find the diagonal of a cube.\ndef diagonal_cube(l):\n    return l + l + l\n\n# Write a function to find the volume of a rectangular prism.\ndef volume_rectangular_prism(l, w, h):\n    return l * w * h\n\n# Write a function to find the surface area of a rectangular prism.\ndef surface_area_rectangular_prism(l, w, h):\n    return 2 * (l + w) * h\n\n# Write a function to find the perimeter of a rectangular prism.\ndef perimeter_rectangular_prism(l, w, h):\n    return 2 * (l + w)\n\n# Write a function to find the diagonal of a rectangular prism.\ndef diagonal_rectangular_prism(l, w, h):\n    return l + w + h\n\n# Write a function to find the volume of a cylinder.\ndef volume_cylinder(r, h):\n    return r * r * h\n\n# Write a function to find the surface area of a cylinder.\ndef surface_area_cylinder(r, h):\n    return 2 * pi * r * h\n\n# Write a function to find the perimeter of a cylinder.\ndef perimeter_cylinder(r, h):\n    return 2 * pi * r\n\n# Write a function to find the diagonal of a cylinder.\ndef diagonal_cylinder(r, h):\n    return 2 * pi * r\n\n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return 4 / 3 * pi * r ** 3\n\n# Write a function to find the"], ["\n# <func> # Python \n# Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n):\n    return n & 1\n\n# <func> # Java\n# Write a Java function to set all even bits of a given number.\ndef even_bit_set_number(n):\n    return n & 1\n\n# <func> # C\n# Write a C function to set all even bits of a given number.\ndef even_bit_set_number(n):\n    return n & 1\n\n# <func> # C++\n# Write a C++ function to set all even bits of a given number.\ndef even_bit_set_number(n):\n    return n & 1\n\n# <func> # JavaScript\n# Write a JavaScript function to set all even bits of a given number.\ndef even_bit_set_number(n):\n    return n & 1\n\n# <func> # R\n# Write a R function to set all even bits of a given number.\ndef even_bit_set_number(n):\n    return n & 1\n\n# <func> # Go\n# Write a Go function to set all even bits of a given number.\ndef even_bit_set_number(n):\n    return n & 1\n\n# <func> # Haskell\n# Write a Haskell function to set all even bits of a given number.\ndef even_bit_set_number(n):\n    return n & 1\n\n# <func> # Julia\n# Write a Julia function to set all even bits of a given number.\nfunction even_bit_set_number(n)\n    return n & 1\nend\n\n# <func> # Rust\n# Write a Rust function to set all even bits of a given number.\nfn even_bit_set_number(n) {\n    return n & 1\n}\n\n# <func> # TypeScript\n# Write a TypeScript function to set all even bits of a given number.\nfunction even_bit_set_number(n) {\n    return n & 1\n}\n\n# <func> # Go\n# Write a Go function to set all even bits of a"], ["\n# <func> # Python \n# Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\ndef No_of_Triangle(N,K):\n    #Your code here\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n    #print(N,K)\n   "], ["from collections import Counter \r\n\n# <func> # Python \n# Write a function to check the occurrences of records which occur similar times in the given tuples.\ndef check_occurences(test_list):\n    # Write your code here\n    # return\n    # print(test_list)\n    # print(test_list[0])\n    # print(test_list[1])\n    # print(test_list[2])\n    # print(test_list[3])\n    # print(test_list[4])\n    # print(test_list[5])\n    # print(test_list[6])\n    # print(test_list[7])\n    # print(test_list[8])\n    # print(test_list[9])\n    # print(test_list[10])\n    # print(test_list[11])\n    # print(test_list[12])\n    # print(test_list[13])\n    # print(test_list[14])\n    # print(test_list[15])\n    # print(test_list[16])\n    # print(test_list[17])\n    # print(test_list[18])\n    # print(test_list[19])\n    # print(test_list[20])\n    # print(test_list[21])\n    # print(test_list[22])\n    # print(test_list[23])\n    # print(test_list[24])\n    # print(test_list[25])\n    # print(test_list[26])\n    # print(test_list[27])\n    # print(test_list[28])\n    # print(test_list[29])\n    # print(test_list[30])\n    # print(test_list[31])\n    # print(test_list[32])\n    # print(test_list[33])\n    # print(test_list[34])\n    # print(test_list[35])\n    # print(test_list[36])\n    # print(test_list"], ["\n# <func> # Python \n# Write a python function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j] != '' and str[i:j] in str:\n                count += 1\n    return count\n\n# <func> # Java\n# Write a Java function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j] != '' and str[i:j] in str:\n                count += 1\n    return count\n\n# <func> # C\n# Write a C function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j] != '' and str[i:j] in str:\n                count += 1\n    return count\n\n# <func> # C++\n# Write a C++ function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j] != '' and str[i:j] in str:\n                count += 1\n    return count\n\n# <func> # C#\n# Write a C# function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j] != '' and str[i:j"], ["\n# <func> # Python \n# Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n):\n    total_number_of_sequences = 0\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            total_number_of_sequences += 1\n    return total_number_of_sequences\n"], ["\n# <func> # Python \n# Write a function to replace the last element of the list with another list.\ndef replace_list(list1,list2):\n    return list1[:-1] + list2\n\n# <func> # Python \n# Write a function to remove the last element of the list.\ndef remove_last_element(list1):\n    return list1[:-1]\n\n# <func> # Python \n# Write a function to remove the first element of the list.\ndef remove_first_element(list1):\n    return list1[:1]\n\n# <func> # Python \n# Write a function to remove the second element of the list.\ndef remove_second_element(list1):\n    return list1[:2]\n\n# <func> # Python \n# Write a function to remove the third element of the list.\ndef remove_third_element(list1):\n    return list1[:3]\n\n# <func> # Python \n# Write a function to remove the fourth element of the list.\ndef remove_fourth_element(list1):\n    return list1[:4]\n\n# <func> # Python \n# Write a function to remove the fifth element of the list.\ndef remove_fifth_element(list1):\n    return list1[:5]\n\n# <func> # Python \n# Write a function to remove the sixth element of the list.\ndef remove_sixth_element(list1):\n    return list1[:6]\n\n# <func> # Python \n# Write a function to remove the seventh element of the list.\ndef remove_seventh_element(list1):\n    return list1[:7]\n\n# <func> # Python \n# Write a function to remove the eighth element of the list.\ndef remove_eighth_element(list1):\n    return list1[:8]\n\n# <func> # Python \n# Write a function to remove the ninth element of the list.\ndef remove_ninth_element(list1):\n    return list1[:9]\n\n# <func> # Python \n# Write a function to remove the tenth element of the list.\ndef remove_tenth"], ["\n# <func> # Python \n# Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n    array = []\n    for i in range(m):\n        for j in range(n):\n            array.append(i*j)\n    return array\n\n# Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n    array = []\n    for i in range(m):\n        for j in range(n):\n            array.append(i*j)\n    return array\n\n# Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n    array = []\n    for i in range(m):\n        for j in range(n):\n            array.append(i*j)\n    return array\n\n# Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n    array = []\n    for i in range(m):\n        for j in range(n):\n            array.append(i*j)\n    return array\n\n# Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n    array = []\n    for i in range(m):\n        for j in range(n):\n            array.append(i*j)\n    return array\n\n# Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n    array = []\n    for i in range(m):\n        for j in range(n):\n            array.append(i*j)\n    return array\n\n# Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n    array = []\n    for i in range(m):\n        for j in range(n):\n            array.append(i*j)\n    return array\n\n# Write a function to generate a 3d array"], ["\n# <func> # Python \n# Write a function to count total characters in a string.\ndef count_charac(str1):\n    count = 0\n    for i in str1:\n        if i.isalpha():\n            count += 1\n    return count\n"], ["\n# <func> # Python \n# Write a function to sort the given list based on the occurrence of first element of tuples.\ndef sort_on_occurence(lst):\n    # Your code here\n    pass\n\n# <func> # Python \n# Write a function to sort the given list based on the occurrence of second element of tuples.\ndef sort_on_occurence(lst):\n    # Your code here\n    pass\n\n# <func> # Python \n# Write a function to sort the given list based on the occurrence of third element of tuples.\ndef sort_on_occurence(lst):\n    # Your code here\n    pass\n\n# <func> # Python \n# Write a function to sort the given list based on the occurrence of fourth element of tuples.\ndef sort_on_occurence(lst):\n    # Your code here\n    pass\n\n# <func> # Python \n# Write a function to sort the given list based on the occurrence of fifth element of tuples.\ndef sort_on_occurence(lst):\n    # Your code here\n    pass\n\n# <func> # Python \n# Write a function to sort the given list based on the occurrence of sixth element of tuples.\ndef sort_on_occurence(lst):\n    # Your code here\n    pass\n\n# <func> # Python \n# Write a function to sort the given list based on the occurrence of seventh element of tuples.\ndef sort_on_occurence(lst):\n    # Your code here\n    pass\n\n# <func> # Python \n# Write a function to sort the given list based on the occurrence of eighth element of tuples.\ndef sort_on_occurence(lst):\n    # Your code here\n    pass\n\n# <func> # Python \n# Write a function to sort the given list based on the occurrence of ninth element of tuples.\ndef sort_on_occurence(lst):\n    # Your code here\n    pass\n\n# <func> # Python \n# Write a function to sort the given list based on the occurrence of tenth element of tuples.\ndef sort_on_occurence(lst):\n    # Your code here"], ["import math  \r\n\n# <func> # Python \n# Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N):\n    for i in range(1, int(N**0.5)+1):\n        if N**0.5 + i**2 == N:\n            return i**2\n\n# <func> # C\n# Write a C function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N):\n    for i in range(1, int(N**0.5)+1):\n        if N**0.5 + i**2 == N:\n            return i**2\n\n# <func> # Java\n# Write a Java function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N):\n    for i in range(1, int(N**0.5)+1):\n        if N**0.5 + i**2 == N:\n            return i**2\n\n# <func> # C++\n# Write a C++ function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N):\n    for i in range(1, int(N**0.5)+1):\n        if N**0.5 + i**2 == N:\n            return i**2\n\n# <func> # Python\n# Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N):\n    for i in range(1, int(N**0.5)+1):\n        if N**0.5 + i**2 == N:\n            return i**2\n\n# <func> # C\n# Write a C function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N):\n    for i in range(1, int(N**0.5)+1):\n        if N**0.5 + i**2 == N:\n            return i**2\n\n# <func> # Java\n# Write a Java function to find the next perfect square greater than a given number.\ndef next_Perfect_Square("], ["\n# <func> # Python \n# Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\ndef max_sum(arr, n):\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_sum = max(arr[i], arr[j], max_sum + arr[i] + arr[j])\n    return max_sum\n\n\n# +\n# Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n# -\n\n# # 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["\n# <func> # Python \n# Write a function for computing square roots using the babylonian method.\ndef babylonian_squareroot(number):\n    # Your code here\n    return number ** 0.5\n\n# Test your function"], ["\n# <func> # Python \n# Write a function to find the longest palindromic subsequence in the given string.\ndef lps(str):\n    n = len(str)\n    dp = [[0]*(n+1) for i in range(n+1)]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 or j == 0:\n                dp[i][j] = 1\n            elif str[i-1] == str[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[n-1][n-1]\n\n# Driver Code"], ["\n# <func> # Python \n# Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1, n+1))\n\n# <func> # Java\n# Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1, n+1))\n\n# <func> # C\n# Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1, n+1))\n\n# <func> # C++\n# Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1, n+1))\n\n# <func> # R\n# Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1, n+1))\n\n# <func> # Python 3\n# Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1, n+1))\n\n# <func> # R 3\n# Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1, n+1))\n\n# <func> # R 3\n# Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1, n+1))\n\n# <func> # R 3\n# Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n    return sum(1/i for i in range(1, n+1))\n\n# <func> # R 3\n# Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum("], ["\n# <func> # Python \n# Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n    return list(set(array_nums1) & set(array_nums2))\n\n# <func> # Python \n# Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n    return list(set(array_nums1) & set(array_nums2))\n\n# <func> # Python \n# Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n    return list(set(array_nums1) & set(array_nums2))\n\n# <func> # Python \n# Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n    return list(set(array_nums1) & set(array_nums2))\n\n# <func> # Python \n# Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n    return list(set(array_nums1) & set(array_nums2))\n\n# <func> # Python \n# Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n    return list(set(array_nums1) & set(array_nums2))\n\n# <func> # Python \n# Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n    return list(set(array_nums1) & set(array_nums2))\n\n# <func> # Python \n# Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n    return list(set(array_nums1)"], ["\n# <func> # Python \n# Write a python function to count the occcurences of an element in a tuple.\ndef count_X(tup, x):\n    return sum(1 for i in tup if i == x)\n\n# <func> # Java\n# Write a Java function to count the occcurences of an element in a tuple.\ndef count_X(tup, x):\n    return tup.length() - tup.indexOf(x)\n\n# <func> # C\n# Write a C function to count the occcurences of an element in a tuple.\ndef count_X(tup, x):\n    return tup.length() - tup.find(x)\n\n# <func> # C++\n# Write a C++ function to count the occcurences of an element in a tuple.\ndef count_X(tup, x):\n    return tup.size() - tup.find(x)\n\n# <func> # C\n# Write a C function to count the occcurences of an element in a tuple.\ndef count_X(tup, x):\n    return tup.size() - tup.find(x)\n\n# <func> # C\n# Write a C function to count the occcurences of an element in a tuple.\ndef count_X(tup, x):\n    return tup.size() - tup.find(x)\n\n# <func> # C\n# Write a C function to count the occcurences of an element in a tuple.\ndef count_X(tup, x):\n    return tup.size() - tup.find(x)\n\n# <func> # C\n# Write a C function to count the occcurences of an element in a tuple.\ndef count_X(tup, x):\n    return tup.size() - tup.find(x)\n\n# <func> # C\n# Write a C function to count the occcurences of an element in a tuple.\ndef count_X(tup, x):\n    return tup.size() - tup.find(x)\n\n# <func> # C\n# Write a C function to count the occcurences of an"], ["\n# <func> # Python \n# Write a function to insert an element before each element of a list.\ndef insert_element(list,element):\n    return list[:] + [element]\n\n# <func> # Python \n# Write a function to insert an element after each element of a list.\ndef insert_element(list,element):\n    return list[:] + [element]\n\n# <func> # Python \n# Write a function to insert an element before the first element of a list.\ndef insert_element_before(list,element):\n    return list[:1] + [element]\n\n# <func> # Python \n# Write a function to insert an element after the last element of a list.\ndef insert_element_after(list,element):\n    return list[-1:] + [element]\n\n# <func> # Python \n# Write a function to insert an element before the first element of a list.\ndef insert_element_before_first(list,element):\n    return list[:1] + [element]\n\n# <func> # Python \n# Write a function to insert an element after the last element of a list.\ndef insert_element_after_last(list,element):\n    return list[-1:] + [element]\n\n# <func> # Python \n# Write a function to insert an element before the first element of a list.\ndef insert_element_before_first_last(list,element):\n    return list[:1] + [element]\n\n# <func> # Python \n# Write a function to insert an element after the last element of a list.\ndef insert_element_after_last_last(list,element):\n    return list[-1:] + [element]\n\n# <func> # Python \n# Write a function to insert an element before the first element of a list.\ndef insert_element_before_first_last_last(list,element):\n    return list[:1] + [element]\n\n# <func> # Python \n# Write a function to insert an element after the last element of a list.\ndef insert_element_after_last_last_last(list,element):\n    return list[-1:] + [element]\n\n# <func"], ["import cmath  \r\n\n# <func> # Python \n# Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):\n    # Convert the numbers to polar coordinates\n    r = math.sqrt(numbers[0]**2 + numbers[1]**2)\n    theta = math.atan2(numbers[1], numbers[0])\n    return r, theta\n\n# <func> # Python \n# Write a python function to convert complex numbers to rectangular coordinates.\ndef convert(numbers):\n    # Convert the numbers to rectangular coordinates\n    x = numbers[0]\n    y = numbers[1]\n    return x, y\n\n# <func> # Python \n# Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):\n    # Convert the numbers to polar coordinates\n    r = math.sqrt(numbers[0]**2 + numbers[1]**2)\n    theta = math.atan2(numbers[1], numbers[0])\n    return r, theta\n\n# <func> # Python \n# Write a python function to convert complex numbers to rectangular coordinates.\ndef convert(numbers):\n    # Convert the numbers to rectangular coordinates\n    x = numbers[0]\n    y = numbers[1]\n    return x, y\n\n# <func> # Python \n# Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):\n    # Convert the numbers to polar coordinates\n    r = math.sqrt(numbers[0]**2 + numbers[1]**2)\n    theta = math.atan2(numbers[1], numbers[0])\n    return r, theta\n\n# <func> # Python \n# Write a python function to convert complex numbers to rectangular coordinates.\ndef convert(numbers):\n    # Convert the numbers to rectangular coordinates\n    x = numbers[0]\n    y = numbers[1]\n    return x, y\n\n# <func> # Python \n# Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):\n    # Convert the numbers to polar coordinates\n    r = math.sqrt(numbers[0]**2 + numbers[1]**2)\n    theta ="], ["\n# <func> # Python \n# Write a python function to count integers from a given list.\ndef count_integer(list1):\n    count = 0\n    for i in list1:\n        if i % 2 == 0:\n            count += 1\n    return count\n\n# <func> # Java\n# Write a Java function to count integers from a given list.\npublic int countInteger(int[] list) {\n    int count = 0;\n    for (int i : list) {\n        if (i % 2 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n# <func> # C\n# Write a C function to count integers from a given list.\nint countInteger(int[] list) {\n    int count = 0;\n    for (int i : list) {\n        if (i % 2 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n# <func> # C++\n# Write a C++ function to count integers from a given list.\nint countInteger(int[] list) {\n    int count = 0;\n    for (int i : list) {\n        if (i % 2 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n# <func> # C#\n# Write a C# function to count integers from a given list.\nint countInteger(int[] list) {\n    int count = 0;\n    foreach (int i in list) {\n        if (i % 2 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n# <func> # JavaScript\n# Write a JavaScript function to count integers from a given list.\nfunction countInteger(list) {\n    let count = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (i % 2 == 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n# <func> # PHP\n# Write a PHP function to count integers from a given list.\nfunction countInteger($list) {\n   "], ["import re\r\n\n# <func> # Python \n# Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\n    words = text.split()\n    for word in words:\n        if word[0] == 'a' or word[0] == 'e':\n            print(word)\n\n# <func> # Java\n# Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\n    words = text.split()\n    for word in words:\n        if word[0] == 'a' or word[0] == 'e':\n            print(word)\n\n# <func> # C\n# Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\n    words = text.split()\n    for word in words:\n        if word[0] == 'a' or word[0] == 'e':\n            print(word)\n\n# <func> # C++\n# Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\n    words = text.split()\n    for word in words:\n        if word[0] == 'a' or word[0] == 'e':\n            print(word)\n\n# <func> # C#\n# Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\n    words = text.split()\n    for word in words:\n        if word[0] == 'a' or word[0] == 'e':\n            print(word)\n\n# <func> # F#\n# Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\n    words = text.split()\n    for word in words:\n        if word[0] == 'a' or word[0] == 'e':\n            print(word)\n\n# <func> # Go\n# Write a function to find all words starting with 'a' or '"], ["from itertools import combinations_with_replacement \r\n\n# <func> # Python \n# Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n    return [l[i:i+n] for i in range(0, len(l), n)]\n\n# <func> # Python \n# Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n    return [l[i:i+n] for i in range(0, len(l), n)]\n\n# <func> # Python \n# Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n    return [l[i:i+n] for i in range(0, len(l), n)]\n\n# <func> # Python \n# Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n    return [l[i:i+n] for i in range(0, len(l), n)]\n\n# <func> # Python \n# Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n    return [l[i:i+n] for i in range(0, len(l), n)]\n\n# <func> # Python \n# Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n    return [l[i:i+n] for i in range(0, len(l), n)]\n\n# <func> # Python \n# Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n    return [l[i:i+n] for i in range(0, len(l), n)]\n\n# <func> # Python \n# Write a function to choose specified number of colours from three different colours"], ["\n# <func> # Python \n# Write a python function to count the number of prime numbers less than a given non-negative number.\ndef count_Primes_nums(n):\n    # Your code here\n    primes = []\n    for num in range(2, n+1):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return len(primes)\n\n\n# +\n# 10. Write a Python program to find the maximum and minimum of two numbers.\ndef find_max_min(num1, num2):\n    # Your code here\n    if num1 > num2:\n        max_num = num1\n        min_num = num2\n    else:\n        max_num = num2\n        min_num = num1\n    return max_num, min_num\n\n\n# -\n\n# 11. Write a Python program to find the sum of two numbers.\ndef find_sum(num1, num2):\n    # Your code here\n    sum = num1 + num2\n    return sum\n\n\n# 12. Write a Python program to find the factorial of a given number.\ndef find_factorial(num):\n    # Your code here\n    if num == 0:\n        return 1\n    else:\n        return num * find_factorial(num-1)\n\n\n# 13. Write a Python program to find the factorial of a given number.\ndef find_factorial(num):\n    # Your code here\n    if num == 0:\n        return 1\n    else:\n        return num * find_factorial(num-1)\n\n\n# 14. Write a Python program to find the sum of the first n natural numbers.\ndef find_sum_n(n):\n    # Your code here\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\n\n# 15. Write a Python program to find the sum of the first n natural numbers."], ["\n# <func> # Python \n# Write a function to swap two numbers.\ndef swap_numbers(a,b):\n    temp = a\n    a = b\n    b = temp\n    return a,b\n\n# <func> # Python \n# Write a function to check if a number is prime.\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check if a number is a Fibonacci number.\ndef is_fibonacci(n):\n    if n == 1:\n        return False\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[n] == n\n\n# <func> # Python \n# Write a function to check if a number is a Fibonacci number.\ndef is_fibonacci(n):\n    if n == 1:\n        return False\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[n] == n\n\n# <func> # Python \n# Write a function to check if a number is a Fibonacci number.\ndef is_fibonacci(n):\n    if n == 1:\n        return False\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib[n] == n\n\n# <func> # Python \n# Write a function to check if a number is a Fibonacci number.\ndef is_fibonacci(n):\n    if n == 1:\n        return False\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib["], ["\n# <func> # Python \n# Write a function to find number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n    return len([num for num in array_nums if num % 2 != 0])\n\n# <func> # Python \n# Write a function to find the number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n    return len([num for num in array_nums if num % 2 != 0])\n\n# <func> # Python \n# Write a function to find the number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n    return len([num for num in array_nums if num % 2 != 0])\n\n# <func> # Python \n# Write a function to find the number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n    return len([num for num in array_nums if num % 2 != 0])\n\n# <func> # Python \n# Write a function to find the number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n    return len([num for num in array_nums if num % 2 != 0])\n\n# <func> # Python \n# Write a function to find the number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n    return len([num for num in array_nums if num % 2 != 0])\n\n# <func> # Python \n# Write a function to find the number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n    return len([num for num in array_nums if num % 2 != 0])\n\n# <func> # Python \n# Write a function to find the number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n    return len([num for num in array_nums if num % 2 != 0])\n\n# <func> # Python \n# Write a function to find"], ["\n# <func> # Python \n# Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\n    return max(test_tup1[0], test_tup2[0]) + max(test_tup1[1], test_tup2[1])\n\n# <func> # Python \n# Write a function to minimize the given two tuples.\ndef minimize_elements(test_tup1, test_tup2):\n    return min(test_tup1[0], test_tup2[0]) + min(test_tup1[1], test_tup2[1])\n\n# <func> # Python \n# Write a function to find the maximum element in a given list.\ndef max_element(lst):\n    return max(lst)\n\n# <func> # Python \n# Write a function to find the minimum element in a given list.\ndef min_element(lst):\n    return min(lst)\n\n# <func> # Python \n# Write a function to find the maximum element in a given list.\ndef max_element_in_list(lst):\n    return max(lst)\n\n# <func> # Python \n# Write a function to find the minimum element in a given list.\ndef min_element_in_list(lst):\n    return min(lst)\n\n# <func> # Python \n# Write a function to find the maximum element in a given list.\ndef max_element_in_list_2(lst):\n    return max(lst)\n\n# <func> # Python \n# Write a function to find the minimum element in a given list.\ndef min_element_in_list_2(lst):\n    return min(lst)\n\n# <func> # Python \n# Write a function to find the maximum element in a given list.\ndef max_element_in_list_3(lst):\n    return max(lst)\n\n# <func> # Python \n# Write a function to find the minimum element in a given list.\ndef min_element_in_list_3(lst):\n    return min(lst)\n\n#"], ["\n# <func> # Python \n# Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n):\n    # Create a list of all the primes up to n\n    primes = [2]\n    for i in range(3, n + 1):\n        if all(i % j != 0 for j in primes):\n            primes.append(i)\n    # Return the nth prime in the list\n    return primes[n - 1]\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n    return test_tup1[0] / test_tup2[0]\n\n# <func> # Java\n# Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n    return test_tup1[0] / test_tup2[0]\n\n# <func> # JavaScript\n# Write a function to perform mathematical division operation across the given tuples.\nfunction division_elements(test_tup1, test_tup2) {\n    return test_tup1[0] / test_tup2[0]\n}\n\n# <func> # C\n# Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n    return test_tup1[0] / test_tup2[0]\n\n# <func> # C++\n# Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n    return test_tup1[0] / test_tup2[0]\n\n# <func> # Go\n# Write a function to perform mathematical division operation across the given tuples.\nfunc division_elements(test_tup1, test_tup2) {\n    return test_tup1[0] / test_tup2[0]\n}\n\n# <func> # Haskell\n# Write a function to perform mathematical division operation across the given tuples.\ndivision_elements :: (Num a) => [a] -> a -> a\ndivision_elements test_tup1 test_tup2 = test_tup1[0] / test_tup2[0]\n\n# <func> # Rust\n# Write a function to perform mathematical division operation across the given tuples.\nfn division_elements(test_tup1, test_tup2) {\n    return test_tup1[0]"], ["\n# <func> # Python \n# Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n    return [list1[0:L], list1[L:]]\n\n# <func> # Python \n# Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n    return [list1[0:L], list1[L:]]\n\n# <func> # Python \n# Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n    return [list1[0:L], list1[L:]]\n\n# <func> # Python \n# Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n    return [list1[0:L], list1[L:]]\n\n# <func> # Python \n# Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n    return [list1[0:L], list1[L:]]\n\n# <func> # Python \n# Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n    return [list1[0:L], list1[L:]]\n\n# <func> # Python \n# Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n    return [list1[0:L], list1[L:]]\n\n# <func> # Python \n# Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n    return [list1[0"], ["\n# <func> # Python \n# Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n    d = {}\n    for key in d1.keys() & d2.keys():\n        d[key] = d1[key] + d2[key]\n    return d\n\n# <func> # Python \n# Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n    d = {}\n    for key in d1.keys() & d2.keys():\n        d[key] = d1[key] + d2[key]\n    return d\n\n# <func> # Python \n# Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n    d = {}\n    for key in d1.keys() & d2.keys():\n        d[key] = d1[key] + d2[key]\n    return d\n\n# <func> # Python \n# Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n    d = {}\n    for key in d1.keys() & d2.keys():\n        d[key] = d1[key] + d2[key]\n    return d\n\n# <func> # Python \n# Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n    d = {}\n    for key in d1.keys() & d2.keys():\n        d[key] = d1[key] + d2[key]\n    return d\n\n# <func> # Python \n# Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n    d = {}\n    for key in d1.keys() & d2.keys():\n        d[key] = d1[key] + d2[key]\n    return d\n\n# <func> # Python \n# Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n    d = {}\n    for key in d1.keys() & d2.keys():\n        d[key] = d"], ["\n# <func> # Python \n# Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n    return h_age * 5.5\n\n# <func> # Python \n# Write a function to calculate a cat's age in cat's years.\ndef cat_age(h_age):\n    return h_age * 7\n\n# <func> # Python \n# Write a function to calculate a bird's age in bird's years.\ndef bird_age(h_age):\n    return h_age * 10\n\n# <func> # Python \n# Write a function to calculate a fish's age in fish's years.\ndef fish_age(h_age):\n    return h_age * 15\n\n# <func> # Python \n# Write a function to calculate a human's age in human's years.\ndef human_age(h_age):\n    return h_age * 12\n\n# <func> # Python \n# Write a function to calculate a human's age in human's years.\ndef human_age(h_age):\n    return h_age * 12\n\n# <func> # Python \n# Write a function to calculate a human's age in human's years.\ndef human_age(h_age):\n    return h_age * 12\n\n# <func> # Python \n# Write a function to calculate a human's age in human's years.\ndef human_age(h_age):\n    return h_age * 12\n\n# <func> # Python \n# Write a function to calculate a human's age in human's years.\ndef human_age(h_age):\n    return h_age * 12\n\n# <func> # Python \n# Write a function to calculate a human's age in human's years.\ndef human_age(h_age):\n    return h_age * 12\n\n# <func> # Python \n# Write a function to calculate a human's age in human's years.\ndef human_age(h_age):\n    return h"], ["\n# <func> # Python \n# Write a function to split a list for every nth element.\ndef list_split(S, step):\n    # Step is the number of elements to split the list into.\n    # S is the list to split.\n    # return a list of lists.\n    return [S[i:i+step] for i in range(0, len(S), step)]\n\n# Test function."], ["\n# <func> # Python \n# Write a function to find the lateral surface area of a cube.\ndef lateralsurface_cube(l):\n    return 6*l**2\n\n# <func> # Python \n# Write a function to find the volume of a cube.\ndef volume_cube(l):\n    return l**3\n\n# <func> # Python \n# Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n    return 4*3.14*r**2\n\n# <func> # Python \n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return 4/3*3.14*r**3\n\n# <func> # Python \n# Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n    return 4*3.14*r**2\n\n# <func> # Python \n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return 4/3*3.14*r**3\n\n# <func> # Python \n# Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n    return 4*3.14*r**2\n\n# <func> # Python \n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return 4/3*3.14*r**3\n\n# <func> # Python \n# Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n    return 4*3.14*r**2\n\n# <func> # Python \n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return 4/3*3.14*r**3\n\n# <func> # Python \n# Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n    return 4*3.14*r**2\n\n# <func"], ["\n# <func> # Python \n# Write a python function to find the sum of squares of first n odd natural numbers.\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n"], ["\n# <func> # Python \n# Write a function to find the n'th star number.\ndef find_star_num(n):\n    # Your code here\n    return 1\n\n# <func> # Python \n# Write a function to find the n'th star number.\ndef find_star_num(n):\n    # Your code here\n    return 1\n\n# <func> # Python \n# Write a function to find the n'th star number.\ndef find_star_num(n):\n    # Your code here\n    return 1\n\n# <func> # Python \n# Write a function to find the n'th star number.\ndef find_star_num(n):\n    # Your code here\n    return 1\n\n# <func> # Python \n# Write a function to find the n'th star number.\ndef find_star_num(n):\n    # Your code here\n    return 1\n\n# <func> # Python \n# Write a function to find the n'th star number.\ndef find_star_num(n):\n    # Your code here\n    return 1\n\n# <func> # Python \n# Write a function to find the n'th star number.\ndef find_star_num(n):\n    # Your code here\n    return 1\n\n# <func> # Python \n# Write a function to find the n'th star number.\ndef find_star_num(n):\n    # Your code here\n    return 1\n\n# <func> # Python \n# Write a function to find the n'th star number.\ndef find_star_num(n):\n    # Your code here\n    return 1\n\n# <func> # Python \n# Write a function to find the n'th star number.\ndef find_star_num(n):\n    # Your code here\n    return 1\n\n# <func> # Python \n# Write a function to find the n'th star number.\ndef find_star_num(n):\n    # Your code here\n    return 1\n\n# <func> # Python \n# Write a function to find the n'th star number.\ndef find_"], ["\n# <func> # Python \n# Write a function to find the ascii value of a character.\ndef ascii_value(k):\n    return ord(k)\n\n# Write a function to find the ascii value of a character.\ndef ascii_value(k):\n    return ord(k)\n\n# Write a function to find the ascii value of a character.\ndef ascii_value(k):\n    return ord(k)\n\n# Write a function to find the ascii value of a character.\ndef ascii_value(k):\n    return ord(k)\n\n# Write a function to find the ascii value of a character.\ndef ascii_value(k):\n    return ord(k)\n\n# Write a function to find the ascii value of a character.\ndef ascii_value(k):\n    return ord(k)\n\n# Write a function to find the ascii value of a character.\ndef ascii_value(k):\n    return ord(k)\n\n# Write a function to find the ascii value of a character.\ndef ascii_value(k):\n    return ord(k)\n\n# Write a function to find the ascii value of a character.\ndef ascii_value(k):\n    return ord(k)\n\n# Write a function to find the ascii value of a character.\ndef ascii_value(k):\n    return ord(k)\n\n# Write a function to find the ascii value of a character.\ndef ascii_value(k):\n    return ord(k)\n\n# Write a function to find the ascii value of a character.\ndef ascii_value(k):\n    return ord(k)\n\n# Write a function to find the ascii value of a character.\ndef ascii_value(k):\n    return ord(k)\n\n# Write a function to find the ascii value of a character.\ndef ascii_value(k):\n    return ord(k)\n\n# Write a function to find the ascii value of a character.\ndef ascii_value(k):\n    return ord(k)\n\n# Write a function to find the ascii value of a character.\ndef ascii_value("], ["\n# <func> # Python \n# Write a python function to find the sum of even numbers at even positions.\ndef sum_even_and_even_index(arr,n):\n    even_sum = 0\n    for i in range(0,n):\n        if i%2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"], ["\n# <func> # Python \n# Write a python function to find the sum of fifth power of first n even natural numbers.\ndef even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum\n"], ["\n# <func> # Python \n# Write a function to perfom the rear element extraction from list of tuples records.\ndef rear_extract(test_list):\n    # Your code here\n    # rear_extract(test_list)\n    return test_list[1]\n\n\n# +\n# Write a function to perform the rear element extraction from list of tuples records.\n# Your code here\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test_list)\n# rear_extract(test"], ["\n# <func> # Python \n# Write a function to substract the contents of one tuple with corresponding index of other tuple.\ndef substract_elements(test_tup1, test_tup2):\n    return test_tup1[0] - test_tup2[0]\n\n# <func> # Python \n# Write a function to multiply the contents of one tuple with corresponding index of other tuple.\ndef multiply_elements(test_tup1, test_tup2):\n    return test_tup1[0] * test_tup2[0]\n\n# <func> # Python \n# Write a function to divide the contents of one tuple with corresponding index of other tuple.\ndef divide_elements(test_tup1, test_tup2):\n    return test_tup1[0] / test_tup2[0]\n\n# <func> # Python \n# Write a function to add the contents of one tuple with corresponding index of other tuple.\ndef add_elements(test_tup1, test_tup2):\n    return test_tup1[0] + test_tup2[0]\n\n# <func> # Python \n# Write a function to subtract the contents of one tuple with corresponding index of other tuple.\ndef subtract_elements(test_tup1, test_tup2):\n    return test_tup1[0] - test_tup2[0]\n\n# <func> # Python \n# Write a function to multiply the contents of one tuple with corresponding index of other tuple.\ndef multiply_elements(test_tup1, test_tup2):\n    return test_tup1[0] * test_tup2[0]\n\n# <func> # Python \n# Write a function to divide the contents of one tuple with corresponding index of other tuple.\ndef divide_elements(test_tup1, test_tup2):\n    return test_tup1[0] / test_tup2[0]\n\n# <func> # Python \n# Write a function to add the contents of one tuple with corresponding index of other tuple.\ndef add_elements(test_tup1, test_tup2):\n"], ["import math  \r\n\n# <func> # Python \n# Write a python function to find sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum( n):\n    sum = 0\n    for i in range(0, n):\n        sum += binomial( n, i )\n    return sum\n\n# <func> # C++\n# Write a C++ function to find sum of even index binomial coefficients.\n# Input: n\n# Output: sum of even index binomial coefficients\n# Examples:\n# 1. even_binomial_Coeff_Sum( 1 ) = 1\n# 2. even_binomial_Coeff_Sum( 2 ) = 2\n# 3. even_binomial_Coeff_Sum( 3 ) = 6\n# 4. even_binomial_Coeff_Sum( 4 ) = 24\n# 5. even_binomial_Coeff_Sum( 5 ) = 120\n# 6. even_binomial_Coeff_Sum( 6 ) = 720\n# 7. even_binomial_Coeff_Sum( 7 ) = 5040\n# 8. even_binomial_Coeff_Sum( 8 ) = 40320\n# 9. even_binomial_Coeff_Sum( 9 ) = 362880\n# 10. even_binomial_Coeff_Sum( 10 ) = 3628800\n# 11. even_binomial_Coeff_Sum( 11 ) = 39916800\n# 12. even_binomial_Coeff_Sum( 12 ) = 479001600\n# 13. even_binomial_Coeff_Sum( 13 ) = 61859138400\n# 14. even_binomial_Coeff_Sum( 14 ) = 83901636800\n# 15. even_binomial_C"], ["import math as mt \r\n\n# <func> # Python \n# Write a python function to find the position of the last removed element from the given array.\ndef get_Position(a,n,m):\n    # Write your code here\n    i=0\n    j=n-1\n    while i<j:\n        if a[i]!=a[j]:\n            break\n        i+=1\n        j-=1\n    return i\n\n# <func> # C++\n# Write a function to find the position of the last removed element from the given array.\n#\n# Input:\n#\n# The first line contains an integer T, the number of test cases.\n#\n# Each test case contains an integer N, the size of the array.\n#\n# The next line contains N space separated integers A1,A2,...AN.\n#\n# Output:\n#\n# For each test case, print the position of the last removed element from the given array.\n#\n# Example:\n#\n# Input:\n#\n# 2\n# 5\n# 2 4 6 8 10\n#\n# Output:\n#\n# 0 3\n# 1 4\n#\n# Explanation:\n#\n# 0th test case:\n#\n# The first element is removed.\n#\n# 1st test case:\n#\n# The second element is removed.\n#\n# 2nd test case:\n#\n# The third element is removed.\n#\n# 3rd test case:\n#\n# The last element is removed.\n#\n# 4th test case:\n#\n# The last element is removed.\n#\n# 5th test case:\n#\n# The last element is removed.\n\n# <func> # Python \n# Write a python function to find the position of the last removed element from the given array.\n#\n# Input:\n#\n# The first line contains an integer T, the number of test cases.\n#\n# Each test case contains an integer N, the size of the array.\n#\n# The next line contains N space separated integers A1,A2,...AN.\n#\n# Output:\n#\n# For each test case"], ["\n# <func> # Python \n# Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n    return (r*r*r)*h\n\n# <func> # Python \n# Write a function to find the surface area of a cylinder.\ndef surface_area_cylinder(r,h):\n    return 2*pi*r*h\n\n# <func> # Python \n# Write a function to find the perimeter of a cylinder.\ndef perimeter_cylinder(r,h):\n    return 2*pi*r + 2*pi*h\n\n# <func> # Python \n# Write a function to find the area of a sphere.\ndef area_sphere(r):\n    return 4*pi*r**2\n\n# <func> # Python \n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return 4/3*pi*r**3\n\n# <func> # Python \n# Write a function to find the surface area of a sphere.\ndef surface_area_sphere(r):\n    return 4/3*pi*r**2\n\n# <func> # Python \n# Write a function to find the perimeter of a sphere.\ndef perimeter_sphere(r):\n    return 4/3*pi*r\n\n# <func> # Python \n# Write a function to find the radius of a sphere.\ndef radius_sphere(volume):\n    return volume**(1/3)\n\n# <func> # Python \n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    return (1/3)*pi*r**2*h\n\n# <func> # Python \n# Write a function to find the surface area of a cone.\ndef surface_area_cone(r,h):\n    return (1/3)*pi*r**2 + pi*r*h\n\n# <func> # Python \n# Write a function to find the perimeter of a cone.\ndef perimeter_cone(r,h):\n    return 3*pi"], ["\n# <func> # Python \n# Write a function to filter a dictionary based on values.\ndef dict_filter(dict,n):\n    return {k:v for k,v in dict.items() if v==n}\n\n# <func> # Python \n# Write a function to filter a dictionary based on keys.\ndef dict_filter(dict,k):\n    return {k:v for k,v in dict.items() if k in k}\n\n# <func> # Python \n# Write a function to filter a dictionary based on values and keys.\ndef dict_filter(dict,v,k):\n    return {k:v for k,v in dict.items() if v==v and k in k}\n\n# <func> # Python \n# Write a function to filter a dictionary based on values and keys.\ndef dict_filter(dict,v,k):\n    return {k:v for k,v in dict.items() if v==v and k in k}\n\n# <func> # Python \n# Write a function to filter a dictionary based on values and keys.\ndef dict_filter(dict,v,k):\n    return {k:v for k,v in dict.items() if v==v and k in k}\n\n# <func> # Python \n# Write a function to filter a dictionary based on values and keys.\ndef dict_filter(dict,v,k):\n    return {k:v for k,v in dict.items() if v==v and k in k}\n\n# <func> # Python \n# Write a function to filter a dictionary based on values and keys.\ndef dict_filter(dict,v,k):\n    return {k:v for k,v in dict.items() if v==v and k in k}\n\n# <func> # Python \n# Write a function to filter a dictionary based on values and keys.\ndef dict_filter(dict,v,k):\n    return {k:v for k,v in dict.items() if v==v and k in k}\n\n# <func> # Python \n# Write a function to filter a dictionary based on values and keys.\ndef dict_filter(dict,v,k):\n    return"], ["\n# <func> # Python \n# Write a function to find the element count that occurs before the record in the given tuple.\ndef count_first_elements(test_tup):\n    return len(test_tup) - test_tup.index(max(test_tup))\n\n# <func> # Python \n# Write a function to find the element count that occurs after the record in the given tuple.\ndef count_last_elements(test_tup):\n    return len(test_tup) - test_tup.index(min(test_tup))\n\n# <func> # Python \n# Write a function to find the element count that occurs between the record and the first element in the given tuple.\ndef count_between_elements(test_tup):\n    return len(test_tup) - test_tup.index(max(test_tup) + 1)\n\n# <func> # Python \n# Write a function to find the element count that occurs between the first element and the last element in the given tuple.\ndef count_between_elements_2(test_tup):\n    return len(test_tup) - test_tup.index(min(test_tup) - 1)\n\n# <func> # Python \n# Write a function to find the element count that occurs between the first element and the last element in the given tuple.\ndef count_between_elements_3(test_tup):\n    return len(test_tup) - test_tup.index(min(test_tup) + 1)\n\n# <func> # Python \n# Write a function to find the element count that occurs between the first element and the last element in the given tuple.\ndef count_between_elements_4(test_tup):\n    return len(test_tup) - test_tup.index(max(test_tup) + 1)\n\n# <func> # Python \n# Write a function to find the element count that occurs between the first element and the last element in the given tuple.\ndef count_between_elements_5(test_tup):\n    return len(test_tup) - test_tup.index(min"], ["\n# <func> # Python \n# Write a function to find the nth decagonal number.\ndef is_num_decagonal(n):\n    # Write your code here\n    return n % 10 == 1\n\n# <func> # Python \n# Write a function to find the nth triagonal number.\ndef is_num_triagonal(n):\n    # Write your code here\n    return n % 10 == 3\n\n# <func> # Python \n# Write a function to find the nth pentagonal number.\ndef is_num_pentagonal(n):\n    # Write your code here\n    return n % 10 == 5\n\n# <func> # Python \n# Write a function to find the nth hexagonal number.\ndef is_num_hexagonal(n):\n    # Write your code here\n    return n % 10 == 6\n\n# <func> # Python \n# Write a function to find the nth heptagonal number.\ndef is_num_heptagonal(n):\n    # Write your code here\n    return n % 10 == 7\n\n# <func> # Python \n# Write a function to find the nth octagonal number.\ndef is_num_octagonal(n):\n    # Write your code here\n    return n % 10 == 8\n\n# <func> # Python \n# Write a function to find the nth nonagonal number.\ndef is_num_nonagonal(n):\n    # Write your code here\n    return n % 10 == 9\n\n# <func> # Python \n# Write a function to find the nth decagonal number.\ndef is_num_decagonal(n):\n    # Write your code here\n    return n % 10 == 1\n\n# <func> # Python \n# Write a function to find the nth triagonal number.\ndef is_num_triagonal(n):\n    # Write your code here\n    return n % 10 == 3\n\n# <func> # Python \n# Write a function to find the nth pentagonal number"], ["\n# <func> # Python \n# Write a function to search an element in the given array by using sequential search.\ndef sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1\n\n# Write a function to search an element in the given array by using binary search.\ndef binary_search(dlist, item):\n    low = 0\n    high = len(dlist) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if dlist[mid] == item:\n            return mid\n        elif dlist[mid] < item:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n# Write a function to search an element in the given array by using linear search.\ndef linear_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1\n\n# Write a function to search an element in the given array by using bubble sort.\ndef bubble_sort(dlist):\n    n = len(dlist)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if dlist[j] > dlist[j + 1]:\n                dlist[j], dlist[j + 1] = dlist[j + 1], dlist[j]\n\n# Write a function to search an element in the given array by using insertion sort.\ndef insertion_sort(dlist):\n    n = len(dlist)\n    for i in range(1, n):\n        key = dlist[i]\n        j = i - 1\n        while j >= 0 and key < dlist[j]:\n            dlist[j + 1] = dlist[j]\n            j -= 1\n        dlist[j + 1] = key\n\n# Write a function to search an element in the given array by using selection sort.\ndef selection_sort(dlist):\n    n = len"], ["\n# <func> # Python \n# Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n\n# <func> # Python \n# Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n\n# <func> # Python \n# Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n\n# <func> # Python \n# Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n\n# <func> # Python \n# Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n\n# <func> # Python \n# Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n    for i in range("], ["\n# <func> # Python \n# Write a function to substaract two lists using map and lambda function.\ndef sub_list(nums1,nums2):\n    return list(map(lambda x: x-nums2,nums1))\n\n# <func> # Python \n# Write a function to find the maximum element in a list.\ndef max_element(nums):\n    return max(nums)\n\n# <func> # Python \n# Write a function to find the minimum element in a list.\ndef min_element(nums):\n    return min(nums)\n\n# <func> # Python \n# Write a function to find the sum of two lists.\ndef sum_list(nums1,nums2):\n    return sum(nums1+nums2)\n\n# <func> # Python \n# Write a function to find the product of two lists.\ndef product_list(nums1,nums2):\n    return product(nums1,nums2)\n\n# <func> # Python \n# Write a function to find the maximum element in a list.\ndef max_element(nums):\n    return max(nums)\n\n# <func> # Python \n# Write a function to find the minimum element in a list.\ndef min_element(nums):\n    return min(nums)\n\n# <func> # Python \n# Write a function to find the sum of two lists.\ndef sum_list(nums1,nums2):\n    return sum(nums1+nums2)\n\n# <func> # Python \n# Write a function to find the product of two lists.\ndef product_list(nums1,nums2):\n    return product(nums1,nums2)\n\n# <func> # Python \n# Write a function to find the maximum element in a list.\ndef max_element(nums):\n    return max(nums)\n\n# <func> # Python \n# Write a function to find the minimum element in a list.\ndef min_element(nums):\n    return min(nums)\n\n# <func> # Python \n# Write a function to"], ["\n# <func> # Python \n# Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\ndef validate(n):\n    # your code here\n    return True\n"], ["\n# <func> # Python \n# Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n    for i in list:\n        if i != element:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n    for i in list:\n        if i != element:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n    for i in list:\n        if i != element:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n    for i in list:\n        if i != element:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n    for i in list:\n        if i != element:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n    for i in list:\n        if i != element:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n    for i in list:\n        if i != element:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n    for i in list:\n        if i != element:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check whether all items of a list are"], ["import re\r\n\n# <func> # Python \n# Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n    return text.find('a') == 0 and text.find('b') == 2 and text.find('b') == 3\n\n# <func> # Python \n# Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n    return text.find('a') == 0 and text.find('b') == 2 and text.find('b') == 3\n\n# <func> # Python \n# Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n    return text.find('a') == 0 and text.find('b') == 2 and text.find('b') == 3\n\n# <func> # Python \n# Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n    return text.find('a') == 0 and text.find('b') == 2 and text.find('b') == 3\n\n# <func> # Python \n# Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n    return text.find('a') == 0 and text.find('b') == 2 and text.find('b') == 3\n\n# <func> # Python \n# Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n    return text.find('a') == 0 and text.find('b') == 2 and text.find('b') == 3\n\n# <func> # Python \n# Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n    return text.find('a') == 0 and text.find('b') == 2"], ["\n# <func> # Python \n# Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k):\n    # Write your code here\n    max_sum = 0\n    for i in range(0, n):\n        for j in range(0, k):\n            max_sum = max(max_sum, a[i] + a[i+k])\n    return max_sum\n\n\ndef max_sub_array_sum_repeated(a, n, k):\n    # Write your code here\n    max_sum = 0\n    for i in range(0, n):\n        for j in range(0, k):\n            max_sum = max(max_sum, a[i] + a[i+k])\n    return max_sum\n\n\ndef max_sub_array_sum_repeated(a, n, k):\n    # Write your code here\n    max_sum = 0\n    for i in range(0, n):\n        for j in range(0, k):\n            max_sum = max(max_sum, a[i] + a[i+k])\n    return max_sum\n\n\ndef max_sub_array_sum_repeated(a, n, k):\n    # Write your code here\n    max_sum = 0\n    for i in range(0, n):\n        for j in range(0, k):\n            max_sum = max(max_sum, a[i] + a[i+k])\n    return max_sum\n\n\ndef max_sub_array_sum_repeated(a, n, k):\n    # Write your code here\n    max_sum = 0\n    for i in range(0, n):\n        for j in range(0, k):\n            max_sum = max(max_sum, a[i] + a[i+k])\n    return max_sum\n\n\ndef max_sub_array_sum_repeated(a, n, k):\n    # Write your code here\n    max_sum"], ["\n# <func> # Python \n# Write a python function to find the sum of squares of first n even natural numbers.\ndef square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n"], ["\n# <func> # Python \n# Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\n    for i in range(len(arr)):\n        if arr[i] % N == 0:\n            arr[i] = (arr[i] // N) % P\n    return arr\n\n# <func> # Python \n# Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\n    for i in range(len(arr)):\n        if arr[i] % N == 0:\n            arr[i] = (arr[i] // N) % P\n    return arr\n\n# <func> # Python \n# Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\n    for i in range(len(arr)):\n        if arr[i] % N == 0:\n            arr[i] = (arr[i] // N) % P\n    return arr\n\n# <func> # Python \n# Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\n    for i in range(len(arr)):\n        if arr[i] % N == 0:\n            arr[i] = (arr[i] // N) % P\n    return arr\n\n# <func> # Python \n# Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\n    for i in range(len(arr)):\n        if arr[i] % N == 0:\n            arr[i] = (arr[i] // N) % P\n    return arr\n\n# <func> # Python \n# Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\n    for i in range(len(arr)):\n        if arr["], ["\n# <func> # Python \n# Write a python function to calculate the number of odd days in a given year.\ndef odd_Days(N):\n    days = 365\n    for i in range(N):\n        if i % 2 == 0:\n            days -= 1\n    return days\n\n# <func> # C\n# Write a C function to calculate the number of odd days in a given year.\ndef odd_Days(N):\n    days = 365\n    for i in range(N):\n        if i % 2 == 0:\n            days -= 1\n    return days\n\n# <func> # C++\n# Write a C++ function to calculate the number of odd days in a given year.\ndef odd_Days(N):\n    days = 365\n    for i in range(N):\n        if i % 2 == 0:\n            days -= 1\n    return days\n\n# <func> # Java\n# Write a Java function to calculate the number of odd days in a given year.\ndef odd_Days(N):\n    days = 365\n    for i in range(N):\n        if i % 2 == 0:\n            days -= 1\n    return days\n\n# <func> # JavaScript\n# Write a JavaScript function to calculate the number of odd days in a given year.\nfunction odd_Days(N) {\n    days = 365;\n    for (let i = 0; i < N; i++) {\n        if (i % 2 == 0) {\n            days -= 1;\n        }\n    }\n    return days;\n}\n\n# <func> # Python \n# Write a Python function to calculate the number of odd days in a given year.\ndef odd_Days(N):\n    days = 365\n    for i in range(N):\n        if i % 2 == 0:\n            days -= 1\n    return days\n\n# <func> # C\n# Write a C function to calculate the number of odd days in a given year.\ndef odd_Days(N):\n    days = 365\n    for i in range(N):\n       "], ["\n# <func> # Python \n# Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n    max_length = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if len(list1[i]) > len(list1[j]):\n                max_length = max(max_length, len(list1[i]))\n    return max_length\n\n# <func> # Python \n# Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n    max_length = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if len(list1[i]) > len(list1[j]):\n                max_length = max(max_length, len(list1[i]))\n    return max_length\n\n# <func> # Python \n# Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n    max_length = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if len(list1[i]) > len(list1[j]):\n                max_length = max(max_length, len(list1[i]))\n    return max_length\n\n# <func> # Python \n# Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n    max_length = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if len(list1[i]) > len(list1[j]):\n                max_length = max(max_length, len(list1[i]))\n    return max_length\n\n# <func> # Python \n# Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n    max_length = 0\n    for i in range(len(list1)):\n        for j in range"], ["\n# <func> # Python \n# Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k):\n    if n == 0 or k == 0:\n        return 1\n    if n == 1 and k == 1:\n        return 2\n    if n == 1 and k == 2:\n        return 1\n    if n == 2 and k == 1:\n        return 3\n    if n == 2 and k == 2:\n        return 2\n    if n == 3 and k == 1:\n        return 4\n    if n == 3 and k == 2:\n        return 3\n    if n == 4 and k == 1:\n        return 5\n    if n == 4 and k == 2:\n        return 4\n    if n == 5 and k == 1:\n        return 6\n    if n == 5 and k == 2:\n        return 5\n    if n == 6 and k == 1:\n        return 7\n    if n == 6 and k == 2:\n        return 6\n    return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n\n# Testing"], ["\n# <func> # Python \n# Write a python function to find quotient of two numbers.\ndef find(n,m):\n    return n/m\n"], ["import math\r\n\n# <func> # Python \n# Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n    # Write your code here\n    return w*h/2\n\n# <func> # Java\n# Write a method to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n    # Write your code here\n    return w*h/2\n\n# <func> # C\n# Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n    # Write your code here\n    return w*h/2\n\n# <func> # C++\n# Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n    # Write your code here\n    return w*h/2\n\n# <func> # C#\n# Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n    # Write your code here\n    return w*h/2\n\n# <func> # JavaScript\n# Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n    # Write your code here\n    return w*h/2\n\n# <func> # Python 3\n# Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n    # Write your code here\n    return w*h/2\n\n# <func> # Python 3\n# Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n    # Write your code here\n    return w*h/2\n\n# <func> # C++\n# Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n    # Write your code here\n    return w*h/2\n\n# <func> # C++\n# Write a function to find the third side of a right angled triangle.\ndef otherside_right"], ["\n# <func> # Python \n# Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n\n# <func> # Python \n# Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val\n\n# <func> # Python \n# Write a function to find the average value in a given heterogeneous list.\ndef avg_val(listval):\n    sum_val = 0\n    for val in listval:\n        sum_val += val\n    return sum_val / len(listval)\n\n# <func> # Python \n# Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n\n# <func> # Python \n# Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val\n\n# <func> # Python \n# Write a function to find the average value in a given heterogeneous list.\ndef avg_val(listval):\n    sum_val = 0\n    for val in listval:\n        sum_val += val\n    return sum_val / len(listval)\n\n# <func> # Python \n# Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n           "], ["\n# <func> # Python \n# Write a function to return the sum of all divisors of a number.\ndef sum_div(number):\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n\n# Test the function"], ["\n# <func> # Python \n# Write a python function to count inversions in an array.\ndef get_Inv_Count(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n\n\n# +\n# Write a python function to find the number of inversions in an array.\ndef get_Inv_Count(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n\n\n# -\n\narr = [1,2,3,4,5]\nn = len(arr)"], ["\n# <func> # Python \n# Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n    return [item for sublist in list1 for item in sublist]\n\n# <func> # Java\n# Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n    return [item for sublist in list1 for item in sublist]\n\n# <func> # C\n# Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n    return [item for sublist in list1 for item in sublist]\n\n# <func> # JavaScript\n# Write a function to flatten a given nested list structure.\nfunction flatten_list(list1) {\n    return [...list1].map(item => item);\n}\n\n# <func> # Python \n# Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n    return [item for sublist in list1 for item in sublist]\n\n# <func> # Java\n# Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n    return [item for sublist in list1 for item in sublist]\n\n# <func> # C\n# Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n    return [item for sublist in list1 for item in sublist]\n\n# <func> # JavaScript\n# Write a function to flatten a given nested list structure.\nfunction flatten_list(list1) {\n    return [...list1].map(item => item);\n}\n\n# <func> # Python \n# Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n    return [item for sublist in list1 for item in sublist]\n\n# <func> # Java\n# Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n    return [item for sublist in list1 for item in sublist]\n\n# <func> # C\n# Write a function to flatten a given"], ["\n# <func> # Python \n# Write a function to find the nested list elements which are present in another list.\ndef intersection_nested_lists(l1, l2):\n    # Write your code here\n    return list(set(l1).intersection(l2))\n\n\n# +\n# Write a function to find the nested list elements which are present in another list.\n# Write your code here\n\ndef intersection_nested_lists(l1, l2):\n    # Write your code here\n    return list(set(l1).intersection(l2))\n\n\n# +\n# Write a function to find the nested list elements which are present in another list.\n# Write your code here\n\ndef intersection_nested_lists(l1, l2):\n    # Write your code here\n    return list(set(l1).intersection(l2))\n\n\n# +\n# Write a function to find the nested list elements which are present in another list.\n# Write your code here\n\ndef intersection_nested_lists(l1, l2):\n    # Write your code here\n    return list(set(l1).intersection(l2))\n\n\n# +\n# Write a function to find the nested list elements which are present in another list.\n# Write your code here\n\ndef intersection_nested_lists(l1, l2):\n    # Write your code here\n    return list(set(l1).intersection(l2))\n\n\n# +\n# Write a function to find the nested list elements which are present in another list.\n# Write your code here\n\ndef intersection_nested_lists(l1, l2):\n    # Write your code here\n    return list(set(l1).intersection(l2))\n\n\n# +\n# Write a function to find the nested list elements which are present in another list.\n# Write your code here\n\ndef intersection_nested_lists(l1, l2):\n    # Write your code here\n    return list(set(l1).intersection(l2))\n\n\n# +\n# Write a function to find the nested list elements which are present in another list.\n# Write your code here\n\ndef intersection_nested_lists(l1, l2):\n"], ["from collections import \n# <func> # Python \n# Write a function to calculate the maximum aggregate from the list of tuples.\ndef max_aggregate(stdata):\n    # Your code here\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max_aggregate(stdata)\n    # max"], ["\n# <func> # Python \n# Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        sum = 0\n        for j in range(n):\n            sum += bin(i)[2*j:2*j+2]\n        if sum == sum[::-1]:\n            count += 1\n    return count\n"], ["\n# <func> # Python \n# Write a function to find the depth of a dictionary.\ndef dict_depth(d):\n    return len(d)\n\n# <func> # Python \n# Write a function to find the depth of a list.\ndef list_depth(l):\n    return len(l)\n\n# <func> # Python \n# Write a function to find the depth of a tuple.\ndef tuple_depth(t):\n    return len(t)\n\n# <func> # Python \n# Write a function to find the depth of a string.\ndef string_depth(s):\n    return len(s)\n\n# <func> # Python \n# Write a function to find the depth of a set.\ndef set_depth(s):\n    return len(s)\n\n# <func> # Python \n# Write a function to find the depth of a frozenset.\ndef frozenset_depth(s):\n    return len(s)\n\n# <func> # Python \n# Write a function to find the depth of a dict.\ndef dict_depth(d):\n    return len(d)\n\n# <func> # Python \n# Write a function to find the depth of a list.\ndef list_depth(l):\n    return len(l)\n\n# <func> # Python \n# Write a function to find the depth of a tuple.\ndef tuple_depth(t):\n    return len(t)\n\n# <func> # Python \n# Write a function to find the depth of a string.\ndef string_depth(s):\n    return len(s)\n\n# <func> # Python \n# Write a function to find the depth of a set.\ndef set_depth(s):\n    return len(s)\n\n# <func> # Python \n# Write a function to find the depth of a frozenset.\ndef frozenset_depth(s):\n    return len(s)\n\n# <func> # Python \n# Write a function to find the depth of a dict.\ndef dict_depth(d):\n    return len(d)\n\n# <func> # Python \n# Write a function to find the depth"], ["\n# <func> # Python \n# Write a python function to find the most significant bit number which is also a set bit.\ndef set_Bit_Number(n):\n    # Write your code here\n    if n == 0:\n        return 0\n    else:\n        return 1\n\n# <func> # C\n# Write a C function to find the most significant bit number which is also a set bit.\n# The function should return the number of set bits in the input number.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer.\n# The input number is an unsigned integer"], ["import sys \r\n\n# <func> # Python \n# Write a python function to check whether the count of inversion of two types are same or not.\ndef solve(a,n):\n    count = 0\n    for i in range(n):\n        if a[i] > a[i+1]:\n            count += 1\n    return count\n\n# <func> # C++\n# Write a function to check whether the count of inversion of two types are same or not.\ndef solve(a,n):\n    count = 0\n    for i in range(n):\n        if a[i] > a[i+1]:\n            count += 1\n    return count\n\n# <func> # Java\n# Write a function to check whether the count of inversion of two types are same or not.\ndef solve(a,n):\n    count = 0\n    for i in range(n):\n        if a[i] > a[i+1]:\n            count += 1\n    return count\n\n# <func> # JavaScript\n# Write a function to check whether the count of inversion of two types are same or not.\nfunction solve(a,n) {\n    count = 0\n    for (i = 0; i < n; i++) {\n        if (a[i] > a[i + 1]) {\n            count += 1\n        }\n    }\n    return count\n}\n\n# <func> # Python \n# Write a function to check whether the count of inversion of two types are same or not.\ndef solve(a,n):\n    count = 0\n    for i in range(n):\n        if a[i] > a[i+1]:\n            count += 1\n    return count\n\n# <func> # C++\n# Write a function to check whether the count of inversion of two types are same or not.\ndef solve(a,n):\n    count = 0\n    for i in range(n):\n        if a[i] > a[i+1]:\n            count += 1\n    return count\n\n# <func> # Java\n# Write a function to check whether the count of inversion of two types are same or not"], ["\n# <func> # Python \n# Write a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index):\n    for i in range(ranges):\n        arr[index] = arr[index] + arr[index]\n        arr[index] = arr[index] - arr[index]\n        arr[index] = arr[index] * arr[index]\n        arr[index] = arr[index] / arr[index]\n    for i in range(ranges):\n        arr[index] = arr[index] - arr[index]\n        arr[index] = arr[index] * arr[index]\n        arr[index] = arr[index] / arr[index]\n    for i in range(ranges):\n        arr[index] = arr[index] + arr[index]\n        arr[index] = arr[index] - arr[index]\n        arr[index] = arr[index] * arr[index]\n        arr[index] = arr[index] / arr[index]\n    arr[index] = arr[index] - arr[index]\n    arr[index] = arr[index] * arr[index]\n    arr[index] = arr[index] / arr[index]\n    arr[index] = arr[index] + arr[index]\n    arr[index] = arr[index] - arr[index]\n    arr[index] = arr[index] * arr[index]\n    arr[index] = arr[index] / arr[index]\n    arr[index] = arr[index] + arr[index]\n    arr[index] = arr[index] - arr[index]\n    arr[index] = arr[index] * arr[index]\n    arr[index] = arr[index] / arr[index]\n    arr[index] = arr[index] + arr[index]\n    arr[index] = arr[index] - arr[index]\n    arr[index] = arr[index] * arr[index]\n    arr[index] = arr[index] / arr[index]\n    arr[index] = arr[index] + arr[index]\n    arr[index"], ["import re\r\n\n# <func> # Python \n# Write a function to match two words from a list of words starting with letter 'p'.\ndef start_withp(words):\n    for word in words:\n        if word[0] == 'p':\n            return True\n    return False\n\n# <func> # Python \n# Write a function to check if a word is a palindrome.\ndef is_palindrome(word):\n    return word == word[::-1]\n\n# <func> # Python \n# Write a function to check if a word is a palindrome.\ndef is_palindrome(word):\n    return word == word[::-1]\n\n# <func> # Python \n# Write a function to check if a word is a palindrome.\ndef is_palindrome(word):\n    return word == word[::-1]\n\n# <func> # Python \n# Write a function to check if a word is a palindrome.\ndef is_palindrome(word):\n    return word == word[::-1]\n\n# <func> # Python \n# Write a function to check if a word is a palindrome.\ndef is_palindrome(word):\n    return word == word[::-1]\n\n# <func> # Python \n# Write a function to check if a word is a palindrome.\ndef is_palindrome(word):\n    return word == word[::-1]\n\n# <func> # Python \n# Write a function to check if a word is a palindrome.\ndef is_palindrome(word):\n    return word == word[::-1]\n\n# <func> # Python \n# Write a function to check if a word is a palindrome.\ndef is_palindrome(word):\n    return word == word[::-1]\n\n# <func> # Python \n# Write a function to check if a word is a palindrome.\ndef is_palindrome(word):\n    return word == word[::-1]\n\n# <func> # Python \n# Write a function to check if a word is a palindrome.\ndef is_pal"], ["\n# <func> # Python \n# Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\n    # Write your code here\n    if k > n:\n        return 0\n    if k == 1:\n        return a[index]\n    if index == 0:\n        return max(a[0], k * a[1])\n    if index == n - 1:\n        return max(a[index], k * a[index + 1])\n    return max(max_sum_increasing_subseq(a, n, index - 1, k),\n               max_sum_increasing_subseq(a, n, index + 1, k))\n\n\ndef max_sum_increasing_subseq(a, n, index, k):\n    # Write your code here\n    if k > n:\n        return 0\n    if k == 1:\n        return a[index]\n    if index == 0:\n        return max(a[0], k * a[1])\n    if index == n - 1:\n        return max(a[index], k * a[index + 1])\n    return max(max_sum_increasing_subseq(a, n, index - 1, k),\n               max_sum_increasing_subseq(a, n, index + 1, k))\n\n\ndef max_sum_increasing_subseq(a, n, index, k):\n    # Write your code here\n    if k > n:\n        return 0\n    if k == 1:\n        return a[index]\n    if index == 0:\n        return max(a[0], k * a[1])\n    if index == n - 1:\n        return max(a[index], k * a[index + 1])\n    return max(max_sum_increasing_subseq(a, n, index - 1, k),\n               max_sum_increasing_"], ["from copy import deepcopy\r\n\n# <func> # Python \n# Write a function to get a colon of a tuple.\ndef colon_tuplex(tuplex,m,n):\n    return (m,n)\n\n# <func> # Python \n# Write a function to get a colon of a list.\ndef colon_list(list,m,n):\n    return (m,n)\n\n# <func> # Python \n# Write a function to get a colon of a set.\ndef colon_set(set,m,n):\n    return (m,n)\n\n# <func> # Python \n# Write a function to get a colon of a dictionary.\ndef colon_dict(dict,m,n):\n    return (m,n)\n\n# <func> # Python \n# Write a function to get a colon of a string.\ndef colon_str(str,m,n):\n    return (m,n)\n\n# <func> # Python \n# Write a function to get a colon of a tuple of a string.\ndef colon_tuple_str(tuple,str,m,n):\n    return (m,n)\n\n# <func> # Python \n# Write a function to get a colon of a tuple of a list.\ndef colon_tuple_list(tuple,list,m,n):\n    return (m,n)\n\n# <func> # Python \n# Write a function to get a colon of a tuple of a set.\ndef colon_tuple_set(tuple,set,m,n):\n    return (m,n)\n\n# <func> # Python \n# Write a function to get a colon of a tuple of a dictionary.\ndef colon_tuple_dict(tuple,dict,m,n):\n    return (m,n)\n\n# <func> # Python \n# Write a function to get a colon of a tuple of a string.\ndef colon_tuple_str_str(tuple,str,str,m,n):\n    return (m,n)\n\n# <func> # Python \n# Write a function to get a colon of a tuple of a tuple.\ndef colon_tuple_tuple(tuple,tuple,m,n):\n    return"], ["\n# <func> # Python \n# Write a function to find the specified number of largest products from two given lists.\ndef large_product(nums1, nums2, N):\n    # Your code here\n    # return the largest product\n    return max(nums1[i] * nums2[i] for i in range(N))\n\n# Test cases"], ["\n# <func> # Python \n# Write a python function to find the maximum of two numbers.\ndef maximum(a,b):\n    if a > b:\n        return a\n    else:\n        return b\n\n# <func> # Python \n# Write a python function to find the minimum of two numbers.\ndef minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b\n\n# <func> # Python \n# Write a python function to find the average of two numbers.\ndef average(a,b):\n    return (a+b)/2\n\n# <func> # Python \n# Write a python function to find the sum of two numbers.\ndef sum(a,b):\n    return a+b\n\n# <func> # Python \n# Write a python function to find the product of two numbers.\ndef product(a,b):\n    return a*b\n\n# <func> # Python \n# Write a python function to find the square of a number.\ndef square(a):\n    return a*a\n\n# <func> # Python \n# Write a python function to find the cube of a number.\ndef cube(a):\n    return a*a*a\n\n# <func> # Python \n# Write a python function to find the fourth root of a number.\ndef fourth_root(a):\n    return a**(1/4)\n\n# <func> # Python \n# Write a python function to find the fifth root of a number.\ndef fifth_root(a):\n    return a**(1/5)\n\n# <func> # Python \n# Write a python function to find the square root of a number.\ndef square_root(a):\n    return a**(1/2)\n\n# <func> # Python \n# Write a python function to find the cube root of a number.\ndef cube_root(a):\n    return a**(1/3)\n\n# <func> # Python \n# Write a python function to find the fourth root of a number.\ndef fourth_root(a):\n    return a**(1/4)\n\n# <func> # Python \n# Write a python function"], ["\n# <func> # Python \n# Write a function to convert a given string to a tuple.\ndef string_to_tuple(str1):\n    return tuple(str1.split())\n\n# <func> # Python \n# Write a function to convert a given string to a list.\ndef string_to_list(str1):\n    return list(str1.split())\n\n# <func> # Python \n# Write a function to convert a given string to a dictionary.\ndef string_to_dict(str1):\n    return dict(zip(str1.split(), range(len(str1.split()))))\n\n# <func> # Python \n# Write a function to convert a given string to a set.\ndef string_to_set(str1):\n    return set(str1.split())\n\n# <func> # Python \n# Write a function to convert a given string to a frozenset.\ndef string_to_frozenset(str1):\n    return frozenset(str1.split())\n\n# <func> # Python \n# Write a function to convert a given string to a tuple of tuples.\ndef string_to_tuple_of_tuples(str1):\n    return tuple(zip(str1.split(), range(len(str1.split()))))\n\n# <func> # Python \n# Write a function to convert a given string to a list of lists.\ndef string_to_list_of_lists(str1):\n    return list(zip(str1.split(), range(len(str1.split()))))\n\n# <func> # Python \n# Write a function to convert a given string to a dictionary of dictionaries.\ndef string_to_dict_of_dicts(str1):\n    return dict(zip(str1.split(), range(len(str1.split()))))\n\n# <func> # Python \n# Write a function to convert a given string to a set of sets.\ndef string_to_set_of_sets(str1):\n    return set(zip(str1.split(), range(len(str1.split()))))\n\n# <func> # Python \n# Write a function to convert a given"], ["\n# <func> # Python \n# Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n):\n    # Write your code here\n    return 1\n\n# <func> # Python \n# Write a python function to set the right most unset bit.\ndef set_right_most_unset_bit(n):\n    # Write your code here\n    return 1\n\n# <func> # Python \n# Write a python function to set the middle most unset bit.\ndef set_middle_most_unset_bit(n):\n    # Write your code here\n    return 1\n\n# <func> # Python \n# Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n):\n    # Write your code here\n    return 1\n\n# <func> # Python \n# Write a python function to set the right most unset bit.\ndef set_right_most_unset_bit(n):\n    # Write your code here\n    return 1\n\n# <func> # Python \n# Write a python function to set the middle most unset bit.\ndef set_middle_most_unset_bit(n):\n    # Write your code here\n    return 1\n\n# <func> # Python \n# Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n):\n    # Write your code here\n    return 1\n\n# <func> # Python \n# Write a python function to set the right most unset bit.\ndef set_right_most_unset_bit(n):\n    # Write your code here\n    return 1\n\n# <func> # Python \n# Write a python function to set the middle most unset bit.\ndef set_middle_most_unset_bit(n):\n    # Write your code here\n    return 1\n\n# <func> # Python \n# Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n):\n    # Write your code here\n    return 1\n"], ["import math\r\n\n# <func> # Python \n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    return (1/3) * pi * r**2 * h\n\n# <func> # Java\n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    return (1/3) * pi * r**2 * h\n\n# <func> # C\n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    return (1/3) * pi * r**2 * h\n\n# <func> # C++\n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    return (1/3) * pi * r**2 * h\n\n# <func> # C#\n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    return (1/3) * pi * r**2 * h\n\n# <func> # F#\n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    return (1/3) * pi * r**2 * h\n\n# <func> # Go\n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    return (1/3) * pi * r**2 * h\n\n# <func> # Haskell\n# Write a function to find the volume of a cone.\nvolume_cone :: Double -> Double -> Double\nvolume_cone r h = (1/3) * pi * r**2 * h\n\n# <func> # Ipython\n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    return (1/3) * pi * r**2 * h\n\n# <func> # Julia\n# Write a function to find the volume of a cone.\nfunction volume_cone(r,h)\n    return (1/3) * pi * r**2 * h\nend\n\n# <func> # MATLAB\n# Write a function"], ["\n# <func> # Python \n# Write a python function to print positive numbers in a list.\ndef pos_nos(list1):\n    for i in list1:\n        if i > 0:\n            print(i, end = \" \")\n\n# +\n# Write a python function to print positive numbers in a list.\n# def pos_nos(list1):\n#     for i in list1:\n#         if i > 0:\n#             print(i, end = \" \")\n\n# +\n# Write a python function to print positive numbers in a list.\n# def pos_nos(list1):\n#     for i in list1:\n#         if i > 0:\n#             print(i, end = \" \")\n\n# +\n# Write a python function to print positive numbers in a list.\n# def pos_nos(list1):\n#     for i in list1:\n#         if i > 0:\n#             print(i, end = \" \")\n\n# +\n# Write a python function to print positive numbers in a list.\n# def pos_nos(list1):\n#     for i in list1:\n#         if i > 0:\n#             print(i, end = \" \")\n\n# +\n# Write a python function to print positive numbers in a list.\n# def pos_nos(list1):\n#     for i in list1:\n#         if i > 0:\n#             print(i, end = \" \")\n\n# +\n# Write a python function to print positive numbers in a list.\n# def pos_nos(list1):\n#     for i in list1:\n#         if i > 0:\n#             print(i, end = \" \")\n\n# +\n# Write a python function to print positive numbers in a list.\n# def pos_nos(list1):\n#     for i in list1:\n#         if i > 0:\n#             print(i, end = \" \")\n\n# +\n# Write a python function to print positive numbers in a list.\n# def pos_nos(list1):\n#     for i in list1:\n#         if i > 0:\n#             print(i, end"], ["\n# <func> # Python \n# Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n):\n    max_sum = 0\n    for i in range(n):\n        for j in range(n):\n            max_sum = max(max_sum, grid[i][j] + max_sum(grid, i+1, j+1, n-1))\n    return max_sum\n\n# <func> # Python \n# Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n):\n    max_sum = 0\n    for i in range(n):\n        for j in range(n):\n            max_sum = max(max_sum, grid[i][j] + max_sum(grid, i+1, j+1, n-1))\n    return max_sum\n\n# <func> # Python \n# Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n):\n    max_sum = 0\n    for i in range(n):\n        for j in range(n):\n            max_sum = max(max_sum, grid[i][j] + max_sum(grid, i+1, j+1, n-1))\n    return max_sum\n\n# <func> # Python \n# Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n):\n    max_sum = 0\n    for i in range(n):\n        for j in range(n):\n            max_sum = max(max_sum, grid[i][j] + max_sum(grid, i+1, j+1, n-1))\n    return max_sum\n\n# <func> # Python \n#"], ["\n# <func> # Python \n# Write a python function to find the first maximum length of even word.\ndef find_Max_Len_Even(str):\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code"], ["\n# <func> # Python \n# Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence(A, x):\n    i = 0\n    while i < len(A) and A[i] != x:\n        i += 1\n    return i\n\n# <func> # Python \n# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(A, x):\n    i = 0\n    while i < len(A) and A[i] != x:\n        i += 1\n    return i\n\n# <func> # Python \n# Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence_2(A, x):\n    i = 0\n    while i < len(A) and A[i] != x:\n        i += 1\n    return i\n\n# <func> # Python \n# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence_2(A, x):\n    i = 0\n    while i < len(A) and A[i] != x:\n        i += 1\n    return i\n\n# <func> # Python \n# Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence_3(A, x):\n    i = 0\n    while i < len(A) and A[i] != x:\n        i += 1\n    return i\n\n# <func> # Python \n# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence_3(A, x):\n    i = 0\n    while i < len(A) and A[i] != x:\n        i += 1\n    return i\n\n# <func> # Python \n# Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence_4"], ["from itertools import groupby\r\n\n# <func> # Python \n# Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\n    # Write your code here\n    result = []\n    for i in alist:\n        if i == 1:\n            result.append(0)\n        else:\n            result.append(i)\n    return result\n\n# <func> # Python \n# Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\n    # Write your code here\n    result = []\n    for i in alist:\n        if i == 1:\n            result.append(0)\n        else:\n            result.append(i)\n    return result\n\n# <func> # Python \n# Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\n    # Write your code here\n    result = []\n    for i in alist:\n        if i == 1:\n            result.append(0)\n        else:\n            result.append(i)\n    return result\n\n# <func> # Python \n# Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\n    # Write your code here\n    result = []\n    for i in alist:\n        if i == 1:\n            result.append(0)\n        else:\n            result.append(i)\n    return result\n\n# <func> # Python \n# Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\n    # Write your code here\n    result = []\n    for i in alist:\n        if i == 1:\n            result.append(0)\n        else:\n            result.append(i)\n    return result\n\n# <func> # Python \n# Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\n    # Write your code here\n    result = []\n    for i in alist:\n        if i == 1:\n            result.append("], ["\n# <func> # Python \n# Write a python function to find the maximum volume of a cuboid with given sum of sides.\ndef max_volume (s):\n    # Your code here\n    return (s[0] * s[1] * s[2]) / 6\n\n# Test your function"], ["import re\r\n\n# <func> # Python \n# Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\n    # regex pattern\n    pattern = r'^[a-z]{5}$'\n    # find all matches\n    matches = re.findall(pattern, text)\n    # return the longest match\n    return max(matches, key=len)\n\n# <func> # Java\n# Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\n    # regex pattern\n    pattern = r'^[a-z]{5}$'\n    # find all matches\n    matches = text.split(pattern)\n    # return the longest match\n    return matches[0]\n\n# <func> # C\n# Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\n    # regex pattern\n    pattern = r'^[a-z]{5}$'\n    # find all matches\n    matches = text.split(pattern)\n    # return the longest match\n    return matches[0]\n\n# <func> # C++\n# Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\n    # regex pattern\n    pattern = r'^[a-z]{5}$'\n    # find all matches\n    matches = text.split(pattern)\n    # return the longest match\n    return matches[0]\n\n# <func> # C#\n# Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\n    # regex pattern\n    pattern = r'^[a-z]{5}$'\n    # find all matches\n    matches = text.split(pattern)\n    # return the longest match\n    return matches[0]\n\n# <func> # Go\n# Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\n    # regex pattern\n    pattern = r'^[a-z]{5}$'"], ["\n# <func> # Python \n# Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\ndef sum_difference(n):\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        sum_of_squares += i**2\n    return sum_of_squares - sum_of_squares**2\n"], ["\n# <func> # Python \n# Write a function to find the demlo number for the given number.\ndef find_demlo(s):\n    if s == 0:\n        return 0\n    if s == 1:\n        return 1\n    if s == 2:\n        return 2\n    if s == 3:\n        return 3\n    if s == 4:\n        return 4\n    if s == 5:\n        return 5\n    if s == 6:\n        return 6\n    if s == 7:\n        return 7\n    if s == 8:\n        return 8\n    if s == 9:\n        return 9\n    if s == 10:\n        return 10\n    if s == 11:\n        return 11\n    if s == 12:\n        return 12\n    if s == 13:\n        return 13\n    if s == 14:\n        return 14\n    if s == 15:\n        return 15\n    if s == 16:\n        return 16\n    if s == 17:\n        return 17\n    if s == 18:\n        return 18\n    if s == 19:\n        return 19\n    if s == 20:\n        return 20\n    if s == 21:\n        return 21\n    if s == 22:\n        return 22\n    if s == 23:\n        return 23\n    if s == 24:\n        return 24\n    if s == 25:\n        return 25\n    if s == 26:\n        return 26\n    if s == 27:\n        return 27\n    if s == 28:\n        return 28\n    if s == 29:\n        return 29\n    if s == 30:\n        return 30\n    if s == 31:\n        return 31\n    if s == 32:\n        return 32\n   "], ["\n# <func> # Python \n# Write a function to find all index positions of the minimum values in a given list.\ndef position_min(list1):\n    min_index = 0\n    min_value = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < min_value:\n            min_index = i\n            min_value = list1[i]\n    return min_index\n\n# <func> # Python \n# Write a function to find all index positions of the maximum values in a given list.\ndef position_max(list1):\n    max_index = 0\n    max_value = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] > max_value:\n            max_index = i\n            max_value = list1[i]\n    return max_index\n\n# <func> # Python \n# Write a function to find all index positions of the maximum and minimum values in a given list.\ndef position_min_max(list1):\n    min_index = 0\n    max_index = 0\n    min_value = list1[0]\n    max_value = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < min_value:\n            min_index = i\n            min_value = list1[i]\n        elif list1[i] > max_value:\n            max_index = i\n            max_value = list1[i]\n    return min_index, max_index\n\n# <func> # Python \n# Write a function to find all index positions of the maximum and minimum values in a given list.\ndef position_min_max_all(list1):\n    min_index = 0\n    max_index = 0\n    min_value = list1[0]\n    max_value = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < min_value:\n            min_index = i\n            min_value = list1[i]\n        elif list1["], ["\n# <func> # Python \n# Write a function to re-arrange the given array in alternating positive and negative items.\ndef right_rotate(arr, n, out_of_place, cur):\n    if n == 0:\n        return\n    if cur == 0:\n        arr[n] = arr[n - 1]\n        return\n    if cur == n - 1:\n        arr[n] = arr[n - 1]\n        return\n    if out_of_place:\n        arr[n] = arr[n - 1]\n        return\n    arr[n] = arr[cur]\n    right_rotate(arr, n - 1, out_of_place, cur - 1)\n    right_rotate(arr, n - 1, out_of_place, cur + 1)\n\n\n# +\n# %%time\n\ndef right_rotate(arr, n, out_of_place, cur):\n    if n == 0:\n        return\n    if cur == 0:\n        arr[n] = arr[n - 1]\n        return\n    if cur == n - 1:\n        arr[n] = arr[n - 1]\n        return\n    if out_of_place:\n        arr[n] = arr[n - 1]\n        return\n    arr[n] = arr[cur]\n    right_rotate(arr, n - 1, out_of_place, cur - 1)\n    right_rotate(arr, n - 1, out_of_place, cur + 1)\n\n\n# -\n\nright_rotate([1, 2, 3, 4, 5], 5, False, 0)\n\n\n# +\n# %%time\n\ndef right_rotate(arr, n, out_of_place, cur):\n    if n == 0:\n        return\n    if cur == 0:\n        arr[n] = arr[n - 1]\n        return\n    if cur == n - 1:\n        arr[n] = arr[n - 1]\n        return\n    if out_of_place:\n        arr[n]"], ["\n# <func> # Python \n# Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n    # Write your code here\n    return sum(test_tuple)\n\n# <func> # Python \n# Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n    # Write your code here\n    return sum(test_tuple)\n\n# <func> # Python \n# Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n    # Write your code here\n    return sum(test_tuple)\n\n# <func> # Python \n# Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n    # Write your code here\n    return sum(test_tuple)\n\n# <func> # Python \n# Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n    # Write your code here\n    return sum(test_tuple)\n\n# <func> # Python \n# Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n    # Write your code here\n    return sum(test_tuple)\n\n# <func> # Python \n# Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n    # Write your code here\n    return sum(test_tuple)\n\n# <func> # Python \n# Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n    # Write your code here\n    return sum(test_tuple)\n\n# <func> # Python \n# Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n    # Write your code here\n    return sum(test_tuple)\n\n# <func> # Python \n# Write a function to extract"], ["\n# <func> # Python \n# Write a python function to find the minimum number of squares whose sum is equal to a given number.\ndef get_Min_Squares(n):\n    # Your code here\n    return n\n\n# <func> # Java\n# Write a Java function to find the minimum number of squares whose sum is equal to a given number.\ndef get_Min_Squares(n):\n    # Your code here\n    return n\n\n# <func> # C\n# Write a C function to find the minimum number of squares whose sum is equal to a given number.\n# Your code here\n\n# <func> # C++\n# Write a C++ function to find the minimum number of squares whose sum is equal to a given number.\n# Your code here\n\n# <func> # C#\n# Write a C# function to find the minimum number of squares whose sum is equal to a given number.\n# Your code here\n\n# <func> # Go\n# Write a Go function to find the minimum number of squares whose sum is equal to a given number.\n# Your code here\n\n# <func> # Haskell\n# Write a Haskell function to find the minimum number of squares whose sum is equal to a given number.\n# Your code here\n\n# <func> # JavaScript\n# Write a JavaScript function to find the minimum number of squares whose sum is equal to a given number.\n# Your code here\n\n# <func> # Python\n# Write a Python function to find the minimum number of squares whose sum is equal to a given number.\n# Your code here\n\n# <func> # R\n# Write a R function to find the minimum number of squares whose sum is equal to a given number.\n# Your code here\n\n# <func> # Ruby\n# Write a Ruby function to find the minimum number of squares whose sum is equal to a given number.\n# Your code here\n\n# <func> # Scala\n# Write a Scala function to find the minimum number of squares whose sum is equal to a given number.\n# Your code here\n\n# <func> # TypeScript\n# Write a TypeScript function to find the minimum number of squares whose sum is equal to a given number.\n# Your code here\n\n# <func> # Visual Basic .NET\n#"], ["from collections import \n# <func> # Python \n# Write a function to get the word with most number of occurrences in the given strings list.\ndef most_occurrences(test_list):\n    # Write your code here\n    return max(test_list, key=lambda x: test_list.count(x))\n\n\n# +\n# Write a function to get the word with most number of occurrences in the given strings list.\ndef most_occurrences(test_list):\n    # Write your code here\n    return max(test_list, key=lambda x: test_list.count(x))\n\n\n# -\n\n# # 10. Write a function to get the word with most number of occurrences in the given strings list.\n#\n# # 11. Write a function to get the word with most number of occurrences in the given strings list.\n#\n# # 12. Write a function to get the word with most number of occurrences in the given strings list.\n#\n# # 13. Write a function to get the word with most number of occurrences in the given strings list.\n#\n# # 14. Write a function to get the word with most number of occurrences in the given strings list.\n#\n# # 15. Write a function to get the word with most number of occurrences in the given strings list.\n#\n# # 16. Write a function to get the word with most number of occurrences in the given strings list.\n#\n# # 17. Write a function to get the word with most number of occurrences in the given strings list.\n#\n# # 18. Write a function to get the word with most number of occurrences in the given strings list.\n#\n# # 19. Write a function to get the word with most number of occurrences in the given strings list.\n#\n# # 20. Write a function to get the word with most number of occurrences in the given strings list.\n#\n# # 21. Write a function to get the word with most number of occurrences in the given strings list.\n#\n# # 22. Write a function to get the word with most number of occurrences in the given strings list.\n#"], ["\n# <func> # Python \n# Write a function to print check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\n    if x == y and y == z:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\n    if x == y or x == z or y == z:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to print check if the triangle is scalene or not.\ndef check_scalene(x,y,z):\n    if x == y or x == z or y == z:\n        return False\n    else:\n        return True\n\n# <func> # Python \n# Write a function to print check if the triangle is right-angled or not.\ndef check_right_angled(x,y,z):\n    if x == y or x == z or y == z:\n        return False\n    else:\n        return True\n\n# <func> # Python \n# Write a function to print check if the triangle is obtuse or not.\ndef check_obtuse(x,y,z):\n    if x == y or x == z or y == z:\n        return False\n    else:\n        return True\n\n# <func> # Python \n# Write a function to print check if the triangle is acute or not.\ndef check_acute(x,y,z):\n    if x == y or x == z or y == z:\n        return False\n    else:\n        return True\n\n# <func> # Python \n# Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\n    if x == y or x == z or y == z:\n        return False\n    else:\n        return True\n\n# <func> # Python \n# Write a function to print check if the triangle is scalene or not.\ndef check_scalene(x,y"], ["\n# <func> # Python \n# Write a function to rotate a given list by specified number of items to the left direction.\ndef rotate_left(list1,m,n):\n    list1 = list1[::-1]\n    return list1\n\n# <func> # Python \n# Write a function to rotate a given list by specified number of items to the right direction.\ndef rotate_right(list1,m,n):\n    list1 = list1[::-1]\n    return list1\n\n# <func> # Python \n# Write a function to rotate a given list by specified number of items to the left and right directions.\ndef rotate_both(list1,m,n):\n    list1 = list1[::-1]\n    list1 = list1[::-1]\n    return list1\n\n# <func> # Python \n# Write a function to rotate a given list by specified number of items to the left and right directions.\ndef rotate_both_both(list1,m,n):\n    list1 = list1[::-1]\n    list1 = list1[::-1]\n    return list1\n\n# <func> # Python \n# Write a function to rotate a given list by specified number of items to the left and right directions.\ndef rotate_both_both_both(list1,m,n):\n    list1 = list1[::-1]\n    list1 = list1[::-1]\n    return list1\n\n# <func> # Python \n# Write a function to rotate a given list by specified number of items to the left and right directions.\ndef rotate_both_both_both_both(list1,m,n):\n    list1 = list1[::-1]\n    list1 = list1[::-1]\n    return list1\n\n# <func> # Python \n# Write a function to rotate a given list by specified number of items to the left and right directions.\ndef rotate_both_both_both_both_both(list1,m,n):\n    list1 = list1[::-1]\n    list1 = list1[::-1]\n    return list1\n\n# <func> # Python"], ["\n# <func> # Python \n# Write a python function to count negative numbers in a list.\ndef neg_count(list):\n    count = 0\n    for i in list:\n        if i < 0:\n            count += 1\n    return count\n"], ["import re\r\n\n# <func> # Python \n# Write a function to find all three, four, five characters long words in the given string by using regex.\ndef find_char(text):\n    text = text.replace(' ', '')\n    text = text.replace('-', '')\n    text = text.replace('_', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    text = text.replace('[', '')\n    text = text.replace(']', '')\n    text = text.replace('{', '')\n    text = text.replace('}', '')\n    text = text.replace(':', '')\n    text = text.replace(';', '')\n    text = text.replace('=', '')\n    text = text.replace('+', '')\n    text = text.replace('-', '')\n    text = text.replace('*', '')\n    text = text.replace('+', '')\n    text = text.replace('-', '')\n    text = text.replace('*', '')\n    text = text.replace('+', '')\n    text = text.replace('-', '')\n    text = text.replace('*', '')\n    text = text.replace('+', '')\n    text = text.replace('-', '')\n    text = text.replace('*', '')\n    text = text.replace('+', '')\n    text = text.replace('-', '')\n    text = text.replace('*', '')\n    text = text.replace('+', '')\n    text = text.replace('-', '')\n    text = text.replace('*', '')\n    text = text.replace('+', '')\n    text = text.replace('-', '')\n    text = text.replace('*', '')\n    text = text.replace('+', '')\n    text = text.replace('-', '')\n    text = text.replace('*', '')\n    text = text.replace('+', '')\n    text = text.replace('-', '')\n    text = text.replace('*', '')\n    text = text.replace('+', '')\n    text = text.replace('-', '')\n    text = text.replace('*', '')\n    text = text.replace"], ["\n# <func> # Python \n# Write a python function to count unset bits of a given number.\ndef count_unset_bits(n):\n    # Your code here\n    return 0\n\n# <func> # Java\n# Write a Java function to count unset bits of a given number.\ndef count_unset_bits(n):\n    # Your code here\n    return 0\n\n# <func> # C\n# Write a C function to count unset bits of a given number.\ndef count_unset_bits(n):\n    # Your code here\n    return 0\n\n# <func> # C++\n# Write a C++ function to count unset bits of a given number.\ndef count_unset_bits(n):\n    # Your code here\n    return 0\n\n# <func> # JavaScript\n# Write a JavaScript function to count unset bits of a given number.\nfunction count_unset_bits(n) {\n    // Your code here\n    return 0\n}\n\n# <func> # R\n# Write a R function to count unset bits of a given number.\ncount_unset_bits <- function(n) {\n    # Your code here\n    return 0\n}\n\n# <func> # Julia\n# Write a Julia function to count unset bits of a given number.\nfunction count_unset_bits(n)\n    # Your code here\n    return 0\nend\n\n# <func> # Python \n# Write a Python function to count unset bits of a given number.\ndef count_unset_bits(n):\n    # Your code here\n    return 0\n\n# <func> # C\n# Write a C function to count unset bits of a given number.\ndef count_unset_bits(n):\n    # Your code here\n    return 0\n\n# <func> # C++\n# Write a C++ function to count unset bits of a given number.\ndef count_unset_bits(n):\n    # Your code here\n    return 0\n\n# <func> # JavaScript\n# Write a JavaScript function to count unset bits of a given number.\nfunction count_unset_bits(n) {"], ["\n# <func> # Python \n# Write a function to count character frequency of a given string.\ndef char_frequency(str1):\n    # Your code here\n    freq = {}\n    for i in str1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\n\n# +\n# Write a function to count character frequency of a given string.\n# Your code here\n\ndef char_frequency(str1):\n    freq = {}\n    for i in str1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\n\n# +\n# Write a function to count character frequency of a given string.\n# Your code here\n\ndef char_frequency(str1):\n    freq = {}\n    for i in str1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\n\n# +\n# Write a function to count character frequency of a given string.\n# Your code here\n\ndef char_frequency(str1):\n    freq = {}\n    for i in str1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\n\n# +\n# Write a function to count character frequency of a given string.\n# Your code here\n\ndef char_frequency(str1):\n    freq = {}\n    for i in str1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\n\n# +\n# Write a function to count character frequency of a given string.\n# Your code here\n\ndef char_frequency(str1):\n    freq = {}\n    for i in str1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i"], ["\n# <func> # Python \n# Write a python function to sort a list according to the second element in sublist.\ndef Sort(sub_li):\n    sub_li.sort(key=lambda x: x[1])\n    return sub_li\n\n# <func> # Python \n# Write a python function to sort a list according to the first element in sublist.\ndef Sort(sub_li):\n    sub_li.sort(key=lambda x: x[0])\n    return sub_li\n\n# <func> # Python \n# Write a python function to sort a list according to the third element in sublist.\ndef Sort(sub_li):\n    sub_li.sort(key=lambda x: x[2])\n    return sub_li\n\n# <func> # Python \n# Write a python function to sort a list according to the fourth element in sublist.\ndef Sort(sub_li):\n    sub_li.sort(key=lambda x: x[3])\n    return sub_li\n\n# <func> # Python \n# Write a python function to sort a list according to the fifth element in sublist.\ndef Sort(sub_li):\n    sub_li.sort(key=lambda x: x[4])\n    return sub_li\n\n# <func> # Python \n# Write a python function to sort a list according to the sixth element in sublist.\ndef Sort(sub_li):\n    sub_li.sort(key=lambda x: x[5])\n    return sub_li\n\n# <func> # Python \n# Write a python function to sort a list according to the seventh element in sublist.\ndef Sort(sub_li):\n    sub_li.sort(key=lambda x: x[6])\n    return sub_li\n\n# <func> # Python \n# Write a python function to sort a list according to the eighth element in sublist.\ndef Sort(sub_li):\n    sub_li.sort(key=lambda x: x[7])\n    return sub_li\n\n# <func> # Python \n# Write a python function to sort a list according to the ninth element in sublist.\ndef Sort(sub_li):"], ["\n# <func> # Python \n# Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):\n    if a+b>c and a+c>b and b+c>"], ["\n# <func> # Python \n# Write a function to find the sum of arithmetic progression.\ndef ap_sum(a,n,d):\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    return sum\n\n# Write a function to find the sum of geometric progression.\ndef gp_sum(a,n,d):\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    return sum\n\n# Write a function to find the sum of harmonic progression.\ndef hp_sum(a,n,d):\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    return sum\n\n# Write a function to find the sum of geometric progression.\ndef gp_sum(a,n,d):\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    return sum\n\n# Write a function to find the sum of harmonic progression.\ndef hp_sum(a,n,d):\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    return sum\n\n# Write a function to find the sum of arithmetic progression.\ndef ap_sum(a,n,d):\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    return sum\n\n# Write a function to find the sum of geometric progression.\ndef gp_sum(a,n,d):\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    return sum\n\n# Write a function to find the sum of harmonic progression.\ndef hp_sum(a,n,d):\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    return sum\n\n# Write a function to find the sum of arithmetic progression.\ndef ap_sum(a,n,d):\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    return sum\n\n# Write a function to find"], ["\n# <func> # Python \n# Write a function to check whether the given month name contains 28 days or not.\ndef check_monthnum(monthname1):\n    monthnum = 0\n    for i in range(len(monthname1)):\n        if i == 0:\n            monthnum = monthnum + int(monthname1[i])\n        else:\n            if int(monthname1[i]) == 1:\n                monthnum = monthnum + 1\n            else:\n                monthnum = monthnum + 2\n    if monthnum == 28:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check whether the given year is a leap year or not.\ndef check_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check whether the given year is a leap year or not.\ndef check_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check whether the given year is a leap year or not.\ndef check_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check whether the given year is a leap year or not.\ndef check_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0"], ["import re\r\n\n# <func> # Python \n# Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n    # TODO: Write your code here\n    return text\n\n# <func> # Java\n# Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n    # TODO: Write your code here\n    return text\n\n# <func> # C\n# Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n    # TODO: Write your code here\n    return text\n\n# <func> # C++\n# Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n    # TODO: Write your code here\n    return text\n\n# <func> # C#\n# Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n    # TODO: Write your code here\n    return text\n\n# <func> # Go\n# Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n    # TODO: Write your code here\n    return text\n\n# <func> # Haskell\n# Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n    # TODO: Write your code here\n    return text\n\n# <func> # JavaScript\n# Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n    # TODO: Write your code here\n    return text\n\n# <func> # Kotlin\n# Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n    # TODO: Write your code here\n    return text\n\n# <func> # Lua\n# Write a function that matches a word at the end of a string, with"], ["\n# <func> # Python \n# Write a python function to count the number of substrings with same first and last characters.\ndef check_Equality(s):\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        return 2\n    if s[0] == s[-1]:\n        return 3\n    return 0\n\n\n# +\n# Write a python function to count the number of substrings with same first and last characters.\n\n# +\n# Write a python function to count the number of substrings with same first and last characters.\n\n# +\n# Write a python function to count the number of substrings with same first and last characters.\n\n# +\n# Write a python function to count the number of substrings with same first and last characters.\n\n# +\n# Write a python function to count the number of substrings with same first and last characters.\n\n# +\n# Write a python function to count the number of substrings with same first and last characters.\n\n# +\n# Write a python function to count the number of substrings with same first and last characters.\n\n# +\n# Write a python function to count the number of substrings with same first and last characters.\n\n# +\n# Write a python function to count the number of substrings with same first and last characters.\n\n# +\n# Write a python function to count the number of substrings with same first and last characters.\n\n# +\n# Write a python function to count the number of substrings with same first and last characters.\n\n# +\n# Write a python function to count the number of substrings with same first and last characters.\n\n# +\n# Write a python function to count the number of substrings with same first and last characters.\n\n# +\n# Write a python function to count the number of substrings with same first and last characters.\n\n# +\n# Write a python function to count the number of substrings with same first and last characters.\n\n# +\n# Write a python function to count the number of substrings with same first and last characters.\n\n# +\n# Write a python function to count the number of substrings with"], ["\n# <func> # Python \n# Write a python function to find the maximum occuring divisor in an interval.\ndef find_Divisor(x,y):\n    max_divisor = 0\n    for i in range(x,y+1):\n        if i%x == 0 and i%y == 0:\n            max_divisor = max(max_divisor,i)\n    return max_divisor\n\n# <func> # Python \n# Write a python function to find the maximum sum of a subarray of a given array.\ndef find_MaxSum(arr):\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] > max_sum:\n                max_sum = arr[i] + arr[j]\n    return max_sum\n\n# <func> # Python \n# Write a python function to find the maximum sum of a subarray of a given array.\ndef find_MaxSum(arr):\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] > max_sum:\n                max_sum = arr[i] + arr[j]\n    return max_sum\n\n# <func> # Python \n# Write a python function to find the maximum sum of a subarray of a given array.\ndef find_MaxSum(arr):\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] > max_sum:\n                max_sum = arr[i] + arr[j]\n    return max_sum\n\n# <func> # Python \n# Write a python function to find the maximum sum of a subarray of a given array.\ndef find_MaxSum(arr):\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr"], ["\n# <func> # Python \n# Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_smallest_nums(lst):\n    sum_of_three_smallest_nums = 0\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            lst[i] = 0\n        else:\n            lst[i] = lst[i]\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            lst[i] = 0\n        else:\n            lst[i] = lst[i]\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            lst[i] = 0\n        else:\n            lst[i] = lst[i]\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            lst[i] = 0\n        else:\n            lst[i] = lst[i]\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            lst[i] = 0\n        else:\n            lst[i] = lst[i]\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            lst[i] = 0\n        else:\n            lst[i] = lst[i]\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            lst[i] = 0\n        else:\n            lst[i] = lst[i]\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            lst[i] = 0\n        else:\n            lst[i] = lst[i]\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            lst[i] = 0\n        else:\n            lst[i] = lst[i]\n    for i in range(len(lst)):\n        if lst[i] < 0:\n            lst[i] = 0\n        else:"], ["\n# <func> # Python \n# Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n    return tuple(sorted(s))\n\n# <func> # Python \n# Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n    return tuple(sorted(s))\n\n# <func> # Python \n# Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n    return tuple(sorted(s))\n\n# <func> # Python \n# Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n    return tuple(sorted(s))\n\n# <func> # Python \n# Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n    return tuple(sorted(s))\n\n# <func> # Python \n# Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n    return tuple(sorted(s))\n\n# <func> # Python \n# Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n    return tuple(sorted(s))\n\n# <func> # Python \n# Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n    return tuple(sorted(s))\n\n# <func> # Python \n# Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n    return tuple(sorted(s))\n\n# <func> # Python \n# Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n    return tuple(sorted(s))\n\n# <func> # Python \n# Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n    return tuple(sorted(s))\n\n# <func> # Python \n# Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n    return tuple"], ["from heapq import heappop, heappush\r\nclass Node:\r\n    \n# <func> # Python \n# Write a function to find the smallest range that includes at-least one element from each of the given arrays.\ndef find_minimum_range(list):\n    min_range = 0\n    for i in range(len(list)):\n        for j in range(len(list)):\n            if i != j:\n                if list[i] < list[j]:\n                    min_range += 1\n    return min_range\n\n# <func> # Python \n# Write a function to find the smallest range that includes at-least one element from each of the given arrays.\ndef find_minimum_range(list):\n    min_range = 0\n    for i in range(len(list)):\n        for j in range(len(list)):\n            if i != j:\n                if list[i] < list[j]:\n                    min_range += 1\n    return min_range\n\n# <func> # Python \n# Write a function to find the smallest range that includes at-least one element from each of the given arrays.\ndef find_minimum_range(list):\n    min_range = 0\n    for i in range(len(list)):\n        for j in range(len(list)):\n            if i != j:\n                if list[i] < list[j]:\n                    min_range += 1\n    return min_range\n\n# <func> # Python \n# Write a function to find the smallest range that includes at-least one element from each of the given arrays.\ndef find_minimum_range(list):\n    min_range = 0\n    for i in range(len(list)):\n        for j in range(len(list)):\n            if i != j:\n                if list[i] < list[j]:\n                    min_range += 1\n    return min_range\n\n# <func> # Python \n# Write a function to find the smallest range that includes at-least one element from each of the given arrays.\ndef find_minimum_range(list):\n    min_range = 0\n    for i"], ["\n# <func> # Python \n# Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n    return len(s) + len(s.lower())\n\n# <func> # Python \n# Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n    return len(s) + len(s.lower())\n\n# <func> # Python \n# Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n    return len(s) + len(s.lower())\n\n# <func> # Python \n# Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n    return len(s) + len(s.lower())\n\n# <func> # Python \n# Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n    return len(s) + len(s.lower())\n\n# <func> # Python \n# Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n    return len(s) + len(s.lower())\n\n# <func> # Python \n# Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n    return len(s) + len(s.lower())\n\n# <func> # Python \n# Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n    return len(s) + len(s.lower())\n\n# <func> # Python \n# Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n    return len(s) + len(s.lower())\n\n# <func> # Python \n# Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n    return len(s) + len(s.lower())\n\n# <func> # Python \n# Write a function to calculate the number of digits and letters in a string.\ndef dig_let"], ["\n# <func> # Python \n# Write a python function to find number of elements with odd factors in a given range.\ndef count_Odd_Squares(n,m):\n    count = 0\n    for i in range(n,m+1):\n        if i % 2 == 1:\n            count += 1\n    return count\n"], ["\n# <func> # Python \n# Write a function to find the difference between two consecutive numbers in a given list.\ndef diff_consecutivenums(nums):\n    diff = 0\n    for i in range(1, len(nums)):\n        diff += nums[i] - nums[i-1]\n    return diff\n"], ["\n# <func> # Python \n# Write a function to find entringer number e(n, k).\ndef zigzag(n, k):\n    # Write your code here\n    if n == 1:\n        return k\n    if k == 1:\n        return n\n    if n == 2:\n        return k\n    if k == 2:\n        return n\n    if n == 3:\n        return k\n    if k == 3:\n        return n\n    if n == 4:\n        return k\n    if k == 4:\n        return n\n    if n == 5:\n        return k\n    if k == 5:\n        return n\n    if n == 6:\n        return k\n    if k == 6:\n        return n\n    if n == 7:\n        return k\n    if k == 7:\n        return n\n    if n == 8:\n        return k\n    if k == 8:\n        return n\n    if n == 9:\n        return k\n    if k == 9:\n        return n\n    if n == 10:\n        return k\n    if k == 10:\n        return n\n    if n == 11:\n        return k\n    if k == 11:\n        return n\n    if n == 12:\n        return k\n    if k == 12:\n        return n\n    if n == 13:\n        return k\n    if k == 13:\n        return n\n    if n == 14:\n        return k\n    if k == 14:\n        return n\n    if n == 15:\n        return k\n    if k == 15:\n        return n\n    if n == 16:\n        return k\n    if k == 16:\n        return n\n    if n == 17:\n        return k\n    if k == 17:\n        return n\n    if n == 18:\n        return k\n    if k == 18:\n        return n\n    if n == 19:\n        return k\n    if k"], ["\n# <func> # Python \n# Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if (i+j)%2 == 0:\n                count += 1\n    return count\n\n# <func> # Python \n# Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if (i+j)%2 == 0:\n                count += 1\n    return count\n\n# <func> # Python \n# Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if (i+j)%2 == 0:\n                count += 1\n    return count\n\n# <func> # Python \n# Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if (i+j)%2 == 0:\n                count += 1\n    return count\n\n# <func> # Python \n# Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if (i+j)%2 == 0:\n                count += 1\n    return count\n\n# <func> # Python \n# Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if (i+j)%2 == 0:\n                count += 1\n    return count\n"], ["\n# <func> # Python \n# Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\ndef bin_coff(n, r):\n    if n == 0:\n        return 0\n    if r == 0:\n        return 1\n    if n == 1:\n        return 1\n    if r == 1:\n        return 2\n    if n == 2:\n        return 3\n    if r == 2:\n        return 4\n    if n == 3:\n        return 5\n    if r == 3:\n        return 6\n    if n == 4:\n        return 7\n    if r == 4:\n        return 8\n    if n == 5:\n        return 9\n    if r == 5:\n        return 10\n    if n == 6:\n        return 11\n    if r == 6:\n        return 12\n    if n == 7:\n        return 13\n    if r == 7:\n        return 14\n    if n == 8:\n        return 15\n    if r == 8:\n        return 16\n    if n == 9:\n        return 17\n    if r == 9:\n        return 18\n    if n == 10:\n        return 19\n    if r == 10:\n        return 20\n    if n == 11:\n        return 21\n    if r == 11:\n        return 22\n    if n == 12:\n        return 23\n    if r == 12:\n        return 24\n    if n == 13:\n        return 25\n    if r == 13:\n        return 26\n    if n == 14:\n        return 27\n    if r == 14:\n        return 28\n    if n == 15:\n        return 29\n    if r == 15:\n        return 30\n    if n == 16:\n        return 31\n   "], ["\n# <func> # Python \n# Write a python function to check whether the given string is a binary string or not.\ndef check(string):\n    if len(string)%2 == 0:\n        return True\n    else:\n        return False\n\n# <func> # Java\n# Write a Java function to check whether the given string is a binary string or not.\npublic static boolean check(String str) {\n    return str.length() % 2 == 0;\n}\n\n# <func> # C\n# Write a C function to check whether the given string is a binary string or not.\n# int check(char *str) {\n#     return strlen(str) % 2 == 0;\n# }\n\n# <func> # C++\n# Write a C++ function to check whether the given string is a binary string or not.\n# int check(char *str) {\n#     return strlen(str) % 2 == 0;\n# }\n\n# <func> # JavaScript\n# Write a JavaScript function to check whether the given string is a binary string or not.\nfunction check(str) {\n    return str.length % 2 == 0;\n}\n\n# <func> # Python \n# Write a python function to check whether the given string is a binary string or not.\ndef check(string):\n    if len(string)%2==0:\n        return True\n    else:\n        return False\n\n# <func> # Java\n# Write a Java function to check whether the given string is a binary string or not.\npublic static boolean check(String str) {\n    return str.length() % 2 == 0;\n}\n\n# <func> # C\n# Write a C function to check whether the given string is a binary string or not.\n# int check(char *str) {\n#     return strlen(str) % 2 == 0;\n# }\n\n# <func> # C++\n# Write a C++ function to check whether the given string is a binary string or not.\n# int check(char *str) {\n#     return strlen(str) % 2 == 0;\n# }\n\n# <func> # JavaScript\n# Write"], ["\n# <func> # Python \n# Write a python function to minimize the length of the string by removing occurrence of only one character.\ndef minimum_Length(s):\n    # Your code here\n    if len(s) == 1:\n        return 0\n    else:\n        return len(s) - 1\n\n\n# +\n# Write a python function to find the number of occurrences of a character in a string.\ndef count_Occurence(s, c):\n    # Your code here\n    return s.count(c)\n\n\n# -\n\n# Write a python function to find the number of occurrences of a character in a string.\ndef count_Occurence(s, c):\n    # Your code here\n    return s.count(c)\n\n\n# +\n# Write a python function to find the number of occurrences of a character in a string.\ndef count_Occurence(s, c):\n    # Your code here\n    return s.count(c)\n\n\n# -\n\n# Write a python function to find the number of occurrences of a character in a string.\ndef count_Occurence(s, c):\n    # Your code here\n    return s.count(c)\n\n\n# +\n# Write a python function to find the number of occurrences of a character in a string.\ndef count_Occurence(s, c):\n    # Your code here\n    return s.count(c)\n\n\n# -\n\n# Write a python function to find the number of occurrences of a character in a string.\ndef count_Occurence(s, c):\n    # Your code here\n    return s.count(c)\n\n\n# +\n# Write a python function to find the number of occurrences of a character in a string.\ndef count_Occurence(s, c):\n    # Your code here\n    return s.count(c)\n\n\n# -\n\n# Write a python function to find the number of occurrences of a character in a string.\ndef count_Occurence(s, c):\n    # Your code here\n    return s.count(c)\n\n\n# +\n# Write a python function to find the number of"], ["\n# <func> # Python \n# Write a python function to find the first element occurring k times in a given array.\ndef first_Element(arr,n,k):\n    for i in range(n):\n        if arr[i] == k:\n            return arr[i]\n    return -1\n\n# <func> # C\n# Write a C function to find the first element occurring k times in a given array.\n#\n# <input>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array>\n# <array"], ["\n# <func> # Python \n# Write a python function to check whether all the characters in a given string are unique.\ndef unique_Characters(str):\n    # Write your code here\n    return len(set(str)) == len(str)\n"], ["\n# <func> # Python \n# Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n    if n == 0:\n        return list1\n    else:\n        return remove_column(list1[n-1], n-1)\n\n# <func> # Python \n# Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n    if n == 0:\n        return list1\n    else:\n        return remove_column(list1[n-1], n-1)\n\n# <func> # Python \n# Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n    if n == 0:\n        return list1\n    else:\n        return remove_column(list1[n-1], n-1)\n\n# <func> # Python \n# Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n    if n == 0:\n        return list1\n    else:\n        return remove_column(list1[n-1], n-1)\n\n# <func> # Python \n# Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n    if n == 0:\n        return list1\n    else:\n        return remove_column(list1[n-1], n-1)\n\n# <func> # Python \n# Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n    if n == 0:\n        return list1\n    else:\n        return remove_column(list1[n-1], n-1)\n\n# <func> # Python \n# Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n    if n == 0:\n        return list1\n    else:\n        return remove_column(list1[n-1], n-1)\n\n# <func> # Python \n# Write a function"], ["\n# <func> # Python \n# Write a function to find t-nth term of arithemetic progression.\ndef tn_ap(a,n,d):\n    return a+(n-1)*d\n\n# <func> # Python \n# Write a function to find n-th term of geometric progression.\ndef nth_geom(a,n,d):\n    return a*d**(n-1)\n\n# <func> # Python \n# Write a function to find n-th term of geometric progression.\ndef nth_geom(a,n,d):\n    return a*d**(n-1)\n\n# <func> # Python \n# Write a function to find n-th term of geometric progression.\ndef nth_geom(a,n,d):\n    return a*d**(n-1)\n\n# <func> # Python \n# Write a function to find n-th term of geometric progression.\ndef nth_geom(a,n,d):\n    return a*d**(n-1)\n\n# <func> # Python \n# Write a function to find n-th term of geometric progression.\ndef nth_geom(a,n,d):\n    return a*d**(n-1)\n\n# <func> # Python \n# Write a function to find n-th term of geometric progression.\ndef nth_geom(a,n,d):\n    return a*d**(n-1)\n\n# <func> # Python \n# Write a function to find n-th term of geometric progression.\ndef nth_geom(a,n,d):\n    return a*d**(n-1)\n\n# <func> # Python \n# Write a function to find n-th term of geometric progression.\ndef nth_geom(a,n,d):\n    return a*d**(n-1)\n\n# <func> # Python \n# Write a function to find n-th term of geometric progression.\ndef nth_geom(a,n,d):\n    return a*d**(n-1)\n"], ["\n# <func> # Python \n# Write a python function to count the number of rectangles in a circle of radius r.\ndef count_Rectangles(radius):\n    # Write your code here\n    count = 0\n    for i in range(0, int(radius)):\n        for j in range(0, int(radius)):\n            if i == j:\n                count += 1\n    return count\n\n\n# +\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing\n# Testing"], ["\n# <func> # Python \n# Write a function to find the third angle of a triangle using two angles.\ndef find_angle(a,b):\n    return (a+b+360)%360\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to find the maximum element of all the given tuple records.\ndef find_max(test_list):\n    max_val = test_list[0]\n    for val in test_list:\n        if val > max_val:\n            max_val = val\n    return max_val\n\n# <func> # Python \n# Write a function to find the minimum element of all the given tuple records.\ndef find_min(test_list):\n    min_val = test_list[0]\n    for val in test_list:\n        if val < min_val:\n            min_val = val\n    return min_val\n\n# <func> # Python \n# Write a function to find the average of all the given tuple records.\ndef find_avg(test_list):\n    sum_val = 0\n    for val in test_list:\n        sum_val += val\n    return sum_val / len(test_list)\n\n# <func> # Python \n# Write a function to find the maximum element of all the given tuple records.\ndef find_max(test_list):\n    max_val = test_list[0]\n    for val in test_list:\n        if val > max_val:\n            max_val = val\n    return max_val\n\n# <func> # Python \n# Write a function to find the minimum element of all the given tuple records.\ndef find_min(test_list):\n    min_val = test_list[0]\n    for val in test_list:\n        if val < min_val:\n            min_val = val\n    return min_val\n\n# <func> # Python \n# Write a function to find the average of all the given tuple records.\ndef find_avg(test_list):\n    sum_val = 0\n    for val in test_list:\n        sum_val += val\n    return sum_val / len(test_list)\n\n# <func> # Python \n# Write a function to find the maximum element of all the given tuple records.\ndef find_max(test_list):\n    max_val = test_list[0]\n"], ["\n# <func> # Python \n# Write a function to find modulo division of two lists using map and lambda function.\ndef moddiv_list(nums1,nums2):\n    return map(lambda x,y: x%y,nums1,nums2)\n\n# <func> # Python \n# Write a function to find modulo division of two lists using lambda function.\ndef moddiv_list(nums1,nums2):\n    return map(lambda x,y: x%y,nums1,nums2)\n\n# <func> # Python \n# Write a function to find modulo division of two lists using lambda function.\ndef moddiv_list(nums1,nums2):\n    return map(lambda x,y: x%y,nums1,nums2)\n\n# <func> # Python \n# Write a function to find modulo division of two lists using lambda function.\ndef moddiv_list(nums1,nums2):\n    return map(lambda x,y: x%y,nums1,nums2)\n\n# <func> # Python \n# Write a function to find modulo division of two lists using lambda function.\ndef moddiv_list(nums1,nums2):\n    return map(lambda x,y: x%y,nums1,nums2)\n\n# <func> # Python \n# Write a function to find modulo division of two lists using lambda function.\ndef moddiv_list(nums1,nums2):\n    return map(lambda x,y: x%y,nums1,nums2)\n\n# <func> # Python \n# Write a function to find modulo division of two lists using lambda function.\ndef moddiv_list(nums1,nums2):\n    return map(lambda x,y: x%y,nums1,nums2)\n\n# <func> # Python \n# Write a function to find modulo division of two lists using lambda function.\ndef moddiv_list(nums1,nums2):\n    return map(lambda x,y: x%y,nums1,nums2)\n\n# <func"], ["\n# <func> # Python \n# Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c):\n    d = (b**2) - (4*a*c)\n    if d == 0:\n        return False\n    elif d > 0:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c):\n    d = (b**2) - (4*a*c)\n    if d == 0:\n        return False\n    elif d > 0:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c):\n    d = (b**2) - (4*a*c)\n    if d == 0:\n        return False\n    elif d > 0:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c):\n    d = (b**2) - (4*a*c)\n    if d == 0:\n        return False\n    elif d > 0:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c):\n    d = (b**2) - (4*a*c)\n    if d == 0:\n        return False\n    elif d > 0:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,"], ["\n# <func> # Python \n# Write a function to find the n\u2019th carol number.\ndef get_carol(n):\n    if n == 0:\n        return 1\n    else:\n        return get_carol(n-1) + get_carol(n-2)\n"], ["\n# <func> # Python \n# Write a function to remove empty lists from a given list of lists.\ndef remove_empty(list1):\n    for i in range(len(list1)):\n        if len(list1[i]) == 0:\n            list1.pop(i)\n    return list1\n\n# <func> # Python \n# Write a function to remove all duplicates from a given list of lists.\ndef remove_duplicates(list1):\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i != j and list1[i] == list1[j]:\n                list1.pop(j)\n    return list1\n\n# <func> # Python \n# Write a function to remove all the elements from a given list of lists that are not in a given list.\ndef remove_elements(list1, elements):\n    for i in range(len(list1)):\n        for j in range(len(elements)):\n            if list1[i] in elements:\n                list1.pop(i)\n    return list1\n\n# <func> # Python \n# Write a function to remove all the elements from a given list of lists that are not in a given list.\ndef remove_elements(list1, elements):\n    for i in range(len(list1)):\n        for j in range(len(elements)):\n            if list1[i] in elements:\n                list1.pop(i)\n    return list1\n\n# <func> # Python \n# Write a function to remove all the elements from a given list of lists that are not in a given list.\ndef remove_elements(list1, elements):\n    for i in range(len(list1)):\n        for j in range(len(elements)):\n            if list1[i] in elements:\n                list1.pop(i)\n    return list1\n\n# <func> # Python \n# Write a function to remove all the elements from a given list of lists that are not in a given list.\ndef remove_elements(list1, elements):\n    for i in range(len(list1)):\n        for j in range(len(elements)):\n            if"], ["\n# <func> # Python \n# Write a python function to find the item with maximum occurrences in a given list.\ndef max_occurrences(nums):\n    max_val = nums[0]\n    max_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] > max_val:\n            max_val = nums[i]\n            max_count = 1\n        elif nums[i] == max_val:\n            max_count += 1\n    return max_val, max_count\n\n# <func> # Python \n# Write a python function to find the item with minimum occurrences in a given list.\ndef min_occurrences(nums):\n    min_val = nums[0]\n    min_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] < min_val:\n            min_val = nums[i]\n            min_count = 1\n        elif nums[i] == min_val:\n            min_count += 1\n    return min_val, min_count\n\n# <func> # Python \n# Write a python function to find the item with maximum occurrences in a given list.\ndef max_occurrences_2(nums):\n    max_val = nums[0]\n    max_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] > max_val:\n            max_val = nums[i]\n            max_count = 1\n        elif nums[i] == max_val:\n            max_count += 1\n    return max_val, max_count\n\n# <func> # Python \n# Write a python function to find the item with minimum occurrences in a given list.\ndef min_occurrences_2(nums):\n    min_val = nums[0]\n    min_count = 1\n    for i in range(1, len(nums)):\n        if nums[i] < min_val:\n            min_val = nums[i]\n            min_count ="], ["\n# <func> # Python \n# Write a function to add the k elements to each element in the tuple.\ndef add_K_element(test_list, K):\n    return tuple(test_list[i] + K for i in range(len(test_list)))\n\n# <func> # Python \n# Write a function to find the kth smallest element in a list.\ndef find_kth_smallest(test_list, k):\n    return test_list[k]\n\n# <func> # Python \n# Write a function to find the kth largest element in a list.\ndef find_kth_largest(test_list, k):\n    return test_list[k]\n\n# <func> # Python \n# Write a function to find the kth smallest element in a list.\ndef find_kth_smallest(test_list, k):\n    return test_list[k]\n\n# <func> # Python \n# Write a function to find the kth largest element in a list.\ndef find_kth_largest(test_list, k):\n    return test_list[k]\n\n# <func> # Python \n# Write a function to find the kth smallest element in a list.\ndef find_kth_smallest(test_list, k):\n    return test_list[k]\n\n# <func> # Python \n# Write a function to find the kth largest element in a list.\ndef find_kth_largest(test_list, k):\n    return test_list[k]\n\n# <func> # Python \n# Write a function to find the kth smallest element in a list.\ndef find_kth_smallest(test_list, k):\n    return test_list[k]\n\n# <func> # Python \n# Write a function to find the kth largest element in a list.\ndef find_kth_largest(test_list, k):\n    return test_list[k]\n\n# <func> # Python \n# Write a function to find the kth smallest element in a list.\ndef find_kth_smallest(test_list, k):\n    return test_list"], ["\n# <func> # Python \n# Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch):\n    if ch == '1':\n        return 1\n    else:\n        return 2\n\n# <func> # Python \n# Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch):\n    if ch == '1':\n        return 1\n    else:\n        return 2\n\n# <func> # Python \n# Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch):\n    if ch == '1':\n        return 1\n    else:\n        return 2\n\n# <func> # Python \n# Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch):\n    if ch == '1':\n        return 1\n    else:\n        return 2\n\n# <func> # Python \n# Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch):\n    if ch == '1':\n        return 1\n    else:\n        return 2\n\n# <func> # Python \n# Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch):\n    if ch == '1':\n        return 1\n    else:\n        return 2\n\n# <func> # Python \n# Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch):\n    if ch == '1':\n        return 1\n    else:\n        return 2\n\n# <func> # Python \n# Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch):\n    if ch =="], ["\n# <func> # Python \n# Write a python function to count the number of digits of a given number.\ndef count_Digit(n):\n    return len(str(n))\n\n# <func> # Java\n# Write a Java function to count the number of digits of a given number.\npublic int countDigits(int n) {\n    return n.toString().length();\n}\n\n# <func> # C\n# Write a C function to count the number of digits of a given number.\n# int countDigits(int n) {\n#     return n.toString().length();\n# }\n\n# <func> # C++\n# Write a C++ function to count the number of digits of a given number.\n# int countDigits(int n) {\n#     return n.toString().length();\n# }\n\n# <func> # C#\n# Write a C# function to count the number of digits of a given number.\n# int countDigits(int n) {\n#     return n.ToString().Length;\n# }\n\n# <func> # Go\n# Write a Go function to count the number of digits of a given number.\nfunc countDigits(n int) int {\n    return len(str(n))\n}\n\n# <func> # Haskell\n# Write a Haskell function to count the number of digits of a given number.\ncountDigits :: Int -> Int\ncountDigits n = length . show . n\n\n# <func> # JavaScript\n# Write a JavaScript function to count the number of digits of a given number.\nfunction countDigits(n) {\n    return n.toString().length;\n}\n\n# <func> # Kotlin\n# Write a Kotlin function to count the number of digits of a given number.\nfun countDigits(n: Int) {\n    return n.toString().length\n}\n\n# <func> # Lua\n# Write a Lua function to count the number of digits of a given number.\nfunction countDigits(n)\n    return n:tonumber:length\nend\n\n# <func> # MATLAB\n# Write a MATLAB function to count the number of digits of a given number.\nfunction countDigits(n)"], ["\n# <func> # Python \n# Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\n    max_product = 0\n    for i in range(len(list_nums)):\n        for j in range(i+1, len(list_nums)):\n            if list_nums[i] * list_nums[j] > max_product:\n                max_product = list_nums[i] * list_nums[j]\n    return max_product\n\n# <func> # Python \n# Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\n    max_product = 0\n    for i in range(len(list_nums)):\n        for j in range(i+1, len(list_nums)):\n            if list_nums[i] * list_nums[j] > max_product:\n                max_product = list_nums[i] * list_nums[j]\n    return max_product\n\n# <func> # Python \n# Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\n    max_product = 0\n    for i in range(len(list_nums)):\n        for j in range(i+1, len(list_nums)):\n            if list_nums[i] * list_nums[j] > max_product:\n                max_product = list_nums[i] * list_nums[j]\n    return max_product\n\n# <func> # Python \n# Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\n    max_product = 0\n    for i in range(len(list_nums)):\n        for j in range(i+1, len(list_nums)):\n            if list_nums[i] * list_nums[j"], ["class Node: \r\n\t\n# <func> # Python \n# Write a function to check if a binary tree is balanced or not.\ndef get_height(root):\n\tif root is None:\n\t\treturn 0\n\treturn 1 + max(get_height(root.left), get_height(root.right))\n\n# <func> # Python \n# Write a function to check if a binary tree is balanced or not.\ndef is_balanced(root):\n\theight = get_height(root)\n\treturn height == 1 or abs(height - 2) <= 1\n\n# <func> # Python \n# Write a function to check if a binary tree is balanced or not.\ndef is_balanced(root):\n\theight = get_height(root)\n\treturn height == 1 or abs(height - 2) <= 1\n\n# <func> # Python \n# Write a function to check if a binary tree is balanced or not.\ndef is_balanced(root):\n\theight = get_height(root)\n\treturn height == 1 or abs(height - 2) <= 1\n\n# <func> # Python \n# Write a function to check if a binary tree is balanced or not.\ndef is_balanced(root):\n\theight = get_height(root)\n\treturn height == 1 or abs(height - 2) <= 1\n\n# <func> # Python \n# Write a function to check if a binary tree is balanced or not.\ndef is_balanced(root):\n\theight = get_height(root)\n\treturn height == 1 or abs(height - 2) <= 1\n\n# <func> # Python \n# Write a function to check if a binary tree is balanced or not.\ndef is_balanced(root):\n\theight = get_height(root)\n\treturn height == 1 or abs(height - 2) <= 1\n\n# <func> # Python \n# Write a function to check if a binary tree is balanced or not.\ndef is_balanced(root):\n\theight = get_height(root)\n\treturn height == 1 or abs(height -"], ["\n# <func> # Python \n# Write a function to repeat the given tuple n times.\ndef repeat_tuples(test_tup, N):\n    return tuple(test_tup * N)\n\n# <func> # Python \n# Write a function to find the sum of all the elements in a given list.\ndef sum_list(list_):\n    return sum(list_)\n\n# <func> # Python \n# Write a function to find the length of a given list.\ndef length_list(list_):\n    return len(list_)\n\n# <func> # Python \n# Write a function to find the maximum element in a given list.\ndef max_list(list_):\n    return max(list_)\n\n# <func> # Python \n# Write a function to find the minimum element in a given list.\ndef min_list(list_):\n    return min(list_)\n\n# <func> # Python \n# Write a function to find the average of a given list.\ndef avg_list(list_):\n    return sum(list_) / len(list_)\n\n# <func> # Python \n# Write a function to find the maximum element in a given list.\ndef max_list(list_):\n    return max(list_)\n\n# <func> # Python \n# Write a function to find the minimum element in a given list.\ndef min_list(list_):\n    return min(list_)\n\n# <func> # Python \n# Write a function to find the length of a given list.\ndef length_list(list_):\n    return len(list_)\n\n# <func> # Python \n# Write a function to find the maximum element in a given list.\ndef max_list(list_):\n    return max(list_)\n\n# <func> # Python \n# Write a function to find the minimum element in a given list.\ndef min_list(list_):\n    return min(list_)\n\n# <func> # Python \n# Write a function to find the average of a given list.\ndef avg_list(list_):\n    return sum(list_) / len(list_)\n\n# <func> # Python \n# Write"], ["\n# <func> # Python \n# Write a function to find the lateral surface area of cuboid\ndef lateralsurface_cuboid(l,w,h):\n    lateral_surface = 2*(l*w+w*h+h*l)\n    return lateral_surface\n\n# Write a function to find the volume of cuboid\ndef volume_cuboid(l,w,h):\n    volume = l*w*h\n    return volume\n\n# Write a function to find the surface area of cylinder\ndef surfacearea_cylinder(r,h):\n    surfacearea = 2*pi*r*h\n    return surfacearea\n\n# Write a function to find the volume of cylinder\ndef volume_cylinder(r,h):\n    volume = pi*r**2*h\n    return volume\n\n# Write a function to find the lateral surface area of cylinder\ndef lateralsurface_cylinder(r,h):\n    lateral_surface = 2*pi*r*h\n    return lateral_surface\n\n# Write a function to find the volume of cone\ndef volume_cone(r,h):\n    volume = (1/3)*pi*r**2*h\n    return volume\n\n# Write a function to find the surface area of cone\ndef surfacearea_cone(r,h):\n    surfacearea = (1/3)*pi*r**2*h\n    return surfacearea\n\n# Write a function to find the volume of cone\ndef volume_cone(r,h):\n    volume = (1/3)*pi*r**2*h\n    return volume\n\n# Write a function to find the lateral surface area of cone\ndef lateralsurface_cone(r,h):\n    lateral_surface = (1/3)*pi*r**2*h\n    return lateral_surface\n\n# Write a function to find the volume of sphere\ndef volume_sphere(r):\n    volume = 4/3*pi*r**3\n    return volume\n\n# Write a function to find the surface area of sphere\ndef surfacearea_sphere(r):\n    surfacearea = 4"], ["\n# <func> # Python \n# Write a function to sort a tuple by its float element.\ndef float_sort(price):\n    return sorted(price, key=float)\n\n# <func> # Python \n# Write a function to sort a tuple by its integer element.\ndef int_sort(price):\n    return sorted(price, key=int)\n\n# <func> # Python \n# Write a function to sort a tuple by its string element.\ndef str_sort(price):\n    return sorted(price, key=str)\n\n# <func> # Python \n# Write a function to sort a tuple by its list element.\ndef list_sort(price):\n    return sorted(price, key=list)\n\n# <func> # Python \n# Write a function to sort a tuple by its tuple element.\ndef tuple_sort(price):\n    return sorted(price, key=tuple)\n\n# <func> # Python \n# Write a function to sort a tuple by its dictionary element.\ndef dict_sort(price):\n    return sorted(price, key=dict)\n\n# <func> # Python \n# Write a function to sort a tuple by its set element.\ndef set_sort(price):\n    return sorted(price, key=set)\n\n# <func> # Python \n# Write a function to sort a tuple by its frozenset element.\ndef frozenset_sort(price):\n    return sorted(price, key=frozenset)\n\n# <func> # Python \n# Write a function to sort a tuple by its tuple element.\ndef tuple_sort(price):\n    return sorted(price, key=tuple)\n\n# <func> # Python \n# Write a function to sort a tuple by its tuple element.\ndef tuple_sort(price):\n    return sorted(price, key=tuple)\n\n# <func> # Python \n# Write a function to sort a tuple by its tuple element.\ndef tuple_sort(price):\n    return sorted(price, key=tuple)\n\n# <func> # Python \n# Write a function to sort a tuple by its tuple element.\ndef tuple_sort(price):\n    return sorted(price, key="], ["\n# <func> # Python \n# Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\n    for i in range(left_element, right_element + 1):\n        if i not in A:\n            return i\n    return None\n\n# <func> # Python \n# Write a function to find the largest missing element in a sorted array.\ndef largest_missing(A, left_element, right_element):\n    for i in range(left_element, right_element + 1):\n        if i not in A:\n            return i\n    return None\n\n# <func> # Python \n# Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\n    for i in range(left_element, right_element + 1):\n        if i not in A:\n            return i\n    return None\n\n# <func> # Python \n# Write a function to find the largest missing element in a sorted array.\ndef largest_missing(A, left_element, right_element):\n    for i in range(left_element, right_element + 1):\n        if i not in A:\n            return i\n    return None\n\n# <func> # Python \n# Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\n    for i in range(left_element, right_element + 1):\n        if i not in A:\n            return i\n    return None\n\n# <func> # Python \n# Write a function to find the largest missing element in a sorted array.\ndef largest_missing(A, left_element, right_element):\n    for i in range(left_element, right_element + 1):\n        if i not in A:\n            return i\n    return None\n\n# <func> # Python \n# Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\n    for i in range(left_element, right_element + 1):\n       "], ["import heapq as hq\r\n\n# <func> # Python \n# Write a function to sort a given list of elements in ascending order using heap queue algorithm.\ndef heap_assending(nums):\n    # Create a heap\n    heapq.heapify(nums)\n    # Print the heap\n    print(nums)\n    # Print the heap\n    print(heapq.heapreplace(nums, 1))\n    # Print the heap\n    print(heapq.heappop(nums))\n    # Print the heap\n    print(heapq.heappop(nums))\n    # Print the heap\n    print(heapq.heappop(nums))\n    # Print the heap\n    print(heapq.heappop(nums))\n    # Print the heap\n    print(heapq.heappop(nums))\n    # Print the heap\n    print(heapq.heappop(nums))\n    # Print the heap\n    print(heapq.heappop(nums))\n    # Print the heap\n    print(heapq.heappop(nums))\n    # Print the heap\n    print(heapq.heappop(nums))\n    # Print the heap\n    print(heapq.heappop(nums))\n    # Print the heap\n    print(heapq.heappop(nums))\n    # Print the heap\n    print(heapq.heappop(nums))\n    # Print the heap\n    print(heapq.heappop(nums))\n    # Print the heap\n    print(heapq.heappop(nums))\n    # Print the heap\n    print(heapq.heappop(nums))\n    # Print the heap\n    print(heapq.heappop(nums))\n    # Print the heap\n    print(heapq.heappop(nums))\n    # Print the heap\n    print(heapq.heappop(nums))\n    # Print the heap\n    print(heapq.heappop(nums))\n    # Print the heap\n    print("], ["\n# <func> # Python \n# Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n    return l*w*h\n\n# <func> # Java\n# Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n    return l*w*h\n\n# <func> # C++\n# Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n    return l*w*h\n\n# <func> # C\n# Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n    return l*w*h\n\n# <func> # Pascal\n# Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n    return l*w*h\n\n# <func> # C\n# Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n    return l*w*h\n\n# <func> # C++\n# Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n    return l*w*h\n\n# <func> # C++\n# Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n    return l*w*h\n\n# <func> # C++\n# Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n    return l*w*h\n\n# <func> # C++\n# Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n    return l*w*h\n\n# <func> # C++\n# Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n    return l*w*h\n\n# <func> # C++\n# Write a function to find the volume of a"], ["\n# <func> # Python \n# Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\n    if len(str) == 0:\n        return []\n    if len(str) == 1:\n        return [str]\n    return permute_string(str[1:]) + [str]\n\n# <func> # Python \n# Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\n    if len(str) == 0:\n        return []\n    if len(str) == 1:\n        return [str]\n    return permute_string(str[1:]) + [str]\n\n# <func> # Python \n# Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\n    if len(str) == 0:\n        return []\n    if len(str) == 1:\n        return [str]\n    return permute_string(str[1:]) + [str]\n\n# <func> # Python \n# Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\n    if len(str) == 0:\n        return []\n    if len(str) == 1:\n        return [str]\n    return permute_string(str[1:]) + [str]\n\n# <func> # Python \n# Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\n    if len(str) == 0:\n        return []\n    if len(str) == 1:\n        return [str]\n    return permute_string(str[1:]) + [str]\n\n# <func> # Python \n# Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\n    if len(str) == 0:\n        return []\n    if len(str) == 1:\n        return [str]\n    return permute_string(str[1:]) + [str]\n\n# <func> #"], ["\n# <func> # Python \n# Write a function to round the given number to the nearest multiple of a specific number.\ndef round_num(n,m):\n    return round(n/m)*m\n\n# <func> # Python \n# Write a function to calculate the sum of the first n natural numbers.\ndef sum_n(n):\n    return sum(range(1,n+1))\n\n# <func> # Python \n# Write a function to calculate the sum of the first n natural numbers.\ndef sum_n(n):\n    return sum(range(1,n+1))\n\n# <func> # Python \n# Write a function to calculate the sum of the first n natural numbers.\ndef sum_n(n):\n    return sum(range(1,n+1))\n\n# <func> # Python \n# Write a function to calculate the sum of the first n natural numbers.\ndef sum_n(n):\n    return sum(range(1,n+1))\n\n# <func> # Python \n# Write a function to calculate the sum of the first n natural numbers.\ndef sum_n(n):\n    return sum(range(1,n+1))\n\n# <func> # Python \n# Write a function to calculate the sum of the first n natural numbers.\ndef sum_n(n):\n    return sum(range(1,n+1))\n\n# <func> # Python \n# Write a function to calculate the sum of the first n natural numbers.\ndef sum_n(n):\n    return sum(range(1,n+1))\n\n# <func> # Python \n# Write a function to calculate the sum of the first n natural numbers.\ndef sum_n(n):\n    return sum(range(1,n+1))\n\n# <func> # Python \n# Write a function to calculate the sum of the first n natural numbers.\ndef sum_n(n):\n    return sum(range(1,n+1))\n\n# <func> # Python \n# Write a function to calculate the sum of the first n natural numbers.\ndef sum_n(n):\n    return sum(range(1,n+1))\n\n#"], ["\n# <func> # Python \n# Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\ndef remove_replica(test_tup):\n    # your code here\n    # return a new tuple with the elements removed\n    return tuple(filter(lambda x: x not in test_tup, test_tup))\n\n\n# +\n# 10. Write a function that takes a list of integers and returns a new list with the integers sorted in ascending order.\ndef sort_list(test_list):\n    # your code here\n    # return a new list with the integers sorted in ascending order\n    return sorted(test_list)\n\n\n# -\n\n# 11. Write a function that takes a list of integers and returns a new list with the integers reversed.\ndef reverse_list(test_list):\n    # your code here\n    # return a new list with the integers reversed\n    return test_list[::-1]\n\n\n# 12. Write a function that takes a list of strings and returns a new list with the strings capitalized.\ndef capitalize_list(test_list):\n    # your code here\n    # return a new list with the strings capitalized\n    return [word.capitalize() for word in test_list]\n\n\n# 13. Write a function that takes a list of strings and returns a new list with the strings sorted in alphabetical order.\ndef sort_list(test_list):\n    # your code here\n    # return a new list with the strings sorted in alphabetical order\n    return sorted(test_list)\n\n\n# 14. Write a function that takes a list of strings and returns a new list with the strings reversed.\ndef reverse_list(test_list):\n    # your code here\n    # return a new list with the strings reversed\n    return test_list[::-1]\n\n\n# 15. Write a function that takes a list of strings and returns a new list with the strings capitalized.\ndef capitalize_list(test_list):\n    # your code here\n    # return a new list with the strings capitalized\n    return [word.capitalize() for word in"], ["\n# <func> # Python \n# Write a python function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c):\n    return s.replace(c, '')\n\n# <func> # Java\n# Write a Java function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c):\n    return s.replace(c, '')\n\n# <func> # C\n# Write a C function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c):\n    return s.replace(c, '')\n\n# <func> # C++\n# Write a C++ function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c):\n    return s.replace(c, '')\n\n# <func> # C#\n# Write a C# function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c):\n    return s.Replace(c, '')\n\n# <func> # JavaScript\n# Write a JavaScript function to remove all occurrences of a character in a given string.\nfunction remove_Char(s,c) {\n    return s.replace(c, '')\n}\n\n# <func> # Go\n# Write a Go function to remove all occurrences of a character in a given string.\nfunc remove_Char(s,c) {\n    return s.replace(c, '')\n}\n\n# <func> # R\n# Write a R function to remove all occurrences of a character in a given string.\nremove_Char <- function(s,c) {\n    return s.replace(c, '')\n}\n\n# <func> # Rust\n# Write a Rust function to remove all occurrences of a character in a given string.\nremove_Char = |s,c| {\n    return s.replace(c, '')\n}\n\n# <func> # Python 3\n# Write a Python 3 function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c):\n    return s.replace(c, '')\n\n# <func> # Python 3.6\n# Write a Python"], ["\n# <func> # Python \n# Write a python function to shift last element to first position in the given list.\ndef move_first(test_list):\n    return test_list[0:1] + test_list[1:]\n\n# <func> # Python \n# Write a python function to reverse a given list.\ndef reverse_list(test_list):\n    return test_list[::-1]\n\n# <func> # Python \n# Write a python function to find the maximum element in a given list.\ndef max_element(test_list):\n    return test_list[0]\n\n# <func> # Python \n# Write a python function to find the minimum element in a given list.\ndef min_element(test_list):\n    return test_list[0]\n\n# <func> # Python \n# Write a python function to find the sum of all elements in a given list.\ndef sum_list(test_list):\n    return sum(test_list)\n\n# <func> # Python \n# Write a python function to find the average of all elements in a given list.\ndef average_list(test_list):\n    return sum(test_list) / len(test_list)\n\n# <func> # Python \n# Write a python function to find the maximum element in a given list.\ndef max_element(test_list):\n    return test_list[0]\n\n# <func> # Python \n# Write a python function to find the minimum element in a given list.\ndef min_element(test_list):\n    return test_list[0]\n\n# <func> # Python \n# Write a python function to find the sum of all elements in a given list.\ndef sum_list(test_list):\n    return sum(test_list)\n\n# <func> # Python \n# Write a python function to find the average of all elements in a given list.\ndef average_list(test_list):\n    return sum(test_list) / len(test_list)\n\n# <func> # Python \n# Write a python function to find the maximum element in a given list.\ndef max_element(test_list):\n    return test_"], ["\n# <func> # Python \n# Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n    return 2*(l*w + w*h + h*l)\n\n# <func> # Java\n# Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n    return 2*(l*w + w*h + h*l)\n\n# <func> # C++\n# Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n    return 2*(l*w + w*h + h*l)\n\n# <func> # C\n# Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n    return 2*(l*w + w*h + h*l)\n\n# <func> # Fortran\n# Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n    return 2*(l*w + w*h + h*l)\n\n# <func> # Pascal\n# Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n    return 2*(l*w + w*h + h*l)\n\n# <func> # Python 3\n# Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n    return 2*(l*w + w*h + h*l)\n\n# <func> # C++ \n# Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n    return 2*(l*w + w*h + h*l)\n\n# <func> # C\n# Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n    return 2*(l*w + w*h + h*l)"], ["\n# <func> # Python \n# Write a function to generate a two-dimensional array.\ndef multi_list(rownum,colnum):\n    return [[i for i in range(colnum)] for j in range(rownum)]\n\n# <func> # Python \n# Write a function to generate a three-dimensional array.\ndef multi_list3(rownum,colnum,depth):\n    return [[[i for i in range(colnum)] for j in range(rownum)] for k in range(depth)]\n\n# <func> # Python \n# Write a function to generate a four-dimensional array.\ndef multi_list4(rownum,colnum,depth,depth2):\n    return [[[[[i for i in range(colnum)] for j in range(rownum)] for k in range(depth2)] for l in range(depth)] for m in range(depth3)]\n\n# <func> # Python \n# Write a function to generate a five-dimensional array.\ndef multi_list5(rownum,colnum,depth,depth2,depth3):\n    return [[[[[[[[i for i in range(colnum)] for j in range(rownum)] for k in range(depth2)] for l in range(depth3)] for m in range(depth)] for n in range(depth)] for o in range(depth4)]\n\n# <func> # Python \n# Write a function to generate a six-dimensional array.\ndef multi_list6(rownum,colnum,depth,depth2,depth3,depth4):\n    return [[[[[[[[[[i for i in range(colnum)] for j in range(rownum)] for k in range(depth2)] for l in range(depth3)] for m in range(depth4)] for n in range(depth)] for o in range(depth)] for p in range(depth5)]]\n\n# <func> # Python \n# Write a function to generate a seven-dimensional array.\ndef multi_list7(rownum,colnum,depth,depth2,depth3,depth4,depth5):\n    return [[[[[[[[[[[[i for i in range(colnum)] for j in range(rownum)] for k in range(depth"], ["from operator import itemgetter\r\n\n# <func> # Python \n# Write a function to sort a list of lists by a given index of the inner list.\ndef index_on_inner_list(list_data, index_no):\n    return sorted(list_data, key=lambda x: x[index_no])\n\n# <func> # Python \n# Write a function to sort a list of lists by a given index of the outer list.\ndef index_on_outer_list(list_data, index_no):\n    return sorted(list_data, key=lambda x: x[index_no])\n\n# <func> # Python \n# Write a function to sort a list of lists by a given index of the inner list.\ndef index_on_inner_list(list_data, index_no):\n    return sorted(list_data, key=lambda x: x[index_no])\n\n# <func> # Python \n# Write a function to sort a list of lists by a given index of the outer list.\ndef index_on_outer_list(list_data, index_no):\n    return sorted(list_data, key=lambda x: x[index_no])\n\n# <func> # Python \n# Write a function to sort a list of lists by a given index of the inner list.\ndef index_on_inner_list(list_data, index_no):\n    return sorted(list_data, key=lambda x: x[index_no])\n\n# <func> # Python \n# Write a function to sort a list of lists by a given index of the outer list.\ndef index_on_outer_list(list_data, index_no):\n    return sorted(list_data, key=lambda x: x[index_no])\n\n# <func> # Python \n# Write a function to sort a list of lists by a given index of the inner list.\ndef index_on_inner_list(list_data, index_no):\n    return sorted(list_data, key=lambda x: x[index_no])\n\n# <func> # Python \n# Write a function to sort a list of lists by a given index of the outer list.\ndef index_on_"], ["\n# <func> # Python \n# Write a function to find the number of rotations in a circularly sorted array.\ndef find_rotation_count(A):\n    # Your code here\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] < A[j]:\n                count += 1\n    return count\n\n\n# +\n# Write a function to find the number of rotations in a circularly sorted array.\n# Your code here\n\ndef find_rotation_count(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] < A[j]:\n                count += 1\n    return count\n\n\n# +\n# Write a function to find the number of rotations in a circularly sorted array.\n# Your code here\n\ndef find_rotation_count(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] < A[j]:\n                count += 1\n    return count\n\n\n# +\n# Write a function to find the number of rotations in a circularly sorted array.\n# Your code here\n\ndef find_rotation_count(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] < A[j]:\n                count += 1\n    return count\n\n\n# +\n# Write a function to find the number of rotations in a circularly sorted array.\n# Your code here\n\ndef find_rotation_count(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] < A[j]:\n                count += 1\n    return count\n\n\n# +\n# Write a function to find the number of rotations in a circularly sorted array.\n# Your code here\n\ndef"], ["\n# <func> # Python \n# Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n):\n    return n & 1\n\n# <func> # Python \n# Write a python function to toggle all even bits of a given number.\ndef odd_bit_toggle_number(n):\n    return n >> 1\n\n# <func> # Python \n# Write a python function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n):\n    return n >> 1\n\n# <func> # Python \n# Write a python function to toggle all odd bits of a given number.\ndef odd_bit_toggle_number(n):\n    return n >> 1\n\n# <func> # Python \n# Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n):\n    return n >> 1\n\n# <func> # Python \n# Write a python function to toggle all even bits of a given number.\ndef odd_bit_toggle_number(n):\n    return n >> 1\n\n# <func> # Python \n# Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n):\n    return n >> 1\n\n# <func> # Python \n# Write a python function to toggle all even bits of a given number.\ndef odd_bit_toggle_number(n):\n    return n >> 1\n\n# <func> # Python \n# Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n):\n    return n >> 1\n\n# <func> # Python \n# Write a python function to toggle all even bits of a given number.\ndef odd_bit_toggle_number(n):\n    return n >> 1\n\n# <func> # Python \n# Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n):\n    return n >> 1\n\n# <func> # Python \n# Write a python function to toggle all even bits of a given number.\ndef"], ["\n# <func> # Python \n# Write a python function to find the frequency of the smallest value in a given array.\ndef frequency_Of_Smallest(n,arr):\n    # Write your code here\n    return arr.count(min(arr))\n\n\n# +\n# Write a python function to find the frequency of the largest value in a given array.\ndef frequency_Of_Largest(n,arr):\n    # Write your code here\n    return arr.count(max(arr))\n\n\n# -\n\n# Write a python function to find the frequency of the second largest value in a given array.\ndef frequency_Of_Second_Largest(n,arr):\n    # Write your code here\n    return arr.count(max(arr)[1])\n\n\n# +\n# Write a python function to find the frequency of the third largest value in a given array.\ndef frequency_Of_Third_Largest(n,arr):\n    # Write your code here\n    return arr.count(max(arr)[2])\n\n\n# -\n\n# Write a python function to find the frequency of the fourth largest value in a given array.\ndef frequency_Of_Fourth_Largest(n,arr):\n    # Write your code here\n    return arr.count(max(arr)[3])\n\n\n# +\n# Write a python function to find the frequency of the fifth largest value in a given array.\ndef frequency_Of_Fifth_Largest(n,arr):\n    # Write your code here\n    return arr.count(max(arr)[4])\n\n\n# -\n\n# Write a python function to find the frequency of the sixth largest value in a given array.\ndef frequency_Of_Sixth_Largest(n,arr):\n    # Write your code here\n    return arr.count(max(arr)[5])\n\n\n# +\n# Write a python function to find the frequency of the seventh largest value in a given array.\ndef frequency_Of_Seventh_Largest(n,arr):\n    # Write your code here\n    return arr.count(max(arr)[6])\n\n\n# -\n\n# Write a python function to find the frequency"], ["\n# <func> # Python \n# Write a function to find the n'th perrin number using recursion.\ndef get_perrin(n):\n    if n == 0:\n        return 1\n    else:\n        return get_perrin(n-1) + get_perrin(n-2)\n\n# <func> # Python \n# Write a function to find the n'th Fibonacci number using recursion.\ndef get_fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_fib(n-1) + get_fib(n-2)\n\n# <func> # Python \n# Write a function to find the n'th Fibonacci number using iteration.\ndef get_fib_iter(n):\n    fib_list = [0, 1]\n    for i in range(2, n+1):\n        fib_list.append(fib_list[i-1] + fib_list[i-2])\n    return fib_list[n-1]\n\n# <func> # Python \n# Write a function to find the n'th Fibonacci number using iteration.\ndef get_fib_iter(n):\n    fib_list = [0, 1]\n    for i in range(2, n+1):\n        fib_list.append(fib_list[i-1] + fib_list[i-2])\n    return fib_list[n-1]\n\n# <func> # Python \n# Write a function to find the n'th Fibonacci number using iteration.\ndef get_fib_iter(n):\n    fib_list = [0, 1]\n    for i in range(2, n+1):\n        fib_list.append(fib_list[i-1] + fib_list[i-2])\n    return fib_list[n-1]\n\n# <func> # Python \n# Write a function to find the n'th Fibonacci number using iteration.\ndef get_fib_iter(n):\n    fib_list ="], ["\n# <func> # Python \n# Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\ndef swap_count(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '(':\n            count += 1\n        elif s[i] == ')':\n            count -= 1\n        if count == 0:\n            break\n    return count\n"], ["\n# <func> # Python \n# Write a python function to check whether the hexadecimal number is even or odd.\ndef even_or_odd(N):\n    if N % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# <func> # C\n# Write a C function to check whether the hexadecimal number is even or odd.\n# The function should return a string indicating whether the hexadecimal number is even or odd.\n# The function should return a string indicating whether the hexadecimal number is even or odd.\n# The function should return a string indicating whether the hexadecimal number is even or odd.\n# The function should return a string indicating whether the hexadecimal number is even or odd.\n# The function should return a string indicating whether the hexadecimal number is even or odd.\n# The function should return a string indicating whether the hexadecimal number is even or odd.\n# The function should return a string indicating whether the hexadecimal number is even or odd.\n# The function should return a string indicating whether the hexadecimal number is even or odd.\n# The function should return a string indicating whether the hexadecimal number is even or odd.\n# The function should return a string indicating whether the hexadecimal number is even or odd.\n# The function should return a string indicating whether the hexadecimal number is even or odd.\n# The function should return a string indicating whether the hexadecimal number is even or odd.\n# The function should return a string indicating whether the hexadecimal number is even or odd.\n# The function should return a string indicating whether the hexadecimal number is even or odd.\n# The function should return a string indicating whether the hexadecimal number is even or odd.\n# The function should return a string indicating whether the hexadecimal number is even or odd.\n# The function should return a string indicating whether the hexadecimal number is even or odd.\n# The function should return a string indicating whether the hexadecimal number is even or odd.\n# The function should return a string indicating whether the hexadecimal number is even or odd.\n# The function should return a string indicating whether the hexadecimal number"], ["\n# <func> # Python \n# Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    else:\n        return 2**(n-1)\n\n# <func> # Java\n# Write a Java function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    else:\n        return 2**(n-1)\n\n# <func> # C\n# Write a C function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    else:\n        return 2**(n-1)\n\n# <func> # C++\n# Write a C++ function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    else:\n        return 2**(n-1)\n\n# <func> # C#\n# Write a C# function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    else:\n        return 2**(n-1)\n\n# <func> # Python \n# Write a Python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    else:\n        return 2**(n-1)\n\n# <func> # Java\n# Write a Java function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n):\n    if n <= 0:\n        return 0\n    else:\n        return 2**(n-1)\n\n# <func> # C"], ["\n# <func> # Python \n# Write a function to find the n'th lucas number.\ndef find_lucas(n):\n    lucas = [1, 1]\n    for i in range(2, n+1):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n]\n\n# <func> # Python \n# Write a function to find the n'th Fibonacci number.\ndef fibonacci(n):\n    fibonacci = [0, 1]\n    for i in range(2, n+1):\n        fibonacci.append(fibonacci[i-1] + fibonacci[i-2])\n    return fibonacci[n]\n\n# <func> # Python \n# Write a function to find the n'th Fibonacci number.\ndef fibonacci(n):\n    fibonacci = [0, 1]\n    for i in range(2, n+1):\n        fibonacci.append(fibonacci[i-1] + fibonacci[i-2])\n    return fibonacci[n]\n\n# <func> # Python \n# Write a function to find the n'th Lucas number.\ndef lucas(n):\n    lucas = [1, 1]\n    for i in range(2, n+1):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n]\n\n# <func> # Python \n# Write a function to find the n'th Fibonacci number.\ndef fibonacci(n):\n    fibonacci = [0, 1]\n    for i in range(2, n+1):\n        fibonacci.append(fibonacci[i-1] + fibonacci[i-2])\n    return fibonacci[n]\n\n# <func> # Python \n# Write a function to find the n'th Lucas number.\ndef lucas(n):\n    lucas = [1, 1]\n    for i in range(2, n+1):\n"], ["\n# <func> # Python \n# Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\n    for i in range(len(list)):\n        list[i] = string\n\n# <func> # Python \n# Write a function to insert a given string at the end of all items in a list.\ndef add_string(list,string):\n    for i in range(len(list)):\n        list[i] = string\n\n# <func> # Python \n# Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\n    for i in range(len(list)):\n        list[i] = string\n\n# <func> # Python \n# Write a function to insert a given string at the end of all items in a list.\ndef add_string(list,string):\n    for i in range(len(list)):\n        list[i] = string\n\n# <func> # Python \n# Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\n    for i in range(len(list)):\n        list[i] = string\n\n# <func> # Python \n# Write a function to insert a given string at the end of all items in a list.\ndef add_string(list,string):\n    for i in range(len(list)):\n        list[i] = string\n\n# <func> # Python \n# Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\n    for i in range(len(list)):\n        list[i] = string\n\n# <func> # Python \n# Write a function to insert a given string at the end of all items in a list.\ndef add_string(list,string):\n    for i in range(len(list)):\n        list[i] = string\n\n# <func> # Python \n# Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\n    for i in range(len"], ["\n# <func> # Python \n# Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\n    return {l1[i]: l2[i] for i in range(len(l1))} + l3\n\n# <func> # Python \n# Write a function to convert a list of lists to a nested dictionary.\ndef convert_list_to_dict(l):\n    return {l[i]: l[i + 1] for i in range(len(l) - 1)}\n\n# <func> # Python \n# Write a function to convert a list of lists to a dictionary.\ndef convert_list_to_dict(l):\n    return {l[i]: l[i + 1] for i in range(len(l) - 1)}\n\n# <func> # Python \n# Write a function to convert a list of lists to a dictionary.\ndef convert_list_to_dict(l):\n    return {l[i]: l[i + 1] for i in range(len(l) - 1)}\n\n# <func> # Python \n# Write a function to convert a list of lists to a dictionary.\ndef convert_list_to_dict(l):\n    return {l[i]: l[i + 1] for i in range(len(l) - 1)}\n\n# <func> # Python \n# Write a function to convert a list of lists to a dictionary.\ndef convert_list_to_dict(l):\n    return {l[i]: l[i + 1] for i in range(len(l) - 1)}\n\n# <func> # Python \n# Write a function to convert a list of lists to a dictionary.\ndef convert_list_to_dict(l):\n    return {l[i]: l[i + 1] for i in range(len(l) - 1)}\n\n# <func> # Python \n# Write a function to convert a list of lists to a dictionary.\ndef convert_list_to_dict(l):\n    return {l[i]: l[i + 1] for i in range(len"], ["\n# <func> # Python \n# Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\n    # Your code here\n    return max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n\n# Test your function"], ["\n# <func> # Python \n# Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n\n# <func> # Java\n# Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n\n# <func> # C\n# Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n\n# <func> # C++\n# Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n\n# <func> # Go\n# Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n\n# <func> # Haskell\n# Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n\n# <func> # Julia\n# Write a function to find the list with maximum length using lambda"], ["\n# <func> # Python \n# Write a function to check if given tuple is distinct or not.\ndef check_distinct(test_tup):\n    if len(test_tup) == 0:\n        return True\n    else:\n        for i in range(len(test_tup)):\n            if test_tup[i] != test_tup[i+1]:\n                return False\n        return True\n\n# <func> # Python \n# Write a function to check if given tuple is sorted or not.\ndef check_sorted(test_tup):\n    if len(test_tup) == 0:\n        return True\n    else:\n        for i in range(len(test_tup)):\n            if test_tup[i] != test_tup[i+1]:\n                return False\n        return True\n\n# <func> # Python \n# Write a function to check if given tuple is unique or not.\ndef check_unique(test_tup):\n    if len(test_tup) == 0:\n        return True\n    else:\n        for i in range(len(test_tup)):\n            if test_tup[i] != test_tup[i+1]:\n                return False\n        return True\n\n# <func> # Python \n# Write a function to check if given tuple is palindrome or not.\ndef check_palindrome(test_tup):\n    if len(test_tup) == 0:\n        return True\n    else:\n        for i in range(len(test_tup)):\n            if test_tup[i] != test_tup[i][::-1]:\n                return False\n        return True\n\n# <func> # Python \n# Write a function to check if given tuple is palindrome or not.\ndef check_palindrome(test_tup):\n    if len(test_tup) == 0:\n        return True\n    else:\n        for i in range(len(test_tup)):\n            if test_tup[i] != test_tup[i][::-1]:\n                return False\n        return True\n\n#"], ["\n# <func> # Python \n# Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n    str1 = str1.lower()\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"'\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\"-\",\"\")\n    str1 = str1.replace(\"_\",\"\")\n    str1 = str1.replace(\"$\",\"\")\n    str1 = str1.replace(\"%\",\"\")\n    str1 = str1.replace(\"^\",\"\")\n    str1 = str1.replace(\"&\",\"\")\n    str1 = str1.replace(\"*\",\"\")\n    str1 = str1.replace(\"+\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\":\",\"\")\n    str1 = str1.replace(\";\",\"\")\n    str1 = str1.replace(\":\",\"\")\n   "], ["import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\n\n# <func> # Python \n# Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string):\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n\n# <func> # Java\n# Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string):\n    if re.search(regex, string):\n        return true\n    else:\n        return false\n\n# <func> # C\n# Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string):\n    if re.search(regex, string):\n        return true\n    else:\n        return false\n\n# <func> # C++\n# Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string):\n    if re.search(regex, string):\n        return true\n    else:\n        return false\n\n# <func> # C#\n# Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string):\n    if re.search(regex, string):\n        return true\n    else:\n        return false\n\n# <func> # Go\n# Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string):\n    if re.search(regex, string):\n        return true\n    else:\n        return false\n\n# <func> # Haskell\n# Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string):\n    if re.search(regex, string):\n        return true\n    else:\n        return false\n\n# <func> # Java\n# Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string):\n    if re.search(regex"], ["\n# <func> # Python \n# Write a function to find the median of three specific numbers.\ndef median_numbers(a,b,c):\n    if len(a) == 1:\n        return a[0]\n    elif len(b) == 1:\n        return b[0]\n    elif len(c) == 1:\n        return c[0]\n    else:\n        return (a[len(a)-1]+b[len(b)-1]+c[len(c)-1])/3\n\n# <func> # Python \n# Write a function to find the mean of three specific numbers.\ndef mean_numbers(a,b,c):\n    return (a+b+c)/3\n\n# <func> # Python \n# Write a function to find the mode of three specific numbers.\ndef mode_numbers(a,b,c):\n    return max(a,b,c)\n\n# <func> # Python \n# Write a function to find the range of three specific numbers.\ndef range_numbers(a,b,c):\n    return max(a,b,c) - min(a,b,c)\n\n# <func> # Python \n# Write a function to find the sum of three specific numbers.\ndef sum_numbers(a,b,c):\n    return a+b+c\n\n# <func> # Python \n# Write a function to find the product of three specific numbers.\ndef product_numbers(a,b,c):\n    return a*b*c\n\n# <func> # Python \n# Write a function to find the sum of the squares of three specific numbers.\ndef sum_squares_numbers(a,b,c):\n    return a**2 + b**2 + c**2\n\n# <func> # Python \n# Write a function to find the sum of the cubes of three specific numbers.\ndef sum_cubes_numbers(a,b,c):\n    return a**3 + b**3 + c**3\n\n# <func> # Python \n# Write a function to find the sum of the cubes of three specific numbers.\ndef sum_cubes_numbers(a,b,c):"], ["\n# <func> # Python \n# Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n    sum = 0\n    for n in nums:\n        sum += n\n    return sum\n\n# <func> # Python \n# Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n    sum = 0\n    for n in nums:\n        sum += n\n    return sum\n\n# <func> # Python \n# Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n    sum = 0\n    for n in nums:\n        sum += n\n    return sum\n\n# <func> # Python \n# Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n    sum = 0\n    for n in nums:\n        sum += n\n    return sum\n\n# <func> # Python \n# Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n    sum = 0\n    for n in nums:\n        sum += n\n    return sum\n\n# <func> # Python \n# Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n    sum = 0\n    for n in nums:\n        sum += n\n    return sum\n\n# <func> # Python \n# Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n    sum = 0\n    for n in nums:\n        sum += n\n    return sum\n\n# <func> # Python \n# Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n    sum = 0\n    for n in nums:\n        sum += n\n    return sum\n\n# <func> #"], ["\n# <func> # Python \n# Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n    return (test_tup1[0] ^ test_tup2[0])\n\n# <func> # Python \n# Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n    return (test_tup1[0] ^ test_tup2[0])\n\n# <func> # Python \n# Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n    return (test_tup1[0] ^ test_tup2[0])\n\n# <func> # Python \n# Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n    return (test_tup1[0] ^ test_tup2[0])\n\n# <func> # Python \n# Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n    return (test_tup1[0] ^ test_tup2[0])\n\n# <func> # Python \n# Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n    return (test_tup1[0] ^ test_tup2[0])\n\n# <func> # Python \n# Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n    return (test_tup1[0] ^ test_tup2[0])\n\n# <func> # Python \n# Write a function to perform the mathematical bitwise x"], ["\n# <func> # Python \n# Write a function to extract the frequency of unique tuples in the given list order irrespective.\ndef extract_freq(test_list):\n    freq = {}\n    for i in test_list:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\n\n# +\n# Write a function to extract the frequency of unique tuples in the given list order irrespective.\n# def extract_freq(test_list):\n#     freq = {}\n#     for i in test_list:\n#         if i in freq:\n#             freq[i] += 1\n#         else:\n#             freq[i] = 1\n#     return freq\n\n# +\n# Write a function to extract the frequency of unique tuples in the given list order irrespective.\n# def extract_freq(test_list):\n#     freq = {}\n#     for i in test_list:\n#         if i in freq:\n#             freq[i] += 1\n#         else:\n#             freq[i] = 1\n#     return freq\n\n# +\n# Write a function to extract the frequency of unique tuples in the given list order irrespective.\n# def extract_freq(test_list):\n#     freq = {}\n#     for i in test_list:\n#         if i in freq:\n#             freq[i] += 1\n#         else:\n#             freq[i] = 1\n#     return freq\n\n# +\n# Write a function to extract the frequency of unique tuples in the given list order irrespective.\n# def extract_freq(test_list):\n#     freq = {}\n#     for i in test_list:\n#         if i in freq:\n#             freq[i] += 1\n#         else:\n#             freq[i] = 1\n#     return freq\n\n# +\n# Write a function to extract the frequency of unique tuples in the given list order irrespective.\n#"], ["\n# <func> # Python \n# Write a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n    # Write your code here\n    return test_tup1 + test_tup2\n\n\n# +\n# Write a function to find the maximum element in a given list.\ndef max_element(list_val):\n    # Write your code here\n    return max(list_val)\n\n\n# -\n\n# Write a function to find the minimum element in a given list.\ndef min_element(list_val):\n    # Write your code here\n    return min(list_val)\n\n\n# +\n# Write a function to find the sum of all elements in a given list.\ndef sum_elements(list_val):\n    # Write your code here\n    return sum(list_val)\n\n\n# -\n\n# Write a function to find the average of all elements in a given list.\ndef avg_elements(list_val):\n    # Write your code here\n    return sum(list_val) / len(list_val)\n\n\n# +\n# Write a function to find the maximum element in a given list.\ndef max_element(list_val):\n    # Write your code here\n    return max(list_val)\n\n\n# -\n\n# Write a function to find the minimum element in a given list.\ndef min_element(list_val):\n    # Write your code here\n    return min(list_val)\n\n\n# +\n# Write a function to find the sum of all elements in a given list.\ndef sum_elements(list_val):\n    # Write your code here\n    return sum(list_val)\n\n\n# -\n\n# Write a function to find the average of all elements in a given list.\ndef avg_elements(list_val):\n    # Write your code here\n    return sum(list_val) / len(list_val)\n\n\n# +\n# Write a function to find the maximum element in a given list.\ndef max_element(list_val):\n    # Write your code here\n    return max(list"], ["\n# <func> # Python \n# Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p):\n    if n == 0 or r == 0 or p == 0:\n        return 0\n    elif r > n:\n        return 0\n    elif r > n and p > 0:\n        return ncr(n-r, r, p)\n    else:\n        return ncr(n-r, r, p) % p\n\n# <func> # C\n# Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p):\n    if n == 0 or r == 0 or p == 0:\n        return 0\n    elif r > n:\n        return 0\n    elif r > n and p > 0:\n        return ncr(n-r, r, p)\n    else:\n        return ncr(n-r, r, p) % p\n\n# <func> # C\n# Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p):\n    if n == 0 or r == 0 or p == 0:\n        return 0\n    elif r > n:\n        return 0\n    elif r > n and p > 0:\n        return ncr(n-r, r, p)\n    else:\n        return ncr(n-r, r, p) % p\n\n# <func> # C\n# Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p):\n    if n == 0 or r == 0 or p == 0:\n        return 0\n    elif r > n:\n        return 0\n    elif r > n and p > 0:\n        return ncr(n-r, r, p)\n    else:\n        return ncr(n-r, r, p) % p\n\n# <func> # C\n# Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p):\n"], ["import re\r\n\n# <func> # Python \n# Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\n    # regex pattern to check if a url is valid or not\n    pattern = r'^(?:http|ftp)s?://'\n    return re.match(pattern, str) is not None\n\n# <func> # Java\n# Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\n    # regex pattern to check if a url is valid or not\n    pattern = r'^(?:http|ftp)s?://'\n    return re.match(pattern, str) is not None\n\n# <func> # C\n# Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\n    # regex pattern to check if a url is valid or not\n    pattern = r'^(?:http|ftp)s?://'\n    return re.match(pattern, str) is not None\n\n# <func> # C++\n# Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\n    # regex pattern to check if a url is valid or not\n    pattern = r'^(?:http|ftp)s?://'\n    return re.match(pattern, str) is not null\n\n# <func> # C#\n# Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\n    # regex pattern to check if a url is valid or not\n    pattern = r'^(?:http|ftp)s?://'\n    return re.match(pattern, str) is not null\n\n# <func> # JavaScript\n# Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\n    # regex pattern to check if a url is valid or not\n    pattern = r'^(?:http|ftp)s?://'\n    return re.match(pattern, str) is not null\n\n# <func> # PHP\n# Write a function to check if a url is valid or not using regex."], ["\n# <func> # Python \n# Write a python function to find the minimum of two numbers.\ndef minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b\n\n# <func> # Java\n# Write a Java function to find the minimum of two numbers.\npublic static int minimum(int a, int b) {\n    if (a < b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\n# <func> # C\n# Write a C function to find the minimum of two numbers.\n# int minimum(int a, int b) {\n#     if (a < b) {\n#         return a;\n#     } else {\n#         return b;\n#     }\n# }\n\n# <func> # C++\n# Write a C++ function to find the minimum of two numbers.\n# int minimum(int a, int b) {\n#     if (a < b) {\n#         return a;\n#     } else {\n#         return b;\n#     }\n# }\n\n# <func> # JavaScript\n# Write a JavaScript function to find the minimum of two numbers.\nfunction minimum(a, b) {\n    if (a < b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\n# <func> # Go\n# Write a Go function to find the minimum of two numbers.\nfunc minimum(a, b) {\n    if a < b {\n        return a\n    } else {\n        return b\n    }\n}\n\n# <func> # R\n# Write a R function to find the minimum of two numbers.\n# minimum <- function(a, b) {\n#     if (a < b) {\n#         return a\n#     } else {\n#         return b\n#     }\n# }\n\n# <func> # Ruby\n# Write a Ruby function to find the minimum of two numbers.\ndef minimum(a, b)\n  if a < b\n    return a\n  else\n    return b\n  end\nend\n\n# <func> # Swift\n# Write a Swift function to find the minimum of two numbers.\n"], ["\n# <func> # Python \n# Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex,tuple1):\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check whether an element exists within a list.\ndef check_list(list1,list2):\n    if list1 in list2:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check whether an element exists within a dictionary.\ndef check_dict(dict1,dict2):\n    if dict1 in dict2:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check whether an element exists within a set.\ndef check_set(set1,set2):\n    if set1 in set2:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check whether an element exists within a string.\ndef check_string(string1,string2):\n    if string1 in string2:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check whether an element exists within a list of tuples.\ndef check_list_tuple(list1,list2):\n    if list1 in list2:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check whether an element exists within a list of lists.\ndef check_list_list(list1,list2):\n    if list1 in list2:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check whether an element exists within a list of dictionaries.\ndef check_list_dict(list1,list2):\n    if list1 in list2:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check whether an element exists within a list of sets.\ndef check_list_set(list1,list2):"], ["\n# <func> # Python \n# Write a python function to find the parity of a given number.\ndef find_Parity(x):\n    if x % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n\n# <func> # Java \n# Write a Java function to find the parity of a given number.\npublic static String findParity(int x) {\n    if (x % 2 == 0) {\n        return \"even\";\n    } else {\n        return \"odd\";\n    }\n}\n\n# <func> # C++\n# Write a C++ function to find the parity of a given number.\nint findParity(int x) {\n    if (x % 2 == 0) {\n        return \"even\";\n    } else {\n        return \"odd\";\n    }\n}\n\n# <func> # JavaScript\n# Write a JavaScript function to find the parity of a given number.\nfunction findParity(x) {\n    if (x % 2 == 0) {\n        return \"even\";\n    } else {\n        return \"odd\";\n    }\n}\n\n# <func> # Python \n# Write a Python function to find the parity of a given number.\ndef find_Parity(x):\n    if x % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n\n# <func> # Java \n# Write a Java function to find the parity of a given number.\npublic static String findParity(int x) {\n    if (x % 2 == 0) {\n        return \"even\";\n    } else {\n        return \"odd\";\n    }\n}\n\n# <func> # C++\n# Write a C++ function to find the parity of a given number.\nint findParity(int x) {\n    if (x % 2 == 0) {\n        return \"even\";\n    } else {\n        return \"odd\";\n    }\n}\n\n# <func> # JavaScript\n# Write a JavaScript function to find the parity of a given number.\nfunction findParity(x) {\n   "], ["\n# <func> # Python \n# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n    # Your code here\n    # rearrange_bigger(n)\n    return n\n\n# Test"], ["import heapq\r\n\n# <func> # Python \n# Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k):\n    # Write your code here\n    nums1.sort()\n    nums2.sort()\n    pairs = []\n    for i in range(k):\n        for j in range(k):\n            if i != j:\n                if nums1[i] < nums2[j]:\n                    pairs.append((nums1[i], nums2[j]))\n    return pairs\n\n\n# <func> # C++\n# Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k):\n    # Write your code here\n    nums1.sort()\n    nums2.sort()\n    pairs = []\n    for i in range(k):\n        for j in range(k):\n            if i != j:\n                if nums1[i] < nums2[j]:\n                    pairs.append((nums1[i], nums2[j]))\n    return pairs\n\n\n# <func> # Java\n# Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k):\n    # Write your code here\n    nums1.sort()\n    nums2.sort()\n    pairs = []\n    for i in range(k):\n        for j in range(k):\n            if i != j:\n                if nums1[i] < nums2[j]:\n                    pairs.append((nums1[i], nums2[j]))\n    return pairs\n\n\n# <func> # Python \n# Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k):\n"], ["\n# <func> # Python \n# Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\n    min_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            min_product = min(min_product, list1[i][0] * list1[j][0])\n    return min_product\n\n# <func> # Python \n# Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_product = max(max_product, list1[i][0] * list1[j][0])\n    return max_product\n\n# <func> # Python \n# Write a function to find the maximum sum of a sub-list within a given list.\ndef max_sum_sublist(list1):\n    max_sum = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_sum = max(max_sum, list1[i][0] + list1[j][0])\n    return max_sum\n\n# <func> # Python \n# Write a function to find the maximum sum of a sub-list within a given list.\ndef max_sum_sublist(list1):\n    max_sum = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_sum = max(max_sum, list1[i][0] + list1[j][0])\n    return max_sum\n\n# <func> # Python \n# Write a function to find the maximum sum of a sub-list within a given list.\ndef max_sum_sublist(list1):\n    max_sum = 0\n    for i in range(len(list1)):\n        for j in range(i+1"], ["\n# <func> # Python \n# Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val\n\n# <func> # Python \n# Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n\n# <func> # Python \n# Write a function to find the average value in a given heterogeneous list.\ndef avg_val(listval):\n    sum_val = 0\n    for val in listval:\n        sum_val += val\n    return sum_val / len(listval)\n\n# <func> # Python \n# Write a function to find the median value in a given heterogeneous list.\ndef median_val(listval):\n    if len(listval) % 2 == 0:\n        mid_val = (listval[len(listval) // 2] + listval[len(listval) // 2 - 1]) / 2\n    else:\n        mid_val = listval[len(listval) // 2]\n    return mid_val\n\n# <func> # Python \n# Write a function to find the mode value in a given heterogeneous list.\ndef mode_val(listval):\n    mode_val = 0\n    for val in listval:\n        if listval.count(val) > 1:\n            mode_val = val\n    return mode_val\n\n# <func> # Python \n# Write a function to find the longest common substring in a given heterogeneous list.\ndef longest_common_substring(listval):\n    longest_val = \"\"\n    for val in listval:\n        for sub_val in longest_val:\n            if sub_val == val:\n                break\n        else:\n            longest_val += val\n    return longest_val\n"], ["import re\r\n\n# <func> # Python \n# Write a function to convert the given snake case string to camel case string by using regex.\ndef snake_to_camel(word):\n    word = word.replace('_', ' ')\n    return word.title()\n\n# <func> # Java\n# Write a function to convert the given snake case string to camel case string by using regex.\ndef snake_to_camel(word):\n    word = word.replace('_', ' ')\n    return word.title()\n\n# <func> # JavaScript\n# Write a function to convert the given snake case string to camel case string by using regex.\nfunction snake_to_camel(word) {\n    return word.replace('_', ' ').toLowerCase().replace(' ', '').toUpperCase();\n}\n\n# <func> # C\n# Write a function to convert the given snake case string to camel case string by using regex.\ndef snake_to_camel(word):\n    return word.replace('_', ' ').toLowerCase().replace(' ', '').toUpperCase();\n\n# <func> # C++\n# Write a function to convert the given snake case string to camel case string by using regex.\nvoid snake_to_camel(string& word) {\n    word.erase(std::remove_if(word.begin(), word.end(), ::isspace), word.end());\n    word.erase(std::remove_if(word.begin(), word.end(), ::isalnum), word.end());\n    word.erase(std::remove_if(word.begin(), word.end(), ::isdigit), word.end());\n    word.erase(std::remove_if(word.begin(), word.end(), ::islower), word.end());\n    word.erase(std::remove_if(word.begin(), word.end(), ::isupper), word.end());\n    word.erase(std::remove_if(word.begin(), word.end(), ::ispunct), word.end());\n    word.erase(std::remove_if(word.begin(), word.end(), ::isalnum),"], ["\n# <func> # Python \n# Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n    return [i for i in l if i % 2 == 0]\n\n# <func> # Java\n# Write a Java function to remove odd numbers from a given list.\ndef remove_odd(l):\n    return [i for i in l if i % 2 == 0]\n\n# <func> # JavaScript\n# Write a JavaScript function to remove odd numbers from a given list.\nfunction remove_odd(l) {\n    return l.filter(function(i) {\n        return i % 2 == 0;\n    });\n}\n\n# <func> # C\n# Write a C function to remove odd numbers from a given list.\nvoid remove_odd(int l[]) {\n    for (int i = 0; i < l.length; i++) {\n        if (l[i] % 2 == 0) {\n            l[i] = l[i] + 1;\n        }\n    }\n}\n\n# <func> # C++\n# Write a C++ function to remove odd numbers from a given list.\nvoid remove_odd(int l[]) {\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] % 2 == 0) {\n            l[i] = l[i] + 1;\n        }\n    }\n}\n\n# <func> # Go\n# Write a Go function to remove odd numbers from a given list.\nfunc remove_odd(l []int) []int {\n    for i, num := range l {\n        if num % 2 == 0 {\n            l = append(l, num + 1)\n        }\n    }\n    return l\n}\n\n# <func> # R\n# Write a R function to remove odd numbers from a given list.\nremove_odd <- function(l) {\n    l <- lapply(l, function(i) {\n        if (i %% 2 == 0) {\n            return(i + 1)\n        }\n    })\n    return(l)\n}\n\n#"], ["\n# <func> # Python \n# Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n    return list1[n-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# <func> # Python \n# Write a function to check if a given string is a palindrome.\ndef is_palindrome(string):\n"], ["\n# <func> # Python \n# Write a python function to check whether the value exists in a sequence or not.\ndef overlapping(list1,list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n# <func> # Java\n# Write a function to check whether the value exists in a sequence or not.\npublic boolean overlapping(int[] list1, int[] list2) {\n    for (int i : list1) {\n        if (list2.contains(i)) {\n            return true;\n        }\n    }\n    return false;\n}\n\n# <func> # C\n# Write a function to check whether the value exists in a sequence or not.\n# int[] list1;\n# int[] list2;\n# int overlapping(int[] list1, int[] list2) {\n#     for (int i : list1) {\n#         if (list2.contains(i)) {\n#             return true;\n#         }\n#     }\n#     return false;\n# }\n\n# <func> # C++\n# Write a function to check whether the value exists in a sequence or not.\n# int[] list1;\n# int[] list2;\n# int overlapping(int[] list1, int[] list2) {\n#     for (int i : list1) {\n#         if (list2.find(i) != list2.end()) {\n#             return true;\n#         }\n#     }\n#     return false;\n# }\n\n# <func> # C#\n# Write a function to check whether the value exists in a sequence or not.\n# int[] list1;\n# int[] list2;\n# int overlapping(int[] list1, int[] list2) {\n#     foreach (int i in list1) {\n#         if (list2.Contains(i)) {\n#             return true;\n#         }\n#     }\n#     return false;\n# }\n\n# <func> # F#\n# Write a function to check whether the value exists in a sequence or not.\n# int[] list1;\n# int[] list2;\n"], ["\n# <func> # Python \n# Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product\n\n# <func> # Java\n# Write a Java function to find a pair with highest product from a given array of integers.\npublic int maxProduct(int[] arr) {\n    int maxProduct = 0;\n    for (int i = 0; i < arr.length; i++) {\n        for (int j = i + 1; j < arr.length; j++) {\n            if (arr[i] * arr[j] > maxProduct) {\n                maxProduct = arr[i] * arr[j];\n            }\n        }\n    }\n    return maxProduct;\n}\n\n# <func> # C++\n# Write a C++ function to find a pair with highest product from a given array of integers.\n#\n# <func> # C++\n# Write a C++ function to find a pair with highest product from a given array of integers.\n#\n# <func> # C++\n# Write a C++ function to find a pair with highest product from a given array of integers.\n#\n# <func> # C++\n# Write a C++ function to find a pair with highest product from a given array of integers.\n#\n# <func> # C++\n# Write a C++ function to find a pair with highest product from a given array of integers.\n#\n# <func> # C++\n# Write a C++ function to find a pair with highest product from a given array of integers.\n#\n# <func> # C++\n# Write a C++ function to find a pair with highest product from a given array of integers.\n#\n# <func> # C++\n# Write a C++ function to find a pair with highest product from a given array of integers.\n#\n# <func> # C++\n# Write a C++ function to"], ["MAX = 1000000\r\n\n# <func> # Python \n# Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\ndef breakSum(n):\n    if n == 0:\n        return 0\n    else:\n        return max(breakSum(n//3) + breakSum(2*n//3) + breakSum(n//3))\n\n# <func> # C++\n# Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\ndef breakSum(n):\n    if n == 0:\n        return 0\n    else:\n        return max(breakSum(n//3) + breakSum(2*n//3) + breakSum(n//3))\n\n# <func> # Java\n# Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\ndef breakSum(n):\n    if n == 0:\n        return 0\n    else:\n        return max(breakSum(n//3) + breakSum(2*n//3) + breakSum(n//3))\n\n# <func> # JavaScript\n# Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\ndef breakSum(n):\n    if n == 0:\n        return 0\n    else:\n        return max(breakSum(n//3) + breakSum(2*n//3) + breakSum(n//3))\n\n# <func> # Python 3\n# Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\ndef breakSum(n):\n    if n == 0:\n        return 0\n    else:\n        return max(breakSum(n//3) + breakSum(2*n//3) + breakSum(n//3))\n\n# <func> # C++\n# Write a function to find the maximum sum we can"], ["\n# <func> # Python \n# Write a function to find common first element in given list of tuple.\ndef group_tuples(Input):\n    # Create a list of tuples\n    tuples = []\n    for i in Input:\n        tuples.append(i)\n    # Sort the list of tuples\n    tuples.sort()\n    # Create a list of first elements of each tuple\n    first_elements = []\n    for i in tuples:\n        first_elements.append(i[0])\n    # Return the list of first elements\n    return first_elements\n\n# Test the function"], ["\n# <func> # Python \n# Write a python function to find the sublist having maximum length.\ndef Find_Max(lst):\n    max_length = 0\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n\n# <func> # C\n# Write a C function to find the sublist having maximum length.\ndef Find_Max(lst):\n    max_length = 0\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n\n# <func> # Java\n# Write a Java function to find the sublist having maximum length.\ndef Find_Max(lst):\n    max_length = 0\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n\n# <func> # JavaScript\n# Write a JavaScript function to find the sublist having maximum length.\nfunction Find_Max(lst) {\n    let max_length = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i].length > max_length) {\n            max_length = lst[i].length;\n        }\n    }\n    return max_length;\n}\n\n# <func> # Python 3\n# Write a Python 3 function to find the sublist having maximum length.\ndef Find_Max(lst):\n    max_length = 0\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n\n# <func> # C++\n# Write a C++ function to find the sublist having maximum length.\ndef Find_Max(lst):\n    max_length = 0\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n\n# <func> # Java\n# Write a Java function to find the sublist having maximum length.\ndef Find_Max(lst):"], ["\n# <func> # Python \n# Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\n    total = 0\n    for i in list1:\n        total += round(i)\n    return total * len(list1)\n"], ["\n# <func> # Python \n# Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n"], ["\n# <func> # Python \n# Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n    return test_tup[0] + test_tup[1] + test_tup[2]\n\n# <func> # Python \n# Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n    return test_tup[0] + test_tup[1] + test_tup[2]\n\n# <func> # Python \n# Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n    return test_tup[0] + test_tup[1] + test_tup[2]\n\n# <func> # Python \n# Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n    return test_tup[0] + test_tup[1] + test_tup[2]\n\n# <func> # Python \n# Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n    return test_tup[0] + test_tup[1] + test_tup[2]\n\n# <func> # Python \n# Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n    return test_tup[0] + test_tup[1] + test_tup[2]\n\n# <func> # Python \n# Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n    return test_tup[0] + test_tup[1] + test_tup[2]\n\n# <func> # Python \n# Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n    return test_tup[0] + test_tup[1] + test_tup[2]\n\n# <func> #"], ["\n# <func> # Python \n# Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n"], ["\n# <func> # Python \n# Write a function to solve gold mine problem.\ndef get_maxgold(gold, m, n):\n    # Write your code here\n    # gold = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # m = 10\n    # n = 10\n    # maxgold = 0\n    # for i in range(1, m + 1):\n    #     for j in range(1, n + 1):\n    #         if gold[i - 1] + gold[j - 1] <= m:\n    #             maxgold = max(maxgold, gold[i - 1] + gold[j - 1])\n    # return maxgold\n    # print(maxgold)\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n    # return maxgold\n"], ["\n# <func> # Python \n# Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\n    return test_tuple[1:]\n\n# <func> # Python \n# Write a function to extract only the front index element of each string in the given tuple.\ndef extract_front(test_tuple):\n    return test_tuple[:1]\n\n# <func> # Python \n# Write a function to extract only the middle index element of each string in the given tuple.\ndef extract_middle(test_tuple):\n    return test_tuple[1:-1]\n\n# <func> # Python \n# Write a function to extract only the last index element of each string in the given tuple.\ndef extract_last(test_tuple):\n    return test_tuple[-1]\n\n# <func> # Python \n# Write a function to extract only the first index element of each string in the given tuple.\ndef extract_first(test_tuple):\n    return test_tuple[0]\n\n# <func> # Python \n# Write a function to extract only the last index element of each string in the given tuple.\ndef extract_last_rev(test_tuple):\n    return test_tuple[-1][::-1]\n\n# <func> # Python \n# Write a function to extract only the first index element of each string in the given tuple.\ndef extract_first_rev(test_tuple):\n    return test_tuple[0][::-1]\n\n# <func> # Python \n# Write a function to extract only the last index element of each string in the given tuple.\ndef extract_last_rev_rev(test_tuple):\n    return test_tuple[-1][::-1][::-1]\n\n# <func> # Python \n# Write a function to extract only the first index element of each string in the given tuple.\ndef extract_first_rev_rev(test_tuple):\n    return test_tuple[0][::-1][::-1]\n\n# <func> # Python \n# Write a function to extract only the last index element of each string in the given tuple.\ndef extract_last_rev_rev_rev"], ["\n# <func> # Python \n# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n\n# <func> # Java\n# Write a method that takes a list and a number and returns a list of the elements of the list that are less than the number.\ndef less_than_number(list, number):\n    less_than_list = []\n    for element in list:\n        if element < number:\n            less_than_list.append(element)\n    return less_than_list\n\n# <func> # Python \n# Write a function that takes a list and a number and returns a list of the elements of the list that are less than the number.\ndef less_than_number(list, number):\n    less_than_list = []\n    for element in list:\n        if element < number:\n            less_than_list.append(element)\n    return less_than_list\n\n# <func> # Java\n# Write a method that takes a list and a number and returns a list of the elements of the list that are greater than the number.\ndef greater_than_number(list, number):\n    greater_than_list = []\n    for element in list:\n        if element > number:\n            greater_than_list.append(element)\n    return greater_than_list\n\n# <func> # Python \n# Write a function that takes a list and a number and returns a list of the elements of the list that are greater than the number.\ndef greater_than_number(list, number):\n    greater_than_list = []\n    for element in list:\n        if element > number:\n            greater_than_list.append(element)\n    return greater_than_list\n\n# <func> # Java\n# Write a method that takes a list and a number and returns a list of the elements of the list that are greater than the number.\ndef greater_than_number(list, number):\n    greater_than_list = []\n    for element in list:\n       "], ["\n# <func> # Python \n# Write a function to filter odd numbers using lambda function.\ndef filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 != 0]\n"], ["import re\r\n\n# <func> # Python \n# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n    # Your code here\n    return dt.strftime(\"%d-%m-%Y\")\n\n# <func> # Python \n# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n    # Your code here\n    return dt.strftime(\"%d-%m-%Y\")\n\n# <func> # Python \n# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n    # Your code here\n    return dt.strftime(\"%d-%m-%Y\")\n\n# <func> # Python \n# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n    # Your code here\n    return dt.strftime(\"%d-%m-%Y\")\n\n# <func> # Python \n# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n    # Your code here\n    return dt.strftime(\"%d-%m-%Y\")\n\n# <func> # Python \n# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n    # Your code here\n    return dt.strftime(\"%d-%m-%Y\")\n\n# <func> # Python \n# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n    # Your code here\n    return dt.strftime(\"%d-%m-%Y\")\n\n# <func> # Python \n# Write a function to convert a date of yyyy-mm-"], ["\n# <func> # Python \n# Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            j = i\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n        gap //= 2\n    return my_list\n\n# <func> # Python \n# Write a function to sort the given array by using quick sort.\ndef quick_sort(my_list):\n    if len(my_list) <= 1:\n        return my_list\n    else:\n        pivot = my_list[0]\n        less = [i for i in my_list[1:] if i <= pivot]\n        greater = [i for i in my_list[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater)\n\n# <func> # Python \n# Write a function to sort the given array by using insertion sort.\ndef insertion_sort(my_list):\n    for i in range(1, len(my_list)):\n        j = i\n        while j > 0 and my_list[j] < my_list[j - 1]:\n            my_list[j], my_list[j - 1] = my_list[j - 1], my_list[j]\n    return my_list\n\n# <func> # Python \n# Write a function to sort the given array by using bubble sort.\ndef bubble_sort(my_list):\n    while True:\n        swapped = False\n        for i in range(len(my_list) - 1):\n            if my_list[i] > my_list[i + 1]:\n                my_list[i], my_list[i + 1] = my_list[i + 1], my_list[i]\n                swapped ="], ["\n# <func> # Python \n# Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\n    return test_tup1 and test_tup2\n\n# Write a function to extract the elementwise and tuples from the given two tuples.\ndef or_tuples(test_tup1, test_tup2):\n    return test_tup1 or test_tup2\n\n# Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_or_tuples(test_tup1, test_tup2):\n    return test_tup1 and test_tup2 or test_tup1 or test_tup2\n\n# Write a function to extract the elementwise and tuples from the given two tuples.\ndef not_tuples(test_tup1, test_tup2):\n    return not test_tup1 and not test_tup2\n\n# Write a function to extract the elementwise and tuples from the given two tuples.\ndef not_or_tuples(test_tup1, test_tup2):\n    return not test_tup1 or not test_tup2\n\n# Write a function to extract the elementwise and tuples from the given two tuples.\ndef not_and_tuples(test_tup1, test_tup2):\n    return not test_tup1 and not test_tup2\n\n# Write a function to extract the elementwise and tuples from the given two tuples.\ndef not_or_and_tuples(test_tup1, test_tup2):\n    return not test_tup1 or not test_tup2 or not test_tup1 and not test_tup2\n\n# Write a function to extract the elementwise and tuples from the given two tuples.\ndef not_or_or_tuples(test_tup1, test_tup2):\n    return not test_tup1 or not test_tup2 or not test_tup1 and not test_tup2\n\n# Write a function to"], ["\n# <func> # Python \n# Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c):\n    # Find the x-intercepts\n    x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n    # Find the y-intercepts\n    y1 = (-b + x1**2) / (2*x1)\n    y2 = (-b - x2**2) / (2*x2)\n    # Find the x- and y-intercepts\n    x_intercepts = [x1, x2]\n    y_intercepts = [y1, y2]\n    return x_intercepts, y_intercepts\n\n# Test the function\nx_intercepts, y_intercepts = parabola_directrix(1, 1, 1)"], ["\n# <func> # Python \n# Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n# <func> # Python \n# Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n# <func> # Python \n# Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n# <func> # Python \n# Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n# <func> # Python \n# Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n# <func> # Python \n# Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n# <func> # Python \n# Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n# <func> # Python \n# Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n    for i in list1"], ["\n# <func> # Python \n# Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\n    if base1 == base2:\n        return (base1 + base2) / 2\n    else:\n        return (base1 + base2) / 2 + height / 2\n\n# <func> # Java\n# Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\n    if base1 == base2:\n        return (base1 + base2) / 2\n    else:\n        return (base1 + base2) / 2 + height / 2\n\n# <func> # C++\n# Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\n    if base1 == base2:\n        return (base1 + base2) / 2\n    else:\n        return (base1 + base2) / 2 + height / 2\n\n# <func> # C\n# Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\n    if base1 == base2:\n        return (base1 + base2) / 2\n    else:\n        return (base1 + base2) / 2 + height / 2\n\n# <func> # C#\n# Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\n    if base1 == base2:\n        return (base1 + base2) / 2\n    else:\n        return (base1 + base2) / 2 + height / 2\n\n# <func> # F#\n# Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\n    if base1 == base2:\n        return (base1 + base2) / 2\n    else:\n        return (base1 + base2) / 2 + height / 2\n\n# <func> # Go\n"], ["\n# <func> # Python \n# Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n\n# Driver Code\narr = [1, 2, 3, 4, 5]\nnumber = 4"], ["import re\r\n\n# <func> # Python \n# Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n    # TODO: Write your code here\n    return text\n\n# <func> # Java\n# Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n    # TODO: Write your code here\n    return text\n\n# <func> # C\n# Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n    # TODO: Write your code here\n    return text\n\n# <func> # C++\n# Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n    # TODO: Write your code here\n    return text\n\n# <func> # JavaScript\n# Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n    # TODO: Write your code here\n    return text\n\n# <func> # Python \n# Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n    # TODO: Write your code here\n    return text\n\n# <func> # Java\n# Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n    # TODO: Write your code here\n    return text\n\n# <func> # C\n# Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n    # TODO: Write your code here\n    return text\n\n# <func> # C++\n# Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n    # TODO: Write your code here\n    return text\n\n# <func> # JavaScript\n# Write a function that matches a string that has an a followed by one or more b"], ["\n# <func> # Python \n# Write a python function to find the last digit of a given number.\ndef last_Digit(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10\n\n# <func> # Python \n# Write a python function to find the first digit of a given number.\ndef first_Digit(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10\n\n# <func> # Python \n# Write a python function to find the last two digits of a given number.\ndef last_TwoDigits(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 100\n\n# <func> # Python \n# Write a python function to find the first two digits of a given number.\ndef first_TwoDigits(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 100\n\n# <func> # Python \n# Write a python function to find the last three digits of a given number.\ndef last_ThreeDigits(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 1000\n\n# <func> # Python \n# Write a python function to find the first three digits of a given number.\ndef first_ThreeDigits(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 1000\n\n# <func> # Python \n# Write a python function to find the last four digits of a given number.\ndef last_FourDigits(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10000\n\n# <func> # Python \n# Write a python function to find the first four digits of a given number.\ndef first_FourDigits(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10000\n\n# <func> # Python \n# Write a"], ["\n# <func> # Python \n# Write a python function to print negative numbers in a list.\ndef neg_nos(list1):\n    for i in list1:\n        if i < 0:\n            print(i, end = ' ')\n\n\n# +\n# Write a python function to print positive numbers in a list.\ndef pos_nos(list1):\n    for i in list1:\n        if i > 0:\n            print(i, end = ' ')\n\n\n# -\n\n# Write a python function to print the sum of two lists.\ndef sum_lists(list1, list2):\n    sum = 0\n    for i in list1:\n        sum += i\n    for j in list2:\n        sum += j\n    return sum\n\n\n# Write a python function to print the difference of two lists.\ndef diff_lists(list1, list2):\n    diff = 0\n    for i in list1:\n        diff += i\n    for j in list2:\n        diff += j\n    return diff\n\n\n# Write a python function to print the product of two lists.\ndef prod_lists(list1, list2):\n    prod = 1\n    for i in list1:\n        prod *= i\n    for j in list2:\n        prod *= j\n    return prod\n\n\n# Write a python function to print the average of two lists.\ndef avg_lists(list1, list2):\n    sum = 0\n    for i in list1:\n        sum += i\n    for j in list2:\n        sum += j\n    return sum / len(list1)\n\n\n# Write a python function to print the maximum of two lists.\ndef max_lists(list1, list2):\n    max = 0\n    for i in list1:\n        if i > max:\n            max = i\n    for j in list2:\n        if j > max:\n            max = j\n    return max\n\n\n# Write a python function to print the minimum of two lists.\ndef min_lists(list1, list2):\n    min = 0\n    for i in list1:\n        if i < min:\n            min"], ["\n# <func> # Python \n# Write a function to remove odd characters in a string.\ndef remove_odd(str1):\n    return ''.join(filter(lambda x: x % 2 == 0, str1))\n\n# <func> # Python \n# Write a function to remove all the vowels from a string.\ndef remove_vowels(str1):\n    return ''.join(filter(lambda x: x not in 'aeiou', str1))\n\n# <func> # Python \n# Write a function to remove all the vowels from a string.\ndef remove_vowels(str1):\n    return ''.join(filter(lambda x: x not in 'aeiou', str1))\n\n# <func> # Python \n# Write a function to remove all the vowels from a string.\ndef remove_vowels(str1):\n    return ''.join(filter(lambda x: x not in 'aeiou', str1))\n\n# <func> # Python \n# Write a function to remove all the vowels from a string.\ndef remove_vowels(str1):\n    return ''.join(filter(lambda x: x not in 'aeiou', str1))\n\n# <func> # Python \n# Write a function to remove all the vowels from a string.\ndef remove_vowels(str1):\n    return ''.join(filter(lambda x: x not in 'aeiou', str1))\n\n# <func> # Python \n# Write a function to remove all the vowels from a string.\ndef remove_vowels(str1):\n    return ''.join(filter(lambda x: x not in 'aeiou', str1))\n\n# <func> # Python \n# Write a function to remove all the vowels from a string.\ndef remove_vowels(str1):\n    return ''.join(filter(lambda x: x not in 'aeiou', str1))\n\n# <func> # Python \n# Write a function to remove all the vowels from a string.\ndef remove_vowels(str1):\n    return ''.join(filter"], ["\n# <func> # Python \n# Write a function to count bidirectional tuple pairs.\ndef count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i != j and test_list[i] == test_list[j]:\n                count += 1\n    return count\n\n\n# +\n# Write a function to count the number of times a given word appears in a list of strings.\ndef count_word(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i] == test_list[i]:\n            count += 1\n    return count\n\n\n# -\n\n# Write a function to count the number of times a given word appears in a list of strings.\ndef count_word(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i] == test_list[i]:\n            count += 1\n    return count\n\n\n# +\n# Write a function to count the number of times a given word appears in a list of strings.\ndef count_word(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i] == test_list[i]:\n            count += 1\n    return count\n\n\n# -\n\n# Write a function to count the number of times a given word appears in a list of strings.\ndef count_word(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i] == test_list[i]:\n            count += 1\n    return count\n\n\n# +\n# Write a function to count the number of times a given word appears in a list of strings.\ndef count_word(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i] == test_list[i]:\n            count += 1\n    return count\n\n\n# -\n\n#"], ["\n# <func> # Python \n# Write a function to convert a list of multiple integers into a single integer.\ndef multiple_to_single(L):\n    return sum(L)\n\n# <func> # Java\n# Write a function to convert a list of multiple integers into a single integer.\ndef multiple_to_single(L):\n    return sum(L)\n\n# <func> # JavaScript\n# Write a function to convert a list of multiple integers into a single integer.\nfunction multiple_to_single(L) {\n    return L.reduce((a, b) => a + b, 0);\n}\n\n# <func> # C\n# Write a function to convert a list of multiple integers into a single integer.\n# C++\n# Write a function to convert a list of multiple integers into a single integer.\n# C#\n# Write a function to convert a list of multiple integers into a single integer.\n# Python\n# Write a function to convert a list of multiple integers into a single integer.\n# Java\n# Write a function to convert a list of multiple integers into a single integer.\n# JavaScript\n# Write a function to convert a list of multiple integers into a single integer.\n# C++\n# Write a function to convert a list of multiple integers into a single integer.\n# C#\n# Write a function to convert a list of multiple integers into a single integer.\n# Python\n# Write a function to convert a list of multiple integers into a single integer.\n# Java\n# Write a function to convert a list of multiple integers into a single integer.\n# JavaScript\n# Write a function to convert a list of multiple integers into a single integer.\n# C++\n# Write a function to convert a list of multiple integers into a single integer.\n# C#\n# Write a function to convert a list of multiple integers into a single integer.\n# Python\n# Write a function to convert a list of multiple integers into a single integer.\n# Java\n# Write a function to convert a list of multiple integers into a single integer.\n# JavaScript\n# Write a function to convert a list of multiple integers into a single integer.\n# C++\n# Write a function to convert a list of multiple integers into a single integer.\n# C#\n# Write a function to convert a list of multiple integers into"], ["import re\r\n\n# <func> # Python \n# Write a function to find all adverbs and their positions in a given sentence.\ndef find_adverb_position(text):\n    adverbs = []\n    for i in range(len(text)):\n        if text[i] == ' ':\n            continue\n        if text[i] == ':':\n            adverbs.append(i)\n    return adverbs\n\n# <func> # Java\n# Write a function to find all adverbs and their positions in a given sentence.\ndef find_adverb_position(text):\n    adverbs = []\n    for i in range(len(text)):\n        if text[i] == ' ':\n            continue\n        if text[i] == ':':\n            adverbs.append(i)\n    return adverbs\n\n# <func> # C\n# Write a function to find all adverbs and their positions in a given sentence.\ndef find_adverb_position(text):\n    adverbs = []\n    for i in range(len(text)):\n        if text[i] == ' ':\n            continue\n        if text[i] == ':':\n            adverbs.append(i)\n    return adverbs\n\n# <func> # C++\n# Write a function to find all adverbs and their positions in a given sentence.\ndef find_adverb_position(text):\n    adverbs = []\n    for i in range(len(text)):\n        if text[i] == ' ':\n            continue\n        if text[i] == ':':\n            adverbs.append(i)\n    return adverbs\n\n# <func> # C#\n# Write a function to find all adverbs and their positions in a given sentence.\ndef find_adverb_position(text):\n    adverbs = []\n    for i in range(len(text)):\n        if text[i] == ' ':\n            continue\n        if text[i] == ':':\n            adverbs.append(i)\n    return adverbs\n\n# <func> # Go\n# Write a function to find all adverbs and"], ["\n# <func> # Python \n# Write a function to find the surface area of a cube.\ndef surfacearea_cube(l):\n    return 6 * l * (l + 2)\n\n# Write a function to find the volume of a cube.\ndef volume_cube(l):\n    return l * l * l\n\n# Test the function"], ["from array import array\r\n\n# <func> # Python \n# Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums):\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count\n\n# <func> # Python \n# Write a function to find the ration of negative numbers in an array of integers.\ndef negative_count(nums):\n    count = 0\n    for i in nums:\n        if i < 0:\n            count += 1\n    return count\n\n# <func> # Python \n# Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums):\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count\n\n# <func> # Python \n# Write a function to find the ration of negative numbers in an array of integers.\ndef negative_count(nums):\n    count = 0\n    for i in nums:\n        if i < 0:\n            count += 1\n    return count\n\n# <func> # Python \n# Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums):\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count\n\n# <func> # Python \n# Write a function to find the ration of negative numbers in an array of integers.\ndef negative_count(nums):\n    count = 0\n    for i in nums:\n        if i < 0:\n            count += 1\n    return count\n\n# <func> # Python \n# Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums):\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count\n\n# <func> # Python \n# Write a function to find the ration of negative numbers in"], ["\n# <func> # Python \n# Write a python function to find the largest negative number from the given list.\ndef largest_neg(list1):\n    return max(list1)\n\n# <func> # Java\n# Write a Java function to find the largest negative number from the given list.\npublic static int largestNegative(int[] list) {\n    int max = Integer.MIN_VALUE;\n    for (int i : list) {\n        if (i < 0) {\n            max = Math.max(max, i);\n        }\n    }\n    return max;\n}\n\n# <func> # C\n# Write a C function to find the largest negative number from the given list.\nint largestNegative(int[] list) {\n    int max = INT_MIN;\n    for (int i : list) {\n        if (i < 0) {\n            max = Math.max(max, i);\n        }\n    }\n    return max;\n}\n\n# <func> # C++\n# Write a C++ function to find the largest negative number from the given list.\nint largestNegative(int[] list) {\n    int max = INT_MIN;\n    for (int i : list) {\n        if (i < 0) {\n            max = max > i ? max : i;\n        }\n    }\n    return max;\n}\n\n# <func> # JavaScript\n# Write a JavaScript function to find the largest negative number from the given list.\nfunction largestNegative(list) {\n    let max = Math.min(list[0], list[1], list[2], list[3], list[4], list[5], list[6], list[7], list[8], list[9], list[10], list[11], list[12], list[13], list[14], list[15]);\n    return max;\n}\n\n# <func> # Python \n# Write a Python function to find the largest negative number from the given list.\ndef largest_neg(list):\n    return max(list)\n\n# <func> # Java\n# Write a Java function to find the largest negative number from the given list.\npublic"], ["\n# <func> # Python \n# Write a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n    return [test_list[i:i+K] for i in range(len(test_list)-K+1)]\n\n# <func> # Python \n# Write a function to remove the first and last element in a given tuple list.\ndef trim_tuple_list(test_list):\n    return [test_list[1:-1]]\n\n# <func> # Python \n# Write a function to remove the first and last element in a given tuple list.\ndef trim_tuple_list_2(test_list):\n    return [test_list[1:-1], test_list[-1]]\n\n# <func> # Python \n# Write a function to remove the first and last element in a given tuple list.\ndef trim_tuple_list_3(test_list):\n    return [test_list[1:-1], test_list[-1], test_list[0]]\n\n# <func> # Python \n# Write a function to remove the first and last element in a given tuple list.\ndef trim_tuple_list_4(test_list):\n    return [test_list[1:-1], test_list[-1], test_list[0], test_list[1]]\n\n# <func> # Python \n# Write a function to remove the first and last element in a given tuple list.\ndef trim_tuple_list_5(test_list):\n    return [test_list[1:-1], test_list[-1], test_list[0], test_list[1], test_list[0]]\n\n# <func> # Python \n# Write a function to remove the first and last element in a given tuple list.\ndef trim_tuple_list_6(test_list):\n    return [test_list[1:-1], test_list[-1], test_list[0], test_list[1], test_list[0], test_list[1]]\n\n# <func> # Python \n# Write a function to remove the first and last element in a given tuple list.\ndef trim_tuple_list_7(test"], ["\n# <func> # Python \n# Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n    return test_tup1[0] * test_tup2[0] + test_tup1[1] * test_tup2[1]\n\n# <func> # Python \n# Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n    return test_tup1[0] * test_tup2[0] + test_tup1[1] * test_tup2[1]\n\n# <func> # Python \n# Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n    return test_tup1[0] * test_tup2[0] + test_tup1[1] * test_tup2[1]\n\n# <func> # Python \n# Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n    return test_tup1[0] * test_tup2[0] + test_tup1[1] * test_tup2[1]\n\n# <func> # Python \n# Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n    return test_tup1[0] * test_tup2[0] + test_tup1[1] * test_tup2[1]\n\n# <func> # Python \n# Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n    return test_tup1[0] * test_tup2[0] + test_tup1[1] * test_t"], ["from collections import Counter \r\n\n# <func> # Python \n# Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst):\n    return sum(lst[i] for i in range(len(lst)) if lst[i] in tup)\n\n# <func> # Python \n# Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst):\n    return sum(lst[i] for i in range(len(lst)) if lst[i] in tup)\n\n# <func> # Python \n# Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst):\n    return sum(lst[i] for i in range(len(lst)) if lst[i] in tup)\n\n# <func> # Python \n# Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst):\n    return sum(lst[i] for i in range(len(lst)) if lst[i] in tup)\n\n# <func> # Python \n# Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst):\n    return sum(lst[i] for i in range(len(lst)) if lst[i] in tup)\n\n# <func> # Python \n# Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst):\n    return sum(lst[i] for i in range(len(lst)) if lst[i] in tup)\n\n# <func> # Python \n# Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst):\n    return sum(lst[i] for i in range(len(lst)) if lst[i] in tup)\n\n# <func> # Python \n# Write a python function to count the occurence of all elements of list in a tuple."], ["\n# <func> # Python \n# Write a function to find cubes of individual elements in a list using lambda function.\ndef cube_nums(nums):\n    return [num**3 for num in nums]\n\n# Testing"], ["\n# <func> # Python \n# Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"], ["\n# <func> # Python \n# Write a python function to check whether the triangle is valid or not if 3 points are given.\ndef check_Triangle(x1,y1,x2,y2,x3,y3):\n    if (x1==x2 and y1==y2) or (x1==x3 and y1==y3) or (x2==x3 and y2==y3):\n        return True\n    else:\n        return False\n\n# <func> # C\n# Write a C program to check whether the triangle is valid or not if 3 points are given.\n# Input:\n# x1,y1,x2,y2,x3,y3\n# Output:\n# True or False\n# Explanation:\n# If the triangle is valid, then the sum of any two sides must be greater than the third side.\n# For example, if x1=x2=x3=1, y1=y2=y3=1, then the sum of any two sides must be greater than the third side.\n# If the sum of any two sides is less than the third side, then the triangle is not valid.\n# Example:\n# Input:\n# 1,1,1,1,1,1\n# Output:\n# True\n# Explanation:\n# The triangle is valid.\n# Example:\n# Input:\n# 1,1,1,1,1,2\n# Output:\n# False\n# Explanation:\n# The triangle is not valid because the sum of any two sides is less than the third side.\n\n# <func> # C++\n# Write a C++ program to check whether the triangle is valid or not if 3 points are given.\n# Input:\n# x1,y1,x2,y2,x3,y3\n# Output:\n# True or False\n# Explanation:\n# If the triangle is valid, then the sum of any two sides must be greater than the third side.\n# For example, if x1=x2=x3=1, y1=y2=y3=1, then the sum of any two sides must be greater than the third side.\n# If the sum of any two"], ["\n# <func> # Python \n# Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n    return [x for x in str if len(x) == l]\n\n# <func> # Python \n# Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n    return [x for x in str if len(x) == l]\n\n# <func> # Python \n# Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n    return [x for x in str if len(x) == l]\n\n# <func> # Python \n# Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n    return [x for x in str if len(x) == l]\n\n# <func> # Python \n# Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n    return [x for x in str if len(x) == l]\n\n# <func> # Python \n# Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n    return [x for x in str if len(x) == l]\n\n# <func> # Python \n# Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n    return [x for x in str if len(x) == l]\n\n# <func> # Python \n# Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n    return [x for x in str if len(x) == l]\n\n# <func> # Python \n# Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n    return [x for x in str if len(x) == l]\n\n# <func> # Python \n# Write a function to extract"], ["import re\r\n\n# <func> # Python \n# Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2\n\n# <func> # Java\n# Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n    text2 = text1.replace(' ', '')\n    return text2\n\n# <func> # C\n# Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n    text2 = text1.replace(' ', '')\n    return text2\n\n# <func> # C++\n# Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n    text2 = text1.replace(' ', '')\n    return text2\n\n# <func> # C#\n# Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n    text2 = text1.replace(' ', '')\n    return text2\n\n# <func> # Go\n# Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n    text2 = text1.replace(' ', '')\n    return text2\n\n# <func> # Haskell\n# Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n    text2 = text1.replace(' ', '')\n    return text2\n\n# <func> # JavaScript\n# Write a function to remove all whitespaces from the given string using regex.\nfunction remove_whitespaces(text1) {\n    return text1.replace(' ', '').trim();\n}\n\n# <func> # Lua\n# Write a function to remove all whitespaces from the given string using regex.\nfunction remove_whitespaces(text1)\n    return text1:gsub(' ', '')\nend\n\n# <func> # MATLAB\n# Write a function to remove all whitespaces from the given string using"], ["\n# <func> # Python \n# Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount):\n    if actual_cost-sale_amount<0:\n        return None\n    else:\n        return actual_cost-sale_amount\n\n# <func> # Python \n# Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount):\n    if actual_cost-sale_amount<0:\n        return None\n    else:\n        return actual_cost-sale_amount\n\n# <func> # Python \n# Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount):\n    if actual_cost-sale_amount<0:\n        return None\n    else:\n        return actual_cost-sale_amount\n\n# <func> # Python \n# Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount):\n    if actual_cost-sale_amount<0:\n        return None\n    else:\n        return actual_cost-sale_amount\n\n# <func> # Python \n# Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount):\n    if actual_cost-sale_amount<0:\n        return None\n    else:\n        return actual_cost-sale_amount\n\n# <func> # Python \n# Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount):\n    if actual_cost-sale_amount<0:\n        return None\n    else:\n        return actual_cost-sale_amount\n\n# <func> # Python \n# Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount):\n    if actual_cost-sale_amount<"], ["import math \r\n\n# <func> # Python \n# Write a python function to find the sum of even factors of a number.\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n# <func> # Java\n# Write a Java function to find the sum of even factors of a number.\npublic static int sumOfFactors(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n# <func> # C++\n# Write a C++ function to find the sum of even factors of a number.\n# int sumOfFactors(int n) {\n#     int sum = 0;\n#     for (int i = 1; i <= n; i++) {\n#         if (n % i == 0) {\n#             sum += i;\n#         }\n#     }\n#     return sum;\n# }\n\n# <func> # Python \n# Write a python function to find the sum of even factors of a number.\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n# <func> # Java\n# Write a Java function to find the sum of even factors of a number.\npublic static int sumOfFactors(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n# <func> # C++\n# Write a C++ function to find the sum of even factors of a number.\n# int sumOfFactors(int n) {\n#     int sum = 0;\n#     for (int i = 1; i <= n; i++) {\n#         if ("], ["import re\r\n\n# <func> # Python \n# Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n    # Your code here\n    return text.find('z') != -1\n\n# <func> # Java\n# Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n    # Your code here\n    return text.indexOf('z') != -1\n\n# <func> # C\n# Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n    # Your code here\n    return text.find('z') != -1\n\n# <func> # C++\n# Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n    # Your code here\n    return text.find('z') != -1\n\n# <func> # C#\n# Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n    # Your code here\n    return text.Contains('z')\n\n# <func> # JavaScript\n# Write a function that matches a word containing 'z'.\nfunction text_match_wordz(text) {\n    return text.includes('z');\n}\n\n# <func> # R\n# Write a function that matches a word containing 'z'.\ntext_match_wordz <- function(text) {\n    return(any(strsplit(text, '\\\\s+')[[1]] == 'z'))\n}\n\n# <func> # SQL\n# Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n    return text.contains('z')\n\n# <func> # Perl\n# Write a function that matches a word containing 'z'.\ntext_match_wordz(text)\n\n# <func> # PowerShell\n# Write a function that matches a word containing 'z'.\ntext_match_wordz(text)\n\n# <func> # Ruby\n# Write a function that matches a word containing 'z'.\ntext_match_wordz(text)\n\n# <func> # Bash\n# Write a function that matches a word containing 'z"], ["\n# <func> # Python \n# Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n    if monthnum2 == 31:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check whether the given year number contains 52 weeks or not.\ndef check_yearnumb_number(yearnum2):\n    if yearnum2 == 52:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check whether the given day number contains 1 or not.\ndef check_daynumb_number(daynum2):\n    if daynum2 == 1:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check whether the given hour number contains 12 or not.\ndef check_hournumb_number(hournum2):\n    if hournum2 == 12:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check whether the given minute number contains 60 or not.\ndef check_minutenumb_number(minutenum2):\n    if minutenum2 == 60:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check whether the given second number contains 3600 or not.\ndef check_secondnumb_number(secondnum2):\n    if secondnum2 == 3600:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check whether the given week number contains 52 or not.\ndef check_weeknumb_number(weeknum2):\n    if weeknum2 == 52:\n        return True\n    else:\n        return False\n\n# <func> # Python \n# Write a function to check whether the given day of the week number contains 7 or not.\ndef check_dayofweeknumb_number(dayofweeknum2):\n"], ["\n# <func> # Python \n# Write a function to reverse strings in a given list of string values.\ndef reverse_string_list(stringlist):\n    return stringlist[::-1]\n\n# <func> # Python \n# Write a function to reverse a given string.\ndef reverse_string(string):\n    return string[::-1]\n\n# <func> # Python \n# Write a function to reverse a given string.\ndef reverse_string(string):\n    return string[::-1]\n\n# <func> # Python \n# Write a function to reverse a given string.\ndef reverse_string(string):\n    return string[::-1]\n\n# <func> # Python \n# Write a function to reverse a given string.\ndef reverse_string(string):\n    return string[::-1]\n\n# <func> # Python \n# Write a function to reverse a given string.\ndef reverse_string(string):\n    return string[::-1]\n\n# <func> # Python \n# Write a function to reverse a given string.\ndef reverse_string(string):\n    return string[::-1]\n\n# <func> # Python \n# Write a function to reverse a given string.\ndef reverse_string(string):\n    return string[::-1]\n\n# <func> # Python \n# Write a function to reverse a given string.\ndef reverse_string(string):\n    return string[::-1]\n\n# <func> # Python \n# Write a function to reverse a given string.\ndef reverse_string(string):\n    return string[::-1]\n\n# <func> # Python \n# Write a function to reverse a given string.\ndef reverse_string(string):\n    return string[::-1]\n\n# <func> # Python \n# Write a function to reverse a given string.\ndef reverse_string(string):\n    return string[::-1]\n\n# <func> # Python \n# Write a function to reverse a given string.\ndef reverse_string(string):\n    return string[::-1]\n\n# <func> # Python \n# Write a function to reverse a given string.\n"], ["\n# <func> # Python \n# Write a python function to find the sublist having minimum length.\ndef Find_Min(lst):\n    min_length = 1000000\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i]) > len(lst[j]):\n                min_length = min(min_length, len(lst[j]))\n    return min_length\n\n# <func> # Python \n# Write a python function to find the sublist having maximum length.\ndef Find_Max(lst):\n    max_length = 1000000\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i]) < len(lst[j]):\n                max_length = min(max_length, len(lst[j]))\n    return max_length\n\n# <func> # Python \n# Write a python function to find the sublist having maximum length.\ndef Find_Max(lst):\n    max_length = 1000000\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i]) < len(lst[j]):\n                max_length = min(max_length, len(lst[j]))\n    return max_length\n\n# <func> # Python \n# Write a python function to find the sublist having maximum length.\ndef Find_Max(lst):\n    max_length = 1000000\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i]) < len(lst[j]):\n                max_length = min(max_length, len(lst[j]))\n    return max_length\n\n# <func> # Python \n# Write a python function to find the sublist having maximum length.\ndef Find_Max(lst):\n    max_length = 1000000\n    for i in range(len(lst)):\n       "], ["\n# <func> # Python \n# Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n    return l*b\n\n# <func> # Java\n# Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n    return l*b\n\n# <func> # C\n# Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n    return l*b\n\n# <func> # C++\n# Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n    return l*b\n\n# <func> # Pascal\n# Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n    return l*b\n\n# <func> # Go\n# Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n    return l*b\n\n# <func> # Haskell\n# Write a function to find the area of a rectangle.\nrectangle_area :: Int -> Int -> Int\nrectangle_area l b = l*b\n\n# <func> # Julia\n# Write a function to find the area of a rectangle.\nrectangle_area(l,b) = l*b\n\n# <func> # Lua\n# Write a function to find the area of a rectangle.\nrectangle_area(l,b) = l*b\n\n# <func> # Makefile\n# Write a function to find the area of a rectangle.\nrectangle_area(l,b) = l*b\n\n# <func> # MATLAB\n# Write a function to find the area of a rectangle.\nrectangle_area(l,b) = l*b\n\n# <func> # MATLAB C\n# Write a function to find the area of a rectangle.\nrectangle_area(l,b) = l*b\n\n# <func> # MATLAB C++\n# Write a function to find the area of a rectangle.\nrectangle_area(l,b) = l*b\n\n# <func> # MATLAB FORTRAN\n# Write a function to find the area of"], ["import re\r\n\n# <func> # Python \n# Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n    # Write your code here\n    return str1.lower()\n\n# <func> # Java\n# Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n    # Write your code here\n    return str1.toLowerCase()\n\n# <func> # C\n# Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n    # Write your code here\n    return str1.toLowerCase()\n\n# <func> # C++\n# Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n    # Write your code here\n    return str1.toLowerCase()\n\n# <func> # JavaScript\n# Write a function to remove uppercase substrings from a given string by using regex.\nfunction remove_uppercase(str1) {\n    return str1.toLowerCase();\n}\n\n# <func> # Python \n# Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n    # Write your code here\n    return str1.lower()\n\n# <func> # Java\n# Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n    # Write your code here\n    return str1.toLowerCase()\n\n# <func> # C\n# Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n    # Write your code here\n    return str1.toLowerCase()\n\n# <func> # C++\n# Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n    # Write your code here\n    return str1.toLowerCase()\n\n# <func> # JavaScript\n# Write a function to remove uppercase substrings from a given string by using regex"], ["\n# <func> # Python \n# Write a python function to get the first element of each sublist.\ndef Extract(lst):\n    return lst[0]\n\n# <func> # Python \n# Write a python function to get the last element of each sublist.\ndef ExtractLast(lst):\n    return lst[-1]\n\n# <func> # Python \n# Write a python function to get the middle element of each sublist.\ndef ExtractMiddle(lst):\n    return lst[1:-1]\n\n# <func> # Python \n# Write a python function to get the first element of each sublist.\ndef ExtractFirst(lst):\n    return lst[0]\n\n# <func> # Python \n# Write a python function to get the last element of each sublist.\ndef ExtractLast(lst):\n    return lst[-1]\n\n# <func> # Python \n# Write a python function to get the middle element of each sublist.\ndef ExtractMiddle(lst):\n    return lst[1:-1]\n\n# <func> # Python \n# Write a python function to get the first element of each sublist.\ndef ExtractFirst(lst):\n    return lst[0]\n\n# <func> # Python \n# Write a python function to get the last element of each sublist.\ndef ExtractLast(lst):\n    return lst[-1]\n\n# <func> # Python \n# Write a python function to get the middle element of each sublist.\ndef ExtractMiddle(lst):\n    return lst[1:-1]\n\n# <func> # Python \n# Write a python function to get the first element of each sublist.\ndef ExtractFirst(lst):\n    return lst[0]\n\n# <func> # Python \n# Write a python function to get the last element of each sublist.\ndef ExtractLast(lst):\n    return lst[-1]\n\n# <func> # Python \n# Write a python function to get the middle element of each sublist.\ndef ExtractMiddle(lst):\n    return lst[1:-1]\n\n# <func> # Python \n# Write a python function to get the first element of each sublist"], ["\n# <func> # Python \n# Write a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n    return len(str.upper())\n\n# <func> # Java\n# Write a Java function to count the upper case characters in a given string.\ndef upper_ctr(str):\n    return str.length() - str.length().charAt(0)\n\n# <func> # C\n# Write a C function to count the upper case characters in a given string.\ndef upper_ctr(str):\n    return str.length() - str.length().charAt(0)\n\n# <func> # C++\n# Write a C++ function to count the upper case characters in a given string.\ndef upper_ctr(str):\n    return str.length() - str.length().charAt(0)\n\n# <func> # C#\n# Write a C# function to count the upper case characters in a given string.\ndef upper_ctr(str):\n    return str.Length - str.Length.GetValueOrDefault(0, 0)\n\n# <func> # Go\n# Write a Go function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n    return len(str) - len(str)\n}\n\n# <func> # Haskell\n# Write a Haskell function to count the upper case characters in a given string.\ncountUpperCaseCharacters :: String -> Int\ncountUpperCaseCharacters str = length $ filter (== ' ') str\n\n# <func> # JavaScript\n# Write a JavaScript function to count the upper case characters in a given string.\nfunction upperCaseCount(str) {\n    return str.length - str.length.charAt(0)\n}\n\n# <func> # Lua\n# Write a Lua function to count the upper case characters in a given string.\nfunction upperCaseCount(str)\n    return str:len() - str:len().char:sub(1, 0)\nend\n\n# <func> # Objective-C\n# Write an Objective-C function to count the upper case characters in a given string.\n- (int)upperCaseCount:(NSString *)str {\n    return"], ["\n# <func> # Python \n# Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\n    # Write your code here\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        result = []\n        for i in range(len(list1)):\n            for j in combinations_list(list1[i:]):\n                result.append([list1[i]] + j)\n        return result\n\n\n# +\n# Write your code here\n\ndef combinations_list(list1):\n    # Write your code here\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        result = []\n        for i in range(len(list1)):\n            for j in combinations_list(list1[i:]):\n                result.append([list1[i]] + j)\n        return result\n\n\n# -\n\n# Write your code here\ndef combinations_list(list1):\n    # Write your code here\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        result = []\n        for i in range(len(list1)):\n            for j in combinations_list(list1[i:]):\n                result.append([list1[i]] + j)\n        return result\n\n\n# Write your code here\ndef combinations_list(list1):\n    # Write your code here\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        result = []\n        for i in range(len(list1)):\n            for j in combinations_list(list1[i:]):\n                result.append([list1[i]] + j)\n        return result\n\n\n# Write your code here\ndef combinations_list(list1):\n    # Write your code here\n    if len(list1)"], ["\n# <func> # Python \n# Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\n    max_product = 0\n    max_product_index = 0\n    for i in range(1, len(arr)):\n        max_product = max(arr[i], max_product * arr[i - i])\n        if max_product > max_product_index:\n            max_product_index = max_product\n    return max_product_index\n\n# Testing"], ["\n# <func> # Python \n# Write a function to check if all values are same in a dictionary.\ndef check_value(dict, n):\n    for key in dict.keys():\n        if dict[key] != dict[key][n]:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check if all values are same in a list.\ndef check_value(list, n):\n    for i in range(len(list)):\n        if list[i] != list[i][n]:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check if all values are same in a tuple.\ndef check_value(tuple, n):\n    for i in range(len(tuple)):\n        if tuple[i] != tuple[i][n]:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check if all values are same in a set.\ndef check_value(set, n):\n    for i in range(len(set)):\n        if set[i] != set[i][n]:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check if all values are same in a frozenset.\ndef check_value(frozenset, n):\n    for i in range(len(frozenset)):\n        if frozenset[i] != frozenset[i][n]:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check if all values are same in a list of tuples.\ndef check_value(list_of_tuples, n):\n    for i in range(len(list_of_tuples)):\n        if list_of_tuples[i] != list_of_tuples[i][n]:\n            return False\n    return True\n\n# <func> # Python \n# Write a function to check if all values are same in a list of sets.\ndef check_value(list_of_sets, n):\n    for i in range(len(list_of_sets)):\n        if list_of_sets[i]"], ["\n# <func> # Python \n# Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\n    for key in dict1:\n        if dict1[key] == []:\n            del dict1[key]\n    return dict1\n\n# <func> # Python \n# Write a function to find the maximum value in a given dictionary.\ndef max_value(dict1):\n    max_value = dict1[0]\n    for key in dict1:\n        if dict1[key] > max_value:\n            max_value = dict1[key]\n    return max_value\n\n# <func> # Python \n# Write a function to find the minimum value in a given dictionary.\ndef min_value(dict1):\n    min_value = dict1[0]\n    for key in dict1:\n        if dict1[key] < min_value:\n            min_value = dict1[key]\n    return min_value\n\n# <func> # Python \n# Write a function to find the sum of all values in a given dictionary.\ndef sum_values(dict1):\n    sum_value = 0\n    for key in dict1:\n        sum_value += dict1[key]\n    return sum_value\n\n# <func> # Python \n# Write a function to find the maximum value in a given dictionary.\ndef max_value(dict1):\n    max_value = dict1[0]\n    for key in dict1:\n        if dict1[key] > max_value:\n            max_value = dict1[key]\n    return max_value\n\n# <func> # Python \n# Write a function to find the minimum value in a given dictionary.\ndef min_value(dict1):\n    min_value = dict1[0]\n    for key in dict1:\n        if dict1[key] < min_value:\n            min_value = dict1[key]\n    return min_value\n\n# <func> # Python \n# Write a function to find the sum of all values in a given dictionary.\ndef sum_values(dict1):\n    sum_value = 0\n    for key in dict1:"], ["\n# <func> # Python \n# Write a function to find the peak element in the given array.\ndef find_peak_util(arr, low, high, n):\n    if low >= high:\n        return -1\n    mid = (low + high) // 2\n    if arr[mid] < arr[mid + 1]:\n        return find_peak_util(arr, low, mid, n)\n    elif arr[mid] > arr[mid + 1]:\n        return find_peak_util(arr, mid + 1, high, n)\n    else:\n        return mid\n\n\n# +\n# 10. Write a Python program to find the peak element in the given array.\n# -\n\n# 11. Write a Python program to find the peak element in the given array.\n# -\n\n# 12. Write a Python program to find the peak element in the given array.\n# -\n\n# 13. Write a Python program to find the peak element in the given array.\n# -\n\n# 14. Write a Python program to find the peak element in the given array.\n# -\n\n# 15. Write a Python program to find the peak element in the given array.\n# -\n\n# 16. Write a Python program to find the peak element in the given array.\n# -\n\n# 17. Write a Python program to find the peak element in the given array.\n# -\n\n# 18. Write a Python program to find the peak element in the given array.\n# -\n\n# 19. Write a Python program to find the peak element in the given array.\n# -\n\n# 20. Write a Python program to find the peak element in the given array.\n# -\n\n# 21. Write a Python program to find the peak element in the given array.\n# -\n\n# 22. Write a Python program to find the peak element in the given array.\n# -\n\n# 23. Write a Python program to find the peak element in the given array.\n# -\n\n# 24. Write a Python program to find the peak element in the given array.\n# -\n\n# 2"], ["\n# <func> # Python \n# Write a python function to convert decimal number to octal number.\ndef decimal_to_Octal(deciNum):\n    octalNum = \"\"\n    while deciNum > 0:\n        octalNum = str(deciNum % 10) + octalNum\n        deciNum = deciNum // 10\n    return octalNum\n\n# <func> # Python \n# Write a python function to convert decimal number to hexadecimal number.\ndef decimal_to_Hexadecimal(deciNum):\n    hexadecNum = \"\"\n    while deciNum > 0:\n        hexadecNum = hexadecNum + str(deciNum % 16)\n        deciNum = deciNum // 16\n    return hexadecNum\n\n# <func> # Python \n# Write a python function to convert decimal number to binary number.\ndef decimal_to_Binary(deciNum):\n    binaryNum = \"\"\n    while deciNum > 0:\n        binaryNum = str(deciNum % 2) + binaryNum\n        deciNum = deciNum // 2\n    return binaryNum\n\n# <func> # Python \n# Write a python function to convert decimal number to hexadecimal number.\ndef decimal_to_Hexadecimal(deciNum):\n    hexadecNum = \"\"\n    while deciNum > 0:\n        hexadecNum = hexadecNum + str(deciNum % 16)\n        deciNum = deciNum // 16\n    return hexadecNum\n\n# <func> # Python \n# Write a python function to convert decimal number to binary number.\ndef decimal_to_Binary(deciNum):\n    binaryNum = \"\"\n    while deciNum > 0:\n        binaryNum = str(deciNum % 2) + binaryNum\n        deciNum = deciNum // 2\n    return binaryNum\n\n# <func> # Python \n# Write a python function to convert decimal number to hexadecimal number.\ndef decimal_to_Hexadecimal(deciNum):\n   "], ["\n# <func> # Python \n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ):\n    max_product = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n\n# <func> # Python \n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ):\n    max_product = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n\n# <func> # Python \n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ):\n    max_product = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n\n# <func> # Python \n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ):\n    max_product = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n\n# <func> # Python \n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ):\n    max_product = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n\n# <func>"], ["\n# <func> # Python \n# Write a function to find the maximum profit earned from a maximum of k stock transactions\ndef max_profit(price, k):\n    # Initialize the maximum profit to 0\n    max_profit = 0\n    \n    # Loop through the transactions\n    for i in range(k):\n        # Calculate the profit from the current transaction\n        profit = price[i+1] - price[i]\n        \n        # Check if the current profit is greater than the maximum profit\n        if profit > max_profit:\n            max_profit = profit\n            \n    # Return the maximum profit\n    return max_profit\n\n# Test the function\nprice = [10, 20, 30, 40, 50]\nk = 2\n\n# Call the max_profit function and print the result"], ["\n# <func> # Python \n# Write a function to find the pairwise addition of the elements of the given tuples.\ndef add_pairwise(test_tup):\n    return (test_tup[0] + test_tup[1], test_tup[0] + test_tup[2], test_tup[1] + test_tup[2])\n\n# Test the function"], ["\n# <func> # Python \n# Write a python function to find remainder of array multiplication divided by n.\ndef find_remainder(arr, lens, n):\n    # Write your code here\n    for i in range(0, len(arr)):\n        for j in range(0, len(arr)):\n            if i == j:\n                continue\n            if i == 0:\n                if j == 0:\n                    continue\n                else:\n                    arr[i] = arr[i] % n\n                    arr[j] = arr[j] % n\n            else:\n                arr[i] = arr[i] % n\n                arr[j] = arr[j] % n\n    return arr\n\n\n# +\n# Write your code here\n\ndef find_remainder(arr, lens, n):\n    # Write your code here\n    for i in range(0, len(arr)):\n        for j in range(0, len(arr)):\n            if i == j:\n                continue\n            if i == 0:\n                if j == 0:\n                    continue\n                else:\n                    arr[i] = arr[i] % n\n                    arr[j] = arr[j] % n\n            else:\n                arr[i] = arr[i] % n\n                arr[j] = arr[j] % n\n    return arr\n\n\n# +\n# Write your code here\n\ndef find_remainder(arr, lens, n):\n    # Write your code here\n    for i in range(0, len(arr)):\n        for j in range(0, len(arr)):\n            if i == j:\n                continue\n            if i == 0:\n                if j == 0:\n                    continue\n                else:\n                    arr[i] = arr[i] % n\n                    arr[j] = arr[j] % n\n            else:\n                arr[i] = arr[i] % n\n                arr[j] = arr[j] % n\n    return arr\n\n\n# +\n# Write your code here\n\ndef find_remainder(arr, lens, n):\n    #"], ["\n# <func> # Python \n# Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l):\n    for i in range(1, len(l)):\n        if l[i] != l[i-1]:\n            return False\n    return True\n\n# Driver Code\nl = [1, 2, 3, 4, 5]"], ["\n# <func> # Python \n# Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n    # Create a set from the two lists\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # Return the intersection of the two sets\n    return list(set1 & set2)\n\n# Test the function"], ["\n# <func> # Python \n# Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n    return str1.replace(ch,newch)\n\n# <func> # Python \n# Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n    return str1.replace(ch,newch)\n\n# <func> # Python \n# Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n    return str1.replace(ch,newch)\n\n# <func> # Python \n# Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n    return str1.replace(ch,newch)\n\n# <func> # Python \n# Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n    return str1.replace(ch,newch)\n\n# <func> # Python \n# Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n    return str1.replace(ch,newch)\n\n# <func> # Python \n# Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n    return str1.replace(ch,newch)\n\n# <func> # Python \n# Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n    return str1.replace(ch,newch)\n\n# <func> # Python \n# Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n    return str1.replace(ch,newch)\n\n# <func> # Python \n# Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n    return str1.replace(ch,newch)\n\n# <func> # Python \n# Write a function to replace characters in a string.\ndef replace_char(str1,ch"], ["from collections import Counter\r\n\n# <func> # Python \n# Write a function to sort counter by value.\ndef sort_counter(dict1):\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict\n\n# <func> # Python \n# Write a function to sort counter by value.\ndef sort_counter(dict1):\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict\n\n# <func> # Python \n# Write a function to sort counter by value.\ndef sort_counter(dict1):\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict\n\n# <func> # Python \n# Write a function to sort counter by value.\ndef sort_counter(dict1):\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict\n\n# <func> # Python \n# Write a function to sort counter by value.\ndef sort_counter(dict1):\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict\n\n# <func> # Python \n# Write a function to sort counter by value.\ndef sort_counter(dict1):\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict\n\n# <func> # Python \n# Write a function to sort counter by value.\ndef sort_counter(dict1):\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict\n\n# <func> # Python \n# Write a function to sort counter by value.\ndef sort_counter(dict1):\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict\n\n# <func> # Python \n# Write a function to sort counter"], ["\n# <func> # Python \n# Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num\n"], ["\n# <func> # Python \n# Write a python function to convert the given string to lower case.\ndef is_lower(string):\n    return string.lower() == string\n\n# <func> # Java\n# Write a Java function to convert the given string to lower case.\ndef is_lower(string):\n    return string.toLowerCase() == string\n\n# <func> # C\n# Write a C function to convert the given string to lower case.\ndef is_lower(string):\n    return string.toLowerCase() == string\n\n# <func> # C++\n# Write a C++ function to convert the given string to lower case.\ndef is_lower(string):\n    return string.toLowerCase() == string\n\n# <func> # C#\n# Write a C# function to convert the given string to lower case.\ndef is_lower(string):\n    return string.ToLower() == string\n\n# <func> # Go\n# Write a Go function to convert the given string to lower case.\nfunc isLower(string string) bool {\n    return string.ToLower() == string\n}\n\n# <func> # Haskell\n# Write a Haskell function to convert the given string to lower case.\nisLower :: String -> Bool\nisLower = toLower . reverse\n\n# <func> # JavaScript\n# Write a JavaScript function to convert the given string to lower case.\nfunction isLower(string) {\n    return string.toLowerCase() == string\n}\n\n# <func> # Kotlin\n# Write a Kotlin function to convert the given string to lower case.\nfun isLower(string: String): Boolean {\n    return string.toLowerCase() == string\n}\n\n# <func> # Lua\n# Write a Lua function to convert the given string to lower case.\nfunction isLower(string)\n    return string:lower() == string\nend\n\n# <func> # MATLAB\n# Write a MATLAB function to convert the given string to lower case.\nfunction isLower(string)\n    return lower(string) == string\nend\n\n# <func> # MATLAB\n# Write a MATLAB function to convert the given string to lower case.\nfunction isLower(string"], ["import re\r\n\n# <func> # Python \n# Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n    return ''.join([i for i in str1 if not i.islower()])\n\n# <func> # Java\n# Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n    return ''.join([i for i in str1 if not i.islower()])\n\n# <func> # C\n# Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n    return ''.join([i for i in str1 if not i.islower()])\n\n# <func> # C++\n# Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n    return ''.join([i for i in str1 if not i.islower()])\n\n# <func> # C#\n# Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n    return ''.join([i for i in str1 if not i.islower()])\n\n# <func> # Go\n# Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n    return ''.join([i for i in str1 if not i.islower()])\n\n# <func> # Haskell\n# Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n    return ''.join([i for i in str1 if not i.islower()])\n\n# <func> # JavaScript\n# Write a function to remove lowercase substrings from a given string.\nfunction remove_lowercase(str1) {\n    return str1.replace(/\\b/g, '').replace(/[a-z]/g, '');\n}\n\n# <func> # Python \n# Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n    return ''.join([i for i in str1 if not i.islower()])"], ["\n# <func> # Python \n# Write a python function to find the first digit of a given number.\ndef first_Digit(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10\n\n# <func> # Python \n# Write a python function to find the last digit of a given number.\ndef last_Digit(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10\n\n# <func> # Python \n# Write a python function to find the sum of the digits of a given number.\ndef sum_Digits(n):\n    if n == 0:\n        return 0\n    else:\n        return sum(map(int, str(n)))\n\n# <func> # Python \n# Write a python function to find the product of the digits of a given number.\ndef product_Digits(n):\n    if n == 0:\n        return 0\n    else:\n        return int(str(n) + str(n))\n\n# <func> # Python \n# Write a python function to find the greatest common divisor of two given numbers.\ndef gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b, a % b)\n\n# <func> # Python \n# Write a python function to find the least common multiple of two given numbers.\ndef lcm(a, b):\n    if a == 0:\n        return b\n    else:\n        return a * b // gcd(a, b)\n\n# <func> # Python \n# Write a python function to find the sum of the digits of a given number.\ndef sum_Digits_2(n):\n    if n == 0:\n        return 0\n    else:\n        return sum(map(int, str(n)))\n\n# <func> # Python \n# Write a python function to find the sum of the digits of a given number.\ndef sum_Digits_3(n):\n    if n == 0:\n        return 0\n    else:\n        return sum(map(int"], ["\n# <func> # Python \n# Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\n    max_occuring_char = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].lower():\n            max_occuring_char = max(max_occuring_char, i)\n    return max_occuring_char\n\n# <func> # Python \n# Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\n    max_occuring_char = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].lower():\n            max_occuring_char = max(max_occuring_char, i)\n    return max_occuring_char\n\n# <func> # Python \n# Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\n    max_occuring_char = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].lower():\n            max_occuring_char = max(max_occuring_char, i)\n    return max_occuring_char\n\n# <func> # Python \n# Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\n    max_occuring_char = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].lower():\n            max_occuring_char = max(max_occuring_char, i)\n    return max_occuring_char\n\n# <func> # Python \n# Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\n    max_occuring_char = 0\n"], ["\n# <func> # Python \n# Write a function to determine if there is a subset of the given set with sum equal to the given sum.\ndef is_subset_sum(set, n, sum):\n    if sum == 0:\n        return True\n    for i in range(len(set)):\n        if sum - n - set[i] == 0:\n            return True\n    return False\n\n# <func> # Python \n# Write a function that takes a list of numbers and a number and returns the number of times the number appears in the list.\ndef count_number(list, number):\n    return sum(i == number for i in list)\n\n# <func> # Python \n# Write a function that takes a list of numbers and a number and returns the number of times the number appears in the list.\ndef count_number(list, number):\n    return sum(i == number for i in list)\n\n# <func> # Python \n# Write a function that takes a list of numbers and a number and returns the number of times the number appears in the list.\ndef count_number(list, number):\n    return sum(i == number for i in list)\n\n# <func> # Python \n# Write a function that takes a list of numbers and a number and returns the number of times the number appears in the list.\ndef count_number(list, number):\n    return sum(i == number for i in list)\n\n# <func> # Python \n# Write a function that takes a list of numbers and a number and returns the number of times the number appears in the list.\ndef count_number(list, number):\n    return sum(i == number for i in list)\n\n# <func> # Python \n# Write a function that takes a list of numbers and a number and returns the number of times the number appears in the list.\ndef count_number(list, number):\n    return sum(i == number for i in list)\n\n# <func> # Python \n# Write a function that takes a list of numbers and a number and returns the number of times the number appears in the list.\ndef count_number(list, number):\n    return sum(i == number for i in list)\n\n# <func"], ["import re \r\n\n# <func> # Python \n# Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text):\n    pattern = r\"[a-z]+\\1{2,}\"\n    return re.findall(pattern, text)\n\n# <func> # Python \n# Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text):\n    pattern = r\"[a-z]+\\1{2,}\"\n    return re.findall(pattern, text)\n\n# <func> # Python \n# Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text):\n    pattern = r\"[a-z]+\\1{2,}\"\n    return re.findall(pattern, text)\n\n# <func> # Python \n# Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text):\n    pattern = r\"[a-z]+\\1{2,}\"\n    return re.findall(pattern, text)\n\n# <func> # Python \n# Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text):\n    pattern = r\"[a-z]+\\1{2,}\"\n    return re.findall(pattern, text)\n\n# <func> # Python \n# Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text):\n    pattern = r\"[a-z]+\\1{2,}\"\n    return re.findall(pattern, text)\n\n# <func> # Python \n# Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text):\n    pattern = r\"[a-z]+\\1{2,}\"\n    return re.findall(pattern, text)\n\n# <func> # Python \n# Write a function to find sequences of"], ["\n# <func> # Python \n# Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x):\n    for i in range(1,x):\n        if(i*i!=x):\n            return i\n    return -1\n\n# <func> # Python \n# Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x):\n    for i in range(1,x):\n        if(i*i!=x):\n            return i\n    return -1\n\n# <func> # Python \n# Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x):\n    for i in range(1,x):\n        if(i*i!=x):\n            return i\n    return -1\n\n# <func> # Python \n# Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x):\n    for i in range(1,x):\n        if(i*i!=x):\n            return i\n    return -1\n\n# <func> # Python \n# Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x):\n    for i in range(1,x):\n        if(i*i!=x):\n            return i\n    return -1\n\n# <func> # Python \n# Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x):\n    for i in range(1,x):\n        if(i*i!=x):\n            return i\n    return -1\n\n# <func> # Python \n# Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x):\n    for i in range(1,"], ["\n# <func> # Python \n# Write a function to remove the matching tuples from the given two tuples.\ndef remove_matching_tuple(test_list1, test_list2):\n    # Write your code here\n    return test_list1, test_list2\n\n\n# +\n# Write your code here\n\ndef remove_matching_tuple(test_list1, test_list2):\n    return test_list1, test_list2\n\n\n# -\n\nremove_matching_tuple([1, 2, 3], [2, 3, 4])\n\n\n"], ["\n# <func> # Python \n# Write a function to find the largest palindromic number in the given array.\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef largest_palindrome(arr):\n    max_palindrome = 0\n    for num in arr:\n        if is_palindrome(num):\n            max_palindrome = max(max_palindrome, num)\n    return max_palindrome\n"], ["\n# <func> # Python \n# Write a function to compute binomial probability for the given number.\ndef nCr(n, r):\n    if r > n:\n        return 0\n    elif r == 0:\n        return 1\n    elif r == n:\n        return 1\n    else:\n        return nCr(n, r-1) + nCr(n, r-1)\n\n# Write a function to compute binomial probability for the given number.\ndef nCr(n, r):\n    if r > n:\n        return 0\n    elif r == 0:\n        return 1\n    elif r == n:\n        return 1\n    else:\n        return nCr(n, r-1) + nCr(n, r-1)\n\n# Write a function to compute binomial probability for the given number.\ndef nCr(n, r):\n    if r > n:\n        return 0\n    elif r == 0:\n        return 1\n    elif r == n:\n        return 1\n    else:\n        return nCr(n, r-1) + nCr(n, r-1)\n\n# Write a function to compute binomial probability for the given number.\ndef nCr(n, r):\n    if r > n:\n        return 0\n    elif r == 0:\n        return 1\n    elif r == n:\n        return 1\n    else:\n        return nCr(n, r-1) + nCr(n, r-1)\n\n# Write a function to compute binomial probability for the given number.\ndef nCr(n, r):\n    if r > n:\n        return 0\n    elif r == 0:\n        return 1\n    elif r == n:\n        return 1\n    else:\n        return nCr(n, r-1) + nCr(n, r-1)\n\n# Write a function to compute binomial probability for the given number.\ndef nCr(n, r):\n    if r > n:\n        return 0\n    elif r == 0:\n        return 1\n    elif r == n:\n        return 1\n"], ["\n# <func> # Python \n# Write a function to sort a list of tuples in increasing order by the last element in each tuple.\ndef sort_tuple(tup):\n    return sorted(tup, key=lambda x: x[-1])\n\n# <func> # Python \n# Write a function that takes a list of strings and returns a new list of strings that are the concatenation of the original list with the string \"Hello World\".\ndef concat_strings(lst):\n    return lst + \"Hello World\"\n\n# <func> # Python \n# Write a function that takes a list of strings and returns a new list of strings that are the concatenation of the original list with the string \"Hello World\".\ndef concat_strings(lst):\n    return lst + \"Hello World\"\n\n# <func> # Python \n# Write a function that takes a list of strings and returns a new list of strings that are the concatenation of the original list with the string \"Hello World\".\ndef concat_strings(lst):\n    return lst + \"Hello World\"\n\n# <func> # Python \n# Write a function that takes a list of strings and returns a new list of strings that are the concatenation of the original list with the string \"Hello World\".\ndef concat_strings(lst):\n    return lst + \"Hello World\"\n\n# <func> # Python \n# Write a function that takes a list of strings and returns a new list of strings that are the concatenation of the original list with the string \"Hello World\".\ndef concat_strings(lst):\n    return lst + \"Hello World\"\n\n# <func> # Python \n# Write a function that takes a list of strings and returns a new list of strings that are the concatenation of the original list with the string \"Hello World\".\ndef concat_strings(lst):\n    return lst + \"Hello World\"\n\n# <func> # Python \n# Write a function that takes a list of strings and returns a new list of strings that are the concatenation of the original list with the string \"Hello World\".\ndef concat_strings(lst):\n    return lst + \"Hello World\"\n\n# <func> # Python \n# Write a function that takes a list of strings and returns a new list of"], ["import math\r\n\n# <func> # Python \n# Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n    return 5 * a * (a - 2) / 2\n\n# <func> # Java\n# Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n    return 5 * a * (a - 2) / 2\n\n# <func> # C\n# Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n    return 5 * a * (a - 2) / 2\n\n# <func> # C++\n# Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n    return 5 * a * (a - 2) / 2\n\n# <func> # C#\n# Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n    return 5 * a * (a - 2) / 2\n\n# <func> # JavaScript\n# Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n    return 5 * a * (a - 2) / 2\n\n# <func> # Rust\n# Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n    return 5 * a * (a - 2) / 2\n\n# <func> # Go\n# Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n    return 5 * a * (a - 2) / 2\n\n# <func> # GoC\n# Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n    return 5 * a * (a - 2) / 2\n\n# <func> # GoF\n# Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n    return 5 * a * (a - 2) / 2\n\n# <func> # GoG\n# Write a function to find the area of a pentagon"], ["\n# <func> # Python \n# Write a python function to find the frequency of the largest value in a given array.\ndef frequency_Of_Largest(n,arr):\n    max_value = max(arr)\n    freq = 0\n    for i in arr:\n        if i > max_value:\n            freq += 1\n    return freq\n\n# <func> # Python \n# Write a python function to find the frequency of the smallest value in a given array.\ndef frequency_Of_Smallest(n,arr):\n    min_value = min(arr)\n    freq = 0\n    for i in arr:\n        if i < min_value:\n            freq += 1\n    return freq\n\n# <func> # Python \n# Write a python function to find the frequency of the second largest value in a given array.\ndef frequency_Of_Second_Largest(n,arr):\n    max_value = max(arr)\n    second_largest_value = max(arr,key=lambda x: x[1])\n    freq = 0\n    for i in arr:\n        if i > second_largest_value[1]:\n            freq += 1\n    return freq\n\n# <func> # Python \n# Write a python function to find the frequency of the third largest value in a given array.\ndef frequency_Of_Third_Largest(n,arr):\n    max_value = max(arr)\n    second_largest_value = max(arr,key=lambda x: x[1])\n    third_largest_value = max(arr,key=lambda x: x[1])\n    freq = 0\n    for i in arr:\n        if i > second_largest_value[1] and i > third_largest_value[1]:\n            freq += 1\n    return freq\n\n# <func> # Python \n# Write a python function to find the frequency of the fourth largest value in a given array.\ndef frequency_Of_Fourth_Largest(n,arr):\n    max_value = max(arr)\n    second_largest_value = max("], ["\n# <func> # Python \n# Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return True\n    return False\n\n\n# +\n# Write a function to extract all the pairs which are symmetric in the given tuple list.\n\ndef extract_symmetric(test_list):\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return True\n    return False\n\n\n# -\n\n# Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return True\n    return False\n\n\n# Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return True\n    return False\n\n\n# Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return True\n    return False\n\n\n# Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test"], ["import math\r\n\n# <func> # Python \n# Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\n    sum = a\n    for i in range(n):\n        sum = sum * r\n    return sum\n\n# <func> # C++\n# Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\n    sum = a\n    for i in range(n):\n        sum = sum * r\n    return sum\n\n# <func> # Java\n# Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\n    sum = a\n    for i in range(n):\n        sum = sum * r\n    return sum\n\n# <func> # JavaScript\n# Write a function to find the sum of geometric progression series.\nfunction sum_gp(a,n,r){\n    sum = a\n    for(i=0;i<n;i++){\n        sum = sum * r\n    }\n    return sum\n}\n\n# <func> # Python \n# Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\n    sum = a\n    for i in range(n):\n        sum = sum * r\n    return sum\n\n# <func> # C++\n# Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\n    sum = a\n    for i in range(n):\n        sum = sum * r\n    return sum\n\n# <func> # Java\n# Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\n    sum = a\n    for i in range(n):\n        sum = sum * r\n    return sum\n\n# <func> # JavaScript\n# Write a function to find the sum of geometric progression series.\nfunction sum_gp(a,n,r){\n    sum = a\n    for(i=0;i<n;i++){\n        sum = sum * r\n    }\n   "], ["\n# <func> # Python \n# Write a function to search an element in the given array by using binary search.\ndef binary_search(item_list,item):\n    low = 0\n    high = len(item_list) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if item_list[mid] == item:\n            return mid\n        elif item_list[mid] > item:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n# Testing"], ["import math\r\n\n# <func> # Python \n# Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    # Create a list of lists containing 6 tuples of x, y point coordinates\n    polygons = []\n    # Calculate the number of hexagons in the grid\n    num_hexagons = int((endx - startx) / radius) + 1\n    # Calculate the number of points in each hexagon\n    num_points = int((endy - starty) / radius) + 1\n    # Create a list of lists containing the x, y point coordinates of each hexagon\n    for i in range(num_hexagons):\n        for j in range(num_points):\n            # Calculate the x and y coordinates of the hexagon\n            x = startx + (radius * i)\n            y = starty + (radius * j)\n            # Append the x, y point coordinates of the hexagon to the list of lists containing the x, y point coordinates of each hexagon\n            polygons.append([x, y])\n    # Return the list of lists containing the x, y point coordinates of each hexagon\n    return polygons\n\n# <func> # Python \n# Write a function to calculate the area of a hexagon given its x, y coordinates.\ndef calculate_area(startx, starty, endx, endy):\n    # Calculate the number of hexagons in the grid\n    num_hexagons = int((endx - startx) / radius) + 1\n    # Calculate the area of each hexagon\n    area = 0.5 * (endy - starty) * (endx - startx)\n    # Return the area of each hexagon\n    return area\n\n# <func> # Python \n# Write a function to calculate the perimeter of a hexagon given its x, y coordinates.\ndef calculate_perimeter(startx, starty, endx, endy):\n    # Calculate the number of hexagons in the grid\n    num_hexagons"], ["\n# <func> # Python \n# Write a function to convert the given binary tuple to integer.\ndef binary_to_integer(test_tup):\n    return int(test_tup, 2)\n\n# <func> # Python \n# Write a function to convert the given decimal tuple to integer.\ndef decimal_to_integer(test_tup):\n    return int(test_tup, 10)\n\n# <func> # Python \n# Write a function to convert the given hexadecimal tuple to integer.\ndef hexadecimal_to_integer(test_tup):\n    return int(test_tup, 16)\n\n# <func> # Python \n# Write a function to convert the given octal tuple to integer.\ndef octal_to_integer(test_tup):\n    return int(test_tup, 8)\n\n# <func> # Python \n# Write a function to convert the given byte tuple to integer.\ndef byte_to_integer(test_tup):\n    return int(test_tup, 2)\n\n# <func> # Python \n# Write a function to convert the given string tuple to integer.\ndef string_to_integer(test_tup):\n    return int(test_tup, 10)\n\n# <func> # Python \n# Write a function to convert the given string tuple to integer.\ndef string_to_integer(test_tup):\n    return int(test_tup, 16)\n\n# <func> # Python \n# Write a function to convert the given string tuple to integer.\ndef string_to_integer(test_tup):\n    return int(test_tup, 8)\n\n# <func> # Python \n# Write a function to convert the given string tuple to integer.\ndef string_to_integer(test_tup):\n    return int(test_tup, 2)\n\n# <func> # Python \n# Write a function to convert the given string tuple to integer.\ndef string_to_integer(test_tup):\n    return int(test_tup, 10)\n\n# <func> # Python"], ["import re\r\n\n# <func> # Python \n# Write a function to remove lowercase substrings from a given string by using regex.\ndef remove_lowercase(str1):\n    str1 = str1.lower()\n    return re.sub(r'\\w', '', str1)\n\n# <func> # Java\n# Write a function to remove lowercase substrings from a given string by using regex.\ndef remove_lowercase(str1):\n    str1 = str1.lower()\n    return re.sub(r'\\w', '', str1)\n\n# <func> # JavaScript\n# Write a function to remove lowercase substrings from a given string by using regex.\nfunction remove_lowercase(str1) {\n    return str1.replace(/\\w/g, '');\n}\n\n# <func> # C\n# Write a function to remove lowercase substrings from a given string by using regex.\ndef remove_lowercase(str1):\n    return str1.replace(r'\\w', '').lower()\n\n# <func> # C++\n# Write a function to remove lowercase substrings from a given string by using regex.\n# function remove_lowercase(str1) {\n#     return str1.replace(/\\w/g, '');\n# }\n\n# <func> # C#\n# Write a function to remove lowercase substrings from a given string by using regex.\n# function remove_lowercase(str1) {\n#     return str1.replace(r'\\w', '').ToLower();\n# }\n\n# <func> # Haskell\n# Write a function to remove lowercase substrings from a given string by using regex.\n# function remove_lowercase(str1) {\n#     return str1.replace(r'\\w', '').toLower()\n# }\n\n# <func> # Go\n# Write a function to remove lowercase substrings from a given string by using regex.\nfunc remove_lowercase(str1) {\n    return str1.replace(r'\\w', '').toLower()\n}\n\n# <func> # Groovy\n# Write a function to remove lowercase substrings from a given string by using regex.\ndef remove_lowercase(str1"], ["import heapq as hq\r\n\n# <func> # Python \n# Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_smallest(nums,n):\n    heapq.heapify(nums)\n    for i in range(n-1,-1,-1):\n        heapq.heappush(nums,heapq.heappop(nums))\n    return nums\n\n# <func> # Java\n# Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_smallest(nums,n):\n    heapq.heapify(nums)\n    for i in range(n-1,-1,-1):\n        heapq.heappush(nums,heapq.heappop(nums))\n    return nums\n\n# <func> # C++\n# Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_smallest(nums,n):\n    heapq.heapify(nums)\n    for i in range(n-1,-1,-1):\n        heapq.heappush(nums,heapq.heappop(nums))\n    return nums\n\n# <func> # Python \n# Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_smallest(nums,n):\n    heapq.heapify(nums)\n    for i in range(n-1,-1,-1):\n        heapq.heappush(nums,heapq.heappop(nums))\n    return nums\n\n# <func> # Java\n# Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_smallest(nums,n):\n    heapq.heapify(nums)\n    for i in range(n-1,-1,-1):\n        heapq.heappush(nums,heapq.heappop(nums))\n    return nums\n\n# <func> # C++\n#"], ["import math\r\n\n# <func> # Python \n# Write a function to find the surface area of a cone.\ndef surfacearea_cone(r,h):\n    # Your code here\n    return 3.14*(r**2)*h\n\n# <func> # Python \n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    # Your code here\n    return 3.14*(r**2)*h\n\n# <func> # Python \n# Write a function to find the surface area of a cylinder.\ndef surfacearea_cylinder(r,h):\n    # Your code here\n    return 2*3.14*r*h\n\n# <func> # Python \n# Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n    # Your code here\n    return 2*3.14*r*h\n\n# <func> # Python \n# Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n    # Your code here\n    return 4*3.14*r**2\n\n# <func> # Python \n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    # Your code here\n    return 4*3.14*r**2\n\n# <func> # Python \n# Write a function to find the surface area of a hemisphere.\ndef surfacearea_hemisphere(r):\n    # Your code here\n    return 2*3.14*r**2\n\n# <func> # Python \n# Write a function to find the volume of a hemisphere.\ndef volume_hemisphere(r):\n    # Your code here\n    return 2*3.14*r**2\n\n# <func> # Python \n# Write a function to find the surface area of a truncated cone.\ndef surfacearea_truncated_cone(r,h):\n    # Your code here\n    return 3.14*(r**2)*h\n\n# <func> # Python \n# Write a"], ["\n# <func> # Python \n# Write a python function to find gcd of two positive integers.\ndef gcd(x, y):\n    while(y):\n        x, y = y, x % y\n    return x\n\n# Write a python function to find lcm of two positive integers.\ndef lcm(x, y):\n    return (x * y) // gcd(x, y)\n\n# Write a python function to find the sum of all the numbers between 1 and n.\ndef sum(n):\n    return sum(range(1, n + 1))\n\n# Write a python function to find the sum of all the numbers between 1 and n.\ndef sum(n):\n    return sum(range(1, n + 1))\n\n# Write a python function to find the sum of all the numbers between 1 and n.\ndef sum(n):\n    return sum(range(1, n + 1))\n\n# Write a python function to find the sum of all the numbers between 1 and n.\ndef sum(n):\n    return sum(range(1, n + 1))\n\n# Write a python function to find the sum of all the numbers between 1 and n.\ndef sum(n):\n    return sum(range(1, n + 1))\n\n# Write a python function to find the sum of all the numbers between 1 and n.\ndef sum(n):\n    return sum(range(1, n + 1))\n\n# Write a python function to find the sum of all the numbers between 1 and n.\ndef sum(n):\n    return sum(range(1, n + 1))\n\n# Write a python function to find the sum of all the numbers between 1 and n.\ndef sum(n):\n    return sum(range(1, n + 1))\n\n# Write a python function to find the sum of all the numbers between 1 and n.\ndef sum(n):\n    return sum(range(1, n + 1))\n\n# Write a python function to find the sum of all the numbers between 1 and n.\ndef sum(n):\n    return sum(range(1, n + 1))\n\n# Write a python"], ["\n# <func> # Python \n# Write a function to find the diameter of a circle.\ndef diameter_circle(r):\n    return 2 * r\n\n# <func> # Python \n# Write a function to find the area of a circle.\ndef area_circle(r):\n    return 3.14 * r ** 2\n\n# <func> # Python \n# Write a function to find the circumference of a circle.\ndef circumference_circle(r):\n    return 2 * 3.14 * r\n\n# <func> # Python \n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return 4 / 3 * 3.14 * r ** 3\n\n# <func> # Python \n# Write a function to find the surface area of a sphere.\ndef surface_area_sphere(r):\n    return 4 * 3.14 * r ** 2\n\n# <func> # Python \n# Write a function to find the volume of a cone.\ndef volume_cone(r, h):\n    return 1 / 3 * 3.14 * r ** 2 * h\n\n# <func> # Python \n# Write a function to find the surface area of a cone.\ndef surface_area_cone(r, h):\n    return 1 / 3 * 3.14 * r * h\n\n# <func> # Python \n# Write a function to find the volume of a hemisphere.\ndef volume_hemisphere(r):\n    return 2 / 3 * 3.14 * r ** 3\n\n# <func> # Python \n# Write a function to find the surface area of a hemisphere.\ndef surface_area_hemisphere(r):\n    return 2 * 3.14 * r ** 2\n\n# <func> # Python \n# Write a function to find the volume of a frustum of a cone.\ndef volume_frustum_cone(r1, r2, h):\n    return 1 / 3 * 3.14 * r1 ** 2 * h + 1 /"], ["\n# <func> # Python \n# Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\n    return ''.join(list)\n\n# <func> # Java\n# Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\n    return ''.join(list)\n\n# <func> # JavaScript\n# Write a function to concatenate all elements of the given list into a string.\nfunction concatenate_elements(list) {\n    return list.join('');\n}\n\n# <func> # C\n# Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\n    return ''.join(list)\n\n# <func> # C++\n# Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\n    return ''.join(list)\n\n# <func> # Go\n# Write a function to concatenate all elements of the given list into a string.\nfunc concatenate_elements(list) {\n    return ''.join(list)\n}\n\n# <func> # R\n# Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\n    return ''.join(list)\n\n# <func> # Rust\n# Write a function to concatenate all elements of the given list into a string.\nfn concatenate_elements(list) {\n    return list.iter().map(|x| x.to_string()).collect::<String>().join('');\n}\n\n# <func> # TypeScript\n# Write a function to concatenate all elements of the given list into a string.\nfunction concatenate_elements(list) {\n    return list.map(x => x.toString()).join('');\n}\n\n# <func> # Python 3\n# Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\n    return ''.join(list)\n\n# <func> # Python 3.6\n# Write a function to concatenate all elements of the given list into a string."], ["\n# <func> # Python \n# Write a python function to find common divisor between two numbers in a given pair.\ndef ngcd(x,y):\n    if x == 0 or y == 0:\n        return 0\n    else:\n        return max(ngcd(x-y,x),ngcd(y-x,y))\n\n# <func> # C++\n# Write a C++ function to find common divisor between two numbers in a given pair.\n#\n# <input>\n# <param name=\"x\">int</param>\n# <param name=\"y\">int</param>\n# <param name=\"z\">int</param>\n# <param name=\"a\">int</param>\n# <param name=\"b\">int</param>\n# <param name=\"c\">int</param>\n# <param name=\"d\">int</param>\n# <param name=\"e\">int</param>\n# <param name=\"f\">int</param>\n# <param name=\"g\">int</param>\n# <param name=\"h\">int</param>\n# <param name=\"i\">int</param>\n# <param name=\"j\">int</param>\n# <param name=\"k\">int</param>\n# <param name=\"l\">int</param>\n# <param name=\"m\">int</param>\n# <param name=\"n\">int</param>\n# <param name=\"o\">int</param>\n# <param name=\"p\">int</param>\n# <param name=\"q\">int</param>\n# <param name=\"r\">int</param>\n# <param name=\"s\">int</param>\n# <param name=\"t\">int</param>\n# <param name=\"u\">int</param>\n# <param name=\"v\">int</param>\n# <param name=\"w\">int</param>\n# <param name=\"x\">int</param>\n# <param name=\"y\">int</param>\n# <param name=\"z\">int</param>\n# <param name=\"a\">int</param>\n# <param name=\"b\">int</param>\n# <param name=\"c\">int</param>\n# <param name=\"d\">int"], ["\n# <func> # Python \n# Write a python function to find remainder of two numbers.\ndef find(n,m):\n    return n % m\n\n# <func> # Java\n# Write a Java function to find remainder of two numbers.\ndef find(n,m):\n    return n % m\n\n# <func> # C\n# Write a C function to find remainder of two numbers.\ndef find(n,m):\n    return n % m\n\n# <func> # C++\n# Write a C++ function to find remainder of two numbers.\ndef find(n,m):\n    return n % m\n\n# <func> # C#\n# Write a C# function to find remainder of two numbers.\ndef find(n,m):\n    return n % m\n\n# <func> # Go\n# Write a Go function to find remainder of two numbers.\nfunc find(n,m)\n    return n % m\n\n# <func> # Haskell\n# Write a Haskell function to find remainder of two numbers.\nfind :: Int -> Int -> Int\nfind n m = n `mod` m\n\n# <func> # JavaScript\n# Write a JavaScript function to find remainder of two numbers.\nfunction find(n,m) {\n    return n % m\n}\n\n# <func> # Kotlin\n# Write a Kotlin function to find remainder of two numbers.\nfun find(n: Int, m: Int) {\n    return n % m\n}\n\n# <func> # Lua\n# Write a Lua function to find remainder of two numbers.\nfunction find(n,m)\n    return n % m\nend\n\n# <func> # MATLAB\n# Write a MATLAB function to find remainder of two numbers.\nfunction find(n,m)\n    return n % m\nend\n\n# <func> # Octave\n# Write a Octave function to find remainder of two numbers.\nfunction find(n,m)\n    return n % m\nend\n\n# <func> # Pascal\n# Write a Pascal function to find remainder of two numbers.\nfunction find(n,m)\n    return n % m\nend\n\n# <func> # Perl\n# Write a Perl function to find remainder"], ["\n# <func> # Python \n# Write a function to add consecutive numbers of a given list.\ndef add_consecutive_nums(nums):\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i] + nums[i+1])\n    return result\n\n# <func> # Python \n# Write a function to find the longest common substring of two lists.\ndef longest_common_substring(nums1, nums2):\n    nums1_len = len(nums1)\n    nums2_len = len(nums2)\n    result = []\n    for i in range(nums1_len):\n        for j in range(nums2_len):\n            if nums1[i] == nums2[j]:\n                result.append(nums1[i])\n                break\n    return ''.join(result)\n\n# <func> # Python \n# Write a function to find the longest common substring of two lists.\ndef longest_common_substring(nums1, nums2):\n    nums1_len = len(nums1)\n    nums2_len = len(nums2)\n    result = []\n    for i in range(nums1_len):\n        for j in range(nums2_len):\n            if nums1[i] == nums2[j]:\n                result.append(nums1[i])\n                break\n    return ''.join(result)\n\n# <func> # Python \n# Write a function to find the longest common substring of two lists.\ndef longest_common_substring(nums1, nums2):\n    nums1_len = len(nums1)\n    nums2_len = len(nums2)\n    result = []\n    for i in range(nums1_len):\n        for j in range(nums2_len):\n            if nums1[i] == nums2[j]:\n                result.append(nums1[i])\n                break\n    return ''.join(result)\n\n# <func> # Python \n# Write a function to find the"], ["\n# <func> # Python \n# Write a python function to find the cube sum of first n natural numbers.\ndef sum_Of_Series(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"], ["\n# <func> # Python \n# Write a function to move all zeroes to the end of the given array.\ndef re_order(A):\n    for i in range(len(A)):\n        if A[i] == 0:\n            A.insert(i, A.pop(i))\n    return A\n\n# <func> # Python \n# Write a function to find the longest common subsequence of two strings.\ndef lcs(A, B):\n    m = len(A)\n    n = len(B)\n    dp = [[0 for j in range(n+1)] for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif A[i-1] == B[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n\n# <func> # Python \n# Write a function to find the longest common subsequence of two strings.\ndef lcs(A, B):\n    m = len(A)\n    n = len(B)\n    dp = [[0 for j in range(n+1)] for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif A[i-1] == B[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n\n# <func> # Python \n# Write a function to find the longest common subsequence of two strings.\n"], ["\n# <func> # Python \n# Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k):\n    return binomial(n, k)\n\n# <func> # C++\n# Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k):\n    return binomial(n, k)\n\n# <func> # Java\n# Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k):\n    return binomial(n, k)\n\n# <func> # JavaScript\n# Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k):\n    return binomial(n, k)\n\n# <func> # Python \n# Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k):\n    return binomial(n, k)\n\n# <func> # C++\n# Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k):\n    return binomial(n, k)\n\n# <func> # Java\n# Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k):\n    return binomial(n, k)\n\n# <func> # JavaScript\n# Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k):\n    return binomial(n, k)\n\n# <func> # Python \n# Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k):\n    return binomial(n, k)\n\n# <func> # C++\n# Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k):\n    return binomial(n, k)\n\n# <func> # Java\n# Write a function to calculate"], ["\n# <func> # Python \n# Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n    for word in removewords:\n        list1.remove(word)\n    return list1\n\n# <func> # Python \n# Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n    for word in removewords:\n        list1.remove(word)\n    return list1\n\n# <func> # Python \n# Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n    for word in removewords:\n        list1.remove(word)\n    return list1\n\n# <func> # Python \n# Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n    for word in removewords:\n        list1.remove(word)\n    return list1\n\n# <func> # Python \n# Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n    for word in removewords:\n        list1.remove(word)\n    return list1\n\n# <func> # Python \n# Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n    for word in removewords:\n        list1.remove(word)\n    return list1\n\n# <func> # Python \n# Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n    for word in removewords:\n        list1.remove(word)\n    return list1\n\n# <func> # Python \n# Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n    for word in removewords:\n        list1.remove(word)\n    return list1\n\n# <func> # Python \n# Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n    for word in removewords:\n        list1.remove(word)\n    return"], ["\n# <func> # Python \n# Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j]:\n                return True\n    return False\n\n# <func> # Python \n# Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j]:\n                return True\n    return False\n\n# <func> # Python \n# Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j]:\n                return True\n    return False\n\n# <func> # Python \n# Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j]:\n                return True\n    return False\n\n# <func> # Python \n# Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j]:\n                return True\n    return False\n\n# <func> # Python \n# Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\n    for i in range(len(l1)):\n        for j in"], ["\n# <func> # Python \n# Write a python function to find the average of odd numbers till a given odd number.\ndef average_Odd(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            sum += i\n    return sum/n\n"], ["\n# <func> # Python \n# Write a function to find the number of subsequences having product smaller than k for the given non negative array.\ndef no_of_subsequences(arr, k):\n    no_of_subsequences = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] < k:\n                no_of_subsequences += 1\n    return no_of_subsequences\n\n\n# +\n# 10. Write a Python program to find the number of subsequences having product smaller than k for the given non negative array.\n\ndef no_of_subsequences(arr, k):\n    no_of_subsequences = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] < k:\n                no_of_subsequences += 1\n    return no_of_subsequences\n\n\n# +\n# 11. Write a Python program to find the number of subsequences having product smaller than k for the given non negative array.\n\ndef no_of_subsequences(arr, k):\n    no_of_subsequences = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] < k:\n                no_of_subsequences += 1\n    return no_of_subsequences\n\n\n# +\n# 12. Write a Python program to find the number of subsequences having product smaller than k for the given non negative array.\n\ndef no_of_subsequences(arr, k):\n    no_of_subsequences = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] < k:\n                no_of_subsequences += 1\n    return no_of_subsequences\n\n\n# +\n# 13. Write a Python program to find"]]