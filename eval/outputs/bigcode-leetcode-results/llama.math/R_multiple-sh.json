[["# <func> # Shell\n#!/bin/bash\n# Check if in given list of numbers, are any two numbers closer to each other than\n# given threshold.\n# >>> $(has_close_elements \"1.0 2.0 3.0\" \"0.5\")\n# \"false\"\n# >>> $(has_close_elements \"1.0 2.8 3.0 4.0 5.0 2.0\" \"0.3\")\n# \"true\"\n#\n# $1 is a space-separated list\n# $2 is a floating point\nhas_close_elements() {\n    # Get the list of numbers\n    numbers=($(echo \"$2\" | cut -d ' ' -f 1))\n    # Get the list of numbers\n    thresholds=($(echo \"$1\" | cut -d ' ' -f 1))\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of numbers\n    # Get the list of"], ["# <func> # Shell\n#!/bin/bash\n# Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n# separate those group into separate strings and return the list of those.\n# Separate groups are balanced (each open brace is properly closed) and not nested within each other\n# Ignore any spaces in the input string.\n# >>> $(separate_paren_groups \"( ) (( )) (( )( ))\")\n# ['\"()\"', '\"(())\"', '\"(()())\"']\n#\n# $1 is a string\nseparate_paren_groups() {\n    local groups=\"$1\"\n    local result=\"\"\n    for group in $groups; do\n        if [[ $group =~ ( ) ]] || [[ $group =~ ( )( ) ]] || [[ $group =~ ( )( )( ) ]]; then\n            result=\"$result $group\"\n        else\n            result=\"$result $group $group\"\n        fi\n    done\n    result=\"$result $result\"\n    return $result"], ["# <func> # Shell\n#!/bin/bash\n# Given a positive floating point number, it can be decomposed into\n# and integer part (largest integer smaller than given number) and decimals\n# (leftover part always smaller than 1).\n# Return the decimal part of the number.\n# >>> $(truncate_number \"3.5\")\n# \"0.5\"\n#\n# $1 is a floating point\ntruncate_number() {\n    # The largest integer smaller than given number\n    # is the integer part\n    # The leftover part always smaller than 1\n    # is the decimal part\n    # The integer part is the largest integer smaller than given number\n    # The leftover part is always smaller than 1\n    # The integer part is the largest integer smaller than given number\n    # The leftover part is always smaller than 1\n    # The integer part is the largest integer smaller than given number\n    # The leftover part is always smaller than 1\n    # The integer part is the largest integer smaller than given number\n    # The leftover part is always smaller than 1\n    # The integer part is the largest integer smaller than given number\n    # The leftover part is always smaller than 1\n    # The integer part is the largest integer smaller than given number\n    # The leftover part is always smaller than 1\n    # The integer part is the largest integer smaller than given number\n    # The leftover part is always smaller than 1\n    # The integer part is the largest integer smaller than given number\n    # The leftover part is always smaller than 1\n    # The integer part is the largest integer smaller than given number\n    # The leftover part is always smaller than 1\n    # The integer part is the largest integer smaller than given number\n    # The leftover part is always smaller than 1\n    # The integer part is the largest integer smaller than given number\n    # The leftover part is always smaller than 1\n    # The integer part is the largest integer smaller than given number\n    # The leftover part is always smaller than 1\n    # The integer part is the largest integer smaller than given number\n    #"], ["# <func> # Shell\n#!/bin/bash\n# You're given a list of deposit and withdrawal operations on a bank account that starts with\n# zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n# at that point function should return true. Otherwise it should return false.\n# >>> $(below_zero \"1 2 3\")\n# \"false\"\n# >>> $(below_zero \"1 2 -4 5\")\n# \"true\"\n#\n# $1 is a space-separated list\nbelow_zero() {\n  local balance\n  local min_balance\n  local min_balance_index\n  local min_balance_value\n  local min_balance_value_index\n  local min_balance_value_index_index\n  local min_balance_value_index_index_index\n  local min_balance_value_index_index_index_index\n  local min_balance_value_index_index_index_index_index\n  local min_balance_value_index_index_index_index_index_index\n  local min_balance_value_index_index_index_index_index_index_index\n  local min_balance_value_index_index_index_index_index_index_index_index\n  local min_balance_value_index_index_index_index_index_index_index_index_index\n  local min_balance_value_index_index_index_index_index_index_index_index_index_index\n  local min_balance_value_index_index_index_index_index_index_index_index_index_index_index\n  local min_balance_value_index_index_index_index_index_index_index_index_index_index_index_index_index\n  local min_balance_value_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n  local min_balance_value_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index"], ["# <func> # Shell\n#!/bin/bash\n# For a given list of input numbers, calculate Mean Absolute Deviation\n# around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute difference between each\n# element and a centerpoint (mean in this case):\n# MAD = average | x - x_mean |\n# >>> $(mean_absolute_deviation \"1.0 2.0 3.0 4.0\")\n# \"1.0\"\n#\n# $1 is a space-separated list\nmean_absolute_deviation() {\n  local nums=\"$1\"\n  local mean=\"$2\"\n  local deviation=\"$3\"\n  local deviation_sum=0\n  for num in $nums; do\n    deviation_sum += abs($num - $mean)\n  done\n  deviation_sum /= $#nums\n  return $deviation_sum"], ["# <func> # Shell\n#!/bin/bash\n# Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n# >>> $(intersperse \"\" \"4\")\n# []\n# >>> $(intersperse \"1 2 3\" \"4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"4\"', '\"3\"']\n#\n# $1 is a space-separated list\n# $2 is an integer\nintersperse() {\n    if [[ $# -gt 1 ]] ; then\n        echo \"$1\"\n        echo \"$1\"\n    else\n        echo \"$1\"\n    fi"], ["# <func> # Shell\n#!/bin/bash\n# Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n# For each of the group, output the deepest level of nesting of parentheses.\n# E.g. (()()) has maximum two levels of nesting while ((())) has three.\n# >>> $(parse_nested_parens \"(()()) ((())) () ((())()())\")\n# ['\"2\"', '\"3\"', '\"1\"', '\"3\"']\n#\n# $1 is a string\nparse_nested_parens() {\n  # Split the string by spaces\n  split_string=$(echo \"$1\" | sed 's/ / /g')\n\n  # Create a list of all the groups\n  groups=$(echo \"$1\" | sed 's/ / /g')\n\n  # Create a list of all the groups\n  nested_groups=$(echo \"$1\" | sed 's/ / /g')\n\n  # Create a list of all the groups\n  nested_groups_levels=$(echo \"$1\" | sed 's/ / /g')\n\n  # Create a list of all the groups\n  nested_groups_levels_2=$(echo \"$1\" | sed 's/ / /g')\n\n  # Create a list of all the groups\n  nested_groups_levels_3=$(echo \"$1\" | sed 's/ / /g')\n\n  # Create a list of all the groups\n  nested_groups_levels_4=$(echo \"$1\" | sed 's/ / /g')\n\n  # Create a list of all the groups\n  nested_groups_levels_5=$(echo \"$1\" | sed 's/ / /g')\n\n  # Create a list of all the groups\n  nested_groups_levels_6=$(echo \"$1\" | sed 's/ / /g')\n\n  # Create a list of all the groups\n  nested_groups_levels_7=$(echo \"$1\" | sed 's/ / /g')\n\n  # Create a list of all the groups\n  nested_groups_levels_8=$(echo \"$1\" | sed 's/ / /g')\n\n  # Create a list of all the groups\n  nested_groups_"], ["# <func> # Shell\n#!/bin/bash\n# For a given list of integers, return a list consisting of a sum and a product of all the integers in a list.\n# Empty sum should be equal to 0 and empty product should be equal to 1.\n# >>> $(sum_product \"\")\n# ['\"0\"', '\"1\"']\n# >>> $(sum_product \"1 2 3 4\")\n# ['\"10\"', '\"24\"']\n#\n# $1 is a space-separated list\nsum_product() {\n  # Split the list into a list of words\n  words=$1\n  # Split each word into a list of integers\n  words_ints=$words[0]\n  # Split each word into a list of integers\n  words_ints_2=$words_ints[1]\n  # Split each word into a list of integers\n  words_ints_3=$words_ints_2[1]\n  # Split each word into a list of integers\n  words_ints_4=$words_ints_3[1]\n  # Split each word into a list of integers\n  words_ints_5=$words_ints_4[1]\n  # Split each word into a list of integers\n  words_ints_6=$words_ints_5[1]\n  # Split each word into a list of integers\n  words_ints_7=$words_ints_6[1]\n  # Split each word into a list of integers\n  words_ints_8=$words_ints_7[1]\n  # Split each word into a list of integers\n  words_ints_9=$words_ints_8[1]\n  # Split each word into a list of integers\n  words_ints_10=$words_ints_9[1]\n  # Split each word into a list of integers\n  words_ints_11=$words_ints_10[1]\n  # Split each word into a list of integers\n  words_ints_12=$words_ints_11[1]\n  # Split each word into a list of integers\n  words_ints_13=$words_ints_12[1]\n  # Split each word into a list of integers\n  words_ints_"], ["# <func> # Shell\n#!/bin/bash\n# From a given list of integers, generate a list of rolling maximum element found until given moment\n# in the sequence.\n# >>> $(rolling_max \"1 2 3 2 3 4 2\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"3\"', '\"3\"', '\"4\"', '\"4\"']\n#\n# $1 is a space-separated list\nrolling_max() {\n  local max_val=\"$1\"\n  local max_index=\"$1\"\n  local max_val_list=\"$1\"\n  local max_index_list=\"$1\"\n  local max_val_list_len=$(( $#max_val_list ))\n  local max_index_list_len=$(( $#max_index_list ))\n  local max_val_list_len_str=\"$max_val_list_len\"\n  local max_index_list_len_str=\"$max_index_list_len\"\n  local max_val_list_str=\"$max_val_list\"\n  local max_index_list_str=\"$max_index_list\"\n  local max_val_list_len_str_len=$(( $max_val_list_len_str ))\n  local max_index_list_len_str_len=$(( $max_index_list_len_str ))\n  local max_val_list_len_str_len_str=\"$max_val_list_len_str\"\n  local max_index_list_len_str_len_str=\"$max_index_list_len_str\"\n  local max_val_list_len_str_len_str_len=$(( $max_val_list_len_str_len_str ))\n  local max_index_list_len_str_len_str_len=$(( $max_index_list_len_str_len_str ))\n  local max_val_list_len_str_len_str_len_str=\"$max_val_list_len_str_len\"\n  local max_index_list_len_str_len_str_len_str=\"$max_index_list_"], ["# <func> # Shell\n#!/bin/bash\n# Find the shortest palindrome that begins with a supplied string.\n# Algorithm idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n# - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n# >>> $(make_palindrome \"\")\n# \"\"\n# >>> $(make_palindrome \"cat\")\n# \"catac\"\n# >>> $(make_palindrome \"cata\")\n# \"catac\"\n#\n# $1 is a string\nmake_palindrome() {\n  # Find the longest postfix of supplied string that is a palindrome.\n  # This is done by finding the longest prefix of the string that is a palindrome.\n  # The longest prefix of the string that is a palindrome is the reverse of the string prefix that comes before the palindromic suffix.\n  # This is done by finding the longest prefix of the string that is a palindrome.\n  # The longest prefix of the string that is a palindrome is the reverse of the string prefix that comes before the palindromic suffix.\n  # This is done by finding the longest prefix of the string that is a palindrome.\n  # The longest prefix of the string that is a palindrome is the reverse of the string prefix that comes before the palindromic suffix.\n  # This is done by finding the longest prefix of the string that is a palindrome.\n  # The longest prefix of the string that is a palindrome is the reverse of the string prefix that comes before the palindromic suffix.\n  # This is done by finding the longest prefix of the string that is a palindrome.\n  # The longest prefix of the string that is a palindrome is the reverse of the string prefix that comes before the palindromic suffix.\n  # This is done by finding the longest prefix of the string that is a palindrome.\n  # The longest prefix of the string that is a palindrome is the reverse of the string prefix that comes before the palindromic suffix.\n  # This is done by finding the longest prefix of the string that is a palindrome.\n  # The longest prefix"], ["# <func> # Shell\n#!/bin/bash\n# Input are two strings a and b consisting only of 1s and 0s.\n# Perform binary XOR on these inputs and return result also as a string.\n# >>> $(string_xor \"010\" \"110\")\n# \"100\"\n#\n# $1 is a string\n# $2 is a string\nstring_xor() {\n  a=\"$1\"\n  b=\"$2\"\n  c=$(echo $a | cut -c 1-2)\n  d=$(echo $b | cut -c 1-2)\n  e=$(echo $a | cut -c 3-4)\n  f=$(echo $b | cut -c 3-4)\n  g=$(echo $a | cut -c 5-6)\n  h=$(echo $b | cut -c 5-6)\n  i=$(echo $a | cut -c 7-8)\n  j=$(echo $b | cut -c 7-8)\n  k=$(echo $a | cut -c 9-10)\n  l=$(echo $b | cut -c 9-10)\n  m=$(echo $a | cut -c 11-12)\n  n=$(echo $b | cut -c 11-12)\n  o=$(echo $a | cut -c 13-14)\n  p=$(echo $b | cut -c 13-14)\n  q=$(echo $a | cut -c 15-16)\n  r=$(echo $b | cut -c 15-16)\n  s=$(echo $a | cut -c 17-18)\n  t=$(echo $b | cut -c 17-18)\n  u=$(echo $a | cut -c 19-20)\n  v=$(echo $b | cut -c 19-20)\n  w=$(echo $a | cut -c 21-22)\n  x=$(echo $b | cut -c 21-22)\n  y=$(echo $a | cut -c 23-24)\n  z=$(echo"], ["# <func> # Shell\n#!/bin/bash\n# Out of list of strings, return the longest one. Return the first one in case of multiple\n# strings of the same length. Return None in case the input list is empty.\n# >>> $(longest \"\")\n# \"None\"\n# >>> $(longest \"a b c\")\n# \"a\"\n# >>> $(longest \"a bb ccc\")\n# \"ccc\"\n#\n# $1 is a space-separated list\nlongest() {\n    local -n \"$1\"\n    local -n \"$2\"\n    local -n \"$3\"\n    local -n \"$4\"\n    local -n \"$5\"\n    local -n \"$6\"\n    local -n \"$7\"\n    local -n \"$8\"\n    local -n \"$9\"\n    local -n \"$10\"\n    local -n \"$11\"\n    local -n \"$12\"\n    local -n \"$13\"\n    local -n \"$14\"\n    local -n \"$15\"\n    local -n \"$16\"\n    local -n \"$17\"\n    local -n \"$18\"\n    local -n \"$19\"\n    local -n \"$20\"\n    local -n \"$21\"\n    local -n \"$22\"\n    local -n \"$23\"\n    local -n \"$24\"\n    local -n \"$25\"\n    local -n \"$26\"\n    local -n \"$27\"\n    local -n \"$28\"\n    local -n \"$29\"\n    local -n \"$30\"\n    local -n \"$31\"\n    local -n \"$32\"\n    local -n \"$33\"\n    local -n \"$34\"\n    local -n \"$35\"\n    local -n \"$36\"\n    local -n \"$37\"\n    local -n \"$38\"\n    local -n \"$39\"\n    local -n \"$40\"\n    local -n \"$41\"\n    local -n \"$42\"\n    local -n \"$43\"\n    local -n \"$44\"\n    local -n \"$45"], ["# <func> # Shell\n#!/bin/bash\n# Return a greatest common divisor of two integers a and b\n# >>> $(greatest_common_divisor \"3\" \"5\")\n# \"1\"\n# >>> $(greatest_common_divisor \"25\" \"15\")\n# \"5\"\n#\n# $1 is an integer\n# $2 is an integer\ngreatest_common_divisor() {\n  local a=\"$1\"\n  local b=\"$2\"\n  local gcd=$(expr $a % $b)\n  return $gcd"], ["# <func> # Shell\n#!/bin/bash\n# Return list of all prefixes from shortest to longest of the input string\n# >>> $(all_prefixes \"abc\")\n# ['\"a\"', '\"ab\"', '\"abc\"']\n#\n# $1 is a string\nall_prefixes() {\n  # Get the input string\n  input_string=$1\n\n  # Get the length of the input string\n  length=$((length=$(length $input_string)))\n\n  # Get the prefixes\n  prefixes=$(echo -e \"$input_string[0]\" | tr -d ' ')\n\n  # Get the prefixes in reverse order\n  prefixes_reverse=$(echo -e \"$input_string[length-1]\" | tr -d ' ')\n\n  # Get the prefixes in reverse order\n  prefixes_reverse_reverse=$(echo -e \"$input_string[length-2]\" | tr -d ' ')\n\n  # Get the prefixes in reverse order\n  prefixes_reverse_reverse_reverse=$(echo -e \"$input_string[length-3]\" | tr -d ' ')\n\n  # Get the prefixes in reverse order\n  prefixes_reverse_reverse_reverse_reverse=$(echo -e \"$input_string[length-4]\" | tr -d ' ')\n\n  # Get the prefixes in reverse order\n  prefixes_reverse_reverse_reverse_reverse_reverse=$(echo -e \"$input_string[length-5]\" | tr -d ' ')\n\n  # Get the prefixes in reverse order\n  prefixes_reverse_reverse_reverse_reverse_reverse_reverse=$(echo -e \"$input_string[length-6]\" | tr -d ' ')\n\n  # Get the prefixes in reverse order\n  prefixes_reverse_reverse_reverse_reverse_reverse_reverse_reverse=$(echo -e \"$input_string[length-7]\" | tr -d ' ')\n\n  # Get the prefixes in reverse order\n  prefixes_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse=$(echo -e \"$input_string[length-8]\" | tr -d ' ')\n\n  # Get the prefixes in reverse order\n  prefixes_reverse_reverse_reverse_reverse_reverse_reverse_"], ["# <func> # Shell\n#!/bin/bash\n# Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n# >>> $(string_sequence \"0\")\n# \"0\"\n# >>> $(string_sequence \"5\")\n# \"0 1 2 3 4 5\"\n#\n# $1 is an integer\nstring_sequence() {\n  # $1 is an integer\n  # $2 is a string\n  # $3 is a list\n  # $4 is a dictionary\n  # $5 is a tuple\n  # $6 is a boolean\n  # $7 is a string\n  # $8 is a list\n  # $9 is a dictionary\n  # $10 is a tuple\n  # $11 is a boolean\n  # $12 is a string\n  # $13 is a list\n  # $14 is a dictionary\n  # $15 is a tuple\n  # $16 is a boolean\n  # $17 is a string\n  # $18 is a list\n  # $19 is a dictionary\n  # $20 is a tuple\n  # $21 is a boolean\n  # $22 is a string\n  # $23 is a list\n  # $24 is a dictionary\n  # $25 is a tuple\n  # $26 is a boolean\n  # $27 is a string\n  # $28 is a list\n  # $29 is a dictionary\n  # $30 is a tuple\n  # $31 is a boolean\n  # $32 is a string\n  # $33 is a list\n  # $34 is a dictionary\n  # $35 is a tuple\n  # $36 is a boolean\n  # $37 is a string\n  # $38 is a list\n  # $39 is a dictionary\n  # $40 is a tuple\n  # $41 is a boolean\n  # $42 is a string\n  # $43 is a list\n  # $44 is a dictionary\n  # $45 is a tuple\n  # $46 is a boolean\n  # $47 is a string\n  # $48 is"], ["# <func> # Shell\n#!/bin/bash\n# Given a string, find out how many distinct characters (regardless of case) does it consist of\n# >>> $(count_distinct_characters \"xyzXYZ\")\n# \"3\"\n# >>> $(count_distinct_characters \"Jerry\")\n# \"4\"\n#\n# $1 is a string\ncount_distinct_characters() {\n  # Get the string\n  string=$1\n\n  # Get the number of distinct characters\n  count=$(echo $string | tr -d '[:upper:]' | tr -d '[:lower:]' | tr -d '[:digit:]' | tr -d '[:punct:]' | tr -d '[:blank:]')\n\n  # Print the result\n  echo \"The string has $count distinct characters\""], ["# <func> # Shell\n#!/bin/bash\n# Input to this function is a string representing musical notes in a special ASCII format.\n# Your task is to parse this string and return list of integers corresponding to how many beats does each\n# not last.\n# Here is a legend:\n# 'o' - whole note, lasts four beats\n# 'o|' - half note, lasts two beats\n# '.|' - quater note, lasts one beat\n# >>> $(parse_music \"o o| .| o| o| .| .| .| .| o o\")\n# ['\"4\"', '\"2\"', '\"1\"', '\"2\"', '\"2\"', '\"1\"', '\"1\"', '\"1\"', '\"1\"', '\"4\"', '\"4\"']\n#\n# $1 is a string\nparse_music() {\n    local note_str=\"$1\"\n    local note_str_len=$((length $note_str))\n    local note_str_split=split $note_str \" \"\n    local note_str_split_len=$((length $note_str_split))\n    local note_str_split_list=split $note_str_split \" \"\n    local note_str_split_list_len=$((length $note_str_split_list))\n    local note_str_split_list_list=split $note_str_split \" \"\n    local note_str_split_list_list_len=$((length $note_str_split_list_list))\n    local note_str_split_list_list_list=split $note_str_split_list \" \"\n    local note_str_split_list_list_list_len=$((length $note_str_split_list_list_list))\n    local note_str_split_list_list_list_list_list=split $note_str_split_list \" \"\n    local note_str_split_list_list_list_list_list_len=$((length $note_str_split_list_list_list_list_list))\n    local note_str_split_list_list_list_list_list_list_list=split $note_str_split"], ["# <func> # Shell\n#!/bin/bash\n# Find how many times a given substring can be found in the original string. Count overlaping cases.\n# >>> $(how_many_times \"\" \"a\")\n# \"0\"\n# >>> $(how_many_times \"aaa\" \"a\")\n# \"3\"\n# >>> $(how_many_times \"aaaa\" \"aa\")\n# \"3\"\n#\n# $1 is a string\n# $2 is a string\nhow_many_times() {\n  # Get the length of the original string\n  length=$(echo \"$1\" | wc -l)\n\n  # Get the length of the substring\n  substring_length=$(echo \"$2\" | wc -l)\n\n  # Get the number of times the substring can be found in the original string\n  substring_count=$(echo \"$2\" | cut -d \" \" -f 1)\n\n  # Get the number of times the substring can be found in the original string\n  substring_overlap=$(echo \"$2\" | cut -d \" \" -f 2)\n\n  # Get the number of times the substring can be found in the original string\n  substring_overlap_count=$(echo \"$2\" | cut -d \" \" -f 3)\n\n  # Get the number of times the substring can be found in the original string\n  substring_overlap_count_2=$(echo \"$2\" | cut -d \" \" -f 4)\n\n  # Get the number of times the substring can be found in the original string\n  substring_overlap_count_3=$(echo \"$2\" | cut -d \" \" -f 5)\n\n  # Get the number of times the substring can be found in the original string\n  substring_overlap_count_4=$(echo \"$2\" | cut -d \" \" -f 6)\n\n  # Get the number of times the substring can be found in the original string\n  substring_overlap_count_5=$(echo \"$2\" | cut -d \" \" -f 7)\n\n  # Get the number of times the substring can be found in the original string\n  substring_overlap_count_6=$(echo \"$2\" | cut -d \" \" -f 8)\n\n  #"], ["# <func> # Shell\n#!/bin/bash\n# Input is a space-delimited string of numberals from 'zero' to 'nine'.\n# Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n# Return the string with numbers sorted from smallest to largest\n# >>> $(sort_numbers \"three one five\")\n# \"one three five\"\n#\n# $1 is a string\nsort_numbers() {\n    local nums=\"$1\"\n    local sorted_nums=\"\"\n    for num in \"${!nums[@]}\"; do\n        if [ \"$num\" == \"zero\" ]; then\n            sorted_nums=\"$sorted_nums\"\n            sorted_nums=\"$sorted_nums $num\"\n        else\n            sorted_nums=\"$sorted_nums $num\"\n        fi\n    done\n    return $sorted_nums"], ["# <func> # Shell\n#!/bin/bash\n# From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n# other and return them in order (smaller number, larger number).\n# >>> $(find_closest_elements \"1.0 2.0 3.0 4.0 5.0 2.2\")\n# ['\"2.0\"', '\"2.2\"']\n# >>> $(find_closest_elements \"1.0 2.0 3.0 4.0 5.0 2.0\")\n# ['\"2.0\"', '\"2.0\"']\n#\n# $1 is a space-separated list\nfind_closest_elements() {\n    local nums=\"$1\"\n    local num_list=($nums)\n    local num_list_length=(${#num_list})\n    local num_list_length_str=\"${num_list_length}\"\n    local num_list_str=\"${num_list}\"\n    local num_list_str_length_str=\"${num_list_str}\"\n    local num_list_str_length=(${#num_list_str})\n    local num_list_str_length_str=\"${num_list_str}\"\n    local num_list_str_length_str_length_str=\"${num_list_str_length}\"\n    local num_list_str_length_str_length_str_length_str=\"${num_list_str_length}\"\n    local num_list_str_length_str_length_str_length_str_length_str=\"${num_list_str_length}\"\n    local num_list_str_length_str_length_str_length_str_length_str_length_str=\"${num_list_str_length}\"\n    local num_list_str_length_str_length_str_length_str_length_str_length_str=\"${num_list_str_length}\"\n    local num_list_str_length_str_length_str_length_str_length_str_length_str=\"${num_list_str_length}\"\n    local num_list_str_length_str_length_str"], ["# <func> # Shell\n#!/bin/bash\n# Given list of numbers (of at least two elements), apply a linear transform to that list,\n# such that the smallest number will become 0 and the largest will become 1\n# >>> $(rescale_to_unit \"1.0 2.0 3.0 4.0 5.0\")\n# ['\"0.0\"', '\"0.25\"', '\"0.5\"', '\"0.75\"', '\"1.0\"']\n#\n# $1 is a space-separated list\nrescale_to_unit() {\n  # Split the list into a list of numbers and a list of strings\n  # >>> $(rescale_to_unit \"1.0 2.0 3.0 4.0 5.0\")\n  # ['\"1.0\"', '\"2.0\"', '\"3.0\"', '\"4.0\"', '\"5.0\"']\n  #\n  # The first element is the list of numbers\n  # The second element is the list of strings\n  # >>> $(rescale_to_unit \"1.0 2.0 3.0 4.0 5.0\")\n  # ['\"1.0\"', '\"2.0\"', '\"3.0\"', '\"4.0\"', '\"5.0\"']\n  #\n  # The first element is the list of numbers\n  # The second element is the list of strings\n  # >>> $(rescale_to_unit \"1.0 2.0 3.0 4.0 5.0\")\n  # ['\"1.0\"', '\"2.0\"', '\"3.0\"', '\"4.0\"', '\"5.0\"']\n  #\n  # The first element is the list of numbers\n  # The second element is the list of strings\n  # >>> $(rescale_to_unit \"1.0 2.0 3.0 4.0 5.0\")\n  # ['\"1.0\"', '\"2.0\"', '\"3.0\"', '\"4.0\"', '\"5.0\"']\n  #\n  # The first element is"], ["# <func> # Shell\n#!/bin/bash\n# Filter given list of any shthon values only for integers\n# >>> $(filter_integers \"a 3.14 5\")\n# ['\"5\"']\n# >>> $(filter_integers \"1 2 3 abc  \")\n# ['\"1\"', '\"2\"', '\"3\"']\n#\n# $1 is a space-separated list\nfilter_integers() {\n  local -a list\n  local -a list_tmp\n  local -a list_tmp_tmp\n  local -a list_tmp_tmp_tmp\n  local -a list_tmp_tmp_tmp_tmp\n  local -a list_tmp_tmp_tmp_tmp_tmp\n  local -a list_tmp_tmp_tmp_tmp_tmp_tmp\n  local -a list_tmp_tmp_tmp_tmp_tmp_tmp_tmp\n  local -a list_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp\n  local -a list_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp\n  local -a list_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp\n  local -a list_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp\n  local -a list_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp\n  local -a list_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp\n  local -a list_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp\n  local -a list_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp\n  local -a list_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp\n  local -a list_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_tmp_"], ["# <func> # Shell\n#!/bin/bash\n# Return length of given string\n# >>> $(strlen \"\")\n# \"0\"\n# >>> $(strlen \"abc\")\n# \"3\"\n#\n# $1 is a string\nstrlen() {\n  length=$(echo \"$1\" | wc -c)\n  return $length"], ["# <func> # Shell\n#!/bin/bash\n# For a given number n, find the largest number that divides n evenly, smaller than n\n# >>> $(largest_divisor \"15\")\n# \"5\"\n#\n# $1 is an integer\nlargest_divisor() {\n  # Find the largest number that divides the input evenly\n  # >>> $(largest_divisor 15)\n  # \"5\"\n  # >>> $(largest_divisor 15 10)\n  # \"5\"\n  # >>> $(largest_divisor 15 10 10)\n  # \"5\"\n  # >>> $(largest_divisor 15 10 10 10)\n  # \"5\"\n  # >>> $(largest_divisor 15 10 10 10 10)\n  # \"5\"\n  # >>> $(largest_divisor 15 10 10 10 10 10)\n  # \"5\"\n  # >>> $(largest_divisor 15 10 10 10 10 10 10)\n  # \"5\"\n  # >>> $(largest_divisor 15 10 10 10 10 10 10 10)\n  # \"5\"\n  # >>> $(largest_divisor 15 10 10 10 10 10 10 10 10)\n  # \"5\"\n  # >>> $(largest_divisor 15 10 10 10 10 10 10 10 10 10)\n  # \"5\"\n  # >>> $(largest_divisor 15 10 10 10 10 10 10 10 10 10 10)\n  # \"5\"\n  # >>> $(largest_divisor 15 10 10 10 10 10"], ["# <func> # Shell\n#!/bin/bash\n# Return list of prime factors of given integer in the order from smallest to largest.\n# Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n# Input number should be equal to the product of all factors\n# >>> $(factorize \"8\")\n# ['\"2\"', '\"2\"', '\"2\"']\n# >>> $(factorize \"25\")\n# ['\"5\"', '\"5\"']\n# >>> $(factorize \"70\")\n# ['\"2\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\nfactorize() {\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1"], ["# <func> # Shell\n#!/bin/bash\n# From a list of integers, remove all elements that occur more than once.\n# Keep order of elements left the same as in the input.\n# >>> $(remove_duplicates \"1 2 3 2 4\")\n# ['\"1\"', '\"3\"', '\"4\"']\n#\n# $1 is a space-separated list\nremove_duplicates() {\n    local -a lst\n    lst=( \"$@\" )\n    while IFS= read -r -a lst; do\n        if [[ $lst[*] =~ ^[0-9]+$ ]]; then\n            echo \"$lst\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\"\n            echo \"$lst[*]\""], ["# <func> # Shell\n#!/bin/bash\n# For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n# >>> $(flip_case \"Hello\")\n# \"hELLO\"\n#\n# $1 is a string\nflip_case() {\n    local s=\"$1\"\n    local i=0\n    while [ $i -lt $#s ]\n    do\n        s=\"${s:$i:1}\"\n        i=$(($i+1))\n    done\n    return $s"], ["# <func> # Shell\n#!/bin/bash\n# Concatenate list of strings into a single string\n# >>> $(concatenate \"\")\n# \"\"\n# >>> $(concatenate \"a b c\")\n# \"abc\"\n#\n# $1 is a space-separated list\nconcatenate() {\n    local a b c\n    a=$1\n    b=$2\n    c=$3\n    echo \"${a} ${b} ${c}\""], ["# <func> # Shell\n#!/bin/bash\n# Return only positive numbers in the list.\n# >>> $(get_positive \"-1 2 -4 5 6\")\n# ['\"2\"', '\"5\"', '\"6\"']\n# >>> $(get_positive \"5 3 -5 2 -3 3 9 0 123 1 -10\")\n# ['\"5\"', '\"3\"', '\"2\"', '\"3\"', '\"9\"', '\"123\"', '\"1\"']\n#\n# $1 is a space-separated list\nget_positive() {\n    local -a list\n    local -a list_positive\n    local -a list_negative\n    local -a list_positive_negative\n    local -a list_positive_negative_positive\n    local -a list_negative_positive\n    local -a list_negative_positive_negative\n    local -a list_positive_negative_positive_negative\n    local -a list_negative_positive_negative_positive\n    local -a list_negative_positive_negative_positive_negative\n    local -a list_positive_negative_positive_negative_positive\n    local -a list_positive_negative_positive_negative_positive_negative\n    local -a list_negative_positive_negative_positive_negative_positive\n    local -a list_negative_positive_negative_positive_negative_positive_negative\n    local -a list_positive_negative_positive_negative_positive_negative_negative\n    local -a list_positive_negative_positive_negative_positive_negative_negative_negative\n    local -a list_negative_positive_negative_positive_negative_positive_negative_negative_negative\n    local -a list_negative_positive_negative_positive_negative_positive_negative_negative_negative_negative\n    local -a list_positive_negative_positive_negative_positive_negative_negative_negative_negative_negative_negative\n    local -a list_positive_negative_positive_negative_positive_negative_negative_negative_"], ["# <func> # Shell\n#!/bin/bash\n# Return true if a given number is prime, and false otherwise.\n# >>> $(is_prime \"6\")\n# \"false\"\n# >>> $(is_prime \"101\")\n# \"true\"\n# >>> $(is_prime \"11\")\n# \"true\"\n# >>> $(is_prime \"13441\")\n# \"true\"\n# >>> $(is_prime \"61\")\n# \"true\"\n# >>> $(is_prime \"4\")\n# \"false\"\n# >>> $(is_prime \"1\")\n# \"false\"\n#\n# $1 is an integer\nis_prime() {\n  if [ $# -ne 1 ]; then\n    echo \"Usage: $(is_prime $1)\"\n    exit 1\n  fi\n  num=$1\n  if [ $num -eq 0 ]; then\n    echo \"0 is not a prime number\"\n    exit 1\n  fi\n  for i in $(seq 2 1 $num); do\n    if [ $i -eq 0 ]; then\n      echo \"0 is not a prime number\"\n      exit 1\n    fi\n    if [ $i -eq $num ]; then\n      echo \"0 is not a prime number\"\n      exit 1\n    fi\n    if [ $i -eq $num -eq $num ]; then\n      echo \"0 is not a prime number\"\n      exit 1\n    fi\n    if [ $i -eq $num -eq $num -eq $num ]; then\n      echo \"0 is not a prime number\"\n      exit 1\n    fi\n    if [ $i -eq $num -eq $num -eq $num -eq $num ]; then\n      echo \"0 is not a prime number\"\n      exit 1\n    fi\n    if [ $i -eq $num -eq $num -eq $num -eq $num -eq $num ]; then\n      echo \"0 is not a prime number\"\n      exit 1\n    fi\n    if [ $i -eq $num -eq $num -eq $num -eq $num -eq $num -eq $num ]; then\n      echo \"0 is not a prime number\"\n     "], ["# <func> # Shell\n#!/bin/bash\n# This function takes a list l and returns a list l' such that\n# l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n# to the values of the corresponding indicies of l, but sorted.\n# >>> $(sort_third \"1 2 3\")\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> $(sort_third \"5 6 3 4 8 9 2\")\n# ['\"2\"', '\"6\"', '\"3\"', '\"4\"', '\"8\"', '\"9\"', '\"5\"']\n#\n# $1 is a space-separated list\nsort_third() {\n    local l=$1\n    local l_sorted=$l[1:0]\n    local l_sorted_sorted=$l_sorted[1:0]\n    for i in $l; do\n        if [ $i -eq 3 ]; then\n            l_sorted_sorted[$i-2]=$l_sorted[$i-1]\n        else\n            l_sorted_sorted[$i-1]=$l_sorted[$i]\n        fi\n    done\n    return $l_sorted_sorted"], ["# <func> # Shell\n#!/bin/bash\n# Return sorted unique elements in a list\n# >>> $(unique \"5 3 5 2 3 3 9 0 123\")\n# ['\"0\"', '\"2\"', '\"3\"', '\"5\"', '\"9\"', '\"123\"']\n#\n# $1 is a space-separated list\nunique() {\n  local -a lst\n  lst=( \"$1\" )\n  while IFS= read -r -a lst; do\n    local -a new_lst\n    new_lst=( \"$@\" )\n    for i in \"${!new_lst[@]}\"; do\n      if [[ \"${new_lst[$i]}\" =~ ^[a-z] ]]; then\n        new_lst[$i]=\"${new_lst[$i]#*a}\"\n      fi\n    done\n    new_lst=( \"${new_lst[@]}\" )\n    echo \"${new_lst[@]}\"\n  done"], ["# <func> # Shell\n#!/bin/bash\n# Return maximum element in the list.\n# >>> $(max_element \"1 2 3\")\n# \"3\"\n# >>> $(max_element \"5 3 -5 2 -3 3 9 0 123 1 -10\")\n# \"123\"\n#\n# $1 is a space-separated list\nmax_element() {\n    local -n list\n    local -i \"$1\"\n    list=\"$(echo \"$1\" | tr -d ' ')\";\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i \"$list\"\n    local -i"], ["# <func> # Shell\n#!/bin/bash\n# Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n# >>> $(fizz_buzz \"50\")\n# \"0\"\n# >>> $(fizz_buzz \"78\")\n# \"2\"\n# >>> $(fizz_buzz \"79\")\n# \"3\"\n#\n# $1 is an integer\nfizz_buzz() {\n  local n=$1\n  local fizz=$2\n  local buzz=$3\n  local count=$((n/11))\n  local fizz_count=$((n%11))\n  local buzz_count=$((n%13))\n  if [ $fizz -eq $buzz ]\n  then\n    echo \"fizzbuzz\"\n  elif [ $fizz -eq $buzz ]\n  then\n    echo \"fizz\"\n  elif [ $fizz -eq $buzz ]\n  then\n    echo \"buzz\"\n  elif [ $fizz -eq $buzz ]\n  then\n    echo \"fizzbuzz\"\n  fi\n  if [ $fizz_count -eq 0 ]\n  then\n    echo \"fizz\"\n  elif [ $fizz_count -eq 1 ]\n  then\n    echo \"fizz\"\n  elif [ $fizz_count -eq 2 ]\n  then\n    echo \"fizz\"\n  elif [ $fizz_count -eq 3 ]\n  then\n    echo \"fizz\"\n  elif [ $fizz_count -eq 4 ]\n  then\n    echo \"fizz\"\n  elif [ $fizz_count -eq 5 ]\n  then\n    echo \"fizz\"\n  elif [ $fizz_count -eq 6 ]\n  then\n    echo \"fizz\"\n  elif [ $fizz_count -eq 7 ]\n  then\n    echo \"fizz\"\n  elif [ $fizz_count -eq 8 ]\n  then\n    echo \"fizz\"\n  elif [ $fizz_count -eq 9 ]\n  then\n    echo \"fizz"], ["# <func> # Shell\n#!/bin/bash\n# This function takes a list l and returns a list l' such that\n# l' is identical to l in the odd indicies, while its values at the even indicies are equal\n# to the values of the even indicies of l, but sorted.\n# >>> $(sort_even \"1 2 3\")\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> $(sort_even \"5 6 3 4\")\n# ['\"3\"', '\"6\"', '\"5\"', '\"4\"']\n#\n# $1 is a space-separated list\nsort_even() {\n    local l=$1\n    local l_even=$(( $l | sort | uniq -u | rev | cut -d ' ' -f 2- | rev | cut -d ' ' -f 1 ) )\n    local l_odd=$(( $l | sort | uniq -u | rev | cut -d ' ' -f 2- | rev | cut -d ' ' -f 1 ) )\n    local l_even_sorted=$(( $l_even | sort | uniq -u | rev | cut -d ' ' -f 2- | rev | cut -d ' ' -f 1 ) )\n    local l_odd_sorted=$(( $l_odd | sort | uniq -u | rev | cut -d ' ' -f 2- | rev | cut -d ' ' -f 1 ) )\n    local l_sorted=$(( $l_even_sorted | $l_odd_sorted | sort ) )\n    return $l_sorted"], ["# <func> # Shell\n#!/bin/bash\n# prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n# >>> $(prime_fib \"1\")\n# \"2\"\n# >>> $(prime_fib \"2\")\n# \"3\"\n# >>> $(prime_fib \"3\")\n# \"5\"\n# >>> $(prime_fib \"4\")\n# \"13\"\n# >>> $(prime_fib \"5\")\n# \"89\"\n#\n# $1 is an integer\nprime_fib() {\n  local n=$1\n  local p=$((2^n))\n  local q=$((2^n-1))\n  local r=$((2^n-2))\n  local s=$((2^n-3))\n  local t=$((2^n-4))\n  local u=$((2^n-5))\n  local v=$((2^n-6))\n  local w=$((2^n-7))\n  local x=$((2^n-8))\n  local y=$((2^n-9))\n  local z=$((2^n-10))\n  local a=$((2^n-11))\n  local b=$((2^n-12))\n  local c=$((2^n-13))\n  local d=$((2^n-14))\n  local e=$((2^n-15))\n  local f=$((2^n-16))\n  local g=$((2^n-17))\n  local h=$((2^n-18))\n  local i=$((2^n-19))\n  local j=$((2^n-20))\n  local k=$((2^n-21))\n  local l=$((2^n-22))\n  local m=$((2^n-23))\n  local n=$((2^n-24))\n  local o=$((2^n-25))\n  local p=$((2^n-26))\n  local q=$((2^n-27))\n  local r=$((2^n-28))\n  local"], ["# <func> # Shell\n#!/bin/bash\n# triples_sum_to_zero takes a list of integers as an input.\n# it returns true if there are three distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> $(triples_sum_to_zero \"1 3 5 0\")\n# \"false\"\n# >>> $(triples_sum_to_zero \"1 3 -2 1\")\n# \"true\"\n# >>> $(triples_sum_to_zero \"1 2 3 7\")\n# \"false\"\n# >>> $(triples_sum_to_zero \"2 4 -5 3 9 7\")\n# \"true\"\n# >>> $(triples_sum_to_zero \"1\")\n# \"false\"\n#\n# $1 is a space-separated list\ntriples_sum_to_zero() {\n  local sum_list\n  local sum_list_length\n  local sum_list_sum\n  local sum_list_diff\n  local sum_list_diff_sum\n  local sum_list_diff_sum_diff\n  local sum_list_diff_sum_diff_sum\n  local sum_list_diff_sum_diff_sum_diff\n  local sum_list_diff_sum_diff_sum_diff_sum\n  local sum_list_diff_sum_diff_sum_diff_sum_diff\n  local sum_list_diff_sum_diff_sum_diff_sum_diff_sum\n  local sum_list_diff_sum_diff_sum_diff_sum_diff_sum_diff\n  local sum_list_diff_sum_diff_sum_diff_sum_diff_sum_diff_sum\n  local sum_list_diff_sum_diff_sum_diff_sum_diff_sum_diff_sum_diff\n  local sum_list_diff_sum_diff_sum_diff_sum_diff_sum_diff_sum_diff_sum\n  local sum_list_diff_sum_diff_sum_diff_sum_diff_sum_diff_sum_diff_sum_diff\n  local sum_list_diff_sum_diff_sum_diff_sum_diff"], ["# <func> # Shell\n#!/bin/bash\n# Imagine a road that's a perfectly straight infinitely long line.\n# n cars are driving left to right;  simultaneously, a different set of n cars\n# are driving right to left.   The two sets of cars start out being very far from\n# each other.  All cars move in the same speed.  Two cars are said to collide\n# when a car that's moving left to right hits a car that's moving right to left.\n# However, the cars are infinitely sturdy and strong; as a result, they continue moving\n# in their trajectory as if they did not collide.\n# This function outputs the number of such collisions.\n#\n# $1 is an integer\ncar_race_collision() {\n    # The first argument is the number of cars\n    # The second argument is the number of cars that are driving left to right\n    # The third argument is the number of cars that are driving right to left\n    # The fourth argument is the speed of the cars\n    # The fifth argument is the number of collisions\n    # The sixth argument is the number of collisions that occurred\n    # The seventh argument is the number of collisions that occurred\n    # The eighth argument is the number of collisions that occurred\n    # The ninth argument is the number of collisions that occurred\n    # The tenth argument is the number of collisions that occurred\n    # The eleventh argument is the number of collisions that occurred\n    # The twelfth argument is the number of collisions that occurred\n    # The thirteenth argument is the number of collisions that occurred\n    # The fourteenth argument is the number of collisions that occurred\n    # The fifteenth argument is the number of collisions that occurred\n    # The sixteenth argument is the number of collisions that occurred\n    # The seventeenth argument is the number of collisions that occurred\n    # The eighteenth argument is the number of collisions that occurred\n    # The nineteenth argument is the number of collisions that occurred\n    # The twentieth argument is the number of collisions that occurred\n    # The twenty-first argument is the number of collisions that occurred\n    # The twenty-second argument is the number of collisions that occurred\n   "], ["# <func> # Shell\n#!/bin/bash\n# Return list with elements incremented by 1.\n# >>> $(incr_list \"1 2 3\")\n# ['\"2\"', '\"3\"', '\"4\"']\n# >>> $(incr_list \"5 3 5 2 3 3 9 0 123\")\n# ['\"6\"', '\"4\"', '\"6\"', '\"3\"', '\"4\"', '\"4\"', '\"10\"', '\"1\"', '\"124\"']\n#\n# $1 is a space-separated list\nincr_list() {\n    local -a list\n    local -a list_tmp\n    list_tmp=()\n    for i in \"$@\"; do\n        list_tmp+=(\"$i\")\n    done\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n    list+=(\"$list_tmp\")\n   "], ["# <func> # Shell\n#!/bin/bash\n# pairs_sum_to_zero takes a list of integers as an input.\n# it returns true if there are two distinct elements in the list that\n# sum to zero, and false otherwise.\n# >>> $(pairs_sum_to_zero \"1 3 5 0\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"1 3 -2 1\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"1 2 3 7\")\n# \"false\"\n# >>> $(pairs_sum_to_zero \"2 4 -5 3 5 7\")\n# \"true\"\n# >>> $(pairs_sum_to_zero \"1\")\n# \"false\"\n#\n# $1 is a space-separated list\npairs_sum_to_zero() {\n    local a b c d e f g h i j k l m n o p q r s t u v w x y z\n    local -i\n    local -a\n    local -r\n    local -s\n    local -t\n    local -u\n    local -v\n    local -w\n    local -x\n    local -y\n    local -z\n    local -c\n    local -d\n    local -e\n    local -f\n    local -g\n    local -h\n    local -i\n    local -j\n    local -k\n    local -l\n    local -m\n    local -n\n    local -o\n    local -p\n    local -q\n    local -r\n    local -s\n    local -t\n    local -u\n    local -v\n    local -w\n    local -x\n    local -y\n    local -z\n    local -c\n    local -d\n    local -e\n    local -f\n    local -g\n    local -h\n    local -i\n    local -j\n    local -k\n    local -l\n    local -m\n    local -n\n    local -o\n    local -p\n    local -q\n    local -r\n    local -s\n    local -t\n    local -u\n    local -"], ["# <func> # Shell\n#!/bin/bash\n# Change numerical base of input number x to base.\n# return string representation after the conversion.\n# base numbers are less than 10.\n# >>> $(change_base \"8\" \"3\")\n# \"22\"\n# >>> $(change_base \"8\" \"2\")\n# \"1000\"\n# >>> $(change_base \"7\" \"2\")\n# \"111\"\n#\n# $1 is an integer\n# $2 is an integer\nchange_base() {\n    # Change numerical base of input number x to base.\n    # return string representation after the conversion.\n    # base numbers are less than 10.\n    # >>> $(change_base \"8\" \"3\")\n    # \"22\"\n    # >>> $(change_base \"8\" \"2\")\n    # \"1000\"\n    # >>> $(change_base \"7\" \"2\")\n    # \"111\"\n    #\n    # $1 is an integer\n    # $2 is an integer\n    # base numbers are less than 10.\n    # >>> $(change_base \"8\" \"3\")\n    # \"22\"\n    # >>> $(change_base \"8\" \"2\")\n    # \"1000\"\n    # >>> $(change_base \"7\" \"2\")\n    # \"111\"\n    #\n    # $1 is an integer\n    # $2 is an integer\n    # base numbers are less than 10.\n    # >>> $(change_base \"8\" \"3\")\n    # \"22\"\n    # >>> $(change_base \"8\" \"2\")\n    # \"1000\"\n    # >>> $(change_base \"7\" \"2\")\n    # \"111\"\n    #\n    # $1 is an integer\n    # $2 is an integer\n    # base numbers are less than 10.\n    # >>> $(change_base \"8\" \"3\")\n    # \"22\"\n    # >>> $(change_base \"8\" \"2\")\n    # \"1000\"\n    # >>> $(change_base \"7\" \"2\")"], ["# <func> # Shell\n#!/bin/bash\n# Given length of a side and high return area for a triangle.\n# >>> $(triangle_area \"5\" \"3\")\n# \"7.5\"\n#\n# $1 is an integer\n# $2 is an integer\ntriangle_area() {\n  # $1 is an integer\n  # $2 is an integer\n  # $3 is an integer\n  # $4 is an integer\n  # $5 is an integer\n  # $6 is an integer\n  # $7 is an integer\n  # $8 is an integer\n  # $9 is an integer\n  # $10 is an integer\n  # $11 is an integer\n  # $12 is an integer\n  # $13 is an integer\n  # $14 is an integer\n  # $15 is an integer\n  # $16 is an integer\n  # $17 is an integer\n  # $18 is an integer\n  # $19 is an integer\n  # $20 is an integer\n  # $21 is an integer\n  # $22 is an integer\n  # $23 is an integer\n  # $24 is an integer\n  # $25 is an integer\n  # $26 is an integer\n  # $27 is an integer\n  # $28 is an integer\n  # $29 is an integer\n  # $30 is an integer\n  # $31 is an integer\n  # $32 is an integer\n  # $33 is an integer\n  # $34 is an integer\n  # $35 is an integer\n  # $36 is an integer\n  # $37 is an integer\n  # $38 is an integer\n  # $39 is an integer\n  # $40 is an integer\n  # $41 is an integer\n  # $42 is an integer\n  # $43 is an integer\n  # $44 is an integer\n  # $45 is an integer\n  # $46 is an integer\n  # $47 is an integer\n  # $48 is an integer\n  # $49 is an integer\n  # $50 is an integer"], ["# <func> # Shell\n#!/bin/bash\n# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n# fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n# Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n# >>> $(fib4 \"5\")\n# \"4\"\n# >>> $(fib4 \"6\")\n# \"8\"\n# >>> $(fib4 \"7\")\n# \"14\"\n#\n# $1 is an integer\nfib4() {\n  local n\n  local fib4\n  local fib4_prev\n  local fib4_next\n  local fib4_sum\n  local fib4_sum_prev\n  local fib4_sum_next\n  local fib4_sum_prev_next\n  local fib4_sum_prev_next_prev\n  local fib4_sum_prev_next_next\n  local fib4_sum_prev_next_next_prev\n  local fib4_sum_prev_next_next_next\n  local fib4_sum_prev_next_next_next_prev\n  local fib4_sum_prev_next_next_next_next\n  local fib4_sum_prev_next_next_next_next_prev\n  local fib4_sum_prev_next_next_next_next_next\n  local fib4_sum_prev_next_next_next_next_next_prev\n  local fib4_sum_prev_next_next_next_next_next_next_prev\n  local fib4_sum_prev_next_next_next_next_next_next_next_prev_prev\n  local fib4_sum_prev_next_next_next_next_next_next_next_next_prev\n  local fib4_sum_prev_next_next_next_next_"], ["# <func> # Shell\n#!/bin/bash\n# Return median of elements in the list l.\n# >>> $(median \"3 1 2 4 5\")\n# \"3\"\n# >>> $(median \"-10 4 6 1000 10 20\")\n# \"15.0\"\n#\n# $1 is a space-separated list\nmedian() {\n  local l=\"$1\"\n  local n=length $l\n  local i=0\n  local j=n-1\n  while [ $i -lt $j ]\n    if [ $l[i] -gt $l[j] ]\n      break\n    else\n      i=$i+1\n      j=$j-1\n    fi\n  fi\n  return $l[i]"], ["# <func> # Shell\n#!/bin/bash\n# Checks if given string is a palindrome\n# >>> $(is_palindrome \"\")\n# \"true\"\n# >>> $(is_palindrome \"aba\")\n# \"true\"\n# >>> $(is_palindrome \"aaaaa\")\n# \"true\"\n# >>> $(is_palindrome \"zbcd\")\n# \"false\"\n#\n# $1 is a string\nis_palindrome() {\n    # Check if string is empty\n    if [ $# -eq 0 ]\n    then\n        return 1\n    fi\n\n    # Check if string is a palindrome\n    for i in $1; do\n        if [ $i == $1[::-1] ]\n        then\n            return 1\n        fi\n    done\n\n    # Check if string is a palindrome\n    for i in $1; do\n        if [ $i == $1[::-1] ]\n        then\n            return 1\n        fi\n    done\n\n    # Check if string is a palindrome\n    for i in $1; do\n        if [ $i == $1[::-1] ]\n        then\n            return 1\n        fi\n    done\n\n    # Check if string is a palindrome\n    for i in $1; do\n        if [ $i == $1[::-1] ]\n        then\n            return 1\n        fi\n    done\n\n    # Check if string is a palindrome\n    for i in $1; do\n        if [ $i == $1[::-1] ]\n        then\n            return 1\n        fi\n    done\n\n    # Check if string is a palindrome\n    for i in $1; do\n        if [ $i == $1[::-1] ]\n        then\n            return 1\n        fi\n    done\n\n    # Check if string is a palindrome\n    for i in $1; do\n        if [ $i == $1[::-1] ]\n        then\n            return 1\n        fi\n    done\n\n    # Check if string is a palindrome\n    for i in $1;"], ["# <func> # Shell\n#!/bin/bash\n# Return 2^n modulo p (be aware of numerics).\n# >>> $(modp \"3\" \"5\")\n# \"3\"\n# >>> $(modp \"1101\" \"101\")\n# \"2\"\n# >>> $(modp \"0\" \"101\")\n# \"1\"\n# >>> $(modp \"3\" \"11\")\n# \"8\"\n# >>> $(modp \"100\" \"101\")\n# \"1\"\n#\n# $1 is an integer\n# $2 is an integer\nmodp() {\n  # Return 2^n modulo p (be aware of numerics).\n  # >>> $(modp \"3\" \"5\")\n  # \"3\"\n  # >>> $(modp \"1101\" \"101\")\n  # \"2\"\n  # >>> $(modp \"0\" \"101\")\n  # \"1\"\n  # >>> $(modp \"3\" \"11\")\n  # \"8\"\n  # >>> $(modp \"100\" \"101\")\n  # \"1\"\n  #\n  # $1 is an integer\n  # $2 is an integer\n  #\n  # $1 is an integer\n  # $2 is an integer\n  #\n  # $1 is an integer\n  # $2 is an integer\n  #\n  # $1 is an integer\n  # $2 is an integer\n  #\n  # $1 is an integer\n  # $2 is an integer\n  #\n  # $1 is an integer\n  # $2 is an integer\n  #\n  # $1 is an integer\n  # $2 is an integer\n  #\n  # $1 is an integer\n  # $2 is an integer\n  #\n  # $1 is an integer\n  # $2 is an integer\n  #\n  # $1 is an integer\n  # $2 is an integer\n  #\n  # $1 is an integer\n  # $2 is an integer\n  #\n  # $1 is an integer\n  # $2 is an integer\n  #\n  # $1 is an"], ["# <func> # Shell\n#!/bin/bash\n# remove_vowels is a function that takes string and returns string without vowels.\n# >>> $(remove_vowels \"\")\n# \"\"\n# >>> $(remove_vowels \"abcdef\")\n# \"bcdf\"\n# >>> $(remove_vowels \"aaaaa\")\n# \"\"\n# >>> $(remove_vowels \"aaBAA\")\n# \"B\"\n# >>> $(remove_vowels \"zbcd\")\n# \"zbcd\"\n#\n# $1 is a string\nremove_vowels() {\n    local vowels=(\"a\" \"e\" \"i\" \"o\" \"u\")\n    local string=$1\n    local vowel_count=0\n    for vowel in \"${vowels[@]}\"; do\n        if [[ $string =~ $vowel ]]; then\n            vowel_count=$vowel_count+1\n        fi\n    done\n    if [[ $vowel_count -gt 1 ]]; then\n        echo \"Error: Vowels found in string\"\n        return 1\n    fi\n    echo \"Vowels removed from string\"\n    return 0"], ["# <func> # Shell\n#!/bin/bash\n# Return true if all numbers in the list l are below threshold t.\n# >>> $(below_threshold \"1 2 4 10\" \"100\")\n# \"true\"\n# >>> $(below_threshold \"1 20 4 10\" \"5\")\n# \"false\"\n#\n# $1 is a space-separated list\n# $2 is an integer\nbelow_threshold() {\n  local l=$1\n  local t=$2\n  local n=$#l\n  local i=0\n  while [ $i -lt $n ]\n  do\n    if [ $l[i] -lt $t ]\n    then\n      i=$i+1\n    else\n      break\n    fi\n  done\n  return $i"], ["# <func> # Shell\n#!/bin/bash\n# Add two numbers x and y\n# >>> $(add \"2\" \"3\")\n# \"5\"\n# >>> $(add \"5\" \"7\")\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\nadd() {\n    if [ \"$1\" -gt 0 ]; then\n        echo \"$1\"\n        \"$1\"\n    else\n        echo \"$1\"\n    fi"], ["# <func> # Shell\n#!/bin/bash\n# Check if two words have the same characters.\n# >>> $(same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n# \"true\"\n# >>> $(same_chars \"abcd\" \"dddddddabc\")\n# \"true\"\n# >>> $(same_chars \"dddddddabc\" \"abcd\")\n# \"true\"\n# >>> $(same_chars \"eabcd\" \"dddddddabc\")\n# \"false\"\n# >>> $(same_chars \"abcd\" \"dddddddabce\")\n# \"false\"\n# >>> $(same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n# \"false\"\n#\n# $1 is a string\n# $2 is a string\nsame_chars() {\n    local a=$1\n    local b=$2\n    local c=0\n    local d=0\n    local e=0\n    local f=0\n    local g=0\n    local h=0\n    local i=0\n    local j=0\n    local k=0\n    local l=0\n    local m=0\n    local n=0\n    local o=0\n    local p=0\n    local q=0\n    local r=0\n    local s=0\n    local t=0\n    local u=0\n    local v=0\n    local w=0\n    local x=0\n    local y=0\n    local z=0\n    local a_count=0\n    local b_count=0\n    local c_count=0\n    local d_count=0\n    local e_count=0\n    local f_count=0\n    local g_count=0\n    local h_count=0\n    local i_count=0\n    local j_count=0\n    local k_count=0\n    local l_count=0\n    local m_count=0\n    local n_count=0\n    local o_count=0\n    local p_count=0\n    local q_count=0\n    local r_count=0\n    local s_"], ["# <func> # Shell\n#!/bin/bash\n# Return n-th Fibonacci number.\n# >>> $(fib \"10\")\n# \"55\"\n# >>> $(fib \"1\")\n# \"1\"\n# >>> $(fib \"8\")\n# \"21\"\n#\n# $1 is an integer\nfib() {\n  local n=$1\n  local a=$2\n  local b=$3\n  if [ $n -gt 1 ]\n  then\n    a=$a+$b\n    b=$b+$a\n  fi\n  return $a"], ["# <func> # Shell\n#!/bin/bash\n# brackets is a string of \"<\" and \">\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing \"<\")\n# \"false\"\n# >>> $(correct_bracketing \"<>\")\n# \"true\"\n# >>> $(correct_bracketing \"<<><>>\")\n# \"true\"\n# >>> $(correct_bracketing \"><<>\")\n# \"false\"\n#\n# $1 is a string\ncorrect_bracketing() {\n  brackets=\"$1\"\n  brackets_length=$((length $brackets))\n  brackets_opening_count=$((1 + ((brackets_length - 1) / 2))))\n  brackets_closing_count=$((1 + ((brackets_length - 1) / 2))))\n  brackets_opening_count_str=\"$(($brackets_opening_count + 1))\"\n  brackets_closing_count_str=\"$(($brackets_closing_count + 1))\"\n  brackets_opening_count_str=\"$(($brackets_opening_count + 1))\"\n  brackets_closing_count_str=\"$(($brackets_closing_count + 1))\"\n  brackets_opening_count_str=\"$(($brackets_opening_count + 1))\"\n  brackets_closing_count_str=\"$(($brackets_closing_count + 1))\"\n  brackets_opening_count_str=\"$(($brackets_opening_count + 1))\"\n  brackets_closing_count_str=\"$(($brackets_closing_count + 1))\"\n  brackets_opening_count_str=\"$(($brackets_opening_count + 1))\"\n  brackets_closing_count_str=\"$(($brackets_closing_count + 1))\"\n  brackets_opening_count_str=\"$(($brackets_opening_count + 1))\"\n  brackets_closing_count_str=\"$(($brackets_closing_count + 1))\"\n  brackets_opening_count_str=\"$(($bra"], ["# <func> # Shell\n#!/bin/bash\n# Return true is list elements are monotonically increasing or decreasing.\n# >>> $(monotonic \"1 2 4 20\")\n# \"true\"\n# >>> $(monotonic \"1 20 4 10\")\n# \"false\"\n# >>> $(monotonic \"4 1 0 -10\")\n# \"true\"\n#\n# $1 is a space-separated list\nmonotonic() {\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -"], ["# <func> # Shell\n#!/bin/bash\n# Return sorted unique common elements for two lists.\n# >>> $(common \"1 4 3 34 653 2 5\" \"5 7 1 5 9 653 121\")\n# ['\"1\"', '\"5\"', '\"653\"']\n# >>> $(common \"5 3 2 8\" \"3 2\")\n# ['\"2\"', '\"3\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncommon() {\n  local a b\n  a=<\"$1\"\n  b=<\"$2\"\n  local c=sort(unique(a,b))\n  echo \"$c\""], ["# <func> # Shell\n#!/bin/bash\n# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n# >>> $(largest_prime_factor \"13195\")\n# \"29\"\n# >>> $(largest_prime_factor \"2048\")\n# \"2\"\n#\n# $1 is an integer\nlargest_prime_factor() {\n  local n=$1\n  local max_prime=1\n  local max_factor=1\n  for ((i=1; i<=sqrt($n); i++)); do\n    if (( $n % $i == 0 )); then\n      if (( $n / $i == $max_prime )); then\n        max_prime=$i\n        max_factor=$n/$i\n      else\n        if (( $n / $i == $max_factor )); then\n          max_prime=$i\n          max_factor=$n/$i\n        fi\n      fi\n    fi\n  done\n  if (( $max_prime == 1 )); then\n    return $max_factor\n  fi\n  return $max_prime"], ["# <func> # Shell\n#!/bin/bash\n# sum_to_n is a function that sums numbers from 1 to n.\n# >>> $(sum_to_n \"30\")\n# \"465\"\n# >>> $(sum_to_n \"100\")\n# \"5050\"\n# >>> $(sum_to_n \"5\")\n# \"15\"\n# >>> $(sum_to_n \"10\")\n# \"55\"\n# >>> $(sum_to_n \"1\")\n# \"1\"\n#\n# $1 is an integer\nsum_to_n() {\n  local sum=0\n  for ((i=1; i<=${1}; i++)); do\n    sum=$((sum+i))\n  done\n  return $sum"], ["# <func> # Shell\n#!/bin/bash\n# brackets is a string of \"(\" and \")\".\n# return true if every opening bracket has a corresponding closing bracket.\n# >>> $(correct_bracketing \"(\")\n# \"false\"\n# >>> $(correct_bracketing \"()\")\n# \"true\"\n# >>> $(correct_bracketing \"(()())\")\n# \"true\"\n# >>> $(correct_bracketing \")(()\")\n# \"false\"\n#\n# $1 is a string\ncorrect_bracketing() {\n  brackets=\"$1\"\n  brackets_length=$#brackets\n  bracket_count=0\n  for bracket in $brackets; do\n    if [[ $bracket =~ (^| )( ) ]]; then\n      bracket_count=$bracket_count+1\n    fi\n  done\n  bracket_count=$bracket_count+1\n  if [[ $bracket_count -eq 0 ]]; then\n    return true\n  else\n    return false\n  fi"], ["# <func> # Shell\n#!/bin/bash\n# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2] * x^2 + ....\n# Return derivative of this polynomial in the same form.\n# >>> $(derivative \"3 1 2 4 5\")\n# ['\"1\"', '\"4\"', '\"12\"', '\"20\"']\n# >>> $(derivative \"1 2 3\")\n# ['\"2\"', '\"6\"']\n#\n# $1 is a space-separated list\nderivative() {\n  # Read input from stdin\n  read -r xs\n  # Convert to a list\n  xs=($xs)\n  # Convert to a list of coefficients\n  xs=($xs[0] + xs[1] * $x + xs[2] * $x^2 + ...)\n  # Return derivative of this polynomial in the same form\n  return $xs"], ["# <func> # Shell\n#!/bin/bash\n# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) == 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n# >>> $(fibfib \"1\")\n# \"0\"\n# >>> $(fibfib \"5\")\n# \"4\"\n# >>> $(fibfib \"8\")\n# \"24\"\n#\n# $1 is an integer\nfibfib() {\n  local n\n  local fibfib_val\n  local fibfib_val_1\n  local fibfib_val_2\n  local fibfib_val_3\n  local fibfib_val_4\n  local fibfib_val_5\n  local fibfib_val_6\n  local fibfib_val_7\n  local fibfib_val_8\n  local fibfib_val_9\n  local fibfib_val_10\n  local fibfib_val_11\n  local fibfib_val_12\n  local fibfib_val_13\n  local fibfib_val_14\n  local fibfib_val_15\n  local fibfib_val_16\n  local fibfib_val_17\n  local fibfib_val_18\n  local fibfib_val_19\n  local fibfib_val_20\n  local fibfib_val_21\n  local fibfib_val_22\n  local fibfib_val_23\n  local fibfib_val_24\n  local fibfib_val_25\n  local fibfib_val_26\n  local fibfib_val_27\n  local fibfib_val_28\n  local"], ["# <func> # Shell\n#!/bin/bash\n# Write a function vowels_count which takes a string representing\n# a word as input and returns the number of vowels in the string.\n# Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is at the end of the given word.\n# Example:\n# >>> $(vowels_count \"abcde\")\n# \"2\"\n# >>> $(vowels_count \"ACEDY\")\n# \"3\"\n#\n# $1 is a string\nvowels_count() {\n  vowels=(\"a\" \"e\" \"i\" \"o\" \"u\")\n  vowels_count_string=\"\"\n  for word in $1; do\n    if [[ $word =~ ^[aeiou] ]]; then\n      vowels_count_string=\"$vowels_count_string $word\"\n    fi\n  done\n  return $vowels_count_string"], ["# <func> # Shell\n#!/bin/bash\n# Circular shift the digits of the integer x, shift the digits right by shift\n# and return the result as a string.\n# If shift > number of digits, return digits reversed.\n# >>> $(circular_shift \"12\" \"1\")\n# \"21\"\n# >>> $(circular_shift \"12\" \"2\")\n# \"12\"\n#\n# $1 is an integer\n# $2 is an integer\ncircular_shift() {\n    shift=$1\n    shift_right=$2\n    shift_right_reverse=$3\n    shift_right_reverse_reverse=$4\n    shift_right_reverse_reverse_reverse=$5\n    shift_right_reverse_reverse_reverse_reverse=$6\n    shift_right_reverse_reverse_reverse_reverse_reverse=$7\n    shift_right_reverse_reverse_reverse_reverse_reverse_reverse=$8\n    shift_right_reverse_reverse_reverse_reverse_reverse_reverse_reverse=$9\n    shift_right_reverse_reverse_reverse_reverse_reverse_reverse_reverse=$10\n    shift_right_reverse_reverse_reverse_reverse_reverse_reverse_reverse=$11\n    shift_right_reverse_reverse_reverse_reverse_reverse_reverse_reverse=$12\n    shift_right_reverse_reverse_reverse_reverse_reverse_reverse_reverse=$13\n    shift_right_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse=$14\n    shift_right_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse=$15\n    shift_right_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse=$16\n    shift_right_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse=$17\n    shift_right_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse=$18\n    shift_right_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse=$19\n    shift_right_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse=$20\n    shift_right_reverse_reverse_reverse_reverse_reverse_reverse_"], ["# <func> # Shell\n#!/bin/bash\n# Task\n# Write a function that takes a string as input and returns the sum of the upper characters only'\n# ASCII codes.\n# Examples:\n# >>> $(digitSum \"\")\n# \"0\"\n# >>> $(digitSum \"abAB\")\n# \"131\"\n# >>> $(digitSum \"abcCd\")\n# \"67\"\n# >>> $(digitSum \"helloE\")\n# \"69\"\n# >>> $(digitSum \"woArBld\")\n# \"131\"\n# >>> $(digitSum \"aAaaaXa\")\n# \"153\"\n#\n# $1 is a string\ndigitSum() {\n    # Get the string\n    str=$1\n    # Get the ASCII code of the upper characters\n    upper=$((str:32:))\n    # Get the sum of the upper characters\n    sum=$((upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper + upper +"], ["# <func> # Shell\n#!/bin/bash\n# In this task, you will be given a string that represents a number of apples and oranges \n# that are distributed in a basket of fruit this basket contains \n# apples, oranges, and mango fruits. Given the string that represents the total number of \n# the oranges and apples and an integer that represent the total number of the fruits \n# in the basket return the number of the mango fruits in the basket.\n# for examble:\n# >>> $(fruit_distribution \"5 apples and 6 oranges\" \"19\")\n# \"8\"\n# >>> $(fruit_distribution \"0 apples and 1 oranges\" \"3\")\n# \"2\"\n# >>> $(fruit_distribution \"2 apples and 3 oranges\" \"100\")\n# \"95\"\n# >>> $(fruit_distribution \"100 apples and 1 oranges\" \"120\")\n# \"19\"\n#\n# $1 is a string\n# $2 is an integer\nfruit_distribution() {\n  # Get the input string\n  input_string=$1\n  # Get the integer\n  input_integer=$2\n  # Split the input string into an array of words\n  words=$input_string.split(\" \")\n  # Get the number of apples and oranges\n  apples_oranges=$words[0]\n  # Get the number of the fruits\n  fruits_in_basket=$words[1]\n  # Get the number of the mango fruits\n  mango_fruits=$words[2]\n  # Get the number of the mango fruits\n  mango_fruits=$words[2]\n  # Get the number of the oranges\n  oranges=$words[3]\n  # Get the number of the apples\n  apples=$words[4]\n  # Get the number of the mango fruits\n  mango_fruits=$words[5]\n  # Get the number of the apples\n  apples=$words[6]\n  # Get the number of the oranges\n  oranges=$words[7]\n  # Get the number of the apples"], ["# <func> # Shell\n#!/bin/bash\n# \"Given an array representing a branch of a tree that has non-negative integer nodes\n# your task is to pluck one of the nodes and return it.\n# The plucked node should be the node with the smallest even value.\n# If multiple nodes with the same smallest even value are found return the node that has smallest index.\n# The plucked node should be returned in a list, [ smalest_value, its index ],\n# If there are no even values or the given array is empty, return [].\n# Example 1:\n# >>> $(pluck \"4 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 2:\n# >>> $(pluck \"1 2 3\")\n# ['\"2\"', '\"1\"']\n# Explanation: 2 has the smallest even value, and 2 has the smallest index.\n# Example 3:\n# >>> $(pluck \"\")\n# []\n# Example 4:\n# >>> $(pluck \"5 0 3 0 4 2\")\n# ['\"0\"', '\"1\"']\n# Explanation: 0 is the smallest value, but  there are two zeros,\n# so we will choose the first zero, which has the smallest index.\n# Constraints:\n# * 1 <= nodes.length <= 10000\n# * 0 <= node.value\n#\n# $1 is a space-separated list\npluck() {\n  local -a nodes\n  local -i index\n  local -i value\n  local -i smallest_value\n  local -i smallest_index\n  local -i smallest_value_index\n  local -i smallest_value_index_value\n  local -i smallest_value_index_value_index\n  local -i smallest_value_index_value_index_value\n  local -i smallest_value_index_value_index_value_index\n  local -i smallest_value_index_value_index_value_index_value\n  local -i smallest_value_index_value_index_value_"], ["# <func> # Shell\n#!/bin/bash\n# You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n# zero, and has a frequency greater than or equal to the value of the integer itself. \n# The frequency of an integer is the number of times it appears in the list.\n# If no such a value exist, return -1.\n# Examples:\n# >>> $(search \"4 1 2 2 3 1\")\n# \"2\"\n# >>> $(search \"1 2 2 3 3 3 4 4 4\")\n# \"3\"\n# >>> $(search \"5 5 4 4 4\")\n# \"-1\"\n#\n# $1 is a space-separated list\nsearch() {\n    local -i\n    local -i \"a\"\n    local -i \"b\"\n    local -i \"c\"\n    local -i \"d\"\n    local -i \"e\"\n    local -i \"f\"\n    local -i \"g\"\n    local -i \"h\"\n    local -i \"i\"\n    local -i \"j\"\n    local -i \"k\"\n    local -i \"l\"\n    local -i \"m\"\n    local -i \"n\"\n    local -i \"o\"\n    local -i \"p\"\n    local -i \"q\"\n    local -i \"r\"\n    local -i \"s\"\n    local -i \"t\"\n    local -i \"u\"\n    local -i \"v\"\n    local -i \"w\"\n    local -i \"x\"\n    local -i \"y\"\n    local -i \"z\"\n    local -i \"a\"\n    local -i \"b\"\n    local -i \"c\"\n    local -i \"d\"\n    local -i \"e\"\n    local -i \"f\"\n    local -i \"g\"\n    local -i \"h\"\n    local -i \"i\"\n    local -i \"j\"\n    local -i \"k\"\n    local -i \"l\"\n    local -i \"m\"\n    local -i \"n\"\n    local"], ["# <func> # Shell\n#!/bin/bash\n# Given list of integers, return list in strange order.\n# Strange sorting, is when you start with the minimum value,\n# then maximum of the remaining integers, then minimum and so on.\n# Examples:\n# >>> $(strange_sort_list \"1 2 3 4\")\n# ['\"1\"', '\"4\"', '\"2\"', '\"3\"']\n# >>> $(strange_sort_list \"5 5 5 5\")\n# ['\"5\"', '\"5\"', '\"5\"', '\"5\"']\n# >>> $(strange_sort_list \"\")\n# []\n#\n# $1 is a space-separated list\nstrange_sort_list() {\n  local str\n  local str_len\n  local str_list\n  local str_index\n  local str_min\n  local str_max\n  local str_min_index\n  local str_max_index\n  local str_min_value\n  local str_max_value\n  local str_min_index_value\n  local str_max_index_value\n  local str_min_value_index\n  local str_max_value_index\n  local str_min_index_value_index\n  local str_max_index_value_index\n  local str_min_value_index_value\n  local str_max_value_index_value\n  local str_min_index_value_index_value\n  local str_max_index_value_index_value\n  local str_min_value_index_value_index\n  local str_max_value_index_value_index\n  local str_min_index_value_index_value_index\n  local str_max_index_value_index_value_index\n  local str_min_value_index_value_index_value\n  local str_max_value_index_value_index_value\n  local str_min_index_value_index_value_index_value\n  local str_max_index_value_index_value_index_value\n  local str_min_value_index_value_index_value_index\n  local str_max_value_index"], ["# <func> # Shell\n#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return the area of\n# the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any two sides is greater \n# than the third side.\n# Example:\n# >>> $(triangle_area \"3\" \"4\" \"5\")\n# \"6.0\"\n# >>> $(triangle_area \"1\" \"2\" \"10\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\ntriangle_area() {\n  # Get the length of the first side\n  a=$1\n  # Get the length of the second side\n  b=$2\n  # Get the length of the third side\n  c=$3\n  # Check if the sides form a valid triangle\n  if (( $a < $b < $c )); then\n    # If the sides form a valid triangle, return the area of the triangle rounded to 2 decimal points\n    return $a * $b / $c\n  else\n    # If the sides do not form a valid triangle, return -1\n    return -1\n  fi"], ["# <func> # Shell\n#!/bin/bash\n# Write a function that returns true if the object q will fly, and false otherwise.\n# The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n# Example:\n# >>> $(will_it_fly \"1 2\" \"5\")\n# \"false\"\n# # 1+2 is less than the maximum possible weight, but it's unbalanced.\n# >>> $(will_it_fly \"3 2 3\" \"1\")\n# \"false\"\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n# >>> $(will_it_fly \"3 2 3\" \"9\")\n# \"true\"\n# # 3+2+3 is less than the maximum possible weight, and it's balanced.\n# >>> $(will_it_fly \"3\" \"5\")\n# \"true\"\n# # 3 is less than the maximum possible weight, and it's balanced.\n#\n# $1 is a space-separated list\n# $2 is an integer\nwill_it_fly() {\n    local q\n    q=$(echo \"$1\" | cut -d ' ' -f 1)\n    w=$(echo \"$1\" | cut -d ' ' -f 2)\n    sum=$(echo \"$q\" | cut -d ' ' -f 1)\n    max_weight=$(echo \"$q\" | cut -d ' ' -f 2)\n    if (( $w > $max_weight ))\n    then\n        echo \"false\"\n    else\n        echo \"true\"\n    fi"], ["# <func> # Shell\n#!/bin/bash\n# Given an array arr of integers, find the minimum number of elements that\n# need to be changed to make the array palindromic. A palindromic array is an array that\n# is read the same backwards and forwards. In one change, you can change one element to any other element.\n# For example:\n# >>> $(smallest_change \"1 2 3 5 4 7 9 6\")\n# \"4\"\n# >>> $(smallest_change \"1 2 3 4 3 2 2\")\n# \"1\"\n# >>> $(smallest_change \"1 2 3 2 1\")\n# \"0\"\n#\n# $1 is a space-separated list\nsmallest_change() {\n  local arr=\"$1\"\n  local min=\"$2\"\n  local max=\"$3\"\n  local n=$#arr\n  local i=1\n  local j=n\n  local min_val=$arr[1]\n  while [ $i -lt $j ]\n    while [ $min_val -le $arr[$i] ]\n      min_val=$arr[$i]\n      i=$i+1\n    done\n    while [ $min_val -gt $arr[$j] ]\n      min_val=$arr[$j]\n      j=$j-1\n    done\n    if [ $min_val -eq $arr[$j] ]\n      min_val=$arr[$j]\n      j=$j-1\n    else\n      min_val=$arr[$i]\n      i=$i+1\n    fi\n    if [ $i -lt $j ]\n      min=$min_val\n      min_val=$arr[$i]\n      i=$i+1\n    else\n      min=$arr[$j]\n      j=$j-1\n    fi\n    if [ $i -lt $j ]\n      min_val=$arr[$i]\n      i=$i+1\n    else\n      min_val=$arr[$j]\n      j=$j-1\n    fi\n    if [ $min_val -eq $arr[$j] ]\n      min_val=$arr[$j]\n     "], ["# <func> # Shell\n#!/bin/bash\n# Write a function that accepts two lists of strings and returns the list that has \n# total number of chars in the all strings of the list less than the other list.\n# if the two lists have the same number of chars, return the first list.\n# Examples\n# >>> $(total_match \"\" \"\")\n# []\n# >>> $(total_match \"hi admin\" \"hI Hi\")\n# ['\"hI\"', '\"Hi\"']\n# >>> $(total_match \"hi admin\" \"hi hi admin project\")\n# ['\"hi\"', '\"admin\"']\n# >>> $(total_match \"hi admin\" \"hI hi hi\")\n# ['\"hI\"', '\"hi\"', '\"hi\"']\n# >>> $(total_match \"4\" \"1 2 3 4 5\")\n# ['\"4\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ntotal_match() {\n    local a b\n    a=()\n    b=()\n    for i in $1; do\n        if [[ $i =~ ^[a-zA-Z0-9]+$ ]] ; then\n            a+=($i)\n        else\n            b+=($i)\n        fi\n    done\n    if [[ $a == $b ]] ; then\n        return $a\n    else\n        return $b\n    fi"], ["# <func> # Shell\n#!/bin/bash\n# Write a function that returns true if the given number is the multiplication of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100. \n# Example:\n# >>> $(is_multiply_prime \"30\")\n# \"true\"\n# 30 = 2 * 3 * 5\n#\n# $1 is an integer\nis_multiply_prime() {\n  # 1. Check if the number is less than 100\n  if [ $1 -lt 100 ]; then\n    # 2. Check if the number is a prime number\n    if [ $1 -eq 1 ]; then\n      # 3. If the number is a prime number, return true\n      return true\n    else\n      # 4. If the number is not a prime number, return false\n      return false\n    fi\n  fi"], ["# <func> # Shell\n#!/bin/bash\n# Your task is to write a function that returns true if a number x is a simple\n# power of n and false in other cases.\n# x is a simple power of n if n**int=x\n# For example:\n# >>> $(is_simple_power \"1\" \"4\")\n# \"true\"\n# >>> $(is_simple_power \"2\" \"2\")\n# \"true\"\n# >>> $(is_simple_power \"8\" \"2\")\n# \"true\"\n# >>> $(is_simple_power \"3\" \"2\")\n# \"false\"\n# >>> $(is_simple_power \"3\" \"1\")\n# \"false\"\n# >>> $(is_simple_power \"5\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n# $2 is an integer\nis_simple_power() {\n  local n=$1\n  local x=$2\n  if [[ $n == 1 ]] ; then\n    return 1\n  fi\n  if [[ $x == 1 ]] ; then\n    return 1\n  fi\n  for i in $(seq 2 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["# <func> # Shell\n#!/bin/bash\n# Write a function that takes an integer a and returns true \n# if this ingeger is a cube of some integer number.\n# Note: you may assume the input is always valid.\n# Examples:\n# >>> $(iscube \"1\")\n# \"true\"\n# >>> $(iscube \"2\")\n# \"false\"\n# >>> $(iscube \"-1\")\n# \"true\"\n# >>> $(iscube \"64\")\n# \"true\"\n# >>> $(iscube \"0\")\n# \"true\"\n# >>> $(iscube \"180\")\n# \"false\"\n#\n# $1 is an integer\niscube() {\n    if [ $# -eq 0 ]; then\n        echo \"Usage: $(is_cube $1)\"\n        exit 1\n    fi\n    if [ $1 -eq 0 ]; then\n        echo \"Input must be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq 1 ]; then\n        echo \"Input must be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq 2 ]; then\n        echo \"Input must be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq -1 ]; then\n        echo \"Input must be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq 64 ]; then\n        echo \"Input must be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq 0 ]; then\n        echo \"Input must be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq 180 ]; then\n        echo \"Input must be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq 180 ]; then\n        echo \"Input must be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq 180 ]; then\n        echo \"Input must be a positive integer\"\n        exit 1\n    fi\n    if [ $1 -eq 180 ]; then\n        echo \"Input must be a positive integer\"\n        exit 1"], ["# <func> # Shell\n#!/bin/bash\n# You have been tasked to write a function that receives \n# a hexadecimal number as a string and counts the number of hexadecimal \n# digits that are primes (prime number, or a prime, is a natural number \n# greater than 1 that is not a product of two smaller natural numbers).\n# Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n# Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n# So you have to determine a number of the following digits: 2, 3, 5, 7, \n# B (=decimal 11), D (=decimal 13).\n# Note: you may assume the input is always correct or empty string, \n# and symbols A,B,C,D,E,F are always uppercase.\n# Examples:\n# >>> $(hex_key \"AB\")\n# \"1\"\n# >>> $(hex_key \"1077E\")\n# \"2\"\n# >>> $(hex_key \"ABED1A33\")\n# \"4\"\n# >>> $(hex_key \"123456789ABCDEF0\")\n# \"6\"\n# >>> $(hex_key \"2020\")\n# \"2\"\n#\n# $1 is a string\nhex_key() {\n  # Convert hexadecimal string to a number\n  # Hexadecimal string is a string of hexadecimal digits\n  # e.g. \"0x123456789ABCDEF0\"\n  hex_string=$(echo \"$1\" | tr '[:upper:]' '[:lower:]')\n  # Convert hexadecimal string to a number\n  # e.g. 123456789ABCDEF0\n  hex_number=$(echo \"$hex_string\" | tr '[:upper:]' '[:lower:]')\n  # Convert hexadecimal string to a number\n "], ["# <func> # Shell\n#!/bin/bash\n# You will be given a number in decimal form and your task is to convert it to\n# binary format. The function should return a string, with each character representing a binary\n# number. Each character in the string will be '0' or '1'.\n# There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n# The extra characters are there to help with the format.\n# Examples:\n# >>> $(decimal_to_binary \"15\")\n# \"db1111db\"\n# >>> $(decimal_to_binary \"32\")\n# \"db100000db\"\n#\n# $1 is an integer\ndecimal_to_binary() {\n    # Declare a variable to hold the result\n    result=\"\"\n    # Declare a variable to hold the input\n    input=$1\n    # Declare a variable to hold the output\n    output=\"\"\n    # Loop until the input is 0\n    while [ $input -ne 0 ]; do\n        # Get the next character\n        char=$input%2\n        # If the character is 0, append it to the output\n        if [ $char -eq 0 ]; then\n            output=\"$output$char\"\n        # If the character is 1, append it to the result\n        else\n            result=\"$result$char\"\n        # If the character is 0, append it to the result\n        fi\n        # Declare the input again\n        input=$input%2\n    done\n    # If the input is 0, append the result to the output\n    if [ $input -eq 0 ]; then\n        output=\"$output$result\"\n    # If the input is not 0, append the result to the result\n    else\n        result=\"$result$result\"\n    # If the input is 0, append the result to the result\n    fi\n    # Return the result\n    return $result"], ["# <func> # Shell\n#!/bin/bash\n# You are given a string s.\n# Your task is to check if the string is hapsh or not.\n# A string is hapsh if its length is at least 3 and every 3 consecutive letters are distinct\n# For example:\n# >>> $(is_happy \"a\")\n# \"false\"\n# >>> $(is_happy \"aa\")\n# \"false\"\n# >>> $(is_happy \"abcd\")\n# \"true\"\n# >>> $(is_happy \"aabb\")\n# \"false\"\n# >>> $(is_happy \"adb\")\n# \"true\"\n# >>> $(is_happy \"xyy\")\n# \"false\"\n#\n# $1 is a string\nis_happy() {\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  # Your code here\n  #"], ["# <func> # Shell\n#!/bin/bash\n# It is the last week of the semester and the teacher has to give the grades\n# to students. The teacher has been making her own algorithm for grading.\n# The only problem is, she has lost the code she used for grading.\n# She has given you a list of GPAs for some students and you have to write \n# a function that can output a list of letter grades using the following table:\n# GPA       |    Letter grade\n# 4.0                A+\n# > 3.7                A \n# > 3.3                A- \n# > 3.0                B+\n# > 2.7                B \n# > 2.3                B-\n# > 2.0                C+\n# > 1.7                C\n# > 1.3                C-\n# > 1.0                D+ \n# > 0.7                D \n# > 0.0                D-\n# 0.0                E\n# Example:\n# >>> $(grade_equation \"4.0 3 1.7 2 3.5\")\n# ['\"A+\"', '\"B\"', '\"C-\"', '\"C\"', '\"A-\"']\n#\n# $1 is a space-separated list\nnumerical_letter_grade() {\n    # This is the main function. It takes a list of numbers and returns a list of\n    # letter grades.\n    # The list of numbers is a space-separated list.\n    # The list of letter grades is a list of strings.\n    # The first string in the list is the letter grade.\n    # The second string is the letter grade.\n    # The third string is the letter grade.\n    # The fourth string is the letter grade.\n    # The fifth string is the letter grade.\n    # The sixth string is the letter grade.\n    # The seventh string is the letter grade.\n    # The eighth string is the letter grade.\n    # The ninth string is the letter grade.\n    # The tenth string is the letter grade.\n    # The eleventh string is the letter grade.\n    # The tw"], ["# <func> # Shell\n#!/bin/bash\n# Write a function that takes a string and returns true if the string\n# length is a prime number or false otherwise\n# Examples\n# >>> $(prime_length \"Hello\")\n# \"true\"\n# >>> $(prime_length \"abcdcba\")\n# \"true\"\n# >>> $(prime_length \"kittens\")\n# \"true\"\n# >>> $(prime_length \"orange\")\n# \"false\"\n#\n# $1 is a string\nprime_length() {\n    if [ -z \"$1\" ]\n    then\n        echo \"Error: $1 is not a string\"\n        return\n    fi\n    if [ ! \"$1\" =~ ^[0-9]+$ ]\n    then\n        echo \"Error: $1 is not a number\"\n        return\n    fi\n    if [ $1 -eq 0 ]\n    then\n        echo \"Error: $1 is not a prime number\"\n        return\n    fi\n    if [ $1 -eq 1 ]\n    then\n        echo \"Error: $1 is not a prime number\"\n        return\n    fi\n    if [ $1 -eq 2 ]\n    then\n        echo \"Error: $1 is not a prime number\"\n        return\n    fi\n    if [ $1 -eq 3 ]\n    then\n        echo \"Error: $1 is not a prime number\"\n        return\n    fi\n    if [ $1 -eq 4 ]\n    then\n        echo \"Error: $1 is not a prime number\"\n        return\n    fi\n    if [ $1 -eq 5 ]\n    then\n        echo \"Error: $1 is not a prime number\"\n        return\n    fi\n    if [ $1 -eq 6 ]\n    then\n        echo \"Error: $1 is not a prime number\"\n        return\n    fi\n    if [ $1 -eq 7 ]\n    then\n        echo \"Error: $1 is not a prime number\"\n        return\n    fi\n    if [ $1 -eq 8 ]\n    then\n        echo \"Error: $1 is not a prime number\"\n        return\n    fi\n    if [ $1 -eq 9 ]"], ["# <func> # Shell\n#!/bin/bash\n# Given a positive integer n, return the count of the numbers of n-digit\n# positive integers that start or end with 1.\n#\n# $1 is an integer\nstarts_one_ends() {\n  n=$1\n  i=$((n-1))\n  j=$((n+1))\n  while [ $i -lt $j ]\n  do\n    if [ $i -eq 1 ]\n    then\n      echo $i\n    fi\n    if [ $j -eq 1 ]\n    then\n      echo $j\n    fi\n    i=$((i+1))\n    j=$((j-1))\n  done"], ["# <func> # Shell\n#!/bin/bash\n# Given a positive integer N, return the total sum of its digits in binary.\n# Example\n# >>> $(solve \"1000\")\n# \"1\"\n# >>> $(solve \"150\")\n# \"110\"\n# >>> $(solve \"147\")\n# \"1100\"\n# Variables:\n# @N integer\n# Constraints: 0 \u2264 N \u2264 10000.\n# Output:\n# a string of binary number\n#\n# $1 is an integer\nsolve() {\n  local N=$1\n  local result=\"\"\n  while [[ $N -gt 0 ]] ; do\n    result=$(($N % 2))\n    N=$((N / 2))\n  done\n  echo $result"], ["# <func> # Shell\n#!/bin/bash\n# Given a non-empty list of integers lst. add the even elements that are at odd indices..\n# Examples:\n# >>> $(add \"4 2 6 7\")\n# \"2\"\n#\n# $1 is a space-separated list\nadd() {\n    local lst=$1\n    local even=$2\n    local odd=$3\n    local even_index=$4\n    local odd_index=$5\n    local even_index_odd=$6\n    local even_index_even=$7\n    local odd_index_odd=$8\n    local odd_index_even=$9\n    local even_index_odd_even=$10\n    local even_index_even_odd=$11\n    local odd_index_odd_even=$12\n    local odd_index_even_odd=$13\n    if [ -z \"$even\" ] || [ -z \"$odd\" ]; then\n        echo \"Error: $1 is not a space-separated list\"\n        return 1\n    fi\n    if [ \"$even\" = \"\" ] || [ \"$odd\" = \"\" ]; then\n        echo \"Error: $1 is not a space-separated list\"\n        return 1\n    fi\n    if [ \"$even_index\" = \"\" ] || [ \"$odd_index\" = \"\" ]; then\n        echo \"Error: $1 is not a space-separated list\"\n        return 1\n    fi\n    if [ \"$even_index_odd\" = \"\" ] || [ \"$odd_index_odd\" = \"\" ]; then\n        echo \"Error: $1 is not a space-separated list\"\n        return 1\n    fi\n    if [ \"$even_index_even\" = \"\" ] || [ \"$odd_index_even\" = \"\" ]; then\n        echo \"Error: $1 is not a space-separated list\"\n        return 1\n    fi\n    if [ \"$even_index_odd_even\" = \"\" ] || [ \"$odd_index_odd_even\" = \"\" ]; then\n        echo \"Error: $1 is not a space-separated list\"\n        return 1\n    fi\n    if [ \"$odd_index_even_odd\""], ["# <func> # Shell\n#!/bin/bash\n# Write a function that takes a string and returns an ordered version of it.\n# Ordered version of string, is a string where all words (separated by space)\n# are replaced by a new word where all the characters arranged in\n# ascending order based on ascii value.\n# Note: You should keep the order of words and blank spaces in the sentence.\n# For example:\n# >>> $(anti_shuffle \"Hi\")\n# \"Hi\"\n# >>> $(anti_shuffle \"hello\")\n# \"ehllo\"\n# >>> $(anti_shuffle \"Hello World\\!\\!\\!\")\n# \"Hello \\!\\!\\!Wdlor\"\n#\n# $1 is a string\nanti_shuffle() {\n    # Get the input string\n    string=$1\n    # Get the length of the string\n    length=$#string\n    # Get the length of the words in the string\n    word_length=$((length/2))\n    # Get the length of the words in the string\n    # (1)\n    # Get the length of the words in the string\n    # (2)\n    # Get the length of the words in the string\n    # (3)\n    # Get the length of the words in the string\n    # (4)\n    # Get the length of the words in the string\n    # (5)\n    # Get the length of the words in the string\n    # (6)\n    # Get the length of the words in the string\n    # (7)\n    # Get the length of the words in the string\n    # (8)\n    # Get the length of the words in the string\n    # (9)\n    # Get the length of the words in the string\n    # (10)\n    # Get the length of the words in the string\n    # (11)\n    # Get the length of the words in the string\n    # (12)\n    # Get the length of the words in the string\n    # (13)\n    # Get the length of the words in the string\n    # (14)\n    # Get the length of the words in the string\n    # (15)\n    # Get the length of the words"], ["# <func> # Shell\n#!/bin/bash\n# You are given a 2 dimensional data, as a nested lists,\n# which is similar to matrix, however, unlike matrices,\n# each row may contain a different number of columns.\n# Given lst, and integer x, find integers x in the list,\n# and return list of lists, [(x1, y1), (x2, y2) ...] such that\n# each list is a coordinate - (row, columns), starting with 0.\n# Sort coordinates initially by rows in ascending order.\n# Also, sort coordinates of the row by columns in descending order.\n# Examples:\n# >>> $(get_row \"1 2 3 4 5 6\\n1 2 3 4 1 6\\n1 2 3 4 5 1\" \"1\")\n# [['\"0\"', '\"0\"'], ['\"1\"', '\"4\"'], ['\"1\"', '\"0\"'], ['\"2\"', '\"5\"'], ['\"2\"', '\"0\"']]\n# >>> $(get_row \"\" \"1\")\n# []\n# >>> $(get_row \"\\n1\\n1 2 3\" \"3\")\n# [['\"2\"', '\"2\"']]\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nget_row() {\n  local row=\"$1\"\n  local x=\"$2\"\n  local y=\"$3\"\n  local row_list=()\n  for i in \"${!row[@]}\"; do\n    row_list+=( $(echo \"$row[$i]\" | cut -d ' ' -f 2) )\n  done\n  for i in \"${!row_list[@]}\"; do\n    if [[ $x -gt 0 ]] ; then\n      y=$((y+1))\n      x=$((x-1))\n    else\n      y=$((y+1))\n    fi\n  done\n  return $row_list"], ["# <func> # Shell\n#!/bin/bash\n# Given an array of non-negative integers, return a cosh of the given array after sorting,\n# you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n# or sort it in descending order if the sum( first index value, last index value) is even.\n# Note:\n# * don't change the given array.\n# Examples:\n# >>> $(sort_array \"\")\n# []\n# >>> $(sort_array \"5\")\n# ['\"5\"']\n# >>> $(sort_array \"2 4 3 0 1 5\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array \"2 4 3 0 1 5 6\")\n# ['\"6\"', '\"5\"', '\"4\"', '\"3\"', '\"2\"', '\"1\"', '\"0\"']\n#\n# $1 is a space-separated list\nsort_array() {\n  local arr=\"$(echo \"$1\" | sort -k1)\"\n  if [ -n \"$arr\" ]; then\n    arr=\"$(echo \"$arr\" | sort -k1)\"\n  fi\n  return $arr"], ["# <func> # Shell\n#!/bin/bash\n# Create a function encrypt that takes a string as an argument and\n# returns a string encrypted with the alphabet being rotated. \n# The alphabet should be rotated in a manner such that the letters \n# shift down by two multiplied to two places.\n# For example:\n# >>> $(encrypt \"hi\")\n# \"lm\"\n# >>> $(encrypt \"asdfghjkl\")\n# \"ewhjklnop\"\n# >>> $(encrypt \"gf\")\n# \"kj\"\n# >>> $(encrypt \"et\")\n# \"ix\"\n#\n# $1 is a string\nencrypt() {\n    # Get the string from the command line\n    # $1 is a string\n    # $2 is a string\n    # $3 is a string\n    # $4 is a string\n    # $5 is a string\n    # $6 is a string\n    # $7 is a string\n    # $8 is a string\n    # $9 is a string\n    # $10 is a string\n    # $11 is a string\n    # $12 is a string\n    # $13 is a string\n    # $14 is a string\n    # $15 is a string\n    # $16 is a string\n    # $17 is a string\n    # $18 is a string\n    # $19 is a string\n    # $20 is a string\n    # $21 is a string\n    # $22 is a string\n    # $23 is a string\n    # $24 is a string\n    # $25 is a string\n    # $26 is a string\n    # $27 is a string\n    # $28 is a string\n    # $29 is a string\n    # $30 is a string\n    # $31 is a string\n    # $32 is a string\n    # $33 is a string\n    # $34 is a string\n    # $35 is a string\n    # $36 is a string\n    # $37 is a string\n    # $38 is a string\n    # $39 is a string\n    # $4"], ["# <func> # Shell\n#!/bin/bash\n# You are given a list of integers.\n# Write a function next_smallest() that returns the 2nd smallest element of the list.\n# Return None if there is no such element.\n# >>> $(next_smallest \"1 2 3 4 5\")\n# \"2\"\n# >>> $(next_smallest \"5 1 4 3 2\")\n# \"2\"\n# >>> $(next_smallest \"\")\n# \"None\"\n# >>> $(next_smallest \"1 1\")\n# \"None\"\n#\n# $1 is a space-separated list\nnext_smallest() {\n  local a=1\n  local b=2\n  local c=3\n  local d=4\n  local e=5\n  local f=6\n  local g=7\n  local h=8\n  local i=9\n  local j=10\n  local k=11\n  local l=12\n  local m=13\n  local n=14\n  local o=15\n  local p=16\n  local q=17\n  local r=18\n  local s=19\n  local t=20\n  local u=21\n  local v=22\n  local w=23\n  local x=24\n  local y=25\n  local z=26\n  local a_list=a b c d e f g h i j k l m n o p q r s t u v w x y z\n  local a_min=a_list[0]\n  local b_min=b_list[0]\n  local c_min=c_list[0]\n  local d_min=d_list[0]\n  local e_min=e_list[0]\n  local f_min=f_list[0]\n  local g_min=g_list[0]\n  local h_min=h_list[0]\n  local i_min=i_list[0]\n  local j_min=j_list[0]\n  local k_min=k_list[0]\n  local l_min"], ["# <func> # Shell\n#!/bin/bash\n# You'll be given a string of words, and your task is to count the number\n# of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences are delimited by '.', '?' or '!'.\n# For example:\n# >>> $(is_bored \"Hello world\")\n# \"0\"\n# >>> $(is_bored \"The sky is blue. The sun is shining. I love this weather\")\n# \"1\"\n#\n# $1 is a string\nis_bored() {\n  # Get the input string\n  input=$1\n\n  # Get the number of boredoms\n  num_boredoms=$((length $input) - 1)\n\n  # Print the result\n  echo \"The number of boredoms is: $num_boredoms\""], ["# <func> # Shell\n#!/bin/bash\n# Create a function that takes 3 numbers.\n# Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n# Returns false in any other cases.\n# Examples\n# >>> $(any_int \"5\" \"2\" \"7\")\n# \"true\"\n# >>> $(any_int \"3\" \"2\" \"2\")\n# \"false\"\n# >>> $(any_int \"3\" \"-2\" \"1\")\n# \"true\"\n# >>> $(any_int \"3.6\" \"-2.2\" \"2\")\n# \"false\"\n#\n# $1 is a floating point\n# $2 is a floating point\n# $3 is a floating point\nany_int() {\n  local num1=$1\n  local num2=$2\n  local sum=$num1+$num2\n  if [[ $sum -eq $num1 ]] || [[ $sum -eq $num2 ]] || [[ $sum -eq $num1 + $num2 ]]\n  then\n    return true\n  else\n    return false\n  fi"], ["# <func> # Shell\n#!/bin/bash\n# Write a function that takes a message, and encodes in such a \n# way that it swaps case of all letters, replaces all vowels in \n# the message with the letter that appears 2 places ahead of that \n# vowel in the english alphabet. \n# Assume only letters. \n# Examples:\n# >>> $(encode \"test\")\n# \"TGST\"\n# >>> $(encode \"This is a message\")\n# \"tHKS KS C MGSSCGG\"\n#\n# $1 is a string\nencode() {\n    # Get the message\n    message=$1\n    # Get the vowels\n    vowels=(\"a\" \"e\" \"i\" \"o\" \"u\")\n    # Get the letters\n    letters=(\"a\" \"e\" \"i\" \"o\" \"u\" \"y\")\n    # Get the vowels that appear 2 places ahead of the vowel\n    vowel_2_ahead=(\"a\" \"e\" \"i\" \"o\")\n    # Get the vowels that appear 2 places ahead of the vowel\n    vowel_2_e=(\"e\" \"i\" \"o\")\n    # Get the vowels that appear 2 places ahead of the vowel\n    vowel_2_i=(\"i\" \"o\")\n    # Get the vowels that appear 2 places ahead of the vowel\n    vowel_2_u=(\"u\" \"y\")\n    # Get the vowels that appear 2 places ahead of the vowel\n    vowel_2_y=(\"y\" \"u\")\n    # Get the vowels that appear 2 places ahead of the vowel\n    vowel_2_z=(\"z\" \"y\")\n    # Get the vowels that appear 2 places ahead of the vowel\n    vowel_2_z=(\"z\" \"y\")\n    # Get the vowels that appear 2 places ahead of the vowel\n    vowel_2_z=(\"z\" \"y\")\n    # Get the vowels that appear 2 places ahead of the vowel\n    vowel_2_z"], ["# <func> # Shell\n#!/bin/bash\n# You are given a list of integers.\n# You need to find the largest prime value and return the sum of its digits.\n# Examples:\n# >>> $(skjkasdkd \"0 3 2 1 3 5 7 4 5 5 5 2 181 32 4 32 3 2 32 324 4 3\")\n# \"10\"\n# >>> $(skjkasdkd \"1 0 1 8 2 4597 2 1 3 40 1 2 1 2 4 2 5 1\")\n# \"25\"\n# >>> $(skjkasdkd \"1 3 1 32 5107 34 83278 109 163 23 2323 32 30 1 9 3\")\n# \"13\"\n# >>> $(skjkasdkd \"0 724 32 71 99 32 6 0 5 91 83 0 5 6\")\n# \"11\"\n# >>> $(skjkasdkd \"0 81 12 3 1 21\")\n# \"3\"\n# >>> $(skjkasdkd \"0 8 1 2 1 7\")\n# \"7\"\n#\n# $1 is a space-separated list\nskjkasdkd() {\n  local -i \"$1\"\n  local -i \"$@\"\n  local -i \"$@\"\n  local -i \"$@\"\n  local -i \"$@\"\n  local -i \"$@\"\n  local -i \"$@\"\n  local -i \"$@\"\n  local -i \"$@\"\n  local -i \"$@\"\n  local -i \"$@\"\n  local -i \"$@\"\n  local -i \"$@\"\n  local -i \"$@\"\n  local -i \"$@\"\n  local -i \"$@\"\n  local -i \"$@\"\n  local -i \"$@\"\n  local -i \"$@\"\n  local -i \"$@\"\n  local -"], ["# <func> # Shell\n#!/bin/bash\n# Given a CSV, return true if all keys are strings in lower \n# case or all keys are strings in upper case, else return false.\n# The function should return false is the given CSV is empty.\n# Examples:\n# >>> $(check_dict_case \"a,apple\\nb,banana\")\n# \"true\"\n# >>> $(check_dict_case \"a,apple\\nA,banana\\nB,banana\")\n# \"false\"\n# >>> $(check_dict_case \"a,apple\\n8,banana\")\n# \"false\"\n# >>> $(check_dict_case \"Name,John\\nAge,36\\nCity,Houston\")\n# \"false\"\n# >>> $(check_dict_case \"STATE,NC\\nZIP,12345\")\n# \"true\"\n#\n# $1 is a two column CSV in key,value order\ncheck_dict_case() {\n    # Check if the CSV is empty\n    if [[ $# -eq 0 ]]\n    then\n        return 0\n    fi\n\n    # Check if the CSV is in the correct format\n    if [[ $# -eq 2 ]]\n    then\n        # Get the key and value\n        key=$1\n        value=$2\n\n        # Check if the key is a string\n        if [[ $key -eq $value ]]\n        then\n            # Check if the key is a string in lower case\n            if [[ $key -eq $value ]]\n            then\n                # Return true\n                return 1\n            fi\n        fi\n    fi\n\n    # Check if the CSV is in the correct format\n    if [[ $# -eq 2 ]]\n    then\n        # Get the key and value\n        key=$1\n        value=$2\n\n        # Check if the value is a string\n        if [[ $key -eq $value ]]\n        then\n            # Check if the value is a string in lower case\n            if [[ $key -eq $value ]]\n            then\n                # Return true\n                return 1\n            fi\n        fi\n    fi\n\n    # Check if the CSV is in the correct format\n    if [[ $#"], ["# <func> # Shell\n#!/bin/bash\n# Implement a function that takes an non-negative integer and returns an array of the first n\n# integers that are prime numbers and less than n.\n# for example:\n# >>> $(count_up_to \"5\")\n# ['\"2\"', '\"3\"']\n# >>> $(count_up_to \"11\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"']\n# >>> $(count_up_to \"0\")\n# []\n# >>> $(count_up_to \"20\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"', '\"11\"', '\"13\"', '\"17\"', '\"19\"']\n# >>> $(count_up_to \"1\")\n# []\n# >>> $(count_up_to \"18\")\n# ['\"2\"', '\"3\"', '\"5\"', '\"7\"', '\"11\"', '\"13\"', '\"17\"']\n#\n# $1 is an integer\ncount_up_to() {\n  local n=$1\n  local result=\"\"\n  for ((i=1; i<=n; i++)) {\n    if [ $i -eq 2 ] {\n      result=$result$i\" \"\n    } else if [ $i -eq 3 ] {\n      result=$result$i\" \"\n    } else if [ $i -eq 5 ] {\n      result=$result$i\" \"\n    } else if [ $i -eq 7 ] {\n      result=$result$i\" \"\n    } else if [ $i -eq 11 ] {\n      result=$result$i\" \"\n    } else if [ $i -eq 13 ] {\n      result=$result$i\" \"\n    } else if [ $i -eq 17 ] {\n      result=$result$i\" \"\n    } else if [ $i -eq 19 ] {\n      result=$result$i\" \"\n    } else {\n      result=$result$i\" \"\n    }\n  }\n  return $result"], ["# <func> # Shell\n#!/bin/bash\n# Complete the function that takes two integers and returns \n# the product of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# >>> $(multiply \"148\" \"412\")\n# \"16\"\n# >>> $(multiply \"19\" \"28\")\n# \"72\"\n# >>> $(multiply \"2020\" \"1851\")\n# \"0\"\n# >>> $(multiply \"14\" \"-15\")\n# \"20\"\n#\n# $1 is an integer\n# $2 is an integer\nmultiply() {\n  local a=$1\n  local b=$2\n  local unit_digit=$((a*b))\n  local product=$((unit_digit*unit_digit))\n  echo \"The product of $a and $b is $product\""], ["# <func> # Shell\n#!/bin/bash\n# Given a string s, count the number of uppercase vowels in even indices.\n# For example:\n# >>> $(count_upper \"aBCdEf\")\n# \"1\"\n# >>> $(count_upper \"abcdefg\")\n# \"0\"\n# >>> $(count_upper \"dBBE\")\n# \"0\"\n#\n# $1 is a string\ncount_upper() {\n  # count the number of uppercase vowels in even indices\n  # for example:\n  # >>> $(count_upper \"aBCdEf\")\n  # \"1\"\n  # >>> $(count_upper \"abcdefg\")\n  # \"0\"\n  # >>> $(count_upper \"dBBE\")\n  # \"0\"\n  #\n  # $1 is a string\n  # $2 is a string\n  # $3 is a string\n  # $4 is a string\n  # $5 is a string\n  # $6 is a string\n  # $7 is a string\n  # $8 is a string\n  # $9 is a string\n  # $10 is a string\n  # $11 is a string\n  # $12 is a string\n  # $13 is a string\n  # $14 is a string\n  # $15 is a string\n  # $16 is a string\n  # $17 is a string\n  # $18 is a string\n  # $19 is a string\n  # $20 is a string\n  # $21 is a string\n  # $22 is a string\n  # $23 is a string\n  # $24 is a string\n  # $25 is a string\n  # $26 is a string\n  # $27 is a string\n  # $28 is a string\n  # $29 is a string\n  # $30 is a string\n  # $31 is a string\n  # $32 is a string\n  # $33 is a string\n  # $34 is a string\n  # $35 is a string\n  # $36 is a string\n  # $37 is"], ["# <func> # Shell\n#!/bin/bash\n# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> $(closest_integer \"10\")\n# \"10\"\n# >>> $(closest_integer \"15.3\")\n# \"15\"\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\n#\n# $1 is a string\nclosest_integer() {\n  local num=\"$1\"\n  local closest=$(( $num + 1 ))\n  local diff=$(( $num - $closest ))\n  if [ $diff -eq 0 ]\n  then\n    return $closest\n  fi\n  for i in $(seq 1 $diff); do\n    if [ $num -eq $i ]; then\n      return $i\n    fi\n  done\n  return $closest"], ["# <func> # Shell\n#!/bin/bash\n# Given a positive integer n, you have to make a pile of n levels of stones.\n# The first level has n stones.\n# The number of stones in the next level is:\n# - the next odd number if n is odd.\n# - the next even number if n is even.\n# Return the number of stones in each level in a list, where element at index\n# i represents the number of stones in the level (i+1).\n# Examples:\n# >>> $(make_a_pile \"3\")\n# ['\"3\"', '\"5\"', '\"7\"']\n#\n# $1 is an integer\nmake_a_pile() {\n  local n=$1\n  local pile_levels=$((n+1))\n  local pile_levels_str=$((n+1))\n  local pile_levels_str_len=$((n+1))\n  local pile_levels_str_len_str=$((n+1))\n  local pile_levels_str_len_str_len=$((n+1))\n  local pile_levels_str_len_str_len_str=$((n+1))\n  local pile_levels_str_len_str_len_str_len=$((n+1))\n  local pile_levels_str_len_str_len_str_len_str=$((n+1))\n  local pile_levels_str_len_str_len_str_len_str_len=$((n+1))\n  local pile_levels_str_len_str_len_str_len_str_len_str=$((n+1))\n  local pile_levels_str_len_str_len_str_len_str_len_str_len=$((n+1))\n  local pile_levels_str_len_str_len_str_len_str_len_str_len_str=$((n+1))\n  local pile_levels_str_len_str_len_str_len_str_len_str_len_str_len=$((n+1))\n  local"], ["# <func> # Shell\n#!/bin/bash\n# You will be given a string of words separated by commas or spaces. Your task is\n# to split the string into words and return an array of the words.\n# For example:\n# >>> $(words_string \"Hi, my name is John\")\n# ['\"Hi\"', '\"my\"', '\"name\"', '\"is\"', '\"John\"']\n# >>> $(words_string \"One, two, three, four, five, six\")\n# ['\"One\"', '\"two\"', '\"three\"', '\"four\"', '\"five\"', '\"six\"']\n#\n# $1 is a string\nwords_string() {\n    local word_array=()\n    local word_index=0\n    local word_length=0\n    local word_string=\"\"\n    local word_index_string=\"\"\n    local word_index_length=\"\"\n    local word_index_string_length=\"\"\n    local word_index_string_length_string=\"\"\n    local word_index_string_length_array=\"\"\n    local word_index_string_length_array_length=\"\"\n    local word_index_string_length_array_length_string=\"\"\n    local word_index_string_length_array_length_string_length=\"\"\n    local word_index_string_length_array_length_string_length_string=\"\"\n    local word_index_string_length_array_length_string_length_string_length=\"\"\n    local word_index_string_length_array_length_string_length_string_length_string=\"\"\n    local word_index_string_length_array_length_string_length_string_length_string_length=\"\"\n    local word_index_string_length_array_length_string_length_string_length_string_length_string=\"\"\n    local word_index_string_length_array_length_string_length_string_length_string_length_string_length=\"\"\n    local word_index_string_length_array_length_string_length_string_length_string_length_string_length_string=\"\"\n    local word_index_string_length_array_length_string_length_string_length_string_length_string_length_"], ["# <func> # Shell\n#!/bin/bash\n# This function takes two positive numbers x and y and returns the\n# biggest even integer number that is in the range [x, y] inclusive. If \n# there's no such number, then the function should return -1.\n# For example:\n# >>> $(choose_num \"12\" \"15\")\n# \"14\"\n# >>> $(choose_num \"13\" \"12\")\n# \"-1\"\n#\n# $1 is an integer\n# $2 is an integer\nchoose_num() {\n    # Check if the input is a number\n    if [ -z \"$1\" ] || [ -z \"$2\" ]; then\n        echo \"Error: Please enter a number.\"\n        return\n    fi\n\n    # Check if the input is positive\n    if [ \"$1\" -lt \"$2\" ]; then\n        echo \"Error: Please enter a positive number.\"\n        return\n    fi\n\n    # Check if the input is in the range [x, y]\n    if [ \"$1\" -ge \"$2\" ]; then\n        echo \"Error: Please enter a number in the range [x, y].\"\n        return\n    fi\n\n    # Check if the input is even\n    if [ \"$1\" -eq \"$2\" ]; then\n        echo \"Error: Please enter an even number.\"\n        return\n    fi\n\n    # Check if the input is in the range [x, y]\n    if [ \"$1\" -gt \"$2\" ]; then\n        echo \"Error: Please enter an even number in the range [x, y].\"\n        return\n    fi\n\n    # Check if the input is in the range [x, y]\n    if [ \"$1\" -lt \"$2\" ]; then\n        echo \"Error: Please enter an even number in the range [x, y].\"\n        return\n    fi\n\n    # Check if the input is in the range [x, y]\n    if [ \"$1\" -gt \"$2\" ]; then\n        echo \"Error: Please enter an even number in the range [x, y].\"\n        return\n    fi\n\n    # Check if the input is in the range [x, y]\n    if ["], ["# <func> # Shell\n#!/bin/bash\n# You are given two positive integers n and m, and your task is to compute the\n# average of the integers from n through m (including n and m). \n# Round the answer to the nearest integer and convert that to binary.\n# If n is greater than m, return -1.\n# Example:\n# >>> $(rounded_avg \"1\" \"5\")\n# \"0b11\"\n# >>> $(rounded_avg \"7\" \"5\")\n# \"-1\"\n# >>> $(rounded_avg \"10\" \"20\")\n# \"0b1111\"\n# >>> $(rounded_avg \"20\" \"33\")\n# \"0b11010\"\n#\n# $1 is an integer\n# $2 is an integer\nrounded_avg() {\n    local n m\n    n=read -d '' \"$1\"\n    m=read -d '' \"$2\"\n    if [ $n -gt $m ]; then\n        return -1\n    fi\n    local avg=$((n+m)/2))\n    local rounded=$((avg))\n    local rounded_int=$(echo $rounded | bc)\n    local rounded_bin=$(echo $rounded_int | bc)\n    return $(echo $rounded_bin | bc)"], ["# <func> # Shell\n#!/bin/bash\n# Given a list of positive integers x. return a sorted list of all \n# elements that hasn't any even digit.\n# Note: Returned list should be sorted in increasing order.\n# For example:\n# >>> $(unique_digits \"15 33 1422 1\")\n# ['\"1\"', '\"15\"', '\"33\"']\n# >>> $(unique_digits \"152 323 1422 10\")\n# []\n#\n# $1 is a space-separated list\nunique_digits() {\n  local x\n  local x_str\n  local x_list\n  x_str=$(echo \"$1\" | tr -d ' ')\n  x_list=$(echo \"$x_str\" | tr -d ' ')\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list=($x_list)\n  x_list="], ["# <func> # Shell\n#!/bin/bash\n# Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n# reverse the resulting array, and then replace each digit by its corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# >>> $(by_length \"2 1 1 4 5 8 2 3\")\n# ['\"Eight\"', '\"Five\"', '\"Four\"', '\"Three\"', '\"Two\"', '\"Two\"', '\"One\"', '\"One\"']\n# If the array is empty, return an empty array:\n# >>> $(by_length \"\")\n# []\n# If the array has any strange number ignore it:\n# >>> $(by_length \"1 -1 55\")\n# ['\"One\"']\n#\n# $1 is a space-separated list\nby_length() {\n  local array\n  local length\n  local name\n  local name_length\n  local name_index\n  local name_index_length\n  local name_index_value\n  local name_index_value_length\n  local name_index_value_index\n  local name_index_value_index_length\n  local name_index_value_index_value\n  local name_index_value_index_value_length\n  local name_index_value_index_value_index\n  local name_index_value_index_value_index_length\n  local name_index_value_index_value_index_value\n  local name_index_value_index_value_index_value_length\n  local name_index_value_index_value_index_value_index\n  local name_index_value_index_value_index_value_index_length\n  local name_index_value_index_value_index_value_index_value\n  local name_index_value_index_value_index_value_index_value_length\n  local name_index_value_index_value_index_value_index_value_index\n  local name_index_value_index_value_index_value"], ["# <func> # Shell\n#!/bin/bash\n# Implement the function f that takes n as a parameter,\n# and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n# or the sum of numbers from 1 to i otherwise.\n# i starts from 1.\n# the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n# Example:\n# >>> $(f \"5\")\n# ['\"1\"', '\"2\"', '\"6\"', '\"24\"', '\"15\"']\n#\n# $1 is an integer\nf() {\n    local n=$1\n    local result=()\n    for ((i=1; i<=n; i++)); do\n        if ((i%2 == 0)); then\n            result+=(\"$i\")\n        else\n            result+=(\"$(($1+1))\")\n        fi\n    done\n    return result"], ["# <func> # Shell\n#!/bin/bash\n# Given a positive integer n, return a list that has the number of even and odd\n# integer palindromes that fall within the range(1, n), inclusive.\n# Example 1:\n# >>> $(even_odd_palindrome \"3\")\n# ['\"1\"', '\"2\"']\n# Explanation:\n# Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n# Example 2:\n# >>> $(even_odd_palindrome \"12\")\n# ['\"4\"', '\"6\"']\n# Explanation:\n# Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n# Note:\n# 1. 1 <= n <= 10^3\n# 2. returned list has the number of even and odd integer palindromes respectively.\n#\n# $1 is an integer\neven_odd_palindrome() {\n    local n=$1\n    local even_odd_palindrome_list=()\n    for ((i=1; i<=n; i++)); do\n        if ((i%2==0)); then\n            even_odd_palindrome_list+=(\"$i\")\n        else\n            even_odd_palindrome_list+=(\"$i\")\n        fi\n    done\n    return $(echo \"${even_odd_palindrome_list[@]}\" | sort | uniq -c | sort -nr | cut -d' ' -f2)"], ["# <func> # Shell\n#!/bin/bash\n# Write a function count_nums which takes an array of integers and returns\n# the number of elements which has a sum of digits > 0.\n# If a number is negative, then its first signed digit will be negative:\n# e.g. -123 has signed digits -1, 2, and 3.\n# >>> $(count_nums \"\")\n# \"0\"\n# >>> $(count_nums \"-1 11 -11\")\n# \"1\"\n# >>> $(count_nums \"1 1 2\")\n# \"3\"\n#\n# $1 is a space-separated list\ncount_nums() {\n    local nums=\"$1\"\n    local sum_digits=0\n    for num in $nums; do\n        sum_digits=$((sum_digits + $num))\n    done\n    if [ $sum_digits -gt 0 ]; then\n        local num_with_sum_digits=$(($sum_digits))\n        local num_with_sum_digits_str=$(($num_with_sum_digits))\n        local num_with_sum_digits_str_len=$(($num_with_sum_digits_str))\n        local num_with_sum_digits_str_len_str=$(($num_with_sum_digits_str_len))\n        local num_with_sum_digits_str_len_str_len=$(($num_with_sum_digits_str_len_str))\n        local num_with_sum_digits_str_len_str_len_str=$(($num_with_sum_digits_str_len_str_len))\n        local num_with_sum_digits_str_len_str_len_str_str=$(($num_with_sum_digits_str_len_str_len_str))\n        local num_with_sum_digits_str_len_str_len_str_str=$(($num_with_sum_digits_str_len_str_len_str_str))\n        local num_with_sum_digits_str_len_str_len_"], ["# <func> # Shell\n#!/bin/bash\n# We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n# numbers in the array will be randomly ordered. Your task is to determine if\n# it is possible to get an array sorted in non-decreasing order by performing \n# the following operation on the given array:\n# You are allowed to perform right shift operation any number of times.\n# One right shift operation means shifting all elements of the array by one\n# position in the right direction. The last element of the array will be moved to\n# the starting position in the array i.e. 0th index. \n# If it is possible to obtain the sorted array by performing the above operation\n# then return true else return false.\n# If the given array is empty then return true.\n# Note: The given list is guaranteed to have unique elements.\n# For Example:\n# >>> $(move_one_ball \"3 4 5 1 2\")\n# \"true\"\n# Explanation: By performin 2 right shift operations, non-decreasing order can\n# be achieved for the given array.\n# >>> $(move_one_ball \"3 5 4 1 2\")\n# \"false\"\n# Explanation:It is not possible to get non-decreasing order for the given\n# array by performing any number of right shift operations.\n#\n# $1 is a space-separated list\nmove_one_ball() {\n  local arr=\"$(echo $1)\"\n  local N=$((length $arr))\n  local arr_sorted=\"$(seq -1 $N 0)\"\n  local arr_sorted_rev=\"$(seq -1 $N 0)\"\n  for i in $arr; do\n    if [ $i -gt $arr_sorted_rev ]; then\n      arr_sorted=\"$arr_sorted_rev\"\n      arr_sorted_rev=\"$i\"\n    fi\n  done\n  if [ $arr_sorted -gt $arr_sorted_rev ]; then\n    return 1\n  fi\n  return 0"], ["# <func> # Shell\n#!/bin/bash\n# In this problem, you will implement a function that takes two lists of numbers,\n# and determines whether it is possible to perform an exchange of elements\n# between them to make lst1 a list of only even numbers.\n# There is no limit on the number of exchanged elements between lst1 and lst2.\n# If it is possible to exchange elements between the lst1 and lst2 to make\n# all the elements of lst1 to be even, return \"YES\".\n# Otherwise, return \"NO\".\n# For example:\n# >>> $(exchange \"1 2 3 4\" \"1 2 3 4\")\n# \"YES\"\n# >>> $(exchange \"1 2 3 4\" \"1 5 3 4\")\n# \"NO\"\n# It is assumed that the input lists will be non-empty.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nexchange() {\n  local lst1 lst2\n  read -p \"Enter lst1: \" lst1\n  read -p \"Enter lst2: \" lst2\n  if [[ $lst1 == $lst2 ]] ; then\n    return \"NO\"\n  fi\n  if [[ $lst1 == $lst2 ]] ; then\n    return \"YES\"\n  fi\n  for i in $lst1 $lst2 ; do\n    if [[ $i % 2 == 0 ]] ; then\n      lst1=$lst1$i$i\n      lst2=$lst2$i$i\n      return \"YES\"\n    fi\n  done\n  return \"NO\""], ["# <func> # Shell\n#!/bin/bash\n# Given a string representing a space separated lowercase letters, return a CSV\n# of the letter with the most repetition and containing the corresponding count.\n# If several letters have the same occurrence, return all of them.\n# Example:\n# >>> $(histogram \"a b c\")\n# {'\"a\"': '\"1\"', '\"b\"': '\"1\"', '\"c\"': '\"1\"'}\n# >>> $(histogram \"a b b a\")\n# {'\"a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"a b c a b\")\n# {'\"a\"': '\"2\"', '\"b\"': '\"2\"'}\n# >>> $(histogram \"b b b b a\")\n# {'\"b\"': '\"4\"'}\n# >>> $(histogram \"\")\n# {}\n#\n# $1 is a string\nhistogram() {\n  local -a hist\n  local -a hist_count\n  local -a hist_count_max\n  local -a hist_count_min\n  local -a hist_count_sum\n  local -a hist_count_max_sum\n  local -a hist_count_min_sum\n  local -a hist_count_sum_max\n  local -a hist_count_sum_min\n  local -a hist_count_sum\n  local -a hist_count_max_count\n  local -a hist_count_min_count\n  local -a hist_count_sum_max_count\n  local -a hist_count_sum_min_count\n  local -a hist_count_sum_count\n  local -a hist_count_max_count_sum\n  local -a hist_count_min_count_sum\n  local -a hist_count_sum_max_count_sum\n  local -a hist_count_sum_min_count_sum\n  local -a hist_count_sum_count_max_sum\n  local -a hist_count_sum_count_min_sum\n  local -a hist_count_sum_count\n  local -a hist_count_max_count_sum_max\n  local -a hist"], ["# <func> # Shell\n#!/bin/bash\n# Task\n# We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n# then check if the result string is palindrome.\n# A string is called palindrome if it reads the same backward as forward.\n# You should return a list containing the result string and true/false for the check.\n# Example\n# >>> $(reverse_delete \"abcde\" \"ae\")\n# ['\"bcd\"', '\"false\"']\n# >>> $(reverse_delete \"abcdef\" \"b\")\n# ['\"acdef\"', '\"false\"']\n# >>> $(reverse_delete \"abcdedcba\" \"ab\")\n# ['\"cdedc\"', '\"true\"']\n#\n# $1 is a string\n# $2 is a string\nreverse_delete() {\n  local s=\"$1\"\n  local c=\"$2\"\n  local result=\"$s\"\n  local check=\"$s\"\n  local i=0\n  while [ \"$i\" -lt 0 ]\n  do\n    result=\"$result$c\"\n    i=$((i+1))\n  done\n  while [ \"$i\" -lt 0 ]\n  do\n    result=\"$result$s\"\n    i=$((i+1))\n  done\n  if [ \"$result\" == \"$check\" ]\n  then\n    return [ \"$result\" ]\n  fi\n  return [ \"$result\", \"$check\" ]"], ["# <func> # Shell\n#!/bin/bash\n# Given an array of integers nums, find the minimum sum of any non-empty sub-array\n# of nums.\n# Example\n# >>> $(minSubArraySum \"2 3 4 1 2 4\")\n# \"1\"\n# >>> $(minSubArraySum \"-1 -2 -3\")\n# \"-6\"\n#\n# $1 is a space-separated list\nminSubArraySum() {\n    local nums=\"$1\"\n    local sub_arr=\"$2\"\n    local min_sum=\"$3\"\n    local max_sum=\"$4\"\n    local sub_arr_sums=\"$5\"\n    local sub_arr_sums_len=$#sub_arr_sums\n    local sub_arr_sums_sum=$#sub_arr_sums\n    local sub_arr_sums_max=$#sub_arr_sums\n    local sub_arr_sums_min=$#sub_arr_sums\n    local sub_arr_sums_sum_max=$#sub_arr_sums\n    local sub_arr_sums_sum_min=$#sub_arr_sums\n    local sub_arr_sums_sum_max_min=$#sub_arr_sums\n    local sub_arr_sums_sum_max_min_max=$#sub_arr_sums\n    local sub_arr_sums_sum_max_min_min=$#sub_arr_sums\n    local sub_arr_sums_sum_max_min_max_min=$#sub_arr_sums\n    local sub_arr_sums_sum_max_min_max_min_max=$#sub_arr_sums\n    local sub_arr_sums_sum_max_min_max_min_max_max=$#sub_arr_sums\n    local sub_arr_sums_sum_max_min_max_min_max_max_max=$#sub_arr_sums\n    local sub_arr_sums_sum_max_min_max_min_max_max_max_max=$#sub_arr_sums\n    local sub_arr_sum"], ["# <func> # Shell\n#!/bin/bash\n# You are given a rectangular grid of wells. Each row represents a single well,\n# and each 1 in a row represents a single unit of water.\n# Each well has a corresponding bucket that can be used to extract water from it, \n# and all buckets have the same capacity.\n# Your task is to use the buckets to empty the wells.\n# Output the number of times you need to lower the buckets.\n# Example 1:\n# >>> $(max_fill \"0 0 1 0\\n0 1 0 0\\n1 1 1 1\" \"1\")\n# \"6\"\n# Example 2:\n# >>> $(max_fill \"0 0 1 1\\n0 0 0 0\\n1 1 1 1\\n0 1 1 1\" \"2\")\n# \"5\"\n# Example 3:\n# >>> $(max_fill \"0 0 0\\n0 0 0\" \"5\")\n# \"0\"\n# Constraints:\n# * all wells have the same length\n# * 1 <= grid.length <= 10^2\n# * 1 <= grid[:,1].length <= 10^2\n# * grid[i][j] -> 0 | 1\n# * 1 <= capacity <= 10\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nmax_fill() {\n  local capacity bucket_size\n  local wells\n  local buckets\n  local buckets_used\n  local buckets_total\n  local buckets_total_used\n  local buckets_total_used_count\n  local buckets_total_used_count_max\n  local buckets_total_used_count_min\n  local buckets_total_used_count_max_min\n  local buckets_total_used_count_max_count\n  local buckets_total_used_count_max_count_max\n  local buckets_total_used_count_max_count_min\n  local buckets_total_used_count_max_"], ["# <func> # Shell\n#!/bin/bash\n# In this Kata, you have to sort an array of non-negative integers according to\n# number of ones in their binary representation in ascending order.\n# For similar number of ones, sort based on decimal value.\n# It must be implemented like this:\n# >>> $(sort_array \"1 5 2 3 4\")\n# ['\"1\"', '\"2\"', '\"3\"', '\"4\"', '\"5\"']\n# >>> $(sort_array \"-2 -3 -4 -5 -6\")\n# ['\"-6\"', '\"-5\"', '\"-4\"', '\"-3\"', '\"-2\"']\n# >>> $(sort_array \"1 0 2 3 4\")\n# ['\"0\"', '\"1\"', '\"2\"', '\"3\"', '\"4\"']\n#\n# $1 is a space-separated list\nsort_array() {\n    local -d \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$1\"\n    local -i \"$"], ["# <func> # Shell\n#!/bin/bash\n# Given a string s and a natural number n, you have been tasked to implement \n# a function that returns a list of all words from string s that contain exactly \n# n consonants, in order these words appear in the string s.\n# If the string s is empty then the function should return an empty list.\n# Note: you may assume the input string contains only letters and spaces.\n# Examples:\n# >>> $(select_words \"Mary had a little lamb\" \"4\")\n# ['\"little\"']\n# >>> $(select_words \"Mary had a little lamb\" \"3\")\n# ['\"Mary\"', '\"lamb\"']\n# >>> $(select_words \"simple white space\" \"2\")\n# []\n# >>> $(select_words \"Hello world\" \"4\")\n# ['\"world\"']\n# >>> $(select_words \"Uncle sam\" \"3\")\n# ['\"Uncle\"']\n#\n# $1 is a string\n# $2 is an integer\nselect_words() {\n  # Get the input string\n  string=$1\n  # Get the number of consonants\n  consonants=$2\n  # Get the number of words\n  words=$3\n  # Get the number of words that contain exactly consonants\n  words_containing_consonants=$((words - consonants))\n  # Get the words\n  words_list=$((words_containing_consonants * consonants))\n  # Get the words that contain exactly consonants\n  words_containing_consonants_list=$((words_containing_consonants * consonants * 2))\n  # Get the words that contain exactly consonants and spaces\n  words_containing_consonants_and_spaces=$((words_containing_consonants * consonants * 2 * 2))\n  # Get the words that contain exactly consonants and spaces and spaces\n  words_containing_consonants_and_spaces_and_spaces=$((words_containing_consonants * consonants * 2 * 2 * 2))\n  # Get the words that contain exactly consonants and"], ["# <func> # Shell\n#!/bin/bash\n# You are given a word. Your task is to find the closest vowel that stands between \n# two consonants from the right side of the word (case sensitive).\n# Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n# find any vowel met the above condition. \n# You may assume that the given string contains English letter only.\n# Example:\n# >>> $(get_closest_vowel \"yogurt\")\n# \"u\"\n# >>> $(get_closest_vowel \"FULL\")\n# \"U\"\n# >>> $(get_closest_vowel \"quick\")\n# \"\"\n# >>> $(get_closest_vowel \"ab\")\n# \"\"\n#\n# $1 is a string\nget_closest_vowel() {\n  local word=$1\n  local vowel_count=$((length $word - 1))\n  local vowel_index=$((vowel_count/2))\n  local vowel_index_min=$((vowel_index - 1))\n  local vowel_index_max=$((vowel_index + 1))\n  local vowel_index_min_max=$((vowel_index_min - 1))\n  local vowel_index_max_min=$((vowel_index_max - 1))\n  local vowel_index_min_max_min=$((vowel_index_min_max - 1))\n  local vowel_index_max_min_max=$((vowel_index_max_min - 1))\n  local vowel_index_max_min_max_min=$((vowel_index_max_min - 1))\n  local vowel_index_min_max_min_max=$((vowel_index_min_max - 1))\n  local vowel_index_max_min_max_min_max=$((vowel_index_max_min - 1))\n  local vowel_index_max_max_min_max_min=$((vowel_index_max - 1))\n  local vowel_index_max_max_min_max_min_max"], ["# <func> # Shell\n#!/bin/bash\n# You are given a list of two strings, both strings consist of open\n# parentheses '(' or close parentheses ')' only.\n# Your job is to check if it is possible to concatenate the two strings in\n# some order, that the resulting string will be good.\n# A string S is considered to be good if and only if all parentheses in S\n# are balanced. For example: the string '(())()' is good, while the string\n# '())' is not.\n# Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n# Examples:\n# >>> $(match_parens \"()( )\")\n# \"Yes\"\n# >>> $(match_parens \") )\")\n# \"No\"\n#\n# $1 is a space-separated list\nmatch_parens() {\n  local strs=\"$1\"\n  local i=0\n  while [[ -n \"$strs\" ]]\n  do\n    local str=$strs[1]\n    if [[ \"$str\" == \"(\" ]]\n    then\n      i=1\n    else\n      i=0\n    fi\n    if [[ \"$str\" == \")\" ]]\n    then\n      i=1\n    else\n      i=0\n    fi\n    if [[ \"$str\" == \"(\" ]]\n    then\n      strs=\"$strs[2]\"\n    else\n      strs=\"$strs[1]\"\n    fi\n  done\n  if [[ \"$strs\" == \"()\" ]]\n  then\n    return \"Yes\"\n  else\n    return \"No\"\n  fi"], ["# <func> # Shell\n#!/bin/bash\n# Given an array arr of integers and a positive integer k, return a sorted list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# >>> $(maximum \"-3 -4 5\" \"3\")\n# ['\"-4\"', '\"-3\"', '\"5\"']\n# Example 2:\n# >>> $(maximum \"4 -4 4\" \"2\")\n# ['\"4\"', '\"4\"']\n# Example 3:\n# >>> $(maximum \"-3 2 1 2 -1 -2 1\" \"1\")\n# ['\"2\"']\n# Note:\n# 1. The length of the array will be in the range of [1, 1000].\n# 2. The elements in the array will be in the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nmaximum() {\n    local -i\n    local -a arr\n    local -i k\n    local -i max\n    local -i max_arr\n    local -i max_arr_len\n    local -i max_arr_val\n    local -i max_arr_val_len\n    local -i max_arr_val_len_1\n    local -i max_arr_val_len_2\n    local -i max_arr_val_len_3\n    local -i max_arr_val_len_4\n    local -i max_arr_val_len_5\n    local -i max_arr_val_len_6\n    local -i max_arr_val_len_7\n    local -i max_arr_val_len_8\n    local -i max_arr_val_len_9\n    local -i max_arr_val_len_10\n    local -i max_arr_val_len_11\n    local -i max_arr_val_len_12\n    local -i max_arr_val_len_13\n    local -i max_arr_val_len"], ["# <func> # Shell\n#!/bin/bash\n# Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n# Examples\n# >>> $(solution \"5 8 7 1\")\n# \"12\"\n# >>> $(solution \"3 3 3 3 3\")\n# \"9\"\n# >>> $(solution \"30 13 24 321\")\n# \"0\"\n#\n# $1 is a space-separated list\nsolution() {\n  # Get the input\n  read -r -d '' $1\n\n  # Get the odd elements\n  odd_elements=$(echo $1 | sed 's/^[0-9]+//')\n\n  # Get the even positions\n  even_positions=$(echo $1 | sed 's/^[0-9]+//')\n\n  # Get the sum of the odd elements\n  sum_odd=$(echo $odd_elements | awk '{sum+=$1} END {print sum/2}')\n\n  # Get the sum of the even positions\n  sum_even=$(echo $even_positions | awk '{sum+=$1} END {print sum/2}')\n\n  # Return the sum of the odd elements\n  return $sum_odd"], ["# <func> # Shell\n#!/bin/bash\n# Given a non-empty array of integers arr and an integer k, return\n# the sum of the elements with at most two digits from the first k elements of arr.\n# Example:\n# >>> $(add_elements \"111 21 3 4000 5 6 7 8 9\" \"4\")\n# \"24\"\n# Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\n#\n# $1 is a space-separated list\n# $2 is an integer\nadd_elements() {\n  local arr=\"$1\"\n  local k=\"$2\"\n  local sum=0\n  for ((i=0; i<${#arr}; i++)); do\n    local element=$arr[i]\n    if [[ $element =~ ^[0-9]+$ ]] || [[ $element =~ ^[0-9]+$ ]] && [[ $element =~ ^[0-9]+$ ]] && [[ $element =~ ^[0-9]+$ ]] && [[ $element =~ ^[0-9]+$ ]] && [[ $element =~ ^[0-9]+$ ]] && [[ $element =~ ^[0-9]+$ ]] && [[ $element =~ ^[0-9]+$ ]] && [[ $element =~ ^[0-9]+$ ]] && [[ $element =~ ^[0-9]+$ ]] && [[ $element =~ ^[0-9]+$ ]] && [[ $element =~ ^[0-9]+$ ]] && [[ $element =~ ^[0-9]+$ ]] && [[ $element =~ ^[0-9]+$ ]] && [[ $element =~ ^[0-9]+$ ]] && [[ $element =~ ^[0-9]+$ ]] && [[ $element =~ ^[0-9]+$ ]] && [[ $element =~ ^[0-9]+$ ]] && [[ $element =~ ^[0-9]+$ ]] && [[ $element =~ ^[0-9]+$ ]] && [[ $element =~ ^[0-9]+$ ]] && [[ $element =~ ^[0-9]+$ ]] && [[ $element =~ ^[0-9]+$ ]] && [[ $element =~"], ["# <func> # Shell\n#!/bin/bash\n# Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n# The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n# as follows: start with any positive integer n. Then each term is obtained from the \n# previous term as follows: if the previous term is even, the next term is one half of \n# the previous term. If the previous term is odd, the next term is 3 times the previous\n# term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n# Note: \n# 1. Collatz(1) is [1].\n# 2. returned list sorted in increasing order.\n# For example:\n# get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n# >>> $(get_odd_collatz \"5\")\n# ['\"1\"', '\"5\"']\n#\n# $1 is an integer\nget_odd_collatz() {\n  local n=$1\n  local odd_list=()\n  for ((i=1; i<=n; i++)); do\n    if ((i%2==0)) then\n      odd_list+=($i/2)\n    else\n      odd_list+=($i+1)\n    fi\n  done\n  odd_list+=($n)\n  return $odd_list"], ["# <func> # Shell\n#!/bin/bash\n# You have to write a function which validates a given date string and\n# returns true if the date is valid otherwise false.\n# The date is valid if all of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n# 3. The months should not be less than 1 or higher than 12.\n# 4. The date should be in the format: mm-dd-yyyy\n# >>> $(valid_date \"03-11-2000\")\n# \"true\"\n# >>> $(valid_date \"15-01-2012\")\n# \"false\"\n# >>> $(valid_date \"04-0-2040\")\n# \"false\"\n# >>> $(valid_date \"06-04-2020\")\n# \"true\"\n# >>> $(valid_date \"06/04/2020\")\n# \"false\"\n#\n# $1 is a string\nvalid_date() {\n    local date_string=$1\n    local months=$1\n    local days=$2\n    local year=$3\n    local month=$4\n    local day=$5\n    local month_string=$6\n    local day_string=$7\n    local month_number=$8\n    local day_number=$9\n    local month_number_string=$10\n    local day_number_string=$11\n    local month_number_string_upper=$12\n    local day_number_string_upper=$13\n    local month_number_string_lower=$14\n    local day_number_string_lower=$15\n    local month_number_string_lower_upper=$16\n    local day_number_string_lower_upper=$17\n"], ["# <func> # Shell\n#!/bin/bash\n# Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n# should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n# alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n# Examples\n# >>> $(split_words \"Hello world\\!\")\n# ['\"Hello\"', '\"world\\\\!\"']\n# >>> $(split_words \"Hello,world\\!\")\n# ['\"Hello\"', '\"world\\\\!\"']\n# >>> $(split_words \"abcdef\")\n# \"3\"\n#\n# $1 is a string\nsplit_words() {\n  local word_list=()\n  local word_count=0\n  local word_length=0\n  local word_odd_count=0\n  local word_lower_count=0\n  local word_upper_count=0\n  local word_lower_odd_count=0\n  local word_upper_odd_count=0\n  local word_length_odd_count=0\n  local word_length_upper_count=0\n  local word_length_odd_upper_count=0\n  local word_length_upper_odd_count=0\n  local word_length_odd_upper_odd_count=0\n  local word_length_odd_upper_upper_count=0\n  local word_length_odd_upper_upper_odd_count=0\n  local word_length_odd_upper_upper_upper_count=0\n  local word_length_odd_upper_upper_upper_odd_count=0\n  local word_length_odd_upper_upper_upper_upper_count=0\n  local word_length_odd_upper_upper_upper_upper_odd_count=0\n  local word_length_odd_upper_upper_upper_upper_upper_count=0\n  local word_length_odd_upper_upper_upper_upper_upper_odd_count=0\n  local word_length_odd_upper_upper_upper_upper_upper_upper_count"], ["# <func> # Shell\n#!/bin/bash\n# Given a list of numbers, return whether or not they are sorted\n# in ascending order. If list has more than 1 duplicate of the same\n# number, return false. Assume no negative numbers and only integers.\n# Examples\n# >>> $(is_sorted \"5\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5\")\n# \"true\"\n# >>> $(is_sorted \"1 3 2 4 5\")\n# \"false\"\n# >>> $(is_sorted \"1 2 3 4 5 6\")\n# \"true\"\n# >>> $(is_sorted \"1 2 3 4 5 6 7\")\n# \"true\"\n# >>> $(is_sorted \"1 3 2 4 5 6 7\")\n# \"false\"\n# >>> $(is_sorted \"1 2 2 3 3 4\")\n# \"true\"\n# >>> $(is_sorted \"1 2 2 2 3 4\")\n# \"false\"\n#\n# $1 is a space-separated list\nis_sorted() {\n  local nums=$1\n  local sorted=$2\n  local sorted_nums=$3\n  local sorted_nums_len=$4\n  local sorted_nums_sorted=$5\n  local sorted_nums_sorted_len=$6\n  local sorted_nums_sorted_nums=$7\n  local sorted_nums_sorted_nums_len=$8\n  local sorted_nums_sorted_nums_sorted=$9\n  local sorted_nums_sorted_nums_sorted_len=$10\n  local sorted_nums_sorted_nums_sorted_nums=$11\n  local sorted_nums_sorted_nums_sorted_nums_len=$12\n  local sorted_nums_sorted_nums_sorted_nums_sorted=$13\n  local sorted_nums_sorted_nums_sorted_nums_sorted_len=$14\n  local sorted_nums_sorted_nums_sorted_nums_sorted_nums=$15\n "], ["# <func> # Shell\n#!/bin/bash\n# You are given two intervals,\n# where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n# The given intervals are closed which means that the interval (start, end)\n# includes both start and end.\n# For each given interval, it is assumed that its start is less or equal its end.\n# Your task is to determine whether the length of intersection of these two \n# intervals is a prime number.\n# Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n# which its length is 1, which not a prime number.\n# If the length of the intersection is a prime number, return \"YES\",\n# otherwise, return \"NO\".\n# If the two intervals don't intersect, return \"NO\".\n# [input/output] samples:\n# >>> $(intersection \"1 2\" \"2 3\")\n# \"NO\"\n# >>> $(intersection \"-1 1\" \"0 4\")\n# \"NO\"\n# >>> $(intersection \"-3 -1\" \"-5 5\")\n# \"YES\"\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\nintersection() {\n    # Read the input\n    read -r start end\n\n    # Check if the start is less than or equal to the end\n    if [ $start -gt $end ]; then\n        # If the start is greater than the end, return \"NO\"\n        return \"NO\"\n    fi\n\n    # Check if the start is equal to the end\n    if [ $start -eq $end ]; then\n        # If the start is equal to the end, return \"YES\"\n        return \"YES\"\n    fi\n\n    # If the start is less than the end, return \"NO\"\n    return \"NO\""], ["# <func> # Shell\n#!/bin/bash\n# You are given an array arr of integers and you need to return\n# sum of magnitudes of integers multiplied by product of all signs\n# of each number in the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n# Example:\n# >>> $(prod_signs \"1 2 2 -4\")\n# \"9\"\n# >>> $(prod_signs \"0 1\")\n# \"0\"\n# >>> $(prod_signs \"\")\n# \"None\"\n#\n# $1 is a space-separated list\nprod_signs() {\n  local sign_sum_product\n  local sign_sum_product_list\n  local sign_sum_product_str\n  local sign_sum_product_str_list\n  local sign_sum_product_str_list_len\n  local sign_sum_product_str_list_str\n  local sign_sum_product_str_list_len_str\n  local sign_sum_product_str_list_len_str_list\n  local sign_sum_product_str_list_len_str_list_len\n  local sign_sum_product_str_list_len_str_list_len_str\n  local sign_sum_product_str_list_len_str_list_len_str_list\n  local sign_sum_product_str_list_len_str_list_len_str_list_len\n  local sign_sum_product_str_list_len_str_list_len_str_list_len_str\n  local sign_sum_product_str_list_len_str_list_len_str_list_len_str_list\n  local sign_sum_product_str_list_len_str_list_len_str_list_len_str_list_len\n  local sign_sum_product_str_list_len_str_list_len_str_list_len_str_list_len_str\n  local sign_sum_product_str_list_len_str_list_len_str_list_len_str_list_len_str_list\n  local sign_sum"], ["# <func> # Shell\n#!/bin/bash\n# Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n# each cell of the grid contains a value. Every integer in the range [1, N * N]\n# inclusive appears exactly once on the cells of the grid.\n# You have to find the minimum path of length k in the grid. You can start\n# from any cell, and in each step you can move to any of the neighbor cells,\n# in other words, you can go to cells which share an edge with you current\n# cell.\n# Please note that a path of length k means visiting exactly k cells (not\n# necessarily distinct).\n# You CANNOT go off the grid.\n# A path A (of length k) is considered less than a path B (of length k) if\n# after making the ordered lists of the values on the cells that A and B go\n# through (let's call them lst_A and lst_B), lst_A is lexicographically less\n# than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n# such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n# lst_A[j] = lst_B[j].\n# It is guaranteed that the answer is unique.\n# Return an ordered list of the values on the cells that the minimum path go through.\n# Examples:    \n# >>> $(minPath \"1 2 3\\n4 5 6\\n7 8 9\" \"3\")\n# ['\"1\"', '\"2\"', '\"1\"']\n# >>> $(minPath \"5 9 3\\n4 1 6\\n7 8 2\" \"1\")\n# ['\"1\"']\n#\n# $1 is a newline-separated, space-separated list\n# $2 is an integer\nminPath() {\n  local N=$1\n  local K=$2\n  local lst=$1\n  local lst_min=$2\n  local lst_min_len=$2\n  local lst_min_index=$2\n  local lst_min_index_len=$2"], ["# <func> # Shell\n#!/bin/bash\n# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n# the last couple centuries. However, what people don't know is Tribonacci sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n# tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n# tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are given a non-negative integer number n, you have to a return a list of the \n# first n + 1 numbers of the Tribonacci sequence.\n# Examples:\n# >>> $(tri \"3\")\n# ['\"1\"', '\"3\"', '\"2\"', '\"8\"']\n#\n# $1 is an integer\ntri() {\n  local n\n  n=1\n  while [[ $n -lt 1 ]]\n  do\n    n=$(($n+1))\n  done\n  while [[ $n -lt 1 ]]\n  do\n    n=$(($n+1))\n    if [ $n -eq 2 ]\n    then\n      return [ \"$n\" ]\n    fi\n    if [ $n -eq 3 ]\n    then\n      return [ \"$n\" ]\n    fi\n    if [ $n -eq 4 ]\n    then\n      return [ \"$n\" ]\n    fi\n  done\n  return [ \"$n\" ]"], ["# <func> # Shell\n#!/bin/bash\n# Given a positive integer n, return the product of the odd digits.\n# Return 0 if all digits are even.\n# For example:\n# >>> $(digits \"1\")\n# \"1\"\n# >>> $(digits \"4\")\n# \"0\"\n# >>> $(digits \"235\")\n# \"15\"\n#\n# $1 is an integer\ndigits() {\n    local n=$1\n    local product=$((1 << n) - 1)\n    for ((i=1; i<=n; i++)); do\n        if ((i % 2 == 0)); then\n            product *= $i\n        fi\n    done\n    return $product"], ["# <func> # Shell\n#!/bin/bash\n# Create a function that takes a string as input which contains only square brackets.\n# The function should return true if and only if there is a valid subsequence of brackets \n# where at least one bracket in the subsequence is nested.\n# >>> $(is_nested \"[[]]\")\n# \"true\"\n# >>> $(is_nested \"[]]]]]]][[[[[]\")\n# \"false\"\n# >>> $(is_nested \"[][]\")\n# \"false\"\n# >>> $(is_nested \"[]\")\n# \"false\"\n# >>> $(is_nested \"[[][]]\")\n# \"true\"\n# >>> $(is_nested \"[[]][[\")\n# \"true\"\n#\n# $1 is a string\nis_nested() {\n  # Create a function that takes a string as input which contains only square brackets.\n  # The function should return true if and only if there is a valid subsequence of brackets \n  # where at least one bracket in the subsequence is nested.\n  # >>> $(is_nested \"[[]]\")\n  # \"true\"\n  # >>> $(is_nested \"[]]]]]]][[[[[]\")\n  # \"false\"\n  # >>> $(is_nested \"[][]\")\n  # \"false\"\n  # >>> $(is_nested \"[]\")\n  # \"false\"\n  # >>> $(is_nested \"[[][]]\")\n  # \"true\"\n  # >>> $(is_nested \"[[]][[\")\n  # \"true\"\n  #\n  # $1 is a string\n  #\n  # $2 is a string\n  #\n  # $3 is a string\n  #\n  # $4 is a string\n  #\n  # $5 is a string\n  #\n  # $6 is a string\n  #\n  # $7 is a string\n  #\n  # $8 is a string\n  #\n  # $9 is a string\n  #\n  # $10 is a string\n  #\n  # $11 is a string\n  #\n  # $12 is a string\n  #\n  # $13 is a string\n  #\n  # $14 is a"], ["# <func> # Shell\n#!/bin/bash\n# You are given a list of numbers.\n# You need to return the sum of squared numbers in the given list,\n# round each element in the list to the upper int(Ceiling) first.\n# Examples:\n# >>> $(lst \"1.0 2.0 3.0\")\n# \"14\"\n# >>> $(lst \"1.0 4.0 9.0\")\n# \"98\"\n# >>> $(lst \"1.0 3.0 5.0 7.0\")\n# \"84\"\n# >>> $(lst \"1.4 4.2 0.0\")\n# \"29\"\n# >>> $(lst \"-2.4 1.0 1.0\")\n# \"6\"\n#\n# $1 is a space-separated list\nsum_squares() {\n  # Split the list into a list of numbers\n  nums=($(echo \"$1\" | sed 's/^ *//' | tr -d ' '))\n\n  # Round each element in the list to the upper int(Ceiling) first\n  nums_rounded=($(echo \"$nums\" | sed 's/^ *//' | tr -d ' '))\n\n  # Sum the squared numbers\n  sum_squares_nums=$((sum_squares_nums + $(echo \"$nums_rounded\" | sed 's/^ *//' | tr -d ' ')) / 2)"], ["# <func> # Shell\n#!/bin/bash\n# Create a function that returns true if the last character\n# of a given string is an alphabetical character and is not\n# a part of a word, and false otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n# >>> $(check_if_last_char_is_a_letter \"apple pie\")\n# \"false\"\n# >>> $(check_if_last_char_is_a_letter \"apple pi e\")\n# \"true\"\n# >>> $(check_if_last_char_is_a_letter \"apple pi e \")\n# \"false\"\n# >>> $(check_if_last_char_is_a_letter \"\")\n# \"false\"\n#\n# $1 is a string\ncheck_if_last_char_is_a_letter() {\n# Get the last character of the string\n# and check if it is an alphabetical character and not a part of a word\n# or if it is not a part of a word\n# and return true if it is a part of a word\n# and false otherwise\n\n# Get the last character of the string\n# and check if it is an alphabetical character and not a part of a word\n# or if it is not a part of a word\n# and return true if it is a part of a word\n# and false otherwise\n\n# Get the last character of the string\n# and check if it is an alphabetical character and not a part of a word\n# or if it is not a part of a word\n# and return true if it is a part of a word\n# and false otherwise\n\n# Get the last character of the string\n# and check if it is an alphabetical character and not a part of a word\n# or if it is not a part of a word\n# and return true if it is a part of a word\n# and false otherwise\n\n# Get the last character of the string\n# and check if it is an alphabetical character and not a part of a word\n# or if it is not a part of a word\n# and return true if it is a part of a word\n# and false otherwise\n\n# Get the last character of the string\n# and check if it is an alphabetical character and"], ["# <func> # Shell\n#!/bin/bash\n# Create a function which returns the largest index of an element which\n# is not greater than or equal to the element immediately preceding it. If\n# no such element exists then return -1. The given array will not contain\n# duplicate values.\n# Examples:\n# >>> $(can_arrange \"1 2 4 3 5\")\n# \"3\"\n# >>> $(can_arrange \"1 2 3\")\n# \"-1\"\n#\n# $1 is a space-separated list\ncan_arrange() {\n  local arr=\"$1\"\n  local n=$#arr\n  local max_index=$((n-1))\n  local min_index=$((n-2))\n  local max_value=$((n-1))\n  local min_value=$((n-2))\n  for ((i=1; i<n; i++)); do\n    if ((arr[$i] > arr[$max_index])); then\n      max_index=$i\n      max_value=$arr[$max_index]\n    fi\n    if ((arr[$i] < arr[$min_index])); then\n      min_index=$i\n      min_value=$arr[$min_index]\n    fi\n  done\n  if ((max_index == min_index)); then\n    return -1\n  fi\n  return $max_index"], ["# <func> # Shell\n#!/bin/bash\n# Create a function that returns a list (a, b), where 'a' is\n# the largest of negative integers, and 'b' is the smallest\n# of positive integers in a list.\n# If there is no negative or positive integers, return them as None.\n# Examples:\n# >>> $(largest_smallest_integers \"2 4 1 3 5 7\")\n# ['\"None\"', '\"1\"']\n# >>> $(largest_smallest_integers \"\")\n# ['\"None\"', '\"None\"']\n# >>> $(largest_smallest_integers \"0\")\n# ['\"None\"', '\"None\"']\n#\n# $1 is a space-separated list\nlargest_smallest_integers() {\n    local a b\n    local -i\n    for a in \"$1\"\n    do\n        for b in \"$1\"\n        do\n            if [[ \"$a\" -gt \"$b\" ]]\n            then\n                a\n            fi\n            if [[ \"$a\" -lt \"$b\" ]]\n            then\n                b\n            fi\n        done\n    done\n    return $a, $b"], ["# <func> # Shell\n#!/bin/bash\n# Create a function that takes integers, floats, or strings representing\n# real numbers, and returns the larger variable in its given variable type.\n# Return None if the values are equal.\n# Note: If a real number is represented as a string, the floating point might be . or ,\n# >>> $(compare_one \"1\" \"2.5\")\n# \"2.5\"\n# >>> $(compare_one \"1\" \"2,3\")\n# \"2,3\"\n# >>> $(compare_one \"5,1\" \"6\")\n# \"6\"\n# >>> $(compare_one \"1\" \"1\")\n# \"None\"\n#\n# $1 is an argument\n# $2 is an argument\ncompare_one() {\n  if [[ $1 =~ ^[0-9]+$ ]] || [[ $1 =~ ^[0-9.]+$ ]] || [[ $1 =~ ^[0-9,]+$ ]] || [[ $1 =~ ^[0-9,.]+$ ]] || [[ $1 =~ ^[0-9,,.]+$ ]] || [[ $1 =~ ^[0-9,,.,]+$ ]] || [[ $1 =~ ^[0-9,,.,]+$ ]] || [[ $1 =~ ^[0-9,,.,]+$ ]] || [[ $1 =~ ^[0-9,,.,]+$ ]] || [[ $1 =~ ^[0-9,,.,]+$ ]] || [[ $1 =~ ^[0-9,,.,]+$ ]] || [[ $1 =~ ^[0-9,,.,]+$ ]] || [[ $1 =~ ^[0-9,,.,]+$ ]] || [[ $1 =~ ^[0-9,,.,]+$ ]] || [[ $1 =~ ^[0-9,,.,]+$ ]] || [[ $1 =~ ^[0-9,,.,]+$ ]] || [[ $1 =~ ^[0-9,,.,]+$ ]] || [[ $1 =~ ^[0-9,,.,]+$ ]] || [[ $1 =~ ^[0-9,,.,]+$ ]] || [[ $1 =~ ^[0-9,,.,]+$ ]] || [[ $1 =~ ^[0-9,,.,]+$ ]] || [[ $1 =~ ^[0-9,,.,]+$ ]] || [[ $1 =~"], ["# <func> # Shell\n#!/bin/bash\n# Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n# Example\n# >>> $(is_equal_to_sum_even \"4\")\n# \"false\"\n# >>> $(is_equal_to_sum_even \"6\")\n# \"false\"\n# >>> $(is_equal_to_sum_even \"8\")\n# \"true\"\n#\n# $1 is an integer\nis_equal_to_sum_even() {\n  if [ $# -eq 0 ]; then\n    echo \"Usage: $(is_equal_to_sum_even $1)\"\n    exit 1\n  fi\n  n=$1\n  sum_even=$((n*2))\n  for ((i=1; i<=4; i++)); do\n    if [ $sum_even -eq $i ]; then\n      sum_even=$((sum_even - i))\n    fi\n  done\n  if [ $sum_even -eq $n ]; then\n    echo \"Yes\"\n  else\n    echo \"No\"\n  fi"], ["# <func> # Shell\n#!/bin/bash\n# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> $(special_factorial \"4\")\n# \"288\"\n# The function will receive an integer as input and should return the special\n# factorial of this integer.\n#\n# $1 is an integer\nspecial_factorial() {\n    local n=$1\n    local brazilian_factorial=$((n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n*n"], ["# <func> # Shell\n#!/bin/bash\n# Given a string text, replace all spaces in it with underscores, \n# and if a string has more than 2 consecutive spaces, \n# then replace all consecutive spaces with - \n# >>> $(fix_spaces \" Example\")\n# \"Example\"\n# >>> $(fix_spaces \" Example 1\")\n# \"Example_1\"\n# >>> $(fix_spaces \" Example 2\")\n# \"_Example_2\"\n# >>> $(fix_spaces \" Example 3\")\n# \"_Example-3\"\n#\n# $1 is a string\nfix_spaces() {\n    # Get the string\n    text=$1\n    # Get the number of spaces\n    spaces=$((length($1))-1)\n    # Get the number of consecutive spaces\n    consecutive_spaces=$((spaces+1))\n    # Get the number of characters\n    characters=$((length($1))-consecutive_spaces-1)\n    # Get the string with spaces replaced by underscores\n    replaced_text=$((spaces+1))\n    # Get the string with consecutive spaces replaced by -\n    replaced_text=$((consecutive_spaces+1))\n    # Get the string with spaces replaced by -\n    replaced_text=$((spaces+1))\n    # Get the string with consecutive spaces replaced by -\n    replaced_text=$((consecutive_spaces+1))\n    # Get the string with spaces replaced by -\n    replaced_text=$((spaces+1))\n    # Get the string with consecutive spaces replaced by -\n    replaced_text=$((consecutive_spaces+1))\n    # Get the string with spaces replaced by -\n    replaced_text=$((spaces+1))\n    # Get the string with consecutive spaces replaced by -\n    replaced_text=$((consecutive_spaces+1))\n    # Get the string with spaces replaced by -\n    replaced_text=$((spaces+1))\n    # Get the string with consecutive spaces replaced by -\n    replaced_text=$((consecutive_spaces+1))\n    # Get the string with spaces replaced by -\n    replaced_text=$((spaces+1))\n    # Get the string with consecutive spaces replaced by -\n    replaced_text=$((consecutive"], ["# <func> # Shell\n#!/bin/bash\n# Create a function which takes a string representing a file's name, and returns\n# 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n# A file's name is considered to be valid if and only if all the following conditions \n# are met:\n# - There should not be more than three digits ('0'-'9') in the file's name.\n# - The file's name contains exactly one dot '.'\n# - The substring before the dot should not be empty, and it starts with a letter from \n# the latin alphapet ('a'-'z' and 'A'-'Z').\n# - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n# Examples:\n# >>> $(file_name_check \"example.txt\")\n# \"Yes\"\n# >>> $(file_name_check \"1example.dll\")\n# \"No\"\n#\n# $1 is a string\nfile_name_check() {\n  local file_name=\"$1\"\n  local valid_file_name=$(( 100 - 99 + 1 ))\n  local valid_file_name_check=$(( 100 - 99 + 1 ))\n  local file_name_check=$(( 100 - 99 + 1 ))\n  local file_name_check_check=$(( 100 - 99 + 1 ))\n  local file_name_check_check_check=$(( 100 - 99 + 1 ))\n  local file_name_check_check_check_check=$(( 100 - 99 + 1 ))\n  local file_name_check_check_check_check_check=$(( 100 - 99 + 1 ))\n  local file_name_check_check_check_check_check_check=$(( 100 - 99 + 1 ))\n  local file_name_check_check_check_check_check_check_check=$(( 100 - 99 + 1 ))\n  local file_name_check"], ["# <func> # Shell\n#!/bin/bash\n# \"\n# This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n# multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n# change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n# Examples:\n# >>> lst\n# ['\"1\"', '\"2\"', '\"3\"']\n# >>> lst\n# []\n# >>> lst\n# ['\"-1\"', '\"-5\"', '\"2\"', '\"-1\"', '\"-5\"']\n#\n# $1 is a space-separated list\nsum_squares() {\n    # \"\n    # This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    # multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    # change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    # Examples:\n    # >>> lst\n    # ['\"1\"', '\"2\"', '\"3\"']\n    # >>> lst\n    # []\n    # >>> lst\n    # ['\"-1\"', '\"-5\"', '\"2\"', '\"-1\"', '\"-5\"']\n    #\n    # $1 is a space-separated list\n    # $2 is a space-separated list\n    # $3 is a space-separated list\n    # $4 is a space-separated list\n    # $5 is a space-separated list\n    # $6 is a space-separated list\n    # $7 is a space-separated list\n    # $8 is a space-separated list\n    # $9 is a space-separated list\n    # $10 is a space-separated list\n    # $11 is a space-separated list\n    # $"], ["# <func> # Shell\n#!/bin/bash\n# You are given a string representing a sentence,\n# the sentence contains some words separated by a space,\n# and you have to return a string that contains the words from the original sentence,\n# whose lengths are prime numbers,\n# the order of the words in the new string should be the same as the original one.\n# Example 1:\n# >>> $(words_in_sentence \"This is a test\")\n# \"is\"\n# Example 2:\n# >>> $(words_in_sentence \"lets go for swimming\")\n# \"go for\"\n# Constraints:\n# * 1 <= len(sentence) <= 100\n# * sentence contains only letters\n#\n# $1 is a string\nwords_in_sentence() {\n  local sentence=$1\n  local words_in_sentence=$2\n  local words_in_sentence_length=$3\n  local words_in_sentence_length_prime=$4\n  local words_in_sentence_length_prime_prime=$5\n  local words_in_sentence_length_prime_prime_prime=$6\n  local words_in_sentence_length_prime_prime_prime_prime_prime=$7\n  local words_in_sentence_length_prime_prime_prime_prime_prime_prime_prime=$8\n  local words_in_sentence_length_prime_prime_prime_prime_prime_prime_prime_prime_prime=$9\n  local words_in_sentence_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime=$10\n  local words_in_sentence_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime=$11\n  local words_in_sentence_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime=$12\n  local words_in_sentence_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime=$13\n "], ["# <func> # Shell\n#!/bin/bash\n# Your task is to implement a function that will simplify the expression\n# x * n. The function returns true if x * n evaluates to a whole number and false\n# otherwise. Both x and n, are string representation of a fraction, and have the following format,\n# <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n# You can assume that x, and n are valid fractions, and do not have zero as denominator.\n# >>> $(simplify \"1/5\" \"5/1\")\n# \"true\"\n# >>> $(simplify \"1/6\" \"2/1\")\n# \"false\"\n# >>> $(simplify \"7/10\" \"10/2\")\n# \"false\"\n#\n# $1 is a string\n# $2 is a string\nsimplify() {\n  local x y\n  local numerator denominator\n  read -r x y\n  numerator=$(echo $x | sed 's/^/0/')\n  denominator=$(echo $y | sed 's/^/0/')\n  if [ $numerator -ne 0 ] && [ $denominator -ne 0 ]\n  then\n    return true\n  else\n    return false\n  fi"], ["# <func> # Shell\n#!/bin/bash\n# Write a function which sorts the given list of integers\n# in ascending order according to the sum of their digits.\n# Note: if there are several items with similar sum of their digits,\n# order them based on their index in original list.\n# For example:\n# >>> $(order_by_points \"1 11 -1 -11 -12\")\n# ['\"-1\"', '\"-11\"', '\"1\"', '\"-12\"', '\"11\"']\n# >>> $(order_by_points \"\")\n# []\n#\n# $1 is a space-separated list\norder_by_points() {\n    local sum_digits\n    local index\n    local original_list\n    local sorted_list\n    local sum_digits_list\n    local sum_digits_index\n    local index_list\n    local original_list_index\n    local original_list_index_list\n    local original_list_sum_digits\n    local original_list_sum_digits_index\n    local original_list_sum_digits_index_list\n    local original_list_sum_digits_index_list_reverse\n    local original_list_sum_digits_index_reverse\n    local original_list_sum_digits_reverse\n    local original_list_sum_digits_reverse_index\n    local original_list_sum_digits_reverse_index_list\n    local original_list_sum_digits_reverse_index_reverse\n    local original_list_sum_digits_reverse_index_reverse_list\n    local original_list_sum_digits_reverse_index_reverse_list_reverse\n    local original_list_sum_digits_reverse_index_reverse_list_reverse_list\n    local original_list_sum_digits_reverse_index_reverse_list_reverse_list_reverse\n    local original_list_sum_digits_reverse_index_reverse_list_reverse_list_reverse_list_reverse_reverse\n    local original_list_sum_digits_reverse_index_reverse_list_reverse_list_reverse_reverse_reverse\n    local original_list_"], ["# <func> # Shell\n#!/bin/bash\n# Write a function that takes an array of numbers as input and returns \n# the number of elements in the array that are greater than 10 and both \n# first and last digits of a number are odd (1, 3, 5, 7, 9).\n# For example:\n# >>> $(specialFilter \"15 -73 14 -15\")\n# \"1\"\n# >>> $(specialFilter \"33 -2 -3 45 21 109\")\n# \"2\"\n#\n# $1 is a space-separated list\nspecialFilter() {\n  local nums=$1\n  local num=$1\n  local odd=$1\n  local first=$1\n  local last=$1\n  local odd_first=$1\n  local odd_last=$1\n  local odd_first_last=$1\n  local odd_first_last_odd=$1\n  local odd_first_last_odd_first=$1\n  local odd_first_last_odd_last=$1\n  local odd_first_last_odd_last_odd=$1\n  local odd_first_last_odd_last_odd_first=$1\n  local odd_first_last_odd_last_odd_first_last=$1\n  local odd_first_last_odd_last_odd_first_last_odd=$1\n  local odd_first_last_odd_last_odd_first_last_odd_first=$1\n  local odd_first_last_odd_last_odd_first_last_odd_first_last=$1\n  local odd_first_last_odd_last_odd_first_last_odd_first_last_odd_first_last_odd=$1\n  local odd_first_last_odd_last_odd_first_last_odd_first_last_odd_first_last_odd_first=$1\n  local odd_first_last_odd_last_odd_first_last_odd_first_last_odd_first_last_odd_first_last=$1\n  local odd_first_last_odd_last_odd_first_last_odd_first_last_odd_first_last"], ["# <func> # Shell\n#!/bin/bash\n# You are given a positive integer n. You have to create an integer array a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# >>> $(get_max_triples \"5\")\n# \"1\"\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is (1, 7, 13).\n#\n# $1 is an integer\nget_max_triples() {\n  local a=1\n  local max_triples=0\n  for i=1,${#a} do\n    for j=1,${#a} do\n      for k=1,${#a} do\n        if a[i] + a[j] + a[k] == ${#a} * ${#a} * ${#a} then\n          max_triples=$((max_triples + 1))\n        fi\n      od\n    od\n  od\n  return max_triples"], ["# <func> # Shell\n#!/bin/bash\n# There are eight planets in our solar system: the closerst to the Sun \n# is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n# Uranus, Neptune.\n# Write a function that takes two planet names as strings planet1 and planet2. \n# The function should return a list containing all planets whose orbits are \n# located between the orbit of planet1 and the orbit of planet2, sorted by \n# the proximity to the sun. \n# The function should return an empty list if planet1 or planet2\n# are not correct planet names. \n# Examples\n# >>> $(bf \"Jupiter\" \"Neptune\")\n# ['\"Saturn\"', '\"Uranus\"']\n# >>> $(bf \"Earth\" \"Mercury\")\n# \"Venus\"\n# >>> $(bf \"Mercury\" \"Uranus\")\n# ['\"Venus\"', '\"Earth\"', '\"Mars\"', '\"Jupiter\"', '\"Saturn\"']\n#\n# $1 is a string\n# $2 is a string\nbf() {\n  local planet1 planet2\n  read -r $1 $2\n  if [[ $1 == $2 ]]; then\n    return\n  fi\n  local planets\n  read -r -d '' planets\n  planets=( \"${planets//,/ }\" )\n  planets=( \"${planets//,/ }\" )\n  planets=( \"${planets//,/ }\" )\n  planets=( \"${planets//,/ }\" )\n  planets=( \"${planets//,/ }\" )\n  planets=( \"${planets//,/ }\" )\n  planets=( \"${planets//,/ }\" )\n  planets=( \"${planets//,/ }\" )\n  planets=( \"${planets//,/ }\" )\n  planets=( \"${planets//,/ }\" )\n  planets=( \"${planets//,/ }\" )\n  planets=( \"${planets//,/ }\" )\n  planets=( \"${planets//,/ }\" )\n  plan"], ["# <func> # Shell\n#!/bin/bash\n# Write a function that accepts a list of strings as a parameter,\n# deletes the strings that have odd lengths from it,\n# and returns the resulted list with a sorted order,\n# The list is always a list of strings and never an array of numbers,\n# and it may contain duplicates.\n# The order of the list should be ascending by length of each word, and you\n# should return the list sorted by that rule.\n# If two words have the same length, sort the list alphabetically.\n# The function should return a list of strings in sorted order.\n# You may assume that all words will have the same length.\n# For example:\n# >>> $(list_sort \"aa a aaa\")\n# ['\"aa\"']\n# >>> $(list_sort \"ab a aaa cd\")\n# ['\"ab\"', '\"cd\"']\n#\n# $1 is a space-separated list\nsorted_list_sum() {\n  local word_list=$1\n  local sorted_list=$1\n  local sorted_list_length=$1\n  local sorted_list_length_sum=$1\n  local sorted_list_length_sum_sorted=$1\n  local sorted_list_length_sum_sorted_sorted=$1\n  local sorted_list_length_sum_sorted_length=$1\n  local sorted_list_length_sum_sorted_length_sorted=$1\n  local sorted_list_length_sum_sorted_length_sum=$1\n  local sorted_list_length_sum_sorted_length_sum_sorted=$1\n  local sorted_list_length_sum_sorted_length_sum_sorted_sorted=$1\n  local sorted_list_length_sum_sorted_length_sum_sorted_length=$1\n  local sorted_list_length_sum_sorted_length_sum_sorted_length_sorted=$1\n  local sorted_list_length_sum_sorted_length_sum_sorted_length_sorted_sorted=$1\n  local sorted_list_length_sum_sorted_length_sum_sorted_length_sorted_sorted_sorted_sorted=$1\n  local sorted_list_length_sum_sorted_length_sum_sorted_length_sorted_sorted"], ["# <func> # Shell\n#!/bin/bash\n# A simple program which should return the value of x if n is \n# a prime number and should return the value of y otherwise.\n# Examples:\n# >>> $(x_or_y \"7\" \"34\" \"12\")\n# \"34\"\n# >>> $(x_or_y \"15\" \"8\" \"5\")\n# \"5\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nx_or_y() {\n    if [ $# -eq 0 ]; then\n        echo \"Usage: $(x_or_y \"n\" \"y\" \"x\")\"\n        exit 1\n    fi\n    if [ $# -eq 1 ]; then\n        echo \"Usage: $(x_or_y \"n\" \"y\" \"x\")\"\n        exit 1\n    fi\n    if [ $# -eq 2 ]; then\n        echo \"Usage: $(x_or_y \"n\" \"y\" \"x\")\"\n        exit 1\n    fi\n    if [ $# -eq 3 ]; then\n        echo \"Usage: $(x_or_y \"n\" \"y\" \"x\")\"\n        exit 1\n    fi\n    if [ $# -eq 4 ]; then\n        echo \"Usage: $(x_or_y \"n\" \"y\" \"x\")\"\n        exit 1\n    fi\n    if [ $# -eq 5 ]; then\n        echo \"Usage: $(x_or_y \"n\" \"y\" \"x\")\"\n        exit 1\n    fi\n    if [ $# -eq 6 ]; then\n        echo \"Usage: $(x_or_y \"n\" \"y\" \"x\")\"\n        exit 1\n    fi\n    if [ $# -eq 7 ]; then\n        echo \"Usage: $(x_or_y \"n\" \"y\" \"x\")\"\n        exit 1\n    fi\n    if [ $# -eq 8 ]; then\n        echo \"Usage: $(x_or_y \"n\" \"y\" \"x\")\"\n        exit 1\n    fi\n    if ["], ["# <func> # Shell\n#!/bin/bash\n# Given a list of numbers, return the sum of squares of the numbers\n# in the list that are odd. Ignore numbers that are negative or not integers.\n# >>> $(double_the_difference \"1 3 2 0\")\n# \"10\"\n# >>> $(double_the_difference \"-1 -2 0\")\n# \"0\"\n# >>> $(double_the_difference \"9 -2\")\n# \"81\"\n# >>> $(double_the_difference \"0\")\n# \"0\"\n# If the input list is empty, return 0.\n#\n# $1 is a space-separated list\ndouble_the_difference() {\n  local nums=$1\n  local sum=0\n  for num in $nums; do\n    if [ $num -eq 0 ]; then\n      continue\n    fi\n    if [ $num -ge 0 ]; then\n      sum=$((sum + $num * $num))\n    fi\n  done\n  return $sum"], ["# <func> # Shell\n#!/bin/bash\n# I think we all remember that feeling when the result of some long-awaited\n# event is finally known. The feelings and thoughts you have at that moment are\n# definitely worth noting down and comparing.\n# Your task is to determine if a person correctly guessed the results of a number of matches.\n# You are given two arrays of scores and guesses of equal length, where each index shows a match. \n# Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n# the value is 0, and if not, the value is the absolute difference between the guess and the score.\n# example:\n# >>> $(compare \"1 2 3 4 5 1\" \"1 2 3 4 2 -2\")\n# ['\"0\"', '\"0\"', '\"0\"', '\"0\"', '\"3\"', '\"3\"']\n# >>> $(compare \"0 5 0 0 0 4\" \"4 1 1 0 0 -2\")\n# ['\"4\"', '\"4\"', '\"1\"', '\"0\"', '\"0\"', '\"6\"']\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ncompare() {\n    local a b\n    a=split $1 $2\n    b=split $2 $1\n    for i in \"${!a[@]}\"; do\n        if [[ $a[i] -gt $b[i] ]] || [[ $a[i] -lt $b[i] ]] || [[ $a[i] -eq $b[i] ]]\n        then\n            return \"$a[i]\"\n        fi\n    done\n    return 0"], ["# <func> # Shell\n#!/bin/bash\n# You will be given the name of a class (a string) and a list of extensions.\n# The extensions are to be used to load additional classes to the class. The\n# strength of the extension is as follows: Let CAP be the number of the uppercase\n# letters in the extension's name, and let SM be the number of lowercase letters \n# in the extension's name, the strength is given by the fraction CAP - SM. \n# You should find the strongest extension and return a string in this \n# format: ClassName.StrongestExtensionName.\n# If there are two or more extensions with the same strength, you should\n# choose the one that comes first in the list.\n# For example, if you are given \"Slices\" as the class and a list of the\n# extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n# return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n# (its strength is -1).\n# Example:\n# >>> $(Strongest_Extension \"my_class\" \"AA Be CC\")\n# \"my_class.AA\"\n#\n# $1 is a string\n# $2 is a space-separated list\nStrongest_Extension() {\n  local class_name=$1\n  local extensions=$2\n  local extension_strength=$(echo $class_name | awk '{print $2}')\n  local extension_strength_list=$2\n  local extension_strength_list_length=$#extension_strength_list\n  local extension_strength_list_str=$extension_strength_list\n  local extension_strength_list_str_length=$#extension_strength_list_str\n  local extension_strength_list_str_list=$extension_strength_list_str\n  local extension_strength_list_str_list_length=$#extension_strength_list_str_list\n  local extension_strength_list_str_list_str=$extension_strength_list_str_list\n  local extension_strength_"], ["# <func> # Shell\n#!/bin/bash\n# You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n# >>> $(cycpattern_check \"abcd\" \"abd\")\n# \"false\"\n# >>> $(cycpattern_check \"hello\" \"ell\")\n# \"true\"\n# >>> $(cycpattern_check \"whassup\" \"psus\")\n# \"false\"\n# >>> $(cycpattern_check \"abab\" \"baa\")\n# \"true\"\n# >>> $(cycpattern_check \"efef\" \"eeff\")\n# \"false\"\n# >>> $(cycpattern_check \"himenss\" \"simen\")\n# \"true\"\n#\n# $1 is a string\n# $2 is a string\ncycpattern_check() {\n  local word1=\"$1\"\n  local word2=\"$2\"\n  local rotations=0\n  local rotated_word1=\"$word1\"\n  local rotated_word2=\"$word2\"\n  local rotated_word1_rotations=0\n  local rotated_word2_rotations=0\n  local rotated_word1_rotated_word2_rotations=0\n  local rotated_word2_rotated_word1_rotations=0\n  local rotated_word1_rotated_word2_rotations_rotated_word1_rotated_word2_rotations=0\n  local rotated_word2_rotated_word1_rotations_rotated_word2_rotations=0\n  local rotated_word1_rotated_word2_rotations_rotated_word1_rotated_word2_rotations_rotated_word1_rotated_word2_rotations=0\n  local rotated_word2_rotated_word1_rotations_rotated_word2_rotations=0\n  local rotated_word1_rotated_word2_rotations_rotated_word1_rotated_word2_rotations_rotated_word1_rotated_word2_rotations_rotated_word1_rotated_word2_rotations=0\n  local rot"], ["# <func> # Shell\n#!/bin/bash\n# Given an integer. return a list that has the number of even and odd digits respectively.\n# Example:\n# >>> $(even_odd_count \"-12\")\n# ['\"1\"', '\"1\"']\n# >>> $(even_odd_count \"123\")\n# ['\"1\"', '\"2\"']\n#\n# $1 is an integer\neven_odd_count() {\n    # Get the number of digits\n    num_digits=$(echo \"$1\" | tr -d ' ' | tr -d '\\n' | tr -d '0' | tr -d '1')\n    # Get the number of even and odd digits\n    even_odd_count=$(echo \"$1\" | tr -d ' ' | tr -d '\\n' | tr -d '0' | tr -d '1')\n    # Return the list\n    return [ \"$num_digits\" \" \"$even_odd_count ]"], ["# <func> # Shell\n#!/bin/bash\n# Given a positive integer, obtain its roman numeral equivalent as a string,\n# and return it in lowercase.\n# Restrictions: 1 <= num <= 1000\n# Examples:\n# >>> $(int_to_mini_roman \"19\")\n# \"xix\"\n# >>> $(int_to_mini_roman \"152\")\n# \"clii\"\n# >>> $(int_to_mini_roman \"426\")\n# \"cdxxvi\"\n#\n# $1 is an integer\nint_to_mini_roman() {\n  local num=$1\n  local mini_roman=\"\"\n  local roman=\"\"\n  if [ \"$num\" -gt 0 ]; then\n    for ((i=1; i<=1000; i++)); do\n      if [ \"$num\" -eq $i ]; then\n        roman=$(echo \"$num\" | sed 's/x/m/g')\n        break\n      fi\n    done\n    if [ \"$num\" -eq 0 ]; then\n      mini_roman=$(echo \"$num\" | sed 's/x/m/g')\n      break\n    fi\n    if [ \"$num\" -eq 1 ]; then\n      mini_roman=$(echo \"$num\" | sed 's/x/m/g')\n      break\n    fi\n    if [ \"$num\" -eq 4 ]; then\n      mini_roman=$(echo \"$num\" | sed 's/x/m/g')\n      break\n    fi\n    if [ \"$num\" -eq 5 ]; then\n      mini_roman=$(echo \"$num\" | sed 's/x/m/g')\n      break\n    fi\n    if [ \"$num\" -eq 9 ]; then\n      mini_roman=$(echo \"$num\" | sed 's/x/m/g')\n      break\n    fi\n    if [ \"$num\" -eq 10 ]; then\n      mini_roman=$(echo \"$num\" | sed 's/x/m/g')\n      break\n    fi\n    if [ \"$num\" -eq 40 ]; then\n      mini_"], ["# <func> # Shell\n#!/bin/bash\n# Given the lengths of the three sides of a triangle. Return true if the three\n# sides form a right-angled triangle, false otherwise.\n# A right-angled triangle is a triangle in which one angle is right angle or \n# 90 degree.\n# Example:\n# >>> $(right_angle_triangle \"3\" \"4\" \"5\")\n# \"true\"\n# >>> $(right_angle_triangle \"1\" \"2\" \"3\")\n# \"false\"\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\nright_angle_triangle() {\n    if [ $# -ne 3 ]; then\n        echo \"Usage: $0 $1 $2\"\n        exit 1\n    fi\n    a=$1\n    b=$2\n    c=$3\n    if [ $a -lt $b -lt $c ]; then\n        echo \"false\"\n        exit 1\n    fi\n    if [ $a -gt $b -gt $c ]; then\n        echo \"true\"\n        exit 1\n    fi\n    if [ $a -gt $c -gt $b ]; then\n        echo \"true\"\n        exit 1\n    fi\n    if [ $a -gt $b -gt $c ]; then\n        echo \"true\"\n        exit 1\n    fi\n    if [ $a -gt $b -gt $c ]; then\n        echo \"true\"\n        exit 1\n    fi\n    if [ $a -gt $b -gt $c ]; then\n        echo \"true\"\n        exit 1\n    fi\n    if [ $a -gt $b -gt $c ]; then\n        echo \"true\"\n        exit 1\n    fi\n    if [ $a -gt $b -gt $c ]; then\n        echo \"true\"\n        exit 1\n    fi\n    if [ $a -gt $b -gt $c ]; then\n        echo \"true\"\n        exit 1\n    fi\n    if [ $a -gt $b -gt $c ]; then\n        echo \"true\"\n        exit 1\n    fi\n    if [ $a -gt $b"], ["# <func> # Shell\n#!/bin/bash\n# Write a function that accepts a list of strings.\n# The list contains different words. Return the word with maximum number\n# of unique characters. If multiple strings have maximum number of unique\n# characters, return the one which comes first in lexicographical order.\n# >>> $(find_max \"name of string\")\n# \"string\"\n# >>> $(find_max \"name enam game\")\n# \"enam\"\n# >>> $(find_max \"aaaaaaa bb cc\")\n# \"aaaaaaa\"\n#\n# $1 is a space-separated list\nfind_max() {\n  local string_list=$1\n  local max_char_count=0\n  local max_word= \"\"\n  for word in \"${string_list[@]}\"; do\n    local char_count=$(echo $word | tr -d ' ')\n    if [ $char_count -gt $max_char_count ]; then\n      max_char_count=$char_count\n      max_word=$word\n    fi\n  done\n  return $max_word"], ["# <func> # Shell\n#!/bin/bash\n# You're a hungry rabbit, and you already have eaten a certain number of carrots,\n# but now you need to eat more carrots to complete the day's meals.\n# you should return an array of [ total number of eaten carrots after your meals,\n# the number of carrots left after your meals ]\n# if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n# >>> $(eat \"5\" \"6\" \"10\")\n# ['\"11\"', '\"4\"']\n# >>> $(eat \"4\" \"8\" \"9\")\n# ['\"12\"', '\"1\"']\n# >>> $(eat \"1\" \"10\" \"10\")\n# ['\"11\"', '\"0\"']\n# >>> $(eat \"2\" \"11\" \"5\")\n# ['\"7\"', '\"0\"']\n# Variables:\n# @number : integer\n# the number of carrots that you have eaten.\n# @need : integer\n# the number of carrots that you need to eat.\n# @remaining : integer\n# the number of remaining carrots thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n# * 0 <= remaining <= 1000\n# Have fun :)\n#\n# $1 is an integer\n# $2 is an integer\n# $3 is an integer\neat() {\n    local number need remaining\n    read -r -d '' number\n    read -r -d '' need\n    read -r -d '' remaining\n    if [ $number -gt $need ] ; then\n        read -r -d '' carrot\n        read -r -d '' remaining\n        if [ $remaining -gt $carrot ] ; then\n            read -r -d '' carrot\n            read -r -d '' remaining\n            if [ $remaining -gt $carrot ] ; then\n                read -r -d '' carrot\n                read -r"], ["# <func> # Shell\n#!/bin/bash\n# Given two lists operator, and operand. The first list has basic algebra operations, and \n# the second list is a list of integers. Use the two given lists to build the algebric \n# expression and return the evaluation of this expression.\n# The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+', '*', '-']\n# array = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n# Note:\n# The length of operator list is equal to the length of operand list minus one.\n# Operand is a list of of non-negative integers.\n# Operator list has at least one operator, and operand list has at least two operands.\n#\n# $1 is a space-separated list\n# $2 is a space-separated list\ndo_algebra() {\n    # Get the input from the user\n    # The input is a space-separated list\n    # The first element is the operator\n    # The second element is the operand\n    # The third element is the result\n    # The fourth element is the result\n    # The fifth element is the result\n    # The sixth element is the result\n    # The seventh element is the result\n    # The eighth element is the result\n    # The ninth element is the result\n    # The tenth element is the result\n    # The eleventh element is the result\n    # The twelfth element is the result\n    # The thirteenth element is the result\n    # The fourteenth element is the result\n    # The fifteenth element is the result\n    # The sixteenth element is the result\n    # The seventeenth element is the result\n    # The eighteenth element is the result\n    # The nineteenth element is the result\n    # The twentieth element is the result\n    # The twenty-first element is the result\n    # The twenty-second element is the result\n    # The twenty"], ["# <func> # Shell\n#!/bin/bash\n# You are given a string s.\n# if s[i] is a letter, reverse its case from lower to upper or vise versa, \n# otherwise keep it as it is.\n# If the string contains no letters, reverse the string.\n# The function should return the resulted string.\n# Examples\n# >>> $(solve \"1234\")\n# \"4321\"\n# >>> $(solve \"ab\")\n# \"AB\"\n# >>> $(solve \"#a@C\")\n# \"#A@c\"\n#\n# $1 is a string\nsolve() {\n  # Get the string from the command line\n  string=$1\n  # Get the length of the string\n  length=$((length=$#string))\n  # Get the length of the string\n  case $length in\n    *a*)\n      # If the length is 1, reverse the string\n      # and return it\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n      # else, return the string\n"], ["# <func> # Shell\n#!/bin/bash\n# Given a string 'text', return its md5 hash equivalent string.\n# If 'text' is an empty string, return None.\n# >>> $(string_to_md5 \"Hello world\")\n# \"3e25960a79dbc69b674cd4ec67a72c62\"\n#\n# $1 is a string\nstring_to_md5() {\n  local text=$1\n  if [[ -z \"$text\" ]]; then\n    return\n  fi\n  local hash=$(( 1000 * $text ))\n  echo \"$hash\""], ["# <func> # Shell\n#!/bin/bash\n# Given two positive integers a and b, return the even digits between a\n# and b, in ascending order.\n# For example:\n# >>> $(generate_integers \"2\" \"8\")\n# ['\"2\"', '\"4\"', '\"6\"', '\"8\"']\n# >>> $(generate_integers \"8\" \"2\")\n# ['\"2\"', '\"4\"', '\"6\"', '\"8\"']\n# >>> $(generate_integers \"10\" \"14\")\n# []\n#\n# $1 is an integer\n# $2 is an integer\ngenerate_integers() {\n  local a b\n  a=1\n  b=10\n  while [[ $a -lt $b ]]\n  do\n    local even_digits=$(echo \"$a\" | sed 's/0//g' | sed 's/1//g' | sed 's/2//g' | sed 's/3//g' | sed 's/4//g' | sed 's/5//g' | sed 's/6//g' | sed 's/7//g' | sed 's/8//g' | sed 's/9//g' | sed 's/0//g' | sed 's/1//g' | sed 's/2//g' | sed 's/3//g' | sed 's/4//g' | sed 's/5//g' | sed 's/6//g' | sed 's/7//g' | sed 's/8//g' | sed 's/9//g' | sed 's/0//g' | sed 's/1//g' | sed 's/2//g' | sed 's/3//g' | sed 's/4//g' | sed 's/5//g' | sed 's/6//g' | sed 's/7//g' | sed 's/8//g' | sed 's/9//g' | sed 's/0//g' | sed 's/1//g' | sed 's/2//g' | sed 's/3//g' | sed 's/4//g' | sed"]]