{"task_id": "Mbpp/601", "completion": "# Python\n# Write a python function to find the first repeated character in a given string.\ndef first_repeated_char(str1):\n    return str1[0] "}
{"task_id": "Mbpp/602", "completion": "# Python\n# Write a function to get all lucid numbers smaller than or equal to a given integer.\ndef get_ludic(n):\n    return [i for i in range(1, n + 1) if i % 2 == 0] "}
{"task_id": "Mbpp/603", "completion": "# Python\n# Write a function to reverse words seperated by spaces in a given string.\ndef reverse_words(s):\n    return''.join(word.lower() for word in s.split()) "}
{"task_id": "Mbpp/604", "completion": "# Python\n# Write a function to check if the given integer is a prime number.\ndef prime_num(num):\n    if num <= 1:\n        return False\n    for I in range(2, int(num ** 0.5) + 1):\n        if num % I == 0:\n            return False\n    return True\n\n# Test the function\nprint(prime_num(10)) "}
{"task_id": "Mbpp/605", "completion": "# Python\n# Write a function to convert degrees to radians.\ndef radian_degree(degree):\n    return degree * 180.0 / math.pi "}
{"task_id": "Mbpp/606", "completion": "# Python\n# Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\ndef find_literals(text, pattern):\n    start = 0\n    end = 0\n    for i in range(len(text)):\n        if text[i] == pattern[0]:\n            start = i\n            end = i\n            break\n    return text[start:end]\n "}
{"task_id": "Mbpp/607", "completion": "<func># Python\n# Write a python function to find nth bell number.\ndef bell_Number(n):\n    if n == 1:\n        return 1\n    else:\n        return n * bell_Number(n-1)\n\n# Test function\ndef test_bell_Number():\n    assert bell_Number(1) == 1\n    assert bell_Number(2) == 2\n    assert bell_Number(3) == 3\n    assert bell_Number(4) == 4\n    assert bell_Number(5) == 5\n    assert bell_Number(6) == 6\n    assert bell_Number(7) == 7\n    assert bell_Number(8) == 8\n    assert bell_Number(9) == 9\n    assert bell_Number(10) == 10\n    assert bell_Number(11) == 11\n    assert bell_Number(12) == 12\n    assert bell_Number(13) == 13\n    assert bell_Number(14) == 14\n    assert bell_Number(15) == 15\n    assert bell_Number(16) == 16\n    assert bell_Number(17) == 17\n    assert bell_Number(18) == 18\n    assert bell_Number(19) == 19\n    assert bell_Number(20) == 20\n    assert bell_Number(21) == 21\n    assert bell_Number(22) == 22\n    assert bell_Number(23) == 23\n    assert bell_Number(24) == 24\n    assert bell_Number(25) == 25\n    assert bell_Number(26) == 26\n    assert bell_Number(27) == 27\n    assert bell_Number(28) == 28\n    assert bell_Number(29) == 29\n    assert bell_Number(30) == 30\n    assert bell_Number(31) == 31\n    assert bell_Number(32) == 32\n    assert bell_Number(33) == 33\n    assert bell_Number(34) == 34\n    assert bell_Number(35) == 35\n    assert bell_Number(36) == 36\n    assert bell_Number(37) == 37\n    assert bell_Number(38) == 38\n    assert bell_Number(39) == 39\n    assert bell_Number(40) == 40\n    assert bell_Number(41) == 41\n    assert bell_Number(42) == 42\n    assert bell_Number(43) == 43\n    assert bell_Number(44) == 44\n    assert bell_Number(45) == 45\n    assert bell_Number(46) == 46\n    assert bell_Number(47) == 47\n    assert bell_Number(48) == 48\n    assert bell_Number(49) == 49\n    assert bell_Number(50) == 50\n    assert bell_Number(51) == 51\n    assert bell_Number(52) == 52\n    assert bell_Number(53) == 53\n    assert bell_Number(54) == 54\n    assert bell_Number(55) == 55\n    assert bell_Number(56) == 56\n    assert bell_Number(57) == 57\n    assert bell_Number(58) == 58\n    assert bell_Number(59) == 59\n    assert bell_Number(60) == 60\n    assert bell_Number(61) == 61\n    assert bell_Number(62) == 62\n    assert bell_Number(63) == 63\n    assert bell_Number(64) == 64\n    assert bell_Number(65) == 65\n    assert bell_Number(66) == 66\n    assert bell_Number(67) == 67\n    assert bell_Number(68) == 68\n    assert bell_Number(69) == 69\n    assert bell_Number(70) == 70\n    assert bell_Number(71) == 71\n    assert bell_"}
{"task_id": "Mbpp/608", "completion": "# Python\n# Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\ndef remove_kth_element(list1, L):\n    return [list1[i] for i in range(len(list1)) if i!= L] "}
{"task_id": "Mbpp/609", "completion": "# Python\n# Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\ndef max_of_nth(test_list, N):\n    return max(test_list[i][N] for i in range(len(test_list))) "}
{"task_id": "Mbpp/610", "completion": "# Python\n# Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\ndef merge(lst):\n    return [list(x) for x in zip(*lst)] "}
{"task_id": "Mbpp/611", "completion": "# Python\n# Write a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef cummulative_sum(test_list):\n    cumulative_sum = 0\n    for value in test_list:\n        cumulative_sum += value\n    return cumulative_sum\n\n\n# Test the function\nassert cummulative_sum([1, 2, 3, 4, 5]) == 15\nassert cummulative_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55 "}
{"task_id": "Mbpp/612", "completion": "# Python\n# Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\ndef average_tuple(nums):\n    return [nums[0][0] + nums[1][0] for nums in zip(*nums)] "}
{"task_id": "Mbpp/613", "completion": "# Python\n# Write a function which takes two tuples of the same length and performs the element wise modulo.\ndef tuple_modulo(test_tup1, test_tup2):\n    return tuple(map(lambda x: x % 2, test_tup1) + map(lambda x: x % 2, test_tup2))) "}
{"task_id": "Mbpp/614", "completion": "# Python\n# Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef min_Jumps(steps, d):\n    return steps - d + 1 "}
{"task_id": "Mbpp/615", "completion": "# Python\n# Write a function to divide two lists element wise.\ndef div_list(nums1,nums2):\n    return [nums1[i] / nums2[i] for i in range(len(nums1))] "}
{"task_id": "Mbpp/616", "completion": "# Python\n# Write a function to move all the numbers to the end of the given string.\ndef move_num(test_str):\n    return test_str.replace('1', '2') "}
{"task_id": "Mbpp/617", "completion": "# Python\n# Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\ndef largest_subset(a):\n    return max(a) - min(a) "}
{"task_id": "Mbpp/618", "completion": "<func># Python\n# Write a function to find the median of two sorted lists of same size.\ndef get_median(arr1, arr2, n):\n    if len(arr1) < n:\n        return get_median(arr1, arr2, n)\n    elif len(arr2) < n:\n        return get_median(arr1, arr2, n)\n    else:\n        return (arr1[n // 2] + arr2[n // 2]) // 2\n\n# Test function\ndef test_get_median():\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [2, 4, 6, 8, 10]\n    n = len(arr1)\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get_median(arr1, arr2, n) == 4\n    assert get"}
{"task_id": "Mbpp/619", "completion": "# Python\n# Write a function to compute the n-th power of each number in a list.\ndef nth_nums(nums,n):\n    return [pow(num,n) for num in nums] "}
{"task_id": "Mbpp/620", "completion": "# Python\n# Write a python function to convert a given string to uppercase.\ndef is_upper(string):\n    return string.isupper()\n\n\n# Test the function.\nassert is_upper('hello') == True\nassert is_upper('HELLO') == True\nassert is_upper('hello') == False\nassert is_upper('HELLO') == False "}
{"task_id": "Mbpp/621", "completion": "# Python\n# Write a python function to interchange the first and last element in a given list.\ndef swap_List(newList):\n    return [newList[0], newList[len(newList) - 1]] "}
{"task_id": "Mbpp/622", "completion": "# Python\n# Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\ndef triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r ): "}
{"task_id": "Mbpp/623", "completion": "# Python\n# Write a python function to find the smallest missing number from a sorted list of natural numbers.\ndef find_First_Missing(array,start=0,end=None):\n    if end is None:\n        end = len(array)\n    if start < 0:\n        start = 0\n    if end > len(array):\n        end = len(array)\n    if end - start == 1:\n        return array[start]\n    mid = (start + end) // 2\n    if array[mid] == array[mid-1]:\n        return array[mid]\n    if array[mid] < array[mid-1]:\n        return find_First_Missing(array,mid+1,end)\n    return find_First_Missing(array,start,mid-1)\n\n# Test the function\nif __name__ == '__main__':\n    print(find_First_Missing([1,2,3,4,5],start=1,end=5)) "}
{"task_id": "Mbpp/624", "completion": "# Python\n# Write a function to replace all spaces in the given string with '%20'.\ndef replace_spaces(string):\n    return string.replace(' ', '%20') "}
{"task_id": "Mbpp/625", "completion": "# Python\n# Write a python function to find even numbers from a list of numbers.\ndef Split(list):\n    return [x for x in list if x % 2 == 0] "}
{"task_id": "Mbpp/626", "completion": "# Python\n# Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef adjac(ele, sub = []):\n    if sub:\n        return [ele, adjac(ele, sub)]\n    return [ele]\n "}
{"task_id": "Mbpp/627", "completion": "# Python\n# Write a function to replace whitespaces with an underscore and vice versa in a given string.\ndef replace_spaces(text):\n    return text.replace(' ', '_').replace('_','') "}
{"task_id": "Mbpp/628", "completion": "# Python\n# Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list):\n    return [num for num in num_list if num!= 0] "}
{"task_id": "Mbpp/629", "completion": "# Python\n# Write a python function to find the sum of xor of all pairs of numbers in the given list.\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans ): "}
{"task_id": "Mbpp/630", "completion": "# Python\n# Write a function to sort the given list.\ndef heap_sort(iterable):\n    \"\"\"\n    Sort the given list using the heap sort algorithm.\n\n    :param iterable: The list to be sorted.\n    :return: The sorted list.\n    \"\"\"\n    n = len(iterable)\n    heap = []\n    for I in range(n):\n        heap.append(iterable[i])\n    for I in range(n // 2):\n        heapq.heappush(heap, heap.pop())\n    return heap\n "}
{"task_id": "Mbpp/631", "completion": "# Python\n# Write a function to check whether the given amount has no profit and no loss\ndef noprofit_noloss(actual_cost,sale_amount):\n    if actual_cost > sale_amount:\n        return False\n    if actual_cost < sale_amount:\n        return False\n    return True\n\n\n# Test function\nif __name__ == '__main__':\n    print(noprofit_noloss(100, 100)) "}
{"task_id": "Mbpp/632", "completion": "# Python\n# Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\ndef wind_chill(v,t):\n    return round(v*1.8 + 32) "}
{"task_id": "Mbpp/633", "completion": "# Python\n# Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names):\n    return [name for name in sample_names if name.lower() not in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']] "}
{"task_id": "Mbpp/634", "completion": "# Python\n# Write a function to remove the parenthesis and what is inbetween them from a string.\ndef remove_parenthesis(items):\n    return ''.join(item for item in items if item.startswith('(') and item.endswith(')')) "}
{"task_id": "Mbpp/635", "completion": "<func># Python\n# Write a function to find the nth nonagonal number.\ndef is_nonagonal(n):\n    return n % 2 == 0\n\n# Test the function.\nassert is_nonagonal(0) == True\nassert is_nonagonal(1) == True\nassert is_nonagonal(2) == True\nassert is_nonagonal(3) == False\nassert is_nonagonal(4) == False\nassert is_nonagonal(5) == True\nassert is_nonagonal(6) == True\nassert is_nonagonal(7) == False\nassert is_nonagonal(8) == False\nassert is_nonagonal(9) == True\nassert is_nonagonal(10) == True\nassert is_nonagonal(11) == False\nassert is_nonagonal(12) == False\nassert is_nonagonal(13) == True\nassert is_nonagonal(14) == False\nassert is_nonagonal(15) == True\nassert is_nonagonal(16) == False\nassert is_nonagonal(17) == True\nassert is_nonagonal(18) == False\nassert is_nonagonal(19) == True\nassert is_nonagonal(20) == False\nassert is_nonagonal(21) == True\nassert is_nonagonal(22) == False\nassert is_nonagonal(23) == True\nassert is_nonagonal(24) == False\nassert is_nonagonal(25) == True\nassert is_nonagonal(26) == False\nassert is_nonagonal(27) == True\nassert is_nonagonal(28) == False\nassert is_nonagonal(29) == True\nassert is_nonagonal(30) == False\nassert is_nonagonal(31) == True\nassert is_nonagonal(32) == False\nassert is_nonagonal(33) == True\nassert is_nonagonal(34) == False\nassert is_nonagonal(35) == True\nassert is_nonagonal(36) == False\nassert is_nonagonal(37) == True\nassert is_nonagonal(38) == False\nassert is_nonagonal(39) == True\nassert is_nonagonal(40) == False\nassert is_nonagonal(41) == True\nassert is_nonagonal(42) == False\nassert is_nonagonal(43) == True\nassert is_nonagonal(44) == False\nassert is_nonagonal(45) == True\nassert is_nonagonal(46) == False\nassert is_nonagonal(47) == True\nassert is_nonagonal(48) == False\nassert is_nonagonal(49) == True\nassert is_nonagonal(50) == False\nassert is_nonagonal(51) == True\nassert is_nonagonal(52) == False\nassert is_nonagonal(53) == True\nassert is_nonagonal(54) == False\nassert is_nonagonal(55) == True\nassert is_nonagonal(56) == False\nassert is_nonagonal(57) == True\nassert is_nonagonal(58) == False\nassert is_nonagonal(59) == True\nassert is_nonagonal(60) == False\nassert is_nonagonal(61) == True\nassert is_nonagonal(62) == False\nassert is_nonagonal(63) == True\nassert is_nonagonal(64) == False\nassert is_nonagonal(65) == True\nassert is_nonagonal(66) == False\nassert is_nonagonal(67) == True\nassert is_nonagonal(68) == False\nassert is_nonagonal(69) == True\nassert is_nonagonal(70) == False\nassert is_nonagonal(71) == True\nassert is_nonagonal(72) == False\nassert is_nonagonal(73) == True\nassert is_nonagonal(74) == False\nassert is_nonagonal(75) == True\nassert is_nonagonal(76) == False\nassert is_nonagonal(77) == True\nassert is"}
{"task_id": "Mbpp/636", "completion": "# Python\n# Write a function that checks if a strings contains 'z', except at the start and end of the word.\ndef text_match_wordz_middle(text):\n    return text.count('z') % 2 == 0\n\n\n# Test the function\nassert text_match_wordz_middle('z') == True\nassert text_match_wordz_middle('zz') == False\nassert text_match_wordz_middle('zzzz') == False\nassert text_match_wordz_middle('zzzzzz') == True "}
{"task_id": "Mbpp/637", "completion": "# Python\n# Write a python function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k):\n    if k == 0:\n        return input\n    else:\n        return reverse_Array_Upto_K(input[0:k], k-1) + input[k]\n\n# Testing the function\nprint(reverse_Array_Upto_K([1, 2, 3, 4, 5], 2)) "}
{"task_id": "Mbpp/638", "completion": "# Python\n# Write a function to add a dictionary to the tuple. The output should be a tuple.\ndef add_dict_to_tuple(test_tup, test_dict):\n    return test_tup + (test_dict,) "}
{"task_id": "Mbpp/639", "completion": "<func># Python\n# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\ndef maxAverageOfPath(cost):\n    n = len(cost)\n    m = len(cost[0])\n    max_path = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            max_path[i][j] = cost[i][j]\n    for i in range(n):\n        for j in range(m):\n            max_path[i][j] += max_path[i][j + 1]\n    return max_path[n - 1][m - 1] / (n * m)\n\n# Test cases\ndef test_maxAverageOfPath():\n    cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    expected = 3.0\n    assert maxAverageOfPath(cost) == expected\n\ndef test_maxAverageOfPath_invalid_input():\n    cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    expected = 0.0\n    assert maxAverageOfPath(cost) == expected\n\ndef test_maxAverageOfPath_empty_matrix():\n    cost = []\n    expected = 0.0\n    assert maxAverageOfPath(cost) == expected\n\ndef test_maxAverageOfPath_invalid_matrix():\n    cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    expected = 0.0\n    assert maxAverageOfPath(cost) == expected\n\ndef test_maxAverageOfPath_invalid_matrix_2():\n    cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    expected = 0.0\n    assert maxAverageOfPath(cost) == expected\n\ndef test_maxAverageOfPath_invalid_matrix_3():\n    cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    expected = 0.0\n    assert maxAverageOfPath(cost) == expected\n\ndef test_maxAverageOfPath_invalid_matrix_4():\n    cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    expected = 0.0\n    assert maxAverageOfPath(cost) == expected\n\ndef test_maxAverageOfPath_invalid_matrix_5():\n    cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    expected = 0.0\n    assert maxAverageOfPath(cost) == expected\n\ndef test_maxAverageOfPath_invalid_matrix_6():\n    cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    expected = 0.0\n    assert maxAverageOfPath(cost) == expected\n\ndef test_maxAverageOfPath_invalid_matrix_7():\n    cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    expected = 0.0\n    assert maxAverageOfPath(cost) == expected\n\ndef test_maxAverageOfPath_invalid_matrix_8():\n    cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    expected = 0.0\n    assert maxAverageOfPath(cost) == expected\n\ndef test_maxAverageOfPath_invalid_matrix_9():\n    cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    expected = 0.0\n    assert maxAverageOfPath(cost) == expected\n\ndef test_maxAverageOfPath_invalid_matrix_10():\n    cost = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    expected = 0.0\n    assert maxAverageOfPath(cost) == expected\n\ndef test_maxAverageOfPath_invalid_matrix_11():\n    cost = [[1, "}
{"task_id": "Mbpp/640", "completion": "# Python\n# The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\ndef filter_data(students,h,w):\n    return [student for student in students if student['height'] >= h and student['weight'] >= w] "}
{"task_id": "Mbpp/641", "completion": "# Python\n# The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count "}
{"task_id": "Mbpp/642", "completion": "# Python\n# Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power):\n    result = 0\n    for I in range(base, 0, -1):\n        result += (i ** power)\n    return result\n "}
{"task_id": "Mbpp/643", "completion": "# Python\n# Write a function to extract values between quotation marks \" \" of the given string.\ndef extract_quotation(text1):\n    return text1.split('\"')[1].split('\"')[0] "}
{"task_id": "Mbpp/644", "completion": "# Python\n# Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\ndef multiply_elements(test_tup):\n    return tuple(t * t for t in test_tup) "}
{"task_id": "Mbpp/645", "completion": "<func># Python\n# Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\ndef sum_list(lst1,lst2):\n    return lst1 + lst2\n\n# Test the function\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == 10\nassert sum_list([1,2,3], [4,5,6]) == "}
{"task_id": "Mbpp/646", "completion": "# Python\n# Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums):\n    return [num for num in nums if num not in nums[1:]] "}
{"task_id": "Mbpp/647", "completion": "# Python\n# Write a function to find the lateral surface area of a cone given radius r and the height h.\ndef lateralsurface_cone(r,h):\n    return 2*r*h\n\n# Test the function\nlateralsurface_cone(1,2) "}
{"task_id": "Mbpp/648", "completion": "# Python\n# Write a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef replace_specialchar(text):\n    return re.sub(r'[ \\.,]', ':', text) "}
{"task_id": "Mbpp/649", "completion": "# Python\n# Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(A, x):\n    for I in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n\n# Test the function\nassert find_first_occurrence([1, 2, 3, 4, 5], 3) == 2\nassert find_first_occurrence([1, 2, 3, 4, 5], 6) == -1 "}
{"task_id": "Mbpp/650", "completion": "# Python\n# Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\ndef sum_Of_Subarray_Prod(arr):\n    if len(arr) == 0:\n        return 0\n    else:\n        return sum_Of_Subarray_Prod(arr[1:]) + arr[0] * sum_Of_Subarray_Prod(arr[1:])\n\n# Test function\nprint(sum_Of_Subarray_Prod([1, 2, 3, 4, 5])) "}
{"task_id": "Mbpp/651", "completion": "# Python\n# Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\ndef set_middle_bits(n):\n    return n ^ (n >> 1) ^ (n >> 2) ^ (n >> 3) ^ (n >> 4) ^ (n >> 5) ^ (n >> 6) ^ (n >> 7) ^ (n >> 8) ^ (n >> 9) ^ (n >> 10) ^ (n >> 11) ^ (n >> 12) ^ (n >> 13) ^ (n >> 14) ^ (n >> 15)\n "}
{"task_id": "Mbpp/652", "completion": "# Python\n# Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\ndef left_insertion(a, x):\n    i = 0\n    while i < len(a) and a[i] > x:\n        i += 1\n    return i "}
{"task_id": "Mbpp/653", "completion": "# Python\n# Write a function to check whether the given string is starting with a vowel or not using regex.\ndef check_str(string):\n    return re.match(r'^[aeiouAEIOU]$', string) is not None "}
{"task_id": "Mbpp/654", "completion": "# Python\n# Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\ndef geometric_sum(n):\n    return n * (n - 1)\n\n\n# Write a function to calculate the geometric mean of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\ndef geometric_mean(n):\n    return (n ** (1 / 2))\n\n\n# Write a function to calculate the geometric mean of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\ndef geometric_mean(n):\n    return (n ** (1 / 2))\n\n\n# Write a function to calculate the geometric mean of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\ndef geometric_mean(n):\n    return (n ** (1 / 2)) "}
{"task_id": "Mbpp/655", "completion": "# Python\n# Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\ndef find_Index(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_Index(n - 1) + 1\n\n# Test function\nprint(find_Index(10)) "}
{"task_id": "Mbpp/656", "completion": "# Python\n# Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\ndef tuple_to_dict(test_tup):\n    return {tuple(t): v for t, v in zip(test_tup, range(len(test_tup)))} "}
{"task_id": "Mbpp/657", "completion": "<func># Python\n# Write a python function to check whether all the characters are same or not.\ndef all_Characters_Same(s) :\n    n = len(s)\n    for i in range(1,n) :\n        if s[i] != s[0] :\n            return False\n    return True):\n\n# Testing the function\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same(\"hello\") == True\nassert all_Characters_Same"}
{"task_id": "Mbpp/658", "completion": "# Python\n# Write a function to caluclate the area of a tetrahedron.\ndef area_tetrahedron(side):\n    return 0.5 * side * side * side\n\n\n# Write a function to calculate the volume of a tetrahedron.\ndef volume_tetrahedron(side):\n    return 0.5 * side * side * side\n\n\n# Write a function to calculate the surface area of a tetrahedron.\ndef surface_area_tetrahedron(side):\n    return 0.5 * side * side * side\n\n\n# Write a function to calculate the volume of a tetrahedron.\ndef volume_tetrahedron(side):\n    return 0.5 * side * side * side\n\n\n# Write a function to calculate the surface area of a tetrahedron.\ndef surface_area_tetrahedron(side):\n    return 0.5 * side * side * side "}
{"task_id": "Mbpp/659", "completion": "# Python\n# Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\ndef rotate_right(list, m):\n    return [item for i in range(len(list))[::-1] + [len(list) - m - 1] + range(i, len(list))[::-1]] + list[::-1] "}
{"task_id": "Mbpp/660", "completion": "# Python\n# Write a function to check if the given tuple has any none value or not.\ndef check_none(test_tup):\n    return all(test_tup[i] is None for i in range(len(test_tup))) "}
{"task_id": "Mbpp/661", "completion": "# Python\n# Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\ndef divisible_by_digits(startnum, endnum):\n    return lambda num: all(num % d == 0 for d in range(1, endnum+1))\n\n# Test the function\nprint(divisible_by_digits(1, 10)) "}
{"task_id": "Mbpp/662", "completion": "# Python\n# Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\ndef sector_area(r,a):\n    return (r**2)*(math.sin(a/2)*math.cos(a/2))\n\n\n# Test the function\nprint(sector_area(1,0)) "}
{"task_id": "Mbpp/663", "completion": "<func># Python\n# Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\ndef lcs_of_three(X, Y, Z):\n    if len(X)!= len(Y) or len(X)!= len(Z):\n        return None\n    if X == Y:\n        return X\n    if X == Z:\n        return Y\n    if Y == Z:\n        return X\n    if X[0] == Y[0] and X[1] == Y[1]:\n        return lcs_of_three(X[2:], Y[2:], Z[2:])\n    elif X[0] == Y[1] and X[1] == Z[0] and X[2] == Z[1]:\n        return lcs_of_three(X[2:], Y[2:], Z[2:])\n    elif X[0] == Y[1] and X[1] == Z[0] and X[2] == Z[1]:\n        return lcs_of_three(X[2:], Y[2:], Z[2:])\n    elif X[0] == Y[1] and X[1] == Z[0] and X[2] == Z[1]:\n        return lcs_of_three(X[2:], Y[2:], Z[2:])\n    elif X[0] == Y[1] and X[1] == Z[0] and X[2] == Z[1]:\n        return lcs_of_three(X[2:], Y[2:], Z[2:])\n    elif X[0] == Y[1] and X[1] == Z[0] and X[2] == Z[1]:\n        return lcs_of_three(X[2:], Y[2:], Z[2:])\n    elif X[0] == Y[1] and X[1] == Z[0] and X[2] == Z[1]:\n        return lcs_of_three(X[2:], Y[2:], Z[2:])\n    elif X[0] == Y[1] and X[1] == Z[0] and X[2] == Z[1]:\n        return lcs_of_three(X[2:], Y[2:], Z[2:])\n    elif X[0] == Y[1] and X[1] == Z[0] and X[2] == Z[1]:\n        return lcs_of_three(X[2:], Y[2:], Z[2:])\n    elif X[0] == Y[1] and X[1] == Z[0] and X[2] == Z[1]:\n        return lcs_of_three(X[2:], Y[2:], Z[2:])\n    elif X[0] == Y[1] and X[1] == Z[0] and X[2] == Z[1]:\n        return lcs_of_three(X[2:], Y[2:], Z[2:])\n    elif X[0] == Y[1] and X[1] == Z[0] and X[2] == Z[1]:\n        return lcs_of_three(X[2:], Y[2:], Z[2:])\n    elif X[0] == Y[1] and X[1] == Z[0] and X[2] == Z[1]:\n        return lcs_of_three(X[2:], Y[2:], Z[2:])\n    elif X[0] == Y[1] and X[1] == Z[0] and X[2] == Z[1]:\n        return lcs_of_three(X[2:], Y[2:], Z[2:])\n    elif X[0] == Y[1] and X[1] == Z[0] and X[2] == Z[1]:\n        return lcs_of_three(X[2:], Y[2:], Z[2:])\n    elif X[0] == Y[1] and X[1] == Z[0] and X[2] == Z[1]:\n        return lcs_of_three(X[2:], Y[2:], Z[2:])\n    elif X[0] == Y[1] and X[1] == Z[0] and X[2] == Z[1]:\n        return lcs_of_three(X[2:], Y[2:], Z[2:])\n    elif X[0"}
{"task_id": "Mbpp/664", "completion": "# Python\n# Write a function to put spaces between words starting with capital letters in a given string.\ndef capital_words_spaces(str1):\n    return''.join(str1.split()) "}
{"task_id": "Mbpp/665", "completion": "# Python\n# Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\ndef sort_numeric_strings(nums_str):\n    nums_str = [int(num) for num in nums_str]\n    return sorted(nums_str) "}
{"task_id": "Mbpp/666", "completion": "# Python\n# Write a function to add the given tuple to the given list.\ndef add_tuple(test_list, test_tup):\n    test_list.append(test_tup)\n    return test_list "}
{"task_id": "Mbpp/667", "completion": "# Python\n# Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\ndef check_min_heap_helper(arr, i):\n    if arr[i] > arr[arr[i].parent]:\n        return True\n    return False\n\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr) - 1) "}
{"task_id": "Mbpp/668", "completion": "<func># Python\n# Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\ndef jacobsthal_num(n):\n    return n * (n + 1) // 2\n\n\n# Test function\ndef test_jacobsthal_num():\n    assert jacobsthal_num(0) == 0\n    assert jacobsthal_num(1) == 1\n    assert jacobsthal_num(1) == 1\n    assert jacobsthal_num(2) == 1\n    assert jacobsthal_num(3) == 1\n    assert jacobsthal_num(4) == 1\n    assert jacobsthal_num(5) == 1\n    assert jacobsthal_num(6) == 1\n    assert jacobsthal_num(7) == 1\n    assert jacobsthal_num(8) == 1\n    assert jacobsthal_num(9) == 1\n    assert jacobsthal_num(10) == 1\n    assert jacobsthal_num(11) == 1\n    assert jacobsthal_num(12) == 1\n    assert jacobsthal_num(13) == 1\n    assert jacobsthal_num(14) == 1\n    assert jacobsthal_num(15) == 1\n    assert jacobsthal_num(16) == 1\n    assert jacobsthal_num(17) == 1\n    assert jacobsthal_num(18) == 1\n    assert jacobsthal_num(19) == 1\n    assert jacobsthal_num(20) == 1\n    assert jacobsthal_num(21) == 1\n    assert jacobsthal_num(22) == 1\n    assert jacobsthal_num(23) == 1\n    assert jacobsthal_num(24) == 1\n    assert jacobsthal_num(25) == 1\n    assert jacobsthal_num(26) == 1\n    assert jacobsthal_num(27) == 1\n    assert jacobsthal_num(28) == 1\n    assert jacobsthal_num(29) == 1\n    assert jacobsthal_num(30) == 1\n    assert jacobsthal_num(31) == 1\n    assert jacobsthal_num(32) == 1\n    assert jacobsthal_num(33) == 1\n    assert jacobsthal_num(34) == 1\n    assert jacobsthal_num(35) == 1\n    assert jacobsthal_num(36) == 1\n    assert jacobsthal_num(37) == 1\n    assert jacobsthal_num(38) == 1\n    assert jacobsthal_num(39) == 1\n    assert jacobsthal_num(40) == 1\n    assert jacobsthal_num(41) == 1\n    assert jacobsthal_num(42) == 1\n    assert jacobsthal_num(43) == 1\n    assert jacobsthal_num(44) == 1\n    assert jacobsthal_num(45) == 1\n    assert jacobsthal_num(46) == 1\n    assert jacobsthal_num(47) == 1\n    assert jacobsthal_num(48) == 1\n    assert jacobsthal_num(49) == 1\n    assert jacobsthal_num(50) == 1\n    assert jacobsthal_num(51) == 1\n    assert jacobsthal_num(52) == 1\n    assert jacobsthal_num(53) == 1\n    assert jacobsthal_num(54) == 1\n    assert jacobsthal_num(55) == 1\n    assert jacobsthal_num(56) == 1\n    assert jacobsthal_num(57) == 1"}
{"task_id": "Mbpp/669", "completion": "<func># Python\n# Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\ndef min_k(test_list, K):\n    return min(test_list, key=lambda x: len(x))[0]\n\n\n# Test cases\ndef test_min_k():\n    assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == (7, 8, 9)\n    assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == (7, 8, 9)\n    assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 4) == (7, 8, 9)\n    assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 5) == (7, 8, 9)\n    assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 6) == (7, 8, 9)\n    assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 7) == (7, 8, 9)\n    assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == (7, 8, 9)\n    assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 9) == (7, 8, 9)\n    assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 10) == (7, 8, 9)\n    assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 11) == (7, 8, 9)\n    assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 12) == (7, 8, 9)\n    assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 13) == (7, 8, 9)\n    assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 14) == (7, 8, 9)\n    assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 15) == (7, 8, 9)\n    assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 16) == (7, 8, 9)\n    assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 17) == (7, 8, 9)\n    assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 18) == (7, 8, 9)\n    assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 19) == (7, 8, 9)\n    assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 20) == (7, 8, 9)\n    assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 21) == (7, 8, 9)\n    assert min_k([(1, 2, 3), ("}
{"task_id": "Mbpp/670", "completion": "# Python\n# We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\ndef extract_index_list(l1, l2, l3):\n    return [i for i in range(len(l1)) if l1[i] == l2[i] and l1[i] == l3[i]] "}
{"task_id": "Mbpp/671", "completion": "# Python\n# Write a function to find the second smallest number in a list.\ndef second_smallest(numbers):\n    return numbers[1] "}
{"task_id": "Mbpp/672", "completion": "# Python\n# Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef text_match_zero_one(text):\n    return re.match(r'a\\b+b', text)\n\n\n# Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef text_match_zero_one_two(text):\n    return re.match(r'a\\b+b', text)\n\n\n# Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\ndef text_match_zero_one_three(text):\n    return re.match(r'a\\b+b', text) "}
{"task_id": "Mbpp/673", "completion": "# Python\n# Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\ndef count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i + 1]:\n            count += 1\n    return count "}
{"task_id": "Mbpp/674", "completion": "# Python\n# Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\ndef unique_sublists(list1):\n    return Counter(list1) "}
{"task_id": "Mbpp/675", "completion": "# Python\n# Write a function to check whether a given string is a decimal number with a precision of 2.\ndef is_decimal(num):\n    return num.count('.') == 2 and num.count('e') == 0 and num.count('E') == 0 "}
{"task_id": "Mbpp/676", "completion": "# Python\n# Write a python function to check whether a list of numbers contains only one distinct element or not.\ndef unique_Element(arr):\n    return len(set(arr)) == len(arr)\n\n\n# Test function\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(unique_Element(arr)) "}
{"task_id": "Mbpp/677", "completion": "# Python\n# Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\ndef check_monthnumber_number(monthnum3):\n    if monthnum3 == 1:\n        return True\n    elif monthnum3 == 2:\n        return True\n    elif monthnum3 == 3:\n        return True\n    elif monthnum3 == 4:\n        return True\n    elif monthnum3 == 5:\n        return True\n    elif monthnum3 == 6:\n        return True\n    elif monthnum3 == 7:\n        return True\n    elif monthnum3 == 8:\n        return True\n    elif monthnum3 == 9:\n        return True\n    elif monthnum3 == 10:\n        return True\n    elif monthnum3 == 11:\n        return True\n    else:\n        return False\n\n\n# Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\ndef check_monthnumber_string(monthnum3):\n    if monthnum3 == '1':\n        return True\n    elif monthnum3 == '2':\n        return True\n    elif monthnum3 == '3':\n        return True\n    elif monthnum3 == '4':\n        return True\n    elif monthnum3 == '5':\n        return True\n    elif monthnum3 == '6':\n        return True\n    elif monthnum3 == '7':\n        return True\n    elif monthnum3 == '8':\n        return True\n    elif monthnum3 == '9':\n        return True\n    elif monthnum3 == '10':\n        return True\n    elif monthnum3 == '11':\n        return True\n    else:\n        return False\n\n\n# Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\ndef check_monthnumber_int(monthnum3):\n    if monthnum3 == 1:\n        return True\n    elif monthnum3 == 2:\n        return True\n    elif monthnum3 == 3:\n        return True\n    elif monthnum3 == 4:\n        return True\n    elif monthnum3 == 5:\n        return True\n    elif monthnum3 == 6:\n        return True\n    elif monthnum3 == 7:\n        return True\n    elif monthnum3 == 8:\n        return True\n    elif monthnum3 == 9:\n        return True\n    elif monthnum3 == 10:\n        return True\n    elif monthnum3 == 11:\n        return True\n    else:\n        return False "}
{"task_id": "Mbpp/678", "completion": "# Python\n# Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\ndef find_min_diff(arr,n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] - arr[j] < min_diff:\n                min_diff = arr[i] - arr[j]\n    return min_diff\n\n# Test function\nprint(find_min_diff([1,2,3,4,5],5)) "}
{"task_id": "Mbpp/679", "completion": "# Python\n# Write a python function to count number of digits in a given string.\ndef number_ctr(str):\n    return sum(1 for c in str if c.isdigit()) "}
{"task_id": "Mbpp/680", "completion": "<func># Python\n# Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\ndef is_polite(n):\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    return is_polite(n // 2)\n\n\n# Test cases\nassert is_polite(1) == True\nassert is_polite(2) == True\nassert is_polite(3) == True\nassert is_polite(4) == True\nassert is_polite(5) == True\nassert is_polite(6) == True\nassert is_polite(7) == True\nassert is_polite(8) == True\nassert is_polite(9) == True\nassert is_polite(10) == True\nassert is_polite(11) == True\nassert is_polite(12) == True\nassert is_polite(13) == True\nassert is_polite(14) == True\nassert is_polite(15) == True\nassert is_polite(16) == True\nassert is_polite(17) == True\nassert is_polite(18) == True\nassert is_polite(19) == True\nassert is_polite(20) == True\nassert is_polite(21) == True\nassert is_polite(22) == True\nassert is_polite(23) == True\nassert is_polite(24) == True\nassert is_polite(25) == True\nassert is_polite(26) == True\nassert is_polite(27) == True\nassert is_polite(28) == True\nassert is_polite(29) == True\nassert is_polite(30) == True\nassert is_polite(31) == True\nassert is_polite(32) == True\nassert is_polite(33) == True\nassert is_polite(34) == True\nassert is_polite(35) == True\nassert is_polite(36) == True\nassert is_polite(37) == True\nassert is_polite(38) == True\nassert is_polite(39) == True\nassert is_polite(40) == True\nassert is_polite(41) == True\nassert is_polite(42) == True\nassert is_polite(43) == True\nassert is_polite(44) == True\nassert is_polite(45) == True\nassert is_polite(46) == True\nassert is_polite(47) == True\nassert is_polite(48) == True\nassert is_polite(49) == True\nassert is_polite(50) == True\nassert is_polite(51) == True\nassert is_polite(52) == True\nassert is_polite(53) == True\nassert is_polite(54) == True\nassert is_polite(55) == True\nassert is_polite(56) == True\nassert is_polite(57) == True\nassert is_polite(58) == True\nassert is_polite(59) == True\nassert is_polite(60) == True\nassert is_polite(61) == True\nassert is_polite(62) == True\nassert is_polite(63) == True\nassert is_polite(64) == True\nassert is_polite(65) == True\nassert is_polite(66) == True\nassert is_polite(67) == True\nassert is_polite(68) == True\nassert is_polite(69) == True\nassert is_polite(70) == True\nassert is_polite(71) == True\nassert is_polite(72) == True\nassert is_polite(73) == True\nassert is_polite(74) == True\nassert is_polite(75) == True\nassert is_polite(76) == True\nassert is_polite(77) == True\nassert is_polite(78) == True\nassert is_polite(79) == True\nassert is_polite(80) == True\nassert is_polite(81) == True\nassert is_polite(82) == True\nassert is"}
{"task_id": "Mbpp/681", "completion": "# Python\n# Write a function to return a list of all pairs of consecutive items in a given list.\ndef pair_wise(l1):\n    return list(zip(l1[::2], l1[1::2])) "}
{"task_id": "Mbpp/682", "completion": "# Python\n# Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\ndef get_pairs_count(arr, sum):\n    count = 0\n    for num in arr:\n        if num + sum == sum:\n            count += 1\n    return count "}
{"task_id": "Mbpp/683", "completion": "# Python\n# Write a python function to get the difference between two lists.\ndef Diff(li1,li2):\n    return li1 - li2 "}
{"task_id": "Mbpp/684", "completion": "# Python\n# Write a python function to find the sum of fourth power of first n odd natural numbers.\ndef odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm ): \n\n# Test the function\nodd_num_sum(10) "}
{"task_id": "Mbpp/685", "completion": "# Python\n# Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ndef check_expression(exp):\n    if exp == '(':\n        return True\n    elif exp == ')':\n        return False\n    else:\n        return check_expression(exp[1:]) or check_expression(exp[0])\n\n# Test function\nif __name__ == '__main__':\n    print(check_expression('(a+b)')) "}
{"task_id": "Mbpp/686", "completion": "# Python\n# Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n    return [word for word in test_str.split() if len(word) <= K] "}
{"task_id": "Mbpp/687", "completion": "# Python\n# Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\ndef occurance_substring(text,pattern):\n    return text.count(pattern) "}
{"task_id": "Mbpp/688", "completion": "# Python\n# Write a python function to check whether every odd index contains odd numbers of a given list.\ndef odd_position(nums):\n    return all(nums[i] % 2!= 0 for i in range(len(nums))) "}
{"task_id": "Mbpp/689", "completion": "# Python\n# Write a function to count those characters which have vowels as their neighbors in the given string.\ndef count_vowels(test_str):\n    count = 0\n    for char in test_str:\n        if char.isalpha() and char.lower() in 'aeiouAEIOU':\n            count += 1\n    return count "}
{"task_id": "Mbpp/690", "completion": "# Python\n# Write a python function to find the sum of non-repeated elements in a given list.\ndef find_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[i+1:]:\n            sum += arr[i]\n    return sum "}
{"task_id": "Mbpp/691", "completion": "# Python\n# Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1):\n    return [list1[i] for i in range(len(list1)) if list1[i]!= list1[i + 1]] "}
{"task_id": "Mbpp/692", "completion": "# Python\n# Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\ndef unique_sublists(list1):\n    return Counter(list1) "}
{"task_id": "Mbpp/693", "completion": "# Python\n# Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\ndef find_combinations(test_list):\n    return combinations(test_list, 2)\n\n\n# Test the function\nassert find_combinations([1, 2, 3]) == [\n    (1, 2),\n    (1, 3),\n    (2, 3),\n]\nassert find_combinations([1, 2, 3, 4]) == [\n    (1, 2, 3),\n    (1, 2, 4),\n    (1, 3, 4),\n    (2, 3, 4),\n] "}
{"task_id": "Mbpp/694", "completion": "# Python\n# Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\ndef count_divisors(n) : \n    count = 0\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \n        if (n % i == 0) : \n            if( n // i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count % 2 == 0): \n    return count % 2 == 0 "}
{"task_id": "Mbpp/695", "completion": "# Python\n# Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\ndef odd_length_sum(arr):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2!= 0:\n            count += arr[i]\n    return count\n\n\n# Test function\nprint(odd_length_sum([1, 2, 3, 4, 5])) "}
{"task_id": "Mbpp/696", "completion": "<func># Python\n# Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef rgb_to_hsv(r, g, b):\n    r, g, b = float(r), float(g), float(b)\n    h, s, v = 0, 0, 0\n    if r > g and r > b:\n        if g > b:\n            h = (g - b) / (g - r)\n            s = (b - r) / (g - r)\n            v = g\n        else:\n            h = (b - r) / (g - r)\n            s = (r - g) / (b - r)\n            v = r\n    else:\n        if b > r:\n            h = (r - b) / (b - r)\n            s = (b - r) / (g - r)\n            v = b\n        else:\n            h = (g - r) / (b - r)\n            s = (r - g) / (b - r)\n            v = g\n    return h, s, v\n\n\n# Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef hsv_to_rgb(h, s, v):\n    if s == 0:\n        return v, v, v\n    h, s, v = float(h), float(s), float(v)\n    if h < 0:\n        h += 1\n    if h > 1:\n        h -= 1\n    if h * 60 < 1:\n        h = h * 60\n    if h * 60 > 1:\n        h = h * 60\n    if h * 60 < 1:\n        h = h * 60\n    if h * 60 > 1:\n        h = h * 60\n    if h * 60 < 1:\n        h = h * 60\n    if h * 60 > 1:\n        h = h * 60\n    if h < 1:\n        h = 0\n    if h < 1:\n        h = 60\n    if h < 1:\n        h = 120\n    if h < 1:\n        h = 240\n    if h < 1:\n        h = 360\n    return (v * (1 - s)) + (v * s * (h / 60))\n\n\n# Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef rgb_to_hsv(r, g, b):\n    r, g, b = float(r), float(g), float(b)\n    h, s, v = 0, 0, 0\n    if r > g and r > b:\n        if g > b:\n            h = (g - b) / (g - r)\n            s = (b - r) / (g - r)\n            v = g\n        else:\n            h = (b - r) / (g - r)\n            s = (r - g) / (b - r)\n            v = r\n    else:\n        if b > r:\n            h = (r - b) / (b - r)\n            s = (b - r) / (g - r)\n            v = b\n        else:\n            h = (g - r) / (b - r)\n            s = (r - g) / (b - r)\n            v = g\n    return h, s, v\n\n\n# Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\ndef hsv_to_rgb(h, s, v):\n    if s == 0:\n        return v, v, v\n    h, s, v = float(h), float(s), float(v)\n    if h < 0:\n        h += 1\n    if h > 1:\n        h -= 1\n    if h * 60 < 1:\n        h = h * 60\n    if h * 60 > 1:\n        h = h * 60\n    if h"}
{"task_id": "Mbpp/697", "completion": "# Python\n# Write a function to find the product of first even and odd number of a given list.\ndef mul_even_odd(list1):\n    return sum(i * j for i in range(2) for j in range(i + 1, 2 * i + 1)) "}
{"task_id": "Mbpp/698", "completion": "# Python\n# Write a function to convert tuple string to integer tuple.\ndef tuple_str_int(test_str):\n    return tuple(map(int, test_str.split(','))) "}
{"task_id": "Mbpp/699", "completion": "# Python\n# Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x):\n    for i in range(len(a)):\n        if a[i] < x:\n            return i\n    return len(a)\n "}
{"task_id": "Mbpp/700", "completion": "# Python\n# Write a function that matches a string that has an a followed by three 'b'.\ndef text_match_three(text):\n    return text.count('b') == 3 "}
{"task_id": "Mbpp/701", "completion": "# Python\n# Write a function to create a new tuple from the given string and list.\ndef new_tuple(test_list, test_str):\n    return tuple(test_list) + (test_str,) "}
{"task_id": "Mbpp/702", "completion": "# Python\n# Write a python function to check whether every even index contains even numbers of a given list.\ndef even_position(nums):\n    return all(nums[i] % 2 == 0 for i in range(len(nums))) "}
{"task_id": "Mbpp/703", "completion": "# Python\n# Write a function to remove tuples from the given tuple.\ndef remove_nested(test_tup):\n    return tuple(tuple(x) for x in test_tup) "}
{"task_id": "Mbpp/704", "completion": "# Python\n# Write a python function to count the number of lists in a given number of lists.\ndef count_list(input_list):\n    count = 0\n    for list in input_list:\n        count += 1\n    return count "}
{"task_id": "Mbpp/705", "completion": "# Python\n# Write a python function to find the last position of an element in a sorted array.\ndef last(arr,x):\n    return sorted(arr)[-1] == x\n\n# Test the function\narr = [1,2,3,4,5,6,7,8,9]\nprint(last(arr,7)) "}
{"task_id": "Mbpp/706", "completion": "# Python\n# Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef text_starta_endb(text):\n    return text.startswith('a') and text.endswith('b')\n\n\n# Test the function\nassert text_starta_endb('a') == True\nassert text_starta_endb('ab') == True\nassert text_starta_endb('abcd') == False\nassert text_starta_endb('') == False "}
{"task_id": "Mbpp/707", "completion": "# Python\n# Write function to find the sum of all items in the given dictionary.\ndef return_sum(dict):\n    return sum(dict.values()) "}
{"task_id": "Mbpp/708", "completion": "# Python\n# Write a python function to find the sum of all odd natural numbers within the range l and r.\ndef sum_odd(n):\n    return sum(i for i in range(l, r+1) if i % 2!= 0) "}
{"task_id": "Mbpp/709", "completion": "# Python\n# Write a python function to find the sum of an array.\ndef _sum(arr):\n    return sum(arr) "}
{"task_id": "Mbpp/710", "completion": "# Python\n# Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\ndef left_rotate(n,d):\n    return (n << d) | (n >> (32 - d)) "}
{"task_id": "Mbpp/711", "completion": "# Python\n# Write a function to remove all whitespaces from a string.\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text) "}
{"task_id": "Mbpp/712", "completion": "# Python\n# Write a python function to count the number of equal numbers from three given integers.\ndef test_three_equal(x,y,z):\n    return x+y+z\n\ndef test_three_equal_2(x,y,z):\n    return x+y+z\n\ndef test_three_equal_3(x,y,z):\n    return x+y+z "}
{"task_id": "Mbpp/713", "completion": "# Python\n# Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\ndef count_rotation(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count "}
{"task_id": "Mbpp/714", "completion": "# Python\n# Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\ndef is_perfect_square(n) :\n    i = 1\n    while (i * i<= n):\n        if (n % i == 0):\n            return False\n        i += 1\n    return True\n "}
{"task_id": "Mbpp/715", "completion": "# Python\n# Write a function to check whether the product of numbers in a list is even or not.\ndef is_product_even(arr):\n    if len(arr) == 1:\n        return arr[0] % 2 == 0\n    else:\n        return (arr[0] * arr[1]) % 2 == 0\n\n# Test the function\nprint(is_product_even([1, 2, 3, 4])) "}
{"task_id": "Mbpp/716", "completion": "# Python\n# Write a function that returns the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists):\n    return max(lists, key=lambda x: sum(x)) "}
{"task_id": "Mbpp/717", "completion": "# Python\n# Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str):\n    return max(map(lambda x: len(x), test_str.upper().split())) "}
{"task_id": "Mbpp/718", "completion": "# Python\n# Write a python function to find the first odd number in a given list of numbers.\ndef first_odd(nums):\n    return nums[0] if nums[0] % 2 == 1 else nums[1] "}
{"task_id": "Mbpp/719", "completion": "# Python\n# Write a function to check if the given tuples contain the k or not.\ndef check_K(test_tup, K):\n    if len(test_tup) == K:\n        return True\n    else:\n        return False\n\n\n# Test the function\nif __name__ == '__main__':\n    test_tup = (1, 2, 3, 4, 5)\n    print(check_K(test_tup, 3)) "}
{"task_id": "Mbpp/720", "completion": "# Python\n# Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\ndef check_smaller(test_tup1, test_tup2):\n    return all(tup1[i] < tup2[i] for i in range(len(tup1))) "}
{"task_id": "Mbpp/721", "completion": "# Python\n# Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch):\n    return s.replace(ch, '') "}
{"task_id": "Mbpp/722", "completion": "# Python\n# Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n    return M.sort(key=lambda x: sum(x)) "}
{"task_id": "Mbpp/723", "completion": "# Python\n# Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ): "}
{"task_id": "Mbpp/724", "completion": "# Python\n# Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\ndef text_lowercase_underscore(text):\n    return text.count('_') > 0 and text.count('_') == text.count('_')\n\n\n# Test the function\nassert text_lowercase_underscore('hello_world') == True\nassert text_lowercase_underscore('hello_world_') == False "}
{"task_id": "Mbpp/725", "completion": "# Python\n# Write a function that returns the perimeter of a square given its side length as input.\ndef square_perimeter(a):\n    return 4 * a "}
{"task_id": "Mbpp/726", "completion": "# Python\n# Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string):\n    return [char for char in string if char not in string2] "}
{"task_id": "Mbpp/727", "completion": "# Python\n# Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\n    return arraynums.count(1) == len(arraynums)\n\n\ndef test_duplicate_2(arraynums):\n    return arraynums.count(1) == len(arraynums)\n\n\ndef test_duplicate_3(arraynums):\n    return arraynums.count(1) == len(arraynums) "}
{"task_id": "Mbpp/728", "completion": "<func># Python\n# Write a function to check if the given number is woodball or not.\ndef is_woodall(x):\n    return x % 2 == 0\n\n\n# Test function\nassert is_woodall(1) == True\nassert is_woodall(3) == True\nassert is_woodall(5) == False\nassert is_woodall(7) == False\nassert is_woodall(9) == False\nassert is_woodall(11) == False\nassert is_woodall(13) == False\nassert is_woodall(15) == False\nassert is_woodall(17) == False\nassert is_woodall(19) == False\nassert is_woodall(21) == False\nassert is_woodall(23) == False\nassert is_woodall(25) == False\nassert is_woodall(27) == False\nassert is_woodall(29) == False\nassert is_woodall(31) == False\nassert is_woodall(33) == False\nassert is_woodall(35) == False\nassert is_woodall(37) == False\nassert is_woodall(39) == False\nassert is_woodall(41) == False\nassert is_woodall(43) == False\nassert is_woodall(45) == False\nassert is_woodall(47) == False\nassert is_woodall(49) == False\nassert is_woodall(51) == False\nassert is_woodall(53) == False\nassert is_woodall(55) == False\nassert is_woodall(57) == False\nassert is_woodall(59) == False\nassert is_woodall(61) == False\nassert is_woodall(63) == False\nassert is_woodall(65) == False\nassert is_woodall(67) == False\nassert is_woodall(69) == False\nassert is_woodall(71) == False\nassert is_woodall(73) == False\nassert is_woodall(75) == False\nassert is_woodall(77) == False\nassert is_woodall(79) == False\nassert is_woodall(81) == False\nassert is_woodall(83) == False\nassert is_woodall(85) == False\nassert is_woodall(87) == False\nassert is_woodall(89) == False\nassert is_woodall(91) == False\nassert is_woodall(93) == False\nassert is_woodall(95) == False\nassert is_woodall(97) == False\nassert is_woodall(99) == False\nassert is_woodall(101) == False\nassert is_woodall(103) == False\nassert is_woodall(105) == False\nassert is_woodall(107) == False\nassert is_woodall(109) == False\nassert is_woodall(111) == False\nassert is_woodall(113) == False\nassert is_woodall(115) == False\nassert is_woodall(117) == False\nassert is_woodall(119) == False\nassert is_woodall(121) == False\nassert is_woodall(123) == False\nassert is_woodall(125) == False\nassert is_woodall(127) == False\nassert is_woodall(129) == False\nassert is_woodall(131) == False\nassert is_woodall(133) == False\nassert is_woodall(135) == False\nassert is_woodall(137) == False\nassert is_woodall(139) == False\nassert is_woodall(141) == False\nassert is_woodall(143) == False\nassert is_woodall(145) == False\nassert is_woodall(147) == False\nassert is_woodall(149) == False\nassert is_woodall(151) == False\nassert is_woodall(153) == False\nassert is_woodall(155) == False\nassert is_woodall(157) == False\nassert is_woodall(159) == False\nassert is_woodall(161) == False\nassert is_woodall(163"}
{"task_id": "Mbpp/729", "completion": "<func># Python\n# Write a python function to check if a given number is one less than twice its reverse.\ndef rev(num):\n    return num * -1\n\n\n# Test the function\nassert rev(10) == 10\nassert rev(12) == 20\nassert rev(13) == 30\nassert rev(14) == 40\nassert rev(15) == 50\nassert rev(16) == 60\nassert rev(17) == 70\nassert rev(18) == 80\nassert rev(19) == 90\nassert rev(20) == 100\nassert rev(21) == 110\nassert rev(22) == 120\nassert rev(23) == 130\nassert rev(24) == 140\nassert rev(25) == 150\nassert rev(26) == 160\nassert rev(27) == 170\nassert rev(28) == 180\nassert rev(29) == 190\nassert rev(30) == 200\nassert rev(31) == 210\nassert rev(32) == 220\nassert rev(33) == 230\nassert rev(34) == 240\nassert rev(35) == 250\nassert rev(36) == 260\nassert rev(37) == 270\nassert rev(38) == 280\nassert rev(39) == 290\nassert rev(40) == 300\nassert rev(41) == 310\nassert rev(42) == 320\nassert rev(43) == 330\nassert rev(44) == 340\nassert rev(45) == 350\nassert rev(46) == 360\nassert rev(47) == 370\nassert rev(48) == 380\nassert rev(49) == 390\nassert rev(50) == 400\nassert rev(51) == 410\nassert rev(52) == 420\nassert rev(53) == 430\nassert rev(54) == 440\nassert rev(55) == 450\nassert rev(56) == 460\nassert rev(57) == 470\nassert rev(58) == 480\nassert rev(59) == 490\nassert rev(60) == 500\nassert rev(61) == 510\nassert rev(62) == 520\nassert rev(63) == 530\nassert rev(64) == 540\nassert rev(65) == 550\nassert rev(66) == 560\nassert rev(67) == 570\nassert rev(68) == 580\nassert rev(69) == 590\nassert rev(70) == 600\nassert rev(71) == 610\nassert rev(72) == 620\nassert rev(73) == 630\nassert rev(74) == 640\nassert rev(75) == 650\nassert rev(76) == 660\nassert rev(77) == 670\nassert rev(78) == 680\nassert rev(79) == 690\nassert rev(80) == 700\nassert rev(81) == 710\nassert rev(82) == 720\nassert rev(83) == 730\nassert rev(84) == 740\nassert rev(85) == 750\nassert rev(86) == 760\nassert rev(87) == 770\nassert rev(88) == 780\nassert rev(89) == 790\nassert rev(90) == 800\nassert rev(91) == 810\nassert rev(92) == 820\nassert rev(93) == 830\nassert rev(94) == 840\nassert rev(95) == 85"}
{"task_id": "Mbpp/730", "completion": "# Python\n# Write a python function to find the largest number that can be formed with the given list of digits.\ndef find_Max_Num(arr) : \n    n = len(arr)\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ): \n\n# Testing the function\nprint(find_Max_Num([1,2,3,4,5])) "}
{"task_id": "Mbpp/731", "completion": "# Python\n# Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y):\n    if x > y:\n        return True\n    else:\n        return False\n\n\n# Test the function\nprint(opposite_Signs(1,2)) "}
{"task_id": "Mbpp/732", "completion": "# Python\n# Write a function to find the nth octagonal number.\ndef is_octagonal(n):\n    if n == 0:\n        return True\n    elif n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_octagonal(n // 2)\n\n# Test the function.\nprint(is_octagonal(10)) "}
{"task_id": "Mbpp/733", "completion": "# Python\n# Write a python function to count the number of substrings with the sum of digits equal to their length.\ndefaultdict\n):\n    def count_substrings(s):\n        return sum(1 for c in s if c in '123456789')\n    return count_substrings "}
{"task_id": "Mbpp/734", "completion": "# Python\n# Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n    return xs[0] "}
{"task_id": "Mbpp/735", "completion": "# Python\n# Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n    max_diff = 0\n    for pair in test_list:\n        diff = pair[1] - pair[0]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff "}
{"task_id": "Mbpp/736", "completion": "# Python\n# Write a function to sort a list of tuples using the second value of each tuple.\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1]) "}
{"task_id": "Mbpp/737", "completion": "# Python\n# Write a function to flatten a list and sum all of its elements.\ndef recursive_list_sum(data_list):\n    if not data_list:\n        return 0\n    return sum(data_list)\n\n\n# Test the function\nassert recursive_list_sum([1, 2, 3, 4]) == 10\nassert recursive_list_sum([1, 2, 3, 4, 5]) == 15\nassert recursive_list_sum([1, 2, 3, 4, 5, 6]) == 21 "}
{"task_id": "Mbpp/738", "completion": "# Python\n# Write a python function to count the number of positive numbers in a list.\ndef pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count "}
{"task_id": "Mbpp/739", "completion": "<func># Python\n# Write a function to find the number of ways to partition a set of Bell numbers.\ndef bell_number(n):\n    return binomial_coefficient(n, n)\n\n\n# Test the function.\nassert bell_number(10) == 10\nassert bell_number(11) == 10\nassert bell_number(12) == 10\nassert bell_number(13) == 10\nassert bell_number(14) == 10\nassert bell_number(15) == 10\nassert bell_number(16) == 10\nassert bell_number(17) == 10\nassert bell_number(18) == 10\nassert bell_number(19) == 10\nassert bell_number(20) == 10\nassert bell_number(21) == 10\nassert bell_number(22) == 10\nassert bell_number(23) == 10\nassert bell_number(24) == 10\nassert bell_number(25) == 10\nassert bell_number(26) == 10\nassert bell_number(27) == 10\nassert bell_number(28) == 10\nassert bell_number(29) == 10\nassert bell_number(30) == 10\nassert bell_number(31) == 10\nassert bell_number(32) == 10\nassert bell_number(33) == 10\nassert bell_number(34) == 10\nassert bell_number(35) == 10\nassert bell_number(36) == 10\nassert bell_number(37) == 10\nassert bell_number(38) == 10\nassert bell_number(39) == 10\nassert bell_number(40) == 10\nassert bell_number(41) == 10\nassert bell_number(42) == 10\nassert bell_number(43) == 10\nassert bell_number(44) == 10\nassert bell_number(45) == 10\nassert bell_number(46) == 10\nassert bell_number(47) == 10\nassert bell_number(48) == 10\nassert bell_number(49) == 10\nassert bell_number(50) == 10\nassert bell_number(51) == 10\nassert bell_number(52) == 10\nassert bell_number(53) == 10\nassert bell_number(54) == 10\nassert bell_number(55) == 10\nassert bell_number(56) == 10\nassert bell_number(57) == 10\nassert bell_number(58) == 10\nassert bell_number(59) == 10\nassert bell_number(60) == 10\nassert bell_number(61) == 10\nassert bell_number(62) == 10\nassert bell_number(63) == 10\nassert bell_number(64) == 10\nassert bell_number(65) == 10\nassert bell_number(66) == 10\nassert bell_number(67) == 10\nassert bell_number(68) == 10\nassert bell_number(69) == 10\nassert bell_number(70) == 10\nassert bell_number(71) == 10\nassert bell_number(72) == 10\nassert bell_number(73) == 10\nassert bell_number(74) == 10\nassert bell_number(75) == 10\nassert bell_number(76) == 10\nassert bell_number(77) == 10\nassert bell_number(78) == 10\nassert bell_number(79) == 10\nassert bell_number(80) == 10\nassert bell_number(81) == 10\nassert bell_number(82) == 10\nassert bell_number(83) == 10\nassert bell_number(84) == 10\nassert bell_number(85) == 10\nassert bell_number(86) == 10\nassert"}
{"task_id": "Mbpp/740", "completion": "# Python\n# Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A):\n    if len(A) == 0:\n        return True\n    if len(A) == 1:\n        return A[0]\n    if len(A) == 2:\n        return A[0] < A[1]\n    return False\n "}
{"task_id": "Mbpp/741", "completion": "# Python\n# Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n    return any(i in l for i in s) "}
{"task_id": "Mbpp/742", "completion": "# Python\n# Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input):\n    return len(Input) == len(set(Input)) "}
{"task_id": "Mbpp/743", "completion": "# Python\n# Write a function to sort a list of elements.\ndef comb_sort(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        mid = len(nums) // 2\n        left = comb_sort(nums[:mid])\n        right = comb_sort(nums[mid:])\n        return merge(left, right)\n\n# Test the function\nnums = [1, 2, 3, 4, 5]\nprint(comb_sort(nums)) "}
{"task_id": "Mbpp/744", "completion": "# Python\n# Write a python function to check whether the given number can be represented as the difference of two squares or not.\ndef dif_Square(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n % 2 == 0:\n        return dif_Square(n // 2)\n    return dif_Square(n // 2) + 1\n\n\n# Test the function\nif __name__ == '__main__':\n    print(dif_Square(10)) "}
{"task_id": "Mbpp/745", "completion": "# Python\n# Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):\n    for pattern in patterns:\n        if len(colors)!= len(pattern):\n            return False\n        for color in colors:\n            if color not in pattern:\n                return False\n    return True\n\n\n# Test function\nif __name__ == '__main__':\n    print(is_samepatterns([['red', 'blue', 'green'], ['red', 'blue', 'green']], ['red', 'blue', 'green'])) "}
{"task_id": "Mbpp/746", "completion": "# Python\n# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n    return [tuple(i) for i in filter(lambda x: all(x[i] % K for i in range(len(x))), test_list)] "}
{"task_id": "Mbpp/747", "completion": "# Python\n# Write a python function to find whether a number is divisible by 11.\ndef is_Diff(n):\n    return n % 11 == 0\n\n# Test the function\nif __name__ == '__main__':\n    print(is_Diff(123)) "}
{"task_id": "Mbpp/748", "completion": "<func># Python\n# Write a python function to check whether the length of the word is odd or not.\ndef word_len(s):\n    return len(s) % 2!= 0\n\n# Test the function\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_len('world') == 5\nassert word_len('hello') == 3\nassert word_"}
{"task_id": "Mbpp/749", "completion": "<func># Python\n# Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) * (n + 3)\n\n\n# Test the function.\nassert tetrahedral_number(1) == 10\nassert tetrahedral_number(2) == 12\nassert tetrahedral_number(3) == 16\nassert tetrahedral_number(4) == 20\nassert tetrahedral_number(5) == 24\nassert tetrahedral_number(6) == 28\nassert tetrahedral_number(7) == 32\nassert tetrahedral_number(8) == 36\nassert tetrahedral_number(9) == 40\nassert tetrahedral_number(10) == 44\nassert tetrahedral_number(11) == 48\nassert tetrahedral_number(12) == 52\nassert tetrahedral_number(13) == 56\nassert tetrahedral_number(14) == 60\nassert tetrahedral_number(15) == 64\nassert tetrahedral_number(16) == 68\nassert tetrahedral_number(17) == 72\nassert tetrahedral_number(18) == 76\nassert tetrahedral_number(19) == 80\nassert tetrahedral_number(20) == 84\nassert tetrahedral_number(21) == 88\nassert tetrahedral_number(22) == 92\nassert tetrahedral_number(23) == 96\nassert tetrahedral_number(24) == 100\nassert tetrahedral_number(25) == 104\nassert tetrahedral_number(26) == 108\nassert tetrahedral_number(27) == 112\nassert tetrahedral_number(28) == 116\nassert tetrahedral_number(29) == 120\nassert tetrahedral_number(30) == 124\nassert tetrahedral_number(31) == 128\nassert tetrahedral_number(32) == 132\nassert tetrahedral_number(33) == 136\nassert tetrahedral_number(34) == 140\nassert tetrahedral_number(35) == 144\nassert tetrahedral_number(36) == 148\nassert tetrahedral_number(37) == 152\nassert tetrahedral_number(38) == 156\nassert tetrahedral_number(39) == 160\nassert tetrahedral_number(40) == 164\nassert tetrahedral_number(41) == 168\nassert tetrahedral_number(42) == 172\nassert tetrahedral_number(43) == 176\nassert tetrahedral_number(44) == 180\nassert tetrahedral_number(45) == 184\nassert tetrahedral_number(46) == 188\nassert tetrahedral_number(47) == 192\nassert tetrahedral_number(48) == 196\nassert tetrahedral_number(49) == 200\nassert tetrahedral_number(50) == 204\nassert tetrahedral_number(51) == 208\nassert tetrahedral_number(52) == 212\nassert tetrahedral_number(53) == 216\nassert tetrahedral_number(54) == 220\nassert tetrahedral_number(55) == 224\nassert tetrahedral_number(56) == 228\nassert tetrahedral_number(57) == 232\nassert tetrahedral_number(58) == 236\nassert tetrahedral_number(59) == 240\nassert tetrahedral_number(60) == 244\nassert t"}
{"task_id": "Mbpp/750", "completion": "# Python\n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return 4 * math.pi * r ** 3 "}
{"task_id": "Mbpp/751", "completion": "<func># Python\n# Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\ndef get_Char(strr):\n    return chr(ord(strr) % 26 + 65)\n\n\n# Test the function\nassert get_Char('hello') == 'l'\nassert get_Char('world') == 'w'\nassert get_Char('123') == '1'\nassert get_Char('123456789') == '1'\nassert get_Char('1234567890') == '1'\nassert get_Char('12345678901234567890') == '1'\nassert get_Char('123456789012345678901234567890') == '1'\nassert get_Char('1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901"}
{"task_id": "Mbpp/752", "completion": "<func># Python\n# Write a function to find the nth number in the newman conway sequence.\ndef sequence(n):\n    return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "}
{"task_id": "Mbpp/753", "completion": "# Python\n# Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n    return 4 * np.pi * r ** 2 "}
{"task_id": "Mbpp/754", "completion": "<func># Python\n# Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\n    return (n + 1) // 2 * 16 + 1\n\n# Test the function.\nassert centered_hexagonal_number(1) == 1\nassert centered_hexagonal_number(2) == 2\nassert centered_hexagonal_number(3) == 3\nassert centered_hexagonal_number(4) == 4\nassert centered_hexagonal_number(5) == 5\nassert centered_hexagonal_number(6) == 6\nassert centered_hexagonal_number(7) == 7\nassert centered_hexagonal_number(8) == 8\nassert centered_hexagonal_number(9) == 9\nassert centered_hexagonal_number(10) == 10\nassert centered_hexagonal_number(11) == 11\nassert centered_hexagonal_number(12) == 12\nassert centered_hexagonal_number(13) == 13\nassert centered_hexagonal_number(14) == 14\nassert centered_hexagonal_number(15) == 15\nassert centered_hexagonal_number(16) == 16\nassert centered_hexagonal_number(17) == 17\nassert centered_hexagonal_number(18) == 18\nassert centered_hexagonal_number(19) == 19\nassert centered_hexagonal_number(20) == 20\nassert centered_hexagonal_number(21) == 21\nassert centered_hexagonal_number(22) == 22\nassert centered_hexagonal_number(23) == 23\nassert centered_hexagonal_number(24) == 24\nassert centered_hexagonal_number(25) == 25\nassert centered_hexagonal_number(26) == 26\nassert centered_hexagonal_number(27) == 27\nassert centered_hexagonal_number(28) == 28\nassert centered_hexagonal_number(29) == 29\nassert centered_hexagonal_number(30) == 30\nassert centered_hexagonal_number(31) == 31\nassert centered_hexagonal_number(32) == 32\nassert centered_hexagonal_number(33) == 33\nassert centered_hexagonal_number(34) == 34\nassert centered_hexagonal_number(35) == 35\nassert centered_hexagonal_number(36) == 36\nassert centered_hexagonal_number(37) == 37\nassert centered_hexagonal_number(38) == 38\nassert centered_hexagonal_number(39) == 39\nassert centered_hexagonal_number(40) == 40\nassert centered_hexagonal_number(41) == 41\nassert centered_hexagonal_number(42) == 42\nassert centered_hexagonal_number(43) == 43\nassert centered_hexagonal_number(44) == 44\nassert centered_hexagonal_number(45) == 45\nassert centered_hexagonal_number(46) == 46\nassert centered_hexagonal_number(47) == 47\nassert centered_hexagonal_number(48) == 48\nassert centered_hexagonal_number(49) == 49\nassert centered_hexagonal_number(50) == 50\nassert centered_hexagonal_number(51) == 51\nassert centered_hexagonal_number(52) == 52\nassert centered_hexagonal_number(53) == 53\nassert centered_hexagonal_number(54) == 54\nassert centered_hexagonal_number(55) == 55\nassert centered_hexagonal_number(56) == 56\nassert centered_hexagonal_number(57) == 57\nassert centered_hexagonal_number(58) == 58\nassert centered_hexagonal_number(59) == 59\nassert centered_hexagonal_number(60)"}
{"task_id": "Mbpp/755", "completion": "# Python\n# Write a function to merge three dictionaries into a single dictionary.\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    return dict(dict1.items() + dict2.items() + dict3.items()) "}
{"task_id": "Mbpp/756", "completion": "# Python\n# Write a function to get the frequency of all the elements in a list, returned as a dictionary.\ndef freq_count(list1):\n    freq = {}\n    for item in list1:\n        freq[item] = freq.get(item, 0) + 1\n    return freq "}
{"task_id": "Mbpp/757", "completion": "# Python\n# Write a function to find the closest smaller number than n.\ndef closest_num(N):\n    return min(N, N - 1) "}
{"task_id": "Mbpp/758", "completion": "# Python\n# Write a python function to find the length of the longest word.\ndef len_log(list1):\n    return max(len(word) for word in list1) "}
{"task_id": "Mbpp/759", "completion": "# Python\n# Write a function to check if a string is present as a substring in a given list of string values.\ndef find_substring(str1, sub_str):\n    return any(sub_str in str1 for str1 in sub_str) "}
{"task_id": "Mbpp/760", "completion": "# Python\n# Write a function to check whether the given number is undulating or not.\ndef is_undulating(n):\n    if n % 2 == 0:\n        return False\n    else:\n        return True\n\n\n# Test the function\nprint(is_undulating(10)) "}
{"task_id": "Mbpp/761", "completion": "# Python\n# Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n    return a**b "}
{"task_id": "Mbpp/762", "completion": "# Python\n# Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\ndef index_minimum(test_list):\n    return min(test_list, key=lambda x: x[1])[0] "}
{"task_id": "Mbpp/763", "completion": "# Python\n# Write a python function to find the length of the smallest list in a list of lists.\ndef Find_Min_Length(lst):\n    return min(len(lst), *lst) "}
{"task_id": "Mbpp/764", "completion": "# Python\n# Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\n    return sum(i for I in range(1, n+1) if n % I == 0) "}
{"task_id": "Mbpp/765", "completion": "# Python\n# Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\ndef frequency_lists(list1):\n    frequency = {}\n    for item in list1:\n        if item not in frequency:\n            frequency[item] = 1\n        else:\n            frequency[item] += 1\n    return frequency "}
{"task_id": "Mbpp/766", "completion": "# Python\n# Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):\n    return sum(map(lambda x: x * x, numbers)) / len(numbers) "}
{"task_id": "Mbpp/767", "completion": "# Python\n# Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\ndef decimal_to_binary(n):\n    return bin(n)[2:] "}
{"task_id": "Mbpp/768", "completion": "<func># Python\n# Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\ndef next_smallest_palindrome(num):\n    if num < 0:\n        return -1\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 3\n    if num == 4:\n        return 4\n    if num == 5:\n        return 5\n    if num == 6:\n        return 6\n    if num == 7:\n        return 7\n    if num == 8:\n        return 8\n    if num == 9:\n        return 9\n    if num == 10:\n        return 10\n    if num == 11:\n        return 11\n    if num == 12:\n        return 12\n    if num == 13:\n        return 13\n    if num == 14:\n        return 14\n    if num == 15:\n        return 15\n    if num == 16:\n        return 16\n    if num == 17:\n        return 17\n    if num == 18:\n        return 18\n    if num == 19:\n        return 19\n    if num == 20:\n        return 20\n    if num == 21:\n        return 21\n    if num == 22:\n        return 22\n    if num == 23:\n        return 23\n    if num == 24:\n        return 24\n    if num == 25:\n        return 25\n    if num == 26:\n        return 26\n    if num == 27:\n        return 27\n    if num == 28:\n        return 28\n    if num == 29:\n        return 29\n    if num == 30:\n        return 30\n    if num == 31:\n        return 31\n    if num == 32:\n        return 32\n    if num == 33:\n        return 33\n    if num == 34:\n        return 34\n    if num == 35:\n        return 35\n    if num == 36:\n        return 36\n    if num == 37:\n        return 37\n    if num == 38:\n        return 38\n    if num == 39:\n        return 39\n    if num == 40:\n        return 40\n    if num == 41:\n        return 41\n    if num == 42:\n        return 42\n    if num == 43:\n        return 43\n    if num == 44:\n        return 44\n    if num == 45:\n        return 45\n    if num == 46:\n        return 46\n    if num == 47:\n        return 47\n    if num == 48:\n        return 48\n    if num == 49:\n        return 49\n    if num == 50:\n        return 50\n    if num == 51:\n        return 51\n    if num == 52:\n        return 52\n    if num == 53:\n        return 53\n    if num == 54:\n        return 54\n    if num == 55:\n        return 55\n    if num == 56:\n        return 56\n    if num == 57:\n        return 57\n    if num == 58:\n        return 58\n    if num == 59:\n        return 59\n    if num == 60:\n        return 60\n    if num == 61:\n        return 61\n    if num == 62:\n        return 62\n    if num == 63:\n        return 63\n    if num == 64:\n        return 64\n    if num == 65:\n        return 65\n    if num == 66:\n        return 66\n    if num == 67:\n        return 67\n    if num == 68:\n       "}
{"task_id": "Mbpp/769", "completion": "# Python\n# Write a function to find the kth element in the given array using 1-based indexing.\ndef kth_element(arr, k):\n    return arr[k - 1] "}
{"task_id": "Mbpp/770", "completion": "# Python\n# Write a function to convert a snake case string to camel case string.\ndef snake_to_camel(word):\n    return word.lower().replace('_', '').replace('-', '').replace(' ', '')[0] "}
{"task_id": "Mbpp/771", "completion": "# Python\n# Write a function to find the Eulerian number a(n, m).\ndef eulerian_num(n, m):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if m == 0:\n        return n\n    if m == 1:\n        return n\n    return eulerian_num(n - 1, m) + eulerian_num(n - 1, m - 1)\n\n# Test the function\nprint(eulerian_num(10, 3)) "}
{"task_id": "Mbpp/772", "completion": "# Python\n# Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(input_list):\n    sorted_list = []\n    for sublist in input_list:\n        sorted_list.append(sorted(sublist))\n    return sorted_list "}
{"task_id": "Mbpp/773", "completion": "# Python\n# Write a python function to count true booleans in the given list.\ndef count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count "}
{"task_id": "Mbpp/774", "completion": "# Python\n# Write a function to append the given list to the given tuples.\ndef add_lists(test_list, test_tup):\n    test_list.append(test_tup)\n    return test_list "}
{"task_id": "Mbpp/775", "completion": "# Python\n# Write a function to merge three lists into a single sorted list.\ndef merge_sorted_list(num1,num2,num3):\n    return sorted(num1 + num2 + num3) "}
{"task_id": "Mbpp/776", "completion": "<func># Python\n# Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\ndef odd_Equivalent(s,n):\n    return sum(map(lambda x: x%2==1,s))%2 == 1\n\n# Test the function\nprint(odd_Equivalent}
{"task_id": "Mbpp/777", "completion": "# Python\n# Write a function to find the common elements in given nested lists.\ndef common_in_nested_lists(nestedlist):\n    return [list(set(nestedlist[0]))] "}
{"task_id": "Mbpp/778", "completion": "<func># Python\n# Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n# Test the function.\nassert check_integer('123') == True\nassert check_integer('123.45') == False\nassert check_integer('123.456') == False\nassert check_integer('123.456789') == False\nassert check_integer('123.4567890123456789') == True\nassert check_integer('123.45678901234567890123456789') == True\nassert check_integer('123.456789012345678901234567890123456789') == True\nassert check_integer('123.456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567"}
{"task_id": "Mbpp/779", "completion": "# Python\n# Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dit(list1):\n    for d in list1:\n        if d:\n            return False\n    return True\n\n\n# Test function\nif __name__ == '__main__':\n    print(empty_dit([{'a': 1}, {'b': 2}, {'c': 3}])) "}
{"task_id": "Mbpp/780", "completion": "# Python\n# Write a function to convert a given tuple of positive integers into a single integer.\ndef tuple_to_int(nums):\n    return sum(map(int, nums)) "}
{"task_id": "Mbpp/781", "completion": "# Python\n# Write a function to convert all possible convertible elements in a list of lists to floats.\ndef list_to_float(test_list):\n    return [float(x) for x in test_list] "}
{"task_id": "Mbpp/782", "completion": "# Python\n# Write a function to convert a string to a list of strings split on the space character.\ndef string_to_list(string):\n    return string.split() "}
{"task_id": "Mbpp/783", "completion": "# Python\n# Write a python function to find the element that appears only once in a sorted array.\ndef search(arr):\n    return arr.index(max(arr)) "}
{"task_id": "Mbpp/784", "completion": "# Python\n# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\ndef max_product_tuple(list1):\n    max_product = 0\n    for num1, num2 in list1:\n        if num1 > num2:\n            max_product = max(max_product, num1 * num2)\n        else:\n            max_product = max(max_product, num2 * num1)\n    return max_product\n\n# Test the function\nprint(max_product_tuple([(1, 2), (3, 4), (5, 6)])) "}
{"task_id": "Mbpp/785", "completion": "# Python\n# Write a function to sum all amicable numbers from 1 to a specified number.\ndef amicable_numbers_sum(limit):\n    return sum(map(lambda x: x * x, range(1, limit + 1))) "}
{"task_id": "Mbpp/786", "completion": "# Python\n# Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\n    return np.arctan2(b,a) "}
{"task_id": "Mbpp/787", "completion": "# Python\n# Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string):\n    return len(find_0_1(string))\n\n\n# Find the number of 0s and 1s in a binary string.\ndef find_0_1(string):\n    return sum(int(char) for char in string)\n\n\n# Find the number of 0s and 1s in a binary string.\ndef find_0_1_reverse(string):\n    return sum(int(char) for char in string[::-1])\n\n\n# Find the number of 0s and 1s in a binary string.\ndef find_0_1_reverse_reverse(string):\n    return sum(int(char) for char in string[::-1]) "}
{"task_id": "Mbpp/788", "completion": "# Python\n# Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b):\n    return sum_of_common_divisors(a,b)\n\ndef sum_of_common_divisors(a,b):\n    if a == 0:\n        return 0\n    if b == 0:\n        return a\n    return sum(sum_of_common_divisors(a,b%a)) % b "}
{"task_id": "Mbpp/789", "completion": "# Python\n# Write a function to multiply two integers.\ndef multiply_int(x, y):\n    return x * y "}
{"task_id": "Mbpp/790", "completion": "# Python\n# Write a function to find words that are longer than n characters from a given list of words.\ndef long_words(n, str):\n    return [word for word in str if len(word) > n] "}
{"task_id": "Mbpp/791", "completion": "# Python\n# Write a function to calculate whether the matrix is a magic square.\ndef magic_square_test(my_matrix):\n    # Check if the matrix is a magic square\n    if my_matrix[0][0] == my_matrix[1][1] and my_matrix[0][1] == my_matrix[2][2]:\n        return True\n    else:\n        return False\n\n# Test the function\nprint(magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]])) "}
{"task_id": "Mbpp/792", "completion": "# Python\n# Write a function to find the item with maximum frequency in a given list.\ndefaultdict\n):\n    return max(freq_dict.items(), key=lambda x: x[1])[0] "}
{"task_id": "Mbpp/793", "completion": "# Python\n# Write a python function to reverse only the vowels of a given string (where y is not a vowel).\ndef reverse_vowels(str1):\n    return ''.join(c for c in str1 if c.isalpha() and c.lower() not in string.punctuation) "}
{"task_id": "Mbpp/794", "completion": "# Python\n# Write a function to convert a tuple to a string.\ndef tup_string(tup1):\n    return str(tup1) "}
{"task_id": "Mbpp/795", "completion": "# Python\n# Write a function to calculate the sum of the negative numbers of a given list of numbers.\ndef sum_negativenum(nums):\n    return sum(map(lambda x: -x, nums)) "}
{"task_id": "Mbpp/796", "completion": "# Python\n# Write a function to find the nth hexagonal number.\ndef hexagonal_num(n):\n    return hex(n)[2:]\n\n# Test the function.\nprint(hexagonal_num(10)) "}
{"task_id": "Mbpp/797", "completion": "# Python\n# Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\ndef zero_count(nums):\n    return sum(nums == 0) / len(nums) "}
{"task_id": "Mbpp/798", "completion": "# Python\n# Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n // 2)\n    return False\n\n# Test function\nif __name__ == '__main__':\n    print(is_Sum_Of_Powers_Of_Two(10)) "}
{"task_id": "Mbpp/799", "completion": "# Python\n# Write a function to find the circumference of a circle.\ndef circle_circumference(r):\n    return 2 * r * math.pi\n\n\n# Test the function\nassert circle_circumference(5) == 12.5\nassert circle_circumference(10) == 25.0 "}
{"task_id": "Mbpp/800", "completion": "# Python\n# Write a function to flatten the list of lists into a single set of numbers.\ndef extract_singly(test_list):\n    return [item for sublist in test_list for item in sublist] "}
{"task_id": "Mbpp/801", "completion": "# Python\n# Write a function to sort a list of elements.\ndef pancake_sort(nums):\n    return sorted(nums, key=lambda x: x[0]) "}
{"task_id": "Mbpp/802", "completion": "# Python\n# Write a function to count number items that are identical in the same position of three given lists.\ndef count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n\n# Test function\nprint(count_samepair([1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5])) "}
{"task_id": "Mbpp/803", "completion": "# Python\n# Write a function to find number of lists present in the given tuple.\ndef find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n\n# Test function\nif __name__ == '__main__':\n    print(find_lists([1, 2, 3, 4, 5])) "}
{"task_id": "Mbpp/804", "completion": "# Python\n# Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff "}
{"task_id": "Mbpp/805", "completion": "# Python\n# Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\ndef find_solution(a, b, n):\n    if a == 0:\n        return None\n    if b == 0:\n        return None\n    if n == 0:\n        return None\n    if n % 2 == 0:\n        return (a, b)\n    return None\n "}
{"task_id": "Mbpp/806", "completion": "# Python\n# Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2] "}
{"task_id": "Mbpp/807", "completion": "# Python\n# Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\ndef sum_series(n):\n    return n + (n-2) + (n-4) + (n-6) +... + (n-x)\n\n# Test the function.\nassert sum_series(10) == 100 "}
{"task_id": "Mbpp/808", "completion": "<func># Python\n# Write a function to calculate the area of a regular polygon given the length and number of its sides.\ndef area_polygon(s, l):\n    return l * (s - 1) * (s - 2) / 2\n\n\n# Test the function\nassert area_polygon(3, 4) == 12\nassert area_polygon(5, 4) == 20\nassert area_polygon(6, 4) == 24\nassert area_polygon(7, 4) == 28\nassert area_polygon(8, 4) == 32\nassert area_polygon(9, 4) == 36\nassert area_polygon(10, 4) == 40\nassert area_polygon(11, 4) == 44\nassert area_polygon(12, 4) == 48\nassert area_polygon(13, 4) == 52\nassert area_polygon(14, 4) == 56\nassert area_polygon(15, 4) == 60\nassert area_polygon(16, 4) == 64\nassert area_polygon(17, 4) == 68\nassert area_polygon(18, 4) == 72\nassert area_polygon(19, 4) == 76\nassert area_polygon(20, 4) == 80\nassert area_polygon(21, 4) == 84\nassert area_polygon(22, 4) == 88\nassert area_polygon(23, 4) == 92\nassert area_polygon(24, 4) == 96\nassert area_polygon(25, 4) == 100\nassert area_polygon(26, 4) == 104\nassert area_polygon(27, 4) == 108\nassert area_polygon(28, 4) == 112\nassert area_polygon(29, 4) == 116\nassert area_polygon(30, 4) == 120\nassert area_polygon(31, 4) == 124\nassert area_polygon(32, 4) == 128\nassert area_polygon(33, 4) == 132\nassert area_polygon(34, 4) == 136\nassert area_polygon(35, 4) == 140\nassert area_polygon(36, 4) == 144\nassert area_polygon(37, 4) == 148\nassert area_polygon(38, 4) == 152\nassert area_polygon(39, 4) == 156\nassert area_polygon(40, 4) == 160\nassert area_polygon(41, 4) == 164\nassert area_polygon(42, 4) == 168\nassert area_polygon(43, 4) == 172\nassert area_polygon(44, 4) == 176\nassert area_polygon(45, 4) == 180\nassert area_polygon(46, 4) == 184\nassert area_polygon(47, 4) == 188\nassert area_polygon(48, 4) == 192\nassert area_polygon(49, 4) == 196\nassert area_polygon(50, 4) == 200\nassert area_polygon(51, 4) == 204\nassert area_polygon(52, 4) == 208\nassert area_polygon(53, 4) == 212\nassert area_polygon(54, 4) == 216\nassert area_polygon(55, 4) == 220\nassert area_polygon(56, 4) == 224\nassert area_polygon(57, 4) == 228\nassert area_polygon(58, 4) == 232\nassert area_polygon(59, 4) == 236\nassert area_polygon(60, 4) == "}
{"task_id": "Mbpp/809", "completion": "# Python\n# Write a function to determine if the sum of the divisors of two integers are the same.\ndef div_sum(n):\n    return n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0\n\n# Test the function\nif __name__ == '__main__':\n    print(div_sum(10)) "}
{"task_id": "Mbpp/810", "completion": "# Python\n# Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\ndef count_char_position(str1):\n    count = 0\n    for char in str1:\n        if char.isalpha():\n            count += 1\n    return count "}
{"task_id": "Mbpp/811", "completion": "# Python\n# Write a function that counts the number of pairs of integers in a list that xor to an even number.\ndef find_even_pair(A):\n    count = 0\n    for I in range(len(A)):\n        if A[i] & 1 == 0:\n            count += 1\n    return count\n\n# Test the function\nprint(find_even_pair([1, 2, 3, 4, 5])) "}
{"task_id": "Mbpp/812", "completion": "# Python\n# Write a python function to find the smallest power of 2 greater than or equal to n.\ndef next_power_of_2(n):\n    return 1 << (n - 1) "}
{"task_id": "Mbpp/813", "completion": "# Python\n# Write a function to count the number of occurrences of a number in a given list.\ndef frequency(a,x):\n    return sum(1 for I in a if I == x) "}
{"task_id": "Mbpp/814", "completion": "# Python\n# Write a function to find the sum of numbers in a list within a range specified by two indices.\ndef sum_range_list(list1, m, n):\n    return sum(list1[m:n+m]) "}
{"task_id": "Mbpp/815", "completion": "# Python\n# Write a function to find the perimeter of a regular pentagon from the length of its sides.\ndef perimeter_pentagon(a):\n    return 5 * a "}
{"task_id": "Mbpp/816", "completion": "# Python\n# Write a function to count the number of occurence of the string 'std' in a given string.\ndef count_occurance(s):\n    return len(s.count('std')) "}
{"task_id": "Mbpp/817", "completion": "# Python\n# Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n    for element in test_tuple:\n        if not isinstance(element, tuple):\n            return False\n    return True\n "}
{"task_id": "Mbpp/818", "completion": "<func># Python\n# Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\ndef is_majority(arr, n, x):\n    if n == 1:\n        return x == arr[0]\n    else:\n        return arr[n - 1] == x\n\n# Test the function\nassert is_majority([1, 2, 3, 4, 5], 3, 3) == True\nassert is_majority([1, 2, 3, 4, 5], 3, 1) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 2) == True\nassert is_majority([1, 2, 3, 4, 5], 3, 3) == True\nassert is_majority([1, 2, 3, 4, 5], 3, 4) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 5) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 6) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 7) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 8) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 9) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 10) == True\nassert is_majority([1, 2, 3, 4, 5], 3, 11) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 12) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 13) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 14) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 15) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 16) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 17) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 18) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 19) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 20) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 21) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 22) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 23) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 24) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 25) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 26) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 27) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 28) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 29) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 30) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 31) == False\nassert is_majority([1, 2, 3, 4, 5], 3, 32) == False\nassert is_major"}
{"task_id": "Mbpp/819", "completion": "# Python\n# Write a python function to count the number of set bits (binary digits with value 1) in a given number.\ndef count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count "}
{"task_id": "Mbpp/820", "completion": "# Python\n# Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n    return str[::-1] "}
{"task_id": "Mbpp/821", "completion": "# Python\n# Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c):\n    if a < b and b < c:\n        return a\n    elif a < c and c < b:\n        return c\n    else:\n        return b\n\n# Test function\nprint(min_of_three(1,2,3)) "}
{"task_id": "Mbpp/822", "completion": "# Python\n# Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):\n    if n == 0:\n        return False\n    if r == 0:\n        return True\n    if n < l or r < l:\n        return False\n    return all_Bits_Set_In_The_Given_Range(n-l,l,r-1)\n "}
{"task_id": "Mbpp/823", "completion": "# Python\n# Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\ndef re_arrange_array(arr, n):\n    arr = sorted(arr)\n    return [arr[i] for i in range(n) if arr[i] < 0] + [arr[i] for i in range(n) if arr[i] > 0] "}
{"task_id": "Mbpp/824", "completion": "# Python\n# Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\ndef replace_blank(str1,char):\n    return str1.replace(' ',char) "}
{"task_id": "Mbpp/825", "completion": "# Python\n# Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\ndef larg_nnum(list1,n):\n    return sorted(list1,reverse=True)[n]\n\n# Test the function\nlarg_nnum([1,2,3,4,5,6,7,8,9],5) "}
{"task_id": "Mbpp/826", "completion": "# Python\n# Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r,h):\n    return 2*np.pi*r*h\n\n# Test the function\nlateralsuface_cylinder(1,1) "}
{"task_id": "Mbpp/827", "completion": "# Python\n# Write a function to find the volume of a cube given its side length.\ndef volume_cube(l):\n    return l ** 3 / 8 "}
{"task_id": "Mbpp/828", "completion": "# Python\n# Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n):\n    return n & (n - 1) "}
{"task_id": "Mbpp/829", "completion": "# Python\n# Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\ndef check_occurences(test_list):\n    return {tuple(t): count for t, count in groupby(test_list, lambda x: x)} "}
{"task_id": "Mbpp/830", "completion": "# Python\n# Write a python function to count the number of non-empty substrings of a given string.\ndef number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        if str[i]!='':\n            count += 1\n    return count "}
{"task_id": "Mbpp/831", "completion": "# Python\n# Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n):\n    return (m+1) * (n+1) - 2 * m + n\n\n# Test the function\nprint(get_total_number_of_sequences(10,10)) "}
{"task_id": "Mbpp/832", "completion": "# Python\n# Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\ndef replace_list(list1,list2):\n    return [list1[0] + list2[0]] + list1[1:] "}
{"task_id": "Mbpp/833", "completion": "# Python\n# Write a function to count the total number of characters in a string.\ndef count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count "}
{"task_id": "Mbpp/834", "completion": "# Python\n# Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N):\n    return (N**2 + N)**2\n\n# Test the function\nprint(next_Perfect_Square(10)) "}
{"task_id": "Mbpp/835", "completion": "# Python\n# Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\ndef max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    mid = n // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    left_sum = max_sum(left)\n    right_sum = max_sum(right)\n    return max(left_sum + right_sum, left_sum + right_sum) "}
{"task_id": "Mbpp/836", "completion": "# Python\n# Write a function for computing square roots using the babylonian method.\ndef babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n\n    :param number: The number to be squared.\n    :return: The square root of the number.\n    \"\"\"\n    if number == 0:\n        return 0\n    else:\n        return (number ** 0.5) + 0.5\n "}
{"task_id": "Mbpp/837", "completion": "# Python\n# Write a function to find the length of the longest palindromic subsequence in the given string.\ndef lps(str):\n    l = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str)):\n            if str[i] == str[j]:\n                l += 1\n    return l "}
{"task_id": "Mbpp/838", "completion": "# Python\n# Write a function that takes in an integer n and calculates the harmonic sum of n-1.\ndef harmonic_sum(n):\n    return sum(range(1, n + 1))\n\n\n# Test the function\nassert harmonic_sum(10) == 100\nassert harmonic_sum(100) == 1000\nassert harmonic_sum(1000) == 10000 "}
{"task_id": "Mbpp/839", "completion": "# Python\n# Write a function to find the intersection of two arrays.\ndef intersection_array(array_nums1,array_nums2):\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection\n "}
{"task_id": "Mbpp/840", "completion": "# Python\n# Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\ndef count_X(tup, x):\n    return tup.count(x) "}
{"task_id": "Mbpp/841", "completion": "# Python\n# Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\ndef insert_element(list,element):\n    return [element] + list\n\n# Test the function\nlist = [1,2,3,4,5]\nresult = insert_element(list,6)\nprint(result) "}
{"task_id": "Mbpp/842", "completion": "# Python\n# Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):\n    return (numbers[0] * np.cos(numbers[1]) + numbers[2] * np.sin(numbers[1]))\n "}
{"task_id": "Mbpp/843", "completion": "# Python\n# Write a python function that returns the number of integer elements in a given list.\ndef count_integer(list1):\n    count = 0\n    for num in list1:\n        if type(num) == int:\n            count += 1\n    return count "}
{"task_id": "Mbpp/844", "completion": "# Python\n# Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\ndef combinations_colors(l, n):\n    return [tuple(l[i:i+n]) for i in range(0, len(l), n)] "}
{"task_id": "Mbpp/845", "completion": "# Python\n# Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\ndef count_Primes_nums(n):\n    count = 0\n    for I in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count\n\n# Test the function\nprint(count_Primes_nums(10)) "}
{"task_id": "Mbpp/846", "completion": "# Python\n# Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\ndef swap_numbers(a,b):\n    return (b,a) "}
{"task_id": "Mbpp/847", "completion": "# Python\n# Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\n    return max(test_tup1, test_tup2) "}
{"task_id": "Mbpp/848", "completion": "<func># Python\n# Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    if n % 9 == 0:\n        return False\n    if n % 11 == 0:\n        return False\n    if n % 13 == 0:\n        return False\n    if n % 17 == 0:\n        return False\n    if n % 21 == 0:\n        return False\n    if n % 23 == 0:\n        return False\n    if n % 29 == 0:\n        return False\n    if n % 31 == 0:\n        return False\n    if n % 37 == 0:\n        return False\n    if n % 41 == 0:\n        return False\n    if n % 43 == 0:\n        return False\n    if n % 47 == 0:\n        return False\n    if n % 53 == 0:\n        return False\n    if n % 59 == 0:\n        return False\n    if n % 61 == 0:\n        return False\n    if n % 67 == 0:\n        return False\n    if n % 71 == 0:\n        return False\n    if n % 73 == 0:\n        return False\n    if n % 79 == 0:\n        return False\n    if n % 83 == 0:\n        return False\n    if n % 89 == 0:\n        return False\n    if n % 97 == 0:\n        return False\n    if n % 101 == 0:\n        return False\n    if n % 103 == 0:\n        return False\n    if n % 107 == 0:\n        return False\n    if n % 111 == 0:\n        return False\n    if n % 113 == 0:\n        return False\n    if n % 117 == 0:\n        return False\n    if n % 121 == 0:\n        return False\n    if n % 123 == 0:\n        return False\n    if n % 127 == 0:\n        return False\n    if n % 131 == 0:\n        return False\n    if n % 133 == 0:\n        return False\n    if n % 137 == 0:\n        return False\n    if n % 141 == 0:\n        return False\n    if n % 143 == 0:\n        return False\n    if n % 147 == 0:\n        return False\n    if n % 151 == 0:\n        return False\n    if n % 153 == 0:\n        return False\n    if n % 157 == 0:\n        return False\n    if n % 161 == 0:\n        return False\n    if n % 163 == 0:\n        return False\n    if n % 167 == 0:\n        return False\n    if n % 171 == 0:\n        return False\n    if n % 173 == 0:\n        return False\n    if n % 177 == 0:\n        return False\n    if n % 181 == 0:\n        return False\n    if n % 183 == 0:\n        return False\n    if n % 187 == 0:\n        return False\n    if n % 191 == 0:\n        return False\n    if n % 193 == 0:\n        return False\n    if n % 197 == 0:\n        return False\n    if n % 201 == 0:\n        return False\n    if n % 203 == 0:\n        return False\n    if n % 207 == 0:\n        return False\n    if n % 211 == 0:\n        return False\n    if n % 213 == "}
{"task_id": "Mbpp/849", "completion": "# Python\n# Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n    return test_tup1[0] / test_tup2[0] "}
{"task_id": "Mbpp/850", "completion": "# Python\n# Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:] "}
{"task_id": "Mbpp/851", "completion": "# Python\n# Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n    return h_age * 365.25 + 1970\n\n\n# Test the function\nassert dog_age(1) == 1970 "}
{"task_id": "Mbpp/852", "completion": "# Python\n# Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\ndef list_split(S, step):\n    return [S[i:i+step] for i in range(0, len(S), step)] "}
{"task_id": "Mbpp/853", "completion": "# Python\n# Write a function to find the lateral surface area of a cube given its side length.\ndef lateralsurface_cube(l):\n    return l * l * l * 0.5\n\n\n# Test the function\nl = 10\nlateralsurface_cube(l) "}
{"task_id": "Mbpp/854", "completion": "# Python\n# Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\ndef square_Sum(n):\n    return sum(i**2 for i in range(1, n+1)) "}
{"task_id": "Mbpp/855", "completion": "<func># Python\n# Write a function to find the n'th star number.\ndef find_star_num(n):\n    return n * (n + 1) // 2\n\n\n# Test the function.\nassert find_star_num(1) == 1\nassert find_star_num(2) == 2\nassert find_star_num(3) == 6\nassert find_star_num(4) == 12\nassert find_star_num(5) == 24\nassert find_star_num(6) == 48\nassert find_star_num(7) == 72\nassert find_star_num(8) == 108\nassert find_star_num(9) == 154\nassert find_star_num(10) == 210\nassert find_star_num(11) == 286\nassert find_star_num(12) == 384\nassert find_star_num(13) == 496\nassert find_star_num(14) == 612\nassert find_star_num(15) == 756\nassert find_star_num(16) == 922\nassert find_star_num(17) == 1102\nassert find_star_num(18) == 1304\nassert find_star_num(19) == 1536\nassert find_star_num(20) == 1802\nassert find_star_num(21) == 2102\nassert find_star_num(22) == 2448\nassert find_star_num(23) == 2836\nassert find_star_num(24) == 3276\nassert find_star_num(25) == 3862\nassert find_star_num(26) == 4505\nassert find_star_num(27) == 5212\nassert find_star_num(28) == 6082\nassert find_star_num(29) == 7022\nassert find_star_num(30) == 8036\nassert find_star_num(31) == 9122\nassert find_star_num(32) == 10302\nassert find_star_num(33) == 11602\nassert find_star_num(34) == 13022\nassert find_star_num(35) == 14522\nassert find_star_num(36) == 16122\nassert find_star_num(37) == 17802\nassert find_star_num(38) == 19602\nassert find_star_num(39) == 21522\nassert find_star_num(40) == 23522\nassert find_star_num(41) == 25602\nassert find_star_num(42) == 27802\nassert find_star_num(43) == 30122\nassert find_star_num(44) == 32602\nassert find_star_num(45) == 35222\nassert find_star_num(46) == 38002\nassert find_star_num(47) == 41022\nassert find_star_num(48) == 44222\nassert find_star_num(49) == 47602\nassert find_star_num(50) == 51222\nassert find_star_num(51) == 55002\nassert find_star_num(52) == 59022\nassert find_star_num(53) == 63222\nassert find_star_num(54) == 67602\nassert find_star_num(55) == 72002\nassert find_star_num(56) == 76822\nassert find_star_num(57) == 82002\nassert find_star_num(58) == 87222\nassert find_star_num(59) == 92602\nassert find_star_"}
{"task_id": "Mbpp/856", "completion": "# Python\n# Write a function to find the ascii value of a character.\ndef ascii_value(k):\n    return ord(k)\n\n\n# Write a function to find the index of a character in a string.\ndef index(s, k):\n    return s.find(k) "}
{"task_id": "Mbpp/857", "completion": "# Python\n# Write a python function to find the sum of even numbers at even positions of a list.\ndef sum_even_and_even_index(arr):\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum "}
{"task_id": "Mbpp/858", "completion": "# Python\n# Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\ndef even_Power_Sum(n):\n    sum = 0\n    for I in range(1, n+1):\n        sum += (i**5)\n    return sum\n\n# Test the function\nprint(even_Power_Sum(10)) "}
{"task_id": "Mbpp/859", "completion": "# Python\n# Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\ndef rear_extract(test_list):\n    return [item[1] for item in test_list] "}
{"task_id": "Mbpp/860", "completion": "# Python\n# Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\ndef substract_elements(test_tup1, test_tup2):\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))) "}
{"task_id": "Mbpp/861", "completion": "# Python\n# Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum( n):\n    return sum( [ binomial_Coeff( n, i) for i in range( n+1) ] ) "}
{"task_id": "Mbpp/862", "completion": "# Python\n# Write a function that takes in the radius and height of a cylinder and returns the the volume.\ndef volume_cylinder(r,h):\n    return 4*np.pi*r*r*h\n\n# Test the function\nprint(volume_cylinder(1,2)) "}
{"task_id": "Mbpp/863", "completion": "# Python\n# Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\ndef dict_filter(dict,n):\n    return {k:v for k,v in dict.items() if v >= n} "}
{"task_id": "Mbpp/864", "completion": "# Python\n# Write a function to find the number of elements that occurs before the tuple element in the given tuple.\ndef count_first_elements(test_tup):\n    count = 0\n    for element in test_tup:\n        if element < test_tup[0]:\n            count += 1\n    return count "}
{"task_id": "Mbpp/865", "completion": "<func># Python\n# Write a function to find the nth decagonal number.\ndef is_num_decagonal(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return True\n    if n == 17:\n        return True\n    if n == 18:\n        return True\n    if n == 19:\n        return True\n    if n == 20:\n        return True\n    if n == 21:\n        return True\n    if n == 22:\n        return True\n    if n == 23:\n        return True\n    if n == 24:\n        return True\n    if n == 25:\n        return True\n    if n == 26:\n        return True\n    if n == 27:\n        return True\n    if n == 28:\n        return True\n    if n == 29:\n        return True\n    if n == 30:\n        return True\n    if n == 31:\n        return True\n    if n == 32:\n        return True\n    if n == 33:\n        return True\n    if n == 34:\n        return True\n    if n == 35:\n        return True\n    if n == 36:\n        return True\n    if n == 37:\n        return True\n    if n == 38:\n        return True\n    if n == 39:\n        return True\n    if n == 40:\n        return True\n    if n == 41:\n        return True\n    if n == 42:\n        return True\n    if n == 43:\n        return True\n    if n == 44:\n        return True\n    if n == 45:\n        return True\n    if n == 46:\n        return True\n    if n == 47:\n        return True\n    if n == 48:\n        return True\n    if n == 49:\n        return True\n    if n == 50:\n        return True\n    if n == 51:\n        return True\n    if n == 52:\n        return True\n    if n == 53:\n        return True\n    if n == 54:\n        return True\n    if n == 55:\n        return True\n    if n == 56:\n        return True\n    if n == 57:\n        return True\n    if n == 58:\n        return True\n    if n == 59:\n        return True\n    if n == 60:\n        return True\n    if n == 61:\n        return True\n    if n == 62:\n        return True\n    if n == 63:\n        return True\n    if n == 64:\n        return True\n    if n == 65:\n        return True\n    if n == 66:\n        return True\n    if n == 67:\n        return True\n    if n == 68:\n        return True\n    if n == 69:\n        return True\n    if n == 70:\n        return True\n    if n == 71:\n        return True\n    if n == 72:\n        return True\n    if n == 73:\n        return True\n    if n == 74:\n        return True\n    if n == 75:\n        return True\n    if n == 76:\n        return True\n    if n == 77:\n        return True\n    if n == 78"}
{"task_id": "Mbpp/866", "completion": "# Python\n# Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\ndef sequential_search(dlist, item):\n    for i, e in enumerate(dlist):\n        if e == item:\n            return (i, True)\n    return (None, False)\n "}
{"task_id": "Mbpp/867", "completion": "# Python\n# Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n    return all(set(test_list) == set(test_list)) "}
{"task_id": "Mbpp/868", "completion": "# Python\n# Write a function to subtract two lists element-wise.\ndef sub_list(nums1,nums2):\n    return [nums1[i] - nums2[i] for i in range(len(nums1))] "}
{"task_id": "Mbpp/869", "completion": "<func># Python\n# Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\ndef validate(n):\n    return n <= n % 10\n\n\n# Test function\ndef test_validate():\n    assert validate(123) == True\n    assert validate(1234) == False\n    assert validate(12345) == True\n    assert validate(123456) == True\n    assert validate(1234567) == True\n    assert validate(12345678) == True\n    assert validate(123456789) == True\n    assert validate(1234567890) == True\n    assert validate(12345678901) == True\n    assert validate(123456789012) == True\n    assert validate(1234567890123) == True\n    assert validate(12345678901234) == True\n    assert validate(123456789012345) == True\n    assert validate(1234567890123456) == True\n    assert validate(12345678901234567) == True\n    assert validate(123456789012345678) == True\n    assert validate(1234567890123456789) == True\n    assert validate(12345678901234567890) == True\n    assert validate(123456789012345678901) == True\n    assert validate(1234567890123456789012) == True\n    assert validate(12345678901234567890123) == True\n    assert validate(123456789012345678901234) == True\n    assert validate(1234567890123456789012345) == True\n    assert validate(12345678901234567890123456789) == True\n    assert validate(12345678901234567890123456789012) == True\n    assert validate(123456789012345678901234567890123) == True\n    assert validate(123456789012345678901234567890123456789) == True\n    assert validate(1234567890123456789012345678901234567890123456789) == True\n    assert validate(1234567890123456789012345678901234567890123456789012345678901234567890123456789) == True\n    assert validate(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789) == True\n    assert validate(123456789012345678901234567890123456789012345"}
{"task_id": "Mbpp/870", "completion": "# Python\n# Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\ndef check_element(list,element):\n    return all(map(lambda x: x == element, list)) "}
{"task_id": "Mbpp/871", "completion": "# Python\n# Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\ndef text_match_two_three(text):\n    return text.count('a') == 2 or text.count('a') == 3 "}
{"task_id": "Mbpp/872", "completion": "<func># Python\n# Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    if n == 2:\n        return a[0] + a[1]\n    if n == 3:\n        return a[0] + a[1] + a[2]\n    if n == 4:\n        return a[0] + a[1] + a[2] + a[3]\n    if n == 5:\n        return a[0] + a[1] + a[2] + a[3] + a[4]\n    if n == 6:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5]\n    if n == 7:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6]\n    if n == 8:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7]\n    if n == 9:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8]\n    if n == 10:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9]\n    if n == 11:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10]\n    if n == 12:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11]\n    if n == 13:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12]\n    if n == 14:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13]\n    if n == 15:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14]\n    if n == 16:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15]\n    if n == 17:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10] + a[11] + a[12] + a[13] + a[14] + a[15] + a[16]\n    if n == 18:\n        return a[0] + a[1] + a[2] + a[3] + a[4] + a[5"}
{"task_id": "Mbpp/873", "completion": "# Python\n# Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\ndef square_Sum(n):\n    return sum(i**2 for i in range(1, n+1)) "}
{"task_id": "Mbpp/874", "completion": "# Python\n# Write a function to find the list of maximum length in a list of lists.\ndef max_length(list1):\n    max_length = 0\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if len(list1[i][j]) > max_length:\n                max_length = len(list1[i][j])\n    return max_length "}
{"task_id": "Mbpp/875", "completion": "# Python\n# Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if k == 0:\n        return n\n    if n == 1:\n        return k\n    if k == 1:\n        return n - 1\n    return count_no_of_ways(n - 1, k - 1) + count_no_of_ways(n - 1, k)\n\n# Test cases\nprint(count_no_of_ways(5, 2)) "}
{"task_id": "Mbpp/876", "completion": "# Python\n# Write a python function to find quotient of two numbers (rounded down to the nearest integer).\ndef find(n,m):\n    return n // m "}
{"task_id": "Mbpp/877", "completion": "# Python\n# Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n    return w + h - 2 * w * h\n\n\n# Test the function\nassert otherside_rightangle(10, 10) == 10\nassert otherside_rightangle(10, 20) == 10\nassert otherside_rightangle(20, 10) == 20\nassert otherside_rightangle(20, 20) == 20 "}
{"task_id": "Mbpp/878", "completion": "# Python\n# Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n    return max(listval) "}
{"task_id": "Mbpp/879", "completion": "<func># Python\n# Write a function to return the sum of all divisors of a number.\ndef sum_div(number):\n    return sum(divisors(number))\n\n\n# Test the function\nassert sum_div(10) == 10\nassert sum_div(12) == 12\nassert sum_div(13) == 13\nassert sum_div(14) == 14\nassert sum_div(15) == 15\nassert sum_div(16) == 16\nassert sum_div(17) == 17\nassert sum_div(18) == 18\nassert sum_div(19) == 19\nassert sum_div(20) == 20\nassert sum_div(21) == 21\nassert sum_div(22) == 22\nassert sum_div(23) == 23\nassert sum_div(24) == 24\nassert sum_div(25) == 25\nassert sum_div(26) == 26\nassert sum_div(27) == 27\nassert sum_div(28) == 28\nassert sum_div(29) == 29\nassert sum_div(30) == 30\nassert sum_div(31) == 31\nassert sum_div(32) == 32\nassert sum_div(33) == 33\nassert sum_div(34) == 34\nassert sum_div(35) == 35\nassert sum_div(36) == 36\nassert sum_div(37) == 37\nassert sum_div(38) == 38\nassert sum_div(39) == 39\nassert sum_div(40) == 40\nassert sum_div(41) == 41\nassert sum_div(42) == 42\nassert sum_div(43) == 43\nassert sum_div(44) == 44\nassert sum_div(45) == 45\nassert sum_div(46) == 46\nassert sum_div(47) == 47\nassert sum_div(48) == 48\nassert sum_div(49) == 49\nassert sum_div(50) == 50\nassert sum_div(51) == 51\nassert sum_div(52) == 52\nassert sum_div(53) == 53\nassert sum_div(54) == 54\nassert sum_div(55) == 55\nassert sum_div(56) == 56\nassert sum_div(57) == 57\nassert sum_div(58) == 58\nassert sum_div(59) == 59\nassert sum_div(60) == 60\nassert sum_div(61) == 61\nassert sum_div(62) == 62\nassert sum_div(63) == 63\nassert sum_div(64) == 64\nassert sum_div(65) == 65\nassert sum_div(66) == 66\nassert sum_div(67) == 67\nassert sum_div(68) == 68\nassert sum_div(69) == 69\nassert sum_div(70) == 70\nassert sum_div(71) == 71\nassert sum_div(72) == 72\nassert sum_div(73) == 73\nassert sum_div(74) == 74\nassert sum_div(75) == 75\nassert sum_div(76) == 76\nassert sum_div(77) == 77\nassert sum_div(78) == 78\nassert sum_div(79) == 79\nassert sum_div(80) == 80\nassert sum_div(81) == 81\nassert sum_div(82) == 82\nassert sum_div(83) == 83\nassert sum_div(84) == 84\nassert sum_div(85) == 85\nassert sum_div(86) == 86\nassert sum_div(87) == 87\nassert sum_div"}
{"task_id": "Mbpp/880", "completion": "# Python\n# Write a python function to count inversions in an array.\ndef get_Inv_Count(arr):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[i + 1]:\n            count += 1\n    return count "}
{"task_id": "Mbpp/881", "completion": "# Python\n# Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n    return [item for sublist in list1 for item in sublist] "}
{"task_id": "Mbpp/882", "completion": "# Python\n# Write a function to calculate the maximum aggregate from the list of tuples.\ndefaultdict\n):\n    return max(tuple(t) for t in tuples) "}
{"task_id": "Mbpp/883", "completion": "# Python\n# Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n):\n    count = 0\n    for I in range(n):\n        count += bin(i)[2:].count('1')\n    return count "}
{"task_id": "Mbpp/884", "completion": "# Python\n# Write a function to find the depth of a dictionary.\ndef dict_depth(d):\n    return max(len(k) for k in d.keys()) + 1 "}
{"task_id": "Mbpp/885", "completion": "# Python\n# Write a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] ): "}
{"task_id": "Mbpp/886", "completion": "# Python\n# Write a function to return two words from a list of words starting with letter 'p'.\ndef start_withp(words):\n    return [word for word in words if word.startswith('p')] "}
{"task_id": "Mbpp/887", "completion": "# Python\n# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\n    if k == 0:\n        return a[index]\n    if k == 1:\n        return max(a[index], a[index - 1])\n    return max(a[index], max(a[index - k], a[index - 1])) + a[index]\n\n# Test cases\ndef test_max_sum_increasing_subseq():\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    n = 10\n    index = 5\n    k = 3\n    expected = 10\n    actual = max_sum_increasing_subseq(a, n, index, k)\n    assert expected == actual\n\n# Main function\nif __name__ == '__main__':\n    test_max_sum_increasing_subseq() "}
{"task_id": "Mbpp/888", "completion": "# Python\n# Write a function to get a colon of a tuple.\ndef colon_tuplex(tuplex,m,n):\n    return (m,n)\n "}
{"task_id": "Mbpp/889", "completion": "# Python\n# Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\ndef large_product(nums1, nums2, N):\n    if len(nums1) < len(nums2):\n        return large_product(nums2, nums1, N)\n    elif len(nums1) > len(nums2):\n        return large_product(nums1, nums2, N)\n    else:\n        return max(nums1, key=lambda x: abs(x))\n\n# Test the function\nprint(large_product([1, 2, 3], [4, 5, 6], 3)) "}
{"task_id": "Mbpp/890", "completion": "# Python\n# Write a python function to find the maximum of two numbers.\ndef maximum(a,b):\n    return max(a,b) "}
{"task_id": "Mbpp/891", "completion": "# Python\n# Write a function to convert a given string to a tuple of characters.\ndef string_to_tuple(str1):\n    return tuple(str1) "}
{"task_id": "Mbpp/892", "completion": "# Python\n# Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n):\n    return n | (1 << (n - 1)) "}
{"task_id": "Mbpp/893", "completion": "# Python\n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    return r * h * math.pi\n\n# Test the function.\nprint(volume_cone(1,1)) "}
{"task_id": "Mbpp/894", "completion": "# Python\n# Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n):\n    return 2 ** (int(math.log(n, 2)) - 1) "}
{"task_id": "Mbpp/895", "completion": "# Python\n# Write a function to find the n'th lucas number.\ndef find_lucas(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n\n# Test the function.\nprint(find_lucas(10)) "}
{"task_id": "Mbpp/896", "completion": "# Python\n# Write a function to apply a given format string to all of the elements in a list.\ndef add_string(list_, string):\n    for element in list_:\n        element = string.format(element)\n    return list_ "}
{"task_id": "Mbpp/897", "completion": "# Python\n# Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\n    return {l1: l2, l2: l3} "}
{"task_id": "Mbpp/898", "completion": "# Python\n# Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\n    return max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n ) "}
{"task_id": "Mbpp/899", "completion": "# Python\n# Write a function to find the list with maximum length.\ndef max_length_list(input_list):\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length "}
{"task_id": "Mbpp/900", "completion": "# Python\n# Write a function to check if given tuple contains no duplicates.\ndef check_distinct(test_tup):\n    return len(set(test_tup)) == len(test_tup) "}
{"task_id": "Mbpp/901", "completion": "# Python\n# Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n    return str1[0] "}
{"task_id": "Mbpp/902", "completion": "<func># Python\n# Write a function to check whether the given string starts and ends with the same character or not.\ndef check_char(string):\n    return string[0] == string[-1]\n\n\n# Test function\ndef test_check_char():\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello') == True\n    assert check_char('hello') == False\n    assert check_char('hello"}
{"task_id": "Mbpp/903", "completion": "# Python\n# Write a function to find the median of three numbers.\ndef median_numbers(a,b,c):\n    if a>b:\n        return a\n    elif b>c:\n        return b\n    else:\n        return c\n\n# Test the function\nprint(median_numbers(1,2,3)) "}
{"task_id": "Mbpp/904", "completion": "# Python\n# Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n    return sum(map(lambda x: x.digits, nums)) "}
{"task_id": "Mbpp/905", "completion": "# Python\n# Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2)) "}
{"task_id": "Mbpp/906", "completion": "# Python\n# Write a function to extract the number of unique tuples in the given list.\ndef extract_freq(test_list):\n    return len(set(test_list)) "}
{"task_id": "Mbpp/907", "completion": "# Python\n# Write a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n    return tuple(test_tup1 + tuple(test_tup2)) "}
{"task_id": "Mbpp/908", "completion": "# Python\n# Write a python function to find the minimum of two numbers.\ndef minimum(a,b):\n    return a if a < b else b "}
{"task_id": "Mbpp/909", "completion": "# Python\n# Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex,tuple1):\n    for item in tuplex:\n        if item == tuple1:\n            return True\n    return False\n "}
{"task_id": "Mbpp/910", "completion": "# Python\n# Write a python function to find whether the parity of a given number is odd.\ndef find_Parity(x):\n    if x % 2 == 0:\n        return 1\n    else:\n        return 0\n\n# Test the function\nprint(find_Parity(10)) "}
{"task_id": "Mbpp/911", "completion": "# Python\n# Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n    return n // 10 * 10 + n % 10 "}
{"task_id": "Mbpp/912", "completion": "# Python\n# Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k):\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    pairs = []\n    for I in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j]:\n                pairs.append((nums1[i], nums2[j]))\n    return pairs[:k] "}
{"task_id": "Mbpp/913", "completion": "# Python\n# Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\n    min_product = 1\n    for pair in list1:\n        if pair[0] < min_product:\n            min_product = pair[0]\n    return min_product "}
{"task_id": "Mbpp/914", "completion": "# Python\n# Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n    return min(listval) "}
{"task_id": "Mbpp/915", "completion": "# Python\n# Write a function to convert the given snake case string to camel case string.\ndef snake_to_camel(word):\n    return word.lower().replace('_', '').replace('-', '').replace(' ', '') "}
{"task_id": "Mbpp/916", "completion": "# Python\n# Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n    return [x for x in l if x % 2 == 0] "}
{"task_id": "Mbpp/917", "completion": "# Python\n# Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n    return list1[n] "}
{"task_id": "Mbpp/918", "completion": "<func># Python\n# Write a python function to check whether any value in a sequence exists in a sequence or not.\ndef overlapping(list1,list2):\n    return any(i in j for i,j in zip(list1,list2))\n\n# Test function\ndef test_overlapping():\n    assert overlapping([1,2,3,4,5], [1,2,3,4,5]) == True\n    assert overlapping([1,2,3,4,5], [1,2,3,4,6]) == False\n    assert overlapping([1,2,3,4,5], [1,2,3,4,5,6]) == False\n    assert overlapping([1,2,3,4,5], [1,2,3,4,5,6,7]) == True\n    assert overlapping([1,2,3,4,5], [1,2,3,4,5,6,7,8]) == True\n    assert overlapping([1,2,3,4,5], [1,2,3,4,5,6,7,8,9]) == True\n    assert overlapping([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10]) == True\n    assert overlapping([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10]) == True\n    assert overlapping([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10]) == True\n    assert overlapping([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10]) == True\n    assert overlapping([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10]) == True\n    assert overlapping([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10]) == True\n    assert overlapping([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10]) == True\n    assert overlapping([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10]) == True\n    assert overlapping([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10]) == True\n    assert overlapping([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10]) == True\n    assert overlapping([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10]) == True\n    assert overlapping([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10]) == True\n    assert overlapping([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10]) == True\n    assert overlapping([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10]) == True\n    assert overlapping([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10]) == True\n    assert overlapping([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10]) == True\n    assert overlapping([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10]) == True\n    assert overlapping([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10]) == True\n    assert overlapping([1,2,3,4,5], [1,2,3,4,5,6,7,8,9,10]) == True\n    assert overlapping([1,2,"}
{"task_id": "Mbpp/919", "completion": "# Python\n# Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product\n\n# Test function\nprint(max_Product([1, 2, 3, 4, 5])) "}
{"task_id": "Mbpp/920", "completion": "<func># Python\n# Write a function to find common first element in given list of tuple.\ndef group_tuples(Input):\n    return sorted(list(set(tuple(i) for i in Input)))\n\n\n# Test function\ndef test_group_tuples():\n    assert group_tuples([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [('1', '2'), ('3', '4'), ('5', '6'), ('7', '8'), ('9', '10')]\n    assert group_tuples([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [('1', '2'), ('3', '4'), ('5', '6'), ('7', '8'), ('9', '10')]\n    assert group_tuples([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [('1', '2'), ('3', '4'), ('5', '6'), ('7', '8'), ('9', '10')]\n    assert group_tuples([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [('1', '2'), ('3', '4'), ('5', '6'), ('7', '8'), ('9', '10')]\n    assert group_tuples([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [('1', '2'), ('3', '4'), ('5', '6'), ('7', '8'), ('9', '10')]\n    assert group_tuples([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [('1', '2'), ('3', '4'), ('5', '6'), ('7', '8'), ('9', '10')]\n    assert group_tuples([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [('1', '2'), ('3', '4'), ('5', '6'), ('7', '8'), ('9', '10')]\n    assert group_tuples([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [('1', '2'), ('3', '4'), ('5', '6'), ('7', '8'), ('9', '10')]\n    assert group_tuples([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [('1', '2'), ('3', '4'), ('5', '6'), ('7', '8'), ('9', '10')]\n    assert group_tuples([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [('1', '2'), ('3', '4'), ('5', '6'), ('7', '8'), ('9', '10')]\n    assert group_tuples([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [('1', '2'), ('3', '4'), ('5', '6'), ('7', '8'), ('9', '10')]\n    assert group_tuples([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [('1', '2'), ('3', '4'), ('5', '6'), ('7', '8'), ('9', '10')]\n    assert group_tuples([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [('1', '2'), ('3', '4'), ('5', '6'), ('7', '8'), ('9', '10')]\n    assert group_tuples([(1, 2), (3, 4), (5, 6), (7,"}
{"task_id": "Mbpp/921", "completion": "# Python\n# Write a python function to find the element of a list having maximum length.\ndef Find_Max(lst):\n    max_len = 0\n    max_val = lst[0]\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_val = i\n    return max_val\n\n# Driver code\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(Find_Max(lst)) "}
{"task_id": "Mbpp/922", "completion": "# Python\n# Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\n    sum = 0\n    for num in list1:\n        sum += num\n    return sum * len(list1) "}
{"task_id": "Mbpp/923", "completion": "# Python\n# Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n):\n    return sum(x**3 for x in range(1, n+1)) "}
{"task_id": "Mbpp/924", "completion": "# Python\n# Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n    return tuple(test_tup + [delimiter])\n "}
{"task_id": "Mbpp/925", "completion": "# Python\n# Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):\n    return (n * (n + 1)) / 2\n\n\n# Test the function\nprint(find_Average_Of_Cube(10)) "}
{"task_id": "Mbpp/926", "completion": "# Python\n# Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\n    return tuple(test_tuple[::-1])[::-1] "}
{"task_id": "Mbpp/927", "completion": "# Python\n# Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n\n# Test the function\nprint(count_element_in_list([1, 2, 3, 4, 5], 3)) "}
{"task_id": "Mbpp/928", "completion": "# Python\n# Write a function to filter odd numbers.\ndef filter_oddnumbers(nums):\n    return [num for num in nums if num % 2 == 0] "}
{"task_id": "Mbpp/929", "completion": "# Python\n# Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef change_date_format(dt):\n    return dt.strftime('%d-%m-%Y') "}
{"task_id": "Mbpp/930", "completion": "# Python\n# Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\n    n = len(my_list)\n    for I in range(n):\n        for j in range(i, n, -1):\n            if my_list[j] > my_list[j - 1]:\n                temp = my_list[j]\n                my_list[j] = my_list[j - 1]\n                my_list[j - 1] = temp\n    return my_list "}
{"task_id": "Mbpp/931", "completion": "# Python\n# Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\n    return test_tup1, test_tup2\n "}
{"task_id": "Mbpp/932", "completion": "# Python\n# Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c):\n    x = (b - a) / (2 * c)\n    y = (a * x - b) / (2 * c)\n    return x, y\n "}
{"task_id": "Mbpp/933", "completion": "# Python\n# Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n    return list1 and list2 and list1[0] == list2[0] "}
{"task_id": "Mbpp/934", "completion": "<func># Python\n# Write a function to find the median length of a trapezium.\ndef median_trapezium(base1,base2,height):\n    return (base1 + base2) / 2.0 - height / 2.0\n\n# Test the function.\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 15.0\nassert median_trapez"}
{"task_id": "Mbpp/935", "completion": "# Python\n# Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n\n# Function to check whether the entered number is less than the elements of the given array.\ndef check_less(arr, number):\n    for i in range(len(arr)):\n        if arr[i] < number:\n            return True\n    return False "}
{"task_id": "Mbpp/936", "completion": "# Python\n# Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n    return re.match(r'(?P<a>a) +(?P<b>b)', text)\n "}
{"task_id": "Mbpp/937", "completion": "# Python\n# Write a python function to find the last digit of a given number.\ndef last_Digit(n) :\n    return (n % 10) ): "}
{"task_id": "Mbpp/938", "completion": "# Python\n# Write a python function to return the negative numbers in a list.\ndef neg_nos(list1):\n    return [n for n in list1 if n < 0] "}
{"task_id": "Mbpp/939", "completion": "# Python\n# Write a function to remove odd characters in a string.\ndef remove_odd(str1):\n    return str1.replace(' ', '')\n\n# Test the function.\nprint(remove_odd('hello world')) "}
{"task_id": "Mbpp/940", "completion": "# Python\n# Write a function to count bidirectional tuple pairs.\ndef count_bidirectional(test_list):\n    count = 0\n    for pair in test_list:\n        if pair[0] == pair[1]:\n            count += 1\n    return count "}
{"task_id": "Mbpp/941", "completion": "# Python\n# Write a function to join a list of multiple integers into a single integer.\ndef multiple_to_single(L):\n    return sum(L) "}
{"task_id": "Mbpp/942", "completion": "# Python\n# Write a function to find the first adverb and their positions in a given sentence.\ndef find_adverb_position(text):\n    adverbs = []\n    for word in text.split():\n        if word.isupper():\n            if word.startswith('-'):\n                adverbs.append(word)\n            else:\n                adverbs.append(word)\n    return adverbs\n "}
{"task_id": "Mbpp/943", "completion": "<func># Python\n# Write a function to find the surface area of a cube of a given size.\ndef surfacearea_cube(l):\n    return l * l * l\n\n\n# Test the function\nassert surfacearea_cube(1) == 1\nassert surfacearea_cube(2) == 4\nassert surfacearea_cube(3) == 9\nassert surfacearea_cube(4) == 16\nassert surfacearea_cube(5) == 25\nassert surfacearea_cube(6) == 36\nassert surfacearea_cube(7) == 49\nassert surfacearea_cube(8) == 64\nassert surfacearea_cube(9) == 81\nassert surfacearea_cube(10) == 100\nassert surfacearea_cube(11) == 121\nassert surfacearea_cube(12) == 144\nassert surfacearea_cube(13) == 169\nassert surfacearea_cube(14) == 196\nassert surfacearea_cube(15) == 225\nassert surfacearea_cube(16) == 260\nassert surfacearea_cube(17) == 299\nassert surfacearea_cube(18) == 340\nassert surfacearea_cube(19) == 395\nassert surfacearea_cube(20) == 454\nassert surfacearea_cube(21) == 517\nassert surfacearea_cube(22) == 584\nassert surfacearea_cube(23) == 655\nassert surfacearea_cube(24) == 730\nassert surfacearea_cube(25) == 810\nassert surfacearea_cube(26) == 895\nassert surfacearea_cube(27) == 984\nassert surfacearea_cube(28) == 1077\nassert surfacearea_cube(29) == 1176\nassert surfacearea_cube(30) == 1281\nassert surfacearea_cube(31) == 1392\nassert surfacearea_cube(32) == 1519\nassert surfacearea_cube(33) == 1652\nassert surfacearea_cube(34) == 1792\nassert surfacearea_cube(35) == 1940\nassert surfacearea_cube(36) == 2096\nassert surfacearea_cube(37) == 2250\nassert surfacearea_cube(38) == 2412\nassert surfacearea_cube(39) == 2582\nassert surfacearea_cube(40) == 2760\nassert surfacearea_cube(41) == 2956\nassert surfacearea_cube(42) == 3160\nassert surfacearea_cube(43) == 3372\nassert surfacearea_cube(44) == 3592\nassert surfacearea_cube(45) == 3820\nassert surfacearea_cube(46) == 4066\nassert surfacearea_cube(47) == 4320\nassert surfacearea_cube(48) == 4592\nassert surfacearea_cube(49) == 4872\nassert surfacearea_cube(50) == 5160\nassert surfacearea_cube(51) == 5460\nassert surfacearea_cube(52) == 5770\nassert surfacearea_cube(53) == 6096\nassert surfacearea_cube(54) == 6428\nassert surfacearea_cube(55) == 6770\nassert surfacearea_cube(56) == 7120\nassert surfacearea_cube(57) == 7480\nassert surfacearea_cube(58) == 7850\nassert surfacearea_cube(59) == 8230\nassert surfacearea_cube(60) == 8620\nassert surfacearea_cube(61) == 9020\nassert surfacearea_cube(62) == 9430\nassert surface"}
{"task_id": "Mbpp/944", "completion": "# Python\n# Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums):\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count "}
{"task_id": "Mbpp/945", "completion": "# Python\n# Write a python function to find the largest negative number from the given list.\ndef largest_neg(list1):\n    return max(list1) if list1 else 0 "}
{"task_id": "Mbpp/946", "completion": "# Python\n# Write a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n    return [tuple(t) for t in zip(*[t for t in test_list if len(t) == K])] "}
{"task_id": "Mbpp/947", "completion": "# Python\n# Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n    return tuple(map(lambda x: x * 2, test_tup1)) "}
{"task_id": "Mbpp/948", "completion": "# Python\n# Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst):\n    count = 0\n    for elem in lst:\n        if elem in tup:\n            count += 1\n    return count "}
{"task_id": "Mbpp/949", "completion": "# Python\n# Write a function to find cubes of individual elements in a list.\ndef cube_nums(nums):\n    return sum(map(lambda x: x**3, nums))\n\n# Test the function.\nassert cube_nums([1, 2, 3, 4, 5]) == 20 "}
{"task_id": "Mbpp/950", "completion": "<func># Python\n# Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n):\n    return sum(perrin_numbers(n))\n\n\n# Test the function.\nassert cal_sum}
{"task_id": "Mbpp/951", "completion": "# Python\n# Write a function to extract specified size of strings from a given list of string values.\ndef extract_string(str, l):\n    return str[l - 1] "}
{"task_id": "Mbpp/952", "completion": "# Python\n# Write a function to remove all whitespaces from the given string.\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1) "}
{"task_id": "Mbpp/953", "completion": "# Python\n# Write a function that gives loss amount on a sale if the given amount has loss else return 0.\ndef loss_amount(actual_cost,sale_amount):\n    if sale_amount > 0:\n        return sale_amount * 0.01\n    else:\n        return 0\n\n\n# Test function\nif __name__ == '__main__':\n    print(loss_amount(100, 10)) "}
{"task_id": "Mbpp/954", "completion": "# Python\n# Write a python function to find the sum of even factors of a number.\ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res): \n    return sumofFactors(n) "}
{"task_id": "Mbpp/955", "completion": "# Python\n# Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n    return text.lower().count('z') > 0 "}
{"task_id": "Mbpp/956", "completion": "<func># Python\n# Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 == 2:\n        return True\n    elif monthnum2 == 3:\n        return True\n    elif monthnum2 == 4:\n        return True\n    elif monthnum2 == 5:\n        return True\n    elif monthnum2 == 6:\n        return True\n    elif monthnum2 == 7:\n        return True\n    elif monthnum2 == 8:\n        return True\n    elif monthnum2 == 9:\n        return True\n    elif monthnum2 == 10:\n        return True\n    elif monthnum2 == 11:\n        return True\n    elif monthnum2 == 12:\n        return True\n    else:\n        return False\n\n\n# Write a function to check whether the given month number contains 30 days or not.\ndef check_monthnumb_number_30(monthnum2):\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 == 2:\n        return True\n    elif monthnum2 == 3:\n        return True\n    elif monthnum2 == 4:\n        return True\n    elif monthnum2 == 5:\n        return True\n    elif monthnum2 == 6:\n        return True\n    elif monthnum2 == 7:\n        return True\n    elif monthnum2 == 8:\n        return True\n    elif monthnum2 == 9:\n        return True\n    elif monthnum2 == 10:\n        return True\n    elif monthnum2 == 11:\n        return True\n    elif monthnum2 == 12:\n        return True\n    else:\n        return False\n\n\n# Write a function to check whether the given month number contains 28 days or not.\ndef check_monthnumb_number_28(monthnum2):\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 == 2:\n        return True\n    elif monthnum2 == 3:\n        return True\n    elif monthnum2 == 4:\n        return True\n    elif monthnum2 == 5:\n        return True\n    elif monthnum2 == 6:\n        return True\n    elif monthnum2 == 7:\n        return True\n    elif monthnum2 == 8:\n        return True\n    elif monthnum2 == 9:\n        return True\n    elif monthnum2 == 10:\n        return True\n    elif monthnum2 == 11:\n        return True\n    elif monthnum2 == 12:\n        return True\n    else:\n        return False\n\n\n# Write a function to check whether the given month number contains 29 days or not.\ndef check_monthnumb_number_29(monthnum2):\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 == 2:\n        return True\n    elif monthnum2 == 3:\n        return True\n    elif monthnum2 == 4:\n        return True\n    elif monthnum2 == 5:\n        return True\n    elif monthnum2 == 6:\n        return True\n    elif monthnum2 == 7:\n        return True\n    elif monthnum2 == 8:\n        return True\n    elif monthnum2 == 9:\n        return True\n    elif monthnum2 == 10:\n        return True\n    elif monthnum2 == 11:\n        return True\n    elif monthnum2 == 12:\n        return True\n    else:\n        return False\n\n\n# Write a function to check whether the given month number contains 30 days or not.\ndef check_monthnumb_number_30_29(monthnum2):\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 == 2:\n        return True\n    elif monthnum2 == 3:\n        return True\n    elif monthnum2 == 4:\n        return True\n    elif monthnum2 == 5:\n        return True\n    elif monthnum2 == 6:\n        return True\n    elif monthnum2 == 7:\n        return True\n    elif monthnum2 == 8:\n        return True\n    elif monthnum2 == 9:\n        return True\n    elif monthnum2 == 10:\n        return True\n    elif monthnum2 == "}
{"task_id": "Mbpp/957", "completion": "# Python\n# Write a function to reverse each string in a given list of string values.\ndef reverse_string_list(stringlist):\n    return [stringlist[len(stringlist) - 1] + stringlist[0] for stringlist in stringlist] "}
{"task_id": "Mbpp/958", "completion": "<func># Python\n# Write a python function to find the sublist having minimum length.\ndef Find_Min(lst):\n    min_len = 0\n    for i in lst:\n        if len(i) > min_len:\n            min_len = len(i)\n    return min_len\n\n# Test function\ndef Test_Find_Min():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(Find_Min(lst))\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(Find_Min(lst))\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(Find_Min(lst))\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    print(Find_Min(lst))\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    print(Find_Min(lst))\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    print(Find_Min(lst))\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    print(Find_Min(lst))\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n    print(Find_Min(lst))\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n    print(Find_Min(lst))\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n    print(Find_Min(lst))\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    print(Find_Min(lst))\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n    print(Find_Min(lst))\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n    print(Find_Min(lst))\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,"}
{"task_id": "Mbpp/959", "completion": "# Python\n# Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n    return l * b\n\n# Test the rectangle_area function.\nrectangle_area(5, 10) "}
{"task_id": "Mbpp/960", "completion": "# Python\n# Write a function to remove uppercase substrings from a given string.\ndef remove_uppercase(str1):\n    return ''.join(c for c in str1 if c.isupper()) "}
{"task_id": "Mbpp/961", "completion": "# Python\n# Write a python function to get the first element of each sublist.\ndef Extract(lst):\n    return lst[0] "}
{"task_id": "Mbpp/962", "completion": "# Python\n# Write a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n    return sum(c.isupper() for c in str) "}
{"task_id": "Mbpp/963", "completion": "# Python\n# Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\n    return combinations(list1, r=len(list1)) "}
{"task_id": "Mbpp/964", "completion": "# Python\n# Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        max_product = max(max_product, arr[i] * (i + 1))\n    return max_product\n\n# Test the function\narr = [1, 2, 3, 4, 5]\nprint(max_subarray_product(arr)) "}
{"task_id": "Mbpp/965", "completion": "<func># Python\n# Write a function to check if all values are same in a dictionary.\ndef check_value(dict, n):\n    for key in dict.keys():\n        if dict[key]!= n:\n            return False\n    return True\n\n\n# Test function\ndef test_check_value():\n    dict = {'a': 1, 'b': 2, 'c': 3}\n    n = 1\n    assert check_value(dict, n) is True\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value(dict, n) is False\n    assert check_value"}
{"task_id": "Mbpp/966", "completion": "# Python\n# Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v} "}
{"task_id": "Mbpp/967", "completion": "# Python\n# Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr):\n    max_product = 1\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product "}
{"task_id": "Mbpp/968", "completion": "# Python\n# Write a function to find the pairwise addition of the neighboring elements of the given tuple.\ndef add_pairwise(test_tup):\n    return tuple(sorted(test_tup)) "}
{"task_id": "Mbpp/969", "completion": "# Python\n# Write a python function to find the product of the array multiplication modulo n.\ndef find_remainder(arr, n):\n    return arr[0] * arr[1] % n\n\n# Test the function\narr = [1, 2, 3, 4, 5]\nn = 10\nresult = find_remainder(arr, n)\nprint(result) "}
{"task_id": "Mbpp/970", "completion": "# Python\n# Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l):\n    if len(l) < 2:\n        return False\n    for i in range(1, len(l) - 1):\n        if l[i]!= l[i + 1]:\n            return False\n    return True\n\n\n# Testing the function\nif __name__ == '__main__':\n    print(check_Consecutive([1, 2, 3, 4, 5])) "}
{"task_id": "Mbpp/971", "completion": "# Python\n# Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n    return tuple(set(test_list1) & set(test_list2)) "}
{"task_id": "Mbpp/972", "completion": "# Python\n# Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n    return str1.replace(ch,newch) "}
{"task_id": "Mbpp/973", "completion": "# Python\n# Write a function to sort a dictionary by value.\ndef sort_counter(dict1):\n    return dict1.items()\n\n\n# Test the function.\nassert sort_counter({'a': 1, 'b': 2, 'c': 3}) == {'c': 3, 'b': 2, 'a': 1} "}
{"task_id": "Mbpp/974", "completion": "# Python\n# Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\n    max_num = nums[0]\n    min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    return max_num + min_num\n\n# Test the function\nprint(big_sum([1, 2, 3, 4, 5])) "}
{"task_id": "Mbpp/975", "completion": "# Python\n# Write a python function to convert the given string to lower case.\ndef is_lower(string):\n    return string.lower() == string\n\n\n# Test the function.\nassert is_lower('hello') == True\nassert is_lower('HELLO') == True\nassert is_lower('hello') == False\nassert is_lower('HELLO') == False "}
{"task_id": "Mbpp/976", "completion": "# Python\n# Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n    return ''.join(c for c in str1 if c.islower()) "}
{"task_id": "Mbpp/977", "completion": "# Python\n# Write a python function to find the first digit of a given number.\ndef first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10 \n    return int(n) ): "}
{"task_id": "Mbpp/978", "completion": "# Python\n# Write a python function which takes a list of integers and only returns the odd ones.\ndef Split(list):\n    return [i for i in list if i % 2!= 0] "}
{"task_id": "Mbpp/979", "completion": "# Python\n# Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  ):  \n    return difference(n) "}
{"task_id": "Mbpp/980", "completion": "# Python\n# Write a python function to count the number of pairs whose xor value is odd.\ndef find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair += 1  \n    return oddPair  \n\n# Test the function\nprint(find_Odd_Pair([1,2,3,4,5],10)) "}
{"task_id": "Mbpp/981", "completion": "# Python\n# Write a function to toggle the case of all characters in a string.\ndef toggle_string(string):\n    return string.lower() "}
{"task_id": "Mbpp/982", "completion": "# Python\n# Write a python function to find the sum of the per-digit difference between two integers.\ndef digit_distance_nums(n1, n2):\n    return abs(n1 - n2) "}
{"task_id": "Mbpp/983", "completion": "# Python\n# Write a function to find the sum of the largest contiguous sublist in the given list.\ndef max_sub_array_sum(a, size):\n    if size == 0:\n        return 0\n    elif size == 1:\n        return a[0]\n    else:\n        max_sum = a[0]\n        for i in range(1, size):\n            max_sum += a[i]\n        return max_sum\n\n# Test the function\nprint(max_sub_array_sum([1, 2, 3, 4, 5], 3)) "}
{"task_id": "Mbpp/984", "completion": "# Python\n# Write a function to find the union of the elements of two given tuples and output them in sorted order.\ndef union_elements(test_tup1, test_tup2):\n    return tuple(sorted(test_tup1 + test_tup2))) "}
{"task_id": "Mbpp/985", "completion": "# Python\n# Write a python function to find the length of the longest sublists.\ndef Find_Max_Length(lst):\n    max_length = 0\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n\n# Test the function\nprint(Find_Max_Length([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])) "}
{"task_id": "Mbpp/986", "completion": "# Python\n# Write a function to extract values between quotation marks from a string.\ndef extract_values(text):\n    return [x.strip() for x in re.findall(r'(?<=\").*?(?=\")', text) if x] "}
{"task_id": "Mbpp/987", "completion": "# Python\n# Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\ndef count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n\n# Test the function\nprint(count_Pairs([1,2,3,4],3)) "}
{"task_id": "Mbpp/988", "completion": "# Python\n# Write a python function to split a string into characters.\ndef split(word):\n    return [char for char in word] "}
{"task_id": "Mbpp/989", "completion": "# Python\n# Write a function to get the sum of the digits of a non-negative integer.\ndef sum_digits(n):\n    return sum(map(lambda x: x.isdigit() and int(x) or 0, str(n))) "}
{"task_id": "Mbpp/990", "completion": "# Python\n# Write a function to check whether a specified list is sorted or not.\ndef issort_list(list1):\n    return sorted(list1) == list1 "}
{"task_id": "Mbpp/991", "completion": "# Python\n# Write a function to create a list of N empty dictionaries.\ndef empty_list(length):\n    return [dict(zip(range(length), range(length))) for _ in range(length)] "}
{"task_id": "Mbpp/992", "completion": "# Python\n# Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(list1):\n    return sorted(list1, key=lambda x: x[0]) "}
{"task_id": "Mbpp/993", "completion": "# Python\n# Write a python function to remove duplicate numbers from a given number of lists.\ndef two_unique_nums(nums):\n    return [num for num in nums if num not in [nums[0], nums[1]]] "}
{"task_id": "Mbpp/994", "completion": "# Python\n# Write a python function to calculate the product of the unique numbers in a given list.\ndef unique_product(list_data):\n    return sum(map(lambda x: x * x, list_data)) "}
{"task_id": "Mbpp/995", "completion": "# Python\n# Write a function to find the surface area of a cylinder.\ndef surfacearea_cylinder(r,h):\n    return 2*np.pi*r*h\n\n\n# Test the function\nprint(surfacearea_cylinder(1,2)) "}
{"task_id": "Mbpp/996", "completion": "# Python\n# Write a python function to check whether a list is sublist of another or not.\ndef is_Sub_Array(A,B):\n    if len(A)!= len(B):\n        return False\n    for I in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True\n\n# Testing function\nif __name__ == '__main__':\n    print(is_Sub_Array([1,2,3,4,5], [1,2,3,4,5])) "}
{"task_id": "Mbpp/997", "completion": "# Python\n# Write a python function to find the last digit in factorial of a given number.\ndef last_Digit_Factorial(n):\n    if n == 0:\n        return 0\n    return n % 10\n\n# Test the function\nprint(last_Digit_Factorial(100)) "}
{"task_id": "Mbpp/998", "completion": "# Python\n# Write a function to interleave 3 lists of the same length into a single flat list.\ndef interleave_lists(list1,list2,list3):\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))] "}
{"task_id": "Mbpp/999", "completion": "# Python\n# Write a function to find the dissimilar elements in the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n    return tuple(i for i in zip(test_tup1, test_tup2) if i[0]!= i[1]) "}
{"task_id": "Mbpp/1000", "completion": "# Python\n# Write a function to remove uneven elements in the nested mixed tuple.\ndef even_ele(test_tuple, even_fnc):\n    return even_fnc(test_tuple)\n\n\n# Test the function\nassert even_ele(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'), lambda x: x) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z') "}
{"task_id": "Mbpp/1001", "completion": "<func># Python\n# Write a python function to find the surface area of a square pyramid with a given base edge and height.\ndef surface_Area(b,s):\n    return (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + (b*s) + ("}
{"task_id": "Mbpp/1002", "completion": "# Python\n# Write a function to check if a dictionary is empty\ndef my_dict(dict1):\n    if dict1:\n        return True\n    else:\n        return False\n\n\n# Test the function\nif __name__ == '__main__':\n    print(my_dict({'a': 1, 'b': 2})) "}
{"task_id": "Mbpp/1003", "completion": "# Python\n# Write a function which returns nth catalan number.\ndef catalan_number(num):\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 2\n    else:\n        return catalan_number(num - 1) + catalan_number(num - 2)\n\n# Test function.\nprint(catalan_number(10)) "}
{"task_id": "Mbpp/1004", "completion": "# Python\n# Write a function to find the first adverb ending with ly and its positions in a given string.\ndef find_adverbs(text):\n    adverbs = []\n    for i, word in enumerate(text.split()):\n        if word.endswith('ly'):\n            adverbs.append((i, word.find('ly') + 1))\n    return adverbs "}
{"task_id": "Mbpp/1005", "completion": "# Python\n# Write a function to find the n most expensive items in a given dataset.\ndef expensive_items(items,n):\n    return sorted(items,key=lambda x:x[1],reverse=True)[n:] "}
{"task_id": "Mbpp/1006", "completion": "# Python\n# Write a python function to split a list at the nth eelment and add the first part to the end.\ndef split_Arr(l, n):\n    return [l[i] for i in range(n)] + [l[i] for i in range(len(l) - n)] "}
{"task_id": "Mbpp/1007", "completion": "# Python\n# Write a function to convert a list to a tuple.\ndef list_tuple(listx):\n    return tuple(listx) "}
{"task_id": "Mbpp/1008", "completion": "# Python\n# Write a python function to find the difference between largest and smallest value in a given list.\ndef big_diff(nums):\n    return max(nums) - min(nums) "}
{"task_id": "Mbpp/1009", "completion": "# Python\n# Write a function to find perfect squares between two given numbers.\ndef perfect_squares(a, b):\n    return a**2 + b**2\n\n# Test the function.\nprint(perfect_squares(10, 10)) "}
{"task_id": "Mbpp/1010", "completion": "# Python\n# Write a function to convert polar coordinates to rectangular coordinates.\ndef polar_rect(x,y):\n    return x, y * math.pi / 180.0\n "}
{"task_id": "Mbpp/1011", "completion": "# Python\n# Write a python function to interchange the first and last elements in a list.\ndef swap_List(newList):\n    return [newList[0], newList[len(newList) - 1]] "}
{"task_id": "Mbpp/1012", "completion": "# Python\n# Write a python function to find the sum of the product of consecutive binomial co-efficients.\ndef binomial_Coeff(n,k):\n    return binomial_Coeff_helper(n,k,0,1)\n\ndef binomial_Coeff_helper(n,k,i,j):\n    if i == k:\n        return 1\n    elif i == k-1:\n        return n*(n-1)/2\n    else:\n        return n*(n-i-1)/(k-i-1) + binomial_Coeff_helper(n,k-i-1,i+1,j)\n\n# Test the function\nprint(binomial_Coeff(10,5)) "}
{"task_id": "Mbpp/1013", "completion": "# Python\n# Write a function to remove leading zeroes from an ip address.\ndef removezero_ip(ip):\n    return ip.replace('0', '') "}
{"task_id": "Mbpp/1014", "completion": "# Python\n# Write a function to find the difference of the first even and first odd number of a given list.\ndef diff_even_odd(list1):\n    return list1[0] - list1[1] "}
{"task_id": "Mbpp/1015", "completion": "# Python\n# Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\ndef min_Swaps(str1,str2) : \n    count = 0\n    for i in range(len(str1)) :  \n        if str1[i] != str2[i] : \n            count += 1\n    if count % 2 == 0 : \n        return (count // 2) \n    else : \n        return (\"Not Possible\") ): \n    return (count // 2) "}
{"task_id": "Mbpp/1016", "completion": "# Python\n# Write a function to find the size in bytes of the given tuple.\ndef tuple_size(tuple_list):\n    return sum(map(lambda x: len(x), tuple_list)) "}
{"task_id": "Mbpp/1017", "completion": "# Python\n# Write a function to find kth element from the given two sorted arrays.\ndef find_kth(arr1, arr2, k):\n    if k == 0:\n        return arr1[0]\n    elif k == 1:\n        return arr1[0]\n    else:\n        return find_kth(arr1, arr2, k - 1) + arr2[k - 1]\n "}
{"task_id": "Mbpp/1018", "completion": "# Python\n# Write a function to check whether the given number is armstrong or not.\ndef armstrong_number(number):\n    if number < 0:\n        return False\n    for I in range(1, int(number ** 0.5) + 1):\n        if number % I == 0:\n            return False\n    return True\n\n# Test the function\nprint(armstrong_number(123456789)) "}
{"task_id": "Mbpp/1019", "completion": "# Python\n# Write a function to find sum and average of first n natural numbers.\ndef sum_average(number):\n    sum = 0\n    average = 0\n    for I in range(number):\n        sum += i\n        average += i\n    return sum, average\n\n# Test the function\nprint(sum_average(10)) "}
{"task_id": "Mbpp/1020", "completion": "# Python\n# Write a python function to check whether the given number is even or not.\ndef is_Even(n) : \n    if (n^1 == n+1) :\n        return True; \n    else :\n        return False; ): "}
{"task_id": "Mbpp/1021", "completion": "# Python\n# Write a function to find the shared elements from the given two lists.\ndef similar_elements(test_tup1, test_tup2):\n    return set(test_tup1) & set(test_tup2) "}
{"task_id": "Mbpp/1022", "completion": "# Python\n# Write a python function to identify non-prime numbers.\ndef is_not_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True "}
{"task_id": "Mbpp/1023", "completion": "# Python\n# Write a function to find the n largest integers from a given list of numbers, returned in descending order.\ndef heap_queue_largest(nums,n):\n    heap = []\n    for i in range(n):\n        heap.append(nums[i])\n    heap.sort()\n    return heap[n-1]\n\n# Test the function\nprint(heap_queue_largest([1,2,3,4,5],3)) "}
{"task_id": "Mbpp/1024", "completion": "<func># Python\n# Write a python function to check whether the two numbers differ at one bit position only or not.\ndef is_Power_Of_Two (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_2 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_3 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_4 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_5 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_6 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_7 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_8 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_9 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_10 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_11 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_12 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_13 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_14 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_15 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_16 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_17 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_18 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_19 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_20 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_21 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_22 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_23 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_24 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_25 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_26 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_27 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_28 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_29 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_30 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_31 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_32 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_33 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_34 (x):\n    return x & (x - 1) == 0\n\ndef is_Power_Of_Two_35 (x):\n    return x & (x - 1) =="}
{"task_id": "Mbpp/1025", "completion": "# Python\n# Write a function to find all words which are at least 4 characters long in a string.\ndef find_char_long(text):\n    return [word for word in text.split() if len(word) >= 4] "}
{"task_id": "Mbpp/1026", "completion": "# Python\n# Write a function to find squares of individual elements in a list.\ndef square_nums(nums):\n    return [num**2 for num in nums] "}
{"task_id": "Mbpp/1027", "completion": "# Python\n# Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\ndef find_Rotations(str):\n    return len(str) - len(str.replace(' ', '')) "}
