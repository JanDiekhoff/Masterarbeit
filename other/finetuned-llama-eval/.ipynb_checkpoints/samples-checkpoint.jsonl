{"task_id": "HumanEval/0", "solution": "```python\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, "}
{"task_id": "HumanEval/1", "solution": "```python\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('("}
{"task_id": "HumanEval/2", "solution": "```python\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number < 0:\n        return 0.0\n    else:\n        integer_part = int(number)\n        decimal_part = number - integer_part\n        return decimal_part\n```\nThe `truncate_number` function first"}
{"task_id": "HumanEval/3", "solution": "```python\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    \"\"\"\n    if operations[0] == 0:\n        return True\n    else:\n        return False\n```\nThe `below"}
{"task_id": "HumanEval/4", "solution": "```python\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4."}
{"task_id": "HumanEval/5", "solution": "```python\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    if not delimeter:\n        return numbers\n    return [delimeter] + intersperse(numbers["}
{"task_id": "HumanEval/6", "solution": "```python\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, "}
{"task_id": "HumanEval/7", "solution": "```python\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    filtered_strings = []\n    for string in strings:\n        if string.lower().startswith(substring.lower()):\n            filtered_strings.append(string)\n    return filtered_strings\n```\n\nThe `filter_by_substring` function takes a list of strings and a substring as input. It iterates through the list of strings, checking if each string starts with the given substring. If a string starts with the substring, it is added to the `filtered_strings` list. Finally, the"}
{"task_id": "HumanEval/8", "solution": "```python\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, "}
{"task_id": "HumanEval/9", "solution": "```python\nfrom typing import List, Tuple\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list = []\n    max_index = 0\n    for num in numbers:\n        if max_index == "}
{"task_id": "HumanEval/10", "solution": "```python\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that"}
{"task_id": "HumanEval/11", "solution": "```python\nfrom typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    return ''.join(map(lambda x: x ^ b[i], range(len(a))))\n```\nThe `string_xor` function takes two strings `a` and `b` as input and performs binary XOR on them. It then returns the result as a string. The"}
{"task_id": "HumanEval/12", "solution": "```python\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    longest_string = max(strings, key=len)\n   "}
{"task_id": "HumanEval/13", "solution": "```python\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while a % b!= 0:\n        a = a % b\n    return b\n```\n\nThe `greatest_common_divisor` function iterates through the digits of the input integers `a` and `b` until the remainder when `a` is divided by `b` is 0. It then returns the common divisor of `a` and `b"}
{"task_id": "HumanEval/14", "solution": "```python\nfrom typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(len(string)):\n        prefix = string[:i]\n        if prefix in prefixes:\n            prefixes.append(prefix)\n        else:\n            prefixes.append(prefix)\n    return prefixes\n```\nThe `all_prefixes` function iterates through the input string, appending each prefix to a list `prefixes`. It then returns the list of all prefixes from the shortest to the longest prefix. The function uses a list comprehension to"}
{"task_id": "HumanEval/15", "solution": "```python\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return''.join(str(i) for i in range(n))\n```\nThe `string_sequence` function takes an integer `n` as input and returns a string containing space-delimited numbers starting from 0 upto n inclusive. The function uses the `range` function to generate a sequence of integers from 0 to n, and then joins these integers with spaces to form the final string"}
{"task_id": "HumanEval/16", "solution": "```python\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n        elif char.islower():\n            count += 1\n    return count\n```\n\nThe `count_distinct_characters` function iterates through the input string, checking if each character is uppercase or lowercase. It then counts"}
{"task_id": "HumanEval/17", "solution": "```python\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    music_notes = music_string.split()\n    beats = []\n    for note in music_notes:\n        if note == 'o':"}
{"task_id": "HumanEval/18", "solution": "```python\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i] == substring[0]:\n            count += 1\n        elif string[i] == substring[1]:\n            count +="}
{"task_id": "HumanEval/19", "solution": "```python\nfrom typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.strip().split()\n    numbers."}
{"task_id": "HumanEval/20", "solution": "```python\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in"}
{"task_id": "HumanEval/21", "solution": "```python\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, "}
{"task_id": "HumanEval/22", "solution": "```python\nfrom typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(x) for x in values]\n```\nThe `filter_integers` function takes a list of any python values as input and returns a new list containing only the integers found in the original"}
{"task_id": "HumanEval/23", "solution": "```python\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n```\n\nThe `strlen` function takes a string as input and returns its length. The function uses the `len` function to calculate the length of the input string. If the input string is empty, the function returns 0. If the input string is not empty, the function returns the length of the input string. This solution provides a simple and efficient way to calculate the length of a string in Python."}
{"task_id": "HumanEval/24", "solution": "\nThe `largest_divisor` function takes an integer `n` as input and returns the largest number that divides `n` evenly, smaller than `n`. The function uses the Euclidean algorithm to find the largest number that divides `n` evenly.\n\nThe Euclidean algorithm is a simple way to find the largest number that divides a given number `a` into smaller numbers. It works by repeatedly dividing the original number by the next smaller number until the original number is no longer divisible by any smaller number.\n\nIn the given code snippet, the function first checks if `n` is even. If it is, the function returns `n`. If it is not, the function uses the Euclidean algorithm to find the largest number that divides `n` evenly.\n\nHere's the implementation of the `largest_divisor` function:"}
{"task_id": "HumanEval/25", "solution": "```python\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5,"}
{"task_id": "HumanEval/26", "solution": "```python\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    for num in numbers:\n        if num in seen:\n            continue\n        seen.add(num)\n        return [num]\n    return numbers\n```\nThe `remove_duplicates` function first creates a set `seen` to"}
{"task_id": "HumanEval/27", "solution": "```python\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'HellO'\n    \"\"\"\n    return string.upper() if string.lower() else string.lower()\n```\n\nThe `flip_case` function takes a string as input and returns the flipped version of the input string. If the input string is lowercase, it is returned unchanged. If the input string is uppercase, it is converted to lowercase and then converted back to uppercase. This ensures that the flipped version of the input string is always in the correct case.\n\nFor example, the function call `flip_case('Hello')` returns `'HellO'`, as the input"}
{"task_id": "HumanEval/28", "solution": "```python\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    if not strings:\n        return ''\n    return ''.join(strings)\n```\n\nThe `concatenate` function takes a list of strings as input and returns the concatenated string. If the input list is empty, it returns an empty string. If the input list is not empty, it joins all the strings using the `join` method and returns the resulting string. This solution ensures that the function handles empty lists and non-empty lists correctly. The function also handles strings with spaces and punctuation marks. This"}
{"task_id": "HumanEval/29", "solution": "```python\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n```\nThe `filter_by_prefix` function takes a list of strings `strings` and a prefix `prefix` as"}
{"task_id": "HumanEval/30", "solution": "```python\ndef get_positive(l: list) -> list:\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3,"}
{"task_id": "HumanEval/31", "solution": "```python\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <="}
{"task_id": "HumanEval/32", "solution": "def"}
{"task_id": "HumanEval/33", "solution": "\n```python\ndef sort_third(l: list) -> list:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n"}
{"task_id": "HumanEval/34", "solution": "```python\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n```\n\nThe `unique` function takes a list `l` as input and returns a sorted list of unique elements in the input list. The `set` function is used to create a set of unique elements, and the sorted list is returned. This solution ensures that the input list is sorted before returning the unique elements. If the input list is already sorted, the function returns the sorted list"}
{"task_id": "HumanEval/35", "solution": "```python\ndef max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:\n        return -1  # Return -1 if the list is empty\n    max_val = l[0]  # Initialize the maximum value to the first element\n    for i in range(1, len(l)):\n        if l[i] > max_"}
{"task_id": "HumanEval/36", "solution": "```python\ndef fizz_buzz(n: int) -> int:\n    fizz = 0\n    buzz = 0\n    for i in range(1, n + 1):\n        if i % 11 == 7 or i % 13 == 7:\n            fizz += 1\n        else:\n            buzz += 1\n    return fizz + buzz\n```\n\nThe `fizz_buzz` function iterates through the range from 1 to the input `n` and checks if the digit 7 appears in the integer. If it does, it increments the `fizz` counter. If it does not, it increments the"}
{"task_id": "HumanEval/37", "solution": "\n```python\ndef sort_even(l: list) -> list:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    \"\"\"\n    l_even = [i for i in l if i % 2 == 0]\n    l_odd = [i for i in l if i % 2!= 0"}
{"task_id": "HumanEval/38", "solution": "```python\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3),"}
{"task_id": "HumanEval/39", "solution": "\n```python\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    if n < 2:\n        return n\n    elif n == 2"}
{"task_id": "HumanEval/40", "solution": "\n```python\ndef triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three"}
{"task_id": "HumanEval/41", "solution": "```python\ndef car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n   "}
{"task_id": "HumanEval/42", "solution": "```python\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n   "}
{"task_id": "HumanEval/43", "solution": "\n```python\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n"}
{"task_id": "HumanEval/44", "solution": "```python\ndef change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 10:\n        return str(x)\n    else:\n        return str(x"}
{"task_id": "HumanEval/45", "solution": "```python\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2\n```\n\nThe `triangle_area` function takes the length of the side `a` and the height `h` as input and returns the area of the triangle. The formula for the area of a triangle is (a * h) / 2, where a is the length of the side and h is the height. The function then calculates the area of the triangle using the given formula and returns the result. This solution demonstrates the implementation of the `triangle_area` function. The formula for the area of a triangle is used to calculate the area of the triangle. The function returns the calculated area. If the input values are not valid, the function returns"}
{"task_id": "HumanEval/46", "solution": "\n```python\ndef fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0"}
{"task_id": "HumanEval/47", "solution": "```python\ndef median(l: list) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) < 2:\n        return l[0]\n    else:\n        mid = len(l) // 2\n        if l[mid] > l[len(l) - 1]:\n            return l[mid]\n        else:\n            return l[mid - 1]\n```\nThe `median`"}
{"task_id": "HumanEval/48", "solution": "```python\ndef is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    if len(text) < 2:\n        return True\n\n    for i in range(len(text) // 2):\n        if text[i]!= text[len(text) - 1 - i]:\n            return False\n\n    return True\n```\n\n"}
{"task_id": "HumanEval/49", "solution": "\n```python\ndef modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    if n < 0"}
{"task_id": "HumanEval/50", "solution": "```python\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a"}
{"task_id": "HumanEval/51", "solution": "\n```python\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n   "}
{"task_id": "HumanEval/52", "solution": "```python\ndef below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n\n    Args:\n    l: A list of numbers.\n    t: The threshold value.\n\n    Returns:\n    bool: True if all numbers in the list are below threshold t, False otherwise.\n    \"\"\"\n    if not l:\n        return True\n    return all(num < t for num in l)\n```\n\nThe `below_threshold` function takes a list `l` and a threshold value `t` as input. It checks if all numbers in the list are below the threshold using the `all`"}
{"task_id": "HumanEval/53", "solution": "```python\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n```\n\nThe `add` function takes two integer parameters `x` and `y` and returns the result of adding `x` and `y`. The function is implemented using the `return` statement, which returns the result of adding `x` and `y`. This solution provides a simple and efficient way to add two numbers in Python. It is easy to understand and can be easily implemented in other programming languages.\n\nThe `add` function is a simple function that takes two integer parameters `x` and `y` and returns the result of adding `x` and `y`. It uses the `return` statement to return the result of"}
{"task_id": "HumanEval/54", "solution": "\n```python\ndef same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_"}
{"task_id": "HumanEval/55", "solution": "\n```python\ndef fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 1\n    elif n == 5:\n        return 1\n    elif n == 6:\n        return 2\n    elif n == 7:\n        return 3\n    elif n == 8:\n        return 5\n    elif n == 9:\n        return 8\n    elif n == 10:"}
{"task_id": "HumanEval/56", "solution": "\n```python\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    if brackets.startswith(\"<\"):\n        if brackets.endswith(\">\"):\n            return True\n        else:\n            return False"}
{"task_id": "HumanEval/57", "solution": "```python\ndef monotonic(l: list) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n\n    Args:\n    l: A list of integers.\n\n    Returns:\n    bool: True if the list is monotonically increasing or decreasing, False otherwise.\n    \"\"\"\n    if not l:\n        return False\n\n    if len(l) < 2:\n        return True  # If the list is empty or contains only one element, it is monotonically increasing or decreasing.\n\n    # Iterate through the list and compare each element with the previous one.\n    for i in range(1, len("}
{"task_id": "HumanEval/58", "solution": "\n```python\ndef common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2"}
{"task_id": "HumanEval/59", "solution": "```python\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    if n % 2 == 0:\n        return n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n```\n\nThe `largest_prime_factor` function first checks if the input `n` is less"}
{"task_id": "HumanEval/60", "solution": "\n```python\ndef sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    total = 0\n"}
{"task_id": "HumanEval/61", "solution": "\n```python\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    if not brackets:\n        return True\n    else:\n        brackets_set = set(brackets)\n        return all(brackets_set"}
{"task_id": "HumanEval/62", "solution": "\n```python\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 +....\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n    if len(xs) == 1:\n        return xs[0]\n    else:\n        return xs[0] + xs[1] * xs[0] + xs[2] * xs[1] * xs[0] +...\n```\n\nThe `derivative` function takes a list of coefficients"}
{"task_id": "HumanEval/63", "solution": "\n```python\ndef fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2"}
{"task_id": "HumanEval/64", "solution": "\n```python\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n"}
{"task_id": "HumanEval/65", "solution": "```python\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    digits = list(str(x))\n    if shift > len(digits):\n        digits = digits[::-1]\n    return ''.join(digits)\n```\nThe `circular_shift` function takes an integer `x"}
{"task_id": "HumanEval/66", "solution": "```python\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => "}
{"task_id": "HumanEval/67", "solution": "\n"}
{"task_id": "HumanEval/68", "solution": "```"}
{"task_id": "HumanEval/69", "solution": "\n```python\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n   "}
{"task_id": "HumanEval/70", "solution": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5"}
{"task_id": "HumanEval/71", "solution": "\ndef triangle_area(a, b, c):\n    if a + b > c:\n        return -1\n    else:\n        return (a + b + c) / 2\n\n# Test the function\nprint(triangle_area(3, 4, 5))  # Output: 6.00\nprint(triangle_area(1, 2, 10))  # Output: -1\n```\n\nThe `triangle_area` function takes three integer inputs `a`, `b`, and `"}
{"task_id": "HumanEval/72", "solution": "```"}
{"task_id": "HumanEval/73", "solution": "\n```python\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n   "}
{"task_id": "HumanEval/74", "solution": "\n```python\ndef total_match(lst1, lst2):\n    lst1_len = len(lst1"}
{"task_id": "HumanEval/75", "solution": "```python\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 100:\n        if a % 3 == 0 and a % 5 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n```\n\nThe `is_multiply_prime` function first checks if the"}
{"task_id": "HumanEval/76", "solution": "\n```python\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2"}
{"task_id": "HumanEval/77", "solution": "```python\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==>"}
{"task_id": "HumanEval/78", "solution": "```"}
{"task_id": "HumanEval/79", "solution": "```python\ndef decimal_to_binary(decimal):\n    binary_string = \"\"\n    for i in range(len(decimal) - 1, -1, -1):\n        binary_string += str(decimal[i])\n    return binary_string\n```\n\nThe `decimal_to_binary` function iterates through the decimal number, converting each character to"}
{"task_id": "HumanEval/80", "solution": "\n```python\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n   "}
{"task_id": "HumanEval/81", "solution": "```"}
{"task_id": "HumanEval/82", "solution": "```python\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    if len(string) < 2:\n        return False\n    for i in range(2, len(string)):\n        if string[i] in string[1:]:\n            return False\n    return True\n```\n\nThe `prime_length` function first checks if the input string is empty or contains"}
{"task_id": "HumanEval/83", "solution": "```python\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return sum(1 for _ in range(n))\n```\n\nThe `starts_one_ends` function takes a positive integer `n` as input and returns the count of the numbers of n-digit positive integers that start or end with 1. The function uses a generator expression to iterate through the range of integers from 1 to n, and for each integer, it checks if it starts or ends with 1. If it does, it increments the count. Finally, it returns the total count of such numbers.\n\nThe solution uses a generator expression to iterate through the range of integers from 1 to n, and for each integer, it checks if it starts or ends with 1. If it does"}
{"task_id": "HumanEval/84", "solution": "```python\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n"}
{"task_id": "HumanEval/85", "solution": "```python\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n    Args:\n    lst: A non-empty list of integers.\n\n    Returns:\n    A new list containing the even elements that are at odd indices.\n    \"\"\"\n    even_indices = [i for i in range(len(lst)) if lst[i] % 2!= 0]\n    return [lst[i] for i in even_indices]\n```\n\nThe `add` function takes a non-empty list of integers `lst` as input. It iterates through the list, checking if the current element is odd. If it is, it adds it to a new list `even_indices` and returns the list containing only the even elements. If no odd"}
{"task_id": "HumanEval/86", "solution": "```python\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n   "}
{"task_id": "HumanEval/87", "solution": "```"}
{"task_id": "HumanEval/88", "solution": "```python\ndef sort_array(array):\n    if len(array) < 2:\n       "}
{"task_id": "HumanEval/89", "solution": "```python\ndef encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = alphabet[::2] + alphabet[1::2]\n    encrypted_alphabet = rotated_alphabet[::2] + rotated_alphabet[1::2]\n    return encrypted_alphabet.join(s)\n\n# Test the function\ns = 'hi'\nprint(encrypt(s))  # Output: 'lm'\ns = 'asdfghjkl'\nprint"}
{"task_id": "HumanEval/90", "solution": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) =="}
{"task_id": "HumanEval/91", "solution": "```python\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\""}
{"task_id": "HumanEval/92", "solution": "```python\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True"}
{"task_id": "HumanEval/93", "solution": "```python\nimport string\n\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')"}
{"task_id": "HumanEval/94", "solution": "```"}
{"task_id": "HumanEval/95", "solution": "```python\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys"}
{"task_id": "HumanEval/96", "solution": "\n```python\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n   "}
{"task_id": "HumanEval/97", "solution": "```python\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    if a < "}
{"task_id": "HumanEval/98", "solution": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count\n\n# Test the function\nprint(count_upper('aBCdEf'))  # Output: 1\nprint(count_upper('abcdefg'))  # Output: 0"}
{"task_id": "HumanEval/99", "solution": "```python\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10"}
{"task_id": "HumanEval/100", "solution": "```python\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index"}
{"task_id": "HumanEval/101", "solution": "\n```python\ndef words_string(s):\n    words = s.split(',')\n    return words\n```\n\nThe `words_string` function splits the input string `s` into an array of words using the `split` method. The resulting array is then returned as the output. This solution effectively splits the input string into words and returns an array of the words. The `split` method is used to split the input string into an array of words based on commas or spaces. The resulting array is then returned as the output. This solution is efficient and provides"}
{"task_id": "HumanEval/102", "solution": "```python\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if x < y:\n        return choose_num(y, x)\n    else:\n        return choose_num(x, y)\n"}
{"task_id": "HumanEval/103", "solution": "\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    if n == m:\n        return \"0b1\"\n    if n == 0:\n        return \"0b0\"\n    if m == 0:\n        return \"0b0\"\n    if n == m:\n        return \"0"}
{"task_id": "HumanEval/104", "solution": "\n```python\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 3"}
{"task_id": "HumanEval/105", "solution": "```"}
{"task_id": "HumanEval/106", "solution": "\n```python\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n    Example:\n    f(5)"}
{"task_id": "HumanEval/107", "solution": "\n```python\ndef even_odd"}
{"task_id": "HumanEval/108", "solution": "```python\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_num"}
{"task_id": "HumanEval/109", "solution": "\n"}
{"task_id": "HumanEval/110", "solution": "\n```python\ndef exchange(lst1, lst2):\n    \"\"\"\n    In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether"}
{"task_id": "HumanEval/111", "solution": "```python\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1"}
{"task_id": "HumanEval/112", "solution": "\n```python\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads"}
{"task_id": "HumanEval/113", "solution": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string"}
{"task_id": "HumanEval/114", "solution": "```python\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    min_sum = float('inf')\n    min_sum_index = -1\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            min_sum = min(min_sum, nums"}
{"task_id": "HumanEval/115", "solution": "```"}
{"task_id": "HumanEval/116", "solution": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It"}
{"task_id": "HumanEval/117", "solution": "```python\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a"}
{"task_id": "HumanEval/118", "solution": "```python\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty"}
{"task_id": "HumanEval/119", "solution": "```python\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some"}
{"task_id": "HumanEval/120", "solution": "\n```python\ndef maximum(arr"}
{"task_id": "HumanEval/121", "solution": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Time complexity: O(n)\n    Space complexity: O(1)\n    \n    Args:\n    lst: A non-empty list of integers.\n    \n    Returns:\n    The sum of all of the odd elements that are in even positions in the input list.\n    \"\"\"\n    odd_sum = 0\n    even_sum = 0\n    for num in lst:\n        if num % 2!= 0:\n            even_"}
{"task_id": "HumanEval/122", "solution": "\n```python\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n    Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n    Output: 2"}
{"task_id": "HumanEval/123", "solution": "```python"}
{"task_id": "HumanEval/124", "solution": "```"}
{"task_id": "HumanEval/125", "solution": "\n```python\ndef split_words(txt):\n    words = txt.split()\n    if not words:\n        return []\n    words = [word.lower() for word in words]\n    return words[::2]\n```\n\nThe `split_words` function first splits the input string `txt` into a list of words using the `split` method. It then checks if the"}
{"task_id": "HumanEval/126", "solution": "```"}
{"task_id": "HumanEval/127", "solution": "\n"}
{"task_id": "HumanEval/128", "solution": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n   "}
{"task_id": "HumanEval/129", "solution": "\n"}
{"task_id": "HumanEval/130", "solution": "\n"}
{"task_id": "HumanEval/131", "solution": "```python\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    odd_digits = [i for i in range(1, 10) if n % i == 0]\n    return sum(i * j for i, j in enumerate(odd_digits))\n```\n\nThe `digits` function first checks if the input integer `n` is even. If it is, it returns 0. Otherwise, it iterates through the odd digits of `n` and multip"}
{"task_id": "HumanEval/132", "solution": "\n```python\ndef is_nested(string):\n    bracket_count = 0\n    for bracket in string:\n        if bracket == ']':\n            bracket_count += 1\n        elif bracket == ']':\n            bracket_count -= 1\n        elif bracket == ']':\n            bracket_count -= 1\n        elif"}
{"task_id": "HumanEval/133", "solution": "\n```python\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3]"}
{"task_id": "HumanEval/134", "solution": "```python\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note:"}
{"task_id": "HumanEval/135", "solution": "```python\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    if not arr:\n        return -1\n\n    # Find the index of the first element that is not greater than or equal to"}
{"task_id": "HumanEval/136", "solution": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4"}
{"task_id": "HumanEval/137", "solution": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be. or,\n\n    compare_one(1, 2"}
{"task_id": "HumanEval/138", "solution": "```python\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    if n % 4 == 0:\n        return False\n    if n % 8 == 0:\n        return False\n    if n % 16 == 0:\n        return"}
{"task_id": "HumanEval/139", "solution": "\n```python\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be non-negative\")\n    if n == "}
{"task_id": "HumanEval/140", "solution": "\n```python\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    text = text"}
{"task_id": "HumanEval/141", "solution": "```python\ndef file_name"}
{"task_id": "HumanEval/142", "solution": "```python\ndef sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and"}
{"task_id": "HumanEval/143", "solution": "\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    words = [word for word in words if len(word) == 2]\n    words.sort()\n    return \" \".join(words)\n\n# Test cases\nprint(words_in_sentence(\"This is a test\")) "}
{"task_id": "HumanEval/144", "solution": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both"}
{"task_id": "HumanEval/145", "solution": "```python\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1"}
{"task_id": "HumanEval/146", "solution": "\n```python\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1\n    specialFilter([33, -2, -3"}
{"task_id": "HumanEval/147", "solution": "\n```python\ndef get_max_triples(n):\n    a = [1, 3, 7, 13, 21]\n    max_triples = 0\n    for i in range(len(a)):\n       "}
{"task_id": "HumanEval/148", "solution": "\n"}
{"task_id": "HumanEval/149", "solution": "```python\ndef list_sort(lst):\n    \"\"\"\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it"}
{"task_id": "HumanEval/150", "solution": "```python\ndef x_or_y(n, x, y):\n    if n == 2:\n        return x\n    elif n == 3 or n == 5:\n        return y\n    else:\n        return x_or_y(n - 1, x, y)\n\n# Test the function\nprint(x_or_y(7, 34, 12))  # Output: 34\nprint(x_or_y(15, 8, 5))  # Output: 5\n```\n\nThe `x_or_y` function first checks if the input `n` is a"}
{"task_id": "HumanEval/151", "solution": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10"}
{"task_id": "HumanEval/152", "solution": "\n"}
{"task_id": "HumanEval/153", "solution": "```"}
{"task_id": "HumanEval/154", "solution": "\ndef cycpattern_check(a, b):\n    if len(a)!= len(b):\n        return False\n\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n\n    return True\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # Output: False\nprint(cycpattern_check(\"hello\", \"ell\"))  # Output"}
{"task_id": "HumanEval/155", "solution": "```python\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if digit.isdigit():\n            if digit.isdigit():\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n```\n\nThe `even_odd_count` function takes an integer `"}
{"task_id": "HumanEval/156", "solution": "```python\ndef int_to_mini_roman(number):\n    if number < 1000:\n        return str(number)\n    else:\n        roman_numeral = ''\n        while number > 0:\n            roman_numeral += str(number % 1000)\n            number //= 1000\n        return roman_numeral[::-1]\n```\nThe `int_to_mini_roman` function first checks if"}
{"task_id": "HumanEval/157", "solution": "\ndef right_angle_triangle(a, b, c):\n    if a + b > c:\n        return False\n    if a + c > b:\n        return False\n    if a + c > b:\n        return False\n    if a + b > c:\n        return False\n    if a + b > c:\n        return False\n    if a + b > c:\n        return False\n    if a + b > c:\n        return False\n    if a + b > c:\n        return False\n    if a + b > c:\n"}
{"task_id": "HumanEval/158", "solution": "```python\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max"}
{"task_id": "HumanEval/159", "solution": "```"}
{"task_id": "HumanEval/160", "solution": "```python\ndef do_"}
{"task_id": "HumanEval/161", "solution": "\n```python\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    if"}
{"task_id": "HumanEval/162", "solution": "```python\nimport hashlib\n\ndef string_to_md5(text):\n    if text:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n    else:\n        return None\n```\n\nThe `string_to_md5` function first checks if the input string is not empty. If it is, it uses the `hashlib.md5` module to calculate the md5 hash of the input string. If the input string is empty, it returns `None`. Otherwise, it returns the md5 hash of the input string. This solution ensures that the function handles both empty and non-empty strings correctly. If the input string is empty, the function"}
{"task_id": "HumanEval/163", "solution": "```python\ndef generate_integers(a, b):\n    digits = []\n    while a <= b:\n        digits.append(a % 10)\n        a = a // 10\n    return digits\n```\n\nThe `generate_integers` function iterates through the range of positive integers from `a` to `b`, appending each digit to a list `digits`. It then returns the list of even digits between `a` and `b`, in ascending order. The function uses the modulo operator `%` to extract the digits from the input integers and appends them"}
